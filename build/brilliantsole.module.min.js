/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),o=console.warn.bind(console),a=console.error.bind(console),c=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new h(e)}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?o:i}get error(){return this.#t.error?a:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function l(e,t){return h.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=l("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#o;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#o||(this.#o={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#o;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#o?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#o[e].indexOf(t);return this.#o[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#o?.[e.type]){e.target=this.#s;const t=this.#o[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const m=l("ConnectionManager");class f{get id(){this.#a("id")}onStatusUpdated;onMessageReceived;static#c(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#a(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#c("type")}get type(){return this.constructor.type}#h(){m.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){m.assertWithError(this.constructor!=f,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#h()}#g="not connected";get status(){return this.#g}set status(e){m.assertTypeWithError(e,"string"),this.#g!=e?(m.log(`new connection status "${e}"`),this.#g=e,this.onStatusUpdated?.(this.status)):m.log("tried to assign same connection status")}get isConnected(){return"connected"==this.status}#d(){m.assertWithError(!this.isConnected,"device is already connected")}#u(){m.assertWithError("connecting"!=this.status,"device is already connecting")}#v(){m.assertWithError(this.isConnected,"device is not connected")}#p(){m.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#m(){this.#v(),this.#p()}async connect(){this.#d(),this.#u(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#d(),this.#u(),m.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#v(),this.#p(),this.status="disconnecting"}async sendMessage(e,t){this.#m(),m.log("sending message",{messageType:e,data:t})}}if(t){var S=require("webbluetooth").BluetoothUUID}if(e)S=window.BluetoothUUID;function b(e){return`ea6da725-2000-4f9b-893d-c3913e33b3e${e}`}function D(e){return S.getCharacteristic(e)}function y(e){return S.getService(e)}const E=Object.freeze({services:{deviceInformation:{uuid:y("device_information"),characteristics:{manufacturerName:{uuid:D("manufacturer_name_string")},modelNumber:{uuid:D("model_number_string")},hardwareRevision:{uuid:D("hardware_revision_string")},firmwareRevision:{uuid:D("firmware_revision_string")},softwareRevision:{uuid:D("software_revision_string")},pnpId:{uuid:D("pnp_id")},serialNumber:{uuid:D("serial_number_string")}}},battery:{uuid:y("battery_service"),characteristics:{batteryLevel:{uuid:D("battery_level")}}},main:{uuid:b(0),characteristics:{name:{uuid:b(1)},type:{uuid:b(2)},sensorConfiguration:{uuid:b(3)},sensorData:{uuid:b(4)},vibration:{uuid:b(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),C=E.serviceUUIDs,w=E.optionalServiceUUIDs,T=[...C,...w];function L(e){return E.getServiceNameFromUUID(e)}const M=[],N=[],W=[];function R(e){return E.getCharacteristicNameFromUUID(e)}function k(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":t.read=!1}switch(e){case"batteryLevel":case"sensorData":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(E.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{C.includes(t.uuid)&&M.push(s.uuid),N.push(s.uuid),W.push(e)}))}),[]);const x=l("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var I={bluetooth:t}}if(e)I=window.navigator;class A extends f{get id(){return this.device?.id}#f={characteristicvaluechanged:this.#S.bind(this)};#b={gattserverdisconnected:this.#D.bind(this)};static get isSupported(){return"bluetooth"in I}static get type(){return"webBluetooth"}#y;get device(){return this.#y}set device(e){this.#y!=e?(this.#y&&p(this.#y,this.#b),e&&v(e,this.#b),this.#y=e):x.log("tried to assign the same BluetoothDevice")}get server(){return this.#y?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#C=new Map;async connect(){await super.connect();try{const t=await I.bluetooth.requestDevice({filters:[{services:C}],optionalServices:e?w:[]});x.log("got BluetoothDevice"),this.device=t,x.log("connecting to device...");const s=await this.device.gatt.connect();x.log(`connected to device? ${s.connected}`),await this.#w(),x.log("fully connected"),this.status="connected"}catch(e){x.error(e),this.status="not connected",this.server?.disconnect(),this.#T()}}async#w(){this.#T(),x.log("getting services...");const e=await this.server.getPrimaryServices();x.log("got services",e.length),x.log("getting characteristics...");for(const t in e){const i=e[t];x.log({service:i});const r=L(i.uuid);if(x.assertWithError(r,`no name found for service uuid "${i.uuid}"`),x.log(`got "${r}" service`),"dfu"==r){x.log("skipping dfu service");continue}i._name=r,this.#E.set(r,i),x.log(`getting characteristics for "${r}" service`);const o=await i.getCharacteristics();x.log(`got characteristics for "${r}" service`);for(const e in o){const t=o[e];x.log({characteristic:t});const i=R(t.uuid);x.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),x.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#C.set(i,t),v(t,this.#f);const a=t.properties||k(i);a.read&&(x.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#L(t)),a.notify&&(x.log(`starting notifications for "${i}" characteristic`),await t.startNotifications())}}}#T(){this.device&&p(this.device,this.#b),this.#C.forEach((e=>{p(e,this.#f)}))}async disconnect(){await super.disconnect(),x.log("disconnecting from device..."),this.server?.disconnect(),this.#T(),this.status="not connected"}#S(e){x.log("oncharacteristicvaluechanged");const t=e.target;this.#L(t)}#L(e){x.log("onCharacteristicValue");const t=e._name;x.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),x.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;switch(x.assertWithError(s,`no data found for "${t}" characteristic`),x.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),t){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${t}"`)}}#D(e){x.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s,n;switch(await super.sendMessage(...arguments),e){case"setName":n="name",s=this.#C.get(n);break;case"setType":n="type",s=this.#C.get(n);break;case"setSensorConfiguration":n="sensorConfiguration",s=this.#C.get(n);break;case"triggerVibration":n="vibration",s=this.#C.get(n);break;default:throw Error(`uncaught messageType "${e}"`)}x.assert(s,"no characteristic found"),t instanceof DataView&&(t=t.buffer),await s.writeValueWithResponse(t);(s.properties||k(n)).read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),x.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(x.log("successfully reconnected!"),await this.#w(),this.status="connected"):(x.log("unable to reconnect"),this.status="not connected")}}const O=new TextEncoder;function U(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return $(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return $(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function _(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function $(e){const t=O.encode(e);return U(t.byteLength,t)}const P=l("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class V extends f{get id(){return this.#M?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return this.#M?._isConnected}async connect(){await super.connect(),await this.#M.connectAsync()}async disconnect(){await super.disconnect(),P.log("disconnecting from device..."),await this.#M.disconnectAsync()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return this.#M.connectable}async reconnect(){await super.reconnect(),P.log("attempting to reconnect..."),this.connect()}#M;get nobleDevice(){return this.#M}set nobleDevice(e){P.assertTypeWithError(e,"object"),this.nobleDevice!=e?(P.log({newNobleDevice:e}),this.#M&&(p(this.#M,this.#N),delete this.#M._connectionManager),e&&(e._connectionManager=this,v(e,this.#N)),this.#M=e):P.log("attempted to assign duplicate nobleDevice")}#N={connect:this.#W,disconnect:this.#R,rssiUpdate:this.#k,servicesDiscover:this.#x};async#W(){await this._connectionManager.onNobleDeviceConnect(this)}async onNobleDeviceConnect(e){P.log("onNobleDeviceConnect",e.id),e._isConnected=!0,await this.#M.discoverServicesAsync(T)}async#R(){await this._connectionManager.onNobleDeviceConnect(this)}async onNobleDeviceDisconnect(e){P.log("onNobleDeviceDisconnect",e.id),this.#E.forEach((e=>{p(e,this.#I)})),this.#E.clear(),this.#C.forEach((e=>{p(e,this.#A)})),this.#C.clear(),e._isConnected=!1,this.status="not connected"}async#k(e){await this._connectionManager.onNobleDeviceRssiUpdate(this,e)}async onNobleDeviceRssiUpdate(e,t){P.log("onNobleDeviceRssiUpdate",e.id,t)}async#x(e){await this._connectionManager.onNobleDeviceServicesDiscover(this,e)}async onNobleDeviceServicesDiscover(e,t){P.log("onNobleDeviceServicesDiscover",e.id,t);for(const e in t){const s=t[e];P.log("service",s);const n=L(s.uuid);P.assertWithError(n,`no name found for service uuid "${s.uuid}"`),P.log({serviceName:n}),this.#E.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#I),await s.discoverCharacteristicsAsync()}}#E=new Map;#I={characteristicsDiscover:this.#O};async#O(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){P.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];P.log("characteristic",s);const n=R(s.uuid);P.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),P.log({characteristicName:n}),this.#C.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#A),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#U&&(this.status="connected")}#A={data:this.#_,write:this.#$,notify:this.#P};#C=new Map;get#U(){return W.every((e=>this.#C.has(e)))}#_(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){P.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(_(t)),i=e._name;switch(P.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),i){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${i}"`)}}#$(){P.log("onNobleCharacteristicWrite",...arguments)}onNobleCharacteristicWrite(){}#P(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){P.log("onNobleCharacteristicNotify",e.uuid,t)}}const z={min:1/0,max:-1/0};class B{#V=Object.assign({},z);reset(){Object.assign(this.#V,z)}update(e){this.#V.min=Math.min(e,this.#V.min),this.#V.max=Math.max(e,this.#V.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#V.min,this.#V.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class F{#V={x:new B,y:new B};reset(){this.#V.x.reset(),this.#V.y.reset()}update(e){this.#V.x.update(e.x),this.#V.y.update(e.y)}getNormalization(e){return{x:this.#V.x.getNormalization(e.x),y:this.#V.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const q=l("PressureSensorDataManager",{log:!0});class j{#z;get deviceType(){return this.#z}set deviceType(e){q.assertTypeWithError(e,"string"),this.#z!=e?(q.log({newDeviceType:e}),this.#z=e,this.#B(),this.resetRange()):q.log(`redundant deviceType assignment "${e}"`)}static#F=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#F}get names(){return j.Names}static#q={pressure:2**-16};static get Scalars(){return this.#q}get scalars(){return j.Scalars}static#j=8;static get NumberOfPressureSensors(){return this.#j}get numberOfPressureSensors(){return j.NumberOfPressureSensors}static#H=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#H}#G;get pressureSensorPositions(){return this.#G}#B(){const e=j.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));q.log({pressureSensorPositions:e}),this.#G=e}#Z=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new B));#Q=new F;resetRange(){this.#Z.forEach((e=>e.reset())),this.#Q.reset()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const i=e.getUint16(t,!0),r=this.#Z[n].updateAndGetNormalization(i),o=this.pressureSensorPositions[n],a=this.names[n];s.sensors[n]={rawValue:i,normalizedValue:r,position:o,name:a},s.rawSum+=i,s.normalizedSum+=r/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#Q.updateAndGetNormalization(s.center)),q.log({pressure:s}),s}}const H=l("MotionSensorDataManager",{log:!1});class G{#z;get deviceType(){return this.#z}set deviceType(e){H.assertTypeWithError(e,"string"),this.#z!=e?(H.log({newDeviceType:e}),this.#z=e):H.log(`redundant deviceType assignment "${e}"`)}static#q={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#q}get scalars(){return G.Scalars}static#J=6;static get Vector3Size(){return this.#J}get vector3Size(){return G.Vector3Size}parseVector3(e,t,s){let[n,i,r]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:i,z:r};return H.log({vector:o}),o}static#K=8;static get QuaternionSize(){return this.#K}get quaternionSize(){return G.QuaternionSize}parseQuaternion(e,t,s){let[n,i,r,o]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:i,z:r,w:o};return H.log({quaternion:a}),a}}l("BarometerSensorDataManager",{log:!0});class Z{static#q={barometer:.78125};static get Scalars(){return this.#q}get scalars(){return Z.Scalars}}const Q=l("SensorDataManager",{log:!1});class J{#z;get deviceType(){return this.#z}set deviceType(e){Q.assertTypeWithError(e,"string"),this.#z!=e?(Q.log({newDeviceType:e}),this.#z=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):Q.log(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new j;motionSensorDataManager=new G;barometerSensorDataManager=new Z;static#X=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#X}get#Y(){return J.Types}static AssertValidSensorType(e){Q.assertTypeWithError(e,"string"),Q.assertWithError(this.#X.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){Q.assertTypeWithError(e,"number"),Q.assertWithError(e in this.#X,`invalid sensorTypeEnum ${e}`)}onDataReceived;#ee=0;#te=0;clearTimestamp(){Q.log("clearing sensorDataManager timestamp data"),this.#ee=0,this.#te=0}#se(e,t){const s=e.getUint16(t,!0);s<this.#te&&(this.#ee+=65536),this.#te=s;return s+this.#ee}parse(e){Q.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#se(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let i;J.AssertValidSensorTypeEnum(n);const r=e.getUint8(t++),o=this.#Y[n];switch(Q.log({sensorTypeEnum:n,sensorType:o,sensorTypeDataSize:r}),o){case"pressure":i=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(e,t,o);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(e,t,o);break;case"barometer":break;default:Q.error(`uncaught sensorType "${o}"`)}t+=r,Q.assertWithError(i,`no value defined for sensorType "${o}"`),this.onDataReceived?.(o,{timestamp:s,[o]:i})}}static get NumberOfPressureSensors(){return j.NumberOfPressureSensors}get numberOfPressureSensors(){return J.NumberOfPressureSensors}static get PressureSensorNames(){return j.Names}get pressureSensorNames(){return J.PressureSensorNames}}const K=l("SensorConfigurationManager",{log:!1});class X{#z;get deviceType(){return this.#z}set deviceType(e){K.assertTypeWithError(e,"string"),this.#z!=e?(K.log({newDeviceType:e}),this.#z=e):K.log(`redundant deviceType assignment "${e}"`)}#ne;#ie(e){K.assertWithError(this.#ne,"must get initial sensorConfiguration");const t=this.#ne?.includes(e);return K.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=J.Types[n];if(!i){K.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);K.log({sensorType:i,sensorRate:r}),t[i]=r}return K.log({parsedSensorConfiguration:t}),this.#ne=Object.keys(t),t}static#re=65535;static get MaxSensorRate(){return this.#re}get maxSensorRate(){return X.MaxSensorRate}static#oe=5;static get SensorRateStep(){return this.#oe}get sensorRateStep(){return X.SensorRateStep}#ae(e){K.assertTypeWithError(e,"number"),K.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),K.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),K.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#ie(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{J.AssertValidSensorType(t);const i=J.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#ae(r),s.setUint16(3*n+1,e[t],!0)})),K.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const Y=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ee=l("VibrationManager");class te{static#ce=["front","rear"];static get Locations(){return this.#ce}get locations(){return te.Locations}#he(e){ee.assertTypeWithError(e,"string"),ee.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#le(e){this.#ge(e),e.forEach((e=>{this.#he(e)}))}#de(e){this.#le(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ee.log({locationsBitmask:t}),ee.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ge(e){ee.assertWithError(Array.isArray(e),"passed non-array"),ee.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return Y}get waveformEffects(){return te.WaveformEffects}#ue(e){ee.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#ve=1270;static get MaxWaveformEffectSegmentDelay(){return this.#ve}get maxWaveformEffectSegmentDelay(){return te.MaxWaveformEffectSegmentDelay}#pe(e){if(null!=e.effect){const t=e.effect;this.#ue(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ee.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ee.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#me(t)}}static#fe=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#fe}get maxWaveformEffectSegmentLoopCount(){return te.MaxWaveformEffectSegmentLoopCount}#me(e){ee.assertTypeWithError(e,"number"),ee.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ee.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#Se=8;static get MaxNumberOfWaveformEffectSegments(){return this.#Se}get maxNumberOfWaveformEffectSegments(){return te.MaxNumberOfWaveformEffectSegments}#be(e){this.#ge(e),ee.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#pe(e)}))}static#De=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#De}get maxWaveformEffectSequenceLoopCount(){return te.MaxWaveformEffectSequenceLoopCount}#ye(e){ee.assertTypeWithError(e,"number"),ee.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ee.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Ee=2550;static get MaxWaveformSegmentDuration(){return this.#Ee}get maxWaveformSegmentDuration(){return te.MaxWaveformSegmentDuration}#Ce(e){ee.assertTypeWithError(e.amplitude,"number"),ee.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ee.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ee.assertTypeWithError(e.duration,"number"),ee.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ee.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#we=20;static get MaxNumberOfWaveformSegments(){return this.#we}get maxNumberOfWaveformSegments(){return te.MaxNumberOfWaveformSegments}#Te(e){this.#ge(e),ee.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Ce(e)}))}createWaveformEffectsData(e,t,s=0){this.#be(t),this.#ye(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const o=0!=s;for(let e=0;e<t.length||o&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const a=new DataView(Uint8Array.from(n).buffer);return ee.log({dataArray:n,dataView:a}),this.#Le(e,"waveformEffect",a)}createWaveformData(e,t){this.#Te(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ee.log({dataView:s}),this.#Le(e,"waveform",s)}static#X=["waveformEffect","waveform"];static get Types(){return this.#X}get#Y(){return te.Types}#Me(e){ee.assertTypeWithError(e,"string"),ee.assertWithError(this.#Y.includes(e),`invalid vibrationType "${e}"`)}#Le(e,t,s){ee.assertWithError(s?.byteLength>0,"no data received");const n=this.#de(e);this.#Me(t);const i=this.#Y.indexOf(t);ee.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=U(n,i,s.byteLength,s);return ee.log({data:r}),r}}const se=l("Device",{log:!0});class ne{get id(){return this.#Ne?.id}constructor(){this.#We.onDataReceived=this.#Re.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{ne.#ke(this)}))}static get#xe(){return A}static#Ie=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#Ie}get eventTypes(){return ne.#Ie}#Ae=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ae.addEventListener(e,t,s)}#Oe(e){this.#Ae.dispatchEvent(e)}removeEventListener(e,t){return this.#Ae.removeEventListener(e,t)}#Ne;get connectionManager(){return this.#Ne}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Ue.bind(this),e.onMessageReceived=this.#_e.bind(this)),this.#Ne=e,se.log("assigned new connectionManager",this.#Ne)):se.log("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new ne.#xe),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#v(){se.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#$e=!1;static get ReconnectOnDisconnection(){return this.#$e}static set ReconnectOnDisconnection(e){se.assertTypeWithError(e,"boolean"),this.#$e=e}#Pe=ne.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Pe}set reconnectOnDisconnection(e){se.assertTypeWithError(e,"boolean"),this.#Pe=e}#Ve;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#v(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#Ne?.status||"not connected"}#Ue(e){switch(se.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(se.log("starting reconnect interval..."),this.#Ve=setInterval((()=>{se.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Ve&&(se.log("clearing reconnect interval"),clearInterval(this.#Ve),this.#Ve=void 0),this.#Oe({type:"connectionStatus",message:{connectionStatus:e}}),this.#Oe({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Oe({type:"isConnected",message:{isConnected:this.isConnected}})}}#ze(){this.#Be=null,this.#Fe=null,this.#qe=null;for(const e in this.#je)this.#je[e]=null}#_e(e,t){switch(se.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#He.decode(t);se.log({manufacturerName:s}),this.#Ge({manufacturerName:s});break;case"modelNumber":const n=this.#He.decode(t);se.log({modelNumber:n}),this.#Ge({modelNumber:n});break;case"softwareRevision":const i=this.#He.decode(t);se.log({softwareRevision:i}),this.#Ge({softwareRevision:i});break;case"hardwareRevision":const r=this.#He.decode(t);se.log({hardwareRevision:r}),this.#Ge({hardwareRevision:r});break;case"firmwareRevision":const o=this.#He.decode(t);se.log({firmwareRevision:o}),this.#Ge({firmwareRevision:o});break;case"pnpId":const a={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==a.source&&(a.vendorId=t.getUint8(1)|t.getUint8(2)<<8),se.log({pnpId:a}),this.#Ge({pnpId:a});break;case"serialNumber":const c=this.#He.decode(t);se.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);se.log("received battery level",{batteryLevel:h}),this.#Ze(h);break;case"getName":const l=this.#He.decode(t);se.log({name:l}),this.#Qe(l);break;case"getType":const g=t.getUint8(0),d=this.#Y[g];se.log({typeEnum:g,type:d}),this.#Je(d);break;case"getSensorConfiguration":const u=this.#Ke.parse(t);se.log({sensorConfiguration:u}),this.#Xe(u);break;case"sensorData":this.#We.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#Ye=new TextEncoder;get#et(){return ne.#Ye}static#tt=new TextDecoder;get#He(){return ne.#tt}#je={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#je}get#st(){return Object.values(this.#je).every((e=>null!=e))}#Ge(e){se.log({partialDeviceInformation:e});for(const t in e)this.#Oe({type:t,message:{[t]:e[t]}});Object.assign(this.#je,e),se.log({deviceInformation:this.#je}),this.#st&&(se.log("completed deviceInformation"),this.#Oe({type:"deviceInformation",message:{deviceInformation:this.#je}}))}#qe=null;get batteryLevel(){return this.#qe}#Ze(e){se.assertTypeWithError(e,"number"),this.#qe!=e?(this.#qe=e,se.log({updatedBatteryLevel:this.#qe}),this.#Oe({type:"batteryLevel",message:{batteryLevel:this.#qe}})):se.log(`duplicate batteryLevel assignment ${e}`)}#Be;get name(){return this.#Be}#Qe(e){se.assertTypeWithError(e,"string"),this.#Be=e,se.log({updatedName:this.#Be}),this.#Oe({type:"getName",message:{name:this.#Be}})}static get MinNameLength(){return 2}get minNameLength(){return ne.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return ne.MaxNameLength}async setName(e){this.#v(),se.assertTypeWithError(e,"string"),se.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),se.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#et.encode(e);se.log({setNameData:t}),await this.#Ne.sendMessage("setName",t)}static#X=["leftInsole","rightInsole"];static get Types(){return this.#X}get#Y(){return ne.Types}#Fe;get type(){return this.#Fe}#nt(e){se.assertTypeWithError(e,"string"),se.assertWithError(this.#Y.includes(e),`invalid type "${e}"`)}#Je(e){this.#nt(e),e!=this.type?(this.#Fe=e,se.log({updatedType:this.#Fe}),this.#We.deviceType=this.#Fe,this.#Ke.deviceType=this.#Fe,this.#Oe({type:"getType",message:{type:this.#Fe}}),ne.#it&&ne.#rt(this)):se.log("redundant type assignment")}async setType(e){this.#v(),this.#nt(e);const t=this.#Y.indexOf(e),s=Uint8Array.from([t]);se.log({setTypeData:s}),await this.#Ne.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ot=["left","right"];static get InsoleSides(){return this.#ot}get insoleSides(){return ne.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return J.Types}get sensorTypes(){return ne.SensorTypes}static get PressureSensorNames(){return J.PressureSensorNames}get pressureSensorNames(){return ne.PressureSensorNames}static get NumberOfPressureSensors(){return J.NumberOfPressureSensors}get numberOfPressureSensors(){return ne.NumberOfPressureSensors}#Ke=new X;#at;get sensorConfiguration(){return this.#at}static get MaxSensorRate(){return X.MaxSensorRate}static get SensorRateStep(){return X.SensorRateStep}#Xe(e){this.#at=e,se.log({updatedSensorConfiguration:this.#at}),this.#Ke.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(se.log("clearing sensorDataManager timestamp..."),this.#We.clearTimestamp()),this.#Oe({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#v(),se.log({newSensorConfiguration:e});const t=this.#Ke.createData(e);se.log({setSensorConfigurationData:t}),await this.#Ne.sendMessage("setSensorConfiguration",t)}static#ct=!0;static get ClearSensorConfigurationOnLeave(){return this.#ct}static set ClearSensorConfigurationOnLeave(e){se.assertTypeWithError(e,"boolean"),this.#ct=e}#ht=ne.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#ht}set clearSensorConfigurationOnLeave(e){se.assertTypeWithError(e,"boolean"),this.#ht=e}static#lt={};static get ZeroSensorConfiguration(){return this.#lt}static{this.SensorTypes.forEach((e=>{this.#lt[e]=0}))}get zeroSensorConfiguration(){return ne.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#We=new J;#Re(e,t){se.log({sensorType:e,sensorData:t}),this.#Oe({type:e,message:t}),this.#Oe({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#We.pressureSensorDataManager.resetRange()}#gt=new te;static get VibrationLocations(){return te.Locations}static get VibrationTypes(){return te.Types}static get VibrationWaveformEffects(){return te.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return te.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return te.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return te.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return te.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return te.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return te.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let i;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:r}=t;i=this.#gt.createWaveformEffectsData(s,n,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;i=this.#gt.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}se.log({type:n,dataView:i}),t=U(t,i)})),await this.#Ne.sendMessage("triggerVibration",t)}static#dt=[];static get ConnectedDevices(){return this.#dt}static#it=!1;static get UseLocalStorage(){return this.#it}static set UseLocalStorage(e){this.#ut(),se.assertTypeWithError(e,"boolean"),this.#it=e,this.#it&&!this.#vt&&this.#pt()}static#mt={devices:[]};static#vt;static get CanUseLocalStorage(){return e&&window.localStorage}static#ut(){se.assertWithError(e,"localStorage is only available in the browser"),se.assertWithError(window.localStorage,"localStorage not found")}static#ft="BS.Device";static#St(){this.#ut(),localStorage.setItem(this.#ft,JSON.stringify(this.#vt))}static async#pt(){this.#ut();let e=localStorage.getItem(this.#ft);if("string"!=typeof e)return se.log("no info found in localStorage"),this.#vt=Object.assign({},this.#mt),void this.#St();try{const t=JSON.parse(e);se.log({configuration:t}),this.#vt=t,this.CanGetDevices&&await this.GetDevices()}catch(e){se.error(e)}}static#rt(e){if("webBluetooth"!=e.connectionType)return void se.log("localStorage is only for webBluetooth devices");this.#ut();const t=this.#vt.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#vt.devices[t].type=e.type,this.#St())}static#bt=[];static get AvailableDevices(){return this.#bt}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void se.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void se.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void se.warn("bluetooth.getDevices() is not available in this browser");this.#vt||this.#pt();const t=this.#vt;if(!t.devices||0==t.devices.length)return void se.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return se.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#bt.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new ne,o=new A;o.device=e,e.name&&r.#Qe(e.name),r.#Je(s.type),r.connectionManager=o,this.AvailableDevices.push(r)})),this.#Dt({type:"availableDevices",message:{devices:this.AvailableDevices}}),se.log({AvailableDevices:this.AvailableDevices}),this.AvailableDevices}static#yt=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#yt}static#Et=new u(this,this.#yt);static AddEventListener(e,t,s){this.#Et.addEventListener(e,t,s)}static#Dt(e){this.#Et.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Et.removeEventListener(e,t)}static#ke(e){if(e.isConnected)if(this.#dt.includes(e))se.log("device already included");else{if(se.log("adding device",e),this.#dt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#vt.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#vt.devices.push(t):this.#vt.devices[s]=t,this.#St()}this.#Dt({type:"deviceConnected",message:{device:e}}),this.#Dt({type:"deviceIsConnected",message:{device:e}})}else this.#dt.includes(e)?(se.log("removing device",e),this.#dt.splice(this.#dt.indexOf(e),1),this.#Dt({type:"deviceDisconnected",message:{device:e}}),this.#Dt({type:"deviceIsConnected",message:{device:e}})):se.log("device already not included");this.CanGetDevices&&this.GetDevices()}static async Connect(){const e=new ne;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const ie=l("Timer",{log:!1});class re{#Ct;get callback(){return this.#Ct}set callback(e){ie.assertTypeWithError(e,"function"),ie.log({newCallback:e}),this.#Ct=e,this.isRunning&&this.restart()}#wt;get interval(){return this.#wt}set interval(e){ie.assertTypeWithError(e,"number"),ie.assertWithError(e>0,"interval must be above 0"),ie.log({newInterval:e}),this.#wt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#Tt=null;get isRunning(){return null!=this.#Tt}start(){this.isRunning?ie.log("interval already running"):(ie.log("starting interval"),this.#Tt=setInterval(this.#Ct,this.#wt))}stop(){this.isRunning?(ie.log("stopping interval"),clearInterval(this.#Tt),this.#Tt=null):ie.log("interval already not running")}restart(){this.stop(),this.start()}}const oe=l("BaseScanner");class ae{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#h(){oe.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){oe.assertWithError(this.constructor!=ae,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#h(),v(this,this.#Lt)}#Lt={discoveredDevice:this.#Mt.bind(this),isScanning:this.#Nt.bind(this)};static#Ie=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Ie}get eventTypes(){return ae.#Ie}#Ae=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ae.addEventListener(e,t,s)}dispatchEvent(e){this.#Ae.dispatchEvent(e)}removeEventListener(e,t){return this.#Ae.removeEventListener(e,t)}get isAvailable(){return!1}#Wt(){oe.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#Rt(){oe.assertWithError(this.isScanning,"not scanning")}#kt(){oe.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#Wt(),this.#kt()}stopScan(){this.#Rt()}#Nt(){this.isScanning?(this.#xt={},this.#It={}):this.#At.stop()}#xt={};get discoveredDevices(){return this.#xt}get discoveredDevicesArray(){return Object.values(this.#xt).sort(((e,t)=>this.#It[e.id]-this.#It[t.id]))}#Ot(e){oe.assertWithError(this.#xt[e],`no discovered device with id "${e}"`)}#Mt(e){const t=e.message.discoveredDevice;this.#xt[t.id]=t,this.#It[t.id]=Date.now(),this.#At.start()}#It={};static#Ut=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#Ut}get#_t(){return ae.DiscoveredDeviceExpirationTimeout}#At=new re(this.#$t.bind(this),1e3);#$t(){const e=Object.entries(this.#xt);if(0==e.length)return void this.#At.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#It[e];console.log(t-n),t-n>this.#_t&&(oe.log("discovered device timeout"),delete this.#xt[e],delete this.#It[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}connectToDevice(e){this.#Wt()}disconnectFromDevice(e){this.#Wt()}reset(){oe.log("resetting...")}}const ce=l("NobleScanner",{log:!0});let he=!1;if(t){var le=require("@abandonware/noble");he=!0}class ge extends ae{static get isSupported(){return he}#Pt=!1;get#Vt(){return this.#Pt}set#Vt(e){ce.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Pt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ce.log("duplicate isScanning assignment")}get isScanning(){return this.#Vt}#zt="unknown";get#Bt(){return this.#zt}set#Bt(e){ce.assertTypeWithError(e,"string"),this.#Bt!=e?(this.#zt=e,ce.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ce.log("duplicate nobleState assignment")}#Ft={scanStart:this.#qt.bind(this),scanStop:this.#jt.bind(this),stateChange:this.#Ht.bind(this),discover:this.#Gt.bind(this)};#qt(){ce.log("OnNobleScanStart"),this.#Vt=!0}#jt(){ce.log("OnNobleScanStop"),this.#Vt=!1}#Ht(e){ce.log("onNobleStateChange",e),this.#Bt=e}#Gt(e){let t;ce.log("onNobleDiscover",e),this.#Zt[e.id]||(e._scanner=this,this.#Zt[e.id]=e,v(e,this.#N));const s=e.advertisement.serviceData;if(s){const e=C[0].replaceAll("-",""),n=s.find((t=>t.uuid==e));if(n){const e=n.data.readUint8(0);t=ne.Types[e]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(le,this.#Ft),v(this,this.#Qt)}get isAvailable(){return"poweredOn"==this.#Bt}startScan(){super.startScan(),le.startScanningAsync(C,!0)}stopScan(){super.stopScan(),le.stopScanningAsync()}reset(){super.reset(),le.reset()}#Qt={expiredDiscoveredDevice:this.#Jt.bind(this)};#Jt(e){const t=e.message.discoveredDevice,s=this.#Zt[t.id];s&&(delete this.#Zt[t.id],p(s,this.#N))}#Zt={};#Kt(e){ce.assertTypeWithError(e,"string"),ce.assertWithError(this.#Zt[e],`no nobleDevice found with id "${e}"`)}#N={};#W(){this._scanner.onNobleDeviceConnect(this)}onNobleDeviceConnect(e){ce.log("onNobleDeviceConnect",e.id)}#R(){this._scanner.onNobleDeviceConnect(this)}onNobleDeviceDisconnect(e){ce.log("onNobleDeviceDisconnect",e.id)}#k(e){this._scanner.onNobleDeviceRssiUpdate(this,e)}onNobleDeviceRssiUpdate(e,t){ce.log("onNobleDeviceRssiUpdate",e,t)}#x(e){this._scanner.onNobleDeviceServicesDiscover(this,e)}onNobleDeviceServicesDiscover(e,t){ce.log("onNobleDeviceServicesDiscover",e,t)}connectToDevice(e){super.connectToDevice(e),this.#Kt(e);const t=this.#Zt[e];ce.log("connecting to discoveredDevice...",e);const s=new ne,n=new V;n.nobleDevice=t,s.connectionManager=n,s.connect()}disconnectFromDevice(e){super.disconnectFromDevice(e),this.#Kt(e),this.#Zt[e],ce.log("disconnecting from discoveredDevice...",e)}}const de=l("Scanner",{log:!1});let ue;ge.isSupported?(de.log("using NobleScanner"),ue=new ge):de.log("Scanner not available");var ve=ue;const pe=l("DevicePairPressureSensorDataManager",{log:!0});class me{static get Sides(){return ne.InsoleSides}get sides(){return ne.InsoleSides}#Xt={};#Q=new F;resetPressureRange(){this.#Q.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(pe.log({pressure:t,insoleSide:s}),this.#Xt[s]=t,this.#Yt)return this.#es();pe.log("doesn't have all pressure data yet...")}get#Yt(){return this.sides.every((e=>e in this.#Xt))}static#q={pressure:j.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#q}get scalars(){return me.Scalars}#es(){this.scalars.pressure;const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Xt[t].rawSum,e.normalizedSum+=this.#Xt[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Xt[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#Q.updateAndGetNormalization(e.center)),pe.log({devicePairPressure:e}),e}}const fe=l("DevicePairSensorDataManager",{log:!0});class Se{static get Sides(){return ne.InsoleSides}get sides(){return ne.InsoleSides}#ts={};pressureSensorDataManager=new me;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(fe.log({sensorType:s,timestamp:t,event:e}),this.#ts[s]||(this.#ts[s]={}),this.#ts[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else fe.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#ts[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else fe.log("no value received")}onDataReceived}const be=l("DevicePair",{log:!0});class De{constructor(){this.#We.onDataReceived=this.#Re.bind(this)}static#Ie=["isConnected","pressure",...ne.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#Ie}get eventTypes(){return De.#Ie}#Ae=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ae.addEventListener(e,t,s)}#Oe(e){this.#Ae.dispatchEvent(e)}removeEventListener(e,t){return this.#Ae.removeEventListener(e,t)}static get Sides(){return ne.InsoleSides}get sides(){return De.Sides}#ss;get left(){return this.#ss}#ns;get right(){return this.#ns}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}#v(){be.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void be.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#is),v(e,this.#is),t){case"left":this.#ss=e;break;case"right":this.#ns=e}return be.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Oe({type:"isConnected",message:{isConnected:this.isConnected}}),this.#Oe({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}be.log("device already assigned")}#is={connectionStatus:this.#rs.bind(this),isConnected:this.#os.bind(this),sensorData:this.#as.bind(this),getSensorConfiguration:this.#rs.bind(this)};#rs(e){this.#Oe({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#os(e){this.#rs(e),this.#Oe({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#We=new Se;#as(e){this.#rs(e),this.#Oe({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#We.onDeviceSensorData(e)}#Re(e,t){be.log({sensorType:e,sensorData:t}),this.#Oe({type:e,message:t})}resetPressureRange(){this.#We.resetPressureRange()}static#cs=new De;static get shared(){return this.#cs}static{ne.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#cs.assignInsole(t)}))}}const ye=l("ServerUtils",{log:!1}),Ee=3e7,Ce=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","deviceRSSI","connectToDevice","disconnectFromDevice"];function we(...e){ye.log("createServerMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=U(...e.data),s=t.byteLength;return U((n=e.type,ye.assertTypeWithError(n,"string"),ye.assertWithError(Ce.includes(n),`invalid serverMessageType "${n}"`),Ce.indexOf(n)),s,t);var n}));return ye.log("messageBuffers",...t),U(...t)}const Te=new TextDecoder;function Le(e,t){const s=e.getUint8(t++),n=Te.decode(e.buffer.slice(t,t+s));return t+=s,n}const Me=we("ping"),Ne=we("pong"),We=we("isScanningAvailable"),Re=we("isScanning"),ke=we("startScan"),xe=we("stopScan"),Ie=we("discoveredDevices"),Ae=l("WebSocketClient",{log:!0});class Oe{static#Ie=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Ie}get eventTypes(){return Oe.#Ie}#Ae=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ae.addEventListener(e,t,s)}#Oe(e){this.#Ae.dispatchEvent(e)}removeEventListener(e,t){return this.#Ae.removeEventListener(e,t)}#hs;get webSocket(){return this.#hs}set webSocket(e){this.#hs!=e?(Ae.log("assigning webSocket",e),this.#hs&&p(this.#hs,this.#ls),v(e,this.#ls),this.#hs=e,Ae.log("assigned webSocket")):Ae.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#gs(){Ae.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ds(){Ae.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ds(),this.#us="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#gs(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#us="disconnecting",this.webSocket.close()}reconnect(){this.#ds(),this.webSocket=new WebSocket(this.webSocket.url)}static#$e=!0;static get ReconnectOnDisconnection(){return this.#$e}static set ReconnectOnDisconnection(e){Ae.assertTypeWithError(e,"boolean"),this.#$e=e}#Pe=Oe.#$e;get reconnectOnDisconnection(){return this.#Pe}set reconnectOnDisconnection(e){Ae.assertTypeWithError(e,"boolean"),this.#Pe=e}#ls={open:this.#vs.bind(this),message:this.#ps.bind(this),close:this.#ms.bind(this),error:this.#fs.bind(this)};#vs(e){Ae.log("webSocket.open",e),this.#Ss.start(),this.#us="connected"}async#ps(e){Ae.log("webSocket.message",e),this.#Ss.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#bs(s)}#ms(e){Ae.log("webSocket.close",e),this.#us="not connected",this.#Ss.stop(),this.#Pe&&setTimeout((()=>{this.reconnect()}),3e3)}#fs(e){Ae.log("webSocket.error",e)}#Ds="not connected";get#us(){return this.#Ds}set#us(e){switch(Ae.assertTypeWithError(e,"string"),Ae.log({newConnectionStatus:e}),this.#Ds=e,this.#Oe({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Oe({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Oe({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?(this.#ys(),this.#Es()):(this.#Cs=!1,this.#Vt=!1)}}get connectionStatus(){return this.#us}static#tt=new TextDecoder;get#He(){return Oe.#tt}#bs(e){Ae.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=Ce[s],i=e.getUint8(t++);Ae.log({messageTypeEnum:s,messageType:n,messageByteLength:i}),Ae.assertWithError(n,`invalid messageTypeEnum ${s}`);let r=t;switch(n){case"ping":this.#ws();break;case"pong":break;case"isScanningAvailable":{const t=Boolean(e.getUint8(r++));Ae.log({isScanningAvailable:t}),this.#Cs=t}break;case"isScanning":{const t=Boolean(e.getUint8(r++));Ae.log({isScanning:t}),this.#Vt=t}break;case"discoveredDevice":{const t=Le(e,r);Ae.log({discoveredDeviceString:t}),r+=t.length;const s=JSON.parse(t);Ae.log({discoveredDevice:s}),this.#Mt(s)}break;case"expiredDiscoveredDevice":{const t=Le(e,r);r+=t.length,this.#Jt(t)}break;default:Ae.error(`uncaught messageType "${n}"`)}t+=i}}#Ss=new re(this.#Ts.bind(this),Ee);#Ts(){this.#gs(),this.webSocket.send(Me)}#ws(){this.#gs(),this.webSocket.send(Ne)}#Ls=!1;get#Cs(){return this.#Ls}set#Cs(e){Ae.assertTypeWithError(e,"boolean"),this.#Ls=e,this.#Oe({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Ms()}get isScanningAvailable(){return this.#Cs}#Ns(){this.#gs(),Ae.assertWithError(this.isScanningAvailable,"scanning is not available")}#ys(){this.#gs(),this.webSocket.send(We)}#Pt=!1;get#Vt(){return this.#Pt}set#Vt(e){Ae.assertTypeWithError(e,"boolean"),this.#Pt=e,this.#Oe({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Vt}#Ms(){this.#gs(),this.webSocket.send(Re)}#Rt(){Ae.assertWithError(this.isScanning,"is not scanning")}#kt(){Ae.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#kt(),this.webSocket.send(ke)}stopScan(){this.#Rt(),this.webSocket.send(xe)}toggleScan(){this.#Ns(),this.isScanning?this.stopScan():this.startScan()}#xt={};get discoveredDevices(){return this.#xt}#Ot(e){Ae.assertTypeWithError(e,"string"),Ae.assertWithError(this.#xt[e],`no discoveredDevice found with id "${e}"`)}#Mt(e){Ae.log({discoveredDevice:e}),this.#xt[e.id]=e,this.#Oe({type:"discoveredDevice",message:{discoveredDevice:e}})}#Es(){this.#gs(),this.webSocket.send(Ie)}#Jt(e){Ae.log({discoveredDeviceId:e});let t=this.#xt[e];t?(Ae.log({expiredDiscoveredDevice:t}),delete this.#xt[e],this.#Oe({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Ae.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){this.#Ws(e)}disconnectFromDevice(e){this.#Rs(e)}#Ws(e){this.#gs(),Ae.assertTypeWithError(e,"string"),this.webSocket.send(this.#ks(e))}#Rs(e){this.#gs(),Ae.assertTypeWithError(e,"string"),this.webSocket.send(this.#xs(e))}#ks(e){return we({type:"connectToDevice",data:e})}#xs(e){return we({type:"disconnectFromDevice",data:e})}#Is={};get devices(){return this.#Is}}const Ue=l("WebSocketServer",{log:!0});t&&require("ws");class _e{constructor(){Ue.assertWithError(ve,"no scanner defined"),v(ve,this.#As),v(ne,this.#Os)}static#Ie=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Ie}get eventTypes(){return _e.#Ie}#Ae=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ae.addEventListener(e,t,s)}#Oe(e){this.#Ae.dispatchEvent(e)}removeEventListener(e,t){return this.#Ae.removeEventListener(e,t)}#Us;get server(){return this.#Us}set server(e){this.#Us!=e?(Ue.log("assigning server..."),this.#Us&&(Ue.log("clearing existing server..."),p(this.#Us,this.#_s)),v(e,this.#_s),this.#Us=e,Ue.log("assigned server")):Ue.log("redundant WebSocket assignment")}broadcast(e){this.server.clients.forEach((t=>{t.send(e)}))}#_s={close:this.#$s.bind(this),connection:this.#Ps.bind(this),error:this.#Vs.bind(this),headers:this.#zs.bind(this),listening:this.#Bs.bind(this)};#$s(){Ue.log("server.close")}#Ps(e){Ue.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new re((()=>this.#Fs(e)),Ee),e.pingClientTimer.start(),v(e,this.#qs),this.#Oe({type:"clientConnected",message:{client:e}})}#Vs(e){Ue.error(e)}#zs(){}#Bs(){Ue.log("server.listening")}#qs={open:this.#js.bind(this),message:this.#Hs.bind(this),close:this.#Gs.bind(this),error:this.#Zs.bind(this)};#js(e){Ue.log("client.open")}#Hs(e){Ue.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(_(e.data));this.#Qs(t,s)}#Gs(e){Ue.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#qs),this.#Oe({type:"clientDisconnected",message:{client:t}})}#Zs(e){Ue.log("client.error")}static#tt=new TextDecoder;get#He(){return _e.#tt}#Qs(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),i=Ce[n],r=t.getUint8(s++);Ue.log({messageTypeEnum:n,messageType:i,messageByteLength:r}),Ue.assertWithError(i,`invalid messageTypeEnum ${n}`);let o=s;switch(i){case"ping":e.send(pongMessageBuffer);break;case"pong":case"disconnectFromAllDevices":break;case"isScanningAvailable":e.send(this.#Js);break;case"isScanning":e.send(this.#Ks);break;case"startScan":ve.startScan();break;case"stopScan":ve.stopScan();break;case"discoveredDevices":e.send(this.#Xs);break;case"connectToDevice":{const e=Le(t,o);o+=e.length,ve.connectToDevice(e)}break;case"disconnectFromDevice":{const e=Le(t,o);o+=e.length,ve.disconnectFromDevice(e)}break;default:Ue.error(`uncaught messageType "${i}"`)}s+=r}}get#Js(){return we({type:"isScanningAvailable",data:ve.isAvailable})}get#Ks(){return we({type:"isScanning",data:ve.isScanning})}#Ys(e){this.server.clients.forEach((t=>{t.send(e)}))}#Fs(e){e.isAlive?(e.isAlive=!1,e.send(Me)):e.terminate()}#As={isAvailable:this.#en.bind(this),isScanning:this.#tn.bind(this),discoveredDevice:this.#sn.bind(this),expiredDiscoveredDevice:this.#Jt.bind(this)};#en(e){this.#Ys(this.#Js)}#tn(e){this.#Ys(this.#Ks)}#sn(e){const t=e.message.discoveredDevice;console.log(t),this.#Ys(this.#nn(t))}#Jt(e){const t=e.message.discoveredDevice;console.log("expired",t),this.#Ys(this.#in(t))}#nn(e){return we({type:"discoveredDevice",data:e})}get#Xs(){return we(...ve.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}#in(e){return we({type:"expiredDiscoveredDevice",data:e.id})}#Os={deviceConnected:this.#rn.bind(this),deviceDisconnected:this.#on.bind(this)};#rn(e){Ue.log("onDeviceConnected",e.message.device)}#on(e){Ue.log("onDeviceDisconnected",e.message.device)}}var $e={setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:ne,DevicePair:De,WebSocketClient:Oe,WebSocketServer:_e,Scanner:ve};export{$e as default};
