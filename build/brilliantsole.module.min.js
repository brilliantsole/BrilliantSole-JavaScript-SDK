/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy");function n(){}e&&navigator.userAgent.includes("WebBLE"),e&&navigator.userAgent.includes("Android");const r=console.log.bind(console),i=console.warn.bind(console),a=console.error.bind(console),o=console.assert.bind(console);class c{static#e={};constructor(e){if(c.#e[e])throw new Error(`"${e}" console already exists`);c.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new c(e)}get log(){return this.#t.log?r:n}get warn(){return this.#t.warn?i:n}get error(){return this.#t.error?a:n}get assert(){return this.#t.assert?o:n}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function h(e,t){return c.create(e,t)}const l=h("EventDispatcher",{log:!1});class g{constructor(e,t){l.assertWithError(e,"target is required"),this.#s=e,l.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#r(e){return!this.#n||this.#n.includes(e)}#i(e){l.assertWithError(this.#r(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(l.log(`adding "${e}" eventListener`,t),this.#i(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return l.log(`has "${e}" eventListener?`,t),this.#i(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(l.log(`removing "${e}" eventListener`,t),this.#i(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#i(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function d(e,t){let s=e.addEventListener||e.addListener||e.on;l.assertWithError(s,"no add listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function u(e,t){let s=e.removeEventListener||e.removeListener;l.assertWithError(s,"no remove listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const p=h("ConnectionManager");class v{onStatusUpdated;onMessageReceived;static#o(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#c(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#o("type")}get type(){return this.constructor.type}#h(){p.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){p.assertWithError(this.constructor!=v,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#h()}#g="not connected";get status(){return this.#g}set status(e){p.assertTypeWithError(e,"string"),this.#g!=e?(p.log(`new connection status "${e}"`),this.#g=e,this.onStatusUpdated?.(this.status)):p.warn("same connection status")}get isConnected(){return"connected"==this.status}#d(){p.assertWithError(!this.isConnected,"device is already connected")}#u(){p.assertWithError("connecting"!=this.status,"device is already connecting")}#p(){p.assertWithError(this.isConnected,"device is not connected")}#v(){p.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#m(){this.#p(),this.#v()}async connect(){this.#d(),this.#u(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#d(),this.#u(),p.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#p(),this.#v(),this.status="disconnecting"}async sendMessage(e,t){this.#m(),p.log("sending message",{messageType:e,data:t})}}if(t){var m=require("webbluetooth").BluetoothUUID}if(e)m=window.BluetoothUUID;function f(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function S(e){return m.getCharacteristic(e)}function b(e){return m.getService(e)}const y=Object.freeze({services:{deviceInformation:{uuid:b("device_information"),characteristics:{manufacturerName:{uuid:S("manufacturer_name_string")},modelNumber:{uuid:S("model_number_string")},hardwareRevision:{uuid:S("hardware_revision_string")},firmwareRevision:{uuid:S("firmware_revision_string")},softwareRevision:{uuid:S("software_revision_string")},pnpId:{uuid:S("pnp_id")},serialNumber:{uuid:S("serial_number_string")}}},battery:{uuid:b("battery_service"),characteristics:{batteryLevel:{uuid:S("battery_level")}}},main:{uuid:f(0),characteristics:{name:{uuid:f(1)},type:{uuid:f(2)},sensorConfiguration:{uuid:f(3)},sensorData:{uuid:f(4)},vibration:{uuid:f(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e==n}))?.[0],t))),t}}),E=y.serviceUUIDs,D=y.optionalServiceUUIDs;const w=h("WebBluetoothConnectionManager",{log:!1});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var C={bluetooth:t}}if(e)C=window.navigator;class T extends v{#f={characteristicvaluechanged:this.#S.bind(this)};#b={gattserverdisconnected:this.#y.bind(this)};static get isSupported(){return"bluetooth"in C}static get type(){return"webBluetooth"}#E;get device(){return this.#E}set device(e){this.#E!=e?(this.#E&&u(this.#E,this.#b),e&&d(e,this.#b),this.#E=e):w.warn("tried to assign the same BluetoothDevice")}get server(){return this.#E?.gatt}get isConnected(){return this.server?.connected}#D=new Map;#w=new Map;async connect(){await super.connect();try{const t=await C.bluetooth.requestDevice({filters:[{services:E}],optionalServices:e?D:[]});w.log("got BluetoothDevice"),this.device=t,w.log("connecting to device...");const s=await this.device.gatt.connect();w.log(`connected to device? ${s.connected}`),await this.#C(),w.log("fully connected"),this.status="connected"}catch(e){w.error(e),this.status="not connected",this.server?.disconnect(),this.#T()}}async#C(){this.#T(),w.log("getting services...");const e=await this.server.getPrimaryServices();w.log("got services",e.length),w.log("getting characteristics...");for(const r in e){const i=e[r],a=(n=i.uuid,y.getServiceNameFromUUID(n));if(w.assertWithError(a,`no name found for service uuid "${i.uuid}"`),w.log(`got "${a}" service`),"dfu"==a){w.log("skipping dfu service");continue}i._name=a,this.#D.set(a,i),w.log(`getting characteristics for "${a}" service`);const o=await i.getCharacteristics();w.log(`got characteristics for "${a}" service`);for(const e in o){const n=o[e],r=(t=n.uuid,y.getCharacteristicNameFromUUID(t));w.assertWithError(r,`no name found for characteristic uuid "${n.uuid}" in "${a}" service`),w.log(`got "${r}" characteristic in "${a}" service`),n._name=r,this.#w.set(r,n),d(n,this.#f),n.properties.read&&(w.log(`reading "${r}" characteristic...`),await n.readValue(),s&&this.#P(n)),n.properties.notify&&(w.log(`starting notifications for "${r}" characteristic`),await n.startNotifications())}}var t,n}#T(){this.device&&u(this.device,this.#b),this.#w.forEach((e=>{u(e,this.#f)}))}async disconnect(){await super.disconnect(),w.log("disconnecting from device..."),this.server?.disconnect(),this.#T(),this.status="not connected"}#S(e){w.log("oncharacteristicvaluechanged");const t=e.target;this.#P(t)}#P(e){w.log("onCharacteristicValue");const t=e._name;w.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),w.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;switch(w.assertWithError(s,`no data found for "${t}" characteristic`),w.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),t){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${t}"`)}}#y(e){w.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s;switch(await super.sendMessage(...arguments),e){case"setName":s=this.#w.get("name");break;case"setType":s=this.#w.get("type");break;case"setSensorConfiguration":s=this.#w.get("sensorConfiguration");break;case"triggerVibration":s=this.#w.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}w.assert(s,"no characteristic found"),await s.writeValueWithResponse(t),s.properties.read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),w.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(w.log("successfully reconnected!"),await this.#C(),this.status="connected"):(w.log("unable to reconnect"),this.status="not connected")}}const P=h("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class L extends v{static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return!1}async connect(){await super.connect()}async disconnect(){await super.disconnect(),P.log("disconnecting from device...")}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!1}async reconnect(){await super.reconnect(),P.log("attempting to reconnect...")}#L;get noblePeripheral(){return this.#L}set noblePeripheral(e){P.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(P.log({newNoblePeripheral:e}),this.#L&&(u(this.#L,this.#M),delete this.#L._device),e&&(e._device=this,d(e,this.#M)),this.#L=e):P.log("attempted to assign duplicate noblePeripheral")}#M={connect:this.#W,disconnect:this.#N,rssiUpdate:this.#R,servicesDiscover:this.#x};#W(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){P.log("onNoblePeripheralConnect",e)}#N(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){P.log("onNoblePeripheralDisconnect",e)}#R(e){this._device.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){P.log("onNoblePeripheralRssiUpdate",e,t)}#x(e){this._device.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){P.log("onNoblePeripheralServicesDiscover",e,t)}}const M={min:1/0,max:-1/0};class W{#k=Object.assign({},M);reset(){Object.assign(this.#k,M)}update(e){this.#k.min=Math.min(e,this.#k.min),this.#k.max=Math.max(e,this.#k.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#k.min,this.#k.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class N{#k={x:new W,y:new W};reset(){this.#k.x.reset(),this.#k.y.reset()}update(e){this.#k.x.update(e.x),this.#k.y.update(e.y)}getNormalization(e){return{x:this.#k.x.getNormalization(e.x),y:this.#k.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const R=h("PressureSensorDataManager",{log:!0});class x{#I;get deviceType(){return this.#I}set deviceType(e){R.assertTypeWithError(e,"string"),this.#I!=e?(R.log({newDeviceType:e}),this.#I=e,this.#O(),this.resetRange()):R.warn(`redundant deviceType assignment "${e}"`)}static#A=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#A}get names(){return x.Names}static#U={pressure:2**-16};static get Scalars(){return this.#U}get scalars(){return x.Scalars}static#_=8;static get NumberOfPressureSensors(){return this.#_}get numberOfPressureSensors(){return x.NumberOfPressureSensors}static#$=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#$}#V;get pressureSensorPositions(){return this.#V}#O(){const e=x.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));R.log({pressureSensorPositions:e}),this.#V=e}#z=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new W));#B=new N;resetRange(){this.#z.forEach((e=>e.reset())),this.#B.reset()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const r=e.getUint16(t,!0),i=this.#z[n].updateAndGetNormalization(r),a=this.pressureSensorPositions[n],o=this.names[n];s.sensors[n]={rawValue:r,normalizedValue:i,position:a,name:o},s.rawSum+=r,s.normalizedSum=i/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#B.updateAndGetNormalization(s.center)),R.log({pressure:s}),s}}const k=h("MotionSensorDataManager",{log:!0});class I{#I;get deviceType(){return this.#I}set deviceType(e){k.assertTypeWithError(e,"string"),this.#I!=e?(k.log({newDeviceType:e}),this.#I=e):k.warn(`redundant deviceType assignment "${e}"`)}static#U={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#U}get scalars(){return I.Scalars}static#F=6;static get Vector3Size(){return this.#F}get vector3Size(){return I.Vector3Size}parseVector3(e,t,s){let[n,r,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:r,z:i};return k.log({vector:a}),a}static#q=8;static get QuaternionSize(){return this.#q}get quaternionSize(){return I.QuaternionSize}parseQuaternion(e,t,s){let[n,r,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:r,z:i,w:a};return k.log({quaternion:o}),o}}h("BarometerSensorDataManager",{log:!0});class O{static#U={barometer:.78125};static get Scalars(){return this.#U}get scalars(){return O.Scalars}}const A=h("SensorDataManager",{log:!0});class U{#I;get deviceType(){return this.#I}set deviceType(e){A.assertTypeWithError(e,"string"),this.#I!=e?(A.log({newDeviceType:e}),this.#I=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):A.warn(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new x;motionSensorDataManager=new I;barometerSensorDataManager=new O;static#H=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#H}get#j(){return U.Types}static AssertValidSensorType(e){A.assertTypeWithError(e,"string"),A.assertWithError(this.#H.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){A.assertTypeWithError(e,"number"),A.assertWithError(e in this.#H,`invalid sensorTypeEnum ${e}`)}onDataReceived;#G=0;#Z=0;clearTimestamp(){A.log("clearing sensorDataManager timestamp data"),this.#G=0,this.#Z=0}#Q(e,t){const s=e.getUint16(t,!0);s<this.#Z&&(this.#G+=65536),this.#Z=s;return s+this.#G}parse(e){A.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#Q(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let r;U.AssertValidSensorTypeEnum(n);const i=e.getUint8(t++),a=this.#j[n];switch(A.log({sensorTypeEnum:n,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":r=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:A.error(`uncaught sensorType "${a}"`)}t+=i,A.assertWithError(r,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:r})}}static get NumberOfPressureSensors(){return x.NumberOfPressureSensors}get numberOfPressureSensors(){return U.NumberOfPressureSensors}static get PressureSensorNames(){return x.Names}get pressureSensorNames(){return U.PressureSensorNames}}const _=h("SensorConfigurationManager",{log:!0});class ${#I;get deviceType(){return this.#I}set deviceType(e){_.assertTypeWithError(e,"string"),this.#I!=e?(_.log({newDeviceType:e}),this.#I=e):_.warn(`redundant deviceType assignment "${e}"`)}#J;#K(e){_.assertWithError(this.#J,"must get initial sensorConfiguration");const t=this.#J?.includes(e);return _.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0,n=0;s<e.byteLength;s+=2,n++){const r=U.Types[n];if(!r){_.warn(`unknown sensorType index ${n}`);break}const i=e.getUint16(s,!0);_.log({sensorType:r,sensorRate:i}),t[r]=i}return _.log({parsedSensorConfiguration:t}),this.#J=Object.keys(t),t}static#X=65535;static get MaxSensorRate(){return this.#X}get maxSensorRate(){return $.MaxSensorRate}static#Y=5;static get SensorRateStep(){return this.#Y}get sensorRateStep(){return $.SensorRateStep}#ee(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),_.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),_.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#K(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{U.AssertValidSensorType(t);const r=U.Types.indexOf(t);s.setUint8(3*n,r);const i=e[t];this.#ee(i),s.setUint16(3*n+1,e[t],!0)})),_.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const V=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],z=new TextEncoder;function B(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return F(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return F(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function F(e){const t=z.encode(e);return B(t.byteLength,t)}const q=h("VibrationManager");class H{static#te=["front","rear"];static get Locations(){return this.#te}get locations(){return H.Locations}#se(e){q.assertTypeWithError(e,"string"),q.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ne(e){this.#re(e),e.forEach((e=>{this.#se(e)}))}#ie(e){this.#ne(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),q.log({locationsBitmask:t}),q.assertWithError(t>0,"locationsBitmask must not be zero"),t}#re(e){q.assertWithError(Array.isArray(e),"passed non-array"),q.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return V}get waveformEffects(){return H.WaveformEffects}#ae(e){q.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#oe=1270;static get MaxWaveformEffectSegmentDelay(){return this.#oe}get maxWaveformEffectSegmentDelay(){return H.MaxWaveformEffectSegmentDelay}#ce(e){if(null!=e.effect){const t=e.effect;this.#ae(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;q.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),q.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#he(t)}}static#le=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#le}get maxWaveformEffectSegmentLoopCount(){return H.MaxWaveformEffectSegmentLoopCount}#he(e){q.assertTypeWithError(e,"number"),q.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),q.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ge=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ge}get maxNumberOfWaveformEffectSegments(){return H.MaxNumberOfWaveformEffectSegments}#de(e){this.#re(e),q.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ce(e)}))}static#ue=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ue}get maxWaveformEffectSequenceLoopCount(){return H.MaxWaveformEffectSequenceLoopCount}#pe(e){q.assertTypeWithError(e,"number"),q.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),q.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ve=2550;static get MaxWaveformSegmentDuration(){return this.#ve}get maxWaveformSegmentDuration(){return H.MaxWaveformSegmentDuration}#me(e){q.assertTypeWithError(e.amplitude,"number"),q.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),q.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),q.assertTypeWithError(e.duration,"number"),q.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),q.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#fe=20;static get MaxNumberOfWaveformSegments(){return this.#fe}get maxNumberOfWaveformSegments(){return H.MaxNumberOfWaveformSegments}#Se(e){this.#re(e),q.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#me(e)}))}createWaveformEffectsData(e,t,s=0){this.#de(t),this.#pe(s);let n=[],r=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[r++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[r++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[r]=0);const i=e%4*2;n[r]|=s<<i,3!=e&&7!=e||r++}0!=s&&(n[r++]=s);const o=new DataView(Uint8Array.from(n).buffer);return q.log({dataArray:n,dataView:o}),this.#be(e,"waveformEffect",o)}createWaveformData(e,t){this.#Se(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),q.log({dataView:s}),this.#be(e,"waveform",s)}static#H=["waveformEffect","waveform"];static get Types(){return this.#H}get#j(){return H.Types}#ye(e){q.assertTypeWithError(e,"string"),q.assertWithError(this.#j.includes(e),`invalid vibrationType "${e}"`)}#be(e,t,s){q.assertWithError(s?.byteLength>0,"no data received");const n=this.#ie(e);this.#ye(t);const r=this.#j.indexOf(t);q.log({locationsBitmask:n,vibrationTypeIndex:r,dataView:s});const i=B(n,r,s.byteLength,s);return q.log({data:i}),i}}const j=h("Device",{log:!1});class G{constructor(){this.#Ee.onDataReceived=this.#De.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{G.#we(this)}))}static get#Ce(){return T}static#Te=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#Te}get eventTypes(){return G.#Te}#Pe=new g(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Le(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#Me;get connectionManager(){return this.#Me}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#We.bind(this),e.onMessageReceived=this.#Ne.bind(this)),this.#Me=e,j.log("assigned new connectionManager",this.#Me)):j.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new G.#Ce),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#p(){j.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#Re=!1;static get ReconnectOnDisconnection(){return this.#Re}static set ReconnectOnDisconnection(e){j.assertTypeWithError(e,"boolean"),this.#Re=e}#xe=G.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#xe}set reconnectOnDisconnection(e){j.assertTypeWithError(e,"boolean"),this.#xe=e}#ke;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#p(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#Me?.status||"not connected"}#We(e){switch(j.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(j.log("starting reconnect interval..."),this.#ke=setInterval((()=>{j.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#ke&&(j.log("clearing reconnect interval"),clearInterval(this.#ke),this.#ke=void 0),this.#Le({type:"connectionStatus",message:{connectionStatus:e}}),this.#Le({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Le({type:"isConnected",message:{isConnected:this.isConnected}})}}#Ie(){this.#Oe=null,this.#Ae=null,this.#Ue=null;for(const e in this.#_e)this.#_e[e]=null}#Ne(e,t){switch(j.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#$e.decode(t);j.log({manufacturerName:s}),this.#Ve({manufacturerName:s});break;case"modelNumber":const n=this.#$e.decode(t);j.log({modelNumber:n}),this.#Ve({modelNumber:n});break;case"softwareRevision":const r=this.#$e.decode(t);j.log({softwareRevision:r}),this.#Ve({softwareRevision:r});break;case"hardwareRevision":const i=this.#$e.decode(t);j.log({hardwareRevision:i}),this.#Ve({hardwareRevision:i});break;case"firmwareRevision":const a=this.#$e.decode(t);j.log({firmwareRevision:a}),this.#Ve({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),j.log({pnpId:o}),this.#Ve({pnpId:o});break;case"serialNumber":const c=this.#$e.decode(t);j.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);j.log("received battery level",{batteryLevel:h}),this.#ze(h);break;case"getName":const l=this.#$e.decode(t);j.log({name:l}),this.#Be(l);break;case"getType":const g=t.getUint8(0),d=this.#j[g];j.log({typeEnum:g,type:d}),this.#Fe(d);break;case"getSensorConfiguration":const u=this.#qe.parse(t);j.log({sensorConfiguration:u}),this.#He(u);break;case"sensorData":this.#Ee.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#je=new TextEncoder;get#Ge(){return G.#je}static#Ze=new TextDecoder;get#$e(){return G.#Ze}#_e={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#_e}get#Qe(){return Object.values(this.#_e).every((e=>null!=e))}#Ve(e){j.log({partialDeviceInformation:e});for(const t in e)this.#Le({type:t,message:{[t]:e[t]}});Object.assign(this.#_e,e),j.log({deviceInformation:this.#_e}),this.#Qe&&(j.log("completed deviceInformation"),this.#Le({type:"deviceInformation",message:{deviceInformation:this.#_e}}))}#Ue=null;get batteryLevel(){return this.#Ue}#ze(e){j.assertTypeWithError(e,"number"),this.#Ue!=e?(this.#Ue=e,j.log({updatedBatteryLevel:this.#Ue}),this.#Le({type:"batteryLevel",message:{batteryLevel:this.#Ue}})):j.warn(`duplicate batteryLevel assignment ${e}`)}#Oe;get name(){return this.#Oe}#Be(e){j.assertTypeWithError(e,"string"),this.#Oe=e,j.log({updatedName:this.#Oe}),this.#Le({type:"getName",message:{name:this.#Oe}})}static get MinNameLength(){return 2}get minNameLength(){return G.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return G.MaxNameLength}async setName(e){this.#p(),j.assertTypeWithError(e,"string"),j.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),j.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Ge.encode(e);j.log({setNameData:t}),await this.#Me.sendMessage("setName",t)}static#H=["leftInsole","rightInsole"];static get Types(){return this.#H}get#j(){return G.Types}#Ae;get type(){return this.#Ae}#Je(e){j.assertTypeWithError(e,"string"),j.assertWithError(this.#j.includes(e),`invalid type "${e}"`)}#Fe(e){this.#Je(e),e!=this.type?(this.#Ae=e,j.log({updatedType:this.#Ae}),this.#Ee.deviceType=this.#Ae,this.#qe.deviceType=this.#Ae,this.#Le({type:"getType",message:{type:this.#Ae}})):j.warn("redundant type assignment")}async setType(e){this.#p(),this.#Je(e);const t=this.#j.indexOf(e),s=Uint8Array.from([t]);j.log({setTypeData:s}),await this.#Me.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Ke=["left","right"];static get InsoleSides(){return this.#Ke}get insoleSides(){return G.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return U.Types}get sensorTypes(){return G.SensorTypes}static get PressureSensorNames(){return U.PressureSensorNames}get pressureSensorNames(){return G.PressureSensorNames}static get NumberOfPressureSensors(){return U.NumberOfPressureSensors}get numberOfPressureSensors(){return G.NumberOfPressureSensors}#qe=new $;#Xe;get sensorConfiguration(){return this.#Xe}static get MaxSensorRate(){return $.MaxSensorRate}static get SensorRateStep(){return $.SensorRateStep}#He(e){this.#Xe=e,j.log({updatedSensorConfiguration:this.#Xe}),this.#qe.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(j.log("clearing sensorDataManager timestamp..."),this.#Ee.clearTimestamp()),this.#Le({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#p(),j.log({newSensorConfiguration:e});const t=this.#qe.createData(e);j.log({setSensorConfigurationData:t}),await this.#Me.sendMessage("setSensorConfiguration",t)}static#Ye=!0;static get ClearSensorConfigurationOnLeave(){return this.#Ye}static set ClearSensorConfigurationOnLeave(e){j.assertTypeWithError(e,"boolean"),this.#Ye=e}#et=G.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#et}set clearSensorConfigurationOnLeave(e){j.assertTypeWithError(e,"boolean"),this.#et=e}static#tt={};static get ZeroSensorConfiguration(){return this.#tt}static{this.SensorTypes.forEach((e=>{this.#tt[e]=0}))}get zeroSensorConfiguration(){return G.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#Ee=new U;#De(e,t){j.log({sensorType:e,sensorData:t}),this.#Le({type:e,message:t}),this.#Le({type:"sensorData",message:t})}resetPressureRange(){this.#Ee.pressureSensorDataManager.resetRange()}#st=new H;static get VibrationLocations(){return H.Locations}static get VibrationTypes(){return H.Types}static get VibrationWaveformEffects(){return H.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return H.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return H.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return H.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return H.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return H.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return H.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let r;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:i}=t;r=this.#st.createWaveformEffectsData(s,n,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;r=this.#st.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}j.log({type:n,dataView:r}),t=B(t,r)})),await this.#Me.sendMessage("triggerVibration",t)}static#nt=[];static get ConnectedDevices(){return this.#nt}static#rt=!1;static get UseLocalStorage(){return this.#rt}static set UseLocalStorage(e){this.#it(),j.assertTypeWithError(e,"boolean"),this.#rt=e,this.#rt&&!this.#at&&this.#ot()}static#ct={};static#at;static#it(){j.assertWithError(e,"localStorage is only available in the browser")}static#ht="BS.Device";static#lt(){this.#it(),localStorage.setItem(this.#ht,JSON.stringify(this.#at))}static#ot(){this.#it();let e=localStorage.getItem(this.#ht);if("string"!=typeof e)return j.warn("no info found in localStorage"),this.#at=Object.assign({},this.#ct),void this.#lt();try{const t=JSON.parse(e);return j.log({configuration:t}),t}catch(e){j.error(e)}}static async GetDevices(){if(!e)return void j.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void j.warn("bluetooth is not available in this browser");if(!this.#at)return void j.warn("localStorageConfiguration not found");const t=this.#at;if(!t.bluetoothDeviceIds||0==t.bluetoothDeviceIds.length)return void j.log("no bluetoothDeviceIds found in configuration");const s=await navigator.bluetooth.getDevices();j.log({bluetoothDevices:s});return s.map((e=>{if(e.gatt&&t.bluetoothDeviceIds.includes(e.id)){const t=new G;t.connectionManager=new T;return t.connectionManager.device=e,t}})).filter(Boolean)}static#gt=["deviceConnected","deviceDisconnected"];static get StaticEventTypes(){return this.#gt}static#dt=new g(this,this.#gt);static AddEventListener(e,t,s){this.#dt.addEventListener(e,t,s)}static#ut(e){this.#dt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#dt.removeEventListener(e,t)}static#we(e){if(e.isConnected)if(this.#nt.includes(e))j.warn("device already included");else{if(j.log("adding device",e),this.#nt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t=e.connectionManager;this.#at.bluetoothDeviceIds.push(t.device.id),this.#lt()}this.#ut({type:"deviceConnected",message:{device:e}})}else this.#nt.includes(e)?(j.log("removing device",e),this.#nt.splice(this.#nt.indexOf(e),1),this.#ut({type:"deviceDisconnected",message:{device:e}})):j.log("device already not included")}}const Z=h("Timer",{log:!1});class Q{#pt;get callback(){return this.#pt}set callback(e){Z.assertTypeWithError(e,"function"),Z.log({newCallback:e}),this.#pt=e,this.isRunning&&this.restart()}#vt;get interval(){return this.#vt}set interval(e){Z.assertTypeWithError(e,"number"),Z.assertWithError(e>0,"interval must be above 0"),Z.log({newInterval:e}),this.#vt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#mt=null;get isRunning(){return null!=this.#mt}start(){this.isRunning?Z.log("interval already running"):(Z.log("starting interval"),this.#mt=setInterval(this.#pt,this.#vt))}stop(){this.isRunning?(Z.log("stopping interval"),clearInterval(this.#mt),this.#mt=null):Z.log("interval already not running")}restart(){this.stop(),this.start()}}const J=h("BaseScanner");class K{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#h(){J.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){J.assertWithError(this.constructor!=K,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#h(),d(this,this.#ft)}#ft={discoveredPeripheral:this.#St.bind(this),isScanning:this.#bt.bind(this)};static#Te=["isAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#Te}get eventTypes(){return K.#Te}#Pe=new g(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}dispatchEvent(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}get isAvailable(){return!1}#yt(){J.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#Et(){J.assertWithError(this.isScanning,"not scanning")}#Dt(){J.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#yt(),this.#Dt()}stopScan(){this.#Et()}#bt(){this.isScanning?(this.#wt={},this.#Ct={}):this.#Tt.stop()}#wt={};get discoveredPeripherals(){return this.#wt}get discoveredPeripheralsArray(){return Object.values(this.#wt).sort(((e,t)=>this.#Ct[e.id]-this.#Ct[t.id]))}#Pt(e){J.assertWithError(this.#wt[e],`no discovered peripheral with id "${e}"`)}#St(e){const t=e.message.discoveredPeripheral;this.#wt[t.id]=t,this.#Ct[t.id]=Date.now(),this.#Tt.start()}#Ct={};static#Lt=5e3;static get DiscoveredPeripheralExpirationTimeout(){return this.#Lt}get#Mt(){return K.DiscoveredPeripheralExpirationTimeout}#Tt=new Q(this.#Wt.bind(this),1e3);#Wt(){const e=Object.entries(this.#wt);if(0==e.length)return void this.#Tt.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Ct[e];console.log(t-n),t-n>this.#Mt&&(J.log("discovered peripheral timeout"),delete this.#wt[e],delete this.#Ct[e],this.dispatchEvent({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:s}}))}))}connectToPeripheral(e){this.#yt()}disconnectFromPeripheral(e){this.#yt()}reset(){J.log("resetting...")}}const X=h("NobleScanner",{log:!0});let Y=!1;if(t){var ee=require("@abandonware/noble");Y=!0}class te extends K{static get isSupported(){return Y}#Nt=!1;get#Rt(){return this.#Nt}set#Rt(e){X.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Nt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):X.log("duplicate isScanning assignment")}get isScanning(){return this.#Rt}#xt="unknown";get#kt(){return this.#xt}set#kt(e){X.assertTypeWithError(e,"string"),this.#kt!=e?(this.#xt=e,X.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):X.log("duplicate nobleState assignment")}#It={scanStart:this.#Ot.bind(this),scanStop:this.#At.bind(this),stateChange:this.#Ut.bind(this),discover:this.#_t.bind(this)};#Ot(){X.log("OnNobleScanStart"),this.#Rt=!0}#At(){X.log("OnNobleScanStop"),this.#Rt=!1}#Ut(e){X.log("onNobleStateChange",e),this.#kt=e}#_t(e){X.log("onNobleDiscover",e),this.#$t[e.id]||(e._scanner=this,this.#$t[e.id]=e,d(e,this.#M));const t={name:e.advertisement.localName,id:e.id,rssi:e.rssi};this.dispatchEvent({type:"discoveredPeripheral",message:{discoveredPeripheral:t}})}constructor(){super(),d(ee,this.#It),d(this,this.#Vt)}get isAvailable(){return"poweredOn"==this.#kt}startScan(){super.startScan(),ee.startScanningAsync([],!0)}stopScan(){super.stopScan(),ee.stopScanningAsync()}reset(){super.reset(),ee.reset()}#Vt={expiredDiscoveredPeripheral:this.#zt.bind(this)};#zt(e){const t=e.message.discoveredPeripheral,s=this.#$t[t.id];s&&(delete this.#$t[t.id],u(s,this.#M))}#$t={};#Bt(e){X.assertTypeWithError(e,"string"),X.assertWithError(this.#$t[e],`no noblePeripheral found with id "${e}"`)}#M={connect:this.#W,disconnect:this.#N,rssiUpdate:this.#R,servicesDiscover:this.#x};#W(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){X.log("onNoblePeripheralConnect",e)}#N(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){X.log("onNoblePeripheralDisconnect",e)}#R(e){this._scanner.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){X.log("onNoblePeripheralRssiUpdate",e,t)}#x(e){this._scanner.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){X.log("onNoblePeripheralServicesDiscover",e,t)}connectToPeripheral(e){super.connectToPeripheral(e),this.#Bt(e);const t=this.#$t[e];X.log("connecting to discoveredPeripheral...",e);const s=new G,n=new L;s.noblePeripheral=t,s.connectionManager=n,s.connect()}disconnectFromPeripheral(e){super.disconnectFromPeripheral(e),this.#Bt(e),this.#$t[e],X.log("disconnecting from discoveredPeripheral...",e)}}const se=h("Scanner",{log:!1});let ne;te.isSupported?(se.log("using NobleScanner"),ne=new te):se.log("Scanner not available");var re=ne;const ie=h("DevicePairPressureSensorDataManager",{log:!0});class ae{static get Sides(){return G.InsoleSides}get sides(){return G.InsoleSides}#Ft={};#B=new N;resetPressureRange(){this.#B.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(ie.log({pressure:t,insoleSide:s}),this.#Ft[s]=t,this.#qt)return this.#Ht();ie.log("doesn't have all pressure data yet...")}get#qt(){return this.sides.every((e=>e in this.#Ft))}static#U={pressure:x.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#U}get scalars(){return ae.Scalars}#Ht(){this.scalars.pressure;const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Ft[t].rawSum,e.normalizedSum+=this.#Ft[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Ft[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#B.updateAndGetNormalization(e.center)),ie.log({devicePairPressure:e}),e}}const oe=h("DevicePairSensorDataManager",{log:!0});class ce{static get Sides(){return G.InsoleSides}get sides(){return G.InsoleSides}#jt={};pressureSensorDataManager=new ae;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{type:t}=e,{timestamp:s}=e.message;oe.log({type:t,timestamp:s,event:e});const n=t;let r;if(this.#jt[n]||(this.#jt[n]={}),this.#jt[n][e.target.insoleSide]=s,"pressure"===n)r=this.pressureSensorDataManager.onDevicePressureData(e);else oe.warn(`uncaught sensorType "${n}"`);if(r){const e=Object.assign({},this.#jt[n]);this.onDataReceived?.(n,{timestamps:e,[n]:r})}else oe.log("no value received")}onDataReceived}const he=h("DevicePair",{log:!0});class le{constructor(){this.#Ee.onDataReceived=this.#De.bind(this)}static#Te=["pressure","isConnected"];static get EventTypes(){return this.#Te}get eventTypes(){return le.#Te}#Pe=new g(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Le(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}static get Sides(){return G.InsoleSides}get sides(){return le.Sides}#Gt;get left(){return this.#Gt}#Zt;get right(){return this.#Zt}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}#p(){he.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void he.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&u(s,this.#Qt),d(e,this.#Qt),t){case"left":this.#Gt=e;break;case"right":this.#Zt=e}return he.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Le({type:"isConnected",message:{isConnected:this.isConnected}}),s}he.warn("device already assigned")}#Qt={pressure:this.#Jt.bind(this),isConnected:this.#Kt.bind(this)};#Kt(e){this.#Le({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#Ee=new ce;#Jt(e){this.isConnected&&this.#Ee.onDeviceSensorData(e)}#De(e,t){he.log({sensorType:e,sensorData:t}),this.#Le({type:e,message:t})}resetPressureRange(){this.#Ee.resetPressureRange()}static#Xt=new le;static get shared(){return this.#Xt}static{G.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Xt.assignInsole(t)}))}}const ge=h("ServerUtils",{log:!1}),de=3e7,ue=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredPeripheral","discoveredPeripherals","expiredDiscoveredPeripheral","peripheralRSSI","connectToPeripheral","disconnectFromPeripheral"];function pe(...e){ge.log("createServerMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=B(...e.data),s=t.byteLength;return B((n=e.type,ge.assertTypeWithError(n,"string"),ge.assertWithError(ue.includes(n),`invalid serverMessageType "${n}"`),ue.indexOf(n)),s,t);var n}));return ge.log("messageBuffers",...t),B(...t)}const ve=new TextDecoder;function me(e,t){const s=e.getUint8(t++),n=ve.decode(e.buffer.slice(t,t+s));return t+=s,n}const fe=pe("ping"),Se=pe("pong"),be=pe("isScanningAvailable"),ye=pe("isScanning"),Ee=pe("startScan"),De=pe("stopScan"),we=pe("discoveredPeripherals"),Ce=h("WebSocketClient",{log:!0});class Te{static#Te=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#Te}get eventTypes(){return Te.#Te}#Pe=new g(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Le(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#Yt;get webSocket(){return this.#Yt}set webSocket(e){this.#Yt!=e?(Ce.log("assigning webSocket",e),this.#Yt&&u(this.#Yt,this.#es),d(e,this.#es),this.#Yt=e,Ce.log("assigned webSocket")):Ce.warn("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#ts(){Ce.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ss(){Ce.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ss(),this.#ns="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#ts(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#ns="disconnecting",this.webSocket.close()}reconnect(){this.#ss(),this.webSocket=new WebSocket(this.webSocket.url)}static#Re=!0;static get ReconnectOnDisconnection(){return this.#Re}static set ReconnectOnDisconnection(e){Ce.assertTypeWithError(e,"boolean"),this.#Re=e}#xe=Te.#Re;get reconnectOnDisconnection(){return this.#xe}set reconnectOnDisconnection(e){Ce.assertTypeWithError(e,"boolean"),this.#xe=e}#es={open:this.#rs.bind(this),message:this.#is.bind(this),close:this.#as.bind(this),error:this.#os.bind(this)};#rs(e){Ce.log("webSocket.open",e),this.#cs.start(),this.#ns="connected"}async#is(e){Ce.log("webSocket.message",e),this.#cs.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#hs(s)}#as(e){Ce.log("webSocket.close",e),this.#ns="not connected",this.#cs.stop(),this.#xe&&setTimeout((()=>{this.reconnect()}),3e3)}#os(e){Ce.log("webSocket.error",e)}#ls="not connected";get#ns(){return this.#ls}set#ns(e){switch(Ce.assertTypeWithError(e,"string"),Ce.log({newConnectionStatus:e}),this.#ls=e,this.#Le({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Le({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Le({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?(this.#gs(),this.#ds()):(this.#us=!1,this.#Rt=!1)}}get connectionStatus(){return this.#ns}static#Ze=new TextDecoder;get#$e(){return Te.#Ze}#hs(e){Ce.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=ue[s],r=e.getUint8(t++);Ce.log({messageTypeEnum:s,messageType:n,messageByteLength:r}),Ce.assertWithError(n,`invalid messageTypeEnum ${s}`);let i=t;switch(n){case"ping":this.#ps();break;case"pong":break;case"isScanningAvailable":{const t=Boolean(e.getUint8(i++));Ce.log({isScanningAvailable:t}),this.#us=t}break;case"isScanning":{const t=Boolean(e.getUint8(i++));Ce.log({isScanning:t}),this.#Rt=t}break;case"discoveredPeripheral":{const t=me(e,i);Ce.log({discoveredPeripheralString:t}),i+=t.length;const s=JSON.parse(t);Ce.log({discoveredPeripheral:s}),this.#St(s)}break;case"expiredDiscoveredPeripheral":{const t=me(e,i);i+=t.length,this.#zt(t)}break;default:Ce.error(`uncaught messageType "${n}"`)}t+=r}}#cs=new Q(this.#vs.bind(this),de);#vs(){this.#ts(),this.webSocket.send(fe)}#ps(){this.#ts(),this.webSocket.send(Se)}#ms=!1;get#us(){return this.#ms}set#us(e){Ce.assertTypeWithError(e,"boolean"),this.#ms=e,this.#Le({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#fs()}get isScanningAvailable(){return this.#us}#Ss(){this.#ts(),Ce.assertWithError(this.isScanningAvailable,"scanning is not available")}#gs(){this.#ts(),this.webSocket.send(be)}#Nt=!1;get#Rt(){return this.#Nt}set#Rt(e){Ce.assertTypeWithError(e,"boolean"),this.#Nt=e,this.#Le({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Rt}#fs(){this.#ts(),this.webSocket.send(ye)}#Et(){Ce.assertWithError(this.isScanning,"is not scanning")}#Dt(){Ce.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Dt(),this.webSocket.send(Ee)}stopScan(){this.#Et(),this.webSocket.send(De)}toggleScan(){this.#Ss(),this.isScanning?this.stopScan():this.startScan()}#wt={};get discoveredPeripherals(){return this.#wt}#Pt(e){Ce.assertTypeWithError(e,"string"),Ce.assertWithError(this.#wt[e],`no discoveredPeripheral found with id "${e}"`)}#St(e){Ce.log({discoveredPeripheral:e}),this.#wt[e.id]=e,this.#Le({type:"discoveredPeripheral",message:{discoveredPeripheral:e}})}#ds(){this.#ts(),this.webSocket.send(we)}#zt(e){Ce.log({discoveredPeripheralId:e});let t=this.#wt[e];t?(Ce.log({expiredDiscoveredPeripheral:t}),delete this.#wt[e],this.#Le({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:t}})):Ce.warn(`no discoveredPeripheral found with id "${e}"`)}connectToPeripheral(e){this.#bs(e)}disconnectFromPeripheral(e){this.#ys(e)}#bs(e){this.#ts(),Ce.assertTypeWithError(e,"string"),this.webSocket.send(this.#Es(e))}#ys(e){this.#ts(),Ce.assertTypeWithError(e,"string"),this.webSocket.send(this.#Ds(e))}#Es(e){return pe({type:"connectToPeripheral",data:e})}#Ds(e){return pe({type:"disconnectFromPeripheral",data:e})}#ws={};get devices(){return this.#ws}}const Pe=h("WebSocketServer",{log:!0});t&&require("ws");class Le{constructor(){re&&d(re,this.#Cs)}static#Te=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Te}get eventTypes(){return Le.#Te}#Pe=new g(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Le(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#Ts;get server(){return this.#Ts}set server(e){this.#Ts!=e?(Pe.log("assigning server..."),this.#Ts&&(Pe.log("clearing existing server..."),u(this.#Ts,this.#Ps)),d(e,this.#Ps),this.#Ts=e,Pe.log("assigned server")):Pe.warn("redundant WebSocket assignment")}broadcast(e){this.server.clients.forEach((t=>{t.send(e)}))}#Ps={close:this.#Ls.bind(this),connection:this.#Ms.bind(this),error:this.#Ws.bind(this),headers:this.#Ns.bind(this),listening:this.#Rs.bind(this)};#Ls(){Pe.log("server.close")}#Ms(e){Pe.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new Q((()=>this.#xs(e)),de),e.pingClientTimer.start(),d(e,this.#ks),this.#Le({type:"clientConnected",message:{client:e}})}#Ws(e){Pe.error(e)}#Ns(){}#Rs(){Pe.log("server.listening")}#ks={open:this.#Is.bind(this),message:this.#Os.bind(this),close:this.#As.bind(this),error:this.#Us.bind(this)};#Is(e){Pe.log("client.open")}#Os(e){Pe.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView((n=e.data).buffer.slice(n.byteOffset,n.byteOffset+n.byteLength));var n;this.#_s(t,s)}#As(e){Pe.log("client.close");const t=e.target;t.pingClientTimer.stop(),u(t,this.#ks),this.#Le({type:"clientDisconnected",message:{client:t}})}#Us(e){Pe.log("client.error")}static#Ze=new TextDecoder;get#$e(){return Le.#Ze}#_s(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),r=ue[n],i=t.getUint8(s++);Pe.log({messageTypeEnum:n,messageType:r,messageByteLength:i}),Pe.assertWithError(r,`invalid messageTypeEnum ${n}`);let a=s;switch(r){case"ping":e.send(pongMessageBuffer);break;case"pong":case"disconnectFromAllPeripherals":break;case"isScanningAvailable":e.send(this.#$s);break;case"isScanning":e.send(this.#Vs);break;case"startScan":re.startScan();break;case"stopScan":re.stopScan();break;case"discoveredPeripherals":e.send(this.#zs);break;case"connectToPeripheral":{const e=me(t,a);a+=e.length,re.connectToPeripheral(e)}break;case"disconnectFromPeripheral":{const e=me(t,a);a+=e.length,re.disconnectFromPeripheral(e)}break;default:Pe.error(`uncaught messageType "${r}"`)}s+=i}}get#$s(){return pe({type:"isScanningAvailable",data:re.isAvailable})}get#Vs(){return pe({type:"isScanning",data:re.isScanning})}#Bs(e){this.server.clients.forEach((t=>{t.send(e)}))}#xs(e){e.isAlive?(e.isAlive=!1,e.send(fe)):e.terminate()}#Cs={isAvailable:this.#Fs.bind(this),isScanning:this.#qs.bind(this),discoveredPeripheral:this.#Hs.bind(this),expiredDiscoveredPeripheral:this.#zt.bind(this)};#Fs(e){this.#Bs(this.#$s)}#qs(e){this.#Bs(this.#Vs)}#Hs(e){const t=e.message.discoveredPeripheral;console.log(t),this.#Bs(this.#js(t))}#zt(e){const t=e.message.discoveredPeripheral;console.log("expired",t),this.#Bs(this.#Gs(t))}#js(e){return pe({type:"discoveredPeripheral",data:e})}get#zs(){return pe(...re.discoveredPeripheralsArray.map((e=>({type:"discoveredPeripheral",data:e}))))}#Gs(e){return pe({type:"expiredDiscoveredPeripheral",data:e.id})}}var Me={setAllConsoleLevelFlags:function(e){c.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){c.setLevelFlagsForType(e,t)},Device:G,DevicePair:le,WebSocketClient:Te,WebSocketServer:Le,Scanner:re};export{Me as default};
