/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e=!1;function t(){}const s=console.log.bind(console),n=console.warn.bind(console),r=console.error.bind(console),o=console.assert.bind(console);class i{static#e={};constructor(e){if(i.#e[e])throw new Error(`"${e}" console already exists`);i.#e[e]=this}#t={log:e,warn:e,error:e};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new i(e)}get log(){return this.#t.log?s:t}get warn(){return this.#t.warn?n:t}get error(){return this.#t.error?r:t}get assert(){return this.#t.assert?o:t}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value of type "${typeof e}" not of type "${t}"`)}}function a(e,t){return i.create(e,t)}const c=a("EventDispatcher",{log:!1});class h{constructor(e){c.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#s=e}#s;#n(e){return!this.#s||this.#s.includes(e)}#r(e){c.assertWithError(this.#n(e),`invalid event type "${e}"`)}#o;addEventListener(e,t,s){if(c.log(`adding "${e}" eventListener`,t),this.#r(e),this.#o||(this.#o={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#o;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return c.log(`has "${e}" eventListener?`,t),this.#r(e),this.#o?.[e]?.includes(t)}removeEventListener(e,t){if(c.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#o[e].indexOf(t);return this.#o[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#o?.[e.type]){e.target=this;const t=this.#o[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function u(e,t){Object.entries(t).forEach((([t,s])=>{e.addEventListener(t,s)}))}const m=a("ConnectionManager");class g{onStatusUpdated;onMessageReceived;static#i(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#a(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#i("type")}get type(){return this.constructor.type}#c(){m.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){m.assertWithError(this.constructor!=g,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c()}#u="not connected";get status(){return this.#u}set status(e){m.assertTypeWithError(e,"string"),this.#u!=e?(m.log(`new connection status "${e}"`),this.#u=e,this.onStatusUpdated?.(this.status)):m.warn("same connection status")}get isConnected(){return"connected"==this.status}#m(){m.assertWithError(!this.isConnected,"device is already connected")}#g(){m.assertWithError("connecting"!=this.status,"device is already connecting")}#l(){m.assertWithError(this.isConnected,"device is not connected")}#p(){m.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#d(){this.#l(),this.#p()}async connect(){this.#m(),this.#g(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#m(),this.#g(),m.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#l(),this.#p(),this.status="disconnecting"}async sendMessage(e,t){this.#d(),m.log("sending message",{messageType:e,data:t})}}function l(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function p(e){return BluetoothUUID.getCharacteristic(e)}function d(e){return BluetoothUUID.getService(e)}const f=Object.freeze({services:{deviceInformation:{uuid:d("device_information"),characteristics:{manufacturerName:{uuid:p("manufacturer_name_string")},modelNumber:{uuid:p("model_number_string")},hardwareRevision:{uuid:p("hardware_revision_string")},firmwareRevision:{uuid:p("firmware_revision_string")},softwareRevision:{uuid:p("software_revision_string")},pnpId:{uuid:p("pnp_id")}}},battery:{uuid:d("battery_service"),characteristics:{batteryLevel:{uuid:p("battery_level")}}},main:{uuid:l(0),characteristics:{name:{uuid:l(1)},type:{uuid:l(2)},sensorConfiguration:{uuid:l(3)},sensorData:{uuid:l(4)},haptics:{uuid:l(5)}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,s])=>e==s.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>e==s.uuid))?.[0],t))),t}}),v=f.serviceUUIDs,y=f.optionalServiceUUIDs;const S=a("WebBluetoothConnectionManager",{log:!0});class b extends g{#f={characteristicvaluechanged:this.#v.bind(this)};#y={gattserverdisconnected:this.#S.bind(this)};static get isSupported(){return"bluetooth"in navigator}static get type(){return"web bluetooth"}#b;get device(){return this.#b}set device(e){var t,s;this.#b!=e?(this.#b&&(t=this.#b,s=this.#y,Object.entries(s).forEach((([e,s])=>{t.removeEventListener(e,s)}))),e&&u(e,this.#y),this.#b=e):S.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const e=await navigator.bluetooth.requestDevice({filters:[{services:v}],optionalServices:y});S.log("got BluetoothDevice",e),this.device=e,S.log("connecting to device...");const t=await this.device.gatt.connect();S.log(`connected to device? ${t.connected}`),S.log("getting services...");const s=await t.getPrimaryServices();S.log("got services",s),S.log("getting characteristics...");const n=s.map((async e=>{const t=(s=e.uuid,f.getServiceNameFromUUID(s));var s;S.assertWithError(t,`no name found for service uuid "${e.uuid}"`),S.log(`got "${t}" service`),e._name=t,this.#E.set(t,e),S.log("getting characteristics for service",e);const n=await e.getCharacteristics();S.log("got characteristics for service",e,n);const r=n.map((async e=>{const s=(n=e.uuid,f.getCharacteristicNameFromUUID(n));var n;S.assertWithError(s,`no name found for characteristic uuid "${e.uuid}" in "${t}" service`),S.log(`got "${s}" characteristic in "${t}" service`),e._name=s,this.#w.set(s,e),u(e,this.#f),e.properties.read&&await e.readValue(),e.properties.notify&&(S.log(`starting notifications for "${s}" characteristic`,e),await e.startNotifications())}));await Promise.all(r)}));await Promise.all(n),S.log("fully connected"),this.connectionStatus="connected"}catch(e){S.error(e),this.connectionStatus="not connected"}}async disconnect(){await super.disconnect(),S.log("disconnecting from device..."),this.server.disconnect()}#v(e){S.log("oncharacteristicvaluechanged",e);const t=e.target,s=t._name;S.assertWithError(s,`no name found for characteristic with uuid "${t.uuid}"`),S.log(`oncharacteristicvaluechanged for "${s}" characteristic`,e);const n=t.value;switch(S.assertWithError(n,`no data found for "${s}" characteristic`),S.log(`data for "${s}" characteristic`,Array.from(new Uint8Array(n.buffer))),s){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${s}"`)}}#S(e){S.log("gattserverdisconnected",e),this.connectionStatus="not connected"}async sendMessage(e,t){throw await super.sendCommand(...arguments),Error(`uncaught messageType "${e}"`)}get canReconnect(){return Boolean(this.server)}async reconnect(){await super.reconnect(),S.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(S.log("successfully reconnected!"),this.connectionStatus="connected"):(S.log("unable to reconnect"),this.connectionStatus="not connected")}}const E=a("SensorDataManager",{log:!0});class w{#C;get deviceType(){return this.#C}set deviceType(e){E.assertTypeWithError(e,"string"),this.#C!=e?(E.log({newDeviceType:e}),this.#C=e):E.warn(`redundant deviceType assignment "${e}"`)}static#T=["pressure","accelerometer","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#T}get#D(){return w.#T}static assertValidSensorType(e){E.assertTypeWithError(e,"string"),E.assertWithError(this.#T.includes(e),`invalid sensorType "${e}"`)}static assertValidSensorTypeEnum(e){E.assertTypeWithError(e,"number"),E.assertWithError(e in this.#T,`invalid sensorTypeEnum ${e}`)}onDataReceived;#R=0;#L=0;static#W=65536;get Uint16Max(){return w.#W}#M(e,t){const s=e.getUint16(t,!0);s<this.#L&&(this.#R+=this.Uint16Max),this.#L=s;return s+this.#R}parse(e){E.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#M(e,t);for(t+=2;offset<e.byteLength;){const n=e.getUint8(offset++);let r;w.assertValidSensorTypeEnum(n);const o=this.#D[n];switch(o){case"pressure":r=this.#U(e,t),t+=2*this.numberOfPressureSensors;break;case"accelerometer":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.#k(e,t,o),t+=7;break;case"gameRotation":case"rotation":r=this.#I(e,t,o),t+=10;break;case"barometer":break;default:throw Error(`uncaught sensorType "${o}"`)}E.assertWithError(r,`no value defined for sensorType "${o}"`),this.onDataReceived?.(o,{timestamp:s,[o]:r})}}static#_={pressure:65536,accelerometer:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14,barometer:.78125};get#$(){return w.#_}static#N=8;get numberOfPressureSensors(){return w.#N}#U(e,t){const s=[];for(let n=0;n<this.numberOfPressureSensors;n++,t+=2)s[n]=e.getUint16(t,!0);return E.log({pressure:s}),s}#k(e,t,s){let[n,r,o]=[e.getUint16(t,!0),e.getUint16(t+2,!0),e.getUint16(t+4,!0)].map((e=>e*this.#$[s]));const i={x:n,y:r,z:o};return E.log({vector:i}),i}#I(e,t,s){let[n,r,o,i]=[e.getUint16(t,!0),e.getUint16(t+2,!0),e.getUint16(t+4,!0),e.getUint16(t+6,!0)].map((e=>e*this.#$[s]));const a={x:n,y:r,z:o,w:i};return E.log({quaternion:a}),a}}const C=a("SensorConfigurationManager",{log:!0});class T{#C;get deviceType(){return this.#C}set deviceType(e){C.assertTypeWithError(e,"string"),this.#C!=e?(C.log({newDeviceType:e}),this.#C=e):C.warn(`redundant deviceType assignment "${e}"`)}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s);w.assertValidSensorTypeEnum(n);const r=w.Types[n],o=e.getUint16(s+1,!0);C.log({sensorTypeEnum:n,sensorType:r,sensorDataRate:o}),t[r]=o}return C.log({parsedSensorConfiguration:t}),t}createData(e){const t=Object.keys(e);t.forEach((e=>{w.assertValidSensorType(e)}));const s=new DataView(new ArrayBuffer(3*t.length));let n=0;return t.forEach((e=>{const t=w.Types.indexOf(e);s.setUint8(n,t),s.setUint16(n+1,t,!0),n+=3})),C.log({sensorConfigurationData:s}),s}}const D=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];const R=a("HapticsManager");class L{static#x=["front","rear"];get locations(){return L.#x}#O(e){R.assertTypeWithError(e,"string"),R.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#B(e){R.assertWithError(Array.isArray(e),"passed non-array"),R.assertWithError(e.length>0,"passed empty array"),e.forEach((e=>{this.#O(e)}))}#V(e){this.#B(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),R.log({locationsBitmask:t}),R.assertWithError(t>0,"locationsBitmask must not be zero"),t}get waveformEffects(){return D}#A(e){R.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}#F(e){switch(typeof e){case"string":const t=e;this.#A(t);break;case"number":const s=e;R.assertWithError(s>=0,`delay must be 0ms or greater (got ${s})`),R.assertWithError(s<=1270,`delay must be 1270ms or less (got ${s})`);break;default:throw Error(`invalid waveformEffectSegment type "${typeof e}"`)}}static#z=8;get maxNumberOfWaveformEffectSegments(){return L.#z}#H(e){R.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#F(e)}))}static#q=3;get maxWaveformEffectSegmentLoopCount(){return L.#q}#j(e){R.assertTypeWithError(e,"number"),R.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),R.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}#P(e){R.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegmentLoopCounts or fewer (got ${e.length})`),e.forEach((e=>{this.#j(e)}))}static#G=6;get maxWaveformEffectSequenceLoopCount(){return L.#G}#Q(e){R.assertTypeWithError(e,"number"),R.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),R.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}#J(e){R.assertTypeWithError(e.amplitude,"number"),R.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),R.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),R.assertTypeWithError(e.duration,"number"),R.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),R.assertWithError(e.duration<=2560,`duration must be 2560ms or less (got ${e.duration}ms)`)}static#K=20;get maxNumberOfWaveformSegments(){return L.#K}#X(e){R.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#J(e)}))}createWaveformEffectsData(e,t,s=[],n=0){this.#H(t),this.#P(s),this.#Q(n),this.#Y(e,"waveformEffect",dataView)}createWaveformData(e,t){this.#X(t);const s=new DataView(new ArrayBuffer(2*t.length));t.forEach(((e,t)=>{s.setUint8(2*t,e.amplitude),s.setUint8(2*t+1,Math.floor(e.duration/10))})),this.#Y(e,"waveform",s)}static#Z=["waveformEffect","waveform"];get#ee(){return L.#Z}#te(e){R.assertTypeWithError(e,"string"),R.assertWithError(this.#ee.includes(e),`invalid vibrationType "${e}"`)}#Y(e,t,s){const n=this.#V(e);this.#te(t);const r=this.#ee.indexOf(t);R.log({locationsBitmask:n,vibrationTypeIndex:r,dataView:s});const o=function(...e){const t=(e=(e=(e=e.filter((e=>e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}(n,r,s.byteLength,s);return R.log({data:o}),o}}const W=a("BrilliantSole",{log:!0});class M{constructor(){this.connectionManager=new b,this.#se.onDataReceived=this.#ne.bind(this)}static#re=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressure","accelerometer","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];get#s(){return M.#re}#oe=new h(this.#s);addEventListener(e,t,s){this.#oe.addEventListener(...arguments)}#ie(e){this.#oe.dispatchEvent(e)}removeEventListener(e,t){return this.#oe.removeEventListener(...arguments)}#ae;get connectionManager(){return this.#ae}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#ce.bind(this),e.onMessageReceived=this.#he.bind(this)),this.#ae=e,W.log("assigned new connectionManager",this.#ae)):W.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#l(){W.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}get connectionType(){return this.connectionManager?.type}async disconnect(){return this.connectionManager.disconnect()}get connectionStatus(){return this.#ae?.status}#ce(e){switch(W.log({connectionStatus:e}),this.#ie({type:"connectionStatus",message:{connectionStatus:e}}),this.#ie({type:this.connectionStatus}),e){case"connected":case"not connected":this.#ie({type:"isConnected",message:{isConnected:this.isConnected}})}}#he(e,t){switch(W.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#ue.decode(t);W.log({manufacturerName:s}),this.#me({manufacturerName:s});break;case"modelNumber":const n=this.#ue.decode(t);W.log({modelNumber:n}),this.#me({modelNumber:n});break;case"softwareRevision":const r=this.#ue.decode(t);W.log({softwareRevision:r}),this.#me({softwareRevision:r});break;case"hardwareRevision":const o=this.#ue.decode(t);W.log({hardwareRevision:o}),this.#me({hardwareRevision:o});break;case"firmwareRevision":const i=this.#ue.decode(t);W.log({firmwareRevision:i}),this.#me({firmwareRevision:i});break;case"pnpId":const a={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==a.source&&(a.vendorId=t.getUint8(1)|t.getUint8(2)<<8),W.log({pnpId:a}),this.#me({pnpId:a});break;case"batteryLevel":const c=t.getUint8(0);W.log({batteryLevel:c}),this.#ge(c);break;case"getName":const h=this.#ue.decode(t);W.log({name:h}),this.#le(h);break;case"getType":const u=t.getUint8(0),m=this.#D[u];W.log({typeEnum:u,type:m}),this.#pe(m);break;case"getSensorConfiguration":const g=this.#de.parse(t);W.log({sensorConfiguration:g}),this.#fe(g);break;case"sensorData":this.#se.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#ve=new TextEncoder;get#ye(){return M.#ve}static#Se=new TextDecoder;get#ue(){return M.#Se}#be={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#be}get#Ee(){return Object.values(this.#be).every((e=>null!=e))}#me(e){W.log({partialDeviceInformation:e}),Object.assign(this.#be,e),W.log({deviceInformation:this.#be}),this.#Ee&&(W.log("completed deviceInformation"),this.#ie({type:"deviceInformation",message:{deviceInformation:this.#be}}))}#we=null;get batteryLevel(){return this.#we}#ge(e){W.assertTypeWithError(e,"number"),this.#we!=e?(W.log({newBatteryLevel:e}),this.#we=e,this.#ie({type:"batteryLevel",message:{batteryLevel:this.#we}})):W.warn(`duplicate batteryLevel assignment ${e}`)}#Ce;get name(){return this.#Ce}#le(e){W.assertTypeWithError(e,"string"),W.log({updatedName:e}),this.#Ce=e,this.#ie({type:"getName",message:{name:this.#Ce}})}get maxNameLength(){return 32}async setName(e){this.#l(),W.assertTypeWithError(e,"string"),W.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#ye.encode(e);W.log({setNameData:t}),await this.#ae.sendMessage("setName",t)}static#T=["leftInsole","rightInsole"];static Types(){return this.#T}get#D(){return M.#T}#Te;get type(){return this.#Te}#De(e){W.assertTypeWithError(e,"string"),W.assertWithError(this.#D.includes(e),`invalid type "${e}"`)}#pe(e){this.#De(e),W.log({updatedType:e}),e!=this.type?(this.#Te=e,this.#se.deviceType=this.#Te,this.#de.deviceType=this.#Te,this.#ie({type:"getType",message:{type:this.#Te}})):W.warn("redundant type assignment")}async setType(e){this.#l(),this.#De(e);const t=Uint8Array.from([e]);W.log({setTypeData:t}),await this.#ae.sendMessage("setType",t)}#de=new T;#Re;get sensorConfiguration(){return this.#Re}#fe(e){this.#Re=e,W.log({sensorConfiguration:this.sensorConfiguration}),this.#ie({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#l();const t=this.#de.createData(e);W.log({setSensorConfigurationMessage:t}),await this.#ae.sendMessage("setSensorConfiguration",message)}#se=new w;#ne(e,t){W.log({sensorType:e,data:t}),this.#ie({type:e,message:t})}#Le=new L;triggerVibrationWaveformEffects(){}triggerVibrationWaveform(){}}M.setConsoleLevelFlagsForType=function(e,t){i.setLevelFlagsForType(e,t)},M.setAllConsoleLevelFlags=function(e){i.setAllLevelFlags(e)};export{M as default};
