/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new h(e)}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function l(e,t){return h.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=l("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const m=l("ConnectionManager");class f{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","triggerVibration"];static get MessageTypes(){return this.#o}get id(){this.#c("id")}onStatusUpdated;onMessageReceived;static#h(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#c(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#h("type")}get type(){return this.constructor.type}#l(){m.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){m.assertWithError(this.constructor!=f,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#l()}#d="not connected";get status(){return this.#d}set status(e){m.assertTypeWithError(e,"string"),this.#d!=e?(m.log(`new connection status "${e}"`),this.#d=e,this.onStatusUpdated?.(this.status)):m.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#u(){m.assertWithError(!this.isConnected,"device is already connected")}#v(){m.assertWithError("connecting"!=this.status,"device is already connecting")}#p(){m.assertWithError(this.isConnected,"device is not connected")}#m(){m.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#f(){this.#p(),this.#m()}async connect(){this.#u(),this.#v(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#u(),this.#v(),m.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#p(),this.#m(),this.status="disconnecting",m.log("disconnecting from device...")}async sendMessage(e,t){this.#f(),m.log("sending message",{messageType:e,data:t})}}if(t){var S=require("webbluetooth").BluetoothUUID}if(e)S=window.BluetoothUUID;function b(e){return`ea6da725-2000-4f9b-893d-c3913e33b3e${e}`}function D(e){return S?.getCharacteristic?.(e)}function y(e){return S?.getService?.(e)}const C=Object.freeze({services:{deviceInformation:{uuid:y("device_information"),characteristics:{manufacturerName:{uuid:D("manufacturer_name_string")},modelNumber:{uuid:D("model_number_string")},hardwareRevision:{uuid:D("hardware_revision_string")},firmwareRevision:{uuid:D("firmware_revision_string")},softwareRevision:{uuid:D("software_revision_string")},pnpId:{uuid:D("pnp_id")},serialNumber:{uuid:D("serial_number_string")}}},battery:{uuid:y("battery_service"),characteristics:{batteryLevel:{uuid:D("battery_level")}}},main:{uuid:b(0),characteristics:{name:{uuid:b(1)},type:{uuid:b(2)},sensorConfiguration:{uuid:b(3)},pressurePositions:{uuid:b(4)},sensorScalars:{uuid:b(5)},sensorData:{uuid:b(6)},vibration:{uuid:b(7)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),E=C.serviceUUIDs,w=C.optionalServiceUUIDs,M=[...E,...w];function L(e){return C.getServiceNameFromUUID(e)}const T=[],W=[],N=[];function k(e){return C.getCharacteristicNameFromUUID(e)}function I(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(C.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{E.includes(t.uuid)&&T.push(s.uuid),W.push(s.uuid),N.push(e)}))}),[]);const R=l("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var x={bluetooth:t}}if(e)x=window.navigator;class A extends f{get id(){return this.device?.id}#S={characteristicvaluechanged:this.#b.bind(this)};#D={gattserverdisconnected:this.#y.bind(this)};static get isSupported(){return"bluetooth"in x}static get type(){return"webBluetooth"}#C;get device(){return this.#C}set device(e){this.#C!=e?(this.#C&&p(this.#C,this.#D),e&&v(e,this.#D),this.#C=e):R.log("tried to assign the same BluetoothDevice")}get server(){return this.#C?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const t=await x.bluetooth.requestDevice({filters:[{services:E}],optionalServices:e?w:[]});R.log("got BluetoothDevice"),this.device=t,R.log("connecting to device...");const s=await this.device.gatt.connect();R.log(`connected to device? ${s.connected}`),await this.#M(),R.log("fully connected"),this.status="connected"}catch(e){R.error(e),this.status="not connected",this.server?.disconnect(),this.#L()}}async#M(){this.#L(),R.log("getting services...");const e=await this.server.getPrimaryServices();R.log("got services",e.length),R.log("getting characteristics...");for(const t in e){const i=e[t];R.log({service:i});const r=L(i.uuid);if(R.assertWithError(r,`no name found for service uuid "${i.uuid}"`),R.log(`got "${r}" service`),"dfu"==r){R.log("skipping dfu service");continue}i._name=r,this.#E.set(r,i),R.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();R.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];R.log({characteristic:t});const i=k(t.uuid);R.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),R.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#w.set(i,t),v(t,this.#S);const o=t.properties||I(i);o.read&&(R.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#T(t)),o.notify&&(R.log(`starting notifications for "${i}" characteristic`),await t.startNotifications())}}}#L(){this.device&&p(this.device,this.#D),this.#w.forEach((e=>{p(e,this.#S)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#L(),this.status="not connected"}#b(e){R.log("oncharacteristicvaluechanged");const t=e.target;this.#T(t)}#T(e){R.log("onCharacteristicValue");const t=e._name;R.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),R.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;switch(R.assertWithError(s,`no data found for "${t}" characteristic`),R.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),t){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":this.onMessageReceived(t,s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;default:throw new Error(`uncaught characteristicName "${t}"`)}}#y(e){R.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let i,r;switch(await super.sendMessage(...arguments),e){case"setName":i="name";break;case"setType":i="type";break;case"setSensorConfiguration":i="sensorConfiguration";break;case"triggerVibration":i="vibration";break;default:throw Error(`uncaught messageType "${e}"`)}if(!i)return void R.log("no characteristicName found");r=this.#w.get(i),R.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||I(i);a.read&&!a.notify&&(R.log("reading value after write..."),await r.readValue(),(s||n)&&this.#T(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),R.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(R.log("successfully reconnected!"),await this.#M(),this.status="connected"):(R.log("unable to reconnect"),this.status="not connected")}}const O={min:1/0,max:-1/0};class P{#W=Object.assign({},O);reset(){Object.assign(this.#W,O)}update(e){this.#W.min=Math.min(e,this.#W.min),this.#W.max=Math.max(e,this.#W.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#W.min,this.#W.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class ${#W={x:new P,y:new P};reset(){this.#W.x.reset(),this.#W.y.reset()}update(e){this.#W.x.update(e.x),this.#W.y.update(e.y)}getNormalization(e){return{x:this.#W.x.getNormalization(e.x),y:this.#W.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const U=l("PressureSensorDataManager",{log:!0});class _{#N=[];get positions(){return this.#N}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;U.log({positions:t}),this.#N=t,this.#k=(s=this.numberOfSensors,n=()=>new P,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#k;#I=new $;resetRange(){this.#k.forEach((e=>e.reset())),this.#I.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),r=this.#k[s].updateAndGetNormalization(i),a=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:r,position:a},t.rawSum+=i,t.normalizedSum+=r/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#I.updateAndGetNormalization(t.center)),U.log({pressure:t}),t}}const V=l("MotionSensorDataManager",{log:!1});class z{static#R=6;static get Vector3Size(){return this.#R}get vector3Size(){return z.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return V.log({vector:r}),r}static#x=8;static get QuaternionSize(){return this.#x}get quaternionSize(){return z.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return V.log({quaternion:a}),a}}l("BarometerSensorDataManager",{log:!0});class B{static#A={barometer:.78125};static get Scalars(){return this.#A}get scalars(){return B.Scalars}}const F=l("ArrayBufferUtils",{log:!1}),q=new TextEncoder;function j(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return G(e)}if(e instanceof Array){return j(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return G(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function H(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function G(e){const t=q.encode(e);return j(t.byteLength,t)}function J(e,t,s){let n;return s&&(n=e.byteOffset+t+s),F.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const Q=l("ParseUtils",{log:!0}),Z=new TextDecoder;function K(e,t=0){const s=e.getUint8(t++);return{string:Z.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function X(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),Q.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),Q.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=J(e,i,o);Q.log({_dataView:c}),s(a,c),i+=o}}const Y=l("SensorDataManager",{log:!0});class ee{pressureSensorDataManager=new _;motionSensorDataManager=new z;barometerSensorDataManager=new B;static#O=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#O}get types(){return ee.Types}#P=new Map;static AssertValidSensorType(e){Y.assertTypeWithError(e,"string"),Y.assertWithError(this.#O.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){Y.assertTypeWithError(e,"number"),Y.assertWithError(e in this.#O,`invalid sensorTypeEnum ${e}`)}onDataReceived;#$=0;#U=0;clearTimestamp(){Y.log("clearing sensorDataManager timestamp data"),this.#$=0,this.#U=0}#_(e,t){const s=e.getUint16(t,!0);s<this.#U&&(this.#$+=65536),this.#U=s;return s+this.#$}parseData(e){Y.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#_(e,t);t+=2;X(new DataView(e.buffer,t),ee.Types,((e,t)=>{const n=e,i=this.#P.get(n);let r;switch(n){case"pressure":r=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:Y.error(`uncaught sensorType "${n}"`)}Y.assertWithError(r,`no value defined for sensorType "${n}"`),this.onDataReceived?.(n,{timestamp:s,[n]:r})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=ee.Types[s];if(!n){Y.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);Y.log({sensorType:n,sensorScalar:i}),this.#P.set(n,i)}}}const te=l("SensorConfigurationManager",{log:!1});class se{#V;#z(e){te.assertWithError(this.#V,"must get initial sensorConfiguration");const t=this.#V?.includes(e);return te.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=ee.Types[n];if(!i){te.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);te.log({sensorType:i,sensorRate:r}),t[i]=r}return te.log({parsedSensorConfiguration:t}),this.#V=Object.keys(t),t}static#B=65535;static get MaxSensorRate(){return this.#B}get maxSensorRate(){return se.MaxSensorRate}static#F=5;static get SensorRateStep(){return this.#F}get sensorRateStep(){return se.SensorRateStep}static#q(e){te.assertTypeWithError(e,"number"),te.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),te.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),te.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#j(e){se.#q(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#z(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{ee.AssertValidSensorType(t);const i=ee.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#j(r),s.setUint16(3*n+1,e[t],!0)})),te.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const ne=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ie=l("VibrationManager");class re{static#H=["front","rear"];static get Locations(){return this.#H}get locations(){return re.Locations}#G(e){ie.assertTypeWithError(e,"string"),ie.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#J(e){this.#Q(e),e.forEach((e=>{this.#G(e)}))}#Z(e){this.#J(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ie.log({locationsBitmask:t}),ie.assertWithError(t>0,"locationsBitmask must not be zero"),t}#Q(e){ie.assertWithError(Array.isArray(e),"passed non-array"),ie.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return ne}get waveformEffects(){return re.WaveformEffects}#K(e){ie.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#X=1270;static get MaxWaveformEffectSegmentDelay(){return this.#X}get maxWaveformEffectSegmentDelay(){return re.MaxWaveformEffectSegmentDelay}#Y(e){if(null!=e.effect){const t=e.effect;this.#K(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ie.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ie.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ee(t)}}static#te=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#te}get maxWaveformEffectSegmentLoopCount(){return re.MaxWaveformEffectSegmentLoopCount}#ee(e){ie.assertTypeWithError(e,"number"),ie.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ie.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#se=8;static get MaxNumberOfWaveformEffectSegments(){return this.#se}get maxNumberOfWaveformEffectSegments(){return re.MaxNumberOfWaveformEffectSegments}#ne(e){this.#Q(e),ie.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Y(e)}))}static#ie=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ie}get maxWaveformEffectSequenceLoopCount(){return re.MaxWaveformEffectSequenceLoopCount}#re(e){ie.assertTypeWithError(e,"number"),ie.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ie.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ae=2550;static get MaxWaveformSegmentDuration(){return this.#ae}get maxWaveformSegmentDuration(){return re.MaxWaveformSegmentDuration}#oe(e){ie.assertTypeWithError(e.amplitude,"number"),ie.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ie.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ie.assertTypeWithError(e.duration,"number"),ie.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ie.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#ce=20;static get MaxNumberOfWaveformSegments(){return this.#ce}get maxNumberOfWaveformSegments(){return re.MaxNumberOfWaveformSegments}#he(e){this.#Q(e),ie.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#oe(e)}))}createWaveformEffectsData(e,t,s=0){this.#ne(t),this.#re(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ie.log({dataArray:n,dataView:o}),this.#le(e,"waveformEffect",o)}createWaveformData(e,t){this.#he(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ie.log({dataView:s}),this.#le(e,"waveform",s)}static#O=["waveformEffect","waveform"];static get Types(){return this.#O}get#ge(){return re.Types}#de(e){ie.assertTypeWithError(e,"string"),ie.assertWithError(this.#ge.includes(e),`invalid vibrationType "${e}"`)}#le(e,t,s){ie.assertWithError(s?.byteLength>0,"no data received");const n=this.#Z(e);this.#de(t);const i=this.#ge.indexOf(t);ie.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=j(n,i,s.byteLength,s);return ie.log({data:r}),r}}const ae=l("Device",{log:!0});class oe{get id(){return this.#ue?.id}constructor(){this.#ve.onDataReceived=this.#pe.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{oe.#me(this)}))}static get#fe(){return A}static#Se=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage"];static get EventTypes(){return this.#Se}get eventTypes(){return oe.#Se}#be=new u(this,this.eventTypes);addEventListener(e,t,s){this.#be.addEventListener(e,t,s)}#De(e){this.#be.dispatchEvent(e)}removeEventListener(e,t){return this.#be.removeEventListener(e,t)}#ue;get connectionManager(){return this.#ue}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#ye.bind(this),e.onMessageReceived=this.#Ce.bind(this)),this.#ue=e,ae.log("assigned new connectionManager",this.#ue)):ae.log("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new oe.#fe),this.#Ee(),this.connectionManager.connect()}#we=!1;get isConnected(){return this.#we}#p(){ae.assertWithError(this.isConnected,"not connected")}static#Me=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions"];static get AllInformationConnectionMessages(){return this.#Me}get#Le(){return oe.#Me}get#Te(){return this.#Le.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#Ee(),this.connectionManager?.reconnect()}static#We=!1;static get ReconnectOnDisconnection(){return this.#We}static set ReconnectOnDisconnection(e){ae.assertTypeWithError(e,"boolean"),this.#We=e}#Ne=oe.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Ne}set reconnectOnDisconnection(e){ae.assertTypeWithError(e,"boolean"),this.#Ne=e}#ke;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#p(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#ue?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#ue.status;default:return"not connected"}}#ye(e){ae.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(ae.log("starting reconnect interval..."),this.#ke=setInterval((()=>{ae.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#ke&&(ae.log("clearing reconnect interval"),clearInterval(this.#ke),this.#ke=void 0),this.#Ie()}#Re(e=!1){this.#De({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#De({type:this.connectionStatus}),e&&this.#De({type:"isConnected",message:{isConnected:this.isConnected}})}#Ie(){switch(this.#we=this.connectionManager?.isConnected&&this.#Te,this.connectionStatus){case"connected":this.#we&&this.#Re(!0);break;case"not connected":this.#Re(!0);break;default:this.#Re(!1)}}#Ee(){this.latestConnectionMessage.clear()}#Ce(e,t){switch(ae.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#xe.decode(t);ae.log({manufacturerName:s}),this.#Ae({manufacturerName:s});break;case"modelNumber":const n=this.#xe.decode(t);ae.log({modelNumber:n}),this.#Ae({modelNumber:n});break;case"softwareRevision":const i=this.#xe.decode(t);ae.log({softwareRevision:i}),this.#Ae({softwareRevision:i});break;case"hardwareRevision":const r=this.#xe.decode(t);ae.log({hardwareRevision:r}),this.#Ae({hardwareRevision:r});break;case"firmwareRevision":const a=this.#xe.decode(t);ae.log({firmwareRevision:a}),this.#Ae({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),ae.log({pnpId:o}),this.#Ae({pnpId:o});break;case"serialNumber":const c=this.#xe.decode(t);ae.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);ae.log("received battery level",{batteryLevel:h}),this.#Oe(h);break;case"getName":const l=this.#xe.decode(t);ae.log({name:l}),this.#Pe(l);break;case"getType":const g=t.getUint8(0),d=this.#ge[g];ae.log({typeEnum:g,type:d}),this.#$e(d);break;case"getSensorConfiguration":const u=this.#Ue.parse(t);ae.log({sensorConfiguration:u}),this.#_e(u);break;case"sensorScalars":this.#ve.parseScalars(t);break;case"pressurePositions":this.#ve.pressureSensorDataManager.parsePositions(t);break;case"sensorData":this.#ve.parseData(t);break;default:throw Error(`uncaught messageType ${e}`)}this.latestConnectionMessage.set(e,t),this.#De({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#Te&&this.#Ie()}latestConnectionMessage=new Map;static#Ve=new TextEncoder;get#ze(){return oe.#Ve}static#Be=new TextDecoder;get#xe(){return oe.#Be}#Fe={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Fe}get#qe(){return Object.values(this.#Fe).every((e=>null!=e))}#Ae(e){ae.log({partialDeviceInformation:e});for(const t in e)this.#De({type:t,message:{[t]:e[t]}});Object.assign(this.#Fe,e),ae.log({deviceInformation:this.#Fe}),this.#qe&&(ae.log("completed deviceInformation"),this.#De({type:"deviceInformation",message:{deviceInformation:this.#Fe}}))}#je=null;get batteryLevel(){return this.#je}#Oe(e){ae.assertTypeWithError(e,"number"),this.#je!=e?(this.#je=e,ae.log({updatedBatteryLevel:this.#je}),this.#De({type:"batteryLevel",message:{batteryLevel:this.#je}})):ae.log(`duplicate batteryLevel assignment ${e}`)}#He;get name(){return this.#He}#Pe(e){ae.assertTypeWithError(e,"string"),this.#He=e,ae.log({updatedName:this.#He}),this.#De({type:"getName",message:{name:this.#He}})}static get MinNameLength(){return 2}get minNameLength(){return oe.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return oe.MaxNameLength}async setName(e){this.#p(),ae.assertTypeWithError(e,"string"),ae.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ae.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#ze.encode(e);ae.log({setNameData:t}),await this.#ue.sendMessage("setName",t)}static#O=["leftInsole","rightInsole"];static get Types(){return this.#O}get#ge(){return oe.Types}#Ge;get type(){return this.#Ge}get typeEnum(){return oe.Types.indexOf(this.type)}#Je(e){ae.assertEnumWithError(e,this.#ge)}#Qe(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(this.#ge[e],`invalid typeEnum ${e}`)}#$e(e){this.#Je(e),e!=this.type?(this.#Ge=e,ae.log({updatedType:this.#Ge}),this.#De({type:"getType",message:{type:this.#Ge}}),oe.#Ze&&oe.#Ke(this)):ae.log("redundant type assignment")}async#Xe(e){this.#Qe(e);const t=Uint8Array.from([e]);ae.log({setTypeData:t}),await this.#ue.sendMessage("setType",t)}async setType(e){this.#p(),this.#Je(e);const t=this.#ge.indexOf(e);this.#Xe(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Ye=["left","right"];static get InsoleSides(){return this.#Ye}get insoleSides(){return oe.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return ee.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#Ue=new se;#et;get sensorConfiguration(){return this.#et}get sensorConfigurationData(){return this.#Ue.createData(this.sensorConfiguration)}static get MaxSensorRate(){return se.MaxSensorRate}static get SensorRateStep(){return se.SensorRateStep}#_e(e){this.#et=e,ae.log({updatedSensorConfiguration:this.#et}),this.#Ue.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(ae.log("clearing sensorDataManager timestamp..."),this.#ve.clearTimestamp()),this.#De({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#p(),ae.log({newSensorConfiguration:e});const t=this.#Ue.createData(e);ae.log({setSensorConfigurationData:t}),await this.#ue.sendMessage("setSensorConfiguration",t)}static#tt=!0;static get ClearSensorConfigurationOnLeave(){return this.#tt}static set ClearSensorConfigurationOnLeave(e){ae.assertTypeWithError(e,"boolean"),this.#tt=e}#st=oe.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#st}set clearSensorConfigurationOnLeave(e){ae.assertTypeWithError(e,"boolean"),this.#st=e}static#nt={};static get ZeroSensorConfiguration(){return this.#nt}static{this.SensorTypes.forEach((e=>{this.#nt[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#it=8;static get DefaultNumberOfPressureSensors(){return this.#it}#ve=new ee;#pe(e,t){ae.log({sensorType:e,sensorData:t}),this.#De({type:e,message:t}),this.#De({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#ve.pressureSensorDataManager.resetRange()}#rt=new re;static get VibrationLocations(){return re.Locations}static get VibrationTypes(){return re.Types}static get VibrationWaveformEffects(){return re.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return re.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return re.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return re.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return re.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return re.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return re.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#rt.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#rt.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#rt.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}ae.log({type:s,dataView:n}),t=j(t,n)})),await this.#ue.sendMessage("triggerVibration",t)}static#at=[];static get ConnectedDevices(){return this.#at}static#Ze=!1;static get UseLocalStorage(){return this.#Ze}static set UseLocalStorage(e){this.#ot(),ae.assertTypeWithError(e,"boolean"),this.#Ze=e,this.#Ze&&!this.#ct&&this.#ht()}static#lt={devices:[]};static#ct;static get CanUseLocalStorage(){return e&&window.localStorage}static#ot(){ae.assertWithError(e,"localStorage is only available in the browser"),ae.assertWithError(window.localStorage,"localStorage not found")}static#gt="BS.Device";static#dt(){this.#ot(),localStorage.setItem(this.#gt,JSON.stringify(this.#ct))}static async#ht(){this.#ot();let e=localStorage.getItem(this.#gt);if("string"!=typeof e)return ae.log("no info found in localStorage"),this.#ct=Object.assign({},this.#lt),void this.#dt();try{const t=JSON.parse(e);ae.log({configuration:t}),this.#ct=t,this.CanGetDevices&&await this.GetDevices()}catch(e){ae.error(e)}}static#Ke(e){if("webBluetooth"!=e.connectionType)return void ae.log("localStorage is only for webBluetooth devices");this.#ot();const t=this.#ct.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#ct.devices[t].type=e.type,this.#dt())}static#ut=[];static get AvailableDevices(){return this.#ut}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void ae.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void ae.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void ae.warn("bluetooth.getDevices() is not available in this browser");this.#ct||this.#ht();const t=this.#ct;if(!t.devices||0==t.devices.length)return void ae.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return ae.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#ut.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new oe,a=new A;a.device=e,e.name&&r.#Pe(e.name),r.#$e(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#vt(),this.AvailableDevices}static#pt=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#pt}static#mt=new u(this,this.#pt);static AddEventListener(e,t,s){this.#mt.addEventListener(e,t,s)}static#ft(e){this.#mt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#mt.removeEventListener(e,t)}static#me(e){if(e.isConnected)if(this.#at.includes(e))ae.log("device already included");else{if(ae.log("adding device",e),this.#at.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#ct.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#ct.devices.push(t):this.#ct.devices[s]=t,this.#dt()}this.#ft({type:"deviceConnected",message:{device:e}}),this.#ft({type:"deviceIsConnected",message:{device:e}})}else this.#at.includes(e)?(ae.log("removing device",e),this.#at.splice(this.#at.indexOf(e),1),this.#ft({type:"deviceDisconnected",message:{device:e}}),this.#ft({type:"deviceIsConnected",message:{device:e}})):ae.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));console.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#vt()}}static#vt(){ae.log({AvailableDevices:this.AvailableDevices}),this.#ft({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new oe;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const ce=l("Timer",{log:!1});class he{#St;get callback(){return this.#St}set callback(e){ce.assertTypeWithError(e,"function"),ce.log({newCallback:e}),this.#St=e,this.isRunning&&this.restart()}#bt;get interval(){return this.#bt}set interval(e){ce.assertTypeWithError(e,"number"),ce.assertWithError(e>0,"interval must be above 0"),ce.log({newInterval:e}),this.#bt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#Dt=null;get isRunning(){return null!=this.#Dt}start(){this.isRunning?ce.log("interval already running"):(ce.log("starting interval"),this.#Dt=setInterval(this.#St,this.#bt))}stop(){this.isRunning?(ce.log("stopping interval"),clearInterval(this.#Dt),this.#Dt=null):ce.log("interval already not running")}restart(){this.stop(),this.start()}}const le=l("BaseScanner");class ge{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#l(){le.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){le.assertWithError(this.constructor!=ge,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#l(),v(this,this.#yt)}#yt={discoveredDevice:this.#Ct.bind(this),isScanning:this.#Et.bind(this)};static#Se=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Se}get eventTypes(){return ge.#Se}#be=new u(this,this.eventTypes);addEventListener(e,t,s){this.#be.addEventListener(e,t,s)}dispatchEvent(e){this.#be.dispatchEvent(e)}removeEventListener(e,t){return this.#be.removeEventListener(e,t)}get isAvailable(){return!1}#wt(){le.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#Mt(){le.assertWithError(this.isScanning,"not scanning")}#Lt(){le.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#wt(),this.#Lt()}stopScan(){this.#Mt()}#Et(){this.isScanning?(this.#Tt={},this.#Wt={}):this.#Nt.stop()}#Tt={};get discoveredDevices(){return this.#Tt}get discoveredDevicesArray(){return Object.values(this.#Tt).sort(((e,t)=>this.#Wt[e.id]-this.#Wt[t.id]))}#kt(e){le.assertWithError(this.#Tt[e],`no discovered device with id "${e}"`)}#Ct(e){const t=e.message.discoveredDevice;this.#Tt[t.id]=t,this.#Wt[t.id]=Date.now(),this.#Nt.start()}#Wt={};static#It=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#It}get#Rt(){return ge.DiscoveredDeviceExpirationTimeout}#Nt=new he(this.#xt.bind(this),1e3);#xt(){const e=Object.entries(this.#Tt);if(0==e.length)return void this.#Nt.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Wt[e];t-n>this.#Rt&&(le.log("discovered device timeout"),delete this.#Tt[e],delete this.#Wt[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#wt()}get canReset(){return!1}reset(){le.log("resetting...")}}const de=l("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class ue extends f{get id(){return this.#At?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#At?.state}async connect(){await super.connect(),await this.#At.connectAsync()}async disconnect(){await super.disconnect(),await this.#At.disconnectAsync()}async sendMessage(e,t){let s,n;switch(await super.sendMessage(...arguments),e){case"setName":s="name";break;case"setType":s="type";break;case"setSensorConfiguration":s="sensorConfiguration";break;case"triggerVibration":s="vibration";break;default:throw Error(`uncaught messageType "${e}"`)}if(de.log("characteristicName",s),!s)return void de.log("no characteristicName found");n=this.#w.get(s),de.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);de.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#At.connectable}async reconnect(){await super.reconnect(),de.log("attempting to reconnect..."),this.connect()}#At;get noblePeripheral(){return this.#At}set noblePeripheral(e){de.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(de.log("newNoblePeripheral",e.id),this.#At&&(p(this.#At,this.#Ot),delete this.#At._connectionManager),e&&(e._connectionManager=this,v(e,this.#Ot)),this.#At=e):de.log("attempted to assign duplicate noblePeripheral")}#Ot={connect:this.#Pt,disconnect:this.#$t,rssiUpdate:this.#Ut,servicesDiscover:this.#_t};async#Pt(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){de.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#At.discoverServicesAsync(M),await this.#Vt()}async#$t(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){de.log("onNoblePeripheralDisconnect",e.id),await this.#Vt()}async#Vt(){switch(de.log(`noblePeripheral ${this.id} state ${this.#At.state}`),this.#At.state){case"connected":case"connecting":break;case"disconnected":this.#L(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":de.error("noblePeripheral error");break;default:de.log(`uncaught noblePeripheral state ${this.#At.state}`)}}#L(){de.log("removing noblePeripheral eventListeners"),this.#E.forEach((e=>{p(e,this.#zt)})),this.#E.clear(),this.#w.forEach((e=>{p(e,this.#Bt)})),this.#w.clear()}async#Ut(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){de.log("onNoblePeripheralRssiUpdate",e.id,t)}async#_t(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){de.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];de.log("service",s.uuid);const n=L(s.uuid);de.assertWithError(n,`no name found for service uuid "${s.uuid}"`),de.log({serviceName:n}),this.#E.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#zt),await s.discoverCharacteristicsAsync()}}#E=new Map;#zt={characteristicsDiscover:this.#Ft};async#Ft(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){de.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];de.log("characteristic",s.uuid);const n=k(s.uuid);de.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),de.log({characteristicName:n}),this.#w.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Bt),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#qt&&(this.status="connected")}#Bt={data:this.#jt,write:this.#Ht,notify:this.#Gt};#w=new Map;get#qt(){return N.every((e=>this.#w.has(e)))}#jt(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){de.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(H(t)),i=e._name;switch(de.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":this.onMessageReceived(i,n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;default:throw new Error(`uncaught characteristicName "${i}"`)}}#Ht(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){de.log("onNobleCharacteristicWrite",e.uuid)}#Gt(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){de.log("onNobleCharacteristicNotify",e.uuid,t)}}const ve=l("NobleScanner",{log:!0});let pe=!1;if(t){var me=require("@abandonware/noble");pe=!0}class fe extends ge{static get isSupported(){return pe}#Jt=!1;get#Qt(){return this.#Jt}set#Qt(e){ve.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Jt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ve.log("duplicate isScanning assignment")}get isScanning(){return this.#Qt}#Zt="unknown";get#Kt(){return this.#Zt}set#Kt(e){ve.assertTypeWithError(e,"string"),this.#Kt!=e?(this.#Zt=e,ve.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ve.log("duplicate nobleState assignment")}#Xt={scanStart:this.#Yt.bind(this),scanStop:this.#es.bind(this),stateChange:this.#ts.bind(this),discover:this.#ss.bind(this)};#Yt(){ve.log("OnNobleScanStart"),this.#Qt=!0}#es(){ve.log("OnNobleScanStop"),this.#Qt=!1}#ts(e){ve.log("onNobleStateChange",e),this.#Kt=e}#ss(e){let t;ve.log("onNobleDiscover",e.id),this.#ns[e.id]||(e._scanner=this,this.#ns[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=oe.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(me,this.#Xt),v(this,this.#is)}get isAvailable(){return"poweredOn"==this.#Kt}startScan(){super.startScan(),me.startScanningAsync(E,!0)}stopScan(){super.stopScan(),me.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),me.reset()}#is={expiredDiscoveredDevice:this.#rs.bind(this)};#rs(e){const t=e.message.discoveredDevice;this.#ns[t.id]&&delete this.#ns[t.id]}#ns={};#as(e){ve.assertTypeWithError(e,"string"),ve.assertWithError(this.#ns[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#as(e);const t=this.#ns[e];ve.log("connecting to discoveredDevice...",e);let s=oe.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#os(t),await s.connect())}#os(e){const t=new oe,s=new ue;return s.noblePeripheral=e,t.connectionManager=s,t}}const Se=l("Scanner",{log:!1});let be;fe.isSupported?(Se.log("using NobleScanner"),be=new fe):Se.log("Scanner not available");var De=be;const ye=l("DevicePairPressureSensorDataManager",{log:!0});class Ce{static get Sides(){return oe.InsoleSides}get sides(){return oe.InsoleSides}#cs={};#I=new $;resetPressureRange(){this.#I.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(ye.log({pressure:t,insoleSide:s}),this.#cs[s]=t,this.#hs)return this.#ls();ye.log("doesn't have all pressure data yet...")}get#hs(){return this.sides.every((e=>e in this.#cs))}#ls(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#cs[t].rawSum,e.normalizedSum+=this.#cs[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#cs[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#I.updateAndGetNormalization(e.center)),ye.log({devicePairPressure:e}),e}}const Ee=l("DevicePairSensorDataManager",{log:!0});class we{static get Sides(){return oe.InsoleSides}get sides(){return oe.InsoleSides}#gs={};pressureSensorDataManager=new Ce;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(Ee.log({sensorType:s,timestamp:t,event:e}),this.#gs[s]||(this.#gs[s]={}),this.#gs[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else Ee.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#gs[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else Ee.log("no value received")}onDataReceived}const Me=l("DevicePair",{log:!0});class Le{constructor(){this.#ve.onDataReceived=this.#pe.bind(this)}static#Se=["isConnected","pressure",...oe.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#Se}get eventTypes(){return Le.#Se}#be=new u(this,this.eventTypes);addEventListener(e,t,s){this.#be.addEventListener(e,t,s)}#De(e){this.#be.dispatchEvent(e)}removeEventListener(e,t){return this.#be.removeEventListener(e,t)}static get Sides(){return oe.InsoleSides}get sides(){return Le.Sides}#ds;get left(){return this.#ds}#us;get right(){return this.#us}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#p(){Me.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Me.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#vs),v(e,this.#vs),t){case"left":this.#ds=e;break;case"right":this.#us=e}return Me.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#De({type:"isConnected",message:{isConnected:this.isConnected}}),this.#De({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Me.log("device already assigned")}#vs={connectionStatus:this.#ps.bind(this),isConnected:this.#ms.bind(this),sensorData:this.#fs.bind(this),getSensorConfiguration:this.#ps.bind(this)};#ps(e){this.#De({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#ms(e){this.#ps(e),this.#De({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#ve=new we;#fs(e){this.#ps(e),this.#De({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#ve.onDeviceSensorData(e)}#pe(e,t){Me.log({sensorType:e,sensorData:t}),this.#De({type:e,message:t})}resetPressureRange(){this.#ve.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#Ss=new Le;static get shared(){return this.#Ss}static{oe.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Ss.assignInsole(t)}))}}const Te=l("ServerUtils",{log:!1}),We=3e7;function Ne(e,...t){Te.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=j(...t.data),n=s.byteLength;Te.assertEnumWithError(t.type,e);return j(e.indexOf(t.type),Uint16Array.from([n]),s)}));return Te.log("messageBuffers",...s),j(...s)}const ke=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function Ie(...e){return Ne(ke,...e)}function Re(...e){return Te.log("createDeviceMessage",...e),Ne(oe.EventTypes,...e)}function xe(...e){return Ne(f.MessageTypes,...e)}const Ae=Ie("ping"),Oe=Ie("pong");Ie("isScanningAvailable"),Ie("isScanning"),Ie("startScan"),Ie("stopScan");const Pe=Ie("discoveredDevices"),$e=l("WebSocketClientConnectionManager",{log:!0});class Ue extends f{static get isSupported(){return e}static get type(){return"webSocketClient"}#bs;get id(){return this.#bs}set id(e){$e.assertTypeWithError(e,"string"),this.#bs!=e?this.#bs=e:$e.log("redundant id assignment")}#we=!1;get isConnected(){return this.#we}set isConnected(e){$e.assertTypeWithError(e,"boolean"),this.#we!=e?(this.#we=e,this.status=this.#we?"connected":"not connected",this.#we&&this.#Ds()):$e.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),$e.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){$e.log({dataView:e}),X(e,oe.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));$e.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":this.onMessageReceived(s,t);break;default:$e.error(`uncaught messageType "${s}"`)}}),!0)}#Ds(){this.sendWebSocketMessage(...oe.AllInformationConnectionMessages)}}const _e=l("WebSocketClient",{log:!0});class Ve{static#Se=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Se}get eventTypes(){return Ve.#Se}#be=new u(this,this.eventTypes);addEventListener(e,t,s){this.#be.addEventListener(e,t,s)}#De(e){this.#be.dispatchEvent(e)}removeEventListener(e,t){return this.#be.removeEventListener(e,t)}#ys;get webSocket(){return this.#ys}set webSocket(e){this.#ys!=e?(_e.log("assigning webSocket",e),this.#ys&&p(this.#ys,this.#Cs),v(e,this.#Cs),this.#ys=e,_e.log("assigned webSocket")):_e.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Es(){_e.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ws(){_e.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ws(),this.#Ms="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Es(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Ms="disconnecting",this.webSocket.close()}reconnect(){this.#ws(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#We=!0;static get ReconnectOnDisconnection(){return this.#We}static set ReconnectOnDisconnection(e){_e.assertTypeWithError(e,"boolean"),this.#We=e}#Ne=Ve.#We;get reconnectOnDisconnection(){return this.#Ne}set reconnectOnDisconnection(e){_e.assertTypeWithError(e,"boolean"),this.#Ne=e}#Ls(e){this.#Es(),this.#ys.send(e)}#Ts(...e){this.#Ls(Ie(...e))}#Cs={open:this.#Ws.bind(this),message:this.#Ns.bind(this),close:this.#ks.bind(this),error:this.#Is.bind(this)};#Ws(e){_e.log("webSocket.open",e),this.#Rs.start(),this.#Ms="connected"}async#Ns(e){_e.log("webSocket.message",e),this.#Rs.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#xs(s)}#ks(e){_e.log("webSocket.close",e),this.#Ms="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#Rs.stop(),this.#Ne&&setTimeout((()=>{this.reconnect()}),3e3)}#Is(e){_e.log("webSocket.error",e)}#As="not connected";get#Ms(){return this.#As}set#Ms(e){switch(_e.assertTypeWithError(e,"string"),_e.log({newConnectionStatus:e}),this.#As=e,this.#De({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#De({type:this.connectionStatus}),e){case"connected":case"not connected":this.#De({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#Ts("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Os=!1,this.#Qt=!1)}}get connectionStatus(){return this.#Ms}#xs(e){_e.log("parseMessage",{dataView:e}),X(e,ke,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#Ps();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));_e.log({isScanningAvailable:e}),this.#Os=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));_e.log({isScanning:e}),this.#Qt=e}break;case"discoveredDevice":{const{string:e}=K(t,n);_e.log({discoveredDeviceString:e});const s=JSON.parse(e);_e.log({discoveredDevice:s}),this.#Ct(s)}break;case"expiredDiscoveredDevice":{const{string:e}=K(t,n);this.#rs(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=K(t,n);_e.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);_e.log({connectedDeviceIds:s}),this.#$s(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=K(t,n);n=s;const i=this.#Us[e];_e.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=J(t,n);r.onWebSocketMessage(a)}break;default:_e.error(`uncaught messageType "${s}"`)}}),!0)}#Rs=new he(this.#_s.bind(this),We);#_s(){this.#Ts("ping")}#Ps(){this.#Ts("pong")}#Vs=!1;get#Os(){return this.#Vs}set#Os(e){_e.assertTypeWithError(e,"boolean"),this.#Vs=e,this.#De({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#zs()}get isScanningAvailable(){return this.#Os}#Bs(){this.#Es(),_e.assertWithError(this.isScanningAvailable,"scanning is not available")}#Fs(){this.#Ts("isScanningAvailable")}#Jt=!1;get#Qt(){return this.#Jt}set#Qt(e){_e.assertTypeWithError(e,"boolean"),this.#Jt=e,this.#De({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Qt}#zs(){this.#Ts("isScanning")}#Mt(){_e.assertWithError(this.isScanning,"is not scanning")}#Lt(){_e.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Lt(),this.#Ts("startScan")}stopScan(){this.#Mt(),this.#Ts("stopScan")}toggleScan(){this.#Bs(),this.isScanning?this.stopScan():this.startScan()}#Tt={};get discoveredDevices(){return this.#Tt}#Ct(e){_e.log({discoveredDevice:e}),this.#Tt[e.id]=e,this.#De({type:"discoveredDevice",message:{discoveredDevice:e}})}#qs(){this.#Ls(Pe)}#rs(e){_e.log({expiredDeviceId:e});const t=this.#Tt[e];t?(_e.log({expiredDiscoveredDevice:t}),delete this.#Tt[e],this.#De({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):_e.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#js(e)}#js(e){this.#Es(),_e.assertTypeWithError(e,"string");const t=this.#Hs(e);return t.connect(),t}#Gs(e){this.#Ls(this.#Js(e))}#Js(e){return Ie({type:"connectToDevice",data:e})}#os(e){const t=new oe,s=new Ue;return s.id=e,s.sendWebSocketMessage=this.#Qs.bind(this,e),s.sendWebSocketConnectMessage=this.#Gs.bind(this,e),s.sendWebSocketDisconnectMessage=this.#Zs.bind(this,e),t.connectionManager=s,t}#Hs(e){let t=this.#Us[e];return t||(t=this.#os(e),this.#Us[e]=t),t}#$s(e){_e.log({deviceIds:e}),e.forEach((e=>{this.#Hs(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#Ks(e)}#Ks(e){this.#Es(),_e.assertTypeWithError(e,"string");const t=this.devices[e];return _e.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#Zs(e){this.#Ls(this.#Xs(e))}#Xs(e){return Ie({type:"disconnectFromDevice",data:e})}#Qs(e,...t){this.#Ls(this.#Ys(e,...t))}#Ys(e,...t){return Ie({type:"deviceMessage",data:[e,xe(...t)]})}#Us={};get devices(){return this.#Us}}const ze=l("BaseServer",{log:!0});class Be{#g(){ze.assertWithError(this.constructor!=Be,`${this.constructor.name} must be subclassed`)}static#Se=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Se}get eventTypes(){return Be.#Se}#be=new u(this,this.eventTypes);addEventListener(e,t,s){this.#be.addEventListener(e,t,s)}dispatchEvent(e){this.#be.dispatchEvent(e)}removeEventListener(e,t){return this.#be.removeEventListener(e,t)}constructor(){this.#g(),ze.assertWithError(De,"no scanner defined"),v(De,this.#en),v(oe,this.#tn),v(this,this.#sn)}get numberOfClients(){return 0}static#nn=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#nn}static set ClearSensorConfigurationsWhenNoClients(e){ze.assertTypeWithError(e,"boolean"),this.#nn=e}#in=Be.#nn;get clearSensorConfigurationsWhenNoClients(){return this.#in}set clearSensorConfigurationsWhenNoClients(e){ze.assertTypeWithError(e,"boolean"),this.#in=e}#sn={clientConnected:this.#rn.bind(this),clientDisconnected:this.#an.bind(this)};#rn(e){e.message.client,ze.log("onClientConnected")}#an(e){e.message.client,ze.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&oe.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){ze.log("broadcasting",e)}#en={isAvailable:this.#on.bind(this),isScanning:this.#cn.bind(this),discoveredDevice:this.#hn.bind(this),expiredDiscoveredDevice:this.#rs.bind(this)};#on(e){this.broadcastMessage(this.#ln)}get#ln(){return Ie({type:"isScanningAvailable",data:De.isAvailable})}#cn(e){this.broadcastMessage(this.#gn)}get#gn(){return Ie({type:"isScanning",data:De.isScanning})}#hn(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#dn(t))}#dn(e){return Ie({type:"discoveredDevice",data:e})}#rs(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#un(t))}#un(e){return Ie({type:"expiredDiscoveredDevice",data:e.id})}get#vn(){return Ie(...De.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#pn(){return Ie({type:"connectedDevices",data:JSON.stringify(oe.ConnectedDevices.map((e=>e.id)))})}#mn={connectionMessage:this.#fn.bind(this)};#Ys(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#fn(e){const t=e.target;if(ze.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#Sn(t,this.#Ys(t,s,n)))}#tn={deviceConnected:this.#bn.bind(this),deviceDisconnected:this.#Dn.bind(this),deviceIsConnected:this.#ms.bind(this)};#bn(e){const t=e.message.device;ze.log("onDeviceConnected",t.id),v(t,this.#mn)}#Dn(e){const t=e.message.device;ze.log("onDeviceDisconnected",t.id),p(t,this.#mn)}#ms(e){const t=e.message.device;ze.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#yn(t))}#yn(e){return this.#Sn(e,{type:"isConnected",data:e.isConnected})}#Sn(e,...t){return Ie({type:"deviceMessage",data:[e.id,Re(...t)]})}parseClientMessage(e){let t=[];if(X(e,ke,((e,s)=>{const n=e;switch(n){case"ping":t.push(Oe);break;case"pong":break;case"isScanningAvailable":t.push(this.#ln);break;case"isScanning":t.push(this.#gn);break;case"startScan":De.startScan();break;case"stopScan":De.stopScan();break;case"discoveredDevices":t.push(this.#vn);break;case"connectToDevice":{const{string:e}=K(s);De.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=K(s),t=oe.ConnectedDevices.find((t=>t.id==e));if(!t){ze.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#pn);break;case"deviceMessage":{const{string:e,byteOffset:n}=K(s),i=oe.ConnectedDevices.find((t=>t.id==e));if(!i){ze.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:ze.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return j(t)}parseClientDeviceMessage(e,t){ze.log("onDeviceMessage",e.id,t);let s=[];if(X(t,f.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":s.push(this.#Ys(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:ze.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#Sn(e,...s)}}const Fe=l("WebSocketServer",{log:!0});t&&require("ws");var qe={setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:oe,DevicePair:Le,WebSocketClient:Ve,WebSocketServer:class extends Be{get numberOfClients(){return this.#Cn?.clients.size||0}#Cn;get server(){return this.#Cn}set server(e){this.#Cn!=e?(Fe.log("assigning server..."),this.#Cn&&(Fe.log("clearing existing server..."),p(this.#Cn,this.#sn)),v(e,this.#sn),this.#Cn=e,Fe.log("assigned server")):Fe.log("redundant WebSocket assignment")}#sn={close:this.#En.bind(this),connection:this.#wn.bind(this),error:this.#Mn.bind(this),headers:this.#Ln.bind(this),listening:this.#Tn.bind(this)};#En(){Fe.log("server.close")}#wn(e){Fe.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new he((()=>this.#Wn(e)),We),e.pingClientTimer.start(),v(e,this.#Nn),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#Mn(e){Fe.error(e)}#Ln(){}#Tn(){Fe.log("server.listening")}#Nn={open:this.#kn.bind(this),message:this.#In.bind(this),close:this.#Rn.bind(this),error:this.#xn.bind(this)};#kn(e){Fe.log("client.open")}#In(e){Fe.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(H(e.data));this.#An(t,s)}#Rn(e){Fe.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#Nn),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#xn(e){Fe.log("client.error")}#An(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Wn(e){e.isAlive?(e.isAlive=!1,e.send(Ae)):e.terminate()}},Scanner:De};export{qe as default};
