/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new h(e)}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function l(e,t){return h.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=l("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const m=l("ConnectionManager");class f{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorData","triggerVibration"];static get MessageTypes(){return this.#o}get id(){this.#c("id")}onStatusUpdated;onMessageReceived;static#h(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#c(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#h("type")}get type(){return this.constructor.type}#l(){m.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){m.assertWithError(this.constructor!=f,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#l()}#d="not connected";get status(){return this.#d}set status(e){m.assertTypeWithError(e,"string"),this.#d!=e?(m.log(`new connection status "${e}"`),this.#d=e,this.onStatusUpdated?.(this.status)):m.log("tried to assign same connection status")}get isConnected(){return"connected"==this.status}#u(){m.assertWithError(!this.isConnected,"device is already connected")}#v(){m.assertWithError("connecting"!=this.status,"device is already connecting")}#p(){m.assertWithError(this.isConnected,"device is not connected")}#m(){m.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#f(){this.#p(),this.#m()}async connect(){this.#u(),this.#v(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#u(),this.#v(),m.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#p(),this.#m(),this.status="disconnecting",m.log("disconnecting from device...")}async sendMessage(e,t){this.#f(),m.log("sending message",{messageType:e,data:t})}}if(t){var S=require("webbluetooth").BluetoothUUID}if(e)S=window.BluetoothUUID;function b(e){return`ea6da725-2000-4f9b-893d-c3913e33b3e${e}`}function y(e){return S.getCharacteristic(e)}function D(e){return S.getService(e)}const E=Object.freeze({services:{deviceInformation:{uuid:D("device_information"),characteristics:{manufacturerName:{uuid:y("manufacturer_name_string")},modelNumber:{uuid:y("model_number_string")},hardwareRevision:{uuid:y("hardware_revision_string")},firmwareRevision:{uuid:y("firmware_revision_string")},softwareRevision:{uuid:y("software_revision_string")},pnpId:{uuid:y("pnp_id")},serialNumber:{uuid:y("serial_number_string")}}},battery:{uuid:D("battery_service"),characteristics:{batteryLevel:{uuid:y("battery_level")}}},main:{uuid:b(0),characteristics:{name:{uuid:b(1)},type:{uuid:b(2)},sensorConfiguration:{uuid:b(3)},sensorData:{uuid:b(4)},vibration:{uuid:b(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),C=E.serviceUUIDs,w=E.optionalServiceUUIDs,T=[...C,...w];function M(e){return E.getServiceNameFromUUID(e)}const L=[],W=[],N=[];function k(e){return E.getCharacteristicNameFromUUID(e)}function R(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":t.read=!1}switch(e){case"batteryLevel":case"sensorData":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(E.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{C.includes(t.uuid)&&L.push(s.uuid),W.push(s.uuid),N.push(e)}))}),[]);const I=l("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var x={bluetooth:t}}if(e)x=window.navigator;class A extends f{get id(){return this.device?.id}#S={characteristicvaluechanged:this.#b.bind(this)};#y={gattserverdisconnected:this.#D.bind(this)};static get isSupported(){return"bluetooth"in x}static get type(){return"webBluetooth"}#E;get device(){return this.#E}set device(e){this.#E!=e?(this.#E&&p(this.#E,this.#y),e&&v(e,this.#y),this.#E=e):I.log("tried to assign the same BluetoothDevice")}get server(){return this.#E?.gatt}get isConnected(){return this.server?.connected}#C=new Map;#w=new Map;async connect(){await super.connect();try{const t=await x.bluetooth.requestDevice({filters:[{services:C}],optionalServices:e?w:[]});I.log("got BluetoothDevice"),this.device=t,I.log("connecting to device...");const s=await this.device.gatt.connect();I.log(`connected to device? ${s.connected}`),await this.#T(),I.log("fully connected"),this.status="connected"}catch(e){I.error(e),this.status="not connected",this.server?.disconnect(),this.#M()}}async#T(){this.#M(),I.log("getting services...");const e=await this.server.getPrimaryServices();I.log("got services",e.length),I.log("getting characteristics...");for(const t in e){const i=e[t];I.log({service:i});const r=M(i.uuid);if(I.assertWithError(r,`no name found for service uuid "${i.uuid}"`),I.log(`got "${r}" service`),"dfu"==r){I.log("skipping dfu service");continue}i._name=r,this.#C.set(r,i),I.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();I.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];I.log({characteristic:t});const i=k(t.uuid);I.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),I.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#w.set(i,t),v(t,this.#S);const o=t.properties||R(i);o.read&&(I.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#L(t)),o.notify&&(I.log(`starting notifications for "${i}" characteristic`),await t.startNotifications())}}}#M(){this.device&&p(this.device,this.#y),this.#w.forEach((e=>{p(e,this.#S)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#M(),this.status="not connected"}#b(e){I.log("oncharacteristicvaluechanged");const t=e.target;this.#L(t)}#L(e){I.log("onCharacteristicValue");const t=e._name;I.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),I.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;switch(I.assertWithError(s,`no data found for "${t}" characteristic`),I.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),t){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${t}"`)}}#D(e){I.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s,n;switch(await super.sendMessage(...arguments),e){case"setName":n="name",s=this.#w.get(n);break;case"setType":n="type",s=this.#w.get(n);break;case"setSensorConfiguration":n="sensorConfiguration",s=this.#w.get(n);break;case"triggerVibration":n="vibration",s=this.#w.get(n);break;default:throw Error(`uncaught messageType "${e}"`)}I.assert(s,"no characteristic found"),t instanceof DataView&&(t=t.buffer),await s.writeValueWithResponse(t);(s.properties||R(n)).read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),I.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(I.log("successfully reconnected!"),await this.#T(),this.status="connected"):(I.log("unable to reconnect"),this.status="not connected")}}const O=new TextEncoder;function P(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return $(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return $(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function U(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function $(e){const t=O.encode(e);return P(t.byteLength,t)}const _=l("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class V extends f{get id(){return this.#W?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#W?.state}async connect(){await super.connect(),await this.#W.connectAsync()}async disconnect(){await super.disconnect(),await this.#W.disconnectAsync()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return this.#W.connectable}async reconnect(){await super.reconnect(),_.log("attempting to reconnect..."),this.connect()}#W;get noblePeripheral(){return this.#W}set noblePeripheral(e){_.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(_.log({newNoblePeripheral:e}),this.#W&&(p(this.#W,this.#N),delete this.#W._connectionManager),e&&(e._connectionManager=this,v(e,this.#N)),this.#W=e):_.log("attempted to assign duplicate noblePeripheral")}#N={connect:this.#k,disconnect:this.#R,rssiUpdate:this.#I,servicesDiscover:this.#x};async#k(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){_.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#W.discoverServicesAsync(T),await this.#A()}async#R(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){_.log("onNoblePeripheralDisconnect",e.id),await this.#A()}async#A(){switch(_.log(`noblePeripheral ${this.id} state ${this.#W.state}`),this.#W.state){case"connected":case"connecting":break;case"disconnected":this.#C.forEach((e=>{p(e,this.#O)})),this.#C.clear(),this.#w.forEach((e=>{p(e,this.#P)})),this.#w.clear(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":_.error("noblePeripheral error");break;default:_.log(`uncaught noblePeripheral state ${this.#W.state}`)}}async#I(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){_.log("onNoblePeripheralRssiUpdate",e.id,t)}async#x(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){_.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];_.log("service",s.uuid);const n=M(s.uuid);_.assertWithError(n,`no name found for service uuid "${s.uuid}"`),_.log({serviceName:n}),this.#C.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#O),await s.discoverCharacteristicsAsync()}}#C=new Map;#O={characteristicsDiscover:this.#U};async#U(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){_.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];_.log("characteristic",s.uuid);const n=k(s.uuid);_.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),_.log({characteristicName:n}),this.#w.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#P),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#$&&(this.status="connected")}#P={data:this.#_,write:this.#V,notify:this.#z};#w=new Map;get#$(){return N.every((e=>this.#w.has(e)))}#_(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){_.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(U(t)),i=e._name;switch(_.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),i){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${i}"`)}}#V(){_.log("onNobleCharacteristicWrite",...arguments)}onNobleCharacteristicWrite(){}#z(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){_.log("onNobleCharacteristicNotify",e.uuid,t)}}const z={min:1/0,max:-1/0};class B{#B=Object.assign({},z);reset(){Object.assign(this.#B,z)}update(e){this.#B.min=Math.min(e,this.#B.min),this.#B.max=Math.max(e,this.#B.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#B.min,this.#B.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class F{#B={x:new B,y:new B};reset(){this.#B.x.reset(),this.#B.y.reset()}update(e){this.#B.x.update(e.x),this.#B.y.update(e.y)}getNormalization(e){return{x:this.#B.x.getNormalization(e.x),y:this.#B.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const q=l("PressureSensorDataManager",{log:!0});class j{#F;get deviceType(){return this.#F}set deviceType(e){q.assertTypeWithError(e,"string"),this.#F!=e?(q.log({newDeviceType:e}),this.#F=e,this.#q(),this.resetRange()):q.log(`redundant deviceType assignment "${e}"`)}static#j=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#j}get names(){return j.Names}static#H={pressure:2**-16};static get Scalars(){return this.#H}get scalars(){return j.Scalars}static#G=8;static get NumberOfPressureSensors(){return this.#G}get numberOfPressureSensors(){return j.NumberOfPressureSensors}static#Z=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#Z}#Q;get pressureSensorPositions(){return this.#Q}#q(){const e=j.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));q.log({pressureSensorPositions:e}),this.#Q=e}#J=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new B));#K=new F;resetRange(){this.#J.forEach((e=>e.reset())),this.#K.reset()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const i=e.getUint16(t,!0),r=this.#J[n].updateAndGetNormalization(i),a=this.pressureSensorPositions[n],o=this.names[n];s.sensors[n]={rawValue:i,normalizedValue:r,position:a,name:o},s.rawSum+=i,s.normalizedSum+=r/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#K.updateAndGetNormalization(s.center)),q.log({pressure:s}),s}}const H=l("MotionSensorDataManager",{log:!1});class G{#F;get deviceType(){return this.#F}set deviceType(e){H.assertTypeWithError(e,"string"),this.#F!=e?(H.log({newDeviceType:e}),this.#F=e):H.log(`redundant deviceType assignment "${e}"`)}static#H={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#H}get scalars(){return G.Scalars}static#X=6;static get Vector3Size(){return this.#X}get vector3Size(){return G.Vector3Size}parseVector3(e,t,s){let[n,i,r]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:i,z:r};return H.log({vector:a}),a}static#Y=8;static get QuaternionSize(){return this.#Y}get quaternionSize(){return G.QuaternionSize}parseQuaternion(e,t,s){let[n,i,r,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:i,z:r,w:a};return H.log({quaternion:o}),o}}l("BarometerSensorDataManager",{log:!0});class Z{static#H={barometer:.78125};static get Scalars(){return this.#H}get scalars(){return Z.Scalars}}const Q=l("SensorDataManager",{log:!1});class J{#F;get deviceType(){return this.#F}set deviceType(e){Q.assertTypeWithError(e,"string"),this.#F!=e?(Q.log({newDeviceType:e}),this.#F=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):Q.log(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new j;motionSensorDataManager=new G;barometerSensorDataManager=new Z;static#ee=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#ee}get#te(){return J.Types}static AssertValidSensorType(e){Q.assertTypeWithError(e,"string"),Q.assertWithError(this.#ee.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){Q.assertTypeWithError(e,"number"),Q.assertWithError(e in this.#ee,`invalid sensorTypeEnum ${e}`)}onDataReceived;#se=0;#ne=0;clearTimestamp(){Q.log("clearing sensorDataManager timestamp data"),this.#se=0,this.#ne=0}#ie(e,t){const s=e.getUint16(t,!0);s<this.#ne&&(this.#se+=65536),this.#ne=s;return s+this.#se}parse(e){Q.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#ie(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let i;J.AssertValidSensorTypeEnum(n);const r=e.getUint8(t++),a=this.#te[n];switch(Q.log({sensorTypeEnum:n,sensorType:a,sensorTypeDataSize:r}),a){case"pressure":i=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:Q.error(`uncaught sensorType "${a}"`)}t+=r,Q.assertWithError(i,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:i})}}static get NumberOfPressureSensors(){return j.NumberOfPressureSensors}get numberOfPressureSensors(){return J.NumberOfPressureSensors}static get PressureSensorNames(){return j.Names}get pressureSensorNames(){return J.PressureSensorNames}}const K=l("SensorConfigurationManager",{log:!1});class X{#F;get deviceType(){return this.#F}set deviceType(e){K.assertTypeWithError(e,"string"),this.#F!=e?(K.log({newDeviceType:e}),this.#F=e):K.log(`redundant deviceType assignment "${e}"`)}#re;#ae(e){K.assertWithError(this.#re,"must get initial sensorConfiguration");const t=this.#re?.includes(e);return K.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=J.Types[n];if(!i){K.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);K.log({sensorType:i,sensorRate:r}),t[i]=r}return K.log({parsedSensorConfiguration:t}),this.#re=Object.keys(t),t}static#oe=65535;static get MaxSensorRate(){return this.#oe}get maxSensorRate(){return X.MaxSensorRate}static#ce=5;static get SensorRateStep(){return this.#ce}get sensorRateStep(){return X.SensorRateStep}#he(e){K.assertTypeWithError(e,"number"),K.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),K.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),K.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#ae(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{J.AssertValidSensorType(t);const i=J.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#he(r),s.setUint16(3*n+1,e[t],!0)})),K.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const Y=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ee=l("VibrationManager");class te{static#le=["front","rear"];static get Locations(){return this.#le}get locations(){return te.Locations}#ge(e){ee.assertTypeWithError(e,"string"),ee.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#de(e){this.#ue(e),e.forEach((e=>{this.#ge(e)}))}#ve(e){this.#de(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ee.log({locationsBitmask:t}),ee.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ue(e){ee.assertWithError(Array.isArray(e),"passed non-array"),ee.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return Y}get waveformEffects(){return te.WaveformEffects}#pe(e){ee.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#me=1270;static get MaxWaveformEffectSegmentDelay(){return this.#me}get maxWaveformEffectSegmentDelay(){return te.MaxWaveformEffectSegmentDelay}#fe(e){if(null!=e.effect){const t=e.effect;this.#pe(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ee.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ee.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#Se(t)}}static#be=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#be}get maxWaveformEffectSegmentLoopCount(){return te.MaxWaveformEffectSegmentLoopCount}#Se(e){ee.assertTypeWithError(e,"number"),ee.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ee.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ye=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ye}get maxNumberOfWaveformEffectSegments(){return te.MaxNumberOfWaveformEffectSegments}#De(e){this.#ue(e),ee.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#fe(e)}))}static#Ee=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Ee}get maxWaveformEffectSequenceLoopCount(){return te.MaxWaveformEffectSequenceLoopCount}#Ce(e){ee.assertTypeWithError(e,"number"),ee.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ee.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#we=2550;static get MaxWaveformSegmentDuration(){return this.#we}get maxWaveformSegmentDuration(){return te.MaxWaveformSegmentDuration}#Te(e){ee.assertTypeWithError(e.amplitude,"number"),ee.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ee.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ee.assertTypeWithError(e.duration,"number"),ee.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ee.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Me=20;static get MaxNumberOfWaveformSegments(){return this.#Me}get maxNumberOfWaveformSegments(){return te.MaxNumberOfWaveformSegments}#Le(e){this.#ue(e),ee.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Te(e)}))}createWaveformEffectsData(e,t,s=0){this.#De(t),this.#Ce(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ee.log({dataArray:n,dataView:o}),this.#We(e,"waveformEffect",o)}createWaveformData(e,t){this.#Le(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ee.log({dataView:s}),this.#We(e,"waveform",s)}static#ee=["waveformEffect","waveform"];static get Types(){return this.#ee}get#te(){return te.Types}#Ne(e){ee.assertTypeWithError(e,"string"),ee.assertWithError(this.#te.includes(e),`invalid vibrationType "${e}"`)}#We(e,t,s){ee.assertWithError(s?.byteLength>0,"no data received");const n=this.#ve(e);this.#Ne(t);const i=this.#te.indexOf(t);ee.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=P(n,i,s.byteLength,s);return ee.log({data:r}),r}}const se=l("Device",{log:!0});class ne{get id(){return this.#ke?.id}constructor(){this.#Re.onDataReceived=this.#Ie.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{ne.#xe(this)}))}static get#Ae(){return A}static#Oe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#Oe}get eventTypes(){return ne.#Oe}#Pe=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Ue(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#ke;get connectionManager(){return this.#ke}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#$e.bind(this),e.onMessageReceived=this.#_e.bind(this)),this.#ke=e,se.log("assigned new connectionManager",this.#ke)):se.log("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new ne.#Ae),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#p(){se.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#Ve=!1;static get ReconnectOnDisconnection(){return this.#Ve}static set ReconnectOnDisconnection(e){se.assertTypeWithError(e,"boolean"),this.#Ve=e}#ze=ne.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#ze}set reconnectOnDisconnection(e){se.assertTypeWithError(e,"boolean"),this.#ze=e}#Be;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#p(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#ke?.status||"not connected"}#$e(e){switch(se.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(se.log("starting reconnect interval..."),this.#Be=setInterval((()=>{se.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Be&&(se.log("clearing reconnect interval"),clearInterval(this.#Be),this.#Be=void 0),this.#Ue({type:"connectionStatus",message:{connectionStatus:e}}),this.#Ue({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}})}}#Fe(){this.#qe=null,this.#je=null,this.#He=null;for(const e in this.#Ge)this.#Ge[e]=null}#_e(e,t){switch(se.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Ze.decode(t);se.log({manufacturerName:s}),this.#Qe({manufacturerName:s});break;case"modelNumber":const n=this.#Ze.decode(t);se.log({modelNumber:n}),this.#Qe({modelNumber:n});break;case"softwareRevision":const i=this.#Ze.decode(t);se.log({softwareRevision:i}),this.#Qe({softwareRevision:i});break;case"hardwareRevision":const r=this.#Ze.decode(t);se.log({hardwareRevision:r}),this.#Qe({hardwareRevision:r});break;case"firmwareRevision":const a=this.#Ze.decode(t);se.log({firmwareRevision:a}),this.#Qe({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),se.log({pnpId:o}),this.#Qe({pnpId:o});break;case"serialNumber":const c=this.#Ze.decode(t);se.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);se.log("received battery level",{batteryLevel:h}),this.#Je(h);break;case"getName":const l=this.#Ze.decode(t);se.log({name:l}),this.#Ke(l);break;case"getType":const g=t.getUint8(0),d=this.#te[g];se.log({typeEnum:g,type:d}),this.#Xe(d);break;case"getSensorConfiguration":const u=this.#Ye.parse(t);se.log({sensorConfiguration:u}),this.#et(u);break;case"sensorData":this.#Re.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#tt=new TextEncoder;get#st(){return ne.#tt}static#nt=new TextDecoder;get#Ze(){return ne.#nt}#Ge={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Ge}get#it(){return Object.values(this.#Ge).every((e=>null!=e))}#Qe(e){se.log({partialDeviceInformation:e});for(const t in e)this.#Ue({type:t,message:{[t]:e[t]}});Object.assign(this.#Ge,e),se.log({deviceInformation:this.#Ge}),this.#it&&(se.log("completed deviceInformation"),this.#Ue({type:"deviceInformation",message:{deviceInformation:this.#Ge}}))}#He=null;get batteryLevel(){return this.#He}#Je(e){se.assertTypeWithError(e,"number"),this.#He!=e?(this.#He=e,se.log({updatedBatteryLevel:this.#He}),this.#Ue({type:"batteryLevel",message:{batteryLevel:this.#He}})):se.log(`duplicate batteryLevel assignment ${e}`)}#qe;get name(){return this.#qe}#Ke(e){se.assertTypeWithError(e,"string"),this.#qe=e,se.log({updatedName:this.#qe}),this.#Ue({type:"getName",message:{name:this.#qe}})}static get MinNameLength(){return 2}get minNameLength(){return ne.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return ne.MaxNameLength}async setName(e){this.#p(),se.assertTypeWithError(e,"string"),se.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),se.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#st.encode(e);se.log({setNameData:t}),await this.#ke.sendMessage("setName",t)}static#ee=["leftInsole","rightInsole"];static get Types(){return this.#ee}get#te(){return ne.Types}#je;get type(){return this.#je}#rt(e){se.assertTypeWithError(e,"string"),se.assertWithError(this.#te.includes(e),`invalid type "${e}"`)}#Xe(e){this.#rt(e),e!=this.type?(this.#je=e,se.log({updatedType:this.#je}),this.#Re.deviceType=this.#je,this.#Ye.deviceType=this.#je,this.#Ue({type:"getType",message:{type:this.#je}}),ne.#at&&ne.#ot(this)):se.log("redundant type assignment")}async setType(e){this.#p(),this.#rt(e);const t=this.#te.indexOf(e),s=Uint8Array.from([t]);se.log({setTypeData:s}),await this.#ke.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ct=["left","right"];static get InsoleSides(){return this.#ct}get insoleSides(){return ne.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return J.Types}get sensorTypes(){return ne.SensorTypes}static get PressureSensorNames(){return J.PressureSensorNames}get pressureSensorNames(){return ne.PressureSensorNames}static get NumberOfPressureSensors(){return J.NumberOfPressureSensors}get numberOfPressureSensors(){return ne.NumberOfPressureSensors}#Ye=new X;#ht;get sensorConfiguration(){return this.#ht}static get MaxSensorRate(){return X.MaxSensorRate}static get SensorRateStep(){return X.SensorRateStep}#et(e){this.#ht=e,se.log({updatedSensorConfiguration:this.#ht}),this.#Ye.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(se.log("clearing sensorDataManager timestamp..."),this.#Re.clearTimestamp()),this.#Ue({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#p(),se.log({newSensorConfiguration:e});const t=this.#Ye.createData(e);se.log({setSensorConfigurationData:t}),await this.#ke.sendMessage("setSensorConfiguration",t)}static#lt=!0;static get ClearSensorConfigurationOnLeave(){return this.#lt}static set ClearSensorConfigurationOnLeave(e){se.assertTypeWithError(e,"boolean"),this.#lt=e}#gt=ne.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#gt}set clearSensorConfigurationOnLeave(e){se.assertTypeWithError(e,"boolean"),this.#gt=e}static#dt={};static get ZeroSensorConfiguration(){return this.#dt}static{this.SensorTypes.forEach((e=>{this.#dt[e]=0}))}get zeroSensorConfiguration(){return ne.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#Re=new J;#Ie(e,t){se.log({sensorType:e,sensorData:t}),this.#Ue({type:e,message:t}),this.#Ue({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#Re.pressureSensorDataManager.resetRange()}#ut=new te;static get VibrationLocations(){return te.Locations}static get VibrationTypes(){return te.Types}static get VibrationWaveformEffects(){return te.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return te.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return te.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return te.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return te.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return te.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return te.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let i;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:r}=t;i=this.#ut.createWaveformEffectsData(s,n,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;i=this.#ut.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}se.log({type:n,dataView:i}),t=P(t,i)})),await this.#ke.sendMessage("triggerVibration",t)}static#vt=[];static get ConnectedDevices(){return this.#vt}static#at=!1;static get UseLocalStorage(){return this.#at}static set UseLocalStorage(e){this.#pt(),se.assertTypeWithError(e,"boolean"),this.#at=e,this.#at&&!this.#mt&&this.#ft()}static#St={devices:[]};static#mt;static get CanUseLocalStorage(){return e&&window.localStorage}static#pt(){se.assertWithError(e,"localStorage is only available in the browser"),se.assertWithError(window.localStorage,"localStorage not found")}static#bt="BS.Device";static#yt(){this.#pt(),localStorage.setItem(this.#bt,JSON.stringify(this.#mt))}static async#ft(){this.#pt();let e=localStorage.getItem(this.#bt);if("string"!=typeof e)return se.log("no info found in localStorage"),this.#mt=Object.assign({},this.#St),void this.#yt();try{const t=JSON.parse(e);se.log({configuration:t}),this.#mt=t,this.CanGetDevices&&await this.GetDevices()}catch(e){se.error(e)}}static#ot(e){if("webBluetooth"!=e.connectionType)return void se.log("localStorage is only for webBluetooth devices");this.#pt();const t=this.#mt.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#mt.devices[t].type=e.type,this.#yt())}static#Dt=[];static get AvailableDevices(){return this.#Dt}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void se.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void se.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void se.warn("bluetooth.getDevices() is not available in this browser");this.#mt||this.#ft();const t=this.#mt;if(!t.devices||0==t.devices.length)return void se.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return se.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#Dt.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new ne,a=new A;a.device=e,e.name&&r.#Ke(e.name),r.#Xe(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#Et({type:"availableDevices",message:{devices:this.AvailableDevices}}),se.log({AvailableDevices:this.AvailableDevices}),this.AvailableDevices}static#Ct=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#Ct}static#wt=new u(this,this.#Ct);static AddEventListener(e,t,s){this.#wt.addEventListener(e,t,s)}static#Et(e){this.#wt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#wt.removeEventListener(e,t)}static#xe(e){if(e.isConnected)if(this.#vt.includes(e))se.log("device already included");else{if(se.log("adding device",e),this.#vt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#mt.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#mt.devices.push(t):this.#mt.devices[s]=t,this.#yt()}this.#Et({type:"deviceConnected",message:{device:e}}),this.#Et({type:"deviceIsConnected",message:{device:e}})}else this.#vt.includes(e)?(se.log("removing device",e),this.#vt.splice(this.#vt.indexOf(e),1),this.#Et({type:"deviceDisconnected",message:{device:e}}),this.#Et({type:"deviceIsConnected",message:{device:e}})):se.log("device already not included");this.CanGetDevices&&this.GetDevices()}static async Connect(){const e=new ne;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const ie=l("Timer",{log:!1});class re{#Tt;get callback(){return this.#Tt}set callback(e){ie.assertTypeWithError(e,"function"),ie.log({newCallback:e}),this.#Tt=e,this.isRunning&&this.restart()}#Mt;get interval(){return this.#Mt}set interval(e){ie.assertTypeWithError(e,"number"),ie.assertWithError(e>0,"interval must be above 0"),ie.log({newInterval:e}),this.#Mt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#Lt=null;get isRunning(){return null!=this.#Lt}start(){this.isRunning?ie.log("interval already running"):(ie.log("starting interval"),this.#Lt=setInterval(this.#Tt,this.#Mt))}stop(){this.isRunning?(ie.log("stopping interval"),clearInterval(this.#Lt),this.#Lt=null):ie.log("interval already not running")}restart(){this.stop(),this.start()}}const ae=l("BaseScanner");class oe{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#l(){ae.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){ae.assertWithError(this.constructor!=oe,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#l(),v(this,this.#Wt)}#Wt={discoveredDevice:this.#Nt.bind(this),isScanning:this.#kt.bind(this)};static#Oe=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Oe}get eventTypes(){return oe.#Oe}#Pe=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}dispatchEvent(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}get isAvailable(){return!1}#Rt(){ae.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#It(){ae.assertWithError(this.isScanning,"not scanning")}#xt(){ae.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#Rt(),this.#xt()}stopScan(){this.#It()}#kt(){this.isScanning?(this.#At={},this.#Ot={}):this.#Pt.stop()}#At={};get discoveredDevices(){return this.#At}get discoveredDevicesArray(){return Object.values(this.#At).sort(((e,t)=>this.#Ot[e.id]-this.#Ot[t.id]))}#Ut(e){ae.assertWithError(this.#At[e],`no discovered device with id "${e}"`)}#Nt(e){const t=e.message.discoveredDevice;this.#At[t.id]=t,this.#Ot[t.id]=Date.now(),this.#Pt.start()}#Ot={};static#$t=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#$t}get#_t(){return oe.DiscoveredDeviceExpirationTimeout}#Pt=new re(this.#Vt.bind(this),1e3);#Vt(){const e=Object.entries(this.#At);if(0==e.length)return void this.#Pt.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Ot[e];console.log(t-n),t-n>this.#_t&&(ae.log("discovered device timeout"),delete this.#At[e],delete this.#Ot[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#Rt()}get canReset(){return!1}reset(){ae.log("resetting...")}}const ce=l("NobleScanner",{log:!0});let he=!1;if(t){var le=require("@abandonware/noble");he=!0}class ge extends oe{static get isSupported(){return he}#zt=!1;get#Bt(){return this.#zt}set#Bt(e){ce.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#zt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ce.log("duplicate isScanning assignment")}get isScanning(){return this.#Bt}#Ft="unknown";get#qt(){return this.#Ft}set#qt(e){ce.assertTypeWithError(e,"string"),this.#qt!=e?(this.#Ft=e,ce.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ce.log("duplicate nobleState assignment")}#jt={scanStart:this.#Ht.bind(this),scanStop:this.#Gt.bind(this),stateChange:this.#Zt.bind(this),discover:this.#Qt.bind(this)};#Ht(){ce.log("OnNobleScanStart"),this.#Bt=!0}#Gt(){ce.log("OnNobleScanStop"),this.#Bt=!1}#Zt(e){ce.log("onNobleStateChange",e),this.#qt=e}#Qt(e){let t;ce.log("onNobleDiscover",e.id),this.#Jt[e.id]||(e._scanner=this,this.#Jt[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=C[0].replaceAll("-",""),n=s.find((t=>t.uuid==e));if(n){const e=n.data.readUint8(0);t=ne.Types[e]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(le,this.#jt),v(this,this.#Kt)}get isAvailable(){return"poweredOn"==this.#qt}startScan(){super.startScan(),le.startScanningAsync(C,!0)}stopScan(){super.stopScan(),le.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),le.reset()}#Kt={expiredDiscoveredDevice:this.#Xt.bind(this)};#Xt(e){const t=e.message.discoveredDevice;this.#Jt[t.id]&&delete this.#Jt[t.id]}#Jt={};#Yt(e){ce.assertTypeWithError(e,"string"),ce.assertWithError(this.#Jt[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#Yt(e);const t=this.#Jt[e];ce.log("connecting to discoveredDevice...",e);const s=new ne,n=new V;n.noblePeripheral=t,s.connectionManager=n,await s.connect()}}const de=l("Scanner",{log:!1});let ue;ge.isSupported?(de.log("using NobleScanner"),ue=new ge):de.log("Scanner not available");var ve=ue;const pe=l("DevicePairPressureSensorDataManager",{log:!0});class me{static get Sides(){return ne.InsoleSides}get sides(){return ne.InsoleSides}#es={};#K=new F;resetPressureRange(){this.#K.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(pe.log({pressure:t,insoleSide:s}),this.#es[s]=t,this.#ts)return this.#ss();pe.log("doesn't have all pressure data yet...")}get#ts(){return this.sides.every((e=>e in this.#es))}static#H={pressure:j.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#H}get scalars(){return me.Scalars}#ss(){this.scalars.pressure;const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#es[t].rawSum,e.normalizedSum+=this.#es[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#es[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#K.updateAndGetNormalization(e.center)),pe.log({devicePairPressure:e}),e}}const fe=l("DevicePairSensorDataManager",{log:!0});class Se{static get Sides(){return ne.InsoleSides}get sides(){return ne.InsoleSides}#ns={};pressureSensorDataManager=new me;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(fe.log({sensorType:s,timestamp:t,event:e}),this.#ns[s]||(this.#ns[s]={}),this.#ns[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else fe.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#ns[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else fe.log("no value received")}onDataReceived}const be=l("DevicePair",{log:!0});class ye{constructor(){this.#Re.onDataReceived=this.#Ie.bind(this)}static#Oe=["isConnected","pressure",...ne.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#Oe}get eventTypes(){return ye.#Oe}#Pe=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Ue(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}static get Sides(){return ne.InsoleSides}get sides(){return ye.Sides}#is;get left(){return this.#is}#rs;get right(){return this.#rs}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}#p(){be.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void be.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#as),v(e,this.#as),t){case"left":this.#is=e;break;case"right":this.#rs=e}return be.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}}),this.#Ue({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}be.log("device already assigned")}#as={connectionStatus:this.#os.bind(this),isConnected:this.#cs.bind(this),sensorData:this.#hs.bind(this),getSensorConfiguration:this.#os.bind(this)};#os(e){this.#Ue({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#cs(e){this.#os(e),this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#Re=new Se;#hs(e){this.#os(e),this.#Ue({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Re.onDeviceSensorData(e)}#Ie(e,t){be.log({sensorType:e,sensorData:t}),this.#Ue({type:e,message:t})}resetPressureRange(){this.#Re.resetPressureRange()}static#ls=new ye;static get shared(){return this.#ls}static{ne.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#ls.assignInsole(t)}))}}const De=l("ServerUtils",{log:!1}),Ee=3e7,Ce=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function we(...e){De.log("createServerMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=P(...e.data),s=t.byteLength;De.assertEnumWithError(e.type,Ce);return P(Ce.indexOf(e.type),s,t)}));return De.log("messageBuffers",...t),P(...t)}function Te(...e){De.log("createServerDeviceMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=P(...e.data),s=t.byteLength;De.assertEnumWithError(e.type,ne.EventTypes);const n=ne.EventTypes.indexOf(e.type);return De.log({messageTypeEnum:n,messageDataArrayBufferByteLength:s}),P(n,s,t)}));return De.log("messageBuffers",...t),P(...t)}const Me=new TextDecoder;function Le(e,t){const s=e.getUint8(t++);return{string:Me.decode(e.buffer.slice(t,t+s)),byteOffset:t+=s}}const We=we("ping"),Ne=we("pong"),ke=we("isScanningAvailable"),Re=we("isScanning"),Ie=we("startScan"),xe=we("stopScan"),Ae=we("discoveredDevices"),Oe=l("WebSocketClientConnectionManager",{log:!0});class Pe extends f{static get isSupported(){return e}static get type(){return"webSocketClient"}#gs;get id(){return this.#gs}set id(e){Oe.assertTypeWithError(e,"string"),this.#gs!=e?this.#gs=e:Oe.log("redundant id assignment")}#ds=!1;get isConnected(){return this.#ds}async connect(){await super.connect(),this.#us(),this.webSocketClient.connectToDevice(this.id)}async disconnect(){await super.disconnect(),this.#us(),this.webSocketClient.disconnectFromDevice(this.id)}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),Oe.log("attempting to reconnect..."),this.connect()}#vs;get webSocketClient(){return this.#vs}set webSocketClient(e){Oe.assertTypeWithError(e,"object"),this.webSocketClient!=e?(Oe.log({newWebSocketClient:e}),this.#vs=e):Oe.log("redundant webSocketClient assignment")}#us(){Oe.assertWithError(this.#vs,"webSocketClient not defined")}sendWebSocketMessage;onWebSocketMessage(e){Oe.log({dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=ne.EventTypes[s],i=e.getUint8(t++);Oe.log({messageTypeEnum:s,messageType:n,messageByteLength:i}),Oe.assertEnumWithError(n,ne.EventTypes);let r=t;if("isConnected"===n){const t=e.getUint8(r++);this.#ds=t,this.status=t?"connected":"not connected"}else Oe.error(`uncaught messageType "${n}"`);t+=i}}}const Ue=l("WebSocketClient",{log:!0});class $e{static#Oe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Oe}get eventTypes(){return $e.#Oe}#Pe=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Ue(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#ps;get webSocket(){return this.#ps}set webSocket(e){this.#ps!=e?(Ue.log("assigning webSocket",e),this.#ps&&p(this.#ps,this.#ms),v(e,this.#ms),this.#ps=e,Ue.log("assigned webSocket")):Ue.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#fs(){Ue.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Ss(){Ue.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#Ss(),this.#bs="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#fs(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#bs="disconnecting",this.webSocket.close()}reconnect(){this.#Ss(),this.webSocket=new WebSocket(this.webSocket.url)}static#Ve=!0;static get ReconnectOnDisconnection(){return this.#Ve}static set ReconnectOnDisconnection(e){Ue.assertTypeWithError(e,"boolean"),this.#Ve=e}#ze=$e.#Ve;get reconnectOnDisconnection(){return this.#ze}set reconnectOnDisconnection(e){Ue.assertTypeWithError(e,"boolean"),this.#ze=e}#ms={open:this.#ys.bind(this),message:this.#Ds.bind(this),close:this.#Es.bind(this),error:this.#Cs.bind(this)};#ys(e){Ue.log("webSocket.open",e),this.#ws.start(),this.#bs="connected"}async#Ds(e){Ue.log("webSocket.message",e),this.#ws.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Ts(s)}#Es(e){Ue.log("webSocket.close",e),this.#bs="not connected",this.#ws.stop(),this.#ze&&setTimeout((()=>{this.reconnect()}),3e3)}#Cs(e){Ue.log("webSocket.error",e)}#Ms="not connected";get#bs(){return this.#Ms}set#bs(e){switch(Ue.assertTypeWithError(e,"string"),Ue.log({newConnectionStatus:e}),this.#Ms=e,this.#Ue({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Ue({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?(this.#Ls(),this.#Ws()):(this.#Ns=!1,this.#Bt=!1)}}get connectionStatus(){return this.#bs}#Ts(e){Ue.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=Ce[s],i=e.getUint8(t++);Ue.log({messageTypeEnum:s,messageType:n,messageByteLength:i}),Ue.assertEnumWithError(n,Ce);let r=t;switch(n){case"ping":this.#ks();break;case"pong":break;case"isScanningAvailable":{const t=Boolean(e.getUint8(r++));Ue.log({isScanningAvailable:t}),this.#Ns=t}break;case"isScanning":{const t=Boolean(e.getUint8(r++));Ue.log({isScanning:t}),this.#Bt=t}break;case"discoveredDevice":{const{string:t}=Le(e,r);Ue.log({discoveredDeviceString:t});const s=JSON.parse(t);Ue.log({discoveredDevice:s}),this.#Nt(s)}break;case"expiredDiscoveredDevice":{const{string:t}=Le(e,r);this.#Xt(t)}break;case"deviceMessage":{const{string:s,byteOffset:n}=Le(e,r);r=n;const a=this.#Rs[s];Ue.assertWithError(a,`no device found for id ${s}`);const o=a.connectionManager,c=new DataView(e.buffer,r,i-(r-t));o.onWebSocketMessage(c)}break;default:Ue.error(`uncaught messageType "${n}"`)}t+=i}}#ws=new re(this.#Is.bind(this),Ee);#Is(){this.#fs(),this.webSocket.send(We)}#ks(){this.#fs(),this.webSocket.send(Ne)}#xs=!1;get#Ns(){return this.#xs}set#Ns(e){Ue.assertTypeWithError(e,"boolean"),this.#xs=e,this.#Ue({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#As()}get isScanningAvailable(){return this.#Ns}#Os(){this.#fs(),Ue.assertWithError(this.isScanningAvailable,"scanning is not available")}#Ls(){this.#fs(),this.webSocket.send(ke)}#zt=!1;get#Bt(){return this.#zt}set#Bt(e){Ue.assertTypeWithError(e,"boolean"),this.#zt=e,this.#Ue({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Bt}#As(){this.#fs(),this.webSocket.send(Re)}#It(){Ue.assertWithError(this.isScanning,"is not scanning")}#xt(){Ue.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#xt(),this.webSocket.send(Ie)}stopScan(){this.#It(),this.webSocket.send(xe)}toggleScan(){this.#Os(),this.isScanning?this.stopScan():this.startScan()}#At={};get discoveredDevices(){return this.#At}#Nt(e){Ue.log({discoveredDevice:e}),this.#At[e.id]=e,this.#Ue({type:"discoveredDevice",message:{discoveredDevice:e}})}#Ws(){this.#fs(),this.webSocket.send(Ae)}#Xt(e){Ue.log({expiredDeviceId:e});const t=this.#At[e];t?(Ue.log({expiredDiscoveredDevice:t}),delete this.#At[e],this.#Ue({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Ue.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#Ps(e)}#Ps(e){this.#fs(),Ue.assertTypeWithError(e,"string");let t=this.devices[e];return t||(t=this.#Us(e),this.devices[e]=t),this.webSocket.send(this.#$s(e)),t}#$s(e){return we({type:"connectToDevice",data:e})}#Us(e){const t=new ne,s=new Pe;return s.id=e,s.sendWebSocketMessage=this.#_s.bind(this,e),s.webSocketClient=this,t.connectionManager=s,t}disconnectFromDevice(e){this.#Vs(e)}#Vs(e){this.#fs(),Ue.assertTypeWithError(e,"string");const t=this.devices[e];Ue.assertWithError(t,`no device found with id ${e}`),this.webSocket.send(this.#zs(e))}#zs(e){return we({type:"disconnectFromDevice",data:e})}#_s(e,t,s){this.#fs(),this.webSocket.send(this.#Bs(e,t,s))}#Bs(e,t,s){Ue.assertTypeWithError(e,"string"),Ue.assertEnumWithError(t,Pe.MessageTypes);return we({type:"deviceMessage",data:[e,Pe.MessageTypes.indexOf(t),s]})}#Rs={};get devices(){return this.#Rs}}const _e=l("WebSocketServer",{log:!0});t&&require("ws");class Ve{constructor(){_e.assertWithError(ve,"no scanner defined"),v(ve,this.#Fs),v(ne,this.#qs)}static#Oe=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Oe}get eventTypes(){return Ve.#Oe}#Pe=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Ue(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#js;get server(){return this.#js}set server(e){this.#js!=e?(_e.log("assigning server..."),this.#js&&(_e.log("clearing existing server..."),p(this.#js,this.#Hs)),v(e,this.#Hs),this.#js=e,_e.log("assigned server")):_e.log("redundant WebSocket assignment")}#Hs={close:this.#Gs.bind(this),connection:this.#Zs.bind(this),error:this.#Qs.bind(this),headers:this.#Js.bind(this),listening:this.#Ks.bind(this)};#Gs(){_e.log("server.close")}#Zs(e){_e.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new re((()=>this.#Xs(e)),Ee),e.pingClientTimer.start(),v(e,this.#Ys),this.#Ue({type:"clientConnected",message:{client:e}})}#Qs(e){_e.error(e)}#Js(){}#Ks(){_e.log("server.listening")}#Ys={open:this.#en.bind(this),message:this.#tn.bind(this),close:this.#sn.bind(this),error:this.#nn.bind(this)};#en(e){_e.log("client.open")}#tn(e){_e.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(U(e.data));this.#in(t,s)}#sn(e){_e.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#Ys),this.#Ue({type:"clientDisconnected",message:{client:t}})}#nn(e){_e.log("client.error")}static#nt=new TextDecoder;get#Ze(){return Ve.#nt}#in(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),i=Ce[n],r=t.getUint8(s++);_e.log({messageTypeEnum:n,messageType:i,messageByteLength:r}),_e.assertWithError(i,`invalid messageTypeEnum ${n}`);let a=s;switch(i){case"ping":e.send(pongMessageBuffer);break;case"pong":case"connectedDevices":break;case"isScanningAvailable":e.send(this.#rn);break;case"isScanning":e.send(this.#an);break;case"startScan":ve.startScan();break;case"stopScan":ve.stopScan();break;case"discoveredDevices":e.send(this.#on);break;case"connectToDevice":{const{string:e}=Le(t,a);ve.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=Le(t,a),s=ne.ConnectedDevices.find((t=>t.id==e));s?s.disconnect():_e.error(`no device found with id ${e}`)}break;case"deviceMessage":{const{string:e}=Le(t,a);ne.ConnectedDevices.find((t=>t.id==e))||_e.error(`no device found with id ${e}`)}break;default:_e.error(`uncaught messageType "${i}"`)}s+=r}}get#rn(){return we({type:"isScanningAvailable",data:ve.isAvailable})}get#an(){return we({type:"isScanning",data:ve.isScanning})}#cn(e){_e.log("broadcasting",e),this.server.clients.forEach((t=>{t.send(e)}))}#Xs(e){e.isAlive?(e.isAlive=!1,e.send(We)):e.terminate()}#Fs={isAvailable:this.#hn.bind(this),isScanning:this.#ln.bind(this),discoveredDevice:this.#gn.bind(this),expiredDiscoveredDevice:this.#Xt.bind(this)};#hn(e){this.#cn(this.#rn)}#ln(e){this.#cn(this.#an)}#gn(e){const t=e.message.discoveredDevice;console.log(t),this.#cn(this.#dn(t))}#Xt(e){const t=e.message.discoveredDevice;console.log("expired",t),this.#cn(this.#un(t))}#dn(e){return we({type:"discoveredDevice",data:e})}get#on(){return we(...ve.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}#un(e){return we({type:"expiredDiscoveredDevice",data:e.id})}#qs={deviceConnected:this.#vn.bind(this),deviceDisconnected:this.#pn.bind(this),deviceIsConnected:this.#cs.bind(this)};#vn(e){const t=e.message.device;_e.log("onDeviceConnected",t.id),v(t,this.#mn)}#pn(e){const t=e.message.device;_e.log("onDeviceDisconnected",t.id),p(t,this.#mn)}#cs(e){const t=e.message.device;_e.log("onDeviceIsConnected",t.id),this.#cn(this.#fn(t))}#fn(e){return this.#Bs(e,{type:"isConnected",data:e.isConnected})}#Bs(e,...t){return we({type:"deviceMessage",data:[e.id,Te(...t)]})}#mn={deviceInformation:this.#Sn.bind(this)};#Sn(e){const t=e.target;_e.log("onDeviceInformation",t.deviceInformation),this.#cn(this.#bn(t))}#bn(e){return this.#Bs(e,{type:"deviceInformation",data:e.deviceInformation})}}var ze={setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:ne,DevicePair:ye,WebSocketClient:$e,WebSocketServer:Ve,Scanner:ve};export{ze as default};
