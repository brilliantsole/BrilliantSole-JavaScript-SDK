/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}if(!console.table){const e=(...e)=>{console.log(...e)};console.table=e}function i(){}const a=console.log.bind(console),r=console.warn.bind(console),o=console.error.bind(console),c=console.table.bind(console),h=console.assert.bind(console);class l{static#e={};constructor(e){if(l.#e[e])throw new Error(`"${e}" console already exists`);l.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0,table:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new l(e)}get log(){return this.#t.log?a:i}get warn(){return this.#t.warn?r:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?h:i}get table(){return this.#t.table?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function g(e,t){return l.create(e,t)}function d(e){return e[0].toUpperCase()+e.slice(1)}const u=g("EventDispatcher",{log:!1});class p{constructor(e,t){u.assertWithError(e,"target is required"),this.#s=e,u.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#a(e){u.assertWithError(this.#i(e),`invalid event type "${e}"`)}#r;addEventListener(e,t,s){if(u.log(`adding "${e}" eventListener`,t),this.#a(e),this.#r||(this.#r={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#r;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return u.log(`has "${e}" eventListener?`,t),this.#a(e),this.#r?.[e]?.includes(t)}removeEventListener(e,t){if(u.log(`removing "${e}" eventListener`,t),this.#a(e),this.hasEventListener(e,t)){const s=this.#r[e].indexOf(t);return this.#r[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#a(e.type),this.#r?.[e.type]){e.target=this.#s;const t=this.#r[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){u.error(e)}}}waitForEvent(e){return u.log(`waiting for event "${e}"`),this.#a(e),new Promise((t=>{this.addEventListener(e,(e=>{t(e)}),{once:!0})}))}}function f(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;u.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function m(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;u.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const v=g("Timer",{log:!1});class y{#o;get callback(){return this.#o}set callback(e){v.assertTypeWithError(e,"function"),v.log({newCallback:e}),this.#o=e,this.isRunning&&this.restart()}#c;get interval(){return this.#c}set interval(e){v.assertTypeWithError(e,"number"),v.assertWithError(e>0,"interval must be above 0"),v.log({newInterval:e}),this.#c=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#h=null;get isRunning(){return null!=this.#h}start(){this.isRunning?v.log("interval already running"):(v.log("starting interval"),this.#h=setInterval(this.#o,this.#c))}stop(){this.isRunning?(v.log("stopping interval"),clearInterval(this.#h),this.#h=null):v.log("interval already not running")}restart(){this.stop(),this.start()}}function b(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}const S=new Uint32Array(256);for(let e=0;e<256;++e)S[e]=b(e);function D(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(S[n^i]^s>>>8)>>>0}return s}const w=g("ArrayBufferUtils",{log:!1}),T=new TextEncoder;function E(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return C(e)}if(e instanceof Array){return E(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return C(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function M(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function C(e){const t=T.encode(e);return E(t.byteLength,t)}function L(e,t,s){let n;return null!=s&&(n=e.byteOffset+t+s),w.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}async function k(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}const I=g("FileTransferManager",{log:!0});class W{static#l=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#l}get messageTypes(){return W.MessageTypes}static#g=[...this.#l,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#g}get eventTypes(){return W.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#u=["tflite"];static get Types(){return this.#u}get types(){return W.Types}#p(e){I.assertEnumWithError(e,this.types)}#f(e){I.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#m=["idle","sending","receiving"];static get Statuses(){return this.#m}get statuses(){return W.Statuses}#v(e){I.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#y=["startSend","startReceive","cancel"];static get Commands(){return this.#y}get commands(){return W.Commands}#b(e){I.assertEnumWithError(e,this.commands)}static#S=0;static get MaxLength(){return this.#S}#D=W.MaxLength;get maxLength(){return this.#D}#w(e){I.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);I.log(`maxLength: ${t/1024}kB`),this.#D=t}#T(e){I.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#E;get type(){return this.#E}#M(e){I.log("parseFileType",e);const t=e.getUint8(0);this.#f(t);const s=this.types[t];this.#C(s)}#C(e){I.log({fileTransferType:e}),this.#E=e,this.#d({type:"getFileTransferType",message:{fileType:e}})}async#L(e,t){if(this.#p(e),this.type==e)return void I.log(`redundant type assignment ${e}`);const s=this.waitForEvent("getFileTransferType"),n=this.types.indexOf(e);this.sendMessage([{type:"setFileTransferType",data:Uint8Array.from([n]).buffer}],t),await s}#k=0;get length(){return this.#k}#I(e){I.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#W(t)}#W(e){I.log(`length: ${e/1024}kB`),this.#k=e,this.#d({type:"getFileLength",message:{fileLength:e}})}async#x(e,t){if(I.assertTypeWithError(e,"number"),this.#T(e),this.length==e)return void I.log(`redundant length assignment ${e}`);const s=this.waitForEvent("getFileLength"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileLength",data:n.buffer}],t),await s}#N=0;get checksum(){return this.#N}#_(e){I.log("checksum",e);const t=e.getUint32(0,!0);this.#R(t)}#R(e){I.log({checksum:e}),this.#N=e,this.#d({type:"getFileChecksum",message:{fileChecksum:e}})}async#U(e,t){if(I.assertTypeWithError(e,"number"),this.checksum==e)return void I.log(`redundant checksum assignment ${e}`);const s=this.waitForEvent("getFileChecksum"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileChecksum",data:n.buffer}],t),await s}async#F(e,t){this.#b(e);const s=this.waitForEvent("fileTransferStatus"),n=this.commands.indexOf(e);this.sendMessage([{type:"setFileTransferCommand",data:Uint8Array.from([n]).buffer}],t),await s}#A="idle";get status(){return this.#A}#O(e){I.log("parseFileStatus",e);const t=e.getUint8(0);this.#v(t);const s=this.statuses[t];this.#P(s)}#P(e){I.log({status:e}),this.#A=e,this.#d({type:"fileTransferStatus",message:{fileTransferStatus:e}}),this.#$.length=0}#V(){I.assertWithError("idle"==this.#A,"status is not idle")}#B(){I.assertWithError("idle"!=this.#A,"status is idle")}#$=[];async#z(e){I.log("parseFileBlock",e),this.#$.push(e.buffer);const t=this.#$.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#k;if(I.log(`received ${t} of ${this.#k} bytes (${100*s}%)`),this.#d({type:"fileTransferProgress",message:{progress:s}}),t!=this.#k)return;I.log("file transfer complete");let n,i=(new Date).toLocaleString();if("tflite"===this.type)i+=".tflite";n="undefined"!=typeof File?new File(this.#$,i):new Blob(this.#$);const a=D(await n.arrayBuffer());I.log({checksum:a}),a==this.#N?(console.log("received file",n),this.#d({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#d({type:"fileReceived",message:{file:n}})):I.error(`wrong checksum - expected ${this.#N}, got ${a}`)}parseMessage(e,t){switch(I.log({messageType:e}),e){case"maxFileLength":this.#w(t);break;case"getFileTransferType":case"setFileTransferType":this.#M(t);break;case"getFileLength":case"setFileLength":this.#I(t);break;case"getFileChecksum":case"setFileChecksum":this.#_(t);break;case"fileTransferStatus":this.#O(t);break;case"getFileTransferBlock":this.#z(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#V(),this.#p(e);const s=await k(t),n=[];n.push(this.#L(e,!1));const i=s.byteLength;n.push(this.#x(i,!1));const a=D(s);n.push(this.#U(a,!1)),n.push(this.#F("startSend",!1)),this.sendMessage(),await Promise.all(n),await this.#q(s)}async#q(e){return this.#j(e)}async#j(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+(this.mtu-3-3));console.log("slicedBuffer",s);const n=1-(e.byteLength-t)/e.byteLength;if(I.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#d({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage([{type:"setFileTransferBlock",data:s}]),this.#j(e,t+s.byteLength);I.log("finished sending buffer"),this.#d({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#V(),this.#p(e),await this.#L(e),await this.#F("startReceive")}async cancel(){this.#B(),await this.#F("cancel")}sendMessage;mtu}const x=new TextEncoder,N=new TextDecoder;const _=65536;function R(e,t){const s=Date.now();var n;return(n=s)-n%_+e.getUint16(t,!0)}const U={min:1/0,max:-1/0};class F{#H=Object.assign({},U);reset(){Object.assign(this.#H,U)}update(e){this.#H.min=Math.min(e,this.#H.min),this.#H.max=Math.max(e,this.#H.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#H.min,this.#H.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class A{#H={x:new F,y:new F};reset(){this.#H.x.reset(),this.#H.y.reset()}update(e){this.#H.x.update(e.x),this.#H.y.update(e.y)}getNormalization(e){return{x:this.#H.x.getNormalization(e.x),y:this.#H.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const O=g("PressureSensorDataManager",{log:!0});class P{#G=[];get positions(){return this.#G}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;O.log({positions:t}),this.#G=t,this.#J=(s=this.numberOfSensors,n=()=>new F,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#J;#Q=new A;resetRange(){this.#J.forEach((e=>e.reset())),this.#Q.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),a=this.#J[s].updateAndGetNormalization(i),r=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:a,position:r},t.rawSum+=i,t.normalizedSum+=a/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#Q.updateAndGetNormalization(t.center)),O.log({pressure:t}),t}}const $=g("MotionSensorDataManager",{log:!1});class V{static#Z=6;static get Vector3Size(){return this.#Z}get vector3Size(){return V.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const a={x:s,y:n,z:i};return $.log({vector:a}),a}static#K=8;static get QuaternionSize(){return this.#K}get quaternionSize(){return V.QuaternionSize}parseQuaternion(e,t){let[s,n,i,a]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const r={x:s,y:n,z:i,w:a};return $.log({quaternion:r}),r}static#X=6;static get EulerSize(){return this.#X}get eulerSize(){return V.EulerSize}parseEuler(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const a={heading:s,pitch:n,roll:i};return $.log({euler:a}),a}}const B=g("BarometerSensorDataManager",{log:!0});class z{#Y(e){const t=.0065;return 288.15/t*(1-Math.pow(e/101325,.19026643566373183))}parseData(e,t){const s=e.getUint32(0,!0)*t,n=this.#Y(s);return B.log({pressure:s,altitude:n}),{pressure:s}}}const q=g("ParseUtils",{log:!0}),j=new TextDecoder;function H(e,t=0){const s=e.getUint8(t++);return{string:j.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function G(e,t,s,n,i=!1){let a=0;for(;a<e.byteLength;){const r=e.getUint8(a++),o=t[r];let c;i?(c=e.getUint16(a,!0),a+=2):c=e.getUint8(a++),q.log({messageTypeEnum:r,messageType:o,messageLength:c,dataView:e,byteOffset:a}),q.assertWithError(o,`invalid messageTypeEnum ${r}`);const h=L(e,a,c);q.log({_dataView:h}),s(o,h,n),a+=c}}const J=g("SensorDataManager",{log:!0});class Q{static#l=["getPressurePositions","getSensorScalars","sensorData"];static get MessageTypes(){return this.#l}get messageTypes(){return Q.MessageTypes}pressureSensorDataManager=new P;motionSensorDataManager=new V;barometerSensorDataManager=new z;static#u=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","orientation","barometer"];static get Types(){return this.#u}get types(){return Q.Types}#ee=new Map;static AssertValidSensorType(e){J.assertTypeWithError(e,"string"),J.assertWithError(this.#u.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){J.assertTypeWithError(e,"number"),J.assertWithError(e in this.#u,`invalid sensorTypeEnum ${e}`)}static#g=[...this.#l,...this.#u];static get EventTypes(){return this.#g}get eventTypes(){return Q.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#te(e){J.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=R(e,t);t+=2;G(new DataView(e.buffer,t),Q.Types,this.#se.bind(this),{timestamp:s})}#se(e,t,{timestamp:s}){const n=this.#ee.get(e);let i;switch(e){case"pressure":i=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(t,n);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(t,n);break;case"orientation":i=this.motionSensorDataManager.parseEuler(t,n);break;case"barometer":i=this.barometerSensorDataManager.parseData(t,n);break;default:J.error(`uncaught sensorType "${e}"`)}J.assertWithError(i,`no sensorData defined for sensorType "${e}"`),J.log({sensorType:e,sensorData:i,sensorData:i}),this.#d({type:e,message:{[e]:i}}),this.#d({type:"sensorData",message:{[e]:i,sensorType:e}})}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=Q.Types[s];if(!n){J.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);J.log({sensorType:n,sensorScalar:i}),this.#ee.set(n,i)}}parseMessage(e,t){switch(J.log({messageType:e}),e){case"getSensorScalars":this.parseScalars(t);break;case"getPressurePositions":this.pressureSensorDataManager.parsePositions(t);break;case"sensorData":this.#te(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const Z=g("SensorConfigurationManager",{log:!1});class K{static#l=["getSensorConfiguration","setSensorConfiguration"];static get MessageTypes(){return this.#l}get messageTypes(){return K.MessageTypes}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return K.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static get#ne(){return Q.Types}get#ie(){return K.#ne}#ae;#re(e){Z.assertWithError(this.#ae,"must get initial sensorConfiguration");const t=this.#ae?.includes(e);return Z.assert(t,`unavailable sensor type "${e}"`),t}#oe;get configuration(){return this.#oe}#ce(e){this.#oe=e,Z.log({updatedConfiguration:this.#oe}),this.#d({type:"getSensorConfiguration",message:{sensorConfiguration:this.configuration}})}async setConfiguration(e){Z.log({newSensorConfiguration:e});const t=this.#he(e);Z.log({setSensorConfigurationData:t});const s=this.waitForEvent("getSensorConfiguration");this.sendMessage([{type:"setSensorConfiguration",data:t.buffer}]),await s}#le(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=Q.Types[n];if(!i){Z.warn(`unknown sensorType index ${n}`);continue}const a=e.getUint16(s+1,!0);Z.log({sensorType:i,sensorRate:a}),t[i]=a}return Z.log({parsedSensorConfiguration:t}),this.#ae=Object.keys(t),t}static#ge=65535;static get MaxSensorRate(){return this.#ge}get maxSensorRate(){return K.MaxSensorRate}static#de=5;static get SensorRateStep(){return this.#de}get sensorRateStep(){return K.SensorRateStep}static#ue(e){Z.assertTypeWithError(e,"number"),Z.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),Z.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),Z.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#pe(e){K.#ue(e)}#he(e){let t=Object.keys(e);t=t.filter((e=>this.#re(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{Q.AssertValidSensorType(t);const i=Q.Types.indexOf(t);s.setUint8(3*n,i);const a=e[t];this.#pe(a),s.setUint16(3*n+1,e[t],!0)})),Z.log({sensorConfigurationData:s}),s}static#fe={};static get ZeroSensorConfiguration(){return this.#fe}static{this.#ne.forEach((e=>{this.#fe[e]=0}))}get zeroSensorConfiguration(){const e={};return this.#ie.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setConfiguration(this.zeroSensorConfiguration)}parseMessage(e,t){switch(Z.log({messageType:e}),e){case"getSensorConfiguration":case"setSensorConfiguration":const s=this.#le(t);this.#ce(s);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const X=g("TfliteManager",{log:!0});let Y=class e{static#l=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteSensorTypes","setTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#l}get messageTypes(){return e.MessageTypes}static#me=["classification","regression"];static get Tasks(){return this.#me}get tasks(){return e.Tasks}#ve(e){X.assertEnumWithError(e,this.tasks)}#ye(e){X.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return e.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#be;get name(){return this.#be}#Se(e){X.log("parseName",e);const t=N.decode(e);this.#De(t)}#De(e){X.log({name:e}),this.#be=e,this.#d({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e,t){if(X.assertTypeWithError(e,"string"),this.name==e)return void X.log(`redundant name assignment ${e}`);const s=this.waitForEvent("getTfliteName"),n=x.encode(e);this.sendMessage([{type:"setTfliteName",data:n.buffer}],t),await s}#we;get task(){return this.#we}#Te(e){X.log("parseTask",e);const t=e.getUint8(0);this.#ye(t);const s=this.tasks[t];this.#Ee(s)}#Ee(e){X.log({task:e}),this.#we=e,this.#d({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e,t){if(this.#ve(e),this.task==e)return void X.log(`redundant task assignment ${e}`);const s=this.waitForEvent("getTfliteTask"),n=this.tasks.indexOf(e);this.sendMessage([{type:"setTfliteTask",data:Uint8Array.from([n]).buffer}],t),await s}#Me;get sampleRate(){return this.#Me}#Ce(e){X.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#Le(t)}#Le(e){X.log({sampleRate:e}),this.#Me=e,this.#d({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e,t){if(X.assertTypeWithError(e,"number"),e-=e%K.SensorRateStep,X.assertWithError(e>=K.SensorRateStep,`sampleRate must be multiple of ${K.SensorRateStep} greater than 0 (got ${e})`),this.#Me==e)return void X.log(`redundant sampleRate assignment ${e}`);const s=this.waitForEvent("getTfliteSampleRate"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteSampleRate",data:n.buffer}],t),await s}static#ne=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#ne}static AssertValidSensorType(e){Q.AssertValidSensorType(e),X.assertWithError(this.#ne.includes(e),`invalid tflite sensorType "${e}"`)}#ie=[];get sensorTypes(){return this.#ie.slice()}#ke(e){X.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=Q.Types[n];i?t.push(i):X.error(`invalid sensorTypeEnum ${n}`)}this.#Ie(t)}#Ie(e){X.log({sensorTypes:e}),this.#ie=e,this.#d({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(t,s){t.forEach((t=>{e.AssertValidSensorType(t)}));const n=this.waitForEvent("getTfliteSensorTypes");var i;const a=(t=(i=t).filter(((e,t)=>i.indexOf(e)==t))).map((e=>Q.Types.indexOf(e))).sort();X.log(t,a),this.sendMessage([{type:"setTfliteSensorTypes",data:Uint8Array.from(a).buffer}],s),await n}#We;get isReady(){return this.#We}#xe(e){X.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Ne(t)}#Ne(e){X.log({isReady:e}),this.#We=e,this.#d({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#_e(){X.assertWithError(this.isReady,"tflite is not ready")}#Re;get captureDelay(){return this.#Re}#Ue(e){X.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#Fe(t)}#Fe(e){X.log({captureDelay:e}),this.#Re=e,this.#d({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e,t){if(X.assertTypeWithError(e,"number"),this.#Re==e)return void X.log(`redundant captureDelay assignment ${e}`);const s=this.waitForEvent("getTfliteCaptureDelay"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteCaptureDelay",data:n.buffer}],t),await s}#Ae;get threshold(){return this.#Ae}#Oe(e){X.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#Pe(t)}#Pe(e){X.log({threshold:e}),this.#Ae=e,this.#d({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e,t){if(X.assertTypeWithError(e,"number"),X.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#Ae==e)return void X.log(`redundant threshold assignment ${e}`);const s=this.waitForEvent("getTfliteThreshold"),n=new DataView(new ArrayBuffer(4));n.setFloat32(0,e,!0),this.sendMessage([{type:"setTfliteThreshold",data:n.buffer}],t),await s}#$e;get inferencingEnabled(){return this.#$e}#Ve(e){X.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#Be(t)}#Be(e){X.log({inferencingEnabled:e}),this.#$e=e,this.#d({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e,t){if(X.assertTypeWithError(e,"boolean"),this.#_e(),this.#$e==e)return void X.log(`redundant inferencingEnabled assignment ${e}`);const s=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage([{type:"setTfliteInferencingEnabled",data:Uint8Array.from([e]).buffer}],t),await s}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#ze(e){X.log("parseInference",e);const t=R(e,0);X.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}X.log("values",s);const n={timestamp:t,values:s};this.#d({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(X.log({messageType:e}),e){case"getTfliteName":case"setTfliteName":this.#Se(t);break;case"getTfliteTask":case"setTfliteTask":this.#Te(t);break;case"getTfliteSampleRate":case"setTfliteSampleRate":this.#Ce(t);break;case"getTfliteSensorTypes":case"setTfliteSensorTypes":this.#ke(t);break;case"tfliteModelIsReady":this.#xe(t);break;case"getTfliteCaptureDelay":case"setTfliteCaptureDelay":this.#Ue(t);break;case"getTfliteThreshold":case"setTfliteThreshold":this.#Oe(t);break;case"getTfliteInferencingEnabled":case"setTfliteInferencingEnabled":this.#Ve(t);break;case"tfliteModelInference":this.#ze(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage};const ee=g("DeviceInformationManager",{log:!0});class te{static#l=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber"];static get MessageTypes(){return this.#l}get messageTypes(){return te.MessageTypes}static#g=[...this.#l,"deviceInformation"];static get EventTypes(){return this.#g}get eventTypes(){return te.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}information={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get#qe(){return Object.values(this.information).every((e=>null!=e))}#je(e){ee.log({partialDeviceInformation:e});for(const t in e)this.#d({type:t,message:{[t]:e[t]}});Object.assign(this.information,e),ee.log({deviceInformation:this.information}),this.#qe&&(ee.log("completed deviceInformation"),this.#d({type:"deviceInformation",message:{deviceInformation:this.information}}))}parseMessage(e,t){switch(ee.log({messageType:e}),e){case"manufacturerName":const s=N.decode(t);ee.log({manufacturerName:s}),this.#je({manufacturerName:s});break;case"modelNumber":const n=N.decode(t);ee.log({modelNumber:n}),this.#je({modelNumber:n});break;case"softwareRevision":const i=N.decode(t);ee.log({softwareRevision:i}),this.#je({softwareRevision:i});break;case"hardwareRevision":const a=N.decode(t);ee.log({hardwareRevision:a}),this.#je({hardwareRevision:a});break;case"firmwareRevision":const r=N.decode(t);ee.log({firmwareRevision:r}),this.#je({firmwareRevision:r});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),ee.log({pnpId:o}),this.#je({pnpId:o});break;case"serialNumber":const c=N.decode(t);console.log({serialNumber:c});break;default:throw Error(`uncaught messageType ${e}`)}}}const se=g("InformationManager",{log:!0});class ne{static#l=["getMtu","getName","setName","getType","setType","getCurrentTime","setCurrentTime"];static get MessageTypes(){return this.#l}get messageTypes(){return ne.MessageTypes}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return ne.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#be;get name(){return this.#be}updateName(e){se.assertTypeWithError(e,"string"),this.#be=e,se.log({updatedName:this.#be}),this.#d({type:"getName",message:{name:this.#be}})}static get MinNameLength(){return 2}get minNameLength(){return ne.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return ne.MaxNameLength}async setName(e){se.assertTypeWithError(e,"string"),se.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),se.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=x.encode(e);se.log({setNameData:t});const s=this.waitForEvent("getName");this.sendMessage([{type:"setName",data:t.buffer}]),await s}static#u=["leftInsole","rightInsole"];static get Types(){return this.#u}get#He(){return ne.Types}#E;get type(){return this.#E}get typeEnum(){return ne.Types.indexOf(this.type)}#Ge(e){se.assertEnumWithError(e,this.#He)}#Je(e){se.assertTypeWithError(e,"number"),se.assertWithError(this.#He[e],`invalid typeEnum ${e}`)}updateType(e){this.#Ge(e),e!=this.type?(this.#E=e,se.log({updatedType:this.#E}),this.#d({type:"getType",message:{type:this.#E}})):se.log("redundant type assignment")}async#Qe(e){this.#Je(e);const t=Uint8Array.from([e]);se.log({setTypeData:t});const s=this.waitForEvent("getType");this.sendMessage([{type:"setType",data:t.buffer}]),await s}async setType(e){this.#Ge(e);const t=this.#He.indexOf(e);this.#Qe(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Ze=["left","right"];static get InsoleSides(){return this.#Ze}get insoleSides(){return ne.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}#Ke=0;get mtu(){return this.#Ke}#Xe(e){se.assertTypeWithError(e,"number"),this.#Ke!=e?(this.#Ke=e,this.#d({type:"getMtu",message:{mtu:this.#Ke}})):se.log("redundant mtu assignment",e)}#Ye=!1;get isCurrentTimeSet(){return this.#Ye}#et(e){se.log({currentTime:e}),this.#Ye=0!=e,this.#Ye||this.#tt()}async#tt(){se.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0);const t=this.waitForEvent("getCurrentTime");this.sendMessage([{type:"setCurrentTime",data:e.buffer}]),await t}parseMessage(e,t){switch(se.log({messageType:e}),e){case"getName":case"setName":const s=N.decode(t);se.log({name:s}),this.updateName(s);break;case"getType":case"setType":const n=t.getUint8(0),i=this.#He[n];se.log({typeEnum:n,type:i}),this.updateType(i);break;case"getMtu":const a=t.getUint16(0,!0);se.log({mtu:a}),this.#Xe(a);break;case"getCurrentTime":case"setCurrentTime":const r=Number(t.getBigUint64(0,!0));this.#et(r);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage;clear(){this.#Ye=!1}}const ie=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ae=g("VibrationManager");class re{static#l=["triggerVibration"];static get MessageTypes(){return this.#l}get messageTypes(){return TfliteManager.MessageTypes}static#st=["front","rear"];static get Locations(){return this.#st}get locations(){return re.Locations}#nt(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#it(e){this.#at(e),e.forEach((e=>{this.#nt(e)}))}#rt(e){this.#it(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ae.log({locationsBitmask:t}),ae.assertWithError(t>0,"locationsBitmask must not be zero"),t}#at(e){ae.assertWithError(Array.isArray(e),"passed non-array"),ae.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return ie}get waveformEffects(){return re.WaveformEffects}#ot(e){ae.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#ct=1270;static get MaxWaveformEffectSegmentDelay(){return this.#ct}get maxWaveformEffectSegmentDelay(){return re.MaxWaveformEffectSegmentDelay}#ht(e){if(null!=e.effect){const t=e.effect;this.#ot(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ae.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ae.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#lt(t)}}static#gt=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#gt}get maxWaveformEffectSegmentLoopCount(){return re.MaxWaveformEffectSegmentLoopCount}#lt(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#dt=8;static get MaxNumberOfWaveformEffectSegments(){return this.#dt}get maxNumberOfWaveformEffectSegments(){return re.MaxNumberOfWaveformEffectSegments}#ut(e){this.#at(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ht(e)}))}static#pt=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#pt}get maxWaveformEffectSequenceLoopCount(){return re.MaxWaveformEffectSequenceLoopCount}#ft(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#mt=2550;static get MaxWaveformSegmentDuration(){return this.#mt}get maxWaveformSegmentDuration(){return re.MaxWaveformSegmentDuration}#vt(e){ae.assertTypeWithError(e.amplitude,"number"),ae.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ae.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ae.assertTypeWithError(e.duration,"number"),ae.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ae.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#yt=20;static get MaxNumberOfWaveformSegments(){return this.#yt}get maxNumberOfWaveformSegments(){return re.MaxNumberOfWaveformSegments}#bt(e){this.#at(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#vt(e)}))}#St(e,t,s=0){this.#ut(t),this.#ft(s);let n=[],i=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const r=0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const a=e%4*2;n[i]|=s<<a,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ae.log({dataArray:n,dataView:o}),this.#he(e,"waveformEffect",o)}#Dt(e,t){this.#bt(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ae.log({dataView:s}),this.#he(e,"waveform",s)}static#u=["waveformEffect","waveform"];static get Types(){return this.#u}get#He(){return re.Types}#wt(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.#He.includes(e),`invalid vibrationType "${e}"`)}#he(e,t,s){ae.assertWithError(s?.byteLength>0,"no data received");const n=this.#rt(e);this.#wt(t);const i=this.#He.indexOf(t);ae.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const a=E(n,i,s.byteLength,s);return ae.log({data:a}),a}async triggerVibration(e,t){let s;e.forEach((e=>{const{type:t}=e;let n,{locations:i}=e;switch(i=i||this.locations.slice(),t){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:a}=t;n=this.#St(i,s,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Dt(i,s)}break;default:throw Error(`invalid vibration type "${t}"`)}ae.log({type:t,dataView:n}),s=E(s,n)})),await this.sendMessage([{type:"triggerVibration",data:s}],t)}sendMessage}const oe=g("BaseConnectionManager",{log:!0});class ce{static#Tt=[...ne.MessageTypes,...K.MessageTypes,...Q.MessageTypes,...re.MessageTypes,...Y.MessageTypes,...W.MessageTypes];static get TxRxMessageTypes(){return this.#Tt}static#l=[...te.MessageTypes,"batteryLevel","smp","rx","tx",...this.TxRxMessageTypes];static get MessageTypes(){return this.#l}static#Et(e){oe.assertEnumWithError(e,this.#Tt)}get id(){this.#Mt("id")}onStatusUpdated;onMessageReceived;static#Ct(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#Mt(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#Ct("type")}get type(){return this.constructor.type}#Lt(){oe.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#kt(){oe.assertWithError(this.constructor!=ce,`${this.constructor.name} must be subclassed`)}constructor(){this.#kt(),this.#Lt()}static get#m(){return["not connected","connecting","connected","disconnecting"]}static get Statuses(){return this.#m}get#It(){return ce.#m}#A="not connected";get status(){return this.#A}set status(e){oe.assertEnumWithError(e,this.#It),this.#A!=e?(oe.log(`new connection status "${e}"`),this.#A=e,this.onStatusUpdated?.(this.status),this.isConnected?this.#Wt.start():this.#Wt.stop(),"not connected"==this.#A&&(this.#Ke=null)):oe.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#xt(){oe.assertWithError(!this.isConnected,"device is already connected")}#Nt(){oe.assertWithError("connecting"!=this.status,"device is already connecting")}#_t(){oe.assertWithError(this.isConnected,"device is not connected")}#Rt(){oe.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Ut(){this.#_t(),this.#Rt()}async connect(){this.#xt(),this.#Nt(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#xt(),this.#Nt(),oe.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#_t(),this.#Rt(),this.status="disconnecting",oe.log("disconnecting from device...")}async sendSmpMessage(e){this.#Ut(),oe.log("sending smp message",e)}#Ft=[];async sendTxMessages(e,t=!0){if(this.#Ut(),e&&this.#Ft.push(...e),!t)return;oe.log("sendTxMessages",this.#Ft.slice());const s=this.#Ft.map((e=>{ce.#Et(e.type);const t=ce.TxRxMessageTypes.indexOf(e.type),s=new DataView(new ArrayBuffer(2));return s.setUint16(0,e.data?.byteLength||0,!0),E(t,s,e.data)}));if(this.#Ke)for(;s.length>0;){let e=0,t=0;s.some((s=>{if(e+s.byteLength>this.#Ke-3)return!0;t++,e+=s.byteLength}));const n=s.splice(0,t);oe.log({arrayBufferCount:t,arrayBuffersToSend:n});const i=E(...n);oe.log("sending arrayBuffer",i),await this.sendTxData(i)}else{const e=E(...s);oe.log("sending arrayBuffer",e),await this.sendTxData(e)}this.#Ft.length=0}#Ke;get mtu(){return this.#Ke}set mtu(e){this.#Ke=e}async sendTxData(e){oe.log("sendTxData",e)}parseRxMessage(e){G(e,ce.#Tt,this.#At.bind(this),null,!0)}#At(e,t){oe.log({messageType:e,dataView:t}),this.onMessageReceived?.(e,t)}#Wt=new y(this.#Ot.bind(this),5e3);#Ot(){this.isConnected||(oe.log("timer detected disconnection"),this.status="not connected")}}const he=g("bluetoothUUIDs",{log:!1});if(t){var le=require("webbluetooth").BluetoothUUID}if(e)le=window.BluetoothUUID;function ge(e){return he.assertTypeWithError(e,"string"),he.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function de(e){return le?.getCharacteristic?.(e)}function ue(e){return le?.getService?.(e)}const pe=Object.freeze({services:{deviceInformation:{uuid:ue("device_information"),characteristics:{manufacturerName:{uuid:de("manufacturer_name_string")},modelNumber:{uuid:de("model_number_string")},hardwareRevision:{uuid:de("hardware_revision_string")},firmwareRevision:{uuid:de("firmware_revision_string")},softwareRevision:{uuid:de("software_revision_string")},pnpId:{uuid:de("pnp_id")},serialNumber:{uuid:de("serial_number_string")}}},battery:{uuid:ue("battery_service"),characteristics:{batteryLevel:{uuid:de("battery_level")}}},main:{uuid:ge("0000"),characteristics:{rx:{uuid:ge("1000")},tx:{uuid:ge("1001")}}},smp:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{smp:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.smp.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),fe=pe.serviceUUIDs,me=pe.optionalServiceUUIDs,ve=[...fe,...me];function ye(e){return pe.getServiceNameFromUUID(e)}const be=[],Se=[],De=[];function we(e){return pe.getCharacteristicNameFromUUID(e)}function Te(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"rx":case"tx":case"smp":t.read=!1}switch(e){case"batteryLevel":case"rx":case"smp":t.notify=!0}switch(e){case"tx":case"smp":t.writeWithoutResponse=!0}return t}Object.entries(pe.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{fe.includes(t.uuid)&&be.push(s.uuid),Se.push(s.uuid),De.push(e)}))}),[]);const Ee=g("BluetoothConnectionManager",{log:!0});class Me extends ce{onCharacteristicValueChanged(e,t){"rx"==e?this.parseRxMessage(t):this.onMessageReceived?.(e,t)}async writeCharacteristic(e,t){Ee.log("writeCharacteristic",...arguments)}async sendSmpMessage(e){super.sendSmpMessage(...arguments),await this.writeCharacteristic("smp",e)}async sendTxData(e){super.sendTxData(...arguments),await this.writeCharacteristic("tx",e)}}const Ce=g("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var Le={bluetooth:t}}if(e)Le=window.navigator;class ke extends Me{get id(){return this.device?.id}#Pt={characteristicvaluechanged:this.#$t.bind(this)};#Vt={gattserverdisconnected:this.#Bt.bind(this)};static get isSupported(){return"bluetooth"in Le}static get type(){return"webBluetooth"}#zt;get device(){return this.#zt}set device(e){this.#zt!=e?(this.#zt&&m(this.#zt,this.#Vt),e&&f(e,this.#Vt),this.#zt=e):Ce.log("tried to assign the same BluetoothDevice")}get server(){return this.#zt?.gatt}get isConnected(){return this.server?.connected}#qt=new Map;#jt=new Map;async connect(){await super.connect();try{const t=await Le.bluetooth.requestDevice({filters:[{services:fe}],optionalServices:e?me:[]});Ce.log("got BluetoothDevice"),this.device=t,Ce.log("connecting to device...");const s=await this.device.gatt.connect();Ce.log(`connected to device? ${s.connected}`),await this.#Ht(),Ce.log("fully connected"),this.status="connected"}catch(e){Ce.error(e),this.status="not connected",this.server?.disconnect(),this.#Gt()}}async#Ht(){this.#Gt(),Ce.log("getting services...");const e=await this.server.getPrimaryServices();Ce.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),Ce.log("getting characteristics...");for(const t in e){const i=e[t];Ce.log({service:i});const a=ye(i.uuid);Ce.assertWithError(a,`no name found for service uuid "${i.uuid}"`),Ce.log(`got "${a}" service`),i._name=a,this.#qt.set(a,i),Ce.log(`getting characteristics for "${a}" service`);const r=await i.getCharacteristics();Ce.log(`got characteristics for "${a}" service`);for(const e in r){const t=r[e];Ce.log({characteristic:t});const i=we(t.uuid);Ce.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${a}" service`),Ce.log(`got "${i}" characteristic in "${a}" service`),t._name=i,this.#jt.set(i,t),f(t,this.#Pt);const o=t.properties||Te(i);o.notify&&(Ce.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(Ce.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#Jt(t))}}}#Gt(){this.device&&m(this.device,this.#Vt),this.#jt.forEach((e=>{m(e,this.#Pt)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#Gt(),this.status="not connected"}#$t(e){Ce.log("oncharacteristicvaluechanged");const t=e.target;this.#Jt(t)}#Jt(e){Ce.log("onCharacteristicValue");const t=e._name;Ce.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),Ce.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;Ce.assertWithError(s,`no data found for "${t}" characteristic`),Ce.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}async writeCharacteristic(e,t){super.writeCharacteristic(...arguments);const i=this.#jt.get(e);Ce.assertWithError(i,`${e} characteristic not found`),Ce.log("writing characteristic",i,t);const a=i.properties||Te(e);a.writeWithoutResponse?(Ce.log("writing without response"),await i.writeValueWithoutResponse(t)):(Ce.log("writing with response"),await i.writeValueWithResponse(t)),Ce.log("wrote characteristic"),a.read&&!a.notify&&(Ce.log("reading value after write..."),await i.readValue(),(s||n)&&this.#Jt(i))}#Bt(e){Ce.log("gattserverdisconnected"),this.status="not connected"}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),Ce.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(Ce.log("successfully reconnected!"),await this.#Ht(),this.status="connected"):(Ce.log("unable to reconnect"),this.status="not connected")}}const Ie=4294967296,We=9007199254740992;const xe={encode:function(e){let t,s=new ArrayBuffer(256),n=new DataView(s),i=0;function a(e){let a=s.byteLength;const r=i+e;for(;a<r;)a<<=1;if(a!==s.byteLength){const e=n;s=new ArrayBuffer(a),n=new DataView(s);const t=i+3>>2;for(let s=0;s<t;++s)n.setUint32(s<<2,e.getUint32(s<<2))}return t=e,n}function r(){i+=t}function o(e){r(a(1).setUint8(i,e))}function c(e){const t=a(e.length);for(let s=0;s<e.length;++s)t.setUint8(i+s,e[s]);r()}function h(e,t){t<24?o(e<<5|t):t<256?(o(e<<5|24),o(t)):t<65536?(o(e<<5|25),function(e){r(a(2).setUint16(i,e))}(t)):t<4294967296?(o(e<<5|26),function(e){r(a(4).setUint32(i,e))}(t)):(o(e<<5|27),function(e){const t=e%Ie,s=(e-t)/Ie,n=a(8);n.setUint32(i,s),n.setUint32(i+4,t),r()}(t))}if(function e(t){let s;const n=[];let l;if(!1===t)return o(244);if(!0===t)return o(245);if(null===t)return o(246);if(void 0===t)return o(247);switch(typeof t){case"number":if(Math.floor(t)===t){if(t>=0&&t<=We)return h(0,t);if(-We<=t&&t<0)return h(1,-(t+1))}return o(251),function(e){r(a(8).setFloat64(i,e))}(t);case"string":for(s=0;s<t.length;++s){let e=t.charCodeAt(s);e<128?n.push(e):e<2048?(n.push(192|e>>6),n.push(128|63&e)):e<55296?(n.push(224|e>>12),n.push(128|e>>6&63),n.push(128|63&e)):(e=(1023&e)<<10,e|=1023&t.charCodeAt(++s),e+=65536,n.push(240|e>>18),n.push(128|e>>12&63),n.push(128|e>>6&63),n.push(128|63&e))}return h(3,n.length),c(n);default:if(Array.isArray(t))for(l=t.length,h(4,l),s=0;s<l;++s)e(t[s]);else if(t instanceof Uint8Array)h(2,t.length),c(t);else{const n=Object.keys(t);for(l=n.length,h(5,l),s=0;s<l;++s){const i=n[s];e(i),e(t[i])}}}}(e),"slice"in s)return s.slice(0,i);const l=new ArrayBuffer(i),g=new DataView(l);for(let e=0;e<i;++e)g.setUint8(e,n.getUint8(e));return l},decode:function(e,t,s){const n=new DataView(e);let i=0;function a(e,t){return i+=e,t}function r(t){return a(t,new Uint8Array(e,i,t))}function o(){return a(1,n.getUint8(i))}function c(){return a(2,n.getUint16(i))}function h(){return a(4,n.getUint32(i))}function l(){return 255===n.getUint8(i)&&(i+=1,!0)}function g(e){if(e<24)return e;if(24===e)return o();if(25===e)return c();if(26===e)return h();if(27===e)return h()*Ie+h();if(31===e)return-1;throw new Error("Invalid length encoding")}function d(e){const t=o();if(255===t)return-1;const s=g(31&t);if(s<0||t>>5!==e)throw new Error("Invalid indefinite length element");return s}function u(e,t){for(let s=0;s<t;++s){let s=o();128&s&&(s<224?(s=(31&s)<<6|63&o(),t-=1):s<240?(s=(15&s)<<12|(63&o())<<6|63&o(),t-=2):(s=(15&s)<<18|(63&o())<<12|(63&o())<<6|63&o(),t-=3)),s<65536?e.push(s):(s-=65536,e.push(55296|s>>10),e.push(56320|1023&s))}}"function"!=typeof t&&(t=function(e){return e}),"function"!=typeof s&&(s=function(){});const p=function e(){const h=o(),p=h>>5,f=31&h;let m,v;if(7===p)switch(f){case 25:return function(){const e=new ArrayBuffer(4),t=new DataView(e),s=c(),n=32768&s;let i=31744&s;const a=1023&s;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==a)return(n?-1:1)*a*5.960464477539063e-8;return t.setUint32(0,n<<16|i<<13|a<<13),t.getFloat32(0)}();case 26:return a(4,n.getFloat32(i));case 27:return a(8,n.getFloat64(i))}if(v=g(f),v<0&&(p<2||p>6))throw new Error("Invalid length");const y=[];let b;const S={};switch(p){case 0:return v;case 1:return-1-v;case 2:if(v<0){const e=[];let t=0;for(;(v=d(p))>=0;)t+=v,e.push(r(v));const s=new Uint8Array(t);let n=0;for(m=0;m<e.length;++m)s.set(e[m],n),n+=e[m].length;return s}return r(v);case 3:if(v<0)for(;(v=d(p))>=0;)u(y,v);else u(y,v);return String.fromCharCode.apply(null,y);case 4:if(v<0)for(b=[];!l();)b.push(e());else for(b=new Array(v),m=0;m<v;++m)b[m]=e();return b;case 5:for(m=0;m<v||v<0&&!l();++m){S[e()]=e()}return S;case 6:return t(e(),v);case 7:switch(v){case 20:return!1;case 21:return!0;case 22:return null;case 23:return;default:return s(v)}}}();if(i!==e.byteLength)throw new Error("Remaining bytes");return p}},Ne=g("mcumgr",{log:!0}),_e=0,Re=1,Ue=2,Fe=3,Ae=0,Oe=1,Pe=8,$e=0,Ve=2,Be=3,ze=5,qe=0,je=1,He=5,Ge=0;class Je{constructor(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}onMessage(e){return this._messageCallback=e,this}onImageUploadNext(e){return this._imageUploadNextCallback=e,this}onImageUploadProgress(e){return this._imageUploadProgressCallback=e,this}onImageUploadFinished(e){return this._imageUploadFinishedCallback=e,this}onFileUploadNext(e){return this._fileUploadNextCallback=e,this}onFileUploadProgress(e){return this._fileUploadProgressCallback=e,this}onFileUploadFinished(e){return this._fileUploadFinishedCallback=e,this}onFileDownloadNext(e){return this._fileDownloadNextCallback=e,this}onFileDownloadProgress(e){return this._fileDownloadProgressCallback=e,this}onFileDownloadFinished(e){return this._fileDownloadFinishedCallback=e,this}_getMessage(e,t,s,n){let i=[];void 0!==n&&(i=[...new Uint8Array(xe.encode(n))]);const a=255&i.length,r=[e,0,i.length>>8,a,t>>8,255&t,this._seq,s,...i];return this._seq=(this._seq+1)%256,r}_notification(e){Ne.log("mcumgr - message received");const t=new Uint8Array(e);this._buffer=new Uint8Array([...this._buffer,...t]);const s=256*this._buffer[2]+this._buffer[3];this._buffer.length<s+8||(this._processMessage(this._buffer.slice(0,s+8)),this._buffer=this._buffer.slice(s+8))}_processMessage(e){const[t,,s,n,i,a,,r]=e,o=xe.decode(e.slice(8).buffer),c=256*s+n,h=256*i+a;return Ne.log("mcumgr - Process Message - Group: "+h+", Id: "+r+", Off: "+o.off),h===Oe&&r===je&&o.off?(this._uploadOffset=o.off,void this._uploadNext()):t===Fe&&h===Pe&&r===Ge&&o.off?(this._uploadFileOffset=o.off,void this._uploadFileNext()):t===Re&&h===Pe&&r===Ge?(this._downloadFileOffset+=o.data.length,null!=o.len&&(this._downloadFileLength=o.len),Ne.log("downloaded "+this._downloadFileOffset+" bytes of "+this._downloadFileLength),this._downloadFileLength>0&&this._fileDownloadProgressCallback({percentage:Math.floor(this._downloadFileOffset/this._downloadFileLength*100)}),this._messageCallback&&this._messageCallback({op:t,group:h,id:r,data:o,length:c}),void this._downloadFileNext()):void(this._messageCallback&&this._messageCallback({op:t,group:h,id:r,data:o,length:c}))}cmdReset(){return this._getMessage(Ue,Ae,ze)}smpEcho(e){return this._getMessage(Ue,Ae,$e,{d:e})}cmdImageState(){return this._getMessage(_e,Oe,qe)}cmdImageErase(){return this._getMessage(Ue,Oe,He,{})}cmdImageTest(e){return this._getMessage(Ue,Oe,qe,{hash:e,confirm:!1})}cmdImageConfirm(e){return this._getMessage(Ue,Oe,qe,{hash:e,confirm:!0})}_hash(e){return crypto.subtle.digest("SHA-256",e)}async _uploadNext(){if(!this._uploadImage)return;if(this._uploadOffset>=this._uploadImage.byteLength)return this._uploadIsInProgress=!1,void this._imageUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadOffset};0===this._uploadOffset&&(e.len=this._uploadImage.byteLength,e.sha=new Uint8Array(await this._hash(this._uploadImage))),this._imageUploadProgressCallback({percentage:Math.floor(this._uploadOffset/this._uploadImage.byteLength*100)});const t=this._mtu-xe.encode(e).byteLength-8-3-5;e.data=new Uint8Array(this._uploadImage.slice(this._uploadOffset,this._uploadOffset+t)),this._uploadOffset+=t;const s=this._getMessage(Ue,Oe,je,e);Ne.log("mcumgr - _uploadNext: Message Length: "+s.length),this._imageUploadNextCallback({packet:s})}async reset(){this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}async cmdUpload(e,t=0){this._uploadIsInProgress?Ne.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadOffset=0,this._uploadImage=e,this._uploadSlot=t,this._uploadNext())}async cmdUploadFile(e,t){this._uploadIsInProgress?Ne.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadFileOffset=0,this._uploadFile=e,this._uploadFilename=t,this._uploadFileNext())}async _uploadFileNext(){if(Ne.log("uploadFileNext - offset: "+this._uploadFileOffset+", length: "+this._uploadFile.byteLength),this._uploadFileOffset>=this._uploadFile.byteLength)return this._uploadIsInProgress=!1,void this._fileUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadFileOffset};0===this._uploadFileOffset&&(e.len=this._uploadFile.byteLength),e.name=this._uploadFilename,this._fileUploadProgressCallback({percentage:Math.floor(this._uploadFileOffset/this._uploadFile.byteLength*100)});const t=this._mtu-xe.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadFile.slice(this._uploadFileOffset,this._uploadFileOffset+t)),this._uploadFileOffset+=t;const s=this._getMessage(Ue,Pe,Ge,e);Ne.log("mcumgr - _uploadNext: Message Length: "+s.length),this._fileUploadNextCallback({packet:s})}async cmdDownloadFile(e,t){this._downloadIsInProgress?Ne.error("Download is already in progress."):(this._downloadIsInProgress=!0,this._downloadFileOffset=0,this._downloadFileLength=0,this._downloadRemoteFilename=e,this._downloadLocalFilename=t,this._downloadFileNext())}async _downloadFileNext(){if(this._downloadFileLength>0&&this._downloadFileOffset>=this._downloadFileLength)return this._downloadIsInProgress=!1,void this._fileDownloadFinishedCallback();const e={off:this._downloadFileOffset};0===this._downloadFileOffset&&(e.name=this._downloadRemoteFilename);const t=this._getMessage(_e,Pe,Ge,e);Ne.log("mcumgr - _downloadNext: Message Length: "+t.length),this._fileDownloadNextCallback({packet:t})}async imageInfo(e){const t={},s=new Uint8Array(e);if(s.length<32)throw new Error("Invalid image (too short file)");if(61!==s[0]||184!==s[1]||243!==s[2]||150!==s[3])throw new Error("Invalid image (wrong magic bytes)");if(0!==s[4]||0!==s[5]||0!==s[6]||0!==s[7])throw new Error("Invalid image (wrong load address)");const n=s[8]+256*s[9];if(0!==s[10]||0!==s[11])throw new Error("Invalid image (wrong protected TLV area size)");const i=s[12]+256*s[13]+65536*s[14]+s[15]*2**24;if(t.imageSize=i,s.length<i+n)throw new Error("Invalid image (wrong image size)");if(0!==s[16]||0!==s[17]||0!==s[18]||0!==s[19])throw new Error("Invalid image (wrong flags)");const a=`${s[20]}.${s[21]}.${s[22]+256*s[23]}`;return t.version=a,t.hash=[...new Uint8Array(await this._hash(e.slice(0,i+32)))].map((e=>e.toString(16).padStart(2,"0"))).join(""),t}}const Qe=g("FirmwareManager",{log:!0});class Ze{sendMessage;constructor(){this.#Qt()}static#l=["smp"];static get MessageTypes(){return this.#l}get messageTypes(){return Ze.MessageTypes}static#g=[...this.#l,"firmwareImages","firmwareUploadProgress","firmwareUploadComplete","firmwareStatus"];static get EventTypes(){return this.#g}get eventTypes(){return Ze.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}parseMessage(e,t){if(Qe.log({messageType:e}),"smp"!==e)throw Error(`uncaught messageType ${e}`);this.#Zt._notification(Array.from(new Uint8Array(t.buffer))),this.#d({type:"smp"})}async uploadFirmware(e){Qe.log("uploadFirmware",e);const t=this.waitForEvent("firmwareUploadComplete");await this.getImages();const s=await k(e),n=await this.#Zt.imageInfo(s);console.log({imageInfo:n}),this.#Zt.cmdUpload(s,1),this.#P("uploading"),await t}static#m=["idle","uploading","uploaded","pending","testing","erasing"];static get Statuses(){return this.#m}#A="idle";get status(){return this.#A}#P(e){Qe.assertEnumWithError(e,Ze.Statuses),this.#A!=e?(this.#A=e,Qe.log({firmwareStatus:this.#A}),this.#d({type:"firmwareStatus",message:{firmwareStatus:this.#A}})):Qe.log(`redundant firmwareStatus assignment "${e}"`)}#Kt;get images(){return this.#Kt}#Xt(){Qe.assertWithError(this.#Kt,"didn't get imageState")}async getImages(){const e=this.waitForEvent("firmwareImages");Qe.log("getting firmware image state..."),this.sendMessage(Uint8Array.from(this.#Zt.cmdImageState()).buffer),await e}async testImage(){if(this.#Xt(),this.#Kt.length<2)return void Qe.log("image 1 not found");if(1==this.#Kt[1].pending)return void Qe.log("image 1 is already pending");if(this.#Kt[1].empty)return void Qe.log("image 1 is empty");const e=this.waitForEvent("smp");Qe.log("testing firmware image..."),this.sendMessage(Uint8Array.from(this.#Zt.cmdImageTest(this.#Kt[1].hash)).buffer),await e}async eraseImage(){this.#Xt();const e=this.waitForEvent("smp");Qe.log("erasing image..."),this.sendMessage(Uint8Array.from(this.#Zt.cmdImageErase()).buffer),this.#P("erasing"),await e,await this.getImages()}async confirmImage(){if(this.#Xt(),!0===this.#Kt[0].confirmed)return void Qe.log("image 0 is already confirmed");const e=this.waitForEvent("smp");Qe.log("confirming image..."),this.sendMessage(Uint8Array.from(this.#Zt.cmdImageConfirm(this.#Kt[0].hash)).buffer),await e}async echo(e){Qe.assertTypeWithError(e,"string");const t=this.waitForEvent("smp");Qe.log("sending echo..."),this.sendMessage(Uint8Array.from(this.#Zt.smpEcho(e)).buffer),await t}async reset(){const e=this.waitForEvent("smp");Qe.log("resetting..."),this.sendMessage(Uint8Array.from(this.#Zt.cmdReset()).buffer),await e}#Ke;get mtu(){return this.#Ke}set mtu(e){this.#Ke=e,this.#Zt._mtu=this.#Ke}#Zt=new Je;#Qt(){this.#Zt.onMessage(this.#Yt.bind(this)),this.#Zt.onFileDownloadNext(this.#es),this.#Zt.onFileDownloadProgress(this.#ts.bind(this)),this.#Zt.onFileDownloadFinished(this.#ss.bind(this)),this.#Zt.onFileUploadNext(this.#ns.bind(this)),this.#Zt.onFileUploadProgress(this.#is.bind(this)),this.#Zt.onFileUploadFinished(this.#as.bind(this)),this.#Zt.onImageUploadNext(this.#rs.bind(this)),this.#Zt.onImageUploadProgress(this.#os.bind(this)),this.#Zt.onImageUploadFinished(this.#cs.bind(this))}#Yt({op:e,group:t,id:s,data:n,length:i}){switch(Qe.log("onMcuMessage",...arguments),t){case Ae:switch(s){case $e:Qe.log(`echo "${n.r}"`);break;case Ve:Qe.table(n.tasks);break;case Be:Qe.log(n)}break;case Oe:if(s===qe)this.#hs(n);break;default:throw Error(`uncaught mcuMessage group ${t}`)}}#es(){Qe.log("onMcuFileDownloadNext",...arguments)}#ts(){Qe.log("onMcuFileDownloadProgress",...arguments)}#ss(){Qe.log("onMcuFileDownloadFinished",...arguments)}#ns(){Qe.log("onMcuFileUploadNext",...arguments)}#is(){Qe.log("onMcuFileUploadProgress",...arguments)}#as(){Qe.log("onMcuFileUploadFinished",...arguments)}#rs({packet:e}){Qe.log("onMcuImageUploadNext",...arguments),this.sendMessage(Uint8Array.from(e).buffer)}#os({percentage:e}){const t=e/100;Qe.log("onMcuImageUploadProgress",...arguments),this.#d({type:"firmwareUploadProgress",message:{firmwareUploadProgress:t}})}async#cs(){Qe.log("onMcuImageUploadFinished",...arguments),await this.getImages(),this.#d({type:"firmwareUploadProgress",message:{firmwareUploadProgress:100}}),this.#d({type:"firmwareUploadComplete"})}#hs(e){if(!e.images)return void Qe.log("no images found");this.#Kt=e.images,Qe.log("images",this.#Kt);let t="idle";2==this.#Kt.length&&(this.#Kt[1].bootable?this.#Kt[0].confirmed?0==this.#Kt[1].pending?(Qe.log("Slot 1 has a valid image. run testImage() to test it or upload a different image."),t="uploaded"):(Qe.log("reset to upload to the new firmware image"),t="pending"):(Qe.log('Slot 0 has a valid image. Click "Confirm Image" to confirm it or wait and the device will swap images back.'),t="testing"):Qe.warn('Slot 1 has a invalid image. Click "Erase Image" to erase it or upload a different image')),1==this.#Kt.length&&(this.#Kt.push({slot:1,empty:!0,version:"Empty",pending:!1,confirmed:!1,bootable:!1}),Qe.log("Select a firmware upload image to upload to slot 1.")),this.#P(t),this.#d({type:"firmwareImages",message:{firmwareImages:this.#Kt}})}}const Ke=g("Device",{log:!0});class Xe{get id(){return this.#ls?.id}constructor(){this.#gs.eventDispatcher=this.#ds,this.#us.sendMessage=this.#ps.bind(this),this.#us.eventDispatcher=this.#ds,this.#fs.sendMessage=this.#ps.bind(this),this.#fs.eventDispatcher=this.#ds,this.#ms.sendMessage=this.#ps.bind(this),this.#ms.eventDispatcher=this.#ds,this.#vs.sendMessage=this.#ps.bind(this),this.#ys.sendMessage=this.#ps.bind(this),this.#ys.eventDispatcher=this.#ds,this.#bs.sendMessage=this.#ps.bind(this),this.#bs.eventDispatcher=this.#ds,this.#Ss.sendMessage=this.#Ds.bind(this),this.#Ss.eventDispatcher=this.#ds,this.addEventListener("getMtu",(()=>{this.#Ss.mtu=this.mtu,this.#bs.mtu=this.mtu,this.connectionManager.mtu=this.mtu})),this.addEventListener("getType",(()=>{Xe.#ws&&Xe.#Ts(this)})),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{Xe.#Es(this)}))}static get#Ms(){return ke}static#g=["batteryLevel","connectionStatus",...ce.Statuses,"isConnected","connectionMessage",...te.EventTypes,...ne.EventTypes,...K.EventTypes,...Q.EventTypes,...W.EventTypes,...Y.EventTypes,...Ze.EventTypes];static get EventTypes(){return this.#g}get eventTypes(){return Xe.#g}#ds=new p(this,this.eventTypes);addEventListener(e,t,s){this.#ds.addEventListener(e,t,s)}#d(e){this.#ds.dispatchEvent(e)}removeEventListener(e,t){return this.#ds.removeEventListener(e,t)}waitForEvent(e){return this.#ds.waitForEvent(e)}#ls;get connectionManager(){return this.#ls}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Cs.bind(this),e.onMessageReceived=this.#Ls.bind(this)),this.#ls=e,Ke.log("assigned new connectionManager",this.#ls)):Ke.log("same connectionManager is already assigned")}async#ps(e,t){await(this.#ls?.sendTxMessages(...arguments))}async connect(){return this.connectionManager||(this.connectionManager=new Xe.#Ms),this.#ks(),this.connectionManager.connect()}#Is=!1;get isConnected(){return this.#Is}#_t(){Ke.assertWithError(this.isConnected,"not connected")}static#Ws=["getMtu","getName","getType","getCurrentTime","getSensorConfiguration","getSensorScalars","getPressurePositions","maxFileLength","getFileLength","getFileChecksum","getFileTransferType","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];get#xs(){return Xe.#Ws}get#Ns(){return this.#xs.every((e=>this.latestConnectionMessage.has(e)))}#_s(){const e=this.#xs.map((e=>({type:e})));this.#ps(e)}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#ks(),this.connectionManager?.reconnect()}static#Rs=!1;static get ReconnectOnDisconnection(){return this.#Rs}static set ReconnectOnDisconnection(e){Ke.assertTypeWithError(e,"boolean"),this.#Rs=e}#Us=Xe.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Us}set reconnectOnDisconnection(e){Ke.assertTypeWithError(e,"boolean"),this.#Us=e}#Fs;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#_t(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#ls?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#ls.status;default:return"not connected"}}#Cs(e){Ke.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(Ke.log("starting reconnect interval..."),this.#Fs=setInterval((()=>{Ke.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Fs&&(Ke.log("clearing reconnect interval"),clearInterval(this.#Fs),this.#Fs=void 0),this.#Ot(),"connected"!=e||this.#Is||this.#_s()}#As(e=!1){this.#d({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#d({type:this.connectionStatus}),e&&this.#d({type:"isConnected",message:{isConnected:this.isConnected}})}#Ot(){switch(this.#Is=this.connectionManager?.isConnected&&this.#Ns&&this.#us.isCurrentTimeSet,this.connectionStatus){case"connected":this.#Is&&this.#As(!0);break;case"not connected":this.#As(!0);break;default:this.#As(!1)}}#ks(){this.latestConnectionMessage.clear(),this.#us.clear()}#Ls(e,t){if(Ke.log({messageType:e,dataView:t}),"batteryLevel"===e){const e=t.getUint8(0);Ke.log("received battery level",{batteryLevel:e}),this.#Os(e)}else if(this.#bs.messageTypes.includes(e))this.#bs.parseMessage(e,t);else if(this.#ys.messageTypes.includes(e))this.#ys.parseMessage(e,t);else if(this.#ms.messageTypes.includes(e))this.#ms.parseMessage(e,t);else if(this.#Ss.messageTypes.includes(e))this.#Ss.parseMessage(e,t);else if(this.#gs.messageTypes.includes(e))this.#gs.parseMessage(e,t);else if(this.#us.messageTypes.includes(e))this.#us.parseMessage(e,t);else{if(!this.#fs.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#fs.parseMessage(e,t)}this.latestConnectionMessage.set(e,t),this.#d({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#Ns&&this.#Ot()}latestConnectionMessage=new Map;#gs=new te;get deviceInformation(){return this.#gs.information}#Ps=null;get batteryLevel(){return this.#Ps}#Os(e){Ke.assertTypeWithError(e,"number"),this.#Ps!=e?(this.#Ps=e,Ke.log({updatedBatteryLevel:this.#Ps}),this.#d({type:"batteryLevel",message:{batteryLevel:this.#Ps}})):Ke.log(`duplicate batteryLevel assignment ${e}`)}#us=new ne;static get MinNameLength(){return ne.MinNameLength}static get MaxNameLength(){return ne.MaxNameLength}get name(){return this.#us.name}async setName(e){await this.#us.setName(e)}static get Types(){return ne.Types}get type(){return this.#us.type}async setType(e){await this.#us.setType(e)}static get InsoleSides(){return ne.InsoleSides}get isInsole(){return this.#us.isInsole}get insoleSide(){return this.#us.insoleSide}get mtu(){return this.#us.mtu}static get SensorTypes(){return Q.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#fs=new K;get sensorConfiguration(){return this.#fs.configuration}static get MaxSensorRate(){return K.MaxSensorRate}static get SensorRateStep(){return K.SensorRateStep}async setSensorConfiguration(e){await this.#fs.setConfiguration(e)}async clearSensorConfiguration(){return this.#fs.clearSensorConfiguration()}static#$s=!0;static get ClearSensorConfigurationOnLeave(){return this.#$s}static set ClearSensorConfigurationOnLeave(e){Ke.assertTypeWithError(e,"boolean"),this.#$s=e}#Vs=Xe.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Vs}set clearSensorConfigurationOnLeave(e){Ke.assertTypeWithError(e,"boolean"),this.#Vs=e}static#Bs=8;static get DefaultNumberOfPressureSensors(){return this.#Bs}get numberOfPressureSensors(){return this.#ms.pressureSensorDataManager.numberOfSensors}#ms=new Q;resetPressureRange(){this.#ms.pressureSensorDataManager.resetRange()}#vs=new re;static get VibrationLocations(){return re.Locations}static get VibrationTypes(){return re.Types}static get VibrationWaveformEffects(){return re.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return re.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return re.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return re.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return re.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return re.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return re.MaxNumberOfWaveformSegments}async triggerVibration(e,t){this.#vs.triggerVibration(e,t)}#bs=new W;static get FileTypes(){return W.Types}get maxFileLength(){return this.#bs.maxLength}async sendFile(e,t){const s=this.waitForEvent("fileTransferComplete");this.#bs.send(e,t),await s}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#bs.receive(e),await t}get fileTransferStatus(){return this.#bs.status}cancelFileTransfer(){this.#bs.cancel()}static get TfliteSensorTypes(){return Y.SensorTypes}#ys=new Y;get tfliteName(){return this.#ys.name}setTfliteName(e){return this.#ys.setName(e)}static get TfliteTasks(){return Y.Tasks}get tfliteTask(){return this.#ys.task}setTfliteTask(e){return this.#ys.setTask(e)}get tfliteSampleRate(){return this.#ys.sampleRate}setTfliteSampleRate(e){return this.#ys.setSampleRate(e)}get tfliteSensorTypes(){return this.#ys.sensorTypes}get allowedTfliteSensorTypes(){return this.sensorTypes.filter((e=>Y.SensorTypes.includes(e)))}setTfliteSensorTypes(e){return this.#ys.setSensorTypes(e)}get tfliteIsReady(){return this.#ys.isReady}get tfliteInferencingEnabled(){return this.#ys.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#ys.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#ys.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#ys.captureDelay}async setTfliteCaptureDelay(e){return this.#ys.setCaptureDelay(e)}get tfliteThreshold(){return this.#ys.threshold}async setTfliteThreshold(e){return this.#ys.setThreshold(e)}#Ss=new Ze;#Ds(e){this.#ls.sendSmpMessage(e)}async uploadFirmware(e){return this.#Ss.uploadFirmware(e)}async reset(){return await this.#Ss.reset(),this.#ls.disconnect()}get firmwareStatus(){return this.#Ss.status}async getFirmwareImages(){return this.#Ss.getImages()}get firmwareImages(){return this.#Ss.images}async eraseFirmwareImage(){return this.#Ss.eraseImage()}async confirmFirmwareImage(){return this.#Ss.confirmImage()}async testFirmwareImage(){return this.#Ss.testImage()}static#zs=[];static get ConnectedDevices(){return this.#zs}static#ws=!1;static get UseLocalStorage(){return this.#ws}static set UseLocalStorage(e){this.#qs(),Ke.assertTypeWithError(e,"boolean"),this.#ws=e,this.#ws&&!this.#js&&this.#Hs()}static#Gs={devices:[]};static#js;static get CanUseLocalStorage(){return e&&window.localStorage}static#qs(){Ke.assertWithError(e,"localStorage is only available in the browser"),Ke.assertWithError(window.localStorage,"localStorage not found")}static#Js="BS.Device";static#Qs(){this.#qs(),localStorage.setItem(this.#Js,JSON.stringify(this.#js))}static async#Hs(){this.#qs();let e=localStorage.getItem(this.#Js);if("string"!=typeof e)return Ke.log("no info found in localStorage"),this.#js=Object.assign({},this.#Gs),void this.#Qs();try{const t=JSON.parse(e);Ke.log({configuration:t}),this.#js=t,this.CanGetDevices&&await this.GetDevices()}catch(e){Ke.error(e)}}static#Ts(e){if("webBluetooth"!=e.connectionType)return void Ke.log("localStorage is only for webBluetooth devices");this.#qs();const t=this.#js.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#js.devices[t].type=e.type,this.#Qs())}static#Zs=[];static get AvailableDevices(){return this.#Zs}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void Ke.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void Ke.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void Ke.warn("bluetooth.getDevices() is not available in this browser");this.#js||this.#Hs();const t=this.#js;if(!t.devices||0==t.devices.length)return void Ke.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return Ke.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#Zs.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const a=new Xe,r=new ke;r.device=e,e.name&&a.#us.updateName(e.name),a.#us.updateType(s.type),a.connectionManager=r,this.AvailableDevices.push(a)})),this.#Ks(),this.AvailableDevices}static#Xs=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#Xs}static#Ys=new p(this,this.#Xs);static AddEventListener(e,t,s){this.#Ys.addEventListener(e,t,s)}static#en(e){this.#Ys.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Ys.removeEventListener(e,t)}static#Es(e){if(e.isConnected)if(this.#zs.includes(e))Ke.log("device already included");else{if(Ke.log("adding device",e),this.#zs.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#js.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#js.devices.push(t):this.#js.devices[s]=t,this.#Qs()}this.#en({type:"deviceConnected",message:{device:e}}),this.#en({type:"deviceIsConnected",message:{device:e}})}else this.#zs.includes(e)?(Ke.log("removing device",e),this.#zs.splice(this.#zs.indexOf(e),1),this.#en({type:"deviceDisconnected",message:{device:e}}),this.#en({type:"deviceIsConnected",message:{device:e}})):Ke.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));Ke.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#Ks()}}static#Ks(){Ke.log({AvailableDevices:this.AvailableDevices}),this.#en({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new Xe;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const Ye=g("BaseScanner");class et{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#Lt(){Ye.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#kt(){Ye.assertWithError(this.constructor!=et,`${this.constructor.name} must be subclassed`)}constructor(){this.#kt(),this.#Lt(),f(this,this.#tn)}#tn={discoveredDevice:this.#sn.bind(this),isScanning:this.#nn.bind(this)};static#g=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#g}get eventTypes(){return et.#g}#ds=new p(this,this.eventTypes);addEventListener(e,t,s){this.#ds.addEventListener(e,t,s)}dispatchEvent(e){this.#ds.dispatchEvent(e)}removeEventListener(e,t){return this.#ds.removeEventListener(e,t)}get isAvailable(){return!1}#in(){Ye.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#an(){Ye.assertWithError(this.isScanning,"not scanning")}#rn(){Ye.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#in(),this.#rn()}stopScan(){this.#an()}#nn(){this.isScanning?(this.#on={},this.#cn={}):this.#hn.stop()}#on={};get discoveredDevices(){return this.#on}get discoveredDevicesArray(){return Object.values(this.#on).sort(((e,t)=>this.#cn[e.id]-this.#cn[t.id]))}#ln(e){Ye.assertWithError(this.#on[e],`no discovered device with id "${e}"`)}#sn(e){const t=e.message.discoveredDevice;this.#on[t.id]=t,this.#cn[t.id]=Date.now(),this.#hn.start()}#cn={};static#gn=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#gn}get#dn(){return et.DiscoveredDeviceExpirationTimeout}#hn=new y(this.#un.bind(this),1e3);#un(){const e=Object.entries(this.#on);if(0==e.length)return void this.#hn.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#cn[e];t-n>this.#dn&&(Ye.log("discovered device timeout"),delete this.#on[e],delete this.#cn[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#in()}get canReset(){return!1}reset(){Ye.log("resetting...")}}const tt=g("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class st extends Me{get id(){return this.#pn?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#pn?.state}async connect(){await super.connect(),await this.#pn.connectAsync()}async disconnect(){await super.disconnect(),await this.#pn.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);tt.log({characteristicName:s});const n=this.#jt.get(s);tt.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);tt.log("writing data",i);await n.writeAsync(i,!0),n.properties.includes("read")&&await n.readAsync()}async writeCharacteristic(e,t){const s=this.#jt.get(e);tt.assertWithError(s,`no characteristic found with name "${e}"`);const n=Buffer.from(t);tt.log("writing data",n);await s.writeAsync(n,!0),s.properties.includes("read")&&await s.readAsync()}get canReconnect(){return this.#pn.connectable}async reconnect(){await super.reconnect(),tt.log("attempting to reconnect..."),this.connect()}#pn;get noblePeripheral(){return this.#pn}set noblePeripheral(e){tt.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(tt.log("newNoblePeripheral",e.id),this.#pn&&(m(this.#pn,this.#fn),delete this.#pn._connectionManager),e&&(e._connectionManager=this,f(e,this.#fn)),this.#pn=e):tt.log("attempted to assign duplicate noblePeripheral")}#fn={connect:this.#mn,disconnect:this.#vn,rssiUpdate:this.#yn,servicesDiscover:this.#bn};async#mn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){tt.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#pn.discoverServicesAsync(ve),await this.#Sn()}async#vn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){tt.log("onNoblePeripheralDisconnect",e.id),await this.#Sn()}async#Sn(){switch(tt.log(`noblePeripheral ${this.id} state ${this.#pn.state}`),this.#pn.state){case"connected":case"connecting":break;case"disconnected":this.#Gt(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":tt.error("noblePeripheral error");break;default:tt.log(`uncaught noblePeripheral state ${this.#pn.state}`)}}#Gt(){tt.log("removing noblePeripheral eventListeners"),this.#qt.forEach((e=>{m(e,this.#Dn)})),this.#qt.clear(),this.#jt.forEach((e=>{m(e,this.#wn)})),this.#jt.clear()}async#yn(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){tt.log("onNoblePeripheralRssiUpdate",e.id,t)}async#bn(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){tt.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];tt.log("service",s.uuid);const n=ye(s.uuid);tt.assertWithError(n,`no name found for service uuid "${s.uuid}"`),tt.log({serviceName:n}),this.#qt.set(n,s),s._name=n,s._connectionManager=this,f(s,this.#Dn),await s.discoverCharacteristicsAsync()}}#qt=new Map;#Dn={characteristicsDiscover:this.#Tn};async#Tn(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){tt.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];tt.log("characteristic",s.uuid);const n=we(s.uuid);tt.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),tt.log({characteristicName:n}),this.#jt.set(n,s),s._name=n,s._connectionManager=this,f(s,this.#wn),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#En&&(this.status="connected")}#wn={data:this.#Mn,write:this.#Cn,notify:this.#Ln};#jt=new Map;get#En(){return De.every((e=>this.#jt.has(e)))}#Mn(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){tt.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(M(t)),i=e._name;tt.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#Cn(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){tt.log("onNobleCharacteristicWrite",e.uuid)}#Ln(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){tt.log("onNobleCharacteristicNotify",e.uuid,t)}}const nt=g("NobleScanner",{log:!0});let it=!1;if(t){var at=require("@abandonware/noble");it=!0}class rt extends et{static get isSupported(){return it}#kn=!1;get#In(){return this.#kn}set#In(e){nt.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#kn=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):nt.log("duplicate isScanning assignment")}get isScanning(){return this.#In}#Wn="unknown";get#xn(){return this.#Wn}set#xn(e){nt.assertTypeWithError(e,"string"),this.#xn!=e?(this.#Wn=e,nt.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):nt.log("duplicate nobleState assignment")}#Nn={scanStart:this.#_n.bind(this),scanStop:this.#Rn.bind(this),stateChange:this.#Un.bind(this),discover:this.#Fn.bind(this)};#_n(){nt.log("OnNobleScanStart"),this.#In=!0}#Rn(){nt.log("OnNobleScanStop"),this.#In=!1}#Un(e){nt.log("onNobleStateChange",e),this.#xn=e}#Fn(e){let t;nt.log("onNobleDiscover",e.id),this.#An[e.id]||(e._scanner=this,this.#An[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=Xe.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),f(at,this.#Nn),f(this,this.#On)}get isAvailable(){return"poweredOn"==this.#xn}startScan(){super.startScan(),at.startScanningAsync(fe,!0)}stopScan(){super.stopScan(),at.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),at.reset()}#On={expiredDiscoveredDevice:this.#Pn.bind(this)};#Pn(e){const t=e.message.discoveredDevice;this.#An[t.id]&&delete this.#An[t.id]}#An={};#$n(e){nt.assertTypeWithError(e,"string"),nt.assertWithError(this.#An[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#$n(e);const t=this.#An[e];nt.log("connecting to discoveredDevice...",e);let s=Xe.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#Vn(t),await s.connect())}#Vn(e){const t=new Xe,s=new st;return s.noblePeripheral=e,t.connectionManager=s,t}}const ot=g("Scanner",{log:!1});let ct;rt.isSupported?(ot.log("using NobleScanner"),ct=new rt):ot.log("Scanner not available");var ht=ct;const lt=g("DevicePairPressureSensorDataManager",{log:!0});class gt{static get Sides(){return Xe.InsoleSides}get sides(){return Xe.InsoleSides}#Bn={};#Q=new A;resetPressureRange(){this.#Q.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(lt.log({pressure:t,insoleSide:s}),this.#Bn[s]=t,this.#zn)return this.#qn();lt.log("doesn't have all pressure data yet...")}get#zn(){return this.sides.every((e=>e in this.#Bn))}#qn(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Bn[t].rawSum,e.normalizedSum+=this.#Bn[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Bn[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#Q.updateAndGetNormalization(e.center)),lt.log({devicePairPressure:e}),e}}const dt=g("DevicePairSensorDataManager",{log:!0});class ut{static get Sides(){return Xe.InsoleSides}get sides(){return Xe.InsoleSides}#jn={};pressureSensorDataManager=new gt;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(dt.log({sensorType:s,timestamp:t,event:e}),this.#jn[s]||(this.#jn[s]={}),this.#jn[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else dt.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#jn[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else dt.log("no value received")}onDataReceived}const pt=g("DevicePair",{log:!0});class ft{constructor(){this.#ms.onDataReceived=this.#Hn.bind(this)}static#g=["isConnected","pressure",...Xe.EventTypes.map((e=>`device${d(e)}`))];static get EventTypes(){return this.#g}get eventTypes(){return ft.#g}#ds=new p(this,this.eventTypes);addEventListener(e,t,s){this.#ds.addEventListener(e,t,s)}#d(e){this.#ds.dispatchEvent(e)}removeEventListener(e,t){return this.#ds.removeEventListener(e,t)}static get Sides(){return Xe.InsoleSides}get sides(){return ft.Sides}#Gn;get left(){return this.#Gn}#Jn;get right(){return this.#Jn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#_t(){pt.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void pt.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&m(s,this.#Qn),f(e,this.#Qn),t){case"left":this.#Gn=e;break;case"right":this.#Jn=e}return pt.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#d({type:"isConnected",message:{isConnected:this.isConnected}}),this.#d({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}pt.log("device already assigned")}#Qn={connectionStatus:this.#Zn.bind(this),isConnected:this.#Kn.bind(this),sensorData:this.#Xn.bind(this),getSensorConfiguration:this.#Zn.bind(this)};#Zn(e){this.#d({type:`device${d(e.type)}`,message:{...e.message,device:e.target}})}#Kn(e){this.#Zn(e),this.#d({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#ms=new ut;#Xn(e){this.#Zn(e),this.#d({type:`device${d(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#ms.onDeviceSensorData(e)}#Hn(e,t){pt.log({sensorType:e,sensorData:t}),this.#d({type:e,message:t})}resetPressureRange(){this.#ms.resetPressureRange()}async triggerVibration(e,t){const s=this.sides.map((s=>this[s]?.triggerVibration(e,t))).filter(Boolean);return Promise.allSettled(s)}static#Yn=new ft;static get shared(){return this.#Yn}static{Xe.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Yn.assignInsole(t)}))}}const mt=g("ServerUtils",{log:!0}),vt=3e7;function yt(e,...t){mt.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=E(...t.data),n=s.byteLength;mt.assertEnumWithError(t.type,e);return E(e.indexOf(t.type),Uint16Array.from([n]),s)}));return mt.log("messageBuffers",...s),E(...s)}const bt=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function St(...e){return yt(bt,...e)}function Dt(...e){return mt.log("createDeviceMessage",...e),yt(Xe.EventTypes,...e)}function wt(...e){return yt(ce.MessageTypes,...e)}const Tt=St("ping"),Et=St("pong");St("isScanningAvailable"),St("isScanning"),St("startScan"),St("stopScan");const Mt=St("discoveredDevices"),Ct=g("WebSocketClientConnectionManager",{log:!0});class Lt extends ce{static get isSupported(){return e}static get type(){return"webSocketClient"}#ei;get id(){return this.#ei}set id(e){Ct.assertTypeWithError(e,"string"),this.#ei!=e?this.#ei=e:Ct.log("redundant id assignment")}#Is=!1;get isConnected(){return this.#Is}set isConnected(e){Ct.assertTypeWithError(e,"boolean"),this.#Is!=e?(this.#Is=e,this.status=this.#Is?"connected":"not connected",this.isConnected&&this.#ti()):Ct.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}get canReconnect(){return!0}async reconnect(){await super.reconnect(),Ct.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;async sendSmpMessage(e){super.sendSmpMessage(...arguments),this.sendWebSocketMessage({type:"smp",data:e})}async sendTxData(e){super.sendTxData(...arguments),this.sendWebSocketMessage({type:"tx",data:e})}static#si=[...te.MessageTypes,"batteryLevel"];get#ni(){return Lt.#si}#ti(){this.sendWebSocketMessage(...this.#ni)}onWebSocketMessage(e){Ct.log({dataView:e}),G(e,Xe.EventTypes,this.#ii.bind(this),null,!0)}#ii(e,t){let s=0;switch(e){case"isConnected":const n=Boolean(t.getUint8(s++));Ct.log({isConnected:n}),this.isConnected=n;break;case"rx":this.parseRxMessage(t);break;default:this.onMessageReceived(e,t)}}}const kt=g("WebSocketClient",{log:!0});class It{static#g=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#g}get eventTypes(){return It.#g}#ds=new p(this,this.eventTypes);addEventListener(e,t,s){this.#ds.addEventListener(e,t,s)}#d(e){this.#ds.dispatchEvent(e)}removeEventListener(e,t){return this.#ds.removeEventListener(e,t)}#ai;get webSocket(){return this.#ai}set webSocket(e){this.#ai!=e?(kt.log("assigning webSocket",e),this.#ai&&m(this.#ai,this.#ri),f(e,this.#ri),this.#ai=e,kt.log("assigned webSocket")):kt.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#oi(){kt.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ci(){kt.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ci(),this.#hi="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#oi(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#hi="disconnecting",this.webSocket.close()}reconnect(){this.#ci(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#Rs=!0;static get ReconnectOnDisconnection(){return this.#Rs}static set ReconnectOnDisconnection(e){kt.assertTypeWithError(e,"boolean"),this.#Rs=e}#Us=It.#Rs;get reconnectOnDisconnection(){return this.#Us}set reconnectOnDisconnection(e){kt.assertTypeWithError(e,"boolean"),this.#Us=e}#li(e){this.#oi(),this.#ai.send(e)}#gi(...e){this.#li(St(...e))}#ri={open:this.#di.bind(this),message:this.#ui.bind(this),close:this.#pi.bind(this),error:this.#fi.bind(this)};#di(e){kt.log("webSocket.open",e),this.#mi.start(),this.#hi="connected"}async#ui(e){kt.log("webSocket.message",e),this.#mi.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#vi(s)}#pi(e){kt.log("webSocket.close",e),this.#hi="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#mi.stop(),this.#Us&&setTimeout((()=>{this.reconnect()}),3e3)}#fi(e){kt.log("webSocket.error",e)}#yi="not connected";get#hi(){return this.#yi}set#hi(e){switch(kt.assertTypeWithError(e,"string"),kt.log({newConnectionStatus:e}),this.#yi=e,this.#d({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#d({type:this.connectionStatus}),e){case"connected":case"not connected":this.#d({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#gi("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#bi=!1,this.#In=!1)}}get connectionStatus(){return this.#hi}#vi(e){kt.log("parseMessage",{dataView:e}),G(e,bt,this.#Si.bind(this),null,!0)}#Si(e,t){let s=0;switch(e){case"ping":this.#Di();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(s++));kt.log({isScanningAvailable:e}),this.#bi=e}break;case"isScanning":{const e=Boolean(t.getUint8(s++));kt.log({isScanning:e}),this.#In=e}break;case"discoveredDevice":{const{string:e}=H(t,s);kt.log({discoveredDeviceString:e});const n=JSON.parse(e);kt.log({discoveredDevice:n}),this.#sn(n)}break;case"expiredDiscoveredDevice":{const{string:e}=H(t,s);this.#Pn(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=H(t,s);kt.log({connectedDeviceIdStrings:e});const n=JSON.parse(e);kt.log({connectedDeviceIds:n}),this.#wi(n)}break;case"deviceMessage":{const{string:e,byteOffset:n}=H(t,s);s=n;const i=this.#Ti[e];kt.assertWithError(i,`no device found for id ${e}`);const a=i.connectionManager,r=L(t,s);a.onWebSocketMessage(r)}break;default:kt.error(`uncaught messageType "${e}"`)}}#mi=new y(this.#Ei.bind(this),vt);#Ei(){this.#gi("ping")}#Di(){this.#gi("pong")}#Mi=!1;get#bi(){return this.#Mi}set#bi(e){kt.assertTypeWithError(e,"boolean"),this.#Mi=e,this.#d({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Ci()}get isScanningAvailable(){return this.#bi}#Li(){this.#oi(),kt.assertWithError(this.isScanningAvailable,"scanning is not available")}#ki(){this.#gi("isScanningAvailable")}#kn=!1;get#In(){return this.#kn}set#In(e){kt.assertTypeWithError(e,"boolean"),this.#kn=e,this.#d({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#In}#Ci(){this.#gi("isScanning")}#an(){kt.assertWithError(this.isScanning,"is not scanning")}#rn(){kt.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#rn(),this.#gi("startScan")}stopScan(){this.#an(),this.#gi("stopScan")}toggleScan(){this.#Li(),this.isScanning?this.stopScan():this.startScan()}#on={};get discoveredDevices(){return this.#on}#sn(e){kt.log({discoveredDevice:e}),this.#on[e.id]=e,this.#d({type:"discoveredDevice",message:{discoveredDevice:e}})}#Ii(){this.#li(Mt)}#Pn(e){kt.log({expiredDeviceId:e});const t=this.#on[e];t?(kt.log({expiredDiscoveredDevice:t}),delete this.#on[e],this.#d({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):kt.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#Wi(e)}#Wi(e){this.#oi(),kt.assertTypeWithError(e,"string");const t=this.#xi(e);return t.connect(),t}#Ni(e){this.#li(this.#_i(e))}#_i(e){return St({type:"connectToDevice",data:e})}#Vn(e){const t=new Xe,s=new Lt;return s.id=e,s.sendWebSocketMessage=this.#Ri.bind(this,e),s.sendWebSocketConnectMessage=this.#Ni.bind(this,e),s.sendWebSocketDisconnectMessage=this.#Ui.bind(this,e),t.connectionManager=s,t}#xi(e){let t=this.#Ti[e];return t||(t=this.#Vn(e),this.#Ti[e]=t),t}#wi(e){kt.log({deviceIds:e}),e.forEach((e=>{this.#xi(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#Fi(e)}#Fi(e){this.#oi(),kt.assertTypeWithError(e,"string");const t=this.devices[e];return kt.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#Ui(e){this.#li(this.#Ai(e))}#Ai(e){return St({type:"disconnectFromDevice",data:e})}#Ri(e,...t){this.#li(this.#Oi(e,...t))}#Oi(e,...t){return St({type:"deviceMessage",data:[e,wt(...t)]})}#Ti={};get devices(){return this.#Ti}}const Wt=g("BaseServer",{log:!0});class xt{#kt(){Wt.assertWithError(this.constructor!=xt,`${this.constructor.name} must be subclassed`)}static#g=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#g}get eventTypes(){return xt.#g}#ds=new p(this,this.eventTypes);addEventListener(e,t,s){this.#ds.addEventListener(e,t,s)}dispatchEvent(e){this.#ds.dispatchEvent(e)}removeEventListener(e,t){return this.#ds.removeEventListener(e,t)}constructor(){this.#kt(),Wt.assertWithError(ht,"no scanner defined"),f(ht,this.#Pi),f(Xe,this.#$i),f(this,this.#Vi)}get numberOfClients(){return 0}static#Bi=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#Bi}static set ClearSensorConfigurationsWhenNoClients(e){Wt.assertTypeWithError(e,"boolean"),this.#Bi=e}#zi=xt.#Bi;get clearSensorConfigurationsWhenNoClients(){return this.#zi}set clearSensorConfigurationsWhenNoClients(e){Wt.assertTypeWithError(e,"boolean"),this.#zi=e}#Vi={clientConnected:this.#qi.bind(this),clientDisconnected:this.#ji.bind(this)};#qi(e){e.message.client,Wt.log("onClientConnected")}#ji(e){e.message.client,Wt.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&Xe.ConnectedDevices.forEach((e=>{e.clearSensorConfiguration(),e.setTfliteInferencingEnabled(!1)}))}broadcastMessage(e){Wt.log("broadcasting",e)}#Pi={isAvailable:this.#Hi.bind(this),isScanning:this.#Gi.bind(this),discoveredDevice:this.#Ji.bind(this),expiredDiscoveredDevice:this.#Pn.bind(this)};#Hi(e){this.broadcastMessage(this.#Qi)}get#Qi(){return St({type:"isScanningAvailable",data:ht.isAvailable})}#Gi(e){this.broadcastMessage(this.#Zi)}get#Zi(){return St({type:"isScanning",data:ht.isScanning})}#Ji(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#Ki(t))}#Ki(e){return St({type:"discoveredDevice",data:e})}#Pn(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#Xi(t))}#Xi(e){return St({type:"expiredDiscoveredDevice",data:e.id})}get#Yi(){return St(...ht.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#ea(){return St({type:"connectedDevices",data:JSON.stringify(Xe.ConnectedDevices.map((e=>e.id)))})}#ta={connectionMessage:this.#sa.bind(this)};#Oi(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#sa(e){const t=e.target;if(Wt.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#na(t,this.#Oi(t,s,n)))}#$i={deviceConnected:this.#ia.bind(this),deviceDisconnected:this.#aa.bind(this),deviceIsConnected:this.#Kn.bind(this)};#ia(e){const t=e.message.device;Wt.log("onDeviceConnected",t.id),f(t,this.#ta)}#aa(e){const t=e.message.device;Wt.log("onDeviceDisconnected",t.id),m(t,this.#ta)}#Kn(e){const t=e.message.device;Wt.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#ra(t))}#ra(e){return this.#na(e,{type:"isConnected",data:e.isConnected})}#na(e,...t){return St({type:"deviceMessage",data:[e.id,Dt(...t)]})}parseClientMessage(e){let t=[];if(G(e,bt,this.#oa.bind(this),{responseMessages:t},!0),t=t.filter(Boolean),t.length>0)return E(t)}#oa(e,t,s){switch(e){case"ping":responseMessages.push(Et);break;case"pong":break;case"isScanningAvailable":s.responseMessages.push(this.#Qi);break;case"isScanning":s.responseMessages.push(this.#Zi);break;case"startScan":ht.startScan();break;case"stopScan":ht.stopScan();break;case"discoveredDevices":s.responseMessages.push(this.#Yi);break;case"connectToDevice":{const{string:e}=H(t);ht.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=H(t),s=Xe.ConnectedDevices.find((t=>t.id==e));if(!s){Wt.error(`no device found with id ${e}`);break}s.disconnect()}break;case"connectedDevices":s.responseMessages.push(this.#ea);break;case"deviceMessage":{const{string:e,byteOffset:n}=H(t),i=Xe.ConnectedDevices.find((t=>t.id==e));if(!i){Wt.error(`no device found with id ${e}`);break}const a=new DataView(t.buffer,t.byteOffset+n);s.responseMessages.push(this.parseClientDeviceMessage(i,a))}break;default:Wt.error(`uncaught messageType "${e}"`)}}parseClientDeviceMessage(e,t){Wt.log("onDeviceMessage",e.id,t);let s=[];if(G(t,ce.MessageTypes,this.#ca.bind(this),{responseMessages:s,device:e},!0),s.length>0)return this.#na(e,...s)}#ca(e,t,s){switch(e){case"smp":s.device.connectionManager.sendSmpMessage(t.buffer);break;case"tx":s.device.connectionManager.sendTxData(t.buffer);break;default:s.responseMessages.push(this.#Oi(s.device,e))}}}const Nt=g("WebSocketServer",{log:!0});t&&require("ws");var _t={setAllConsoleLevelFlags:function(e){l.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){l.setLevelFlagsForType(e,t)},Device:Xe,DevicePair:ft,WebSocketClient:It,WebSocketServer:class extends xt{get numberOfClients(){return this.#ha?.clients.size||0}#ha;get server(){return this.#ha}set server(e){this.#ha!=e?(Nt.log("assigning server..."),this.#ha&&(Nt.log("clearing existing server..."),m(this.#ha,this.#Vi)),f(e,this.#Vi),this.#ha=e,Nt.log("assigned server")):Nt.log("redundant WebSocket assignment")}#Vi={close:this.#la.bind(this),connection:this.#ga.bind(this),error:this.#da.bind(this),headers:this.#ua.bind(this),listening:this.#pa.bind(this)};#la(){Nt.log("server.close")}#ga(e){Nt.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new y((()=>this.#fa(e)),vt),e.pingClientTimer.start(),f(e,this.#ma),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#da(e){Nt.error(e)}#ua(){}#pa(){Nt.log("server.listening")}#ma={open:this.#va.bind(this),message:this.#oa.bind(this),close:this.#ya.bind(this),error:this.#ba.bind(this)};#va(e){Nt.log("client.open")}#oa(e){Nt.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(M(e.data));this.#Sa(t,s)}#ya(e){Nt.log("client.close");const t=e.target;t.pingClientTimer.stop(),m(t,this.#ma),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#ba(e){Nt.log("client.error")}#Sa(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#fa(e){e.isAlive?(e.isAlive=!1,e.send(Tt)):e.terminate()}},Scanner:ht};export{_t as default};
