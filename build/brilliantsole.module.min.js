/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function r(){}e&&navigator.userAgent.includes("Android");const n=console.log.bind(console),s=console.warn.bind(console),a=console.error.bind(console),o=console.assert.bind(console);class i{static#e={};constructor(e){if(i.#e[e])throw new Error(`"${e}" console already exists`);i.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new i(e)}get log(){return this.#t.log?n:r}get warn(){return this.#t.warn?s:r}get error(){return this.#t.error?a:r}get assert(){return this.#t.assert?o:r}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}}function c(e,t){return i.create(e,t)}const u=c("EventDispatcher",{log:!1});class h{constructor(e){u.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#r=e}#r;#n(e){return!this.#r||this.#r.includes(e)}#s(e){u.assertWithError(this.#n(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,r){if(u.log(`adding "${e}" eventListener`,t),this.#s(e),this.#a||(this.#a={}),r?.once){const r=t;t=function t(n){r.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return u.log(`has "${e}" eventListener?`,t),this.#s(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(u.log(`removing "${e}" eventListener`,t),this.#s(e),this.hasEventListener(e,t)){const r=this.#a[e].indexOf(t);return this.#a[e].splice(r,1),!0}return!1}dispatchEvent(e){if(this.#s(e.type),this.#a?.[e.type]){e.target=this;const t=this.#a[e.type].slice(0);for(let r=0,n=t.length;r<n;r++)t[r].call(this,e)}}}function g(e,t){Object.entries(t).forEach((([t,r])=>{e.addEventListener(t,r)}))}const m=c("ConnectionManager");class l{onStatusUpdated;onMessageReceived;static#o(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#i(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#o("type")}get type(){return this.constructor.type}#c(){m.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#u(){m.assertWithError(this.constructor!=l,`${this.constructor.name} must be subclassed`)}constructor(){this.#u(),this.#c()}#h="not connected";get status(){return this.#h}set status(e){m.assertTypeWithError(e,"string"),this.#h!=e?(m.log(`new connection status "${e}"`),this.#h=e,this.onStatusUpdated?.(this.status)):m.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){m.assertWithError(!this.isConnected,"device is already connected")}#m(){m.assertWithError("connecting"!=this.status,"device is already connecting")}#l(){m.assertWithError(this.isConnected,"device is not connected")}#f(){m.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#d(){this.#l(),this.#f()}async connect(){this.#g(),this.#m(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#m(),m.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#l(),this.#f(),this.status="disconnecting"}async sendMessage(e,t){this.#d(),m.log("sending message",{messageType:e,data:t})}}if(t){var f=require("webbluetooth").BluetoothUUID}if(e)f=window.BluetoothUUID;function d(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function p(e){return f.getCharacteristic(e)}function v(e){return f.getService(e)}const y=Object.freeze({services:{deviceInformation:{uuid:v("device_information"),characteristics:{manufacturerName:{uuid:p("manufacturer_name_string")},modelNumber:{uuid:p("model_number_string")},hardwareRevision:{uuid:p("hardware_revision_string")},firmwareRevision:{uuid:p("firmware_revision_string")},softwareRevision:{uuid:p("software_revision_string")},pnpId:{uuid:p("pnp_id")},serialNumber:{uuid:p("serial_number_string")}}},battery:{uuid:v("battery_service"),characteristics:{batteryLevel:{uuid:p("battery_level")}}},main:{uuid:d(0),characteristics:{name:{uuid:d(1)},type:{uuid:d(2)},sensorConfiguration:{uuid:d(3)},sensorData:{uuid:d(4)},vibration:{uuid:d(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,r])=>e==r.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((r=>(t=Object.entries(r.characteristics).find((([t,r])=>e==r.uuid))?.[0],t))),t}}),S=y.serviceUUIDs,b=y.optionalServiceUUIDs;const E=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var w={bluetooth:t}}if(e)w=window.navigator;class C extends l{#p={characteristicvaluechanged:this.#v.bind(this)};#y={gattserverdisconnected:this.#S.bind(this)};static get isSupported(){return"bluetooth"in w}static get type(){return"web bluetooth"}#b;get device(){return this.#b}set device(e){var t,r;this.#b!=e?(this.#b&&(t=this.#b,r=this.#y,Object.entries(r).forEach((([e,r])=>{t.removeEventListener(e,r)}))),e&&g(e,this.#y),this.#b=e):E.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const t=await w.bluetooth.requestDevice({filters:[{services:S}],optionalServices:e?b:[]});E.log("got BluetoothDevice"),this.device=t,E.log("connecting to device...");const r=await this.device.gatt.connect();E.log(`connected to device? ${r.connected}`),await this.#C(),E.log("fully connected"),this.status="connected"}catch(e){E.error(e),this.status="not connected",this.server?.disconnect()}}async#C(){E.log("getting services...");const e=await this.server.getPrimaryServices();E.log("got services",e.length),E.log("getting characteristics...");for(const n in e){const s=e[n],a=(r=s.uuid,y.getServiceNameFromUUID(r));if(E.assertWithError(a,`no name found for service uuid "${s.uuid}"`),E.log(`got "${a}" service`),"dfu"==a){E.log("skipping dfu service");continue}s._name=a,this.#E.set(a,s),E.log(`getting characteristics for "${a}" service`);const o=await s.getCharacteristics();E.log(`got characteristics for "${a}" service`);for(const e in o){const r=o[e],n=(t=r.uuid,y.getCharacteristicNameFromUUID(t));E.assertWithError(n,`no name found for characteristic uuid "${r.uuid}" in "${a}" service`),E.log(`got "${n}" characteristic in "${a}" service`),r._name=n,this.#w.set(n,r),g(r,this.#p),r.properties.read&&(E.log(`reading "${n}" characteristic...`),await r.readValue()),r.properties.notify&&(E.log(`starting notifications for "${n}" characteristic`),await r.startNotifications())}}var t,r}async disconnect(){await super.disconnect(),E.log("disconnecting from device..."),this.server?.disconnect()}#v(e){E.log("oncharacteristicvaluechanged");const t=e.target,r=t._name;E.assertWithError(r,`no name found for characteristic with uuid "${t.uuid}"`),E.log(`oncharacteristicvaluechanged for "${r}" characteristic`);const n=t.value;switch(E.assertWithError(n,`no data found for "${r}" characteristic`),E.log(`data for "${r}" characteristic`,Array.from(new Uint8Array(n.buffer))),r){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${r}"`)}}#S(e){E.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let r;switch(await super.sendMessage(...arguments),e){case"setName":r=this.#w.get("name");break;case"setType":r=this.#w.get("type");break;case"setSensorConfiguration":r=this.#w.get("sensorConfiguration");break;case"triggerVibration":r=this.#w.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}E.assert(r,"no characteristic found"),await r.writeValueWithResponse(t),r.properties.read&&await r.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),E.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(E.log("successfully reconnected!"),await this.#C(),this.status="connected"):(E.log("unable to reconnect"),this.status="not connected")}}function D(e,t,r){return(e-t)/(r-t)}c("NobleConnectionManager",{log:!0}),t&&require("@abandonware/noble");const T=c("PressureSensorDataManager",{log:!0});class M{#D;get deviceType(){return this.#D}set deviceType(e){T.assertTypeWithError(e,"string"),this.#D!=e?(T.log({newDeviceType:e}),this.#D=e,this.#T(),this.resetCenterOfPressureRange()):T.warn(`redundant deviceType assignment "${e}"`)}static#M=["hallux","digits","metatarsal_inner","metatarsal_center","metatarsal_outer","arch","lateral","heel"];static get Names(){return this.#M}get names(){return M.Names}static#R={pressure:2**-16};static get Scalars(){return this.#R}get scalars(){return M.Scalars}static#W=8;static get NumberOfPressureSensors(){return this.#W}get numberOfPressureSensors(){return M.NumberOfPressureSensors}static#x=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#x}#L;get pressureSensorPositions(){return this.#L}#T(){const e=M.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));T.log({pressureSensorPositions:e}),this.#L=e}#I;resetCenterOfPressureRange(){this.#I={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}}}#N(e){this.#I.min.x=Math.min(e.x,this.#I.min.x),this.#I.min.y=Math.min(e.y,this.#I.min.y),this.#I.max.x=Math.max(e.x,this.#I.max.x),this.#I.max.y=Math.max(e.y,this.#I.max.y)}#O(e){return{x:D(e.x,this.#I.min.x,this.#I.max.x),y:D(e.y,this.#I.min.y,this.#I.max.y)}}parsePressure(e,t){const r=this.scalars.pressure,n={sensors:[],rawSum:0,normalizedSum:0};for(let s=0;s<this.numberOfPressureSensors;s++,t+=2){const a=e.getUint16(t,!0),o=a*r,i=this.pressureSensorPositions[s],c=this.names[s];n.sensors[s]={rawValue:a,normalizedValue:o,position:i,name:c},n.rawSum+=a,n.normalizedSum=o/this.numberOfPressureSensors}return n.rawSum>0&&(n.center={x:0,y:0},n.sensors.forEach((e=>{e.weightedValue=e.rawValue/n.rawSum,n.center.x+=e.position.x*e.weightedValue,n.center.y+=e.position.y*e.weightedValue})),this.#N(n.center),n.calibratedCenter=this.#O(n.center)),T.log({pressure:n}),n}}const R=c("MotionSensorDataManager",{log:!0});class W{#D;get deviceType(){return this.#D}set deviceType(e){R.assertTypeWithError(e,"string"),this.#D!=e?(R.log({newDeviceType:e}),this.#D=e):R.warn(`redundant deviceType assignment "${e}"`)}static#R={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#R}get scalars(){return W.Scalars}static#k=6;static get Vector3Size(){return this.#k}get vector3Size(){return W.Vector3Size}parseVector3(e,t,r){let[n,s,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[r]));const o={x:n,y:s,z:a};return R.log({vector:o}),o}static#U=8;static get QuaternionSize(){return this.#U}get quaternionSize(){return W.QuaternionSize}parseQuaternion(e,t,r){let[n,s,a,o]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[r]));const i={x:n,y:s,z:a,w:o};return R.log({quaternion:i}),i}}c("BarometerSensorDataManager",{log:!0});class x{static#R={barometer:.78125};static get Scalars(){return this.#R}get scalars(){return x.Scalars}}const L=c("SensorDataManager",{log:!0});class I{#D;get deviceType(){return this.#D}set deviceType(e){L.assertTypeWithError(e,"string"),this.#D!=e?(L.log({newDeviceType:e}),this.#D=e,this.#$.deviceType=e,this.#_.deviceType=e):L.warn(`redundant deviceType assignment "${e}"`)}#$=new M;#_=new W;#V=new x;static#P=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#P}get#A(){return I.Types}static AssertValidSensorType(e){L.assertTypeWithError(e,"string"),L.assertWithError(this.#P.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){L.assertTypeWithError(e,"number"),L.assertWithError(e in this.#P,`invalid sensorTypeEnum ${e}`)}onDataReceived;#z=0;#B=0;clearTimestamp(){L.log("clearing sensorDataManager timestamp data"),this.#z=0,this.#B=0}#F(e,t){const r=e.getUint16(t,!0);r<this.#B&&(this.#z+=65536),this.#B=r;return r+this.#z}parse(e){L.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const r=this.#F(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let s;I.AssertValidSensorTypeEnum(n);const a=e.getUint8(t++),o=this.#A[n];switch(L.log({sensorTypeEnum:n,sensorType:o,sensorTypeDataSize:a}),o){case"pressure":s=this.#$.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":s=this.#_.parseVector3(e,t,o);break;case"gameRotation":case"rotation":s=this.#_.parseQuaternion(e,t,o);break;case"barometer":break;default:L.error(`uncaught sensorType "${o}"`)}t+=a,L.assertWithError(s,`no value defined for sensorType "${o}"`),this.onDataReceived?.(o,{timestamp:r,[o]:s})}}static get NumberOfPressureSensors(){return M.NumberOfPressureSensors}get numberOfPressureSensors(){return I.NumberOfPressureSensors}}const N=c("SensorConfigurationManager",{log:!0});class O{#D;get deviceType(){return this.#D}set deviceType(e){N.assertTypeWithError(e,"string"),this.#D!=e?(N.log({newDeviceType:e}),this.#D=e):N.warn(`redundant deviceType assignment "${e}"`)}parse(e){const t={};return I.Types.forEach(((r,n)=>{const s=e.getUint16(2*n,!0);N.log({sensorType:r,sensorRate:s}),t[r]=s})),N.log({parsedSensorConfiguration:t}),t}static#q=65535;static get MaxSensorRate(){return this.#q}get maxSensorRate(){return O.MaxSensorRate}static#j=5;static get SensorRateStep(){return this.#j}get sensorRateStep(){return O.SensorRateStep}#H(e){N.assertTypeWithError(e,"number"),N.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),N.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),N.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){const t=Object.keys(e),r=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{I.AssertValidSensorType(t);const s=I.Types.indexOf(t);r.setUint8(3*n,s);const a=e[t];this.#H(a),r.setUint16(3*n+1,e[t],!0)})),N.log({sensorConfigurationData:r}),r}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const k=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];function U(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),r=new Uint8Array(t);let n=0;return e.forEach((e=>{r.set(new Uint8Array(e),n),n+=e.byteLength})),r.buffer}const $=c("VibrationManager");class _{static#Z=["front","rear"];static get Locations(){return this.#Z}get locations(){return _.Locations}#Q(e){$.assertTypeWithError(e,"string"),$.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#G(e){this.#J(e),e.forEach((e=>{this.#Q(e)}))}#K(e){this.#G(e);let t=0;return e.forEach((e=>{const r=this.locations.indexOf(e);t|=1<<r})),$.log({locationsBitmask:t}),$.assertWithError(t>0,"locationsBitmask must not be zero"),t}#J(e){$.assertWithError(Array.isArray(e),"passed non-array"),$.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return k}get waveformEffects(){return _.WaveformEffects}#X(e){$.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#Y=1270;static get MaxWaveformEffectSegmentDelay(){return this.#Y}get maxWaveformEffectSegmentDelay(){return _.MaxWaveformEffectSegmentDelay}#ee(e){if(null!=e.effect){const t=e.effect;this.#X(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;$.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),$.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#te(t)}}static#re=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#re}get maxWaveformEffectSegmentLoopCount(){return _.MaxWaveformEffectSegmentLoopCount}#te(e){$.assertTypeWithError(e,"number"),$.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),$.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ne=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ne}get maxNumberOfWaveformEffectSegments(){return _.MaxNumberOfWaveformEffectSegments}#se(e){this.#J(e),$.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ee(e)}))}static#ae=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ae}get maxWaveformEffectSequenceLoopCount(){return _.MaxWaveformEffectSequenceLoopCount}#oe(e){$.assertTypeWithError(e,"number"),$.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),$.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ie=2550;static get MaxWaveformSegmentDuration(){return this.#ie}get maxWaveformSegmentDuration(){return _.MaxWaveformSegmentDuration}#ce(e){$.assertTypeWithError(e.amplitude,"number"),$.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),$.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),$.assertTypeWithError(e.duration,"number"),$.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),$.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#ue=20;static get MaxNumberOfWaveformSegments(){return this.#ue}get maxNumberOfWaveformSegments(){return _.MaxNumberOfWaveformSegments}#he(e){this.#J(e),$.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ce(e)}))}createWaveformEffectsData(e,t,r=0){this.#se(t),this.#oe(r);let n=[],s=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=r;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const r=t[e]||{effect:"none"};if(null!=r.effect){const e=r.effect;n[s++]=this.waveformEffects.indexOf(e)}else{if(null==r.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=r;n[s++]=128|Math.floor(e/10)}}}const o=0!=r;for(let e=0;e<t.length||o&&e<this.maxNumberOfWaveformEffectSegments;e++){const r=t[e]?.loopCount||0;0!=e&&4!=e||(n[s]=0);const a=e%4*2;n[s]|=r<<a,3!=e&&7!=e||s++}0!=r&&(n[s++]=r);const i=new DataView(Uint8Array.from(n).buffer);return $.log({dataArray:n,dataView:i}),this.#ge(e,"waveformEffect",i)}createWaveformData(e,t){this.#he(t);const r=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{r.setUint8(2*t,Math.floor(127*e.amplitude)),r.setUint8(2*t+1,Math.floor(e.duration/10))})),$.log({dataView:r}),this.#ge(e,"waveform",r)}static#P=["waveformEffect","waveform"];static get Types(){return this.#P}get#A(){return _.Types}#me(e){$.assertTypeWithError(e,"string"),$.assertWithError(this.#A.includes(e),`invalid vibrationType "${e}"`)}#ge(e,t,r){$.assertWithError(r?.byteLength>0,"no data received");const n=this.#K(e);this.#me(t);const s=this.#A.indexOf(t);$.log({locationsBitmask:n,vibrationTypeIndex:s,dataView:r});const a=U(n,s,r.byteLength,r);return $.log({data:a}),a}}const V=c("BrilliantSole",{log:!0});class P{constructor(){this.connectionManager=new P.#le,this.#fe.onDataReceived=this.#de.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()}))}static get#le(){return C}static#pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];get#r(){return P.#pe}#ve=new h(this.#r);addEventListener(e,t,r){this.#ve.addEventListener(...arguments)}#ye(e){this.#ve.dispatchEvent(e)}removeEventListener(e,t){return this.#ve.removeEventListener(...arguments)}#Se;get connectionManager(){return this.#Se}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#be.bind(this),e.onMessageReceived=this.#Ee.bind(this)),this.#Se=e,V.log("assigned new connectionManager",this.#Se)):V.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#l(){V.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}#we=!1;get reconnectOnDisconnection(){return this.#we}set reconnectOnDisconnection(e){V.assertTypeWithError(e,"boolean"),this.#we=e}#Ce;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#l(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}get connectionStatus(){return this.#Se?.status}#be(e){switch(V.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(V.log("starting reconnect interval..."),this.#Ce=setInterval((()=>{V.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Ce&&(V.log("clearing reconnect interval"),clearInterval(this.#Ce),this.#Ce=void 0),this.#ye({type:"connectionStatus",message:{connectionStatus:e}}),this.#ye({type:this.connectionStatus}),e){case"connected":case"not connected":this.#ye({type:"isConnected",message:{isConnected:this.isConnected}})}}#De(){this.#Te=null,this.#Me=null,this.#Re=null;for(const e in this.#We)this.#We[e]=null}#Ee(e,t){switch(V.log({messageType:e,dataView:t}),e){case"manufacturerName":const r=this.#xe.decode(t);V.log({manufacturerName:r}),this.#Le({manufacturerName:r});break;case"modelNumber":const n=this.#xe.decode(t);V.log({modelNumber:n}),this.#Le({modelNumber:n});break;case"softwareRevision":const s=this.#xe.decode(t);V.log({softwareRevision:s}),this.#Le({softwareRevision:s});break;case"hardwareRevision":const a=this.#xe.decode(t);V.log({hardwareRevision:a}),this.#Le({hardwareRevision:a});break;case"firmwareRevision":const o=this.#xe.decode(t);V.log({firmwareRevision:o}),this.#Le({firmwareRevision:o});break;case"pnpId":const i={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==i.source&&(i.vendorId=t.getUint8(1)|t.getUint8(2)<<8),V.log({pnpId:i}),this.#Le({pnpId:i});break;case"serialNumber":const c=this.#xe.decode(t);V.log({serialNumber:c});break;case"batteryLevel":const u=t.getUint8(0);V.log("received battery level",{batteryLevel:u}),this.#Ie(u);break;case"getName":const h=this.#xe.decode(t);V.log({name:h}),this.#Ne(h);break;case"getType":const g=t.getUint8(0),m=this.#A[g];V.log({typeEnum:g,type:m}),this.#Oe(m);break;case"getSensorConfiguration":const l=this.#ke.parse(t);V.log({sensorConfiguration:l}),this.#Ue(l);break;case"sensorData":this.#fe.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#$e=new TextEncoder;get#_e(){return P.#$e}static#Ve=new TextDecoder;get#xe(){return P.#Ve}#We={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#We}get#Pe(){return Object.values(this.#We).every((e=>null!=e))}#Le(e){V.log({partialDeviceInformation:e});for(const t in e)this.#ye({type:t,message:{[t]:e[t]}});Object.assign(this.#We,e),V.log({deviceInformation:this.#We}),this.#Pe&&(V.log("completed deviceInformation"),this.#ye({type:"deviceInformation",message:{deviceInformation:this.#We}}))}#Re=null;get batteryLevel(){return this.#Re}#Ie(e){V.assertTypeWithError(e,"number"),this.#Re!=e?(this.#Re=e,V.log({updatedBatteryLevel:this.#Re}),this.#ye({type:"batteryLevel",message:{batteryLevel:this.#Re}})):V.warn(`duplicate batteryLevel assignment ${e}`)}#Te;get name(){return this.#Te}#Ne(e){V.assertTypeWithError(e,"string"),this.#Te=e,V.log({updatedName:this.#Te}),this.#ye({type:"getName",message:{name:this.#Te}})}static get MinNameLength(){return 2}get minNameLength(){return P.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return P.MaxNameLength}async setName(e){this.#l(),V.assertTypeWithError(e,"string"),V.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),V.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#_e.encode(e);V.log({setNameData:t}),await this.#Se.sendMessage("setName",t)}static#P=["leftInsole","rightInsole"];static get Types(){return this.#P}get#A(){return P.Types}#Me;get type(){return this.#Me}#Ae(e){V.assertTypeWithError(e,"string"),V.assertWithError(this.#A.includes(e),`invalid type "${e}"`)}#Oe(e){this.#Ae(e),e!=this.type?(this.#Me=e,V.log({updatedType:this.#Me}),this.#fe.deviceType=this.#Me,this.#ke.deviceType=this.#Me,this.#ye({type:"getType",message:{type:this.#Me}})):V.warn("redundant type assignment")}async setType(e){this.#l(),this.#Ae(e);const t=this.#A.indexOf(e),r=Uint8Array.from([t]);V.log({setTypeData:r}),await this.#Se.sendMessage("setType",r)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ze=["left","right"];static get InsoleSides(){return this.#ze}get insoleSides(){return P.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static#Be=I.Types;static get SensorTypes(){return this.#Be}get sensorTypes(){return P.SensorTypes}#ke=new O;#Fe;get sensorConfiguration(){return this.#Fe}static get MaxSensorRate(){return O.MaxSensorRate}static get SensorRateStep(){return O.SensorRateStep}#Ue(e){this.#Fe=e,V.log({updatedSensorConfiguration:this.#Fe}),this.#ke.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(V.log("clearing sensorDataManager timestamp..."),this.#fe.clearTimestamp()),this.#ye({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#l(),V.log({newSensorConfiguration:e});const t=this.#ke.createData(e);V.log({setSensorConfigurationData:t}),await this.#Se.sendMessage("setSensorConfiguration",t)}static#qe=!0;static get ClearSensorConfigurationOnLeave(){return this.#qe}static set ClearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#qe=e}#je=P.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#je}set clearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#je=e}static#He={};static get ZeroSensorConfiguration(){return this.#He}static{this.SensorTypes.forEach((e=>{this.#He[e]=0}))}get zeroSensorConfiguration(){return P.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#fe=new I;#de(e,t){V.log({sensorType:e,sensorData:t}),this.#ye({type:e,message:t}),this.#ye({type:"sensorData",message:t})}#Ze=new _;static get VibrationLocations(){return _.Locations}static get VibrationTypes(){return _.Types}static get VibrationWaveformEffects(){return _.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return _.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return _.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return _.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return _.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return _.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return _.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:r,type:n}=e;let s;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:a}=t;s=this.#Ze.createWaveformEffectsData(r,n,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;s=this.#Ze.createWaveformData(r,n)}break;default:throw Error(`invalid vibration type "${n}"`)}V.log({type:n,dataView:s}),t=U(t,s)})),await this.#Se.sendMessage("triggerVibration",t)}}var A={setAllConsoleLevelFlags:function(e){i.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){i.setLevelFlagsForType(e,t)},Device:P};export{A as default};
