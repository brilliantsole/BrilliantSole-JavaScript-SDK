/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function r(){}e&&navigator.userAgent.includes("Android");const s=console.log.bind(console),n=console.warn.bind(console),a=console.error.bind(console),i=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const r=this.#e[e]||new o(e);return r.setLevelFlags(t),r}get log(){return this.#t.log?s:r}get warn(){return this.#t.warn?n:r}get error(){return this.#t.error?a:r}get assert(){return this.#t.assert?i:r}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}}function c(e,t){return o.create(e,t)}const u=c("EventDispatcher",{log:!1});class h{constructor(e){u.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#r=e}#r;#s(e){return!this.#r||this.#r.includes(e)}#n(e){u.assertWithError(this.#s(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,r){if(u.log(`adding "${e}" eventListener`,t),this.#n(e),this.#a||(this.#a={}),r?.once){const r=t;t=function t(s){r.apply(this,arguments),this.removeEventListener(e,t)}}const s=this.#a;s[e]||(s[e]=[]),s[e].includes(t)||s[e].push(t)}hasEventListener(e,t){return u.log(`has "${e}" eventListener?`,t),this.#n(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(u.log(`removing "${e}" eventListener`,t),this.#n(e),this.hasEventListener(e,t)){const r=this.#a[e].indexOf(t);return this.#a[e].splice(r,1),!0}return!1}dispatchEvent(e){if(this.#n(e.type),this.#a?.[e.type]){e.target=this;const t=this.#a[e.type].slice(0);for(let r=0,s=t.length;r<s;r++)t[r].call(this,e)}}}function g(e,t){Object.entries(t).forEach((([t,r])=>{e.addEventListener(t,r)}))}function m(e,t){Object.entries(t).forEach((([t,r])=>{e.removeEventListener(t,r)}))}const l=c("ConnectionManager");class f{onStatusUpdated;onMessageReceived;static#i(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#i("type")}get type(){return this.constructor.type}#c(){l.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#u(){l.assertWithError(this.constructor!=f,`${this.constructor.name} must be subclassed`)}constructor(){this.#u(),this.#c()}#h="not connected";get status(){return this.#h}set status(e){l.assertTypeWithError(e,"string"),this.#h!=e?(l.log(`new connection status "${e}"`),this.#h=e,this.onStatusUpdated?.(this.status)):l.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){l.assertWithError(!this.isConnected,"device is already connected")}#m(){l.assertWithError("connecting"!=this.status,"device is already connecting")}#l(){l.assertWithError(this.isConnected,"device is not connected")}#f(){l.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#d(){this.#l(),this.#f()}async connect(){this.#g(),this.#m(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#m(),l.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#l(),this.#f(),this.status="disconnecting"}async sendMessage(e,t){this.#d(),l.log("sending message",{messageType:e,data:t})}}if(t){var d=require("webbluetooth").BluetoothUUID}if(e)d=window.BluetoothUUID;function p(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function v(e){return d.getCharacteristic(e)}function y(e){return d.getService(e)}const S=Object.freeze({services:{deviceInformation:{uuid:y("device_information"),characteristics:{manufacturerName:{uuid:v("manufacturer_name_string")},modelNumber:{uuid:v("model_number_string")},hardwareRevision:{uuid:v("hardware_revision_string")},firmwareRevision:{uuid:v("firmware_revision_string")},softwareRevision:{uuid:v("software_revision_string")},pnpId:{uuid:v("pnp_id")},serialNumber:{uuid:v("serial_number_string")}}},battery:{uuid:y("battery_service"),characteristics:{batteryLevel:{uuid:v("battery_level")}}},main:{uuid:p(0),characteristics:{name:{uuid:p(1)},type:{uuid:p(2)},sensorConfiguration:{uuid:p(3)},sensorData:{uuid:p(4)},vibration:{uuid:p(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,r])=>e==r.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((r=>(t=Object.entries(r.characteristics).find((([t,r])=>e==r.uuid))?.[0],t))),t}}),b=S.serviceUUIDs,E=S.optionalServiceUUIDs;const w=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var C={bluetooth:t}}if(e)C=window.navigator;class D extends f{#p={characteristicvaluechanged:this.#v.bind(this)};#y={gattserverdisconnected:this.#S.bind(this)};static get isSupported(){return"bluetooth"in C}static get type(){return"web bluetooth"}#b;get device(){return this.#b}set device(e){this.#b!=e?(this.#b&&m(this.#b,this.#y),e&&g(e,this.#y),this.#b=e):w.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const t=await C.bluetooth.requestDevice({filters:[{services:b}],optionalServices:e?E:[]});w.log("got BluetoothDevice"),this.device=t,w.log("connecting to device...");const r=await this.device.gatt.connect();w.log(`connected to device? ${r.connected}`),await this.#C(),w.log("fully connected"),this.status="connected"}catch(e){w.error(e),this.status="not connected",this.server?.disconnect(),this.#D()}}async#C(){this.#D(),w.log("getting services...");const e=await this.server.getPrimaryServices();w.log("got services",e.length),w.log("getting characteristics...");for(const s in e){const n=e[s],a=(r=n.uuid,S.getServiceNameFromUUID(r));if(w.assertWithError(a,`no name found for service uuid "${n.uuid}"`),w.log(`got "${a}" service`),"dfu"==a){w.log("skipping dfu service");continue}n._name=a,this.#E.set(a,n),w.log(`getting characteristics for "${a}" service`);const i=await n.getCharacteristics();w.log(`got characteristics for "${a}" service`);for(const e in i){const r=i[e],s=(t=r.uuid,S.getCharacteristicNameFromUUID(t));w.assertWithError(s,`no name found for characteristic uuid "${r.uuid}" in "${a}" service`),w.log(`got "${s}" characteristic in "${a}" service`),r._name=s,this.#w.set(s,r),g(r,this.#p),r.properties.read&&(w.log(`reading "${s}" characteristic...`),await r.readValue()),r.properties.notify&&(w.log(`starting notifications for "${s}" characteristic`),await r.startNotifications())}}var t,r}#D(){this.device&&m(this.device,this.#y),this.#w.forEach((e=>{m(e,this.#p)}))}async disconnect(){await super.disconnect(),w.log("disconnecting from device..."),this.server?.disconnect(),this.#D()}#v(e){w.log("oncharacteristicvaluechanged");const t=e.target,r=t._name;w.assertWithError(r,`no name found for characteristic with uuid "${t.uuid}"`),w.log(`oncharacteristicvaluechanged for "${r}" characteristic`);const s=t.value;switch(w.assertWithError(s,`no data found for "${r}" characteristic`),w.log(`data for "${r}" characteristic`,Array.from(new Uint8Array(s.buffer))),r){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${r}"`)}}#S(e){w.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let r;switch(await super.sendMessage(...arguments),e){case"setName":r=this.#w.get("name");break;case"setType":r=this.#w.get("type");break;case"setSensorConfiguration":r=this.#w.get("sensorConfiguration");break;case"triggerVibration":r=this.#w.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}w.assert(r,"no characteristic found"),await r.writeValueWithResponse(t),r.properties.read&&await r.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),w.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(w.log("successfully reconnected!"),await this.#C(),this.status="connected"):(w.log("unable to reconnect"),this.status="not connected")}}function T(e,t,r){return(e-t)/(r-t)}c("NobleConnectionManager",{log:!0}),t&&require("@abandonware/noble");class M{#T;resetCenterOfPressureRange(){this.#T={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}}}constructor(){this.resetCenterOfPressureRange()}updateCenterOfPressureRange(e){this.#T.min.x=Math.min(e.x,this.#T.min.x),this.#T.min.y=Math.min(e.y,this.#T.min.y),this.#T.max.x=Math.max(e.x,this.#T.max.x),this.#T.max.y=Math.max(e.y,this.#T.max.y)}getCalibratedCenterOfPressure(e){return{x:T(e.x,this.#T.min.x,this.#T.max.x),y:T(e.y,this.#T.min.y,this.#T.max.y)}}}const R=c("PressureSensorDataManager",{log:!0});class L{#M;get deviceType(){return this.#M}set deviceType(e){R.assertTypeWithError(e,"string"),this.#M!=e?(R.log({newDeviceType:e}),this.#M=e,this.#R(),this.resetCenterOfPressureRange()):R.warn(`redundant deviceType assignment "${e}"`)}static#L=["hallux","digits","metatarsal_inner","metatarsal_center","metatarsal_outer","arch","lateral","heel"];static get Names(){return this.#L}get names(){return L.Names}static#W={pressure:2**-16};static get Scalars(){return this.#W}get scalars(){return L.Scalars}static#x=8;static get NumberOfPressureSensors(){return this.#x}get numberOfPressureSensors(){return L.NumberOfPressureSensors}static#O=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#O}#I;get pressureSensorPositions(){return this.#I}#R(){const e=L.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));R.log({pressureSensorPositions:e}),this.#I=e}#N=new M;resetCenterOfPressureRange(){this.#N.resetCenterOfPressureRange()}parsePressure(e,t){const r=this.scalars.pressure,s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const a=e.getUint16(t,!0),i=a*r,o=this.pressureSensorPositions[n],c=this.names[n];s.sensors[n]={rawValue:a,normalizedValue:i,position:o,name:c},s.rawSum+=a,s.normalizedSum=i/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),this.#N.updateCenterOfPressureRange(s.center),s.calibratedCenter=this.#N.getCalibratedCenterOfPressure(s.center)),R.log({pressure:s}),s}}const W=c("MotionSensorDataManager",{log:!0});class x{#M;get deviceType(){return this.#M}set deviceType(e){W.assertTypeWithError(e,"string"),this.#M!=e?(W.log({newDeviceType:e}),this.#M=e):W.warn(`redundant deviceType assignment "${e}"`)}static#W={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#W}get scalars(){return x.Scalars}static#k=6;static get Vector3Size(){return this.#k}get vector3Size(){return x.Vector3Size}parseVector3(e,t,r){let[s,n,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[r]));const i={x:s,y:n,z:a};return W.log({vector:i}),i}static#$=8;static get QuaternionSize(){return this.#$}get quaternionSize(){return x.QuaternionSize}parseQuaternion(e,t,r){let[s,n,a,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[r]));const o={x:s,y:n,z:a,w:i};return W.log({quaternion:o}),o}}c("BarometerSensorDataManager",{log:!0});class O{static#W={barometer:.78125};static get Scalars(){return this.#W}get scalars(){return O.Scalars}}const I=c("SensorDataManager",{log:!0});class N{#M;get deviceType(){return this.#M}set deviceType(e){I.assertTypeWithError(e,"string"),this.#M!=e?(I.log({newDeviceType:e}),this.#M=e,this.#P.deviceType=e,this.#U.deviceType=e):I.warn(`redundant deviceType assignment "${e}"`)}#P=new L;#U=new x;#_=new O;static#V=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#V}get#A(){return N.Types}static AssertValidSensorType(e){I.assertTypeWithError(e,"string"),I.assertWithError(this.#V.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){I.assertTypeWithError(e,"number"),I.assertWithError(e in this.#V,`invalid sensorTypeEnum ${e}`)}onDataReceived;#z=0;#B=0;clearTimestamp(){I.log("clearing sensorDataManager timestamp data"),this.#z=0,this.#B=0}#F(e,t){const r=e.getUint16(t,!0);r<this.#B&&(this.#z+=65536),this.#B=r;return r+this.#z}parse(e){I.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const r=this.#F(e,t);for(t+=2;t<e.byteLength;){const s=e.getUint8(t++);let n;N.AssertValidSensorTypeEnum(s);const a=e.getUint8(t++),i=this.#A[s];switch(I.log({sensorTypeEnum:s,sensorType:i,sensorTypeDataSize:a}),i){case"pressure":n=this.#P.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":n=this.#U.parseVector3(e,t,i);break;case"gameRotation":case"rotation":n=this.#U.parseQuaternion(e,t,i);break;case"barometer":break;default:I.error(`uncaught sensorType "${i}"`)}t+=a,I.assertWithError(n,`no value defined for sensorType "${i}"`),this.onDataReceived?.(i,{timestamp:r,[i]:n})}}static get NumberOfPressureSensors(){return L.NumberOfPressureSensors}get numberOfPressureSensors(){return N.NumberOfPressureSensors}}const k=c("SensorConfigurationManager",{log:!0});class ${#M;get deviceType(){return this.#M}set deviceType(e){k.assertTypeWithError(e,"string"),this.#M!=e?(k.log({newDeviceType:e}),this.#M=e):k.warn(`redundant deviceType assignment "${e}"`)}parse(e){const t={};return N.Types.forEach(((r,s)=>{const n=e.getUint16(2*s,!0);k.log({sensorType:r,sensorRate:n}),t[r]=n})),k.log({parsedSensorConfiguration:t}),t}static#q=65535;static get MaxSensorRate(){return this.#q}get maxSensorRate(){return $.MaxSensorRate}static#H=5;static get SensorRateStep(){return this.#H}get sensorRateStep(){return $.SensorRateStep}#j(e){k.assertTypeWithError(e,"number"),k.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),k.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),k.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){const t=Object.keys(e),r=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,s)=>{N.AssertValidSensorType(t);const n=N.Types.indexOf(t);r.setUint8(3*s,n);const a=e[t];this.#j(a),r.setUint16(3*s+1,e[t],!0)})),k.log({sensorConfigurationData:r}),r}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const P=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];function U(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),r=new Uint8Array(t);let s=0;return e.forEach((e=>{r.set(new Uint8Array(e),s),s+=e.byteLength})),r.buffer}const _=c("VibrationManager");class V{static#Z=["front","rear"];static get Locations(){return this.#Z}get locations(){return V.Locations}#Q(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#G(e){this.#J(e),e.forEach((e=>{this.#Q(e)}))}#K(e){this.#G(e);let t=0;return e.forEach((e=>{const r=this.locations.indexOf(e);t|=1<<r})),_.log({locationsBitmask:t}),_.assertWithError(t>0,"locationsBitmask must not be zero"),t}#J(e){_.assertWithError(Array.isArray(e),"passed non-array"),_.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return P}get waveformEffects(){return V.WaveformEffects}#X(e){_.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#Y=1270;static get MaxWaveformEffectSegmentDelay(){return this.#Y}get maxWaveformEffectSegmentDelay(){return V.MaxWaveformEffectSegmentDelay}#ee(e){if(null!=e.effect){const t=e.effect;this.#X(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;_.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),_.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#te(t)}}static#re=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#re}get maxWaveformEffectSegmentLoopCount(){return V.MaxWaveformEffectSegmentLoopCount}#te(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#se=8;static get MaxNumberOfWaveformEffectSegments(){return this.#se}get maxNumberOfWaveformEffectSegments(){return V.MaxNumberOfWaveformEffectSegments}#ne(e){this.#J(e),_.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ee(e)}))}static#ae=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ae}get maxWaveformEffectSequenceLoopCount(){return V.MaxWaveformEffectSequenceLoopCount}#ie(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#oe=2550;static get MaxWaveformSegmentDuration(){return this.#oe}get maxWaveformSegmentDuration(){return V.MaxWaveformSegmentDuration}#ce(e){_.assertTypeWithError(e.amplitude,"number"),_.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),_.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),_.assertTypeWithError(e.duration,"number"),_.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),_.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#ue=20;static get MaxNumberOfWaveformSegments(){return this.#ue}get maxNumberOfWaveformSegments(){return V.MaxNumberOfWaveformSegments}#he(e){this.#J(e),_.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ce(e)}))}createWaveformEffectsData(e,t,r=0){this.#ne(t),this.#ie(r);let s=[],n=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=r;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const r=t[e]||{effect:"none"};if(null!=r.effect){const e=r.effect;s[n++]=this.waveformEffects.indexOf(e)}else{if(null==r.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=r;s[n++]=128|Math.floor(e/10)}}}const i=0!=r;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const r=t[e]?.loopCount||0;0!=e&&4!=e||(s[n]=0);const a=e%4*2;s[n]|=r<<a,3!=e&&7!=e||n++}0!=r&&(s[n++]=r);const o=new DataView(Uint8Array.from(s).buffer);return _.log({dataArray:s,dataView:o}),this.#ge(e,"waveformEffect",o)}createWaveformData(e,t){this.#he(t);const r=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{r.setUint8(2*t,Math.floor(127*e.amplitude)),r.setUint8(2*t+1,Math.floor(e.duration/10))})),_.log({dataView:r}),this.#ge(e,"waveform",r)}static#V=["waveformEffect","waveform"];static get Types(){return this.#V}get#A(){return V.Types}#me(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.#A.includes(e),`invalid vibrationType "${e}"`)}#ge(e,t,r){_.assertWithError(r?.byteLength>0,"no data received");const s=this.#K(e);this.#me(t);const n=this.#A.indexOf(t);_.log({locationsBitmask:s,vibrationTypeIndex:n,dataView:r});const a=U(s,n,r.byteLength,r);return _.log({data:a}),a}}const A=c("Device",{log:!1});class z{constructor(){this.connectionManager=new z.#le,this.#fe.onDataReceived=this.#de.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()}))}static get#le(){return D}static#pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];get#r(){return z.#pe}#ve=new h(this.#r);addEventListener(e,t,r){this.#ve.addEventListener(e,t,r)}#ye(e){this.#ve.dispatchEvent(e)}removeEventListener(e,t){return this.#ve.removeEventListener(e,t)}#Se;get connectionManager(){return this.#Se}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#be.bind(this),e.onMessageReceived=this.#Ee.bind(this)),this.#Se=e,A.log("assigned new connectionManager",this.#Se)):A.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#l(){A.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}#we=!1;get reconnectOnDisconnection(){return this.#we}set reconnectOnDisconnection(e){A.assertTypeWithError(e,"boolean"),this.#we=e}#Ce;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#l(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}get connectionStatus(){return this.#Se?.status}#be(e){switch(A.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(A.log("starting reconnect interval..."),this.#Ce=setInterval((()=>{A.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Ce&&(A.log("clearing reconnect interval"),clearInterval(this.#Ce),this.#Ce=void 0),this.#ye({type:"connectionStatus",message:{connectionStatus:e}}),this.#ye({type:this.connectionStatus}),e){case"connected":case"not connected":this.#ye({type:"isConnected",message:{isConnected:this.isConnected}})}}#De(){this.#Te=null,this.#Me=null,this.#Re=null;for(const e in this.#Le)this.#Le[e]=null}#Ee(e,t){switch(A.log({messageType:e,dataView:t}),e){case"manufacturerName":const r=this.#We.decode(t);A.log({manufacturerName:r}),this.#xe({manufacturerName:r});break;case"modelNumber":const s=this.#We.decode(t);A.log({modelNumber:s}),this.#xe({modelNumber:s});break;case"softwareRevision":const n=this.#We.decode(t);A.log({softwareRevision:n}),this.#xe({softwareRevision:n});break;case"hardwareRevision":const a=this.#We.decode(t);A.log({hardwareRevision:a}),this.#xe({hardwareRevision:a});break;case"firmwareRevision":const i=this.#We.decode(t);A.log({firmwareRevision:i}),this.#xe({firmwareRevision:i});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),A.log({pnpId:o}),this.#xe({pnpId:o});break;case"serialNumber":const c=this.#We.decode(t);A.log({serialNumber:c});break;case"batteryLevel":const u=t.getUint8(0);A.log("received battery level",{batteryLevel:u}),this.#Oe(u);break;case"getName":const h=this.#We.decode(t);A.log({name:h}),this.#Ie(h);break;case"getType":const g=t.getUint8(0),m=this.#A[g];A.log({typeEnum:g,type:m}),this.#Ne(m);break;case"getSensorConfiguration":const l=this.#ke.parse(t);A.log({sensorConfiguration:l}),this.#$e(l);break;case"sensorData":this.#fe.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#Pe=new TextEncoder;get#Ue(){return z.#Pe}static#_e=new TextDecoder;get#We(){return z.#_e}#Le={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Le}get#Ve(){return Object.values(this.#Le).every((e=>null!=e))}#xe(e){A.log({partialDeviceInformation:e});for(const t in e)this.#ye({type:t,message:{[t]:e[t]}});Object.assign(this.#Le,e),A.log({deviceInformation:this.#Le}),this.#Ve&&(A.log("completed deviceInformation"),this.#ye({type:"deviceInformation",message:{deviceInformation:this.#Le}}))}#Re=null;get batteryLevel(){return this.#Re}#Oe(e){A.assertTypeWithError(e,"number"),this.#Re!=e?(this.#Re=e,A.log({updatedBatteryLevel:this.#Re}),this.#ye({type:"batteryLevel",message:{batteryLevel:this.#Re}})):A.warn(`duplicate batteryLevel assignment ${e}`)}#Te;get name(){return this.#Te}#Ie(e){A.assertTypeWithError(e,"string"),this.#Te=e,A.log({updatedName:this.#Te}),this.#ye({type:"getName",message:{name:this.#Te}})}static get MinNameLength(){return 2}get minNameLength(){return z.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return z.MaxNameLength}async setName(e){this.#l(),A.assertTypeWithError(e,"string"),A.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),A.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Ue.encode(e);A.log({setNameData:t}),await this.#Se.sendMessage("setName",t)}static#V=["leftInsole","rightInsole"];static get Types(){return this.#V}get#A(){return z.Types}#Me;get type(){return this.#Me}#Ae(e){A.assertTypeWithError(e,"string"),A.assertWithError(this.#A.includes(e),`invalid type "${e}"`)}#Ne(e){this.#Ae(e),e!=this.type?(this.#Me=e,A.log({updatedType:this.#Me}),this.#fe.deviceType=this.#Me,this.#ke.deviceType=this.#Me,this.#ye({type:"getType",message:{type:this.#Me}})):A.warn("redundant type assignment")}async setType(e){this.#l(),this.#Ae(e);const t=this.#A.indexOf(e),r=Uint8Array.from([t]);A.log({setTypeData:r}),await this.#Se.sendMessage("setType",r)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ze=["left","right"];static get InsoleSides(){return this.#ze}get insoleSides(){return z.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static#Be=N.Types;static get SensorTypes(){return this.#Be}get sensorTypes(){return z.SensorTypes}#ke=new $;#Fe;get sensorConfiguration(){return this.#Fe}static get MaxSensorRate(){return $.MaxSensorRate}static get SensorRateStep(){return $.SensorRateStep}#$e(e){this.#Fe=e,A.log({updatedSensorConfiguration:this.#Fe}),this.#ke.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(A.log("clearing sensorDataManager timestamp..."),this.#fe.clearTimestamp()),this.#ye({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#l(),A.log({newSensorConfiguration:e});const t=this.#ke.createData(e);A.log({setSensorConfigurationData:t}),await this.#Se.sendMessage("setSensorConfiguration",t)}static#qe=!0;static get ClearSensorConfigurationOnLeave(){return this.#qe}static set ClearSensorConfigurationOnLeave(e){A.assertTypeWithError(e,"boolean"),this.#qe=e}#He=z.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#He}set clearSensorConfigurationOnLeave(e){A.assertTypeWithError(e,"boolean"),this.#He=e}static#je={};static get ZeroSensorConfiguration(){return this.#je}static{this.SensorTypes.forEach((e=>{this.#je[e]=0}))}get zeroSensorConfiguration(){return z.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#fe=new N;#de(e,t){A.log({sensorType:e,sensorData:t}),this.#ye({type:e,message:t}),this.#ye({type:"sensorData",message:t})}#Ze=new V;static get VibrationLocations(){return V.Locations}static get VibrationTypes(){return V.Types}static get VibrationWaveformEffects(){return V.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return V.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return V.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return V.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return V.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return V.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return V.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:r,type:s}=e;let n;switch(s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:a}=t;n=this.#Ze.createWaveformEffectsData(r,s,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Ze.createWaveformData(r,s)}break;default:throw Error(`invalid vibration type "${s}"`)}A.log({type:s,dataView:n}),t=U(t,n)})),await this.#Se.sendMessage("triggerVibration",t)}}const B=c("DevicePair",{log:!0});class F{static#pe=["pressure"];get#r(){return F.#pe}#ve=new h(this.#r);addEventListener(e,t,r){this.#ve.addEventListener(e,t,r)}#ye(e){this.#ve.dispatchEvent(e)}removeEventListener(e,t){return this.#ve.removeEventListener(e,t)}static get Sides(){return z.InsoleSides}get sides(){return F.Sides}#Qe;get left(){return this.#Qe}set left(e){this.#Ge(e,"left")}#Je;get right(){return this.#Je}set right(e){this.#Ge(e,"right")}get isConnected(){this.sides.every((e=>this[e]?.isConnected))}#Ge(e,t){if(B.assertWithError(e.isInsole,"device must be an insole"),B.assertWithError(e.insoleSide==t,`attempted to assign ${e.insoleSide} insole to ${t} side`),e!=this[t]){switch(this[t]&&m(this[t],this.#Ke),g(e,this.#Ke),t){case"left":this.#Qe=e;break;case"right":this.#Je=e}B.log(`assigned ${t} insole`,e),this.resetCenterOfPressureRange()}else B.warn("attempted to assign the same insole")}#Ke={pressure:this.#Xe.bind(this)};#Ye={};#N=new M;resetCenterOfPressureRange(){this.#N.resetCenterOfPressureRange()}#Xe(e){const{timestamp:t,pressure:r}=e.message;this.#Ye[e.target.insoleSide]={timestamp:t,pressure:r},this.isConnected&&this.#et&&this.#tt()}get#et(){this.sides.every((e=>e in this.#Ye))}static#W={pressure:L.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#W}get scalars(){return F.Scalars}#tt(){const e=this.scalars.pressure,t={rawSum:0,normalizedSum:0};this.#Ye.left.data.rawSum,this.sides.forEach((e=>{t.rawSum+=this.#Ye[e].data.rawSum})),t.rawSum>0&&(t.normalizedSum=t.rawSum*e,t.center={x:0,y:0},this.sides.forEach((e=>{const r=this.#Ye[e].data,s=r.rawSum/rawPressureSum;t.center.y+=r.center.y*s,"right"==e&&(t.center.x=s)})),this.#N.updateCenterOfPressureRange(t.center),t.calibratedCenter=this.#N.getCalibratedCenterOfPressure(t.center)),B.log({pressure:t}),this.#ye({type:"pressure",message:{pressure:t}})}}var q={setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)},Device:z,DevicePair:F};export{q as default};
