/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function s(){}e&&navigator.userAgent.includes("Android");const n=console.log.bind(console),r=console.warn.bind(console),i=console.error.bind(console),a=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new o(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?n:s}get warn(){return this.#t.warn?r:s}get error(){return this.#t.error?i:s}get assert(){return this.#t.assert?a:s}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}}function c(e,t){return o.create(e,t)}const h=c("EventDispatcher",{log:!1});class u{constructor(e){h.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#s=e}#s;#n(e){return!this.#s||this.#s.includes(e)}#r(e){h.assertWithError(this.#n(e),`invalid event type "${e}"`)}#i;addEventListener(e,t,s){if(h.log(`adding "${e}" eventListener`,t),this.#r(e),this.#i||(this.#i={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#i;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return h.log(`has "${e}" eventListener?`,t),this.#r(e),this.#i?.[e]?.includes(t)}removeEventListener(e,t){if(h.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#i[e].indexOf(t);return this.#i[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#i?.[e.type]){e.target=this;const t=this.#i[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function g(e,t){Object.entries(t).forEach((([t,s])=>{e.addEventListener(t,s)}))}function l(e,t){Object.entries(t).forEach((([t,s])=>{e.removeEventListener(t,s)}))}const d=c("ConnectionManager");class m{onStatusUpdated;onMessageReceived;static#a(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#a("type")}get type(){return this.constructor.type}#c(){d.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){d.assertWithError(this.constructor!=m,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c()}#u="not connected";get status(){return this.#u}set status(e){d.assertTypeWithError(e,"string"),this.#u!=e?(d.log(`new connection status "${e}"`),this.#u=e,this.onStatusUpdated?.(this.status)):d.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){d.assertWithError(!this.isConnected,"device is already connected")}#l(){d.assertWithError("connecting"!=this.status,"device is already connecting")}#d(){d.assertWithError(this.isConnected,"device is not connected")}#m(){d.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#p(){this.#d(),this.#m()}async connect(){this.#g(),this.#l(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#l(),d.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#d(),this.#m(),this.status="disconnecting"}async sendMessage(e,t){this.#p(),d.log("sending message",{messageType:e,data:t})}}if(t){var p=require("webbluetooth").BluetoothUUID}if(e)p=window.BluetoothUUID;function v(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function f(e){return p.getCharacteristic(e)}function S(e){return p.getService(e)}const y=Object.freeze({services:{deviceInformation:{uuid:S("device_information"),characteristics:{manufacturerName:{uuid:f("manufacturer_name_string")},modelNumber:{uuid:f("model_number_string")},hardwareRevision:{uuid:f("hardware_revision_string")},firmwareRevision:{uuid:f("firmware_revision_string")},softwareRevision:{uuid:f("software_revision_string")},pnpId:{uuid:f("pnp_id")},serialNumber:{uuid:f("serial_number_string")}}},battery:{uuid:S("battery_service"),characteristics:{batteryLevel:{uuid:f("battery_level")}}},main:{uuid:v(0),characteristics:{name:{uuid:v(1)},type:{uuid:v(2)},sensorConfiguration:{uuid:v(3)},sensorData:{uuid:v(4)},vibration:{uuid:v(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,s])=>e==s.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>e==s.uuid))?.[0],t))),t}}),b=y.serviceUUIDs,E=y.optionalServiceUUIDs;const D=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var w={bluetooth:t}}if(e)w=window.navigator;class C extends m{#v={characteristicvaluechanged:this.#f.bind(this)};#S={gattserverdisconnected:this.#y.bind(this)};static get isSupported(){return"bluetooth"in w}static get type(){return"webBluetooth"}#b;get device(){return this.#b}set device(e){this.#b!=e?(this.#b&&l(this.#b,this.#S),e&&g(e,this.#S),this.#b=e):D.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#D=new Map;async connect(){await super.connect();try{device=await w.bluetooth.requestDevice({filters:[{services:b}],optionalServices:e?E:[]}),D.log("got BluetoothDevice"),this.device=device,D.log("connecting to device...");const t=await this.device.gatt.connect();D.log(`connected to device? ${t.connected}`),await this.#w(),D.log("fully connected"),this.status="connected"}catch(e){D.error(e),this.status="not connected",this.server?.disconnect(),this.#C()}}async#w(){this.#C(),D.log("getting services...");const e=await this.server.getPrimaryServices();D.log("got services",e.length),D.log("getting characteristics...");for(const n in e){const r=e[n],i=(s=r.uuid,y.getServiceNameFromUUID(s));if(D.assertWithError(i,`no name found for service uuid "${r.uuid}"`),D.log(`got "${i}" service`),"dfu"==i){D.log("skipping dfu service");continue}r._name=i,this.#E.set(i,r),D.log(`getting characteristics for "${i}" service`);const a=await r.getCharacteristics();D.log(`got characteristics for "${i}" service`);for(const e in a){const s=a[e],n=(t=s.uuid,y.getCharacteristicNameFromUUID(t));D.assertWithError(n,`no name found for characteristic uuid "${s.uuid}" in "${i}" service`),D.log(`got "${n}" characteristic in "${i}" service`),s._name=n,this.#D.set(n,s),g(s,this.#v),s.properties.read&&(D.log(`reading "${n}" characteristic...`),await s.readValue()),s.properties.notify&&(D.log(`starting notifications for "${n}" characteristic`),await s.startNotifications())}}var t,s}#C(){this.device&&l(this.device,this.#S),this.#D.forEach((e=>{l(e,this.#v)}))}async disconnect(){await super.disconnect(),D.log("disconnecting from device..."),this.server?.disconnect(),this.#C()}#f(e){D.log("oncharacteristicvaluechanged");const t=e.target,s=t._name;D.assertWithError(s,`no name found for characteristic with uuid "${t.uuid}"`),D.log(`oncharacteristicvaluechanged for "${s}" characteristic`);const n=t.value;switch(D.assertWithError(n,`no data found for "${s}" characteristic`),D.log(`data for "${s}" characteristic`,Array.from(new Uint8Array(n.buffer))),s){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${s}"`)}}#y(e){D.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s;switch(await super.sendMessage(...arguments),e){case"setName":s=this.#D.get("name");break;case"setType":s=this.#D.get("type");break;case"setSensorConfiguration":s=this.#D.get("sensorConfiguration");break;case"triggerVibration":s=this.#D.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}D.assert(s,"no characteristic found"),await s.writeValueWithResponse(t),s.properties.read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),D.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(D.log("successfully reconnected!"),await this.#w(),this.status="connected"):(D.log("unable to reconnect"),this.status="not connected")}}function L(e,t,s){return(e-t)/(s-t)}c("NobleConnectionManager",{log:!0}),t&&require("@abandonware/noble");class T{#L;resetRange(){this.#L={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}}}constructor(){this.resetRange()}updateCenterOfPressureRange(e){this.#L.min.x=Math.min(e.x,this.#L.min.x),this.#L.min.y=Math.min(e.y,this.#L.min.y),this.#L.max.x=Math.max(e.x,this.#L.max.x),this.#L.max.y=Math.max(e.y,this.#L.max.y)}getCalibratedCenterOfPressure(e){return{x:L(e.x,this.#L.min.x,this.#L.max.x),y:L(e.y,this.#L.min.y,this.#L.max.y)}}}const M=c("PressureSensorDataManager",{log:!0});class R{#T;get deviceType(){return this.#T}set deviceType(e){M.assertTypeWithError(e,"string"),this.#T!=e?(M.log({newDeviceType:e}),this.#T=e,this.#M(),this.resetPressureRange()):M.warn(`redundant deviceType assignment "${e}"`)}static#R=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#R}get names(){return R.Names}static#W={pressure:2**-16};static get Scalars(){return this.#W}get scalars(){return R.Scalars}static#O=8;static get NumberOfPressureSensors(){return this.#O}get numberOfPressureSensors(){return R.NumberOfPressureSensors}static#k=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#k}#x;get pressureSensorPositions(){return this.#x}#M(){const e=R.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));M.log({pressureSensorPositions:e}),this.#x=e}#I=new T;resetRange(){this.#I.resetRange()}parsePressure(e,t){const s=this.scalars.pressure,n={sensors:[],rawSum:0,normalizedSum:0};for(let r=0;r<this.numberOfPressureSensors;r++,t+=2){const i=e.getUint16(t,!0),a=i*s,o=this.pressureSensorPositions[r],c=this.names[r];n.sensors[r]={rawValue:i,normalizedValue:a,position:o,name:c},n.rawSum+=i,n.normalizedSum=a/this.numberOfPressureSensors}return n.rawSum>0&&(n.center={x:0,y:0},n.sensors.forEach((e=>{e.weightedValue=e.rawValue/n.rawSum,n.center.x+=e.position.x*e.weightedValue,n.center.y+=e.position.y*e.weightedValue})),this.#I.updateCenterOfPressureRange(n.center),n.calibratedCenter=this.#I.getCalibratedCenterOfPressure(n.center)),M.log({pressure:n}),n}}const W=c("MotionSensorDataManager",{log:!0});class O{#T;get deviceType(){return this.#T}set deviceType(e){W.assertTypeWithError(e,"string"),this.#T!=e?(W.log({newDeviceType:e}),this.#T=e):W.warn(`redundant deviceType assignment "${e}"`)}static#W={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#W}get scalars(){return O.Scalars}static#N=6;static get Vector3Size(){return this.#N}get vector3Size(){return O.Vector3Size}parseVector3(e,t,s){let[n,r,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:r,z:i};return W.log({vector:a}),a}static#P=8;static get QuaternionSize(){return this.#P}get quaternionSize(){return O.QuaternionSize}parseQuaternion(e,t,s){let[n,r,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:r,z:i,w:a};return W.log({quaternion:o}),o}}c("BarometerSensorDataManager",{log:!0});class k{static#W={barometer:.78125};static get Scalars(){return this.#W}get scalars(){return k.Scalars}}const x=c("SensorDataManager",{log:!0});class I{#T;get deviceType(){return this.#T}set deviceType(e){x.assertTypeWithError(e,"string"),this.#T!=e?(x.log({newDeviceType:e}),this.#T=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):x.warn(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new R;motionSensorDataManager=new O;barometerSensorDataManager=new k;static#U=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#U}get#$(){return I.Types}static AssertValidSensorType(e){x.assertTypeWithError(e,"string"),x.assertWithError(this.#U.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){x.assertTypeWithError(e,"number"),x.assertWithError(e in this.#U,`invalid sensorTypeEnum ${e}`)}onDataReceived;#_=0;#A=0;clearTimestamp(){x.log("clearing sensorDataManager timestamp data"),this.#_=0,this.#A=0}#V(e,t){const s=e.getUint16(t,!0);s<this.#A&&(this.#_+=65536),this.#A=s;return s+this.#_}parse(e){x.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#V(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let r;I.AssertValidSensorTypeEnum(n);const i=e.getUint8(t++),a=this.#$[n];switch(x.log({sensorTypeEnum:n,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":r=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:x.error(`uncaught sensorType "${a}"`)}t+=i,x.assertWithError(r,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:r})}}static get NumberOfPressureSensors(){return R.NumberOfPressureSensors}get numberOfPressureSensors(){return I.NumberOfPressureSensors}static get PressureSensorNames(){return R.Names}get pressureSensorNames(){return I.PressureSensorNames}}const N=c("SensorConfigurationManager",{log:!0});class P{#T;get deviceType(){return this.#T}set deviceType(e){N.assertTypeWithError(e,"string"),this.#T!=e?(N.log({newDeviceType:e}),this.#T=e):N.warn(`redundant deviceType assignment "${e}"`)}#z;#B(e){N.assertWithError(this.#z,"must get initial sensorConfiguration");const t=this.#z?.includes(e);return N.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0,n=0;s<e.byteLength;s+=2,n++){const r=I.Types[n];if(!r){N.warn(`unknown sensorType index ${n}`);break}const i=e.getUint16(2*s,!0);N.log({sensorType:r,sensorRate:i}),t[r]=i}return N.log({parsedSensorConfiguration:t}),this.#z=Object.keys(t),t}static#F=65535;static get MaxSensorRate(){return this.#F}get maxSensorRate(){return P.MaxSensorRate}static#H=5;static get SensorRateStep(){return this.#H}get sensorRateStep(){return P.SensorRateStep}#q(e){N.assertTypeWithError(e,"number"),N.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),N.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),N.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#B(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{I.AssertValidSensorType(t);const r=I.Types.indexOf(t);s.setUint8(3*n,r);const i=e[t];this.#q(i),s.setUint16(3*n+1,e[t],!0)})),N.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const U=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];function $(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}const _=c("VibrationManager");class A{static#j=["front","rear"];static get Locations(){return this.#j}get locations(){return A.Locations}#Z(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#Q(e){this.#G(e),e.forEach((e=>{this.#Z(e)}))}#K(e){this.#Q(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),_.log({locationsBitmask:t}),_.assertWithError(t>0,"locationsBitmask must not be zero"),t}#G(e){_.assertWithError(Array.isArray(e),"passed non-array"),_.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return U}get waveformEffects(){return A.WaveformEffects}#J(e){_.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#X=1270;static get MaxWaveformEffectSegmentDelay(){return this.#X}get maxWaveformEffectSegmentDelay(){return A.MaxWaveformEffectSegmentDelay}#Y(e){if(null!=e.effect){const t=e.effect;this.#J(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;_.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),_.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ee(t)}}static#te=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#te}get maxWaveformEffectSegmentLoopCount(){return A.MaxWaveformEffectSegmentLoopCount}#ee(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#se=8;static get MaxNumberOfWaveformEffectSegments(){return this.#se}get maxNumberOfWaveformEffectSegments(){return A.MaxNumberOfWaveformEffectSegments}#ne(e){this.#G(e),_.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Y(e)}))}static#re=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#re}get maxWaveformEffectSequenceLoopCount(){return A.MaxWaveformEffectSequenceLoopCount}#ie(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ae=2550;static get MaxWaveformSegmentDuration(){return this.#ae}get maxWaveformSegmentDuration(){return A.MaxWaveformSegmentDuration}#oe(e){_.assertTypeWithError(e.amplitude,"number"),_.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),_.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),_.assertTypeWithError(e.duration,"number"),_.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),_.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#ce=20;static get MaxNumberOfWaveformSegments(){return this.#ce}get maxNumberOfWaveformSegments(){return A.MaxNumberOfWaveformSegments}#he(e){this.#G(e),_.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#oe(e)}))}createWaveformEffectsData(e,t,s=0){this.#ne(t),this.#ie(s);let n=[],r=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[r++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[r++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[r]=0);const i=e%4*2;n[r]|=s<<i,3!=e&&7!=e||r++}0!=s&&(n[r++]=s);const o=new DataView(Uint8Array.from(n).buffer);return _.log({dataArray:n,dataView:o}),this.#ue(e,"waveformEffect",o)}createWaveformData(e,t){this.#he(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),_.log({dataView:s}),this.#ue(e,"waveform",s)}static#U=["waveformEffect","waveform"];static get Types(){return this.#U}get#$(){return A.Types}#ge(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.#$.includes(e),`invalid vibrationType "${e}"`)}#ue(e,t,s){_.assertWithError(s?.byteLength>0,"no data received");const n=this.#K(e);this.#ge(t);const r=this.#$.indexOf(t);_.log({locationsBitmask:n,vibrationTypeIndex:r,dataView:s});const i=$(n,r,s.byteLength,s);return _.log({data:i}),i}}const V=c("Device",{log:!1});class z{constructor(){this.connectionManager=new z.#le,this.#de.onDataReceived=this.#me.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{z.#pe(this)}))}static get#le(){return C}static#ve=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#ve}get eventTypes(){return z.#ve}#fe=new u(this.eventTypes);addEventListener(e,t,s){this.#fe.addEventListener(e,t,s)}#Se(e){this.#fe.dispatchEvent(e)}removeEventListener(e,t){return this.#fe.removeEventListener(e,t)}#ye;get connectionManager(){return this.#ye}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#be.bind(this),e.onMessageReceived=this.#Ee.bind(this)),this.#ye=e,V.log("assigned new connectionManager",this.#ye)):V.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#d(){V.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#De=!1;static get ReconnectOnDisconnection(){return this.#De}static set ReconnectOnDisconnection(e){V.assertTypeWithError(e,"boolean"),this.#De=e}#we=z.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#we}set reconnectOnDisconnection(e){V.assertTypeWithError(e,"boolean"),this.#we=e}#Ce;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#d(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}get connectionStatus(){return this.#ye?.status}#be(e){switch(V.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(V.log("starting reconnect interval..."),this.#Ce=setInterval((()=>{V.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Ce&&(V.log("clearing reconnect interval"),clearInterval(this.#Ce),this.#Ce=void 0),this.#Se({type:"connectionStatus",message:{connectionStatus:e}}),this.#Se({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Se({type:"isConnected",message:{isConnected:this.isConnected}})}}#Le(){this.#Te=null,this.#Me=null,this.#Re=null;for(const e in this.#We)this.#We[e]=null}#Ee(e,t){switch(V.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Oe.decode(t);V.log({manufacturerName:s}),this.#ke({manufacturerName:s});break;case"modelNumber":const n=this.#Oe.decode(t);V.log({modelNumber:n}),this.#ke({modelNumber:n});break;case"softwareRevision":const r=this.#Oe.decode(t);V.log({softwareRevision:r}),this.#ke({softwareRevision:r});break;case"hardwareRevision":const i=this.#Oe.decode(t);V.log({hardwareRevision:i}),this.#ke({hardwareRevision:i});break;case"firmwareRevision":const a=this.#Oe.decode(t);V.log({firmwareRevision:a}),this.#ke({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),V.log({pnpId:o}),this.#ke({pnpId:o});break;case"serialNumber":const c=this.#Oe.decode(t);V.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);V.log("received battery level",{batteryLevel:h}),this.#xe(h);break;case"getName":const u=this.#Oe.decode(t);V.log({name:u}),this.#Ie(u);break;case"getType":const g=t.getUint8(0),l=this.#$[g];V.log({typeEnum:g,type:l}),this.#Ne(l);break;case"getSensorConfiguration":const d=this.#Pe.parse(t);V.log({sensorConfiguration:d}),this.#Ue(d);break;case"sensorData":this.#de.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#$e=new TextEncoder;get#_e(){return z.#$e}static#Ae=new TextDecoder;get#Oe(){return z.#Ae}#We={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#We}get#Ve(){return Object.values(this.#We).every((e=>null!=e))}#ke(e){V.log({partialDeviceInformation:e});for(const t in e)this.#Se({type:t,message:{[t]:e[t]}});Object.assign(this.#We,e),V.log({deviceInformation:this.#We}),this.#Ve&&(V.log("completed deviceInformation"),this.#Se({type:"deviceInformation",message:{deviceInformation:this.#We}}))}#Re=null;get batteryLevel(){return this.#Re}#xe(e){V.assertTypeWithError(e,"number"),this.#Re!=e?(this.#Re=e,V.log({updatedBatteryLevel:this.#Re}),this.#Se({type:"batteryLevel",message:{batteryLevel:this.#Re}})):V.warn(`duplicate batteryLevel assignment ${e}`)}#Te;get name(){return this.#Te}#Ie(e){V.assertTypeWithError(e,"string"),this.#Te=e,V.log({updatedName:this.#Te}),this.#Se({type:"getName",message:{name:this.#Te}})}static get MinNameLength(){return 2}get minNameLength(){return z.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return z.MaxNameLength}async setName(e){this.#d(),V.assertTypeWithError(e,"string"),V.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),V.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#_e.encode(e);V.log({setNameData:t}),await this.#ye.sendMessage("setName",t)}static#U=["leftInsole","rightInsole"];static get Types(){return this.#U}get#$(){return z.Types}#Me;get type(){return this.#Me}#ze(e){V.assertTypeWithError(e,"string"),V.assertWithError(this.#$.includes(e),`invalid type "${e}"`)}#Ne(e){this.#ze(e),e!=this.type?(this.#Me=e,V.log({updatedType:this.#Me}),this.#de.deviceType=this.#Me,this.#Pe.deviceType=this.#Me,this.#Se({type:"getType",message:{type:this.#Me}})):V.warn("redundant type assignment")}async setType(e){this.#d(),this.#ze(e);const t=this.#$.indexOf(e),s=Uint8Array.from([t]);V.log({setTypeData:s}),await this.#ye.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Be=["left","right"];static get InsoleSides(){return this.#Be}get insoleSides(){return z.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return I.Types}get sensorTypes(){return z.SensorTypes}static get PressureSensorNames(){return I.PressureSensorNames}get pressureSensorNames(){return z.PressureSensorNames}static get NumberOfPressureSensors(){return I.NumberOfPressureSensors}get numberOfPressureSensors(){return z.NumberOfPressureSensors}#Pe=new P;#Fe;get sensorConfiguration(){return this.#Fe}static get MaxSensorRate(){return P.MaxSensorRate}static get SensorRateStep(){return P.SensorRateStep}#Ue(e){this.#Fe=e,V.log({updatedSensorConfiguration:this.#Fe}),this.#Pe.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(V.log("clearing sensorDataManager timestamp..."),this.#de.clearTimestamp()),this.#Se({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#d(),V.log({newSensorConfiguration:e});const t=this.#Pe.createData(e);V.log({setSensorConfigurationData:t}),await this.#ye.sendMessage("setSensorConfiguration",t)}static#He=!0;static get ClearSensorConfigurationOnLeave(){return this.#He}static set ClearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#He=e}#qe=z.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#qe}set clearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#qe=e}static#je={};static get ZeroSensorConfiguration(){return this.#je}static{this.SensorTypes.forEach((e=>{this.#je[e]=0}))}get zeroSensorConfiguration(){return z.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#de=new I;#me(e,t){V.log({sensorType:e,sensorData:t}),this.#Se({type:e,message:t}),this.#Se({type:"sensorData",message:t})}resetPressureRange(){this.#de.pressureSensorDataManager.resetRange()}#Ze=new A;static get VibrationLocations(){return A.Locations}static get VibrationTypes(){return A.Types}static get VibrationWaveformEffects(){return A.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return A.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return A.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return A.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return A.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return A.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return A.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let r;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:i}=t;r=this.#Ze.createWaveformEffectsData(s,n,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;r=this.#Ze.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}V.log({type:n,dataView:r}),t=$(t,r)})),await this.#ye.sendMessage("triggerVibration",t)}static#Qe=[];static get ConnectedDevices(){return this.#Qe}static#Ge=!1;static get UseLocalStorage(){return this.#Ge}static set UseLocalStorage(e){this.#Ke(),V.assertTypeWithError(e,"boolean"),this.#Ge=e,this.#Ge&&!this.#Je&&this.#Xe()}static#Ye={};static#Je;static#Ke(){V.assertWithError(e,"localStorage is only available in the browser")}static#et="BS.Device";static#tt(){this.#Ke(),localStorage.setItem(this.#et,JSON.stringify(this.#Je))}static#Xe(){this.#Ke();let e=localStorage.getItem(this.#et);if("string"!=typeof e)return V.warn("no info found in localStorage"),this.#Je=Object.assign({},this.#Ye),void this.#tt();try{const t=JSON.parse(e);return V.log({configuration:t}),t}catch(e){V.error(e)}}static async GetDevices(){if(!e)return void V.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void V.warn("bluetooth is not available in this browser");if(!this.#Je)return void V.warn("localStorageConfiguration not found");const t=this.#Je;if(!t.bluetoothDeviceIds||0==t.bluetoothDeviceIds.length)return void V.log("no bluetoothDeviceIds found in configuration");const s=await navigator.bluetooth.getDevices();V.log({bluetoothDevices:s});return s.map((e=>{if(e.gatt&&t.bluetoothDeviceIds.includes(e.id)){const t=new z;t.connectionManager=new C;return t.connectionManager.device=e,t}})).filter(Boolean)}static#st=["deviceConnected","deviceDisconnected"];static get StaticEventTypes(){return this.#st}static#nt=new u(this.#st);static AddEventListener(e,t,s){this.#nt.addEventListener(e,t,s)}static#rt(e){this.#nt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#nt.removeEventListener(e,t)}static#pe(e){if(e.isConnected)if(this.#Qe.includes(e))V.warn("device already included");else{if(V.log("adding device",e),this.#Qe.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t=e.connectionManager;this.#Je.bluetoothDeviceIds.push(t.device.id),this.#tt()}this.#rt({type:"deviceConnected",message:{device:e}})}else this.#Qe.includes(e)?(V.log("removing device",e),this.#Qe.splice(this.#Qe.indexOf(e),1),this.#rt({type:"deviceDisconnected",message:{device:e}})):V.warn("device already not included")}}const B=c("DevicePairPressureSensorDataManager",{log:!0});class F{static get Sides(){return z.InsoleSides}get sides(){return z.InsoleSides}#it={};#I=new T;resetPressureRange(){this.#I.resetRange()}onDevicePressureData(e){const{pressure:t}=e.message;if(this.#it[e.target.insoleSide]=t,this.#at)return this.#ot()}get#at(){this.sides.every((e=>e in this.#it))}static#W={pressure:R.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#W}get scalars(){return DevicePair.Scalars}#ot(){const e=this.scalars.pressure,t={rawSum:0,normalizedSum:0};return this.#it.left.data.rawSum,this.sides.forEach((e=>{t.rawSum+=this.#it[e].data.rawSum})),t.rawSum>0&&(t.normalizedSum=t.rawSum*e,t.center={x:0,y:0},this.sides.forEach((e=>{const s=this.#it[e].data,n=s.rawSum/rawPressureSum;t.center.y+=s.center.y*n,"right"==e&&(t.center.x=n)})),this.#I.updateCenterOfPressureRange(t.center),t.calibratedCenter=this.#I.getCalibratedCenterOfPressure(t.center)),B.log({pressure:t}),t}}const H=c("DevicePairSensorDataManager",{log:!0});class q{static get Sides(){return z.InsoleSides}get sides(){return z.InsoleSides}#ct={};pressureSensorDataManager=new F;resetPressureRange(){this.sides.forEach((e=>{this[e].resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{type:t,timestamp:s}=e.message,n=t;let r;if(this.#ct[n]||(this.#ct[n]={}),this.#ct[n][e.target.insoleSide]=s,"pressure"===n)r=this.pressureSensorDataManager.onDevicePressureData(e);else H.warn(`uncaught sensorType "${n}"`);if(r){const e=Object.assign({},this.#ct[n]);this.onDataReceived?.(n,{timestamps:e,[n]:r})}else H.warn("no value received")}onDataReceived}const j=c("DevicePair",{log:!0});let Z=class e{constructor(){this.#de.onDataReceived=this.#me.bind(this)}static#ve=["pressure","isConnected"];static get EventTypes(){return this.#ve}get eventTypes(){return e.#ve}#fe=new u(this.eventTypes);addEventListener(e,t,s){this.#fe.addEventListener(e,t,s)}#Se(e){this.#fe.dispatchEvent(e)}removeEventListener(e,t){return this.#fe.removeEventListener(e,t)}static get Sides(){return z.InsoleSides}get sides(){return e.Sides}#ht;get left(){return this.#ht}#ut;get right(){return this.#ut}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}assignInsole(e){if(e.isInsole)return void j.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&l(s,this.#gt),g(e,this.#gt),t){case"left":this.#ht=e;break;case"right":this.#ut=e}return j.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Se({type:"isConnected",message:{isConnected:this.isConnected}}),s}j.warn("device already assigned")}#gt={pressure:this.#lt.bind(this),isConnected:this.#dt.bind(this)};#dt(e){this.#Se({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#de=new q;#lt(e){this.isConnected&&this.#de.onDeviceSensorData(e)}#me(e,t){j.log({sensorType:e,sensorData:t}),this.#Se({type:e,message:t})}resetPressureRange(){this.#de.resetPressureRange()}static#mt=new e;static get shared(){return this.#mt}static{z.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#mt.assignInsole(t)}))}};const Q=c("ServerUtils"),G=3e7,K=["ping","pong"];function J(e){return Q.assertTypeWithError(e,"string"),Q.assertWithError(K.includes(e),`invalid messageType "${e}"`),K.indexOf(e)}const X=Uint8Array.from([J("ping")]),Y=Uint8Array.from([J("pong")]),ee=c("IntervalManager",{log:!1});class te{#pt;get callback(){return this.#pt}set callback(e){ee.assertTypeWithError(e,"function"),ee.log({newCallback:e}),this.#pt=e,this.isRunning&&this.restart()}#vt;get interval(){return this.#vt}set interval(e){ee.assertTypeWithError(e,"number"),ee.assertWithError(e>0,"interval must be above 0"),ee.log({newInterval:e}),this.#vt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#ft=null;get isRunning(){return null!=this.#ft}start(){this.isRunning?ee.log("interval already running"):(ee.log("starting interval"),this.#ft=setInterval(this.#pt,this.#vt))}stop(){this.isRunning?(ee.log("stopping interval"),clearInterval(this.#ft),this.#ft=null):ee.log("interval already not running")}restart(){this.stop(),this.start()}}const se=c("WebSocketClient",{log:!0});class ne{constructor(e=`wss://${location.host}`){this.webSocket=new WebSocket(e)}#St;get webSocket(){return this.#St}set webSocket(e){this.#St!=e?(se.log("assigning webSocket",e),this.#St&&l(this.#St,this.#yt),g(e,this.#yt),this.#St=e,se.log("assigned webSocket")):se.warn("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#bt(){se.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Et(){se.assertWithError(this.isDisconnected,"not disconnected")}disconnect(){this.#bt(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.webSocket.close()}reconnect(){this.#Et(),this.webSocket=new WebSocket(this.webSocket.url)}static#De=!0;static get ReconnectOnDisconnection(){return this.#De}static set ReconnectOnDisconnection(e){se.assertTypeWithError(e,"boolean"),this.#De=e}#we=ne.#De;get reconnectOnDisconnection(){return this.#we}set reconnectOnDisconnection(e){se.assertTypeWithError(e,"boolean"),this.#we=e}#yt={open:this.#Dt.bind(this),message:this.#wt.bind(this),close:this.#Ct.bind(this),error:this.#Lt.bind(this)};#Dt(e){se.log("webSocket.open",e),this.#Tt.start()}async#wt(e){se.log("webSocket.message",e),this.#Tt.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Mt(s)}#Ct(e){se.log("webSocket.close",e),this.#Tt.stop(),this.#we&&setTimeout((()=>{this.reconnect()}),3e3)}#Lt(e){se.log("webSocket.error",e)}#Mt(e){se.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=K[s];switch(se.log({messageTypeEnum:s,messageType:n}),se.assertWithError(n,`invalid messageTypeEnum ${s}`),n){case"ping":this.#Rt();break;case"pong":break;default:se.error(`uncaught messageType "${n}"`)}}}#Tt=new te(this.#Wt.bind(this),G);#Wt(){this.#bt(),this.webSocket.send(X)}#Rt(){this.#bt(),this.webSocket.send(Y)}}c("ListenerUtils",{log:!1});const re=c("WebSocketServer",{log:!0});t&&require("ws");var ie={setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)},Device:z,DevicePair:Z,WebSocketClient:ne,WebSocketServer:class{#Ot;get server(){return this.#Ot}set server(e){var t,s;this.#Ot!=e?(re.log("assigning server..."),this.#Ot&&(re.log("clearing existing server..."),t=this.#Ot,s=this.#kt,Object.entries(s).forEach((([e,s])=>{t.removeListener(e,s)}))),function(e,t){Object.entries(t).forEach((([t,s])=>{e.addListener(t,s)}))}(e,this.#kt),this.#Ot=e,re.log("assigned server")):re.warn("redundant WebSocket assignment")}#kt={close:this.#xt.bind(this),connection:this.#It.bind(this),error:this.#Nt.bind(this),headers:this.#Pt.bind(this),listening:this.#Ut.bind(this)};#xt(){re.log("server.close")}#It(e){re.log("server.connection"),e.isAlive=!0,e.pingClientIntervalManager=new te((()=>this.#$t(e)),G),e.pingClientIntervalManager.start(),g(e,this.#_t)}#Nt(e){re.error(e)}#Pt(){}#Ut(){re.log("server.listening")}#_t={open:this.#At.bind(this),message:this.#Vt.bind(this),close:this.#zt.bind(this),error:this.#Bt.bind(this)};#At(e){re.log("client.open")}#Vt(e){re.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientIntervalManager.restart();const s=new DataView((n=e.data).buffer.slice(n.byteOffset,n.byteOffset+n.byteLength));var n;this.#Ft(t,s)}#zt(e){re.log("client.close");const t=e.target;t.pingClientIntervalManager.stop(),l(t,this.#_t)}#Bt(e){re.log("client.error")}#Ft(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),r=K[n];switch(re.log({messageTypeEnum:n,messageType:r}),re.assertWithError(r,`invalid messageTypeEnum ${n}`),r){case"ping":e.send(Y);break;case"pong":break;default:re.error(`uncaught messageType "${r}"`)}}}#$t(e){e.isAlive?(e.isAlive=!1,e.send(X)):e.terminate()}}};export{ie as default};
