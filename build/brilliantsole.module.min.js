/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class l{static#e={};constructor(e){if(l.#e[e])throw new Error(`"${e}" console already exists`);l.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new l(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function h(e,t){return l.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=h("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){d.error(e)}}}waitForEvent(e){return d.log(`waiting for event "${e}"`),this.#r(e),new Promise((t=>{this.addEventListener(e,(()=>{t()}),{once:!0})}))}}function p(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function f(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function v(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}const m=new Uint32Array(256);for(let e=0;e<256;++e)m[e]=v(e);function b(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(m[n^i]^s>>>8)>>>0}return s}const S=h("FileTransferManager",{log:!0});class y{static#o=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#o}get messageTypes(){return y.MessageTypes}static#c=[...this.#o,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#c}get eventTypes(){return y.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#h=["tflite"];static get Types(){return this.#h}get types(){return y.Types}#g(e){S.assertEnumWithError(e,this.types)}#d(e){S.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#u=["idle","sending","receiving"];static get Statuses(){return this.#u}get statuses(){return y.Statuses}#p(e){S.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#f=["startSend","startReceive","cancel"];static get Commands(){return this.#f}get commands(){return y.Commands}#v(e){S.assertEnumWithError(e,this.commands)}static async GetFileBuffer(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}async getFileBuffer(e){return y.GetFileBuffer(e)}static#m=0;static get MaxLength(){return this.#m}#b=y.MaxLength;get maxLength(){return this.#b}#S(e){S.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);S.log(`maxLength: ${t}kB`),this.#b=t}#y(e){S.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#D;get type(){return this.#D}#C(e){S.log("parseFileType",e);const t=e.getUint8(0);this.#d(t);const s=this.types[t];this.#T(s)}#T(e){S.log({type:e}),this.#D=e,this.#l({type:"getFileTransferType",message:{fileType:e}})}async#E(e){if(this.#g(e),this.type==e)return void S.log(`redundant type assignment ${e}`);const t=this.waitForEvent("getFileTransferType"),s=this.types.indexOf(e);this.sendMessage("setFileTransferType",Uint8Array.from([s])),await t}#w=0;get length(){return this.#w}#M(e){S.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#k(t)}#k(e){S.log(`length: ${e}kB`),this.#w=e,this.#l({type:"getFileLength",message:{fileLength:e}})}async#L(e){if(S.assertTypeWithError(e,"number"),this.#y(e),this.length==e)return void S.log(`redundant length assignment ${e}`);const t=this.waitForEvent("getFileLength"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileLength",s),await t}#N=0;get checksum(){return this.#N}#W(e){S.log("checksum",e);const t=e.getUint32(0,!0);this.#I(t)}#I(e){S.log({checksum:e}),this.#N=e,this.#l({type:"getFileChecksum",message:{fileChecksum:e}})}async#R(e){if(S.assertTypeWithError(e,"number"),this.checksum==e)return void S.log(`redundant checksum assignment ${e}`);const t=this.waitForEvent("getFileChecksum"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileChecksum",s),await t}async#O(e){this.#v(e);const t=this.waitForEvent("fileTransferStatus"),s=this.commands.indexOf(e);this.sendMessage("setFileTransferCommand",Uint8Array.from([s])),await t}#A="idle";get status(){return this.#A}#x(e){S.log("parseFileStatus",e);const t=e.getUint8(0);this.#p(t);const s=this.statuses[t];this.#$(s)}#$(e){S.log({status:e}),this.#A=e,this.#l({type:"fileTransferStatus",message:{fileTransferStatus:e}})}#U(){S.assertWithError("idle"==this.#A,"status is not idle")}#F(){S.assertWithError("idle"!=this.#A,"status is idle")}#P;async#V(e){S.log("parseFileBlock",e),this.#P.push(e.buffer);const t=this.#P.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#w;if(S.log(`received ${t} of ${this.#w} bytes (${100*s}%)`),this.#l({type:"fileTransferProgress",message:{progress:s}}),t!=this.#w)return;S.log("file transfer complete");let n=(new Date).toLocaleString();if("tflite"===this.type)n+=".tflite";const i=new File(this.#P,n),r=b(await i.arrayBuffer());S.log({checksum:r}),r==this.#N?(console.log("received file",i),this.#l({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#l({type:"fileReceived",message:{file:i}})):S.error(`wrong checksum - expected ${this.#N}, got ${r}`)}parseMessage(e,t){switch(S.log({messageType:e}),e){case"maxFileLength":this.#S(t);break;case"getFileTransferType":this.#C(t);break;case"getFileLength":this.#M(t);break;case"getFileChecksum":this.#W(t);break;case"fileTransferStatus":this.#x(t);break;case"getFileTransferBlock":this.#V(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#U(),this.#g(e);const s=await this.getFileBuffer(t);await this.#E(e);const n=s.byteLength;await this.#L(n);const i=b(s);await this.#R(i),await this.#O("startSend"),await this.#B(s)}async#B(e){return this.#_(e)}#z=256;async#_(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+this.#z),n=1-(e.byteLength-t)/e.byteLength;if(S.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#l({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage("setFileTransferBlock",s),this.#_(e,t+s.byteLength);S.log("finished sending buffer"),this.#l({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#U(),this.#g(e),this.#P=[],await this.#E(e),await this.#O("startReceive")}async cancel(){this.#F(),await this.#O("cancel")}sendMessage}const D=new TextEncoder,C=new TextDecoder;const T=65536;function E(e,t){const s=Date.now();var n;return(n=s)-n%T+e.getUint16(t,!0)}const w={min:1/0,max:-1/0};class M{#q=Object.assign({},w);reset(){Object.assign(this.#q,w)}update(e){this.#q.min=Math.min(e,this.#q.min),this.#q.max=Math.max(e,this.#q.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#q.min,this.#q.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class k{#q={x:new M,y:new M};reset(){this.#q.x.reset(),this.#q.y.reset()}update(e){this.#q.x.update(e.x),this.#q.y.update(e.y)}getNormalization(e){return{x:this.#q.x.getNormalization(e.x),y:this.#q.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const L=h("PressureSensorDataManager",{log:!0});class N{#j=[];get positions(){return this.#j}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;L.log({positions:t}),this.#j=t,this.#H=(s=this.numberOfSensors,n=()=>new M,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#H;#G=new k;resetRange(){this.#H.forEach((e=>e.reset())),this.#G.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),r=this.#H[s].updateAndGetNormalization(i),a=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:r,position:a},t.rawSum+=i,t.normalizedSum+=r/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#G.updateAndGetNormalization(t.center)),L.log({pressure:t}),t}}const W=h("MotionSensorDataManager",{log:!1});class I{static#J=6;static get Vector3Size(){return this.#J}get vector3Size(){return I.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return W.log({vector:r}),r}static#Q=8;static get QuaternionSize(){return this.#Q}get quaternionSize(){return I.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return W.log({quaternion:a}),a}}h("BarometerSensorDataManager",{log:!0});class R{static#Z={barometer:.78125};static get Scalars(){return this.#Z}get scalars(){return R.Scalars}}const O=h("ArrayBufferUtils",{log:!1}),A=new TextEncoder;function x(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return U(e)}if(e instanceof Array){return x(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return U(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function $(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function U(e){const t=A.encode(e);return x(t.byteLength,t)}function F(e,t,s){let n;return s&&(n=e.byteOffset+t+s),O.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const P=h("ParseUtils",{log:!0}),V=new TextDecoder;function B(e,t=0){const s=e.getUint8(t++);return{string:V.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function _(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),P.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),P.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=F(e,i,o);P.log({_dataView:c}),s(a,c),i+=o}}const z=h("SensorDataManager",{log:!1});class q{pressureSensorDataManager=new N;motionSensorDataManager=new I;barometerSensorDataManager=new R;static#h=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#h}get types(){return q.Types}#K=new Map;static AssertValidSensorType(e){z.assertTypeWithError(e,"string"),z.assertWithError(this.#h.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){z.assertTypeWithError(e,"number"),z.assertWithError(e in this.#h,`invalid sensorTypeEnum ${e}`)}onDataReceived;parseData(e){z.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=E(e,t);t+=2;_(new DataView(e.buffer,t),q.Types,((e,t)=>{const n=e,i=this.#K.get(n);let r;switch(n){case"pressure":r=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:z.error(`uncaught sensorType "${n}"`)}z.assertWithError(r,`no value defined for sensorType "${n}"`),this.onDataReceived(n,{timestamp:s,[n]:r})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=q.Types[s];if(!n){z.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);z.log({sensorType:n,sensorScalar:i}),this.#K.set(n,i)}}}const j=h("SensorConfigurationManager",{log:!1});class H{#X;#Y(e){j.assertWithError(this.#X,"must get initial sensorConfiguration");const t=this.#X?.includes(e);return j.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=q.Types[n];if(!i){j.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);j.log({sensorType:i,sensorRate:r}),t[i]=r}return j.log({parsedSensorConfiguration:t}),this.#X=Object.keys(t),t}static#ee=65535;static get MaxSensorRate(){return this.#ee}get maxSensorRate(){return H.MaxSensorRate}static#te=5;static get SensorRateStep(){return this.#te}get sensorRateStep(){return H.SensorRateStep}static#se(e){j.assertTypeWithError(e,"number"),j.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),j.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),j.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ne(e){H.#se(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#Y(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{q.AssertValidSensorType(t);const i=q.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#ne(r),s.setUint16(3*n+1,e[t],!0)})),j.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const G=h("TfliteManager",{log:!0});class J{static#o=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteNumberOfSamples","setTfliteNumberOfSamples","getTfliteSensorTypes","setTfliteSensorTypes","getTfliteNumberOfClasses","setTfliteNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#o}get messageTypes(){return J.MessageTypes}static#ie=["classification","regression"];static get Tasks(){return this.#ie}get tasks(){return J.Tasks}#re(e){G.assertEnumWithError(e,this.tasks)}#ae(e){G.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#c=[...this.#o];static get EventTypes(){return this.#c}get eventTypes(){return J.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#oe;get name(){return this.#oe}#ce(e){G.log("parseName",e);const t=C.decode(e);this.#le(t)}#le(e){G.log({name:e}),this.#oe=e,this.#l({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e){if(G.assertTypeWithError(e,"string"),this.name==e)return void G.log(`redundant name assignment ${e}`);const t=this.waitForEvent("getTfliteName"),s=D.encode(e);this.sendMessage("setTfliteName",s),await t}#he;get task(){return this.#he}#ge(e){G.log("parseTask",e);const t=e.getUint8(0);this.#ae(t);const s=this.tasks[t];this.#de(s)}#de(e){G.log({task:e}),this.#he=e,this.#l({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e){if(this.#re(e),this.task==e)return void G.log(`redundant task assignment ${e}`);const t=this.waitForEvent("getTfliteTask"),s=this.tasks.indexOf(e);this.sendMessage("setTfliteTask",Uint8Array.from([s])),await t}#ue;get sampleRate(){return this.#ue}#pe(e){G.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#fe(t)}#fe(e){G.log({sampleRate:e}),this.#ue=e,this.#l({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e){if(G.assertTypeWithError(e,"number"),e-=e%H.SensorRateStep,G.assertWithError(e>=H.SensorRateStep,`sampleRate must be multiple of ${H.SensorRateStep} greater than 0 (got ${e})`),this.#ue==e)return void G.log(`redundant sampleRate assignment ${e}`);const t=this.waitForEvent("getTfliteSampleRate"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteSampleRate",s),await t}#ve;get numberOfSamples(){return this.#ve}#me(e){G.log("parseNumberOfSamples",e);const t=e.getUint16(0,!0);this.#be(t)}#be(e){G.log({numberOfSamples:e}),this.#ve=e,this.#l({type:"getTfliteNumberOfSamples",message:{tfliteModelNumberOfSamples:e}})}async setNumberOfSamples(e){if(G.assertTypeWithError(e,"number"),G.assertWithError(e>0,`numberOfSamples must be greater than 1 (got ${e})`),this.#ve==e)return void G.log(`redundant numberOfSamples assignment ${e}`);const t=this.waitForEvent("getTfliteNumberOfSamples"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteNumberOfSamples",s),await t}static#Se=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#Se}static AssertValidSensorType(e){q.AssertValidSensorType(e),G.assertWithError(this.#Se.includes(e),`invalid tflite sensorType "${e}"`)}#ye=[];get sensorTypes(){return this.#ye.slice()}#De(e){G.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=q.Types[n];i?t.push(i):G.error(`invalid sensorTypeEnum ${n}`)}this.#Ce(t)}#Ce(e){G.log({sensorTypes:e}),this.#ye=e,this.#l({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(e){e.forEach((e=>{J.AssertValidSensorType(e)}));const t=this.waitForEvent("getTfliteSensorTypes");var s;const n=(e=(s=e).filter(((e,t)=>s.indexOf(e)==t))).map((e=>q.Types.indexOf(e))).sort();G.log(e,n),this.sendMessage("setTfliteSensorTypes",Uint8Array.from(n)),await t}#Te;get numberOfClasses(){return this.#Te}#Ee(e){G.log("parseNumberOfClasses",e);const t=e.getUint8(0);this.#we(t)}#we(e){G.log({numberOfClasses:e}),this.#Te=e,this.#l({type:"getTfliteNumberOfClasses",message:{tfliteModelNumberOfClasses:e}})}async setNumberOfClasses(e){if(G.assertTypeWithError(e,"number"),G.assertWithError(e>1,`numberOfClasses must be greated than 1 (received ${e})`),this.#Te==e)return void G.log(`redundant numberOfClasses assignment ${e}`);const t=this.waitForEvent("getTfliteNumberOfClasses");this.sendMessage("setTfliteNumberOfClasses",Uint8Array.from([e])),await t}#Me;get isReady(){return this.#Me}#ke(e){G.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Le(t)}#Le(e){G.log({isReady:e}),this.#Me=e,this.#l({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#Ne(){G.assertWithError(this.isReady,"tflite is not ready")}#We;get captureDelay(){return this.#We}#Ie(e){G.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#Re(t)}#Re(e){G.log({captureDelay:e}),this.#We=e,this.#l({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e){if(G.assertTypeWithError(e,"number"),this.#We==e)return void G.log(`redundant captureDelay assignment ${e}`);const t=this.waitForEvent("getTfliteCaptureDelay"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteCaptureDelay",s),await t}#Oe;get threshold(){return this.#Oe}#Ae(e){G.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#xe(t)}#xe(e){G.log({threshold:e}),this.#Oe=e,this.#l({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e){if(G.assertTypeWithError(e,"number"),G.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#Oe==e)return void G.log(`redundant threshold assignment ${e}`);const t=this.waitForEvent("getTfliteThreshold"),s=new DataView(new ArrayBuffer(4));s.setFloat32(0,e,!0),this.sendMessage("setTfliteThreshold",s),await t}#$e;get inferencingEnabled(){return this.#$e}#Ue(e){G.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#Fe(t)}#Fe(e){G.log({inferencingEnabled:e}),this.#$e=e,this.#l({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e){if(G.assertTypeWithError(e,"boolean"),this.#Ne(),this.#$e==e)return void G.log(`redundant inferencingEnabled assignment ${e}`);const t=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage("setTfliteInferencingEnabled",Uint8Array.from([e])),await t}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#Pe(e){G.log("parseInference",e);const t=E(e,0);G.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}G.log("values",s);const n={timestamp:t,values:s};this.#l({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(G.log({messageType:e}),e){case"getTfliteName":this.#ce(t);break;case"getTfliteTask":this.#ge(t);break;case"getTfliteSampleRate":this.#pe(t);break;case"getTfliteNumberOfSamples":this.#me(t);break;case"getTfliteSensorTypes":this.#De(t);break;case"getTfliteNumberOfClasses":this.#Ee(t);break;case"tfliteModelIsReady":this.#ke(t);break;case"getTfliteCaptureDelay":this.#Ie(t);break;case"getTfliteThreshold":this.#Ae(t);break;case"getTfliteInferencingEnabled":this.#Ue(t);break;case"tfliteModelInference":this.#Pe(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const Q=h("ConnectionManager",{log:!0});class Z{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","getCurrentTime","setCurrentTime","triggerVibration",...y.MessageTypes,...J.MessageTypes];static get MessageTypes(){return this.#o}get id(){this.#Ve("id")}onStatusUpdated;onMessageReceived;static#Be(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#Ve(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#Be("type")}get type(){return this.constructor.type}#_e(){Q.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ze(){Q.assertWithError(this.constructor!=Z,`${this.constructor.name} must be subclassed`)}constructor(){this.#ze(),this.#_e()}#A="not connected";get status(){return this.#A}set status(e){Q.assertTypeWithError(e,"string"),this.#A!=e?(Q.log(`new connection status "${e}"`),this.#A=e,this.onStatusUpdated?.(this.status)):Q.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#qe(){Q.assertWithError(!this.isConnected,"device is already connected")}#je(){Q.assertWithError("connecting"!=this.status,"device is already connecting")}#He(){Q.assertWithError(this.isConnected,"device is not connected")}#Ge(){Q.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Je(){this.#He(),this.#Ge()}async connect(){this.#qe(),this.#je(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#qe(),this.#je(),Q.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#He(),this.#Ge(),this.status="disconnecting",Q.log("disconnecting from device...")}async sendMessage(e,t){this.#Je(),Q.log("sending message",{messageType:e,data:t})}}const K=h("bluetoothUUIDs",{log:!1});if(t){var X=require("webbluetooth").BluetoothUUID}if(e)X=window.BluetoothUUID;function Y(e){return K.assertTypeWithError(e,"string"),K.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function ee(e){return X?.getCharacteristic?.(e)}function te(e){return X?.getService?.(e)}const se=Object.freeze({services:{deviceInformation:{uuid:te("device_information"),characteristics:{manufacturerName:{uuid:ee("manufacturer_name_string")},modelNumber:{uuid:ee("model_number_string")},hardwareRevision:{uuid:ee("hardware_revision_string")},firmwareRevision:{uuid:ee("firmware_revision_string")},softwareRevision:{uuid:ee("software_revision_string")},pnpId:{uuid:ee("pnp_id")},serialNumber:{uuid:ee("serial_number_string")}}},battery:{uuid:te("battery_service"),characteristics:{batteryLevel:{uuid:ee("battery_level")}}},main:{uuid:Y("0000"),characteristics:{name:{uuid:Y("1000")},type:{uuid:Y("1001")},sensorConfiguration:{uuid:Y("2000")},pressurePositions:{uuid:Y("2001")},sensorScalars:{uuid:Y("2002")},currentTime:{uuid:Y("2003")},sensorData:{uuid:Y("2004")},vibration:{uuid:Y("3000")},maxFileLength:{uuid:Y("4000")},fileTransferType:{uuid:Y("4001")},fileLength:{uuid:Y("4002")},fileChecksum:{uuid:Y("4003")},fileTransferCommand:{uuid:Y("4004")},fileTransferStatus:{uuid:Y("4005")},fileTransferBlock:{uuid:Y("4006")},tfliteModelName:{uuid:Y("5000")},tfliteModelTask:{uuid:Y("5001")},tfliteModelSampleRate:{uuid:Y("5002")},tfliteModelNumberOfSamples:{uuid:Y("5003")},tfliteModelSensorTypes:{uuid:Y("5004")},tfliteModelNumberOfClasses:{uuid:Y("5005")},tfliteModelIsReady:{uuid:Y("5006")},tfliteCaptureDelay:{uuid:Y("5007")},tfliteThreshold:{uuid:Y("5008")},tfliteInferencingEnabled:{uuid:Y("5009")},tfliteModelInference:{uuid:Y("500a")}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{dfu:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.dfu.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),ne=se.serviceUUIDs,ie=se.optionalServiceUUIDs,re=[...ne,...ie];function ae(e){return se.getServiceNameFromUUID(e)}const oe=[],ce=[],le=[];function he(e){return se.getCharacteristicNameFromUUID(e)}function ge(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":case"fileTransferCommand":case"fileTransferBlock":case"tfliteModelInference":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":case"currentTime":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferStatus":case"fileTransferBlock":case"tfliteModelName":case"tfliteModelTask":case"tfliteModelSampleRate":case"tfliteModelNumberOfSamples":case"tfliteModelSensorTypes":case"tfliteModelNumberOfClasses":case"tfliteModelIsReady":case"tfliteThreshold":case"tfliteCaptureDelay":case"tfliteInferencingEnabled":case"tfliteModelInference":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferCommand":case"fileTransferBlock":case"tfliteModelName":case"tfliteModelTask":case"tfliteModelNumberOfSamples":case"tfliteModelSampleRate":case"tfliteModelSensorTypes":case"tfliteModelNumberOfClasses":case"tfliteInferencingEnabled":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(se.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{ne.includes(t.uuid)&&oe.push(s.uuid),ce.push(s.uuid),le.push(e)}))}),[]);h("BluetoothConnectionManager",{log:!0});class de extends Z{onCharacteristicValueChanged(e,t){switch(e){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":case"maxFileLength":case"fileTransferStatus":case"tfliteModelIsReady":case"tfliteModelInference":this.onMessageReceived(e,t);break;case"name":this.onMessageReceived("getName",t);break;case"type":this.onMessageReceived("getType",t);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",t);break;case"currentTime":this.onMessageReceived("getCurrentTime",t);break;case"fileTransferType":this.onMessageReceived("getFileTransferType",t);break;case"fileLength":this.onMessageReceived("getFileLength",t);break;case"fileChecksum":this.onMessageReceived("getFileChecksum",t);break;case"fileTransferBlock":this.onMessageReceived("getFileTransferBlock",t);break;case"tfliteModelName":this.onMessageReceived("getTfliteName",t);break;case"tfliteModelTask":this.onMessageReceived("getTfliteTask",t);break;case"tfliteModelSampleRate":this.onMessageReceived("getTfliteSampleRate",t);break;case"tfliteModelNumberOfSamples":this.onMessageReceived("getTfliteNumberOfSamples",t);break;case"tfliteModelSensorTypes":this.onMessageReceived("getTfliteSensorTypes",t);break;case"tfliteModelNumberOfClasses":this.onMessageReceived("getTfliteNumberOfClasses",t);break;case"tfliteCaptureDelay":this.onMessageReceived("getTfliteCaptureDelay",t);break;case"tfliteThreshold":this.onMessageReceived("getTfliteThreshold",t);break;case"tfliteInferencingEnabled":this.onMessageReceived("getTfliteInferencingEnabled",t);break;default:throw new Error(`uncaught characteristicName "${e}"`)}}characteristicNameForMessageType(e){switch(e){case"setName":return"name";case"setType":return"type";case"setSensorConfiguration":return"sensorConfiguration";case"setCurrentTime":return"currentTime";case"triggerVibration":return"vibration";case"setFileTransferType":return"fileTransferType";case"setFileLength":return"fileLength";case"setFileChecksum":return"fileChecksum";case"setFileTransferCommand":return"fileTransferCommand";case"setFileTransferBlock":return"fileTransferBlock";case"setTfliteName":return"tfliteModelName";case"setTfliteTask":return"tfliteModelTask";case"setTfliteSampleRate":return"tfliteModelSampleRate";case"setTfliteNumberOfSamples":return"tfliteModelNumberOfSamples";case"setTfliteSensorTypes":return"tfliteModelSensorTypes";case"setTfliteNumberOfClasses":return"tfliteModelNumberOfClasses";case"setTfliteCaptureDelay":return"tfliteCaptureDelay";case"setTfliteThreshold":return"tfliteThreshold";case"setTfliteInferencingEnabled":return"tfliteInferencingEnabled";default:throw Error(`no characteristicName for messageType "${e}"`)}}}const ue=h("WebBluetoothConnectionManager",{log:!1});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var pe={bluetooth:t}}if(e)pe=window.navigator;class fe extends de{get id(){return this.device?.id}#Qe={characteristicvaluechanged:this.#Ze.bind(this)};#Ke={gattserverdisconnected:this.#Xe.bind(this)};static get isSupported(){return"bluetooth"in pe}static get type(){return"webBluetooth"}#Ye;get device(){return this.#Ye}set device(e){this.#Ye!=e?(this.#Ye&&f(this.#Ye,this.#Ke),e&&p(e,this.#Ke),this.#Ye=e):ue.log("tried to assign the same BluetoothDevice")}get server(){return this.#Ye?.gatt}get isConnected(){return this.server?.connected}#et=new Map;#tt=new Map;async connect(){await super.connect();try{const t=await pe.bluetooth.requestDevice({filters:[{services:ne}],optionalServices:e?ie:[]});ue.log("got BluetoothDevice"),this.device=t,ue.log("connecting to device...");const s=await this.device.gatt.connect();ue.log(`connected to device? ${s.connected}`),await this.#st(),ue.log("fully connected"),this.status="connected"}catch(e){ue.error(e),this.status="not connected",this.server?.disconnect(),this.#nt()}}async#st(){this.#nt(),ue.log("getting services...");const e=await this.server.getPrimaryServices();ue.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),ue.log("getting characteristics...");for(const t in e){const i=e[t];ue.log({service:i});const r=ae(i.uuid);if(ue.assertWithError(r,`no name found for service uuid "${i.uuid}"`),ue.log(`got "${r}" service`),"dfu"==r){ue.log("skipping dfu service");continue}i._name=r,this.#et.set(r,i),ue.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();ue.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];ue.log({characteristic:t});const i=he(t.uuid);ue.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),ue.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#tt.set(i,t),p(t,this.#Qe);const o=t.properties||ge(i);o.notify&&(ue.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(ue.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#it(t))}}}#nt(){this.device&&f(this.device,this.#Ke),this.#tt.forEach((e=>{f(e,this.#Qe)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#nt(),this.status="not connected"}#Ze(e){ue.log("oncharacteristicvaluechanged");const t=e.target;this.#it(t)}#it(e){ue.log("onCharacteristicValue");const t=e._name;ue.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),ue.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;ue.assertWithError(s,`no data found for "${t}" characteristic`),ue.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}#Xe(e){ue.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){await super.sendMessage(...arguments);const i=this.characteristicNameForMessageType(e);ue.log({characteristicName:i});const r=this.#tt.get(i);ue.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||ge(i);a.read&&!a.notify&&(ue.log("reading value after write..."),await r.readValue(),(s||n)&&this.#it(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),ue.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(ue.log("successfully reconnected!"),await this.#st(),this.status="connected"):(ue.log("unable to reconnect"),this.status="not connected")}}const ve=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],me=h("VibrationManager");class be{static#rt=["front","rear"];static get Locations(){return this.#rt}get locations(){return be.Locations}#at(e){me.assertTypeWithError(e,"string"),me.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ot(e){this.#ct(e),e.forEach((e=>{this.#at(e)}))}#lt(e){this.#ot(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),me.log({locationsBitmask:t}),me.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ct(e){me.assertWithError(Array.isArray(e),"passed non-array"),me.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return ve}get waveformEffects(){return be.WaveformEffects}#ht(e){me.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#gt=1270;static get MaxWaveformEffectSegmentDelay(){return this.#gt}get maxWaveformEffectSegmentDelay(){return be.MaxWaveformEffectSegmentDelay}#dt(e){if(null!=e.effect){const t=e.effect;this.#ht(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;me.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),me.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ut(t)}}static#pt=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#pt}get maxWaveformEffectSegmentLoopCount(){return be.MaxWaveformEffectSegmentLoopCount}#ut(e){me.assertTypeWithError(e,"number"),me.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),me.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ft=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ft}get maxNumberOfWaveformEffectSegments(){return be.MaxNumberOfWaveformEffectSegments}#vt(e){this.#ct(e),me.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#dt(e)}))}static#mt=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#mt}get maxWaveformEffectSequenceLoopCount(){return be.MaxWaveformEffectSequenceLoopCount}#bt(e){me.assertTypeWithError(e,"number"),me.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),me.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#St=2550;static get MaxWaveformSegmentDuration(){return this.#St}get maxWaveformSegmentDuration(){return be.MaxWaveformSegmentDuration}#yt(e){me.assertTypeWithError(e.amplitude,"number"),me.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),me.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),me.assertTypeWithError(e.duration,"number"),me.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),me.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Dt=20;static get MaxNumberOfWaveformSegments(){return this.#Dt}get maxNumberOfWaveformSegments(){return be.MaxNumberOfWaveformSegments}#Ct(e){this.#ct(e),me.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#yt(e)}))}createWaveformEffectsData(e,t,s=0){this.#vt(t),this.#bt(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return me.log({dataArray:n,dataView:o}),this.#Tt(e,"waveformEffect",o)}createWaveformData(e,t){this.#Ct(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),me.log({dataView:s}),this.#Tt(e,"waveform",s)}static#h=["waveformEffect","waveform"];static get Types(){return this.#h}get#Et(){return be.Types}#wt(e){me.assertTypeWithError(e,"string"),me.assertWithError(this.#Et.includes(e),`invalid vibrationType "${e}"`)}#Tt(e,t,s){me.assertWithError(s?.byteLength>0,"no data received");const n=this.#lt(e);this.#wt(t);const i=this.#Et.indexOf(t);me.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=x(n,i,s.byteLength,s);return me.log({data:r}),r}}const Se=h("Device",{log:!1});class ye{get id(){return this.#Mt?.id}constructor(){this.#kt.onDataReceived=this.#Lt.bind(this),this.#Nt.sendMessage=this.#Wt.bind(this),this.#Nt.eventDispatcher=this.#It,this.#Rt.sendMessage=this.#Wt.bind(this),this.#Rt.eventDispatcher=this.#It,e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{ye.#Ot(this)}))}static get#At(){return fe}static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage",...y.EventTypes,...J.EventTypes];static get EventTypes(){return this.#c}get eventTypes(){return ye.#c}#It=new u(this,this.eventTypes);addEventListener(e,t,s){this.#It.addEventListener(e,t,s)}#l(e){this.#It.dispatchEvent(e)}removeEventListener(e,t){return this.#It.removeEventListener(e,t)}waitForEvent(e){return this.#It.waitForEvent(e)}#Mt;get connectionManager(){return this.#Mt}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#xt.bind(this),e.onMessageReceived=this.#$t.bind(this)),this.#Mt=e,Se.log("assigned new connectionManager",this.#Mt)):Se.log("same connectionManager is already assigned")}#Wt(e,t){return this.#Mt?.sendMessage(e,t)}async connect(){return this.connectionManager||(this.connectionManager=new ye.#At),this.#Ut(),this.connectionManager.connect()}#Ft=!1;get isConnected(){return this.#Ft}#He(){Se.assertWithError(this.isConnected,"not connected")}static#Pt=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","getTfliteNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];static get AllInformationConnectionMessages(){return this.#Pt}get#Vt(){return ye.#Pt}get#Bt(){return this.#Vt.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#Ut(),this.connectionManager?.reconnect()}static#_t=!1;static get ReconnectOnDisconnection(){return this.#_t}static set ReconnectOnDisconnection(e){Se.assertTypeWithError(e,"boolean"),this.#_t=e}#zt=ye.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#zt}set reconnectOnDisconnection(e){Se.assertTypeWithError(e,"boolean"),this.#zt=e}#qt;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#He(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#Mt?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#Mt.status;default:return"not connected"}}#xt(e){Se.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(Se.log("starting reconnect interval..."),this.#qt=setInterval((()=>{Se.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#qt&&(Se.log("clearing reconnect interval"),clearInterval(this.#qt),this.#qt=void 0),this.#jt()}#Ht(e=!1){this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e&&this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}#jt(){switch(this.#Ft=this.connectionManager?.isConnected&&this.#Bt&&this.#Gt,this.connectionStatus){case"connected":this.#Ft&&this.#Ht(!0);break;case"not connected":this.#Ht(!0);break;default:this.#Ht(!1)}}#Ut(){this.latestConnectionMessage.clear(),this.#Gt=!1}#$t(e,t){switch(Se.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=C.decode(t);Se.log({manufacturerName:s}),this.#Jt({manufacturerName:s});break;case"modelNumber":const n=C.decode(t);Se.log({modelNumber:n}),this.#Jt({modelNumber:n});break;case"softwareRevision":const i=C.decode(t);Se.log({softwareRevision:i}),this.#Jt({softwareRevision:i});break;case"hardwareRevision":const r=C.decode(t);Se.log({hardwareRevision:r}),this.#Jt({hardwareRevision:r});break;case"firmwareRevision":const a=C.decode(t);Se.log({firmwareRevision:a}),this.#Jt({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),Se.log({pnpId:o}),this.#Jt({pnpId:o});break;case"serialNumber":const c=C.decode(t);Se.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);Se.log("received battery level",{batteryLevel:l}),this.#Qt(l);break;case"getName":const h=C.decode(t);Se.log({name:h}),this.#le(h);break;case"getType":const g=t.getUint8(0),d=this.#Et[g];Se.log({typeEnum:g,type:d}),this.#T(d);break;case"getSensorConfiguration":const u=this.#Zt.parse(t);Se.log({sensorConfiguration:u}),this.#Kt(u);break;case"sensorScalars":this.#kt.parseScalars(t);break;case"pressurePositions":this.#kt.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":const p=Number(t.getBigUint64(0,!0));this.#Xt(p);break;case"sensorData":this.#kt.parseData(t);break;default:if(this.#Nt.messageTypes.includes(e))this.#Nt.parseMessage(e,t);else{if(!this.#Rt.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Rt.parseMessage(e,t)}}this.latestConnectionMessage.set(e,t),this.#l({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#Bt&&this.#jt()}latestConnectionMessage=new Map;#Gt=!1;#Xt(e){Se.log({currentTime:e}),this.#Gt=0!=e,this.#Gt||this.#Yt()}#Yt(){Se.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#Mt.sendMessage("setCurrentTime",e)}#es={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#es}get#ts(){return Object.values(this.#es).every((e=>null!=e))}#Jt(e){Se.log({partialDeviceInformation:e});for(const t in e)this.#l({type:t,message:{[t]:e[t]}});Object.assign(this.#es,e),Se.log({deviceInformation:this.#es}),this.#ts&&(Se.log("completed deviceInformation"),this.#l({type:"deviceInformation",message:{deviceInformation:this.#es}}))}#ss=null;get batteryLevel(){return this.#ss}#Qt(e){Se.assertTypeWithError(e,"number"),this.#ss!=e?(this.#ss=e,Se.log({updatedBatteryLevel:this.#ss}),this.#l({type:"batteryLevel",message:{batteryLevel:this.#ss}})):Se.log(`duplicate batteryLevel assignment ${e}`)}#oe;get name(){return this.#oe}#le(e){Se.assertTypeWithError(e,"string"),this.#oe=e,Se.log({updatedName:this.#oe}),this.#l({type:"getName",message:{name:this.#oe}})}static get MinNameLength(){return 2}get minNameLength(){return ye.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return ye.MaxNameLength}async setName(e){this.#He(),Se.assertTypeWithError(e,"string"),Se.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),Se.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=D.encode(e);Se.log({setNameData:t}),await this.#Mt.sendMessage("setName",t)}static#h=["leftInsole","rightInsole"];static get Types(){return this.#h}get#Et(){return ye.Types}#D;get type(){return this.#D}get typeEnum(){return ye.Types.indexOf(this.type)}#ns(e){Se.assertEnumWithError(e,this.#Et)}#is(e){Se.assertTypeWithError(e,"number"),Se.assertWithError(this.#Et[e],`invalid typeEnum ${e}`)}#T(e){this.#ns(e),e!=this.type?(this.#D=e,Se.log({updatedType:this.#D}),this.#l({type:"getType",message:{type:this.#D}}),ye.#rs&&ye.#as(this)):Se.log("redundant type assignment")}async#os(e){this.#is(e);const t=Uint8Array.from([e]);Se.log({setTypeData:t}),await this.#Mt.sendMessage("setType",t)}async setType(e){this.#He(),this.#ns(e);const t=this.#Et.indexOf(e);this.#os(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#cs=["left","right"];static get InsoleSides(){return this.#cs}get insoleSides(){return ye.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return q.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#Zt=new H;#ls={};get sensorConfiguration(){return this.#ls}get sensorConfigurationData(){return this.#Zt.createData(this.sensorConfiguration)}static get MaxSensorRate(){return H.MaxSensorRate}static get SensorRateStep(){return H.SensorRateStep}#Kt(e){this.#ls=e,Se.log({updatedSensorConfiguration:this.#ls}),this.#l({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#He(),Se.log({newSensorConfiguration:e});const t=this.#Zt.createData(e);Se.log({setSensorConfigurationData:t}),await this.#Mt.sendMessage("setSensorConfiguration",t)}static#hs=!0;static get ClearSensorConfigurationOnLeave(){return this.#hs}static set ClearSensorConfigurationOnLeave(e){Se.assertTypeWithError(e,"boolean"),this.#hs=e}#gs=ye.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#gs}set clearSensorConfigurationOnLeave(e){Se.assertTypeWithError(e,"boolean"),this.#gs=e}static#ds={};static get ZeroSensorConfiguration(){return this.#ds}static{this.SensorTypes.forEach((e=>{this.#ds[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#us=8;static get DefaultNumberOfPressureSensors(){return this.#us}#kt=new q;#Lt(e,t){Se.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t}),this.#l({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#kt.pressureSensorDataManager.resetRange()}#ps=new be;static get VibrationLocations(){return be.Locations}static get VibrationTypes(){return be.Types}static get VibrationWaveformEffects(){return be.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return be.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return be.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return be.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return be.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return be.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return be.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#ps.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#ps.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#ps.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}Se.log({type:s,dataView:n}),t=x(t,n)})),await this.#Mt.sendMessage("triggerVibration",t)}static#fs=[];static get ConnectedDevices(){return this.#fs}static#rs=!1;static get UseLocalStorage(){return this.#rs}static set UseLocalStorage(e){this.#vs(),Se.assertTypeWithError(e,"boolean"),this.#rs=e,this.#rs&&!this.#ms&&this.#bs()}static#Ss={devices:[]};static#ms;static get CanUseLocalStorage(){return e&&window.localStorage}static#vs(){Se.assertWithError(e,"localStorage is only available in the browser"),Se.assertWithError(window.localStorage,"localStorage not found")}static#ys="BS.Device";static#Ds(){this.#vs(),localStorage.setItem(this.#ys,JSON.stringify(this.#ms))}static async#bs(){this.#vs();let e=localStorage.getItem(this.#ys);if("string"!=typeof e)return Se.log("no info found in localStorage"),this.#ms=Object.assign({},this.#Ss),void this.#Ds();try{const t=JSON.parse(e);Se.log({configuration:t}),this.#ms=t,this.CanGetDevices&&await this.GetDevices()}catch(e){Se.error(e)}}static#as(e){if("webBluetooth"!=e.connectionType)return void Se.log("localStorage is only for webBluetooth devices");this.#vs();const t=this.#ms.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#ms.devices[t].type=e.type,this.#Ds())}static#Cs=[];static get AvailableDevices(){return this.#Cs}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void Se.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void Se.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void Se.warn("bluetooth.getDevices() is not available in this browser");this.#ms||this.#bs();const t=this.#ms;if(!t.devices||0==t.devices.length)return void Se.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return Se.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#Cs.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new ye,a=new fe;a.device=e,e.name&&r.#le(e.name),r.#T(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#Ts(),this.AvailableDevices}static#Es=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#Es}static#ws=new u(this,this.#Es);static AddEventListener(e,t,s){this.#ws.addEventListener(e,t,s)}static#Ms(e){this.#ws.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#ws.removeEventListener(e,t)}static#Ot(e){if(e.isConnected)if(this.#fs.includes(e))Se.log("device already included");else{if(Se.log("adding device",e),this.#fs.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#ms.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#ms.devices.push(t):this.#ms.devices[s]=t,this.#Ds()}this.#Ms({type:"deviceConnected",message:{device:e}}),this.#Ms({type:"deviceIsConnected",message:{device:e}})}else this.#fs.includes(e)?(Se.log("removing device",e),this.#fs.splice(this.#fs.indexOf(e),1),this.#Ms({type:"deviceDisconnected",message:{device:e}}),this.#Ms({type:"deviceIsConnected",message:{device:e}})):Se.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));Se.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#Ts()}}static#Ts(){Se.log({AvailableDevices:this.AvailableDevices}),this.#Ms({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new ye;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#Nt=new y;static get FileTypes(){return y.Types}get maxFileLength(){return this.#Nt.maxLength}async sendFile(e,t){const s=this.waitForEvent("fileTransferComplete");this.#Nt.send(e,t),await s}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#Nt.receive(e),await t}get fileTransferStatus(){return this.#Nt.status}cancelFileTransfer(){this.#Nt.cancel()}static get TfliteSensorTypes(){return J.SensorTypes}#Rt=new J;get tfliteName(){return this.#Rt.name}setTfliteName(e){return this.#Rt.setName(e)}static get TfliteTasks(){return J.Tasks}get tfliteTask(){return this.#Rt.task}setTfliteTask(e){return this.#Rt.setTask(e)}get tfliteNumberOfSamples(){return this.#Rt.numberOfSamples}setTfliteNumberOfSamples(e){return this.#Rt.setNumberOfSamples(e)}get tfliteSampleRate(){return this.#Rt.sampleRate}setTfliteSampleRate(e){return this.#Rt.setSampleRate(e)}get tfliteSensorTypes(){return this.#Rt.sensorTypes}setTfliteSensorTypes(e){return this.#Rt.setSensorTypes(e)}get tfliteNumberOfClasses(){return this.#Rt.numberOfClasses}setTfliteNumberOfClasses(e){return this.#Rt.setNumberOfClasses(e)}get tfliteIsReady(){return this.#Rt.isReady}get tfliteInferencingEnabled(){return this.#Rt.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#Rt.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#Rt.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#Rt.captureDelay}async setTfliteCaptureDelay(e){return this.#Rt.setCaptureDelay(e)}get tfliteThreshold(){return this.#Rt.threshold}async setTfliteThreshold(e){return this.#Rt.setThreshold(e)}}const De=h("Timer",{log:!1});class Ce{#ks;get callback(){return this.#ks}set callback(e){De.assertTypeWithError(e,"function"),De.log({newCallback:e}),this.#ks=e,this.isRunning&&this.restart()}#Ls;get interval(){return this.#Ls}set interval(e){De.assertTypeWithError(e,"number"),De.assertWithError(e>0,"interval must be above 0"),De.log({newInterval:e}),this.#Ls=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#Ns=null;get isRunning(){return null!=this.#Ns}start(){this.isRunning?De.log("interval already running"):(De.log("starting interval"),this.#Ns=setInterval(this.#ks,this.#Ls))}stop(){this.isRunning?(De.log("stopping interval"),clearInterval(this.#Ns),this.#Ns=null):De.log("interval already not running")}restart(){this.stop(),this.start()}}const Te=h("BaseScanner");class Ee{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#_e(){Te.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ze(){Te.assertWithError(this.constructor!=Ee,`${this.constructor.name} must be subclassed`)}constructor(){this.#ze(),this.#_e(),p(this,this.#Ws)}#Ws={discoveredDevice:this.#Is.bind(this),isScanning:this.#Rs.bind(this)};static#c=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Ee.#c}#It=new u(this,this.eventTypes);addEventListener(e,t,s){this.#It.addEventListener(e,t,s)}dispatchEvent(e){this.#It.dispatchEvent(e)}removeEventListener(e,t){return this.#It.removeEventListener(e,t)}get isAvailable(){return!1}#Os(){Te.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#As(){Te.assertWithError(this.isScanning,"not scanning")}#xs(){Te.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#Os(),this.#xs()}stopScan(){this.#As()}#Rs(){this.isScanning?(this.#$s={},this.#Us={}):this.#Fs.stop()}#$s={};get discoveredDevices(){return this.#$s}get discoveredDevicesArray(){return Object.values(this.#$s).sort(((e,t)=>this.#Us[e.id]-this.#Us[t.id]))}#Ps(e){Te.assertWithError(this.#$s[e],`no discovered device with id "${e}"`)}#Is(e){const t=e.message.discoveredDevice;this.#$s[t.id]=t,this.#Us[t.id]=Date.now(),this.#Fs.start()}#Us={};static#Vs=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#Vs}get#Bs(){return Ee.DiscoveredDeviceExpirationTimeout}#Fs=new Ce(this.#_s.bind(this),1e3);#_s(){const e=Object.entries(this.#$s);if(0==e.length)return void this.#Fs.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Us[e];t-n>this.#Bs&&(Te.log("discovered device timeout"),delete this.#$s[e],delete this.#Us[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#Os()}get canReset(){return!1}reset(){Te.log("resetting...")}}const we=h("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class Me extends de{get id(){return this.#zs?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#zs?.state}async connect(){await super.connect(),await this.#zs.connectAsync()}async disconnect(){await super.disconnect(),await this.#zs.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);we.log({characteristicName:s});const n=this.#tt.get(s);we.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);we.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#zs.connectable}async reconnect(){await super.reconnect(),we.log("attempting to reconnect..."),this.connect()}#zs;get noblePeripheral(){return this.#zs}set noblePeripheral(e){we.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(we.log("newNoblePeripheral",e.id),this.#zs&&(f(this.#zs,this.#qs),delete this.#zs._connectionManager),e&&(e._connectionManager=this,p(e,this.#qs)),this.#zs=e):we.log("attempted to assign duplicate noblePeripheral")}#qs={connect:this.#js,disconnect:this.#Hs,rssiUpdate:this.#Gs,servicesDiscover:this.#Js};async#js(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){we.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#zs.discoverServicesAsync(re),await this.#Qs()}async#Hs(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){we.log("onNoblePeripheralDisconnect",e.id),await this.#Qs()}async#Qs(){switch(we.log(`noblePeripheral ${this.id} state ${this.#zs.state}`),this.#zs.state){case"connected":case"connecting":break;case"disconnected":this.#nt(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":we.error("noblePeripheral error");break;default:we.log(`uncaught noblePeripheral state ${this.#zs.state}`)}}#nt(){we.log("removing noblePeripheral eventListeners"),this.#et.forEach((e=>{f(e,this.#Zs)})),this.#et.clear(),this.#tt.forEach((e=>{f(e,this.#Ks)})),this.#tt.clear()}async#Gs(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){we.log("onNoblePeripheralRssiUpdate",e.id,t)}async#Js(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){we.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];we.log("service",s.uuid);const n=ae(s.uuid);we.assertWithError(n,`no name found for service uuid "${s.uuid}"`),we.log({serviceName:n}),this.#et.set(n,s),s._name=n,s._connectionManager=this,p(s,this.#Zs),await s.discoverCharacteristicsAsync()}}#et=new Map;#Zs={characteristicsDiscover:this.#Xs};async#Xs(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){we.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];we.log("characteristic",s.uuid);const n=he(s.uuid);we.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),we.log({characteristicName:n}),this.#tt.set(n,s),s._name=n,s._connectionManager=this,p(s,this.#Ks),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#Ys&&(this.status="connected")}#Ks={data:this.#en,write:this.#tn,notify:this.#sn};#tt=new Map;get#Ys(){return le.every((e=>this.#tt.has(e)))}#en(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){we.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView($(t)),i=e._name;we.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#tn(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){we.log("onNobleCharacteristicWrite",e.uuid)}#sn(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){we.log("onNobleCharacteristicNotify",e.uuid,t)}}const ke=h("NobleScanner",{log:!0});let Le=!1;if(t){var Ne=require("@abandonware/noble");Le=!0}class We extends Ee{static get isSupported(){return Le}#nn=!1;get#in(){return this.#nn}set#in(e){ke.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#nn=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ke.log("duplicate isScanning assignment")}get isScanning(){return this.#in}#rn="unknown";get#an(){return this.#rn}set#an(e){ke.assertTypeWithError(e,"string"),this.#an!=e?(this.#rn=e,ke.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ke.log("duplicate nobleState assignment")}#on={scanStart:this.#cn.bind(this),scanStop:this.#ln.bind(this),stateChange:this.#hn.bind(this),discover:this.#gn.bind(this)};#cn(){ke.log("OnNobleScanStart"),this.#in=!0}#ln(){ke.log("OnNobleScanStop"),this.#in=!1}#hn(e){ke.log("onNobleStateChange",e),this.#an=e}#gn(e){let t;ke.log("onNobleDiscover",e.id),this.#dn[e.id]||(e._scanner=this,this.#dn[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=ye.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),p(Ne,this.#on),p(this,this.#un)}get isAvailable(){return"poweredOn"==this.#an}startScan(){super.startScan(),Ne.startScanningAsync(ne,!0)}stopScan(){super.stopScan(),Ne.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),Ne.reset()}#un={expiredDiscoveredDevice:this.#pn.bind(this)};#pn(e){const t=e.message.discoveredDevice;this.#dn[t.id]&&delete this.#dn[t.id]}#dn={};#fn(e){ke.assertTypeWithError(e,"string"),ke.assertWithError(this.#dn[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#fn(e);const t=this.#dn[e];ke.log("connecting to discoveredDevice...",e);let s=ye.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#vn(t),await s.connect())}#vn(e){const t=new ye,s=new Me;return s.noblePeripheral=e,t.connectionManager=s,t}}const Ie=h("Scanner",{log:!1});let Re;We.isSupported?(Ie.log("using NobleScanner"),Re=new We):Ie.log("Scanner not available");var Oe=Re;const Ae=h("DevicePairPressureSensorDataManager",{log:!0});class xe{static get Sides(){return ye.InsoleSides}get sides(){return ye.InsoleSides}#mn={};#G=new k;resetPressureRange(){this.#G.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(Ae.log({pressure:t,insoleSide:s}),this.#mn[s]=t,this.#bn)return this.#Sn();Ae.log("doesn't have all pressure data yet...")}get#bn(){return this.sides.every((e=>e in this.#mn))}#Sn(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#mn[t].rawSum,e.normalizedSum+=this.#mn[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#mn[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#G.updateAndGetNormalization(e.center)),Ae.log({devicePairPressure:e}),e}}const $e=h("DevicePairSensorDataManager",{log:!0});class Ue{static get Sides(){return ye.InsoleSides}get sides(){return ye.InsoleSides}#yn={};pressureSensorDataManager=new xe;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if($e.log({sensorType:s,timestamp:t,event:e}),this.#yn[s]||(this.#yn[s]={}),this.#yn[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else $e.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#yn[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else $e.log("no value received")}onDataReceived}const Fe=h("DevicePair",{log:!0});class Pe{constructor(){this.#kt.onDataReceived=this.#Lt.bind(this)}static#c=["isConnected","pressure",...ye.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#c}get eventTypes(){return Pe.#c}#It=new u(this,this.eventTypes);addEventListener(e,t,s){this.#It.addEventListener(e,t,s)}#l(e){this.#It.dispatchEvent(e)}removeEventListener(e,t){return this.#It.removeEventListener(e,t)}static get Sides(){return ye.InsoleSides}get sides(){return Pe.Sides}#Dn;get left(){return this.#Dn}#Cn;get right(){return this.#Cn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#He(){Fe.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Fe.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&f(s,this.#Tn),p(e,this.#Tn),t){case"left":this.#Dn=e;break;case"right":this.#Cn=e}return Fe.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.#l({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Fe.log("device already assigned")}#Tn={connectionStatus:this.#En.bind(this),isConnected:this.#wn.bind(this),sensorData:this.#Mn.bind(this),getSensorConfiguration:this.#En.bind(this)};#En(e){this.#l({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#wn(e){this.#En(e),this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#kt=new Ue;#Mn(e){this.#En(e),this.#l({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#kt.onDeviceSensorData(e)}#Lt(e,t){Fe.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t})}resetPressureRange(){this.#kt.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#kn=new Pe;static get shared(){return this.#kn}static{ye.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#kn.assignInsole(t)}))}}const Ve=h("ServerUtils",{log:!1}),Be=3e7;function _e(e,...t){Ve.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=x(...t.data),n=s.byteLength;Ve.assertEnumWithError(t.type,e);return x(e.indexOf(t.type),Uint16Array.from([n]),s)}));return Ve.log("messageBuffers",...s),x(...s)}const ze=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function qe(...e){return _e(ze,...e)}function je(...e){return Ve.log("createDeviceMessage",...e),_e(ye.EventTypes,...e)}function He(...e){return _e(Z.MessageTypes,...e)}const Ge=qe("ping"),Je=qe("pong");qe("isScanningAvailable"),qe("isScanning"),qe("startScan"),qe("stopScan");const Qe=qe("discoveredDevices"),Ze=h("WebSocketClientConnectionManager",{log:!0});class Ke extends Z{static get isSupported(){return e}static get type(){return"webSocketClient"}#Ln;get id(){return this.#Ln}set id(e){Ze.assertTypeWithError(e,"string"),this.#Ln!=e?this.#Ln=e:Ze.log("redundant id assignment")}#Ft=!1;get isConnected(){return this.#Ft}set isConnected(e){Ze.assertTypeWithError(e,"boolean"),this.#Ft!=e?(this.#Ft=e,this.status=this.#Ft?"connected":"not connected",this.#Ft&&this.#Nn()):Ze.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":Ze.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),Ze.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){Ze.log({dataView:e}),_(e,ye.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));Ze.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":this.onMessageReceived(s,t);break;default:Ze.error(`uncaught messageType "${s}"`)}}),!0)}#Nn(){this.sendWebSocketMessage(...ye.AllInformationConnectionMessages)}}const Xe=h("WebSocketClient",{log:!0});class Ye{static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Ye.#c}#It=new u(this,this.eventTypes);addEventListener(e,t,s){this.#It.addEventListener(e,t,s)}#l(e){this.#It.dispatchEvent(e)}removeEventListener(e,t){return this.#It.removeEventListener(e,t)}#Wn;get webSocket(){return this.#Wn}set webSocket(e){this.#Wn!=e?(Xe.log("assigning webSocket",e),this.#Wn&&f(this.#Wn,this.#In),p(e,this.#In),this.#Wn=e,Xe.log("assigned webSocket")):Xe.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Rn(){Xe.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#On(){Xe.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#On(),this.#An="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Rn(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#An="disconnecting",this.webSocket.close()}reconnect(){this.#On(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#_t=!0;static get ReconnectOnDisconnection(){return this.#_t}static set ReconnectOnDisconnection(e){Xe.assertTypeWithError(e,"boolean"),this.#_t=e}#zt=Ye.#_t;get reconnectOnDisconnection(){return this.#zt}set reconnectOnDisconnection(e){Xe.assertTypeWithError(e,"boolean"),this.#zt=e}#xn(e){this.#Rn(),this.#Wn.send(e)}#$n(...e){this.#xn(qe(...e))}#In={open:this.#Un.bind(this),message:this.#Fn.bind(this),close:this.#Pn.bind(this),error:this.#Vn.bind(this)};#Un(e){Xe.log("webSocket.open",e),this.#Bn.start(),this.#An="connected"}async#Fn(e){Xe.log("webSocket.message",e),this.#Bn.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#_n(s)}#Pn(e){Xe.log("webSocket.close",e),this.#An="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#Bn.stop(),this.#zt&&setTimeout((()=>{this.reconnect()}),3e3)}#Vn(e){Xe.log("webSocket.error",e)}#zn="not connected";get#An(){return this.#zn}set#An(e){switch(Xe.assertTypeWithError(e,"string"),Xe.log({newConnectionStatus:e}),this.#zn=e,this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e){case"connected":case"not connected":this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#$n("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#qn=!1,this.#in=!1)}}get connectionStatus(){return this.#An}#_n(e){Xe.log("parseMessage",{dataView:e}),_(e,ze,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#jn();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));Xe.log({isScanningAvailable:e}),this.#qn=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));Xe.log({isScanning:e}),this.#in=e}break;case"discoveredDevice":{const{string:e}=B(t,n);Xe.log({discoveredDeviceString:e});const s=JSON.parse(e);Xe.log({discoveredDevice:s}),this.#Is(s)}break;case"expiredDiscoveredDevice":{const{string:e}=B(t,n);this.#pn(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=B(t,n);Xe.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);Xe.log({connectedDeviceIds:s}),this.#Hn(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=B(t,n);n=s;const i=this.#Gn[e];Xe.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=F(t,n);r.onWebSocketMessage(a)}break;default:Xe.error(`uncaught messageType "${s}"`)}}),!0)}#Bn=new Ce(this.#Jn.bind(this),Be);#Jn(){this.#$n("ping")}#jn(){this.#$n("pong")}#Qn=!1;get#qn(){return this.#Qn}set#qn(e){Xe.assertTypeWithError(e,"boolean"),this.#Qn=e,this.#l({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Zn()}get isScanningAvailable(){return this.#qn}#Kn(){this.#Rn(),Xe.assertWithError(this.isScanningAvailable,"scanning is not available")}#Xn(){this.#$n("isScanningAvailable")}#nn=!1;get#in(){return this.#nn}set#in(e){Xe.assertTypeWithError(e,"boolean"),this.#nn=e,this.#l({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#in}#Zn(){this.#$n("isScanning")}#As(){Xe.assertWithError(this.isScanning,"is not scanning")}#xs(){Xe.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#xs(),this.#$n("startScan")}stopScan(){this.#As(),this.#$n("stopScan")}toggleScan(){this.#Kn(),this.isScanning?this.stopScan():this.startScan()}#$s={};get discoveredDevices(){return this.#$s}#Is(e){Xe.log({discoveredDevice:e}),this.#$s[e.id]=e,this.#l({type:"discoveredDevice",message:{discoveredDevice:e}})}#Yn(){this.#xn(Qe)}#pn(e){Xe.log({expiredDeviceId:e});const t=this.#$s[e];t?(Xe.log({expiredDiscoveredDevice:t}),delete this.#$s[e],this.#l({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Xe.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#ei(e)}#ei(e){this.#Rn(),Xe.assertTypeWithError(e,"string");const t=this.#ti(e);return t.connect(),t}#si(e){this.#xn(this.#ni(e))}#ni(e){return qe({type:"connectToDevice",data:e})}#vn(e){const t=new ye,s=new Ke;return s.id=e,s.sendWebSocketMessage=this.#ii.bind(this,e),s.sendWebSocketConnectMessage=this.#si.bind(this,e),s.sendWebSocketDisconnectMessage=this.#ri.bind(this,e),t.connectionManager=s,t}#ti(e){let t=this.#Gn[e];return t||(t=this.#vn(e),this.#Gn[e]=t),t}#Hn(e){Xe.log({deviceIds:e}),e.forEach((e=>{this.#ti(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#ai(e)}#ai(e){this.#Rn(),Xe.assertTypeWithError(e,"string");const t=this.devices[e];return Xe.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#ri(e){this.#xn(this.#oi(e))}#oi(e){return qe({type:"disconnectFromDevice",data:e})}#ii(e,...t){this.#xn(this.#ci(e,...t))}#ci(e,...t){return qe({type:"deviceMessage",data:[e,He(...t)]})}#Gn={};get devices(){return this.#Gn}}const et=h("BaseServer",{log:!0});class tt{#ze(){et.assertWithError(this.constructor!=tt,`${this.constructor.name} must be subclassed`)}static#c=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#c}get eventTypes(){return tt.#c}#It=new u(this,this.eventTypes);addEventListener(e,t,s){this.#It.addEventListener(e,t,s)}dispatchEvent(e){this.#It.dispatchEvent(e)}removeEventListener(e,t){return this.#It.removeEventListener(e,t)}constructor(){this.#ze(),et.assertWithError(Oe,"no scanner defined"),p(Oe,this.#li),p(ye,this.#hi),p(this,this.#gi)}get numberOfClients(){return 0}static#di=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#di}static set ClearSensorConfigurationsWhenNoClients(e){et.assertTypeWithError(e,"boolean"),this.#di=e}#ui=tt.#di;get clearSensorConfigurationsWhenNoClients(){return this.#ui}set clearSensorConfigurationsWhenNoClients(e){et.assertTypeWithError(e,"boolean"),this.#ui=e}#gi={clientConnected:this.#pi.bind(this),clientDisconnected:this.#fi.bind(this)};#pi(e){e.message.client,et.log("onClientConnected")}#fi(e){e.message.client,et.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&ye.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){et.log("broadcasting",e)}#li={isAvailable:this.#vi.bind(this),isScanning:this.#mi.bind(this),discoveredDevice:this.#bi.bind(this),expiredDiscoveredDevice:this.#pn.bind(this)};#vi(e){this.broadcastMessage(this.#Si)}get#Si(){return qe({type:"isScanningAvailable",data:Oe.isAvailable})}#mi(e){this.broadcastMessage(this.#yi)}get#yi(){return qe({type:"isScanning",data:Oe.isScanning})}#bi(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#Di(t))}#Di(e){return qe({type:"discoveredDevice",data:e})}#pn(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#Ci(t))}#Ci(e){return qe({type:"expiredDiscoveredDevice",data:e.id})}get#Ti(){return qe(...Oe.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#Ei(){return qe({type:"connectedDevices",data:JSON.stringify(ye.ConnectedDevices.map((e=>e.id)))})}#wi={connectionMessage:this.#Mi.bind(this)};#ci(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#Mi(e){const t=e.target;if(et.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#ki(t,this.#ci(t,s,n)))}#hi={deviceConnected:this.#Li.bind(this),deviceDisconnected:this.#Ni.bind(this),deviceIsConnected:this.#wn.bind(this)};#Li(e){const t=e.message.device;et.log("onDeviceConnected",t.id),p(t,this.#wi)}#Ni(e){const t=e.message.device;et.log("onDeviceDisconnected",t.id),f(t,this.#wi)}#wn(e){const t=e.message.device;et.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#Wi(t))}#Wi(e){return this.#ki(e,{type:"isConnected",data:e.isConnected})}#ki(e,...t){return qe({type:"deviceMessage",data:[e.id,je(...t)]})}parseClientMessage(e){let t=[];if(_(e,ze,((e,s)=>{const n=e;switch(n){case"ping":t.push(Je);break;case"pong":break;case"isScanningAvailable":t.push(this.#Si);break;case"isScanning":t.push(this.#yi);break;case"startScan":Oe.startScan();break;case"stopScan":Oe.stopScan();break;case"discoveredDevices":t.push(this.#Ti);break;case"connectToDevice":{const{string:e}=B(s);Oe.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=B(s),t=ye.ConnectedDevices.find((t=>t.id==e));if(!t){et.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#Ei);break;case"deviceMessage":{const{string:e,byteOffset:n}=B(s),i=ye.ConnectedDevices.find((t=>t.id==e));if(!i){et.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:et.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return x(t)}parseClientDeviceMessage(e,t){et.log("onDeviceMessage",e.id,t);let s=[];if(_(t,Z.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":s.push(this.#ci(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:et.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#ki(e,...s)}}const st=h("WebSocketServer",{log:!0});t&&require("ws");var nt={setAllConsoleLevelFlags:function(e){l.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){l.setLevelFlagsForType(e,t)},Device:ye,DevicePair:Pe,WebSocketClient:Ye,WebSocketServer:class extends tt{get numberOfClients(){return this.#Ii?.clients.size||0}#Ii;get server(){return this.#Ii}set server(e){this.#Ii!=e?(st.log("assigning server..."),this.#Ii&&(st.log("clearing existing server..."),f(this.#Ii,this.#gi)),p(e,this.#gi),this.#Ii=e,st.log("assigned server")):st.log("redundant WebSocket assignment")}#gi={close:this.#Ri.bind(this),connection:this.#Oi.bind(this),error:this.#Ai.bind(this),headers:this.#xi.bind(this),listening:this.#$i.bind(this)};#Ri(){st.log("server.close")}#Oi(e){st.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new Ce((()=>this.#Ui(e)),Be),e.pingClientTimer.start(),p(e,this.#Fi),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#Ai(e){st.error(e)}#xi(){}#$i(){st.log("server.listening")}#Fi={open:this.#Pi.bind(this),message:this.#Vi.bind(this),close:this.#Bi.bind(this),error:this.#_i.bind(this)};#Pi(e){st.log("client.open")}#Vi(e){st.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView($(e.data));this.#zi(t,s)}#Bi(e){st.log("client.close");const t=e.target;t.pingClientTimer.stop(),f(t,this.#Fi),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#_i(e){st.log("client.error")}#zi(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Ui(e){e.isAlive?(e.isAlive=!1,e.send(Ge)):e.terminate()}},Scanner:Oe};export{nt as default};
