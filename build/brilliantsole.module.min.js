/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function s(){}e&&navigator.userAgent.includes("Android");const n=console.log.bind(console),r=console.warn.bind(console),i=console.error.bind(console),a=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new o(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?n:s}get warn(){return this.#t.warn?r:s}get error(){return this.#t.error?i:s}get assert(){return this.#t.assert?a:s}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function c(e,t){return o.create(e,t)}const h=c("EventDispatcher",{log:!1});class l{constructor(e){h.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#s=e}#s;#n(e){return!this.#s||this.#s.includes(e)}#r(e){h.assertWithError(this.#n(e),`invalid event type "${e}"`)}#i;addEventListener(e,t,s){if(h.log(`adding "${e}" eventListener`,t),this.#r(e),this.#i||(this.#i={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#i;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return h.log(`has "${e}" eventListener?`,t),this.#r(e),this.#i?.[e]?.includes(t)}removeEventListener(e,t){if(h.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#i[e].indexOf(t);return this.#i[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#i?.[e.type]){e.target=this;const t=this.#i[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function g(e,t){let s=e.addEventListener||e.addListener||e.on;h.assertWithError(s,"no add listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function d(e,t){let s=e.removeEventListener||e.removeListener;h.assertWithError(s,"no remove listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const u=c("ConnectionManager");class p{onStatusUpdated;onMessageReceived;static#a(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#a("type")}get type(){return this.constructor.type}#c(){u.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){u.assertWithError(this.constructor!=p,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c()}#l="not connected";get status(){return this.#l}set status(e){u.assertTypeWithError(e,"string"),this.#l!=e?(u.log(`new connection status "${e}"`),this.#l=e,this.onStatusUpdated?.(this.status)):u.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){u.assertWithError(!this.isConnected,"device is already connected")}#d(){u.assertWithError("connecting"!=this.status,"device is already connecting")}#u(){u.assertWithError(this.isConnected,"device is not connected")}#p(){u.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#v(){this.#u(),this.#p()}async connect(){this.#g(),this.#d(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#d(),u.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#u(),this.#p(),this.status="disconnecting"}async sendMessage(e,t){this.#v(),u.log("sending message",{messageType:e,data:t})}}if(t){var v=require("webbluetooth").BluetoothUUID}if(e)v=window.BluetoothUUID;function m(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function f(e){return v.getCharacteristic(e)}function S(e){return v.getService(e)}const b=Object.freeze({services:{deviceInformation:{uuid:S("device_information"),characteristics:{manufacturerName:{uuid:f("manufacturer_name_string")},modelNumber:{uuid:f("model_number_string")},hardwareRevision:{uuid:f("hardware_revision_string")},firmwareRevision:{uuid:f("firmware_revision_string")},softwareRevision:{uuid:f("software_revision_string")},pnpId:{uuid:f("pnp_id")},serialNumber:{uuid:f("serial_number_string")}}},battery:{uuid:S("battery_service"),characteristics:{batteryLevel:{uuid:f("battery_level")}}},main:{uuid:m(0),characteristics:{name:{uuid:m(1)},type:{uuid:m(2)},sensorConfiguration:{uuid:m(3)},sensorData:{uuid:m(4)},vibration:{uuid:m(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,s])=>e==s.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>e==s.uuid))?.[0],t))),t}}),y=b.serviceUUIDs,E=b.optionalServiceUUIDs;const D=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var w={bluetooth:t}}if(e)w=window.navigator;class C extends p{#m={characteristicvaluechanged:this.#f.bind(this)};#S={gattserverdisconnected:this.#b.bind(this)};static get isSupported(){return"bluetooth"in w}static get type(){return"webBluetooth"}#y;get device(){return this.#y}set device(e){this.#y!=e?(this.#y&&d(this.#y,this.#S),e&&g(e,this.#S),this.#y=e):D.warn("tried to assign the same BluetoothDevice")}get server(){return this.#y?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#D=new Map;async connect(){await super.connect();try{const t=await w.bluetooth.requestDevice({filters:[{services:y}],optionalServices:e?E:[]});D.log("got BluetoothDevice"),this.device=t,D.log("connecting to device...");const s=await this.device.gatt.connect();D.log(`connected to device? ${s.connected}`),await this.#w(),D.log("fully connected"),this.status="connected"}catch(e){D.error(e),this.status="not connected",this.server?.disconnect(),this.#C()}}async#w(){this.#C(),D.log("getting services...");const e=await this.server.getPrimaryServices();D.log("got services",e.length),D.log("getting characteristics...");for(const n in e){const r=e[n],i=(s=r.uuid,b.getServiceNameFromUUID(s));if(D.assertWithError(i,`no name found for service uuid "${r.uuid}"`),D.log(`got "${i}" service`),"dfu"==i){D.log("skipping dfu service");continue}r._name=i,this.#E.set(i,r),D.log(`getting characteristics for "${i}" service`);const a=await r.getCharacteristics();D.log(`got characteristics for "${i}" service`);for(const e in a){const s=a[e],n=(t=s.uuid,b.getCharacteristicNameFromUUID(t));D.assertWithError(n,`no name found for characteristic uuid "${s.uuid}" in "${i}" service`),D.log(`got "${n}" characteristic in "${i}" service`),s._name=n,this.#D.set(n,s),g(s,this.#m),s.properties.read&&(D.log(`reading "${n}" characteristic...`),await s.readValue()),s.properties.notify&&(D.log(`starting notifications for "${n}" characteristic`),await s.startNotifications())}}var t,s}#C(){this.device&&d(this.device,this.#S),this.#D.forEach((e=>{d(e,this.#m)}))}async disconnect(){await super.disconnect(),D.log("disconnecting from device..."),this.server?.disconnect(),this.#C(),this.status="not connected"}#f(e){D.log("oncharacteristicvaluechanged");const t=e.target,s=t._name;D.assertWithError(s,`no name found for characteristic with uuid "${t.uuid}"`),D.log(`oncharacteristicvaluechanged for "${s}" characteristic`);const n=t.value;switch(D.assertWithError(n,`no data found for "${s}" characteristic`),D.log(`data for "${s}" characteristic`,Array.from(new Uint8Array(n.buffer))),s){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${s}"`)}}#b(e){D.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s;switch(await super.sendMessage(...arguments),e){case"setName":s=this.#D.get("name");break;case"setType":s=this.#D.get("type");break;case"setSensorConfiguration":s=this.#D.get("sensorConfiguration");break;case"triggerVibration":s=this.#D.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}D.assert(s,"no characteristic found"),await s.writeValueWithResponse(t),s.properties.read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),D.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(D.log("successfully reconnected!"),await this.#w(),this.status="connected"):(D.log("unable to reconnect"),this.status="not connected")}}const P=c("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class T extends p{static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return!1}async connect(){await super.connect()}async disconnect(){await super.disconnect(),P.log("disconnecting from device...")}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!1}async reconnect(){await super.reconnect(),P.log("attempting to reconnect...")}#P;get noblePeripheral(){return this.#P}set noblePeripheral(e){P.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(P.log({newNoblePeripheral:e}),this.#P&&(d(this.#P,this.#T),delete this.#P._device),e&&(e._device=this,g(e,this.#T)),this.#P=e):P.log("attempted to assign duplicate noblePeripheral")}#T={connect:this.#L,disconnect:this.#M,rssiUpdate:this.#W,servicesDiscover:this.#R};#L(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){P.log("onNoblePeripheralConnect",e)}#M(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){P.log("onNoblePeripheralDisconnect",e)}#W(e){this._device.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){P.log("onNoblePeripheralRssiUpdate",e,t)}#R(e){this._device.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){P.log("onNoblePeripheralServicesDiscover",e,t)}}function L(e,t,s){return(e-t)/(s-t)}class M{#N;resetRange(){this.#N={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}}}constructor(){this.resetRange()}updateCenterOfPressureRange(e){this.#N.min.x=Math.min(e.x,this.#N.min.x),this.#N.min.y=Math.min(e.y,this.#N.min.y),this.#N.max.x=Math.max(e.x,this.#N.max.x),this.#N.max.y=Math.max(e.y,this.#N.max.y)}getCalibratedCenterOfPressure(e){return{x:L(e.x,this.#N.min.x,this.#N.max.x),y:L(e.y,this.#N.min.y,this.#N.max.y)}}}const W=c("PressureSensorDataManager",{log:!0});class R{#x;get deviceType(){return this.#x}set deviceType(e){W.assertTypeWithError(e,"string"),this.#x!=e?(W.log({newDeviceType:e}),this.#x=e,this.#k(),this.resetRange()):W.warn(`redundant deviceType assignment "${e}"`)}static#I=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#I}get names(){return R.Names}static#O={pressure:2**-16};static get Scalars(){return this.#O}get scalars(){return R.Scalars}static#A=8;static get NumberOfPressureSensors(){return this.#A}get numberOfPressureSensors(){return R.NumberOfPressureSensors}static#U=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#U}#_;get pressureSensorPositions(){return this.#_}#k(){const e=R.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));W.log({pressureSensorPositions:e}),this.#_=e}#$=new M;resetRange(){this.#$.resetRange()}parsePressure(e,t){const s=this.scalars.pressure,n={sensors:[],rawSum:0,normalizedSum:0};for(let r=0;r<this.numberOfPressureSensors;r++,t+=2){const i=e.getUint16(t,!0),a=i*s,o=this.pressureSensorPositions[r],c=this.names[r];n.sensors[r]={rawValue:i,normalizedValue:a,position:o,name:c},n.rawSum+=i,n.normalizedSum=a/this.numberOfPressureSensors}return n.rawSum>0&&(n.center={x:0,y:0},n.sensors.forEach((e=>{e.weightedValue=e.rawValue/n.rawSum,n.center.x+=e.position.x*e.weightedValue,n.center.y+=e.position.y*e.weightedValue})),this.#$.updateCenterOfPressureRange(n.center),n.calibratedCenter=this.#$.getCalibratedCenterOfPressure(n.center)),W.log({pressure:n}),n}}const N=c("MotionSensorDataManager",{log:!0});class x{#x;get deviceType(){return this.#x}set deviceType(e){N.assertTypeWithError(e,"string"),this.#x!=e?(N.log({newDeviceType:e}),this.#x=e):N.warn(`redundant deviceType assignment "${e}"`)}static#O={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#O}get scalars(){return x.Scalars}static#V=6;static get Vector3Size(){return this.#V}get vector3Size(){return x.Vector3Size}parseVector3(e,t,s){let[n,r,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:r,z:i};return N.log({vector:a}),a}static#B=8;static get QuaternionSize(){return this.#B}get quaternionSize(){return x.QuaternionSize}parseQuaternion(e,t,s){let[n,r,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:r,z:i,w:a};return N.log({quaternion:o}),o}}c("BarometerSensorDataManager",{log:!0});class k{static#O={barometer:.78125};static get Scalars(){return this.#O}get scalars(){return k.Scalars}}const I=c("SensorDataManager",{log:!0});class O{#x;get deviceType(){return this.#x}set deviceType(e){I.assertTypeWithError(e,"string"),this.#x!=e?(I.log({newDeviceType:e}),this.#x=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):I.warn(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new R;motionSensorDataManager=new x;barometerSensorDataManager=new k;static#F=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#F}get#z(){return O.Types}static AssertValidSensorType(e){I.assertTypeWithError(e,"string"),I.assertWithError(this.#F.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){I.assertTypeWithError(e,"number"),I.assertWithError(e in this.#F,`invalid sensorTypeEnum ${e}`)}onDataReceived;#q=0;#H=0;clearTimestamp(){I.log("clearing sensorDataManager timestamp data"),this.#q=0,this.#H=0}#j(e,t){const s=e.getUint16(t,!0);s<this.#H&&(this.#q+=65536),this.#H=s;return s+this.#q}parse(e){I.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#j(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let r;O.AssertValidSensorTypeEnum(n);const i=e.getUint8(t++),a=this.#z[n];switch(I.log({sensorTypeEnum:n,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":r=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:I.error(`uncaught sensorType "${a}"`)}t+=i,I.assertWithError(r,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:r})}}static get NumberOfPressureSensors(){return R.NumberOfPressureSensors}get numberOfPressureSensors(){return O.NumberOfPressureSensors}static get PressureSensorNames(){return R.Names}get pressureSensorNames(){return O.PressureSensorNames}}const A=c("SensorConfigurationManager",{log:!0});class U{#x;get deviceType(){return this.#x}set deviceType(e){A.assertTypeWithError(e,"string"),this.#x!=e?(A.log({newDeviceType:e}),this.#x=e):A.warn(`redundant deviceType assignment "${e}"`)}#Z;#Q(e){A.assertWithError(this.#Z,"must get initial sensorConfiguration");const t=this.#Z?.includes(e);return A.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0,n=0;s<e.byteLength;s+=2,n++){const r=O.Types[n];if(!r){A.warn(`unknown sensorType index ${n}`);break}const i=e.getUint16(s,!0);A.log({sensorType:r,sensorRate:i}),t[r]=i}return A.log({parsedSensorConfiguration:t}),this.#Z=Object.keys(t),t}static#G=65535;static get MaxSensorRate(){return this.#G}get maxSensorRate(){return U.MaxSensorRate}static#J=5;static get SensorRateStep(){return this.#J}get sensorRateStep(){return U.SensorRateStep}#K(e){A.assertTypeWithError(e,"number"),A.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),A.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),A.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#Q(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{O.AssertValidSensorType(t);const r=O.Types.indexOf(t);s.setUint8(3*n,r);const i=e[t];this.#K(i),s.setUint16(3*n+1,e[t],!0)})),A.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const _=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],$=new TextEncoder;function V(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return B(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return B(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function B(e){const t=$.encode(e);return V(t.byteLength,t)}const F=c("VibrationManager");class z{static#X=["front","rear"];static get Locations(){return this.#X}get locations(){return z.Locations}#Y(e){F.assertTypeWithError(e,"string"),F.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ee(e){this.#te(e),e.forEach((e=>{this.#Y(e)}))}#se(e){this.#ee(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),F.log({locationsBitmask:t}),F.assertWithError(t>0,"locationsBitmask must not be zero"),t}#te(e){F.assertWithError(Array.isArray(e),"passed non-array"),F.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return _}get waveformEffects(){return z.WaveformEffects}#ne(e){F.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#re=1270;static get MaxWaveformEffectSegmentDelay(){return this.#re}get maxWaveformEffectSegmentDelay(){return z.MaxWaveformEffectSegmentDelay}#ie(e){if(null!=e.effect){const t=e.effect;this.#ne(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;F.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),F.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ae(t)}}static#oe=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#oe}get maxWaveformEffectSegmentLoopCount(){return z.MaxWaveformEffectSegmentLoopCount}#ae(e){F.assertTypeWithError(e,"number"),F.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),F.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ce=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ce}get maxNumberOfWaveformEffectSegments(){return z.MaxNumberOfWaveformEffectSegments}#he(e){this.#te(e),F.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ie(e)}))}static#le=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#le}get maxWaveformEffectSequenceLoopCount(){return z.MaxWaveformEffectSequenceLoopCount}#ge(e){F.assertTypeWithError(e,"number"),F.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),F.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#de=2550;static get MaxWaveformSegmentDuration(){return this.#de}get maxWaveformSegmentDuration(){return z.MaxWaveformSegmentDuration}#ue(e){F.assertTypeWithError(e.amplitude,"number"),F.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),F.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),F.assertTypeWithError(e.duration,"number"),F.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),F.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#pe=20;static get MaxNumberOfWaveformSegments(){return this.#pe}get maxNumberOfWaveformSegments(){return z.MaxNumberOfWaveformSegments}#ve(e){this.#te(e),F.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ue(e)}))}createWaveformEffectsData(e,t,s=0){this.#he(t),this.#ge(s);let n=[],r=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[r++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[r++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[r]=0);const i=e%4*2;n[r]|=s<<i,3!=e&&7!=e||r++}0!=s&&(n[r++]=s);const o=new DataView(Uint8Array.from(n).buffer);return F.log({dataArray:n,dataView:o}),this.#me(e,"waveformEffect",o)}createWaveformData(e,t){this.#ve(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),F.log({dataView:s}),this.#me(e,"waveform",s)}static#F=["waveformEffect","waveform"];static get Types(){return this.#F}get#z(){return z.Types}#fe(e){F.assertTypeWithError(e,"string"),F.assertWithError(this.#z.includes(e),`invalid vibrationType "${e}"`)}#me(e,t,s){F.assertWithError(s?.byteLength>0,"no data received");const n=this.#se(e);this.#fe(t);const r=this.#z.indexOf(t);F.log({locationsBitmask:n,vibrationTypeIndex:r,dataView:s});const i=V(n,r,s.byteLength,s);return F.log({data:i}),i}}const q=c("Device",{log:!1});class H{constructor(){this.#Se.onDataReceived=this.#be.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{H.#ye(this)}))}static get#Ee(){return C}static#De=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#De}get eventTypes(){return H.#De}#we=new l(this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}#Ce(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}#Pe;get connectionManager(){return this.#Pe}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Te.bind(this),e.onMessageReceived=this.#Le.bind(this)),this.#Pe=e,q.log("assigned new connectionManager",this.#Pe)):q.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new H.#Ee),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#u(){q.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#Me=!1;static get ReconnectOnDisconnection(){return this.#Me}static set ReconnectOnDisconnection(e){q.assertTypeWithError(e,"boolean"),this.#Me=e}#We=H.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#We}set reconnectOnDisconnection(e){q.assertTypeWithError(e,"boolean"),this.#We=e}#Re;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#u(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#Pe?.status||"not connected"}#Te(e){switch(q.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(q.log("starting reconnect interval..."),this.#Re=setInterval((()=>{q.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Re&&(q.log("clearing reconnect interval"),clearInterval(this.#Re),this.#Re=void 0),this.#Ce({type:"connectionStatus",message:{connectionStatus:e}}),this.#Ce({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Ce({type:"isConnected",message:{isConnected:this.isConnected}})}}#Ne(){this.#xe=null,this.#ke=null,this.#Ie=null;for(const e in this.#Oe)this.#Oe[e]=null}#Le(e,t){switch(q.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Ae.decode(t);q.log({manufacturerName:s}),this.#Ue({manufacturerName:s});break;case"modelNumber":const n=this.#Ae.decode(t);q.log({modelNumber:n}),this.#Ue({modelNumber:n});break;case"softwareRevision":const r=this.#Ae.decode(t);q.log({softwareRevision:r}),this.#Ue({softwareRevision:r});break;case"hardwareRevision":const i=this.#Ae.decode(t);q.log({hardwareRevision:i}),this.#Ue({hardwareRevision:i});break;case"firmwareRevision":const a=this.#Ae.decode(t);q.log({firmwareRevision:a}),this.#Ue({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),q.log({pnpId:o}),this.#Ue({pnpId:o});break;case"serialNumber":const c=this.#Ae.decode(t);q.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);q.log("received battery level",{batteryLevel:h}),this.#_e(h);break;case"getName":const l=this.#Ae.decode(t);q.log({name:l}),this.#$e(l);break;case"getType":const g=t.getUint8(0),d=this.#z[g];q.log({typeEnum:g,type:d}),this.#Ve(d);break;case"getSensorConfiguration":const u=this.#Be.parse(t);q.log({sensorConfiguration:u}),this.#Fe(u);break;case"sensorData":this.#Se.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#ze=new TextEncoder;get#qe(){return H.#ze}static#He=new TextDecoder;get#Ae(){return H.#He}#Oe={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Oe}get#je(){return Object.values(this.#Oe).every((e=>null!=e))}#Ue(e){q.log({partialDeviceInformation:e});for(const t in e)this.#Ce({type:t,message:{[t]:e[t]}});Object.assign(this.#Oe,e),q.log({deviceInformation:this.#Oe}),this.#je&&(q.log("completed deviceInformation"),this.#Ce({type:"deviceInformation",message:{deviceInformation:this.#Oe}}))}#Ie=null;get batteryLevel(){return this.#Ie}#_e(e){q.assertTypeWithError(e,"number"),this.#Ie!=e?(this.#Ie=e,q.log({updatedBatteryLevel:this.#Ie}),this.#Ce({type:"batteryLevel",message:{batteryLevel:this.#Ie}})):q.warn(`duplicate batteryLevel assignment ${e}`)}#xe;get name(){return this.#xe}#$e(e){q.assertTypeWithError(e,"string"),this.#xe=e,q.log({updatedName:this.#xe}),this.#Ce({type:"getName",message:{name:this.#xe}})}static get MinNameLength(){return 2}get minNameLength(){return H.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return H.MaxNameLength}async setName(e){this.#u(),q.assertTypeWithError(e,"string"),q.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),q.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#qe.encode(e);q.log({setNameData:t}),await this.#Pe.sendMessage("setName",t)}static#F=["leftInsole","rightInsole"];static get Types(){return this.#F}get#z(){return H.Types}#ke;get type(){return this.#ke}#Ze(e){q.assertTypeWithError(e,"string"),q.assertWithError(this.#z.includes(e),`invalid type "${e}"`)}#Ve(e){this.#Ze(e),e!=this.type?(this.#ke=e,q.log({updatedType:this.#ke}),this.#Se.deviceType=this.#ke,this.#Be.deviceType=this.#ke,this.#Ce({type:"getType",message:{type:this.#ke}})):q.warn("redundant type assignment")}async setType(e){this.#u(),this.#Ze(e);const t=this.#z.indexOf(e),s=Uint8Array.from([t]);q.log({setTypeData:s}),await this.#Pe.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Qe=["left","right"];static get InsoleSides(){return this.#Qe}get insoleSides(){return H.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return O.Types}get sensorTypes(){return H.SensorTypes}static get PressureSensorNames(){return O.PressureSensorNames}get pressureSensorNames(){return H.PressureSensorNames}static get NumberOfPressureSensors(){return O.NumberOfPressureSensors}get numberOfPressureSensors(){return H.NumberOfPressureSensors}#Be=new U;#Ge;get sensorConfiguration(){return this.#Ge}static get MaxSensorRate(){return U.MaxSensorRate}static get SensorRateStep(){return U.SensorRateStep}#Fe(e){this.#Ge=e,q.log({updatedSensorConfiguration:this.#Ge}),this.#Be.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(q.log("clearing sensorDataManager timestamp..."),this.#Se.clearTimestamp()),this.#Ce({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#u(),q.log({newSensorConfiguration:e});const t=this.#Be.createData(e);q.log({setSensorConfigurationData:t}),await this.#Pe.sendMessage("setSensorConfiguration",t)}static#Je=!0;static get ClearSensorConfigurationOnLeave(){return this.#Je}static set ClearSensorConfigurationOnLeave(e){q.assertTypeWithError(e,"boolean"),this.#Je=e}#Ke=H.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Ke}set clearSensorConfigurationOnLeave(e){q.assertTypeWithError(e,"boolean"),this.#Ke=e}static#Xe={};static get ZeroSensorConfiguration(){return this.#Xe}static{this.SensorTypes.forEach((e=>{this.#Xe[e]=0}))}get zeroSensorConfiguration(){return H.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#Se=new O;#be(e,t){q.log({sensorType:e,sensorData:t}),this.#Ce({type:e,message:t}),this.#Ce({type:"sensorData",message:t})}resetPressureRange(){this.#Se.pressureSensorDataManager.resetRange()}#Ye=new z;static get VibrationLocations(){return z.Locations}static get VibrationTypes(){return z.Types}static get VibrationWaveformEffects(){return z.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return z.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return z.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return z.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return z.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return z.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return z.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let r;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:i}=t;r=this.#Ye.createWaveformEffectsData(s,n,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;r=this.#Ye.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}q.log({type:n,dataView:r}),t=V(t,r)})),await this.#Pe.sendMessage("triggerVibration",t)}static#et=[];static get ConnectedDevices(){return this.#et}static#tt=!1;static get UseLocalStorage(){return this.#tt}static set UseLocalStorage(e){this.#st(),q.assertTypeWithError(e,"boolean"),this.#tt=e,this.#tt&&!this.#nt&&this.#rt()}static#it={};static#nt;static#st(){q.assertWithError(e,"localStorage is only available in the browser")}static#at="BS.Device";static#ot(){this.#st(),localStorage.setItem(this.#at,JSON.stringify(this.#nt))}static#rt(){this.#st();let e=localStorage.getItem(this.#at);if("string"!=typeof e)return q.warn("no info found in localStorage"),this.#nt=Object.assign({},this.#it),void this.#ot();try{const t=JSON.parse(e);return q.log({configuration:t}),t}catch(e){q.error(e)}}static async GetDevices(){if(!e)return void q.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void q.warn("bluetooth is not available in this browser");if(!this.#nt)return void q.warn("localStorageConfiguration not found");const t=this.#nt;if(!t.bluetoothDeviceIds||0==t.bluetoothDeviceIds.length)return void q.log("no bluetoothDeviceIds found in configuration");const s=await navigator.bluetooth.getDevices();q.log({bluetoothDevices:s});return s.map((e=>{if(e.gatt&&t.bluetoothDeviceIds.includes(e.id)){const t=new H;t.connectionManager=new C;return t.connectionManager.device=e,t}})).filter(Boolean)}static#ct=["deviceConnected","deviceDisconnected"];static get StaticEventTypes(){return this.#ct}static#ht=new l(this.#ct);static AddEventListener(e,t,s){this.#ht.addEventListener(e,t,s)}static#lt(e){this.#ht.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#ht.removeEventListener(e,t)}static#ye(e){if(e.isConnected)if(this.#et.includes(e))q.warn("device already included");else{if(q.log("adding device",e),this.#et.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t=e.connectionManager;this.#nt.bluetoothDeviceIds.push(t.device.id),this.#ot()}this.#lt({type:"deviceConnected",message:{device:e}})}else this.#et.includes(e)?(q.log("removing device",e),this.#et.splice(this.#et.indexOf(e),1),this.#lt({type:"deviceDisconnected",message:{device:e}})):q.warn("device already not included")}}const j=c("Timer",{log:!1});class Z{#gt;get callback(){return this.#gt}set callback(e){j.assertTypeWithError(e,"function"),j.log({newCallback:e}),this.#gt=e,this.isRunning&&this.restart()}#dt;get interval(){return this.#dt}set interval(e){j.assertTypeWithError(e,"number"),j.assertWithError(e>0,"interval must be above 0"),j.log({newInterval:e}),this.#dt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#ut=null;get isRunning(){return null!=this.#ut}start(){this.isRunning?j.log("interval already running"):(j.log("starting interval"),this.#ut=setInterval(this.#gt,this.#dt))}stop(){this.isRunning?(j.log("stopping interval"),clearInterval(this.#ut),this.#ut=null):j.log("interval already not running")}restart(){this.stop(),this.start()}}const Q=c("BaseScanner");class G{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#c(){Q.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){Q.assertWithError(this.constructor!=G,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c(),g(this,this.#pt)}#pt={discoveredPeripheral:this.#vt.bind(this),isScanning:this.#mt.bind(this)};static#De=["isAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#De}get eventTypes(){return G.#De}#we=new l(this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}dispatchEvent(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}get isAvailable(){return!1}#ft(){Q.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#St(){Q.assertWithError(this.isScanning,"not scanning")}#bt(){Q.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#ft(),this.#bt()}stopScan(){this.#St()}#mt(){this.isScanning?(this.#yt={},this.#Et={}):this.#Dt.stop()}#yt={};get discoveredPeripherals(){return this.#yt}get discoveredPeripheralsArray(){return Object.values(this.#yt).sort(((e,t)=>this.#Et[e.id]-this.#Et[t.id]))}#wt(e){Q.assertWithError(this.#yt[e],`no discovered peripheral with id "${e}"`)}#vt(e){const t=e.message.discoveredPeripheral;this.#yt[t.id]=t,this.#Et[t.id]=Date.now(),this.#Dt.start()}#Et={};static#Ct=5e3;static get DiscoveredPeripheralExpirationTimeout(){return this.#Ct}get#Pt(){return G.DiscoveredPeripheralExpirationTimeout}#Dt=new Z(this.#Tt.bind(this),1e3);#Tt(){const e=Object.entries(this.#yt);if(0==e.length)return void this.#Dt.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Et[e];console.log(t-n),t-n>this.#Pt&&(Q.log("discovered peripheral timeout"),delete this.#yt[e],delete this.#Et[e],this.dispatchEvent({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:s}}))}))}connectToPeripheral(e){this.#ft()}disconnectFromPeripheral(e){this.#ft()}reset(){Q.log("resetting...")}}const J=c("NobleScanner",{log:!0});let K=!1;if(t){var X=require("@abandonware/noble");K=!0}class Y extends G{static get isSupported(){return K}#Lt=!1;get#Mt(){return this.#Lt}set#Mt(e){J.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Lt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):J.log("duplicate isScanning assignment")}get isScanning(){return this.#Mt}#Wt="unknown";get#Rt(){return this.#Wt}set#Rt(e){J.assertTypeWithError(e,"string"),this.#Rt!=e?(this.#Wt=e,J.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):J.log("duplicate nobleState assignment")}#Nt={scanStart:this.#xt.bind(this),scanStop:this.#kt.bind(this),stateChange:this.#It.bind(this),discover:this.#Ot.bind(this)};#xt(){J.log("OnNobleScanStart"),this.#Mt=!0}#kt(){J.log("OnNobleScanStop"),this.#Mt=!1}#It(e){J.log("onNobleStateChange",e),this.#Rt=e}#Ot(e){J.log("onNobleDiscover",e),this.#At[e.id]||(e._scanner=this,this.#At[e.id]=e,g(e,this.#T));const t={name:e.advertisement.localName,id:e.id,rssi:e.rssi};this.dispatchEvent({type:"discoveredPeripheral",message:{discoveredPeripheral:t}})}constructor(){super(),g(X,this.#Nt),g(this,this.#Ut)}get isAvailable(){return"poweredOn"==this.#Rt}startScan(){super.startScan(),X.startScanningAsync([],!0)}stopScan(){super.stopScan(),X.stopScanningAsync()}reset(){super.reset(),X.reset()}#Ut={expiredDiscoveredPeripheral:this.#_t.bind(this)};#_t(e){const t=e.message.discoveredPeripheral,s=this.#At[t.id];s&&(delete this.#At[t.id],d(s,this.#T))}#At={};#$t(e){J.assertTypeWithError(e,"string"),J.assertWithError(this.#At[e],`no noblePeripheral found with id "${e}"`)}#T={connect:this.#L,disconnect:this.#M,rssiUpdate:this.#W,servicesDiscover:this.#R};#L(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){J.log("onNoblePeripheralConnect",e)}#M(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){J.log("onNoblePeripheralDisconnect",e)}#W(e){this._scanner.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){J.log("onNoblePeripheralRssiUpdate",e,t)}#R(e){this._scanner.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){J.log("onNoblePeripheralServicesDiscover",e,t)}connectToPeripheral(e){super.connectToPeripheral(e),this.#$t(e);const t=this.#At[e];J.log("connecting to discoveredPeripheral...",e);const s=new H,n=new T;s.noblePeripheral=t,s.connectionManager=n,s.connect()}disconnectFromPeripheral(e){super.disconnectFromPeripheral(e),this.#$t(e),this.#At[e],J.log("disconnecting from discoveredPeripheral...",e)}}const ee=c("Scanner",{log:!1});let te;Y.isSupported?(ee.log("using NobleScanner"),te=new Y):ee.log("Scanner not available");var se=te;const ne=c("DevicePairPressureSensorDataManager",{log:!0});class re{static get Sides(){return H.InsoleSides}get sides(){return H.InsoleSides}#Vt={};#$=new M;resetPressureRange(){this.#$.resetRange()}onDevicePressureData(e){const{pressure:t}=e.message;if(this.#Vt[e.target.insoleSide]=t,this.#Bt)return this.#Ft()}get#Bt(){this.sides.every((e=>e in this.#Vt))}static#O={pressure:R.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#O}get scalars(){return DevicePair.Scalars}#Ft(){const e=this.scalars.pressure,t={rawSum:0,normalizedSum:0};return this.#Vt.left.data.rawSum,this.sides.forEach((e=>{t.rawSum+=this.#Vt[e].data.rawSum})),t.rawSum>0&&(t.normalizedSum=t.rawSum*e,t.center={x:0,y:0},this.sides.forEach((e=>{const s=this.#Vt[e].data,n=s.rawSum/rawPressureSum;t.center.y+=s.center.y*n,"right"==e&&(t.center.x=n)})),this.#$.updateCenterOfPressureRange(t.center),t.calibratedCenter=this.#$.getCalibratedCenterOfPressure(t.center)),ne.log({pressure:t}),t}}const ie=c("DevicePairSensorDataManager",{log:!0});class ae{static get Sides(){return H.InsoleSides}get sides(){return H.InsoleSides}#zt={};pressureSensorDataManager=new re;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{type:t,timestamp:s}=e.message,n=t;let r;if(this.#zt[n]||(this.#zt[n]={}),this.#zt[n][e.target.insoleSide]=s,"pressure"===n)r=this.pressureSensorDataManager.onDevicePressureData(e);else ie.warn(`uncaught sensorType "${n}"`);if(r){const e=Object.assign({},this.#zt[n]);this.onDataReceived?.(n,{timestamps:e,[n]:r})}else ie.warn("no value received")}onDataReceived}const oe=c("DevicePair",{log:!0});let ce=class e{constructor(){this.#Se.onDataReceived=this.#be.bind(this)}static#De=["pressure","isConnected"];static get EventTypes(){return this.#De}get eventTypes(){return e.#De}#we=new l(this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}#Ce(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}static get Sides(){return H.InsoleSides}get sides(){return e.Sides}#qt;get left(){return this.#qt}#Ht;get right(){return this.#Ht}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}assignInsole(e){if(!e.isInsole)return void oe.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&d(s,this.#jt),g(e,this.#jt),t){case"left":this.#qt=e;break;case"right":this.#Ht=e}return oe.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Ce({type:"isConnected",message:{isConnected:this.isConnected}}),s}oe.warn("device already assigned")}#jt={pressure:this.#Zt.bind(this),isConnected:this.#Qt.bind(this)};#Qt(e){this.#Ce({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#Se=new ae;#Zt(e){this.isConnected&&this.#Se.onDeviceSensorData(e)}#be(e,t){oe.log({sensorType:e,sensorData:t}),this.#Ce({type:e,message:t})}resetPressureRange(){this.#Se.resetPressureRange()}static#Gt=new e;static get shared(){return this.#Gt}static{H.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Gt.assignInsole(t)}))}};const he=c("ServerUtils",{log:!1}),le=3e7,ge=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredPeripheral","discoveredPeripherals","expiredDiscoveredPeripheral","peripheralRSSI","connectToPeripheral","disconnectFromPeripheral"];function de(...e){he.log("createServerMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=V(...e.data),s=t.byteLength;return V((n=e.type,he.assertTypeWithError(n,"string"),he.assertWithError(ge.includes(n),`invalid serverMessageType "${n}"`),ge.indexOf(n)),s,t);var n}));return he.log("messageBuffers",...t),V(...t)}const ue=new TextDecoder;function pe(e,t){const s=e.getUint8(t++),n=ue.decode(e.buffer.slice(t,t+s));return t+=s,n}const ve=de("ping"),me=de("pong"),fe=de("isScanningAvailable"),Se=de("isScanning"),be=de("startScan"),ye=de("stopScan"),Ee=de("discoveredPeripherals"),De=c("WebSocketClient",{log:!0});class we{static#De=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#De}get eventTypes(){return we.#De}#we=new l(this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}#Ce(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}#Jt;get webSocket(){return this.#Jt}set webSocket(e){this.#Jt!=e?(De.log("assigning webSocket",e),this.#Jt&&d(this.#Jt,this.#Kt),g(e,this.#Kt),this.#Jt=e,De.log("assigned webSocket")):De.warn("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Xt(){De.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Yt(){De.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#Yt(),this.#es="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Xt(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#es="disconnecting",this.webSocket.close()}reconnect(){this.#Yt(),this.webSocket=new WebSocket(this.webSocket.url)}static#Me=!0;static get ReconnectOnDisconnection(){return this.#Me}static set ReconnectOnDisconnection(e){De.assertTypeWithError(e,"boolean"),this.#Me=e}#We=we.#Me;get reconnectOnDisconnection(){return this.#We}set reconnectOnDisconnection(e){De.assertTypeWithError(e,"boolean"),this.#We=e}#Kt={open:this.#ts.bind(this),message:this.#ss.bind(this),close:this.#ns.bind(this),error:this.#rs.bind(this)};#ts(e){De.log("webSocket.open",e),this.#is.start(),this.#es="connected"}async#ss(e){De.log("webSocket.message",e),this.#is.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#as(s)}#ns(e){De.log("webSocket.close",e),this.#es="not connected",this.#is.stop(),this.#We&&setTimeout((()=>{this.reconnect()}),3e3)}#rs(e){De.log("webSocket.error",e)}#os="not connected";get#es(){return this.#os}set#es(e){switch(De.assertTypeWithError(e,"string"),De.log({newConnectionStatus:e}),this.#os=e,this.#Ce({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Ce({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Ce({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?(this.#cs(),this.#hs()):(this.#ls=!1,this.#Mt=!1)}}get connectionStatus(){return this.#es}static#He=new TextDecoder;get#Ae(){return we.#He}#as(e){De.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=ge[s],r=e.getUint8(t++);De.log({messageTypeEnum:s,messageType:n,messageByteLength:r}),De.assertWithError(n,`invalid messageTypeEnum ${s}`);let i=t;switch(n){case"ping":this.#gs();break;case"pong":break;case"isScanningAvailable":{const t=Boolean(e.getUint8(i++));De.log({isScanningAvailable:t}),this.#ls=t}break;case"isScanning":{const t=Boolean(e.getUint8(i++));De.log({isScanning:t}),this.#Mt=t}break;case"discoveredPeripheral":{const t=pe(e,i);De.log({discoveredPeripheralString:t}),i+=t.length;const s=JSON.parse(t);De.log({discoveredPeripheral:s}),this.#vt(s)}break;case"expiredDiscoveredPeripheral":{const t=pe(e,i);i+=t.length,this.#_t(t)}break;default:De.error(`uncaught messageType "${n}"`)}t+=r}}#is=new Z(this.#ds.bind(this),le);#ds(){this.#Xt(),this.webSocket.send(ve)}#gs(){this.#Xt(),this.webSocket.send(me)}#us=!1;get#ls(){return this.#us}set#ls(e){De.assertTypeWithError(e,"boolean"),this.#us=e,this.#Ce({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#ps()}get isScanningAvailable(){return this.#ls}#vs(){this.#Xt(),De.assertWithError(this.isScanningAvailable,"scanning is not available")}#cs(){this.#Xt(),this.webSocket.send(fe)}#Lt=!1;get#Mt(){return this.#Lt}set#Mt(e){De.assertTypeWithError(e,"boolean"),this.#Lt=e,this.#Ce({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Mt}#ps(){this.#Xt(),this.webSocket.send(Se)}#St(){De.assertWithError(this.isScanning,"is not scanning")}#bt(){De.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#bt(),this.webSocket.send(be)}stopScan(){this.#St(),this.webSocket.send(ye)}toggleScan(){this.#vs(),this.isScanning?this.stopScan():this.startScan()}#yt={};get discoveredPeripherals(){return this.#yt}#wt(e){De.assertTypeWithError(e,"string"),De.assertWithError(this.#yt[e],`no discoveredPeripheral found with id "${e}"`)}#vt(e){De.log({discoveredPeripheral:e}),this.#yt[e.id]=e,this.#Ce({type:"discoveredPeripheral",message:{discoveredPeripheral:e}})}#hs(){this.#Xt(),this.webSocket.send(Ee)}#_t(e){De.log({discoveredPeripheralId:e});let t=this.#yt[e];t?(De.log({expiredDiscoveredPeripheral:t}),delete this.#yt[e],this.#Ce({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:t}})):De.warn(`no discoveredPeripheral found with id "${e}"`)}connectToPeripheral(e){this.#ms(e)}disconnectFromPeripheral(e){this.#fs(e)}#ms(e){this.#Xt(),De.assertTypeWithError(e,"string"),this.webSocket.send(this.#Ss(e))}#fs(e){this.#Xt(),De.assertTypeWithError(e,"string"),this.webSocket.send(this.#bs(e))}#Ss(e){return de({type:"connectToPeripheral",data:e})}#bs(e){return de({type:"disconnectFromPeripheral",data:e})}#ys={};get devices(){return this.#ys}}const Ce=c("WebSocketServer",{log:!0});t&&require("ws");class Pe{constructor(){se&&g(se,this.#Es)}static#De=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#De}get eventTypes(){return Pe.#De}#we=new l(this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}#Ce(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}#Ds;get server(){return this.#Ds}set server(e){this.#Ds!=e?(Ce.log("assigning server..."),this.#Ds&&(Ce.log("clearing existing server..."),d(this.#Ds,this.#ws)),g(e,this.#ws),this.#Ds=e,Ce.log("assigned server")):Ce.warn("redundant WebSocket assignment")}broadcast(e){this.server.clients.forEach((t=>{t.send(e)}))}#ws={close:this.#Cs.bind(this),connection:this.#Ps.bind(this),error:this.#Ts.bind(this),headers:this.#Ls.bind(this),listening:this.#Ms.bind(this)};#Cs(){Ce.log("server.close")}#Ps(e){Ce.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new Z((()=>this.#Ws(e)),le),e.pingClientTimer.start(),g(e,this.#Rs),this.#Ce({type:"clientConnected",message:{client:e}})}#Ts(e){Ce.error(e)}#Ls(){}#Ms(){Ce.log("server.listening")}#Rs={open:this.#Ns.bind(this),message:this.#xs.bind(this),close:this.#ks.bind(this),error:this.#Is.bind(this)};#Ns(e){Ce.log("client.open")}#xs(e){Ce.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView((n=e.data).buffer.slice(n.byteOffset,n.byteOffset+n.byteLength));var n;this.#Os(t,s)}#ks(e){Ce.log("client.close");const t=e.target;t.pingClientTimer.stop(),d(t,this.#Rs),this.#Ce({type:"clientDisconnected",message:{client:t}})}#Is(e){Ce.log("client.error")}static#He=new TextDecoder;get#Ae(){return Pe.#He}#Os(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),r=ge[n],i=t.getUint8(s++);Ce.log({messageTypeEnum:n,messageType:r,messageByteLength:i}),Ce.assertWithError(r,`invalid messageTypeEnum ${n}`);let a=s;switch(r){case"ping":e.send(pongMessageBuffer);break;case"pong":case"disconnectFromAllPeripherals":break;case"isScanningAvailable":e.send(this.#As);break;case"isScanning":e.send(this.#Us);break;case"startScan":se.startScan();break;case"stopScan":se.stopScan();break;case"discoveredPeripherals":e.send(this.#_s);break;case"connectToPeripheral":{const e=pe(t,a);a+=e.length,se.connectToPeripheral(e)}break;case"disconnectFromPeripheral":{const e=pe(t,a);a+=e.length,se.disconnectFromPeripheral(e)}break;default:Ce.error(`uncaught messageType "${r}"`)}s+=i}}get#As(){return de({type:"isScanningAvailable",data:se.isAvailable})}get#Us(){return de({type:"isScanning",data:se.isScanning})}#$s(e){this.server.clients.forEach((t=>{t.send(e)}))}#Ws(e){e.isAlive?(e.isAlive=!1,e.send(ve)):e.terminate()}#Es={isAvailable:this.#Vs.bind(this),isScanning:this.#Bs.bind(this),discoveredPeripheral:this.#Fs.bind(this),expiredDiscoveredPeripheral:this.#_t.bind(this)};#Vs(e){this.#$s(this.#As)}#Bs(e){this.#$s(this.#Us)}#Fs(e){const t=e.message.discoveredPeripheral;console.log(t),this.#$s(this.#zs(t))}#_t(e){const t=e.message.discoveredPeripheral;console.log("expired",t),this.#$s(this.#qs(t))}#zs(e){return de({type:"discoveredPeripheral",data:e})}get#_s(){return de(...se.discoveredPeripheralsArray.map((e=>({type:"discoveredPeripheral",data:e}))))}#qs(e){return de({type:"expiredDiscoveredPeripheral",data:e.id})}}var Te={setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)},Device:H,DevicePair:ce,WebSocketClient:we,WebSocketServer:Pe,Scanner:se};export{Te as default};
