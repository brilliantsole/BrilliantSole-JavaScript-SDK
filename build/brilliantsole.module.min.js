/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}if(!console.table){const e=(...e)=>{console.log(...e)};console.table=e}function i(){}const a=console.log.bind(console),r=console.warn.bind(console),o=console.error.bind(console),c=console.table.bind(console),l=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0,table:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new h(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?a:i}get warn(){return this.#t.warn?r:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?l:i}get table(){return this.#t.table?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function g(e,t){return h.create(e,t)}function d(e){return e[0].toUpperCase()+e.slice(1)}const u=g("EventDispatcher",{log:!1});class f{constructor(e,t){u.assertWithError(e,"target is required"),this.#s=e,u.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#a(e){u.assertWithError(this.#i(e),`invalid event type "${e}"`)}#r;addEventListener(e,t,s){if(u.log(`adding "${e}" eventListener`,t),this.#a(e),this.#r||(this.#r={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#r;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return u.log(`has "${e}" eventListener?`,t),this.#a(e),this.#r?.[e]?.includes(t)}removeEventListener(e,t){if(u.log(`removing "${e}" eventListener`,t),this.#a(e),this.hasEventListener(e,t)){const s=this.#r[e].indexOf(t);return this.#r[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#a(e.type),this.#r?.[e.type]){e.target=this.#s;const t=this.#r[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){u.error(e)}}}waitForEvent(e){return u.log(`waiting for event "${e}"`),this.#a(e),new Promise((t=>{this.addEventListener(e,(e=>{t(e)}),{once:!0})}))}}function p(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;u.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function m(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;u.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function v(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}const b=new Uint32Array(256);for(let e=0;e<256;++e)b[e]=v(e);function y(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(b[n^i]^s>>>8)>>>0}return s}const S=g("ArrayBufferUtils",{log:!1}),D=new TextEncoder;function C(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return T(e)}if(e instanceof Array){return C(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return T(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function w(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function T(e){const t=D.encode(e);return C(t.byteLength,t)}function E(e,t,s){let n;return s&&(n=e.byteOffset+t+s),S.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}async function M(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}const k=g("FileTransferManager",{log:!1});class L{static#o=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#o}get messageTypes(){return L.MessageTypes}static#c=[...this.#o,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#c}get eventTypes(){return L.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#h=["tflite"];static get Types(){return this.#h}get types(){return L.Types}#g(e){k.assertEnumWithError(e,this.types)}#d(e){k.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#u=["idle","sending","receiving"];static get Statuses(){return this.#u}get statuses(){return L.Statuses}#f(e){k.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#p=["startSend","startReceive","cancel"];static get Commands(){return this.#p}get commands(){return L.Commands}#m(e){k.assertEnumWithError(e,this.commands)}static#v=0;static get MaxLength(){return this.#v}#b=L.MaxLength;get maxLength(){return this.#b}#y(e){k.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);k.log(`maxLength: ${t}kB`),this.#b=t}#S(e){k.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#D;get type(){return this.#D}#C(e){k.log("parseFileType",e);const t=e.getUint8(0);this.#d(t);const s=this.types[t];this.#w(s)}#w(e){k.log({type:e}),this.#D=e,this.#l({type:"getFileTransferType",message:{fileType:e}})}async#T(e){if(this.#g(e),this.type==e)return void k.log(`redundant type assignment ${e}`);const t=this.waitForEvent("getFileTransferType"),s=this.types.indexOf(e);this.sendMessage("setFileTransferType",Uint8Array.from([s])),await t}#E=0;get length(){return this.#E}#M(e){k.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#k(t)}#k(e){k.log(`length: ${e}kB`),this.#E=e,this.#l({type:"getFileLength",message:{fileLength:e}})}async#L(e){if(k.assertTypeWithError(e,"number"),this.#S(e),this.length==e)return void k.log(`redundant length assignment ${e}`);const t=this.waitForEvent("getFileLength"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileLength",s),await t}#I=0;get checksum(){return this.#I}#N(e){k.log("checksum",e);const t=e.getUint32(0,!0);this.#W(t)}#W(e){k.log({checksum:e}),this.#I=e,this.#l({type:"getFileChecksum",message:{fileChecksum:e}})}async#R(e){if(k.assertTypeWithError(e,"number"),this.checksum==e)return void k.log(`redundant checksum assignment ${e}`);const t=this.waitForEvent("getFileChecksum"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileChecksum",s),await t}async#_(e){this.#m(e);const t=this.waitForEvent("fileTransferStatus"),s=this.commands.indexOf(e);this.sendMessage("setFileTransferCommand",Uint8Array.from([s])),await t}#O="idle";get status(){return this.#O}#U(e){k.log("parseFileStatus",e);const t=e.getUint8(0);this.#f(t);const s=this.statuses[t];this.#F(s)}#F(e){k.log({status:e}),this.#O=e,this.#l({type:"fileTransferStatus",message:{fileTransferStatus:e}})}#A(){k.assertWithError("idle"==this.#O,"status is not idle")}#x(){k.assertWithError("idle"!=this.#O,"status is idle")}#P;async#$(e){k.log("parseFileBlock",e),this.#P.push(e.buffer);const t=this.#P.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#E;if(k.log(`received ${t} of ${this.#E} bytes (${100*s}%)`),this.#l({type:"fileTransferProgress",message:{progress:s}}),t!=this.#E)return;k.log("file transfer complete");let n=(new Date).toLocaleString();if("tflite"===this.type)n+=".tflite";const i=new File(this.#P,n),a=y(await i.arrayBuffer());k.log({checksum:a}),a==this.#I?(console.log("received file",i),this.#l({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#l({type:"fileReceived",message:{file:i}})):k.error(`wrong checksum - expected ${this.#I}, got ${a}`)}parseMessage(e,t){switch(k.log({messageType:e}),e){case"maxFileLength":this.#y(t);break;case"getFileTransferType":this.#C(t);break;case"getFileLength":this.#M(t);break;case"getFileChecksum":this.#N(t);break;case"fileTransferStatus":this.#U(t);break;case"getFileTransferBlock":this.#$(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#A(),this.#g(e);const s=await M(t);await this.#T(e);const n=s.byteLength;await this.#L(n);const i=y(s);await this.#R(i),await this.#_("startSend"),await this.#V(s)}async#V(e){return this.#B(e)}#z=256;async#B(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+this.#z),n=1-(e.byteLength-t)/e.byteLength;if(k.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#l({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage("setFileTransferBlock",s),this.#B(e,t+s.byteLength);k.log("finished sending buffer"),this.#l({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#A(),this.#g(e),this.#P=[],await this.#T(e),await this.#_("startReceive")}async cancel(){this.#x(),await this.#_("cancel")}sendMessage}const I=new TextEncoder,N=new TextDecoder;const W=65536;function R(e,t){const s=Date.now();var n;return(n=s)-n%W+e.getUint16(t,!0)}const _={min:1/0,max:-1/0};class O{#q=Object.assign({},_);reset(){Object.assign(this.#q,_)}update(e){this.#q.min=Math.min(e,this.#q.min),this.#q.max=Math.max(e,this.#q.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#q.min,this.#q.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class U{#q={x:new O,y:new O};reset(){this.#q.x.reset(),this.#q.y.reset()}update(e){this.#q.x.update(e.x),this.#q.y.update(e.y)}getNormalization(e){return{x:this.#q.x.getNormalization(e.x),y:this.#q.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const F=g("PressureSensorDataManager",{log:!0});class A{#j=[];get positions(){return this.#j}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;F.log({positions:t}),this.#j=t,this.#H=(s=this.numberOfSensors,n=()=>new O,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#H;#G=new U;resetRange(){this.#H.forEach((e=>e.reset())),this.#G.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),a=this.#H[s].updateAndGetNormalization(i),r=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:a,position:r},t.rawSum+=i,t.normalizedSum+=a/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#G.updateAndGetNormalization(t.center)),F.log({pressure:t}),t}}const x=g("MotionSensorDataManager",{log:!1});class P{static#J=6;static get Vector3Size(){return this.#J}get vector3Size(){return P.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const a={x:s,y:n,z:i};return x.log({vector:a}),a}static#Q=8;static get QuaternionSize(){return this.#Q}get quaternionSize(){return P.QuaternionSize}parseQuaternion(e,t){let[s,n,i,a]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const r={x:s,y:n,z:i,w:a};return x.log({quaternion:r}),r}}g("BarometerSensorDataManager",{log:!0});class ${static#Z={barometer:.78125};static get Scalars(){return this.#Z}get scalars(){return $.Scalars}}const V=g("ParseUtils",{log:!0}),B=new TextDecoder;function z(e,t=0){const s=e.getUint8(t++);return{string:B.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function q(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const a=e.getUint8(i++),r=t[a];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),V.log({messageTypeEnum:a,messageType:r,messageLength:o,dataView:e}),V.assertWithError(r,`invalid messageTypeEnum ${a}`);const c=E(e,i,o);V.log({_dataView:c}),s(r,c),i+=o}}const j=g("SensorDataManager",{log:!1});class H{pressureSensorDataManager=new A;motionSensorDataManager=new P;barometerSensorDataManager=new $;static#h=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#h}get types(){return H.Types}#K=new Map;static AssertValidSensorType(e){j.assertTypeWithError(e,"string"),j.assertWithError(this.#h.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){j.assertTypeWithError(e,"number"),j.assertWithError(e in this.#h,`invalid sensorTypeEnum ${e}`)}onDataReceived;parseData(e){j.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=R(e,t);t+=2;q(new DataView(e.buffer,t),H.Types,((e,t)=>{const n=e,i=this.#K.get(n);let a;switch(n){case"pressure":a=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":a=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":a=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:j.error(`uncaught sensorType "${n}"`)}j.assertWithError(a,`no value defined for sensorType "${n}"`),this.onDataReceived(n,{timestamp:s,[n]:a})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=H.Types[s];if(!n){j.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);j.log({sensorType:n,sensorScalar:i}),this.#K.set(n,i)}}}const G=g("SensorConfigurationManager",{log:!1});class J{#X;#Y(e){G.assertWithError(this.#X,"must get initial sensorConfiguration");const t=this.#X?.includes(e);return G.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=H.Types[n];if(!i){G.warn(`unknown sensorType index ${n}`);continue}const a=e.getUint16(s+1,!0);G.log({sensorType:i,sensorRate:a}),t[i]=a}return G.log({parsedSensorConfiguration:t}),this.#X=Object.keys(t),t}static#ee=65535;static get MaxSensorRate(){return this.#ee}get maxSensorRate(){return J.MaxSensorRate}static#te=5;static get SensorRateStep(){return this.#te}get sensorRateStep(){return J.SensorRateStep}static#se(e){G.assertTypeWithError(e,"number"),G.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),G.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),G.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ne(e){J.#se(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#Y(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{H.AssertValidSensorType(t);const i=H.Types.indexOf(t);s.setUint8(3*n,i);const a=e[t];this.#ne(a),s.setUint16(3*n+1,e[t],!0)})),G.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const Q=g("TfliteManager",{log:!1});class Z{static#o=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteNumberOfSamples","setTfliteNumberOfSamples","getTfliteSensorTypes","setTfliteSensorTypes","getTfliteNumberOfClasses","setTfliteNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#o}get messageTypes(){return Z.MessageTypes}static#ie=["classification","regression"];static get Tasks(){return this.#ie}get tasks(){return Z.Tasks}#ae(e){Q.assertEnumWithError(e,this.tasks)}#re(e){Q.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#c=[...this.#o];static get EventTypes(){return this.#c}get eventTypes(){return Z.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#oe;get name(){return this.#oe}#ce(e){Q.log("parseName",e);const t=N.decode(e);this.#le(t)}#le(e){Q.log({name:e}),this.#oe=e,this.#l({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e){if(Q.assertTypeWithError(e,"string"),this.name==e)return void Q.log(`redundant name assignment ${e}`);const t=this.waitForEvent("getTfliteName"),s=I.encode(e);this.sendMessage("setTfliteName",s),await t}#he;get task(){return this.#he}#ge(e){Q.log("parseTask",e);const t=e.getUint8(0);this.#re(t);const s=this.tasks[t];this.#de(s)}#de(e){Q.log({task:e}),this.#he=e,this.#l({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e){if(this.#ae(e),this.task==e)return void Q.log(`redundant task assignment ${e}`);const t=this.waitForEvent("getTfliteTask"),s=this.tasks.indexOf(e);this.sendMessage("setTfliteTask",Uint8Array.from([s])),await t}#ue;get sampleRate(){return this.#ue}#fe(e){Q.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#pe(t)}#pe(e){Q.log({sampleRate:e}),this.#ue=e,this.#l({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e){if(Q.assertTypeWithError(e,"number"),e-=e%J.SensorRateStep,Q.assertWithError(e>=J.SensorRateStep,`sampleRate must be multiple of ${J.SensorRateStep} greater than 0 (got ${e})`),this.#ue==e)return void Q.log(`redundant sampleRate assignment ${e}`);const t=this.waitForEvent("getTfliteSampleRate"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteSampleRate",s),await t}#me;get numberOfSamples(){return this.#me}#ve(e){Q.log("parseNumberOfSamples",e);const t=e.getUint16(0,!0);this.#be(t)}#be(e){Q.log({numberOfSamples:e}),this.#me=e,this.#l({type:"getTfliteNumberOfSamples",message:{tfliteModelNumberOfSamples:e}})}async setNumberOfSamples(e){if(Q.assertTypeWithError(e,"number"),Q.assertWithError(e>0,`numberOfSamples must be greater than 1 (got ${e})`),this.#me==e)return void Q.log(`redundant numberOfSamples assignment ${e}`);const t=this.waitForEvent("getTfliteNumberOfSamples"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteNumberOfSamples",s),await t}static#ye=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#ye}static AssertValidSensorType(e){H.AssertValidSensorType(e),Q.assertWithError(this.#ye.includes(e),`invalid tflite sensorType "${e}"`)}#Se=[];get sensorTypes(){return this.#Se.slice()}#De(e){Q.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=H.Types[n];i?t.push(i):Q.error(`invalid sensorTypeEnum ${n}`)}this.#Ce(t)}#Ce(e){Q.log({sensorTypes:e}),this.#Se=e,this.#l({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(e){e.forEach((e=>{Z.AssertValidSensorType(e)}));const t=this.waitForEvent("getTfliteSensorTypes");var s;const n=(e=(s=e).filter(((e,t)=>s.indexOf(e)==t))).map((e=>H.Types.indexOf(e))).sort();Q.log(e,n),this.sendMessage("setTfliteSensorTypes",Uint8Array.from(n)),await t}#we;get numberOfClasses(){return this.#we}#Te(e){Q.log("parseNumberOfClasses",e);const t=e.getUint8(0);this.#Ee(t)}#Ee(e){Q.log({numberOfClasses:e}),this.#we=e,this.#l({type:"getTfliteNumberOfClasses",message:{tfliteModelNumberOfClasses:e}})}async setNumberOfClasses(e){if(Q.assertTypeWithError(e,"number"),Q.assertWithError(e>1,`numberOfClasses must be greated than 1 (received ${e})`),this.#we==e)return void Q.log(`redundant numberOfClasses assignment ${e}`);const t=this.waitForEvent("getTfliteNumberOfClasses");this.sendMessage("setTfliteNumberOfClasses",Uint8Array.from([e])),await t}#Me;get isReady(){return this.#Me}#ke(e){Q.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Le(t)}#Le(e){Q.log({isReady:e}),this.#Me=e,this.#l({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#Ie(){Q.assertWithError(this.isReady,"tflite is not ready")}#Ne;get captureDelay(){return this.#Ne}#We(e){Q.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#Re(t)}#Re(e){Q.log({captureDelay:e}),this.#Ne=e,this.#l({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e){if(Q.assertTypeWithError(e,"number"),this.#Ne==e)return void Q.log(`redundant captureDelay assignment ${e}`);const t=this.waitForEvent("getTfliteCaptureDelay"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteCaptureDelay",s),await t}#_e;get threshold(){return this.#_e}#Oe(e){Q.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#Ue(t)}#Ue(e){Q.log({threshold:e}),this.#_e=e,this.#l({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e){if(Q.assertTypeWithError(e,"number"),Q.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#_e==e)return void Q.log(`redundant threshold assignment ${e}`);const t=this.waitForEvent("getTfliteThreshold"),s=new DataView(new ArrayBuffer(4));s.setFloat32(0,e,!0),this.sendMessage("setTfliteThreshold",s),await t}#Fe;get inferencingEnabled(){return this.#Fe}#Ae(e){Q.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#xe(t)}#xe(e){Q.log({inferencingEnabled:e}),this.#Fe=e,this.#l({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e){if(Q.assertTypeWithError(e,"boolean"),this.#Ie(),this.#Fe==e)return void Q.log(`redundant inferencingEnabled assignment ${e}`);const t=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage("setTfliteInferencingEnabled",Uint8Array.from([e])),await t}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#Pe(e){Q.log("parseInference",e);const t=R(e,0);Q.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}Q.log("values",s);const n={timestamp:t,values:s};this.#l({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(Q.log({messageType:e}),e){case"getTfliteName":this.#ce(t);break;case"getTfliteTask":this.#ge(t);break;case"getTfliteSampleRate":this.#fe(t);break;case"getTfliteNumberOfSamples":this.#ve(t);break;case"getTfliteSensorTypes":this.#De(t);break;case"getTfliteNumberOfClasses":this.#Te(t);break;case"tfliteModelIsReady":this.#ke(t);break;case"getTfliteCaptureDelay":this.#We(t);break;case"getTfliteThreshold":this.#Oe(t);break;case"getTfliteInferencingEnabled":this.#Ae(t);break;case"tfliteModelInference":this.#Pe(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const K=g("ConnectionManager",{log:!0});class X{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","getCurrentTime","setCurrentTime","triggerVibration",...L.MessageTypes,...Z.MessageTypes];static get MessageTypes(){return this.#o}get id(){this.#$e("id")}onStatusUpdated;onMessageReceived;static#Ve(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#$e(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#Ve("type")}get type(){return this.constructor.type}#Be(){K.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ze(){K.assertWithError(this.constructor!=X,`${this.constructor.name} must be subclassed`)}constructor(){this.#ze(),this.#Be()}#O="not connected";get status(){return this.#O}set status(e){K.assertTypeWithError(e,"string"),this.#O!=e?(K.log(`new connection status "${e}"`),this.#O=e,this.onStatusUpdated?.(this.status)):K.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#qe(){K.assertWithError(!this.isConnected,"device is already connected")}#je(){K.assertWithError("connecting"!=this.status,"device is already connecting")}#He(){K.assertWithError(this.isConnected,"device is not connected")}#Ge(){K.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Je(){this.#He(),this.#Ge()}async connect(){this.#qe(),this.#je(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#qe(),this.#je(),K.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#He(),this.#Ge(),this.status="disconnecting",K.log("disconnecting from device...")}async sendMessage(e,t){this.#Je(),K.log("sending message",{messageType:e,data:t})}}const Y=g("bluetoothUUIDs",{log:!1});if(t){var ee=require("webbluetooth").BluetoothUUID}if(e)ee=window.BluetoothUUID;function te(e){return Y.assertTypeWithError(e,"string"),Y.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function se(e){return ee?.getCharacteristic?.(e)}function ne(e){return ee?.getService?.(e)}const ie=Object.freeze({services:{deviceInformation:{uuid:ne("device_information"),characteristics:{manufacturerName:{uuid:se("manufacturer_name_string")},modelNumber:{uuid:se("model_number_string")},hardwareRevision:{uuid:se("hardware_revision_string")},firmwareRevision:{uuid:se("firmware_revision_string")},softwareRevision:{uuid:se("software_revision_string")},pnpId:{uuid:se("pnp_id")},serialNumber:{uuid:se("serial_number_string")}}},battery:{uuid:ne("battery_service"),characteristics:{batteryLevel:{uuid:se("battery_level")}}},main:{uuid:te("0000"),characteristics:{name:{uuid:te("1000")},type:{uuid:te("1001")},sensorConfiguration:{uuid:te("2000")},pressurePositions:{uuid:te("2001")},sensorScalars:{uuid:te("2002")},currentTime:{uuid:te("2003")},sensorData:{uuid:te("2004")},vibration:{uuid:te("3000")},maxFileLength:{uuid:te("4000")},fileTransferType:{uuid:te("4001")},fileLength:{uuid:te("4002")},fileChecksum:{uuid:te("4003")},fileTransferCommand:{uuid:te("4004")},fileTransferStatus:{uuid:te("4005")},fileTransferBlock:{uuid:te("4006")},tfliteModelName:{uuid:te("5000")},tfliteModelTask:{uuid:te("5001")},tfliteModelSampleRate:{uuid:te("5002")},tfliteModelNumberOfSamples:{uuid:te("5003")},tfliteModelSensorTypes:{uuid:te("5004")},tfliteModelNumberOfClasses:{uuid:te("5005")},tfliteModelIsReady:{uuid:te("5006")},tfliteCaptureDelay:{uuid:te("5007")},tfliteThreshold:{uuid:te("5008")},tfliteInferencingEnabled:{uuid:te("5009")},tfliteModelInference:{uuid:te("500a")}}},smp:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{smp:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.smp.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),ae=ie.serviceUUIDs,re=ie.optionalServiceUUIDs,oe=[...ae,...re];function ce(e){return ie.getServiceNameFromUUID(e)}const le=[],he=[],ge=[];function de(e){return ie.getCharacteristicNameFromUUID(e)}function ue(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":case"fileTransferCommand":case"fileTransferBlock":case"tfliteModelInference":case"smp":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":case"currentTime":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferStatus":case"fileTransferBlock":case"tfliteModelName":case"tfliteModelTask":case"tfliteModelSampleRate":case"tfliteModelNumberOfSamples":case"tfliteModelSensorTypes":case"tfliteModelNumberOfClasses":case"tfliteModelIsReady":case"tfliteThreshold":case"tfliteCaptureDelay":case"tfliteInferencingEnabled":case"tfliteModelInference":case"smp":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferCommand":case"fileTransferBlock":case"tfliteModelName":case"tfliteModelTask":case"tfliteModelNumberOfSamples":case"tfliteModelSampleRate":case"tfliteModelSensorTypes":case"tfliteModelNumberOfClasses":case"tfliteInferencingEnabled":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(ie.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{ae.includes(t.uuid)&&le.push(s.uuid),he.push(s.uuid),ge.push(e)}))}),[]);g("BluetoothConnectionManager",{log:!0});class fe extends X{onCharacteristicValueChanged(e,t){switch(e){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":case"maxFileLength":case"fileTransferStatus":case"tfliteModelIsReady":case"tfliteModelInference":case"smp":this.onMessageReceived(e,t);break;case"name":this.onMessageReceived("getName",t);break;case"type":this.onMessageReceived("getType",t);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",t);break;case"currentTime":this.onMessageReceived("getCurrentTime",t);break;case"fileTransferType":this.onMessageReceived("getFileTransferType",t);break;case"fileLength":this.onMessageReceived("getFileLength",t);break;case"fileChecksum":this.onMessageReceived("getFileChecksum",t);break;case"fileTransferBlock":this.onMessageReceived("getFileTransferBlock",t);break;case"tfliteModelName":this.onMessageReceived("getTfliteName",t);break;case"tfliteModelTask":this.onMessageReceived("getTfliteTask",t);break;case"tfliteModelSampleRate":this.onMessageReceived("getTfliteSampleRate",t);break;case"tfliteModelNumberOfSamples":this.onMessageReceived("getTfliteNumberOfSamples",t);break;case"tfliteModelSensorTypes":this.onMessageReceived("getTfliteSensorTypes",t);break;case"tfliteModelNumberOfClasses":this.onMessageReceived("getTfliteNumberOfClasses",t);break;case"tfliteCaptureDelay":this.onMessageReceived("getTfliteCaptureDelay",t);break;case"tfliteThreshold":this.onMessageReceived("getTfliteThreshold",t);break;case"tfliteInferencingEnabled":this.onMessageReceived("getTfliteInferencingEnabled",t);break;default:throw new Error(`uncaught characteristicName "${e}"`)}}characteristicNameForMessageType(e){switch(e){case"setName":return"name";case"setType":return"type";case"setSensorConfiguration":return"sensorConfiguration";case"setCurrentTime":return"currentTime";case"triggerVibration":return"vibration";case"setFileTransferType":return"fileTransferType";case"setFileLength":return"fileLength";case"setFileChecksum":return"fileChecksum";case"setFileTransferCommand":return"fileTransferCommand";case"setFileTransferBlock":return"fileTransferBlock";case"setTfliteName":return"tfliteModelName";case"setTfliteTask":return"tfliteModelTask";case"setTfliteSampleRate":return"tfliteModelSampleRate";case"setTfliteNumberOfSamples":return"tfliteModelNumberOfSamples";case"setTfliteSensorTypes":return"tfliteModelSensorTypes";case"setTfliteNumberOfClasses":return"tfliteModelNumberOfClasses";case"setTfliteCaptureDelay":return"tfliteCaptureDelay";case"setTfliteThreshold":return"tfliteThreshold";case"setTfliteInferencingEnabled":return"tfliteInferencingEnabled";case"smp":return"smp";default:throw Error(`no characteristicName for messageType "${e}"`)}}}const pe=g("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var me={bluetooth:t}}if(e)me=window.navigator;class ve extends fe{get id(){return this.device?.id}#Qe={characteristicvaluechanged:this.#Ze.bind(this)};#Ke={gattserverdisconnected:this.#Xe.bind(this)};static get isSupported(){return"bluetooth"in me}static get type(){return"webBluetooth"}#Ye;get device(){return this.#Ye}set device(e){this.#Ye!=e?(this.#Ye&&m(this.#Ye,this.#Ke),e&&p(e,this.#Ke),this.#Ye=e):pe.log("tried to assign the same BluetoothDevice")}get server(){return this.#Ye?.gatt}get isConnected(){return this.server?.connected}#et=new Map;#tt=new Map;async connect(){await super.connect();try{const t=await me.bluetooth.requestDevice({filters:[{services:ae}],optionalServices:e?re:[]});pe.log("got BluetoothDevice"),this.device=t,pe.log("connecting to device...");const s=await this.device.gatt.connect();pe.log(`connected to device? ${s.connected}`),await this.#st(),pe.log("fully connected"),this.status="connected"}catch(e){pe.error(e),this.status="not connected",this.server?.disconnect(),this.#nt()}}async#st(){this.#nt(),pe.log("getting services...");const e=await this.server.getPrimaryServices();pe.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),pe.log("getting characteristics...");for(const t in e){const i=e[t];pe.log({service:i});const a=ce(i.uuid);pe.assertWithError(a,`no name found for service uuid "${i.uuid}"`),pe.log(`got "${a}" service`),i._name=a,this.#et.set(a,i),pe.log(`getting characteristics for "${a}" service`);const r=await i.getCharacteristics();pe.log(`got characteristics for "${a}" service`);for(const e in r){const t=r[e];pe.log({characteristic:t});const i=de(t.uuid);pe.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${a}" service`),pe.log(`got "${i}" characteristic in "${a}" service`),t._name=i,this.#tt.set(i,t),p(t,this.#Qe);const o=t.properties||ue(i);o.notify&&(pe.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(pe.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#it(t))}}}#nt(){this.device&&m(this.device,this.#Ke),this.#tt.forEach((e=>{m(e,this.#Qe)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#nt(),this.status="not connected"}#Ze(e){pe.log("oncharacteristicvaluechanged");const t=e.target;this.#it(t)}#it(e){pe.log("onCharacteristicValue");const t=e._name;pe.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),pe.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;pe.assertWithError(s,`no data found for "${t}" characteristic`),pe.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}#Xe(e){pe.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){await super.sendMessage(...arguments);const i=this.characteristicNameForMessageType(e);pe.log({characteristicName:i});const a=this.#tt.get(i);pe.assertWithError(a,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),"smp"==e?await a.writeValueWithoutResponse(t):await a.writeValueWithResponse(t);const r=a.properties||ue(i);r.read&&!r.notify&&(pe.log("reading value after write..."),await a.readValue(),(s||n)&&this.#it(a))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),pe.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(pe.log("successfully reconnected!"),await this.#st(),this.status="connected"):(pe.log("unable to reconnect"),this.status="not connected")}}const be=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ye=g("VibrationManager");class Se{static#at=["front","rear"];static get Locations(){return this.#at}get locations(){return Se.Locations}#rt(e){ye.assertTypeWithError(e,"string"),ye.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ot(e){this.#ct(e),e.forEach((e=>{this.#rt(e)}))}#lt(e){this.#ot(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ye.log({locationsBitmask:t}),ye.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ct(e){ye.assertWithError(Array.isArray(e),"passed non-array"),ye.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return be}get waveformEffects(){return Se.WaveformEffects}#ht(e){ye.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#gt=1270;static get MaxWaveformEffectSegmentDelay(){return this.#gt}get maxWaveformEffectSegmentDelay(){return Se.MaxWaveformEffectSegmentDelay}#dt(e){if(null!=e.effect){const t=e.effect;this.#ht(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ye.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ye.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ut(t)}}static#ft=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#ft}get maxWaveformEffectSegmentLoopCount(){return Se.MaxWaveformEffectSegmentLoopCount}#ut(e){ye.assertTypeWithError(e,"number"),ye.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ye.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#pt=8;static get MaxNumberOfWaveformEffectSegments(){return this.#pt}get maxNumberOfWaveformEffectSegments(){return Se.MaxNumberOfWaveformEffectSegments}#mt(e){this.#ct(e),ye.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#dt(e)}))}static#vt=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#vt}get maxWaveformEffectSequenceLoopCount(){return Se.MaxWaveformEffectSequenceLoopCount}#bt(e){ye.assertTypeWithError(e,"number"),ye.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ye.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#yt=2550;static get MaxWaveformSegmentDuration(){return this.#yt}get maxWaveformSegmentDuration(){return Se.MaxWaveformSegmentDuration}#St(e){ye.assertTypeWithError(e.amplitude,"number"),ye.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ye.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ye.assertTypeWithError(e.duration,"number"),ye.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ye.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Dt=20;static get MaxNumberOfWaveformSegments(){return this.#Dt}get maxNumberOfWaveformSegments(){return Se.MaxNumberOfWaveformSegments}#Ct(e){this.#ct(e),ye.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#St(e)}))}createWaveformEffectsData(e,t,s=0){this.#mt(t),this.#bt(s);let n=[],i=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const r=0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const a=e%4*2;n[i]|=s<<a,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ye.log({dataArray:n,dataView:o}),this.#wt(e,"waveformEffect",o)}createWaveformData(e,t){this.#Ct(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ye.log({dataView:s}),this.#wt(e,"waveform",s)}static#h=["waveformEffect","waveform"];static get Types(){return this.#h}get#Tt(){return Se.Types}#Et(e){ye.assertTypeWithError(e,"string"),ye.assertWithError(this.#Tt.includes(e),`invalid vibrationType "${e}"`)}#wt(e,t,s){ye.assertWithError(s?.byteLength>0,"no data received");const n=this.#lt(e);this.#Et(t);const i=this.#Tt.indexOf(t);ye.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const a=C(n,i,s.byteLength,s);return ye.log({data:a}),a}}const De=4294967296,Ce=9007199254740992;const we={encode:function(e){let t,s=new ArrayBuffer(256),n=new DataView(s),i=0;function a(e){let a=s.byteLength;const r=i+e;for(;a<r;)a<<=1;if(a!==s.byteLength){const e=n;s=new ArrayBuffer(a),n=new DataView(s);const t=i+3>>2;for(let s=0;s<t;++s)n.setUint32(s<<2,e.getUint32(s<<2))}return t=e,n}function r(){i+=t}function o(e){r(a(1).setUint8(i,e))}function c(e){const t=a(e.length);for(let s=0;s<e.length;++s)t.setUint8(i+s,e[s]);r()}function l(e,t){t<24?o(e<<5|t):t<256?(o(e<<5|24),o(t)):t<65536?(o(e<<5|25),function(e){r(a(2).setUint16(i,e))}(t)):t<4294967296?(o(e<<5|26),function(e){r(a(4).setUint32(i,e))}(t)):(o(e<<5|27),function(e){const t=e%De,s=(e-t)/De,n=a(8);n.setUint32(i,s),n.setUint32(i+4,t),r()}(t))}if(function e(t){let s;const n=[];let h;if(!1===t)return o(244);if(!0===t)return o(245);if(null===t)return o(246);if(void 0===t)return o(247);switch(typeof t){case"number":if(Math.floor(t)===t){if(t>=0&&t<=Ce)return l(0,t);if(-Ce<=t&&t<0)return l(1,-(t+1))}return o(251),function(e){r(a(8).setFloat64(i,e))}(t);case"string":for(s=0;s<t.length;++s){let e=t.charCodeAt(s);e<128?n.push(e):e<2048?(n.push(192|e>>6),n.push(128|63&e)):e<55296?(n.push(224|e>>12),n.push(128|e>>6&63),n.push(128|63&e)):(e=(1023&e)<<10,e|=1023&t.charCodeAt(++s),e+=65536,n.push(240|e>>18),n.push(128|e>>12&63),n.push(128|e>>6&63),n.push(128|63&e))}return l(3,n.length),c(n);default:if(Array.isArray(t))for(h=t.length,l(4,h),s=0;s<h;++s)e(t[s]);else if(t instanceof Uint8Array)l(2,t.length),c(t);else{const n=Object.keys(t);for(h=n.length,l(5,h),s=0;s<h;++s){const i=n[s];e(i),e(t[i])}}}}(e),"slice"in s)return s.slice(0,i);const h=new ArrayBuffer(i),g=new DataView(h);for(let e=0;e<i;++e)g.setUint8(e,n.getUint8(e));return h},decode:function(e,t,s){const n=new DataView(e);let i=0;function a(e,t){return i+=e,t}function r(t){return a(t,new Uint8Array(e,i,t))}function o(){return a(1,n.getUint8(i))}function c(){return a(2,n.getUint16(i))}function l(){return a(4,n.getUint32(i))}function h(){return 255===n.getUint8(i)&&(i+=1,!0)}function g(e){if(e<24)return e;if(24===e)return o();if(25===e)return c();if(26===e)return l();if(27===e)return l()*De+l();if(31===e)return-1;throw new Error("Invalid length encoding")}function d(e){const t=o();if(255===t)return-1;const s=g(31&t);if(s<0||t>>5!==e)throw new Error("Invalid indefinite length element");return s}function u(e,t){for(let s=0;s<t;++s){let s=o();128&s&&(s<224?(s=(31&s)<<6|63&o(),t-=1):s<240?(s=(15&s)<<12|(63&o())<<6|63&o(),t-=2):(s=(15&s)<<18|(63&o())<<12|(63&o())<<6|63&o(),t-=3)),s<65536?e.push(s):(s-=65536,e.push(55296|s>>10),e.push(56320|1023&s))}}"function"!=typeof t&&(t=function(e){return e}),"function"!=typeof s&&(s=function(){});const f=function e(){const l=o(),f=l>>5,p=31&l;let m,v;if(7===f)switch(p){case 25:return function(){const e=new ArrayBuffer(4),t=new DataView(e),s=c(),n=32768&s;let i=31744&s;const a=1023&s;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==a)return(n?-1:1)*a*5.960464477539063e-8;return t.setUint32(0,n<<16|i<<13|a<<13),t.getFloat32(0)}();case 26:return a(4,n.getFloat32(i));case 27:return a(8,n.getFloat64(i))}if(v=g(p),v<0&&(f<2||f>6))throw new Error("Invalid length");const b=[];let y;const S={};switch(f){case 0:return v;case 1:return-1-v;case 2:if(v<0){const e=[];let t=0;for(;(v=d(f))>=0;)t+=v,e.push(r(v));const s=new Uint8Array(t);let n=0;for(m=0;m<e.length;++m)s.set(e[m],n),n+=e[m].length;return s}return r(v);case 3:if(v<0)for(;(v=d(f))>=0;)u(b,v);else u(b,v);return String.fromCharCode.apply(null,b);case 4:if(v<0)for(y=[];!h();)y.push(e());else for(y=new Array(v),m=0;m<v;++m)y[m]=e();return y;case 5:for(m=0;m<v||v<0&&!h();++m){S[e()]=e()}return S;case 6:return t(e(),v);case 7:switch(v){case 20:return!1;case 21:return!0;case 22:return null;case 23:return;default:return s(v)}}}();if(i!==e.byteLength)throw new Error("Remaining bytes");return f}},Te=g("mcumgr",{log:!0}),Ee=0,Me=1,ke=2,Le=3,Ie=0,Ne=1,We=8,Re=0,_e=2,Oe=3,Ue=5,Fe=0,Ae=1,xe=5,Pe=0;class $e{constructor(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}onMessage(e){return this._messageCallback=e,this}onImageUploadNext(e){return this._imageUploadNextCallback=e,this}onImageUploadProgress(e){return this._imageUploadProgressCallback=e,this}onImageUploadFinished(e){return this._imageUploadFinishedCallback=e,this}onFileUploadNext(e){return this._fileUploadNextCallback=e,this}onFileUploadProgress(e){return this._fileUploadProgressCallback=e,this}onFileUploadFinished(e){return this._fileUploadFinishedCallback=e,this}onFileDownloadNext(e){return this._fileDownloadNextCallback=e,this}onFileDownloadProgress(e){return this._fileDownloadProgressCallback=e,this}onFileDownloadFinished(e){return this._fileDownloadFinishedCallback=e,this}_getMessage(e,t,s,n){let i=[];void 0!==n&&(i=[...new Uint8Array(we.encode(n))]);const a=255&i.length,r=[e,0,i.length>>8,a,t>>8,255&t,this._seq,s,...i];return this._seq=(this._seq+1)%256,r}_notification(e){Te.log("mcumgr - message received");const t=new Uint8Array(e);this._buffer=new Uint8Array([...this._buffer,...t]);const s=256*this._buffer[2]+this._buffer[3];this._buffer.length<s+8||(this._processMessage(this._buffer.slice(0,s+8)),this._buffer=this._buffer.slice(s+8))}_processMessage(e){const[t,,s,n,i,a,,r]=e,o=we.decode(e.slice(8).buffer),c=256*s+n,l=256*i+a;return Te.log("mcumgr - Process Message - Group: "+l+", Id: "+r+", Off: "+o.off),l===Ne&&r===Ae&&o.off?(this._uploadOffset=o.off,void this._uploadNext()):t===Le&&l===We&&r===Pe&&o.off?(this._uploadFileOffset=o.off,void this._uploadFileNext()):t===Me&&l===We&&r===Pe?(this._downloadFileOffset+=o.data.length,null!=o.len&&(this._downloadFileLength=o.len),Te.log("downloaded "+this._downloadFileOffset+" bytes of "+this._downloadFileLength),this._downloadFileLength>0&&this._fileDownloadProgressCallback({percentage:Math.floor(this._downloadFileOffset/this._downloadFileLength*100)}),this._messageCallback&&this._messageCallback({op:t,group:l,id:r,data:o,length:c}),void this._downloadFileNext()):void(this._messageCallback&&this._messageCallback({op:t,group:l,id:r,data:o,length:c}))}cmdReset(){return this._getMessage(ke,Ie,Ue)}smpEcho(e){return this._getMessage(ke,Ie,Re,{d:e})}cmdImageState(){return this._getMessage(Ee,Ne,Fe)}cmdImageErase(){return this._getMessage(ke,Ne,xe,{})}cmdImageTest(e){return this._getMessage(ke,Ne,Fe,{hash:e,confirm:!1})}cmdImageConfirm(e){return this._getMessage(ke,Ne,Fe,{hash:e,confirm:!0})}_hash(e){return crypto.subtle.digest("SHA-256",e)}async _uploadNext(){if(this._uploadOffset>=this._uploadImage.byteLength)return this._uploadIsInProgress=!1,void this._imageUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadOffset};0===this._uploadOffset&&(e.len=this._uploadImage.byteLength,e.sha=new Uint8Array(await this._hash(this._uploadImage))),this._imageUploadProgressCallback({percentage:Math.floor(this._uploadOffset/this._uploadImage.byteLength*100)});const t=this._mtu-we.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadImage.slice(this._uploadOffset,this._uploadOffset+t)),this._uploadOffset+=t;const s=this._getMessage(ke,Ne,Ae,e);Te.log("mcumgr - _uploadNext: Message Length: "+s.length),this._imageUploadNextCallback({packet:s})}async reset(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}async cmdUpload(e,t=0){this._uploadIsInProgress?Te.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadOffset=0,this._uploadImage=e,this._uploadSlot=t,this._uploadNext())}async cmdUploadFile(e,t){this._uploadIsInProgress?Te.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadFileOffset=0,this._uploadFile=e,this._uploadFilename=t,this._uploadFileNext())}async _uploadFileNext(){if(Te.log("uploadFileNext - offset: "+this._uploadFileOffset+", length: "+this._uploadFile.byteLength),this._uploadFileOffset>=this._uploadFile.byteLength)return this._uploadIsInProgress=!1,void this._fileUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadFileOffset};0===this._uploadFileOffset&&(e.len=this._uploadFile.byteLength),e.name=this._uploadFilename,this._fileUploadProgressCallback({percentage:Math.floor(this._uploadFileOffset/this._uploadFile.byteLength*100)});const t=this._mtu-we.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadFile.slice(this._uploadFileOffset,this._uploadFileOffset+t)),this._uploadFileOffset+=t;const s=this._getMessage(ke,We,Pe,e);Te.log("mcumgr - _uploadNext: Message Length: "+s.length),this._fileUploadNextCallback({packet:s})}async cmdDownloadFile(e,t){this._downloadIsInProgress?Te.error("Download is already in progress."):(this._downloadIsInProgress=!0,this._downloadFileOffset=0,this._downloadFileLength=0,this._downloadRemoteFilename=e,this._downloadLocalFilename=t,this._downloadFileNext())}async _downloadFileNext(){if(this._downloadFileLength>0&&this._downloadFileOffset>=this._downloadFileLength)return this._downloadIsInProgress=!1,void this._fileDownloadFinishedCallback();const e={off:this._downloadFileOffset};0===this._downloadFileOffset&&(e.name=this._downloadRemoteFilename);const t=this._getMessage(Ee,We,Pe,e);Te.log("mcumgr - _downloadNext: Message Length: "+t.length),this._fileDownloadNextCallback({packet:t})}async imageInfo(e){const t={},s=new Uint8Array(e);if(s.length<32)throw new Error("Invalid image (too short file)");if(61!==s[0]||184!==s[1]||243!==s[2]||150!==s[3])throw new Error("Invalid image (wrong magic bytes)");if(0!==s[4]||0!==s[5]||0!==s[6]||0!==s[7])throw new Error("Invalid image (wrong load address)");const n=s[8]+256*s[9];if(0!==s[10]||0!==s[11])throw new Error("Invalid image (wrong protected TLV area size)");const i=s[12]+256*s[13]+65536*s[14]+s[15]*2**24;if(t.imageSize=i,s.length<i+n)throw new Error("Invalid image (wrong image size)");if(0!==s[16]||0!==s[17]||0!==s[18]||0!==s[19])throw new Error("Invalid image (wrong flags)");const a=`${s[20]}.${s[21]}.${s[22]+256*s[23]}`;return t.version=a,t.hash=[...new Uint8Array(await this._hash(e.slice(0,i+32)))].map((e=>e.toString(16).padStart(2,"0"))).join(""),t}}const Ve=g("FirmwareManager",{log:!0});class Be{sendMessage;constructor(){this.#Mt()}static#o=["smp"];static get MessageTypes(){return this.#o}get messageTypes(){return Be.MessageTypes}static#c=[...this.#o,"firmwareImageState","firmwareUpdateProgress","firmwareUploadComplete"];static get EventTypes(){return this.#c}get eventTypes(){return Be.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}parseMessage(e,t){if(Ve.log({messageType:e}),"smp"!==e)throw Error(`uncaught messageType ${e}`);this.#kt._notification(Array.from(new Uint8Array(t.buffer))),this.#l({type:"smp"})}async updateFirmware(e){Ve.log("updateFirmware",e);const t=this.waitForEvent("firmwareUploadComplete");await this.#Lt();const s=await M(e),n=await this.#kt.imageInfo(s);console.log({imageInfo:n}),this.#kt.cmdUpload(s,1),await t}#It;async#Lt(){const e=this.waitForEvent("firmwareImageState");Ve.log("getting firmware image state..."),this.sendMessage("smp",Uint8Array.from(this.#kt.cmdImageState())),await e}async#Nt(){if(!this.#It?.[0])return void Ve.log("no images found yet...");const e=this.waitForEvent("smp");Ve.log("getting firmware image test..."),this.sendMessage("smp",Uint8Array.from(this.#kt.cmdImageTest(this.#It[1].hash))),await e,await this.#Lt()}async#Wt(){const e=this.waitForEvent("smp");Ve.log("erasing image..."),this.sendMessage("smp",Uint8Array.from(this.#kt.cmdImageErase())),await e,await this.#Lt()}async#Rt(){if(!0===this.#It?.[1].confirmed)return void Ve.log("image 1 is already confirmed");const e=this.waitForEvent("smp");Ve.log("confirming image..."),this.sendMessage("smp",Uint8Array.from(this.#kt.cmdImageConfirm(this.#It[1].hash))),await e}async#_t(e){Ve.assertTypeWithError(e,"string");const t=this.waitForEvent("smp");Ve.log("sending echo..."),this.sendMessage("smp",Uint8Array.from(this.#kt.smpEcho(e))),await t}async#Ot(){const e=this.waitForEvent("smp");Ve.log("resetting..."),this.sendMessage("smp",Uint8Array.from(this.#kt.cmdReset())),await e}#kt=new $e;#Mt(){this.#kt.onMessage(this.#Ut.bind(this)),this.#kt.onFileDownloadNext(this.#Ft),this.#kt.onFileDownloadProgress(this.#At.bind(this)),this.#kt.onFileDownloadFinished(this.#xt.bind(this)),this.#kt.onFileUploadNext(this.#Pt.bind(this)),this.#kt.onFileUploadProgress(this.#$t.bind(this)),this.#kt.onFileUploadFinished(this.#Vt.bind(this)),this.#kt.onImageUploadNext(this.#Bt.bind(this)),this.#kt.onImageUploadProgress(this.#zt.bind(this)),this.#kt.onImageUploadFinished(this.#qt.bind(this))}#Ut({op:e,group:t,id:s,data:n,length:i}){switch(Ve.log("onMcuMessage",...arguments),t){case Ie:switch(s){case Re:Ve.log(`echo "${n.r}"`);break;case _e:Ve.table(n.tasks);break;case Oe:Ve.log(n)}break;case Ne:if(s===Fe)this.#jt(n);break;default:throw Error(`uncaught mcuMessage group ${t}`)}}#Ft(){Ve.log("onMcuFileDownloadNext",...arguments)}#At(){Ve.log("onMcuFileDownloadProgress",...arguments)}#xt(){Ve.log("onMcuFileDownloadFinished",...arguments)}#Pt(){Ve.log("onMcuFileUploadNext",...arguments)}#$t(){Ve.log("onMcuFileUploadProgress",...arguments)}#Vt(){Ve.log("onMcuFileUploadFinished",...arguments)}#Bt({packet:e}){Ve.log("onMcuImageUploadNext",...arguments),this.sendMessage("smp",Uint8Array.from(e))}#zt({percentage:e}){const t=e/100;Ve.log("onMcuImageUploadProgress",...arguments),this.#l({type:"firmwareUpdateProgress",message:{firmwareUpdateProgress:t}})}async#qt(){Ve.log("onMcuImageUploadFinished",...arguments),await this.#Nt(),this.#l({type:"firmwareUpdateProgress",message:{firmwareUpdateProgress:100}}),this.#l({type:"firmwareUploadComplete"})}#jt(e){e.images?(this.#It=e.images,Ve.log("images",this.#It),2==this.#It.length&&(this.#It[1].bootable?this.#It[0].version!=this.pendingVersion&&this.#It[0].confirmed||(this.#It[0].confirmed?Ve.log('Firmware has been updated. Click "Disconnect" to disconnect from the device.'):Ve.log('Slot 1 has a valid image. Click "Confirm Image" to confirm it or wait and the device will swap images back.')):Ve.warn('Slot 2 has a invalid image. Click "Erase Image" to erase it or upload a different image'),0==this.#It[1].pending?Ve.log('Slot 2 has a valid image. Click "Test Image" to test it or upload a different image.'):(this.pendingVersion=this.#It[1].version,Ve.log("Press the Reset Device button to update to the new firmware image"))),1==this.#It.length&&(this.#It.push({slot:1,empty:!0,version:"Empty",pending:!1,confirmed:!1,bootable:!1}),Ve.log("Select a firmware update image to upload to slot 2.")),this.#l({type:"firmwareImageState",message:{firmwareImages:this.#It}})):Ve.log("no images found")}}const ze=g("Device",{log:!1});class qe{get id(){return this.#Ht?.id}constructor(){this.#Gt.onDataReceived=this.#Jt.bind(this),this.#Qt.sendMessage=this.#Zt.bind(this),this.#Qt.eventDispatcher=this.#Kt,this.#Xt.sendMessage=this.#Zt.bind(this),this.#Xt.eventDispatcher=this.#Kt,this.#Yt.sendMessage=this.#Zt.bind(this),this.#Yt.eventDispatcher=this.#Kt,e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{qe.#es(this)}))}static get#ts(){return ve}static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage",...L.EventTypes,...Z.EventTypes,...Be.EventTypes];static get EventTypes(){return this.#c}get eventTypes(){return qe.#c}#Kt=new f(this,this.eventTypes);addEventListener(e,t,s){this.#Kt.addEventListener(e,t,s)}#l(e){this.#Kt.dispatchEvent(e)}removeEventListener(e,t){return this.#Kt.removeEventListener(e,t)}waitForEvent(e){return this.#Kt.waitForEvent(e)}#Ht;get connectionManager(){return this.#Ht}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#ss.bind(this),e.onMessageReceived=this.#ns.bind(this)),this.#Ht=e,ze.log("assigned new connectionManager",this.#Ht)):ze.log("same connectionManager is already assigned")}#Zt(e,t){return this.#Ht?.sendMessage(e,t)}async connect(){return this.connectionManager||(this.connectionManager=new qe.#ts),this.#is(),this.connectionManager.connect()}#as=!1;get isConnected(){return this.#as}#He(){ze.assertWithError(this.isConnected,"not connected")}static#rs=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","getTfliteNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];static get AllInformationConnectionMessages(){return this.#rs}get#os(){return qe.#rs}get#cs(){return this.#os.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#is(),this.connectionManager?.reconnect()}static#ls=!1;static get ReconnectOnDisconnection(){return this.#ls}static set ReconnectOnDisconnection(e){ze.assertTypeWithError(e,"boolean"),this.#ls=e}#hs=qe.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#hs}set reconnectOnDisconnection(e){ze.assertTypeWithError(e,"boolean"),this.#hs=e}#gs;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#He(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#Ht?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#Ht.status;default:return"not connected"}}#ss(e){ze.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(ze.log("starting reconnect interval..."),this.#gs=setInterval((()=>{ze.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#gs&&(ze.log("clearing reconnect interval"),clearInterval(this.#gs),this.#gs=void 0),this.#ds()}#us(e=!1){this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e&&this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}#ds(){switch(this.#as=this.connectionManager?.isConnected&&this.#cs&&this.#fs,this.connectionStatus){case"connected":this.#as&&this.#us(!0);break;case"not connected":this.#us(!0);break;default:this.#us(!1)}}#is(){this.latestConnectionMessage.clear(),this.#fs=!1}#ns(e,t){switch(ze.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=N.decode(t);ze.log({manufacturerName:s}),this.#ps({manufacturerName:s});break;case"modelNumber":const n=N.decode(t);ze.log({modelNumber:n}),this.#ps({modelNumber:n});break;case"softwareRevision":const i=N.decode(t);ze.log({softwareRevision:i}),this.#ps({softwareRevision:i});break;case"hardwareRevision":const a=N.decode(t);ze.log({hardwareRevision:a}),this.#ps({hardwareRevision:a});break;case"firmwareRevision":const r=N.decode(t);ze.log({firmwareRevision:r}),this.#ps({firmwareRevision:r});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),ze.log({pnpId:o}),this.#ps({pnpId:o});break;case"serialNumber":const c=N.decode(t);ze.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);ze.log("received battery level",{batteryLevel:l}),this.#ms(l);break;case"getName":const h=N.decode(t);ze.log({name:h}),this.#le(h);break;case"getType":const g=t.getUint8(0),d=this.#Tt[g];ze.log({typeEnum:g,type:d}),this.#w(d);break;case"getSensorConfiguration":const u=this.#vs.parse(t);ze.log({sensorConfiguration:u}),this.#bs(u);break;case"sensorScalars":this.#Gt.parseScalars(t);break;case"pressurePositions":this.#Gt.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":const f=Number(t.getBigUint64(0,!0));this.#ys(f);break;case"sensorData":this.#Gt.parseData(t);break;default:if(this.#Qt.messageTypes.includes(e))this.#Qt.parseMessage(e,t);else if(this.#Xt.messageTypes.includes(e))this.#Xt.parseMessage(e,t);else{if(!this.#Yt.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Yt.parseMessage(e,t)}}this.latestConnectionMessage.set(e,t),this.#l({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#cs&&this.#ds()}latestConnectionMessage=new Map;#fs=!1;#ys(e){ze.log({currentTime:e}),this.#fs=0!=e,this.#fs||this.#Ss()}#Ss(){ze.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#Ht.sendMessage("setCurrentTime",e)}#Ds={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Ds}get#Cs(){return Object.values(this.#Ds).every((e=>null!=e))}#ps(e){ze.log({partialDeviceInformation:e});for(const t in e)this.#l({type:t,message:{[t]:e[t]}});Object.assign(this.#Ds,e),ze.log({deviceInformation:this.#Ds}),this.#Cs&&(ze.log("completed deviceInformation"),this.#l({type:"deviceInformation",message:{deviceInformation:this.#Ds}}))}#ws=null;get batteryLevel(){return this.#ws}#ms(e){ze.assertTypeWithError(e,"number"),this.#ws!=e?(this.#ws=e,ze.log({updatedBatteryLevel:this.#ws}),this.#l({type:"batteryLevel",message:{batteryLevel:this.#ws}})):ze.log(`duplicate batteryLevel assignment ${e}`)}#oe;get name(){return this.#oe}#le(e){ze.assertTypeWithError(e,"string"),this.#oe=e,ze.log({updatedName:this.#oe}),this.#l({type:"getName",message:{name:this.#oe}})}static get MinNameLength(){return 2}get minNameLength(){return qe.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return qe.MaxNameLength}async setName(e){this.#He(),ze.assertTypeWithError(e,"string"),ze.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ze.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=I.encode(e);ze.log({setNameData:t}),await this.#Ht.sendMessage("setName",t)}static#h=["leftInsole","rightInsole"];static get Types(){return this.#h}get#Tt(){return qe.Types}#D;get type(){return this.#D}get typeEnum(){return qe.Types.indexOf(this.type)}#Ts(e){ze.assertEnumWithError(e,this.#Tt)}#Es(e){ze.assertTypeWithError(e,"number"),ze.assertWithError(this.#Tt[e],`invalid typeEnum ${e}`)}#w(e){this.#Ts(e),e!=this.type?(this.#D=e,ze.log({updatedType:this.#D}),this.#l({type:"getType",message:{type:this.#D}}),qe.#Ms&&qe.#ks(this)):ze.log("redundant type assignment")}async#Ls(e){this.#Es(e);const t=Uint8Array.from([e]);ze.log({setTypeData:t}),await this.#Ht.sendMessage("setType",t)}async setType(e){this.#He(),this.#Ts(e);const t=this.#Tt.indexOf(e);this.#Ls(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Is=["left","right"];static get InsoleSides(){return this.#Is}get insoleSides(){return qe.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return H.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#vs=new J;#Ns={};get sensorConfiguration(){return this.#Ns}get sensorConfigurationData(){return this.#vs.createData(this.sensorConfiguration)}static get MaxSensorRate(){return J.MaxSensorRate}static get SensorRateStep(){return J.SensorRateStep}#bs(e){this.#Ns=e,ze.log({updatedSensorConfiguration:this.#Ns}),this.#l({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#He(),ze.log({newSensorConfiguration:e});const t=this.#vs.createData(e);ze.log({setSensorConfigurationData:t}),await this.#Ht.sendMessage("setSensorConfiguration",t)}static#Ws=!0;static get ClearSensorConfigurationOnLeave(){return this.#Ws}static set ClearSensorConfigurationOnLeave(e){ze.assertTypeWithError(e,"boolean"),this.#Ws=e}#Rs=qe.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Rs}set clearSensorConfigurationOnLeave(e){ze.assertTypeWithError(e,"boolean"),this.#Rs=e}static#_s={};static get ZeroSensorConfiguration(){return this.#_s}static{this.SensorTypes.forEach((e=>{this.#_s[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#Os=8;static get DefaultNumberOfPressureSensors(){return this.#Os}#Gt=new H;#Jt(e,t){ze.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t}),this.#l({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#Gt.pressureSensorDataManager.resetRange()}#Us=new Se;static get VibrationLocations(){return Se.Locations}static get VibrationTypes(){return Se.Types}static get VibrationWaveformEffects(){return Se.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return Se.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return Se.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return Se.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return Se.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return Se.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return Se.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#Us.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:a}=t;n=this.#Us.createWaveformEffectsData(i,s,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Us.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}ze.log({type:s,dataView:n}),t=C(t,n)})),await this.#Ht.sendMessage("triggerVibration",t)}static#Fs=[];static get ConnectedDevices(){return this.#Fs}static#Ms=!1;static get UseLocalStorage(){return this.#Ms}static set UseLocalStorage(e){this.#As(),ze.assertTypeWithError(e,"boolean"),this.#Ms=e,this.#Ms&&!this.#xs&&this.#Ps()}static#$s={devices:[]};static#xs;static get CanUseLocalStorage(){return e&&window.localStorage}static#As(){ze.assertWithError(e,"localStorage is only available in the browser"),ze.assertWithError(window.localStorage,"localStorage not found")}static#Vs="BS.Device";static#Bs(){this.#As(),localStorage.setItem(this.#Vs,JSON.stringify(this.#xs))}static async#Ps(){this.#As();let e=localStorage.getItem(this.#Vs);if("string"!=typeof e)return ze.log("no info found in localStorage"),this.#xs=Object.assign({},this.#$s),void this.#Bs();try{const t=JSON.parse(e);ze.log({configuration:t}),this.#xs=t,this.CanGetDevices&&await this.GetDevices()}catch(e){ze.error(e)}}static#ks(e){if("webBluetooth"!=e.connectionType)return void ze.log("localStorage is only for webBluetooth devices");this.#As();const t=this.#xs.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#xs.devices[t].type=e.type,this.#Bs())}static#zs=[];static get AvailableDevices(){return this.#zs}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void ze.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void ze.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void ze.warn("bluetooth.getDevices() is not available in this browser");this.#xs||this.#Ps();const t=this.#xs;if(!t.devices||0==t.devices.length)return void ze.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return ze.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#zs.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const a=new qe,r=new ve;r.device=e,e.name&&a.#le(e.name),a.#w(s.type),a.connectionManager=r,this.AvailableDevices.push(a)})),this.#qs(),this.AvailableDevices}static#js=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#js}static#Hs=new f(this,this.#js);static AddEventListener(e,t,s){this.#Hs.addEventListener(e,t,s)}static#Gs(e){this.#Hs.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Hs.removeEventListener(e,t)}static#es(e){if(e.isConnected)if(this.#Fs.includes(e))ze.log("device already included");else{if(ze.log("adding device",e),this.#Fs.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#xs.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#xs.devices.push(t):this.#xs.devices[s]=t,this.#Bs()}this.#Gs({type:"deviceConnected",message:{device:e}}),this.#Gs({type:"deviceIsConnected",message:{device:e}})}else this.#Fs.includes(e)?(ze.log("removing device",e),this.#Fs.splice(this.#Fs.indexOf(e),1),this.#Gs({type:"deviceDisconnected",message:{device:e}}),this.#Gs({type:"deviceIsConnected",message:{device:e}})):ze.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));ze.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#qs()}}static#qs(){ze.log({AvailableDevices:this.AvailableDevices}),this.#Gs({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new qe;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#Qt=new L;static get FileTypes(){return L.Types}get maxFileLength(){return this.#Qt.maxLength}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#Qt.receive(e),await t}get fileTransferStatus(){return this.#Qt.status}cancelFileTransfer(){this.#Qt.cancel()}static get TfliteSensorTypes(){return Z.SensorTypes}#Xt=new Z;get tfliteName(){return this.#Xt.name}setTfliteName(e){return this.#Xt.setName(e)}static get TfliteTasks(){return Z.Tasks}get tfliteTask(){return this.#Xt.task}setTfliteTask(e){return this.#Xt.setTask(e)}get tfliteNumberOfSamples(){return this.#Xt.numberOfSamples}setTfliteNumberOfSamples(e){return this.#Xt.setNumberOfSamples(e)}get tfliteSampleRate(){return this.#Xt.sampleRate}setTfliteSampleRate(e){return this.#Xt.setSampleRate(e)}get tfliteSensorTypes(){return this.#Xt.sensorTypes}setTfliteSensorTypes(e){return this.#Xt.setSensorTypes(e)}get tfliteNumberOfClasses(){return this.#Xt.numberOfClasses}setTfliteNumberOfClasses(e){return this.#Xt.setNumberOfClasses(e)}get tfliteIsReady(){return this.#Xt.isReady}get tfliteInferencingEnabled(){return this.#Xt.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#Xt.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#Xt.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#Xt.captureDelay}async setTfliteCaptureDelay(e){return this.#Xt.setCaptureDelay(e)}get tfliteThreshold(){return this.#Xt.threshold}async setTfliteThreshold(e){return this.#Xt.setThreshold(e)}#Yt=new Be;async updateFirmware(e){return this.#Yt.updateFirmware(e)}}const je=g("Timer",{log:!1});class He{#Js;get callback(){return this.#Js}set callback(e){je.assertTypeWithError(e,"function"),je.log({newCallback:e}),this.#Js=e,this.isRunning&&this.restart()}#Qs;get interval(){return this.#Qs}set interval(e){je.assertTypeWithError(e,"number"),je.assertWithError(e>0,"interval must be above 0"),je.log({newInterval:e}),this.#Qs=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#Zs=null;get isRunning(){return null!=this.#Zs}start(){this.isRunning?je.log("interval already running"):(je.log("starting interval"),this.#Zs=setInterval(this.#Js,this.#Qs))}stop(){this.isRunning?(je.log("stopping interval"),clearInterval(this.#Zs),this.#Zs=null):je.log("interval already not running")}restart(){this.stop(),this.start()}}const Ge=g("BaseScanner");class Je{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#Be(){Ge.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ze(){Ge.assertWithError(this.constructor!=Je,`${this.constructor.name} must be subclassed`)}constructor(){this.#ze(),this.#Be(),p(this,this.#Ks)}#Ks={discoveredDevice:this.#Xs.bind(this),isScanning:this.#Ys.bind(this)};static#c=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Je.#c}#Kt=new f(this,this.eventTypes);addEventListener(e,t,s){this.#Kt.addEventListener(e,t,s)}dispatchEvent(e){this.#Kt.dispatchEvent(e)}removeEventListener(e,t){return this.#Kt.removeEventListener(e,t)}get isAvailable(){return!1}#en(){Ge.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#tn(){Ge.assertWithError(this.isScanning,"not scanning")}#sn(){Ge.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#en(),this.#sn()}stopScan(){this.#tn()}#Ys(){this.isScanning?(this.#nn={},this.#in={}):this.#an.stop()}#nn={};get discoveredDevices(){return this.#nn}get discoveredDevicesArray(){return Object.values(this.#nn).sort(((e,t)=>this.#in[e.id]-this.#in[t.id]))}#rn(e){Ge.assertWithError(this.#nn[e],`no discovered device with id "${e}"`)}#Xs(e){const t=e.message.discoveredDevice;this.#nn[t.id]=t,this.#in[t.id]=Date.now(),this.#an.start()}#in={};static#on=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#on}get#cn(){return Je.DiscoveredDeviceExpirationTimeout}#an=new He(this.#ln.bind(this),1e3);#ln(){const e=Object.entries(this.#nn);if(0==e.length)return void this.#an.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#in[e];t-n>this.#cn&&(Ge.log("discovered device timeout"),delete this.#nn[e],delete this.#in[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#en()}get canReset(){return!1}reset(){Ge.log("resetting...")}}const Qe=g("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class Ze extends fe{get id(){return this.#hn?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#hn?.state}async connect(){await super.connect(),await this.#hn.connectAsync()}async disconnect(){await super.disconnect(),await this.#hn.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);Qe.log({characteristicName:s});const n=this.#tt.get(s);Qe.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);Qe.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#hn.connectable}async reconnect(){await super.reconnect(),Qe.log("attempting to reconnect..."),this.connect()}#hn;get noblePeripheral(){return this.#hn}set noblePeripheral(e){Qe.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(Qe.log("newNoblePeripheral",e.id),this.#hn&&(m(this.#hn,this.#gn),delete this.#hn._connectionManager),e&&(e._connectionManager=this,p(e,this.#gn)),this.#hn=e):Qe.log("attempted to assign duplicate noblePeripheral")}#gn={connect:this.#dn,disconnect:this.#un,rssiUpdate:this.#fn,servicesDiscover:this.#pn};async#dn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){Qe.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#hn.discoverServicesAsync(oe),await this.#mn()}async#un(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){Qe.log("onNoblePeripheralDisconnect",e.id),await this.#mn()}async#mn(){switch(Qe.log(`noblePeripheral ${this.id} state ${this.#hn.state}`),this.#hn.state){case"connected":case"connecting":break;case"disconnected":this.#nt(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":Qe.error("noblePeripheral error");break;default:Qe.log(`uncaught noblePeripheral state ${this.#hn.state}`)}}#nt(){Qe.log("removing noblePeripheral eventListeners"),this.#et.forEach((e=>{m(e,this.#vn)})),this.#et.clear(),this.#tt.forEach((e=>{m(e,this.#bn)})),this.#tt.clear()}async#fn(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){Qe.log("onNoblePeripheralRssiUpdate",e.id,t)}async#pn(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){Qe.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];Qe.log("service",s.uuid);const n=ce(s.uuid);Qe.assertWithError(n,`no name found for service uuid "${s.uuid}"`),Qe.log({serviceName:n}),this.#et.set(n,s),s._name=n,s._connectionManager=this,p(s,this.#vn),await s.discoverCharacteristicsAsync()}}#et=new Map;#vn={characteristicsDiscover:this.#yn};async#yn(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){Qe.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];Qe.log("characteristic",s.uuid);const n=de(s.uuid);Qe.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),Qe.log({characteristicName:n}),this.#tt.set(n,s),s._name=n,s._connectionManager=this,p(s,this.#bn),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#Sn&&(this.status="connected")}#bn={data:this.#Dn,write:this.#Cn,notify:this.#wn};#tt=new Map;get#Sn(){return ge.every((e=>this.#tt.has(e)))}#Dn(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){Qe.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(w(t)),i=e._name;Qe.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#Cn(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){Qe.log("onNobleCharacteristicWrite",e.uuid)}#wn(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){Qe.log("onNobleCharacteristicNotify",e.uuid,t)}}const Ke=g("NobleScanner",{log:!0});let Xe=!1;if(t){var Ye=require("@abandonware/noble");Xe=!0}class et extends Je{static get isSupported(){return Xe}#Tn=!1;get#En(){return this.#Tn}set#En(e){Ke.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Tn=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):Ke.log("duplicate isScanning assignment")}get isScanning(){return this.#En}#Mn="unknown";get#kn(){return this.#Mn}set#kn(e){Ke.assertTypeWithError(e,"string"),this.#kn!=e?(this.#Mn=e,Ke.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):Ke.log("duplicate nobleState assignment")}#Ln={scanStart:this.#In.bind(this),scanStop:this.#Nn.bind(this),stateChange:this.#Wn.bind(this),discover:this.#Rn.bind(this)};#In(){Ke.log("OnNobleScanStart"),this.#En=!0}#Nn(){Ke.log("OnNobleScanStop"),this.#En=!1}#Wn(e){Ke.log("onNobleStateChange",e),this.#kn=e}#Rn(e){let t;Ke.log("onNobleDiscover",e.id),this.#_n[e.id]||(e._scanner=this,this.#_n[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=qe.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),p(Ye,this.#Ln),p(this,this.#On)}get isAvailable(){return"poweredOn"==this.#kn}startScan(){super.startScan(),Ye.startScanningAsync(ae,!0)}stopScan(){super.stopScan(),Ye.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),Ye.reset()}#On={expiredDiscoveredDevice:this.#Un.bind(this)};#Un(e){const t=e.message.discoveredDevice;this.#_n[t.id]&&delete this.#_n[t.id]}#_n={};#Fn(e){Ke.assertTypeWithError(e,"string"),Ke.assertWithError(this.#_n[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#Fn(e);const t=this.#_n[e];Ke.log("connecting to discoveredDevice...",e);let s=qe.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#An(t),await s.connect())}#An(e){const t=new qe,s=new Ze;return s.noblePeripheral=e,t.connectionManager=s,t}}const tt=g("Scanner",{log:!1});let st;et.isSupported?(tt.log("using NobleScanner"),st=new et):tt.log("Scanner not available");var nt=st;const it=g("DevicePairPressureSensorDataManager",{log:!0});class at{static get Sides(){return qe.InsoleSides}get sides(){return qe.InsoleSides}#xn={};#G=new U;resetPressureRange(){this.#G.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(it.log({pressure:t,insoleSide:s}),this.#xn[s]=t,this.#Pn)return this.#$n();it.log("doesn't have all pressure data yet...")}get#Pn(){return this.sides.every((e=>e in this.#xn))}#$n(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#xn[t].rawSum,e.normalizedSum+=this.#xn[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#xn[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#G.updateAndGetNormalization(e.center)),it.log({devicePairPressure:e}),e}}const rt=g("DevicePairSensorDataManager",{log:!0});class ot{static get Sides(){return qe.InsoleSides}get sides(){return qe.InsoleSides}#Vn={};pressureSensorDataManager=new at;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(rt.log({sensorType:s,timestamp:t,event:e}),this.#Vn[s]||(this.#Vn[s]={}),this.#Vn[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else rt.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#Vn[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else rt.log("no value received")}onDataReceived}const ct=g("DevicePair",{log:!0});class lt{constructor(){this.#Gt.onDataReceived=this.#Jt.bind(this)}static#c=["isConnected","pressure",...qe.EventTypes.map((e=>`device${d(e)}`))];static get EventTypes(){return this.#c}get eventTypes(){return lt.#c}#Kt=new f(this,this.eventTypes);addEventListener(e,t,s){this.#Kt.addEventListener(e,t,s)}#l(e){this.#Kt.dispatchEvent(e)}removeEventListener(e,t){return this.#Kt.removeEventListener(e,t)}static get Sides(){return qe.InsoleSides}get sides(){return lt.Sides}#Bn;get left(){return this.#Bn}#zn;get right(){return this.#zn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#He(){ct.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void ct.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&m(s,this.#qn),p(e,this.#qn),t){case"left":this.#Bn=e;break;case"right":this.#zn=e}return ct.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.#l({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}ct.log("device already assigned")}#qn={connectionStatus:this.#jn.bind(this),isConnected:this.#Hn.bind(this),sensorData:this.#Gn.bind(this),getSensorConfiguration:this.#jn.bind(this)};#jn(e){this.#l({type:`device${d(e.type)}`,message:{...e.message,device:e.target}})}#Hn(e){this.#jn(e),this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#Gt=new ot;#Gn(e){this.#jn(e),this.#l({type:`device${d(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Gt.onDeviceSensorData(e)}#Jt(e,t){ct.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t})}resetPressureRange(){this.#Gt.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#Jn=new lt;static get shared(){return this.#Jn}static{qe.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Jn.assignInsole(t)}))}}const ht=g("ServerUtils",{log:!1}),gt=3e7;function dt(e,...t){ht.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=C(...t.data),n=s.byteLength;ht.assertEnumWithError(t.type,e);return C(e.indexOf(t.type),Uint16Array.from([n]),s)}));return ht.log("messageBuffers",...s),C(...s)}const ut=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function ft(...e){return dt(ut,...e)}function pt(...e){return ht.log("createDeviceMessage",...e),dt(qe.EventTypes,...e)}function mt(...e){return dt(X.MessageTypes,...e)}const vt=ft("ping"),bt=ft("pong");ft("isScanningAvailable"),ft("isScanning"),ft("startScan"),ft("stopScan");const yt=ft("discoveredDevices"),St=g("WebSocketClientConnectionManager",{log:!0});class Dt extends X{static get isSupported(){return e}static get type(){return"webSocketClient"}#Qn;get id(){return this.#Qn}set id(e){St.assertTypeWithError(e,"string"),this.#Qn!=e?this.#Qn=e:St.log("redundant id assignment")}#as=!1;get isConnected(){return this.#as}set isConnected(e){St.assertTypeWithError(e,"boolean"),this.#as!=e?(this.#as=e,this.status=this.#as?"connected":"not connected",this.#as&&this.#Zn()):St.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":St.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),St.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){St.log({dataView:e}),q(e,qe.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));St.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":this.onMessageReceived(s,t);break;default:St.error(`uncaught messageType "${s}"`)}}),!0)}#Zn(){this.sendWebSocketMessage(...qe.AllInformationConnectionMessages)}}const Ct=g("WebSocketClient",{log:!0});class wt{static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return wt.#c}#Kt=new f(this,this.eventTypes);addEventListener(e,t,s){this.#Kt.addEventListener(e,t,s)}#l(e){this.#Kt.dispatchEvent(e)}removeEventListener(e,t){return this.#Kt.removeEventListener(e,t)}#Kn;get webSocket(){return this.#Kn}set webSocket(e){this.#Kn!=e?(Ct.log("assigning webSocket",e),this.#Kn&&m(this.#Kn,this.#Xn),p(e,this.#Xn),this.#Kn=e,Ct.log("assigned webSocket")):Ct.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Yn(){Ct.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ei(){Ct.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ei(),this.#ti="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Yn(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#ti="disconnecting",this.webSocket.close()}reconnect(){this.#ei(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#ls=!0;static get ReconnectOnDisconnection(){return this.#ls}static set ReconnectOnDisconnection(e){Ct.assertTypeWithError(e,"boolean"),this.#ls=e}#hs=wt.#ls;get reconnectOnDisconnection(){return this.#hs}set reconnectOnDisconnection(e){Ct.assertTypeWithError(e,"boolean"),this.#hs=e}#si(e){this.#Yn(),this.#Kn.send(e)}#ni(...e){this.#si(ft(...e))}#Xn={open:this.#ii.bind(this),message:this.#ai.bind(this),close:this.#ri.bind(this),error:this.#oi.bind(this)};#ii(e){Ct.log("webSocket.open",e),this.#ci.start(),this.#ti="connected"}async#ai(e){Ct.log("webSocket.message",e),this.#ci.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#li(s)}#ri(e){Ct.log("webSocket.close",e),this.#ti="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#ci.stop(),this.#hs&&setTimeout((()=>{this.reconnect()}),3e3)}#oi(e){Ct.log("webSocket.error",e)}#hi="not connected";get#ti(){return this.#hi}set#ti(e){switch(Ct.assertTypeWithError(e,"string"),Ct.log({newConnectionStatus:e}),this.#hi=e,this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e){case"connected":case"not connected":this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#ni("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#gi=!1,this.#En=!1)}}get connectionStatus(){return this.#ti}#li(e){Ct.log("parseMessage",{dataView:e}),q(e,ut,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#di();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));Ct.log({isScanningAvailable:e}),this.#gi=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));Ct.log({isScanning:e}),this.#En=e}break;case"discoveredDevice":{const{string:e}=z(t,n);Ct.log({discoveredDeviceString:e});const s=JSON.parse(e);Ct.log({discoveredDevice:s}),this.#Xs(s)}break;case"expiredDiscoveredDevice":{const{string:e}=z(t,n);this.#Un(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=z(t,n);Ct.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);Ct.log({connectedDeviceIds:s}),this.#ui(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=z(t,n);n=s;const i=this.#fi[e];Ct.assertWithError(i,`no device found for id ${e}`);const a=i.connectionManager,r=E(t,n);a.onWebSocketMessage(r)}break;default:Ct.error(`uncaught messageType "${s}"`)}}),!0)}#ci=new He(this.#pi.bind(this),gt);#pi(){this.#ni("ping")}#di(){this.#ni("pong")}#mi=!1;get#gi(){return this.#mi}set#gi(e){Ct.assertTypeWithError(e,"boolean"),this.#mi=e,this.#l({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#vi()}get isScanningAvailable(){return this.#gi}#bi(){this.#Yn(),Ct.assertWithError(this.isScanningAvailable,"scanning is not available")}#yi(){this.#ni("isScanningAvailable")}#Tn=!1;get#En(){return this.#Tn}set#En(e){Ct.assertTypeWithError(e,"boolean"),this.#Tn=e,this.#l({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#En}#vi(){this.#ni("isScanning")}#tn(){Ct.assertWithError(this.isScanning,"is not scanning")}#sn(){Ct.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#sn(),this.#ni("startScan")}stopScan(){this.#tn(),this.#ni("stopScan")}toggleScan(){this.#bi(),this.isScanning?this.stopScan():this.startScan()}#nn={};get discoveredDevices(){return this.#nn}#Xs(e){Ct.log({discoveredDevice:e}),this.#nn[e.id]=e,this.#l({type:"discoveredDevice",message:{discoveredDevice:e}})}#Si(){this.#si(yt)}#Un(e){Ct.log({expiredDeviceId:e});const t=this.#nn[e];t?(Ct.log({expiredDiscoveredDevice:t}),delete this.#nn[e],this.#l({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Ct.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#Di(e)}#Di(e){this.#Yn(),Ct.assertTypeWithError(e,"string");const t=this.#Ci(e);return t.connect(),t}#wi(e){this.#si(this.#Ti(e))}#Ti(e){return ft({type:"connectToDevice",data:e})}#An(e){const t=new qe,s=new Dt;return s.id=e,s.sendWebSocketMessage=this.#Ei.bind(this,e),s.sendWebSocketConnectMessage=this.#wi.bind(this,e),s.sendWebSocketDisconnectMessage=this.#Mi.bind(this,e),t.connectionManager=s,t}#Ci(e){let t=this.#fi[e];return t||(t=this.#An(e),this.#fi[e]=t),t}#ui(e){Ct.log({deviceIds:e}),e.forEach((e=>{this.#Ci(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#ki(e)}#ki(e){this.#Yn(),Ct.assertTypeWithError(e,"string");const t=this.devices[e];return Ct.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#Mi(e){this.#si(this.#Li(e))}#Li(e){return ft({type:"disconnectFromDevice",data:e})}#Ei(e,...t){this.#si(this.#Ii(e,...t))}#Ii(e,...t){return ft({type:"deviceMessage",data:[e,mt(...t)]})}#fi={};get devices(){return this.#fi}}const Tt=g("BaseServer",{log:!0});class Et{#ze(){Tt.assertWithError(this.constructor!=Et,`${this.constructor.name} must be subclassed`)}static#c=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#c}get eventTypes(){return Et.#c}#Kt=new f(this,this.eventTypes);addEventListener(e,t,s){this.#Kt.addEventListener(e,t,s)}dispatchEvent(e){this.#Kt.dispatchEvent(e)}removeEventListener(e,t){return this.#Kt.removeEventListener(e,t)}constructor(){this.#ze(),Tt.assertWithError(nt,"no scanner defined"),p(nt,this.#Ni),p(qe,this.#Wi),p(this,this.#Ri)}get numberOfClients(){return 0}static#_i=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#_i}static set ClearSensorConfigurationsWhenNoClients(e){Tt.assertTypeWithError(e,"boolean"),this.#_i=e}#Oi=Et.#_i;get clearSensorConfigurationsWhenNoClients(){return this.#Oi}set clearSensorConfigurationsWhenNoClients(e){Tt.assertTypeWithError(e,"boolean"),this.#Oi=e}#Ri={clientConnected:this.#Ui.bind(this),clientDisconnected:this.#Fi.bind(this)};#Ui(e){e.message.client,Tt.log("onClientConnected")}#Fi(e){e.message.client,Tt.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&qe.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){Tt.log("broadcasting",e)}#Ni={isAvailable:this.#Ai.bind(this),isScanning:this.#xi.bind(this),discoveredDevice:this.#Pi.bind(this),expiredDiscoveredDevice:this.#Un.bind(this)};#Ai(e){this.broadcastMessage(this.#$i)}get#$i(){return ft({type:"isScanningAvailable",data:nt.isAvailable})}#xi(e){this.broadcastMessage(this.#Vi)}get#Vi(){return ft({type:"isScanning",data:nt.isScanning})}#Pi(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#Bi(t))}#Bi(e){return ft({type:"discoveredDevice",data:e})}#Un(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#zi(t))}#zi(e){return ft({type:"expiredDiscoveredDevice",data:e.id})}get#qi(){return ft(...nt.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#ji(){return ft({type:"connectedDevices",data:JSON.stringify(qe.ConnectedDevices.map((e=>e.id)))})}#Hi={connectionMessage:this.#Gi.bind(this)};#Ii(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#Gi(e){const t=e.target;if(Tt.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#Ji(t,this.#Ii(t,s,n)))}#Wi={deviceConnected:this.#Qi.bind(this),deviceDisconnected:this.#Zi.bind(this),deviceIsConnected:this.#Hn.bind(this)};#Qi(e){const t=e.message.device;Tt.log("onDeviceConnected",t.id),p(t,this.#Hi)}#Zi(e){const t=e.message.device;Tt.log("onDeviceDisconnected",t.id),m(t,this.#Hi)}#Hn(e){const t=e.message.device;Tt.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#Ki(t))}#Ki(e){return this.#Ji(e,{type:"isConnected",data:e.isConnected})}#Ji(e,...t){return ft({type:"deviceMessage",data:[e.id,pt(...t)]})}parseClientMessage(e){let t=[];if(q(e,ut,((e,s)=>{const n=e;switch(n){case"ping":t.push(bt);break;case"pong":break;case"isScanningAvailable":t.push(this.#$i);break;case"isScanning":t.push(this.#Vi);break;case"startScan":nt.startScan();break;case"stopScan":nt.stopScan();break;case"discoveredDevices":t.push(this.#qi);break;case"connectToDevice":{const{string:e}=z(s);nt.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=z(s),t=qe.ConnectedDevices.find((t=>t.id==e));if(!t){Tt.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#ji);break;case"deviceMessage":{const{string:e,byteOffset:n}=z(s),i=qe.ConnectedDevices.find((t=>t.id==e));if(!i){Tt.error(`no device found with id ${e}`);break}const a=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,a))}break;default:Tt.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return C(t)}parseClientDeviceMessage(e,t){Tt.log("onDeviceMessage",e.id,t);let s=[];if(q(t,X.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":s.push(this.#Ii(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:Tt.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#Ji(e,...s)}}const Mt=g("WebSocketServer",{log:!0});t&&require("ws");var kt={setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:qe,DevicePair:lt,WebSocketClient:wt,WebSocketServer:class extends Et{get numberOfClients(){return this.#Xi?.clients.size||0}#Xi;get server(){return this.#Xi}set server(e){this.#Xi!=e?(Mt.log("assigning server..."),this.#Xi&&(Mt.log("clearing existing server..."),m(this.#Xi,this.#Ri)),p(e,this.#Ri),this.#Xi=e,Mt.log("assigned server")):Mt.log("redundant WebSocket assignment")}#Ri={close:this.#Yi.bind(this),connection:this.#ea.bind(this),error:this.#ta.bind(this),headers:this.#sa.bind(this),listening:this.#na.bind(this)};#Yi(){Mt.log("server.close")}#ea(e){Mt.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new He((()=>this.#ia(e)),gt),e.pingClientTimer.start(),p(e,this.#aa),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#ta(e){Mt.error(e)}#sa(){}#na(){Mt.log("server.listening")}#aa={open:this.#ra.bind(this),message:this.#oa.bind(this),close:this.#ca.bind(this),error:this.#la.bind(this)};#ra(e){Mt.log("client.open")}#oa(e){Mt.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(w(e.data));this.#ha(t,s)}#ca(e){Mt.log("client.close");const t=e.target;t.pingClientTimer.stop(),m(t,this.#aa),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#la(e){Mt.log("client.error")}#ha(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#ia(e){e.isAlive?(e.isAlive=!1,e.send(vt)):e.terminate()}},Scanner:nt};export{kt as default};
