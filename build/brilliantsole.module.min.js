/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e=!1,t="undefined"!=typeof window&&"undefined"!==window?.document,s="undefined"!=typeof process&&null!=process?.versions?.node,n=t&&navigator.userAgent||"";let i=!1;t?i=Boolean(navigator.bluetooth):s&&(i=!0);const a=t&&/Bluefy/i.test(n),r=t&&/WebBLE/i.test(n),o=t&&/Android/i.test(n),c=t&&/Safari/i.test(n)&&!/Chrome/i.test(n),h=t&&/iPad|iPhone|iPod/i.test(n),g=t&&/Macintosh/i.test(n),l=!t&&!s&&"undefined"!=typeof global&&"undefined"!=typeof Studio;var u,d=Object.freeze({__proto__:null,isAndroid:o,get isBluetoothSupported(){return i},isIOS:h,isInBluefy:a,isInBrowser:t,isInDev:e,isInLensStudio:l,isInNode:s,isInProduction:!0,isInWebBLE:r,isMac:g,isSafari:c});if(l){const e=function(...e){Studio.log(e.map((e=>new String(e))).join(","))};(u={}).log=e,u.warn=e.bind(u,"WARNING"),u.error=e.bind(u,"ERROR")}else u=console;if(!u.assert){const e=(e,...t)=>{e||u.warn(...t)};u.assert=e}if(!u.table){const e=(...e)=>{u.log(...e)};u.table=e}function p(){}const f=u.log.bind(u),m=u.warn.bind(u),v=u.error.bind(u),y=u.table.bind(u),S=u.assert.bind(u);class b{static#e={};constructor(e){if(b.#e[e])throw new Error(`"${e}" console already exists`);b.#e[e]=this}#t={log:e,warn:e,assert:!0,error:!0,table:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new b(e)}get log(){return this.#t.log?f:p}get warn(){return this.#t.warn?m:p}get error(){return this.#t.error?v:p}get assert(){return this.#t.assert?S:p}get table(){return this.#t.table?y:p}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function T(e,t){return b.create(e,t)}function w(e,t){b.setLevelFlagsForType(e,t)}function E(e){b.setAllLevelFlags(e)}function M(e){return e[0].toUpperCase()+e.slice(1)}const C=T("EventDispatcher",{log:!1});class D{constructor(e,t){C.assertWithError(e,"target is required"),this.#s=e,C.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#a(e){C.assertWithError(this.#i(e),`invalid event type "${e}"`)}#r;addEventListener(e,t,s){if(C.log(`adding "${e}" eventListener`,t),this.#a(e),this.#r||(this.#r={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#r;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return C.log(`has "${e}" eventListener?`,t),this.#a(e),this.#r?.[e]?.includes(t)}removeEventListener(e,t){if(C.log(`removing "${e}" eventListener`,t),this.#a(e),this.hasEventListener(e,t)){const s=this.#r[e].indexOf(t);return this.#r[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#a(e.type),this.#r?.[e.type]){e.target=this.#s;const t=this.#r[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){C.error(e)}}}waitForEvent(e){return C.log(`waiting for event "${e}"`),this.#a(e),new Promise((t=>{this.addEventListener(e,(e=>{t(e)}),{once:!0})}))}}function I(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;C.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function k(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;C.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const L=T("Timer",{log:!1});class W{#o;get callback(){return this.#o}set callback(e){L.assertTypeWithError(e,"function"),L.log({newCallback:e}),this.#o=e,this.isRunning&&this.restart()}#c;get interval(){return this.#c}set interval(e){L.assertTypeWithError(e,"number"),L.assertWithError(e>0,"interval must be above 0"),L.log({newInterval:e}),this.#c=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#h=null;get isRunning(){return null!=this.#h}start(){this.isRunning?L.log("interval already running"):(L.log("starting interval"),this.#h=setInterval(this.#o,this.#c))}stop(){this.isRunning?(L.log("stopping interval"),clearInterval(this.#h),this.#h=null):L.log("interval already not running")}restart(){this.stop(),this.start()}}function x(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}T("checksum",{log:!0});const R=new Uint32Array(256);for(let e=0;e<256;++e)R[e]=x(e);function U(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(R[n^i]^s>>>8)>>>0}return s}var F,_;F="undefined"==typeof TextEncoder?class{encode(e){const t=Array.from(e).map((e=>e.charCodeAt(0)));return Uint8Array.from(t)}}:TextEncoder,_="undefined"==typeof TextDecoder?class{decode(e){return Array.from(new Uint8Array(e)).map((e=>String.fromCharCode(e))).join("")}}:TextDecoder;const A=new F,O=new _,N=T("ArrayBufferUtils",{log:!1});function $(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return V(e)}if(e instanceof Array){return $(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return V(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function V(e){const t=A.encode(e);return $(t.byteLength,t)}function B(e,t,s){let n;return null!=s&&(n=e.byteOffset+t+s),N.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}async function P(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}const z=T("FileTransferManager",{log:!0});class q{static#g=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#g}get messageTypes(){return q.MessageTypes}static#l=[...this.#g,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#l}get eventTypes(){return q.#l}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#d=["tflite"];static get Types(){return this.#d}get types(){return q.Types}#p(e){z.assertEnumWithError(e,this.types)}#f(e){z.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#m=["idle","sending","receiving"];static get Statuses(){return this.#m}get statuses(){return q.Statuses}#v(e){z.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#y=["startSend","startReceive","cancel"];static get Commands(){return this.#y}get commands(){return q.Commands}#S(e){z.assertEnumWithError(e,this.commands)}static#b=0;static get MaxLength(){return this.#b}#T=q.MaxLength;get maxLength(){return this.#T}#w(e){z.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);z.log(`maxLength: ${t/1024}kB`),this.#T=t}#E(e){z.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#M;get type(){return this.#M}#C(e){z.log("parseFileType",e);const t=e.getUint8(0);this.#f(t);const s=this.types[t];this.#D(s)}#D(e){z.log({fileTransferType:e}),this.#M=e,this.#u({type:"getFileTransferType",message:{fileType:e}})}async#I(e,t){if(this.#p(e),this.type==e)return void z.log(`redundant type assignment ${e}`);const s=this.waitForEvent("getFileTransferType"),n=this.types.indexOf(e);this.sendMessage([{type:"setFileTransferType",data:Uint8Array.from([n]).buffer}],t),await s}#k=0;get length(){return this.#k}#L(e){z.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#W(t)}#W(e){z.log(`length: ${e/1024}kB`),this.#k=e,this.#u({type:"getFileLength",message:{fileLength:e}})}async#x(e,t){if(z.assertTypeWithError(e,"number"),this.#E(e),this.length==e)return void z.log(`redundant length assignment ${e}`);const s=this.waitForEvent("getFileLength"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileLength",data:n.buffer}],t),await s}#R=0;get checksum(){return this.#R}#U(e){z.log("checksum",e);const t=e.getUint32(0,!0);this.#F(t)}#F(e){z.log({checksum:e}),this.#R=e,this.#u({type:"getFileChecksum",message:{fileChecksum:e}})}async#_(e,t){if(z.assertTypeWithError(e,"number"),this.checksum==e)return void z.log(`redundant checksum assignment ${e}`);const s=this.waitForEvent("getFileChecksum"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileChecksum",data:n.buffer}],t),await s}async#A(e,t){this.#S(e);const s=this.waitForEvent("fileTransferStatus"),n=this.commands.indexOf(e);this.sendMessage([{type:"setFileTransferCommand",data:Uint8Array.from([n]).buffer}],t),await s}#O="idle";get status(){return this.#O}#N(e){z.log("parseFileStatus",e);const t=e.getUint8(0);this.#v(t);const s=this.statuses[t];this.#$(s)}#$(e){z.log({status:e}),this.#O=e,this.#u({type:"fileTransferStatus",message:{fileTransferStatus:e}}),this.#V.length=0}#B(){z.assertWithError("idle"==this.#O,"status is not idle")}#P(){z.assertWithError("idle"!=this.#O,"status is idle")}#V=[];async#z(e){z.log("parseFileBlock",e),this.#V.push(e.buffer);const t=this.#V.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#k;if(z.log(`received ${t} of ${this.#k} bytes (${100*s}%)`),this.#u({type:"fileTransferProgress",message:{progress:s}}),t!=this.#k)return;z.log("file transfer complete");let n,i=(new Date).toLocaleString();if("tflite"===this.type)i+=".tflite";n="undefined"!=typeof File?new File(this.#V,i):new Blob(this.#V);const a=U(await n.arrayBuffer());z.log({checksum:a}),a==this.#R?(z.log("received file",n),this.#u({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#u({type:"fileReceived",message:{file:n}})):z.error(`wrong checksum - expected ${this.#R}, got ${a}`)}parseMessage(e,t){switch(z.log({messageType:e}),e){case"maxFileLength":this.#w(t);break;case"getFileTransferType":case"setFileTransferType":this.#C(t);break;case"getFileLength":case"setFileLength":this.#L(t);break;case"getFileChecksum":case"setFileChecksum":this.#U(t);break;case"fileTransferStatus":this.#N(t);break;case"getFileTransferBlock":this.#z(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#B(),this.#p(e);const s=await P(t),n=[];n.push(this.#I(e,!1));const i=s.byteLength;n.push(this.#x(i,!1));const a=U(s);n.push(this.#_(a,!1)),n.push(this.#A("startSend",!1)),this.sendMessage(),await Promise.all(n),await this.#q(s)}async#q(e){return this.#j(e)}async#j(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+(this.mtu-3-3));z.log("slicedBuffer",s);const n=1-(e.byteLength-t)/e.byteLength;if(z.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#u({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage([{type:"setFileTransferBlock",data:s}]),this.#j(e,t+s.byteLength);z.log("finished sending buffer"),this.#u({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#B(),this.#p(e),await this.#I(e),await this.#A("startReceive")}async cancel(){this.#P(),await this.#A("cancel")}sendMessage;mtu}const j=65536;function H(e,t){const s=Date.now();var n;return(n=s)-n%j+e.getUint16(t,!0)}const G={min:1/0,max:-1/0,range:0};class Q{#H=Object.assign({},G);reset(){Object.assign(this.#H,G)}update(e){this.#H.min=Math.min(e,this.#H.min),this.#H.max=Math.max(e,this.#H.max),this.#H.range=this.#H.max-this.#H.min}getNormalization(e){return this.#H.range*e||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class J{#H={x:new Q,y:new Q};reset(){this.#H.x.reset(),this.#H.y.reset()}update(e){this.#H.x.update(e.x),this.#H.y.update(e.y)}getNormalization(e){return{x:this.#H.x.getNormalization(e.x),y:this.#H.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const Z=T("PressureSensorDataManager",{log:!0});class K{static#d=["pressure"];static get Types(){return this.#d}static get ContinuousTypes(){return this.Types}#G=[];get positions(){return this.#G}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;Z.log({positions:t}),this.#G=t,this.#Q=(s=this.numberOfSensors,n=()=>new Q,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#Q;#J=new J;resetRange(){this.#Q.forEach((e=>e.reset())),this.#J.reset()}parseData(e,t){const s={sensors:[],scaledSum:0,normalizedSum:0};for(let n=0,i=0;i<e.byteLength;n++,i+=2){const a=e.getUint16(i,!0),r=a*t,o=this.#Q[n].updateAndGetNormalization(r),c=this.positions[n];s.sensors[n]={rawValue:a,scaledValue:r,normalizedValue:o,position:c,weightedValue:0},s.scaledSum+=r,s.normalizedSum+=o/this.numberOfSensors}return s.scaledSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.scaledValue/s.scaledSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#J.updateAndGetNormalization(s.center)),Z.log({pressure:s}),s}}const X=T("MotionSensorDataManager",{log:!0});class Y{static#d=["acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","orientation","activity","stepCounter","stepDetector","deviceOrientation"];static get Types(){return this.#d}static#Z=this.#d.filter((e=>{switch(e){case"orientation":case"activity":case"stepCounter":case"stepDetector":case"deviceOrientation":return!1;default:return!0}}));static get ContinuousTypes(){return this.#Z}static#K=6;static get Vector3Size(){return this.#K}get vector3Size(){return Y.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const a={x:s,y:n,z:i};return X.log({vector:a}),a}static#X=8;static get QuaternionSize(){return this.#X}get quaternionSize(){return Y.QuaternionSize}parseQuaternion(e,t){let[s,n,i,a]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const r={x:s,y:n,z:i,w:a};return X.log({quaternion:r}),r}static#Y=6;static get EulerSize(){return this.#Y}get eulerSize(){return Y.EulerSize}parseEuler(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));n*=-1,s*=-1;const a={heading:s,pitch:n,roll:i};return X.log({euler:a}),a}parseStepCounter(e){X.log("parseStepCounter",e);const t=e.getUint32(0,!0);return X.log({stepCount:t}),t}static#ee=["still","walking","running","bicycle","vehicle","tilting"];static get ActivityTypes(){return this.#ee}get#te(){return Y.#ee}parseActivity(e){X.log("parseActivity",e);const t={},s=e.getUint8(0);return X.log("activityBitfield",s.toString(2)),this.#te.forEach(((e,n)=>{t[e]=Boolean(s&1<<n)})),X.log("activity",t),t}static#se=["portraitUpright","landscapeLeft","portraitUpsideDown","landscapeRight","unknown"];static get DeviceOrientations(){return this.#se}get#ne(){return Y.#se}parseDeviceOrientation(e){X.log("parseDeviceOrientation",e);const t=e.getUint8(0),s=this.#ne[t];return X.assertWithError(s,"undefined deviceOrientation"),X.log({deviceOrientation:s}),s}}const ee=T("BarometerSensorDataManager",{log:!0});class te{static#d=["barometer"];static get Types(){return this.#d}static get ContinuousTypes(){return this.Types}#ie(e){const t=.0065;return 288.15/t*(1-Math.pow(e/101325,.19026643566373183))}parseData(e,t){const s=e.getUint32(0,!0)*t,n=this.#ie(s);return ee.log({pressure:s,altitude:n}),{pressure:s}}}const se=T("ParseUtils",{log:!0});function ne(e,t=0){const s=e.getUint8(t++);return{string:O.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function ie(e,t,s,n,i=!1){let a=0;for(;a<e.byteLength;){const r=e.getUint8(a++),o=t[r];let c;i?(c=e.getUint16(a,!0),a+=2):c=e.getUint8(a++),se.log({messageTypeEnum:r,messageType:o,messageLength:c,dataView:e,byteOffset:a}),se.assertWithError(o,`invalid messageTypeEnum ${r}`);const h=B(e,a,c);se.log({_dataView:h}),s(o,h,n),a+=c}}const ae=T("SensorDataManager",{log:!0});class re{static#g=["getPressurePositions","getSensorScalars","sensorData"];static get MessageTypes(){return this.#g}get messageTypes(){return re.MessageTypes}pressureSensorDataManager=new K;motionSensorDataManager=new Y;barometerSensorDataManager=new te;static#d=[...K.Types,...Y.Types,...te.Types];static#Z=[...K.ContinuousTypes,...Y.ContinuousTypes,...te.ContinuousTypes];static get Types(){return this.#d}static get ContinuousTypes(){return this.#Z}get types(){return re.Types}#ae=new Map;static AssertValidSensorType(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.#d.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e in this.#d,`invalid sensorTypeEnum ${e}`)}static#l=[...this.#g,...this.#d];static get EventTypes(){return this.#l}get eventTypes(){return re.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#re(e){ae.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=H(e,t);t+=2;ie(new DataView(e.buffer,t),re.Types,this.#oe.bind(this),{timestamp:s})}#oe(e,t,{timestamp:s}){const n=this.#ae.get(e);let i=null;switch(e){case"pressure":i=this.pressureSensorDataManager.parseData(t,n);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(t,n);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(t,n);break;case"orientation":i=this.motionSensorDataManager.parseEuler(t,n);break;case"stepCounter":i=this.motionSensorDataManager.parseStepCounter(t);break;case"stepDetector":i={};break;case"activity":i=this.motionSensorDataManager.parseActivity(t);break;case"deviceOrientation":i=this.motionSensorDataManager.parseDeviceOrientation(t);break;case"barometer":i=this.barometerSensorDataManager.parseData(t,n);break;default:ae.error(`uncaught sensorType "${e}"`)}ae.assertWithError(null!=i,`no sensorData defined for sensorType "${e}"`),ae.log({sensorType:e,sensorData:i,sensorData:i}),this.#u({type:e,message:{[e]:i,timestamp:s}}),this.#u({type:"sensorData",message:{[e]:i,sensorType:e,timestamp:s}})}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=re.Types[s];if(!n){ae.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);ae.log({sensorType:n,sensorScalar:i}),this.#ae.set(n,i)}}parseMessage(e,t){switch(ae.log({messageType:e}),e){case"getSensorScalars":this.parseScalars(t);break;case"getPressurePositions":this.pressureSensorDataManager.parsePositions(t);break;case"sensorData":this.#re(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const oe=T("SensorConfigurationManager",{log:!0});class ce{static#g=["getSensorConfiguration","setSensorConfiguration"];static get MessageTypes(){return this.#g}get messageTypes(){return ce.MessageTypes}static#l=[...this.#g];static get EventTypes(){return this.#l}get eventTypes(){return ce.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static get#ce(){return re.Types}get#he(){return ce.#ce}#ge;#le(e){oe.assertWithError(this.#ge,"must get initial sensorConfiguration");const t=this.#ge?.includes(e);return oe.assert(t,`unavailable sensor type "${e}"`),t}#ue;get configuration(){return this.#ue}#de(e){this.#ue=e,oe.log({updatedConfiguration:this.#ue}),this.#u({type:"getSensorConfiguration",message:{sensorConfiguration:this.configuration}})}#pe(e){return Object.keys(e).every((t=>this.configuration[t]==e[t]))}async setConfiguration(e){if(oe.log({newSensorConfiguration:e}),this.#pe(e))return void oe.log("redundant sensor configuration");const t=this.#fe(e);oe.log({setSensorConfigurationData:t});const s=this.waitForEvent("getSensorConfiguration");this.sendMessage([{type:"setSensorConfiguration",data:t.buffer}]),await s}#me(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=re.Types[n];if(!i){oe.warn(`unknown sensorType index ${n}`);continue}const a=e.getUint16(s+1,!0);oe.log({sensorType:i,sensorRate:a}),t[i]=a}return oe.log({parsedSensorConfiguration:t}),this.#ge=Object.keys(t),t}static#ve=65535;static get MaxSensorRate(){return this.#ve}get maxSensorRate(){return ce.MaxSensorRate}static#ye=5;static get SensorRateStep(){return this.#ye}get sensorRateStep(){return ce.SensorRateStep}static#Se(e){oe.assertTypeWithError(e,"number"),oe.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),oe.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),oe.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#be(e){ce.#Se(e)}#fe(e){let t=Object.keys(e);t=t.filter((e=>this.#le(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{re.AssertValidSensorType(t);const i=re.Types.indexOf(t);s.setUint8(3*n,i);const a=e[t];this.#be(a),s.setUint16(3*n+1,e[t],!0)})),oe.log({sensorConfigurationData:s}),s}static#Te={};static get ZeroSensorConfiguration(){return this.#Te}static{this.#ce.forEach((e=>{this.#Te[e]=0}))}get zeroSensorConfiguration(){const e={};return this.#he.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setConfiguration(this.zeroSensorConfiguration)}parseMessage(e,t){switch(oe.log({messageType:e}),e){case"getSensorConfiguration":case"setSensorConfiguration":const s=this.#me(t);this.#de(s);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const he=T("TfliteManager",{log:!0});let ge=class e{static#g=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteSensorTypes","setTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#g}get messageTypes(){return e.MessageTypes}static#we=["classification","regression"];static get Tasks(){return this.#we}get tasks(){return e.Tasks}#Ee(e){he.assertEnumWithError(e,this.tasks)}#Me(e){he.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#l=[...this.#g];static get EventTypes(){return this.#l}get eventTypes(){return e.#l}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#Ce;get name(){return this.#Ce}#De(e){he.log("parseName",e);const t=O.decode(e);this.#Ie(t)}#Ie(e){he.log({name:e}),this.#Ce=e,this.#u({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e,t){if(he.assertTypeWithError(e,"string"),this.name==e)return void he.log(`redundant name assignment ${e}`);const s=this.waitForEvent("getTfliteName"),n=A.encode(e);this.sendMessage([{type:"setTfliteName",data:n.buffer}],t),await s}#ke;get task(){return this.#ke}#Le(e){he.log("parseTask",e);const t=e.getUint8(0);this.#Me(t);const s=this.tasks[t];this.#We(s)}#We(e){he.log({task:e}),this.#ke=e,this.#u({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e,t){if(this.#Ee(e),this.task==e)return void he.log(`redundant task assignment ${e}`);const s=this.waitForEvent("getTfliteTask"),n=this.tasks.indexOf(e);this.sendMessage([{type:"setTfliteTask",data:Uint8Array.from([n]).buffer}],t),await s}#xe;get sampleRate(){return this.#xe}#Re(e){he.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#Ue(t)}#Ue(e){he.log({sampleRate:e}),this.#xe=e,this.#u({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e,t){if(he.assertTypeWithError(e,"number"),e-=e%ce.SensorRateStep,he.assertWithError(e>=ce.SensorRateStep,`sampleRate must be multiple of ${ce.SensorRateStep} greater than 0 (got ${e})`),this.#xe==e)return void he.log(`redundant sampleRate assignment ${e}`);const s=this.waitForEvent("getTfliteSampleRate"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteSampleRate",data:n.buffer}],t),await s}static#ce=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#ce}static AssertValidSensorType(e){re.AssertValidSensorType(e),he.assertWithError(this.#ce.includes(e),`invalid tflite sensorType "${e}"`)}#he=[];get sensorTypes(){return this.#he.slice()}#Fe(e){he.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=re.Types[n];i?t.push(i):he.error(`invalid sensorTypeEnum ${n}`)}this.#_e(t)}#_e(e){he.log({sensorTypes:e}),this.#he=e,this.#u({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(t,s){t.forEach((t=>{e.AssertValidSensorType(t)}));const n=this.waitForEvent("getTfliteSensorTypes");var i;const a=(t=(i=t).filter(((e,t)=>i.indexOf(e)==t))).map((e=>re.Types.indexOf(e))).sort();he.log(t,a),this.sendMessage([{type:"setTfliteSensorTypes",data:Uint8Array.from(a).buffer}],s),await n}#Ae;get isReady(){return this.#Ae}#Oe(e){he.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Ne(t)}#Ne(e){he.log({isReady:e}),this.#Ae=e,this.#u({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#$e(){he.assertWithError(this.isReady,"tflite is not ready")}#Ve;get captureDelay(){return this.#Ve}#Be(e){he.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#Pe(t)}#Pe(e){he.log({captureDelay:e}),this.#Ve=e,this.#u({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e,t){if(he.assertTypeWithError(e,"number"),this.#Ve==e)return void he.log(`redundant captureDelay assignment ${e}`);const s=this.waitForEvent("getTfliteCaptureDelay"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteCaptureDelay",data:n.buffer}],t),await s}#ze;get threshold(){return this.#ze}#qe(e){he.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#je(t)}#je(e){he.log({threshold:e}),this.#ze=e,this.#u({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e,t){if(he.assertTypeWithError(e,"number"),he.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#ze==e)return void he.log(`redundant threshold assignment ${e}`);const s=this.waitForEvent("getTfliteThreshold"),n=new DataView(new ArrayBuffer(4));n.setFloat32(0,e,!0),this.sendMessage([{type:"setTfliteThreshold",data:n.buffer}],t),await s}#He;get inferencingEnabled(){return this.#He}#Ge(e){he.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#Qe(t)}#Qe(e){he.log({inferencingEnabled:e}),this.#He=e,this.#u({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e,t){if(he.assertTypeWithError(e,"boolean"),!e&&!this.isReady)return;if(this.#$e(),this.#He==e)return void he.log(`redundant inferencingEnabled assignment ${e}`);const s=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage([{type:"setTfliteInferencingEnabled",data:Uint8Array.from([e]).buffer}],t),await s}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#Je(e){he.log("parseInference",e);const t=H(e,0);he.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}he.log("values",s);const n={timestamp:t,values:s};this.#u({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(he.log({messageType:e}),e){case"getTfliteName":case"setTfliteName":this.#De(t);break;case"getTfliteTask":case"setTfliteTask":this.#Le(t);break;case"getTfliteSampleRate":case"setTfliteSampleRate":this.#Re(t);break;case"getTfliteSensorTypes":case"setTfliteSensorTypes":this.#Fe(t);break;case"tfliteModelIsReady":this.#Oe(t);break;case"getTfliteCaptureDelay":case"setTfliteCaptureDelay":this.#Be(t);break;case"getTfliteThreshold":case"setTfliteThreshold":this.#qe(t);break;case"getTfliteInferencingEnabled":case"setTfliteInferencingEnabled":this.#Ge(t);break;case"tfliteModelInference":this.#Je(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage};const le=T("DeviceInformationManager",{log:!0});class ue{static#g=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber"];static get MessageTypes(){return this.#g}get messageTypes(){return ue.MessageTypes}static#l=[...this.#g,"deviceInformation"];static get EventTypes(){return this.#l}get eventTypes(){return ue.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}information={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};clear(){for(const e in this.information)this.information[e]=null}get#Ze(){return Object.values(this.information).every((e=>null!=e))}#Ke(e){le.log({partialDeviceInformation:e});for(const t in e)this.#u({type:t,message:{[t]:e[t]}});Object.assign(this.information,e),le.log({deviceInformation:this.information}),this.#Ze&&(le.log("completed deviceInformation"),this.#u({type:"deviceInformation",message:{deviceInformation:this.information}}))}parseMessage(e,t){switch(le.log({messageType:e}),e){case"manufacturerName":const s=O.decode(t);le.log({manufacturerName:s}),this.#Ke({manufacturerName:s});break;case"modelNumber":const n=O.decode(t);le.log({modelNumber:n}),this.#Ke({modelNumber:n});break;case"softwareRevision":const i=O.decode(t);le.log({softwareRevision:i}),this.#Ke({softwareRevision:i});break;case"hardwareRevision":const a=O.decode(t);le.log({hardwareRevision:a}),this.#Ke({hardwareRevision:a});break;case"firmwareRevision":const r=O.decode(t);le.log({firmwareRevision:r}),this.#Ke({firmwareRevision:r});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),le.log({pnpId:o}),this.#Ke({pnpId:o});break;case"serialNumber":const c=O.decode(t);le.log({serialNumber:c});break;default:throw Error(`uncaught messageType ${e}`)}}}const de=T("InformationManager",{log:!0});class pe{static#g=["isCharging","getBatteryCurrent","getMtu","getId","getName","setName","getType","setType","getCurrentTime","setCurrentTime"];static get MessageTypes(){return this.#g}get messageTypes(){return pe.MessageTypes}static#l=[...this.#g];static get EventTypes(){return this.#l}get eventTypes(){return pe.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#Xe=!1;get isCharging(){return this.#Xe}updateIsCharging(e){de.assertTypeWithError(e,"boolean"),this.#Xe=e,de.log({isCharging:this.#Xe}),this.#u({type:"isCharging",message:{isCharging:this.#Xe}})}#Ye;get batteryCurrent(){return this.#Ye}async getBatteryCurrent(){de.log("getting battery current...");const e=this.waitForEvent("getBatteryCurrent");this.sendMessage([{type:"getBatteryCurrent"}]),await e}updateBatteryCurrent(e){de.assertTypeWithError(e,"number"),this.#Ye=e,de.log({batteryCurrent:this.#Ye}),this.#u({type:"getBatteryCurrent",message:{batteryCurrent:this.#Ye}})}#et;get id(){return this.#et}updateId(e){de.assertTypeWithError(e,"string"),this.#et=e,de.log({id:this.#et}),this.#u({type:"getId",message:{id:this.#et}})}#Ce="";get name(){return this.#Ce}updateName(e){de.assertTypeWithError(e,"string"),this.#Ce=e,de.log({updatedName:this.#Ce}),this.#u({type:"getName",message:{name:this.#Ce}})}static get MinNameLength(){return 2}get minNameLength(){return pe.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return pe.MaxNameLength}async setName(e){de.assertTypeWithError(e,"string"),de.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),de.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=A.encode(e);de.log({setNameData:t});const s=this.waitForEvent("getName");this.sendMessage([{type:"setName",data:t.buffer}]),await s}static#d=["leftInsole","rightInsole"];static get Types(){return this.#d}get#tt(){return pe.Types}#M;get type(){return this.#M}get typeEnum(){return pe.Types.indexOf(this.type)}#st(e){de.assertEnumWithError(e,this.#tt)}#nt(e){de.assertTypeWithError(e,"number"),de.assertWithError(this.#tt[e],`invalid typeEnum ${e}`)}updateType(e){this.#st(e),e!=this.type?(this.#M=e,de.log({updatedType:this.#M}),this.#u({type:"getType",message:{type:this.#M}})):de.log("redundant type assignment")}async#it(e){this.#nt(e);const t=Uint8Array.from([e]);de.log({setTypeData:t});const s=this.waitForEvent("getType");this.sendMessage([{type:"setType",data:t.buffer}]),await s}async setType(e){this.#st(e);const t=this.#tt.indexOf(e);this.#it(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#at=["left","right"];static get InsoleSides(){return this.#at}get insoleSides(){return pe.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}#rt=0;get mtu(){return this.#rt}#ot(e){de.assertTypeWithError(e,"number"),this.#rt!=e?(this.#rt=e,this.#u({type:"getMtu",message:{mtu:this.#rt}})):de.log("redundant mtu assignment",e)}#ct=!1;get isCurrentTimeSet(){return this.#ct}#ht(e){de.log({currentTime:e}),this.#ct=0!=e,this.#ct||this.#gt()}async#gt(){de.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0);const t=this.waitForEvent("getCurrentTime");this.sendMessage([{type:"setCurrentTime",data:e.buffer}]),await t}parseMessage(e,t){switch(de.log({messageType:e}),e){case"isCharging":const s=Boolean(t.getUint8(0));de.log({isCharging:s}),this.updateIsCharging(s);break;case"getBatteryCurrent":const n=t.getFloat32(0,!0);de.log({batteryCurrent:n}),this.updateBatteryCurrent(n);break;case"getId":const i=O.decode(t);de.log({id:i}),this.updateId(i);break;case"getName":case"setName":const a=O.decode(t);de.log({name:a}),this.updateName(a);break;case"getType":case"setType":const r=t.getUint8(0),o=this.#tt[r];de.log({typeEnum:r,type:o}),this.updateType(o);break;case"getMtu":const c=t.getUint16(0,!0);de.log({mtu:c}),this.#ot(c);break;case"getCurrentTime":case"setCurrentTime":const h=Number(t.getBigUint64(0,!0));this.#ht(h);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage;clear(){this.#ct=!1}}const fe=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],me=T("VibrationManager");class ve{static#g=["triggerVibration"];static get MessageTypes(){return this.#g}get messageTypes(){return TfliteManager.MessageTypes}static#lt=["front","rear"];static get Locations(){return this.#lt}get locations(){return ve.Locations}#ut(e){me.assertTypeWithError(e,"string"),me.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#dt(e){this.#pt(e),e.forEach((e=>{this.#ut(e)}))}#ft(e){this.#dt(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),me.log({locationsBitmask:t}),me.assertWithError(t>0,"locationsBitmask must not be zero"),t}#pt(e){me.assertWithError(Array.isArray(e),"passed non-array"),me.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return fe}get waveformEffects(){return ve.WaveformEffects}#mt(e){me.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#vt=1270;static get MaxWaveformEffectSegmentDelay(){return this.#vt}get maxWaveformEffectSegmentDelay(){return ve.MaxWaveformEffectSegmentDelay}#yt(e){if(null!=e.effect){const t=e.effect;this.#mt(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;me.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),me.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#St(t)}}static#bt=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#bt}get maxWaveformEffectSegmentLoopCount(){return ve.MaxWaveformEffectSegmentLoopCount}#St(e){me.assertTypeWithError(e,"number"),me.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),me.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#Tt=8;static get MaxNumberOfWaveformEffectSegments(){return this.#Tt}get maxNumberOfWaveformEffectSegments(){return ve.MaxNumberOfWaveformEffectSegments}#wt(e){this.#pt(e),me.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#yt(e)}))}static#Et=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Et}get maxWaveformEffectSequenceLoopCount(){return ve.MaxWaveformEffectSequenceLoopCount}#Mt(e){me.assertTypeWithError(e,"number"),me.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),me.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Ct=2550;static get MaxWaveformSegmentDuration(){return this.#Ct}get maxWaveformSegmentDuration(){return ve.MaxWaveformSegmentDuration}#Dt(e){me.assertTypeWithError(e.amplitude,"number"),me.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),me.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),me.assertTypeWithError(e.duration,"number"),me.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),me.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#It=20;static get MaxNumberOfWaveformSegments(){return this.#It}get maxNumberOfWaveformSegments(){return ve.MaxNumberOfWaveformSegments}#kt(e){this.#pt(e),me.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Dt(e)}))}#Lt(e,t,s=0){this.#wt(t),this.#Mt(s);let n=[],i=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const r=0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const a=e%4*2;n[i]|=s<<a,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return me.log({dataArray:n,dataView:o}),this.#fe(e,"waveformEffect",o)}#Wt(e,t){this.#kt(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),me.log({dataView:s}),this.#fe(e,"waveform",s)}static#d=["waveformEffect","waveform"];static get Types(){return this.#d}get#tt(){return ve.Types}#xt(e){me.assertTypeWithError(e,"string"),me.assertWithError(this.#tt.includes(e),`invalid vibrationType "${e}"`)}#fe(e,t,s){me.assertWithError(s?.byteLength>0,"no data received");const n=this.#ft(e);this.#xt(t);const i=this.#tt.indexOf(t);me.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const a=$(n,i,s.byteLength,s);return me.log({data:a}),a}async triggerVibration(e,t){let s;e.forEach((e=>{const{type:t}=e;let n,{locations:i}=e;switch(i=i||this.locations.slice(),t){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:a}=t;n=this.#Lt(i,s,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Wt(i,s)}break;default:throw Error(`invalid vibration type "${t}"`)}me.log({type:t,dataView:n}),s=$(s,n)})),await this.sendMessage([{type:"triggerVibration",data:s}],t)}sendMessage}const ye=T("BaseConnectionManager",{log:!0});class Se{static#Rt=[...pe.MessageTypes,...ce.MessageTypes,...re.MessageTypes,...ve.MessageTypes,...ge.MessageTypes,...q.MessageTypes];static get TxRxMessageTypes(){return this.#Rt}static#g=[...ue.MessageTypes,"batteryLevel","smp","rx","tx",...this.TxRxMessageTypes];static get MessageTypes(){return this.#g}static#Ut(e){ye.assertEnumWithError(e,this.#Rt)}get bluetoothId(){this.#Ft("bluetoothId")}onStatusUpdated;onMessageReceived;static#_t(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#Ft(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#_t("type")}get type(){return this.constructor.type}#At(){ye.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Ot(){ye.assertWithError(this.constructor!=Se,`${this.constructor.name} must be subclassed`)}constructor(){this.#Ot(),this.#At()}static get#m(){return["not connected","connecting","connected","disconnecting"]}static get Statuses(){return this.#m}get#Nt(){return Se.#m}#O="not connected";get status(){return this.#O}set status(e){ye.assertEnumWithError(e,this.#Nt),this.#O!=e?(ye.log(`new connection status "${e}"`),this.#O=e,this.onStatusUpdated?.(this.status),this.isConnected?this.#$t.start():this.#$t.stop(),"not connected"==this.#O&&(this.#rt=null)):ye.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#Vt(){ye.assertWithError(!this.isConnected,"device is already connected")}#Bt(){ye.assertWithError("connecting"!=this.status,"device is already connecting")}#Pt(){ye.assertWithError(this.isConnected,"device is not connected")}#zt(){ye.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#qt(){this.#Pt(),this.#zt()}async connect(){this.#Vt(),this.#Bt(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#Vt(),this.#Bt(),ye.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#Pt(),this.#zt(),this.status="disconnecting",ye.log("disconnecting from device...")}async sendSmpMessage(e){this.#qt(),ye.log("sending smp message",e)}#jt=[];async sendTxMessages(e,t=!0){if(this.#qt(),e&&this.#jt.push(...e),!t)return;ye.log("sendTxMessages",this.#jt.slice());const s=this.#jt.map((e=>{Se.#Ut(e.type);const t=Se.TxRxMessageTypes.indexOf(e.type),s=new DataView(new ArrayBuffer(2));return s.setUint16(0,e.data?.byteLength||0,!0),$(t,s,e.data)}));if(this.#rt)for(;s.length>0;){let e=0,t=0;s.some((s=>{if(e+s.byteLength>this.#rt-3)return!0;t++,e+=s.byteLength}));const n=s.splice(0,t);ye.log({arrayBufferCount:t,arrayBuffersToSend:n});const i=$(...n);ye.log("sending arrayBuffer",i),await this.sendTxData(i)}else{const e=$(...s);ye.log("sending arrayBuffer",e),await this.sendTxData(e)}this.#jt.length=0}#rt;get mtu(){return this.#rt}set mtu(e){this.#rt=e}async sendTxData(e){ye.log("sendTxData",e)}parseRxMessage(e){ie(e,Se.#Rt,this.#Ht.bind(this),null,!0)}#Ht(e,t){ye.log({messageType:e,dataView:t}),this.onMessageReceived?.(e,t)}#$t=new W(this.#Gt.bind(this),5e3);#Gt(){this.isConnected||(ye.log("timer detected disconnection"),this.status="not connected")}}const be=T("bluetoothUUIDs",{log:!1});if(t)var Te=window.BluetoothUUID;function we(e){return be.assertTypeWithError(e,"string"),be.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function Ee(e){return Te?.getCharacteristic?.(e)}function Me(e){return Te?.getService?.(e)}const Ce=Object.freeze({services:{deviceInformation:{uuid:Me("device_information"),characteristics:{manufacturerName:{uuid:Ee("manufacturer_name_string")},modelNumber:{uuid:Ee("model_number_string")},hardwareRevision:{uuid:Ee("hardware_revision_string")},firmwareRevision:{uuid:Ee("firmware_revision_string")},softwareRevision:{uuid:Ee("software_revision_string")},pnpId:{uuid:Ee("pnp_id")},serialNumber:{uuid:Ee("serial_number_string")}}},battery:{uuid:Me("battery_service"),characteristics:{batteryLevel:{uuid:Ee("battery_level")}}},main:{uuid:we("0000"),characteristics:{rx:{uuid:we("1000")},tx:{uuid:we("1001")}}},smp:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{smp:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.smp.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),De=Ce.serviceUUIDs,Ie=Ce.optionalServiceUUIDs;const ke=[],Le=[];function We(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"rx":case"tx":case"smp":t.read=!1}switch(e){case"batteryLevel":case"rx":case"smp":t.notify=!0}switch(e){case"tx":case"smp":t.writeWithoutResponse=!0}return t}Object.entries(Ce.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{De.includes(t.uuid)&&ke.push(s.uuid),Le.push(s.uuid)}))}),[]);const xe=T("BluetoothConnectionManager",{log:!0});class Re extends Se{isInRange=!0;onCharacteristicValueChanged(e,t){"rx"==e?this.parseRxMessage(t):this.onMessageReceived?.(e,t)}async writeCharacteristic(e,t){xe.log("writeCharacteristic",...arguments)}async sendSmpMessage(e){super.sendSmpMessage(...arguments),await this.writeCharacteristic("smp",e)}async sendTxData(e){super.sendTxData(...arguments),await this.writeCharacteristic("tx",e)}}const Ue=T("WebBluetoothConnectionManager",{log:!0});if(t)var Fe=window.navigator;class _e extends Re{get bluetoothId(){return this.device?.id}#Qt={characteristicvaluechanged:this.#Jt.bind(this)};#Zt={gattserverdisconnected:this.#Kt.bind(this)};static get isSupported(){return"bluetooth"in Fe}static get type(){return"webBluetooth"}#Xt;get device(){return this.#Xt}set device(e){this.#Xt!=e?(this.#Xt&&k(this.#Xt,this.#Zt),e&&I(e,this.#Zt),this.#Xt=e):Ue.log("tried to assign the same BluetoothDevice")}get server(){return this.#Xt?.gatt}get isConnected(){return this.server?.connected}#Yt=new Map;#es=new Map;async connect(){await super.connect();try{const e=await Fe.bluetooth.requestDevice({filters:[{services:De}],optionalServices:t?Ie:[]});Ue.log("got BluetoothDevice"),this.device=e,Ue.log("connecting to device...");const s=await this.device.gatt.connect();Ue.log(`connected to device? ${s.connected}`),await this.#ts(),Ue.log("fully connected"),this.status="connected"}catch(e){Ue.error(e),this.status="not connected",this.server?.disconnect(),this.#ss()}}async#ts(){this.#ss(),Ue.log("getting services...");const e=await this.server.getPrimaryServices();Ue.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),Ue.log("getting characteristics...");for(const n in e){const i=e[n];Ue.log({service:i});const o=(s=i.uuid,Ce.getServiceNameFromUUID(s));Ue.assertWithError(o,`no name found for service uuid "${i.uuid}"`),Ue.log(`got "${o}" service`),i._name=o,this.#Yt.set(o,i),Ue.log(`getting characteristics for "${o}" service`);const c=await i.getCharacteristics();Ue.log(`got characteristics for "${o}" service`);for(const e in c){const s=c[e];Ue.log({characteristic:s});const n=(t=s.uuid,Ce.getCharacteristicNameFromUUID(t));Ue.assertWithError(n,`no name found for characteristic uuid "${s.uuid}" in "${o}" service`),Ue.log(`got "${n}" characteristic in "${o}" service`),s._name=n,this.#es.set(n,s),I(s,this.#Qt);const i=s.properties||We(n);i.notify&&(Ue.log(`starting notifications for "${n}" characteristic`),await s.startNotifications()),i.read&&(Ue.log(`reading "${n}" characteristic...`),await s.readValue(),(a||r)&&this.#ns(s))}}var t,s}#ss(){this.device&&k(this.device,this.#Zt),this.#es.forEach((e=>{k(e,this.#Qt)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#ss(),this.status="not connected"}#Jt(e){Ue.log("oncharacteristicvaluechanged");const t=e.target;this.#ns(t)}#ns(e){Ue.log("onCharacteristicValue");const t=e._name;Ue.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),Ue.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;Ue.assertWithError(s,`no data found for "${t}" characteristic`),Ue.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer)));try{this.onCharacteristicValueChanged(t,s)}catch(e){Ue.error(e)}}async writeCharacteristic(e,t){super.writeCharacteristic(...arguments);const s=this.#es.get(e);Ue.assertWithError(s,`${e} characteristic not found`),Ue.log("writing characteristic",s,t);const n=s.properties||We(e);n.writeWithoutResponse?(Ue.log("writing without response"),await s.writeValueWithoutResponse(t)):(Ue.log("writing with response"),await s.writeValueWithResponse(t)),Ue.log("wrote characteristic"),n.read&&!n.notify&&(Ue.log("reading value after write..."),await s.readValue(),(a||r)&&this.#ns(s))}#Kt(e){Ue.log("gattserverdisconnected"),this.status="not connected"}get canReconnect(){return this.server&&!this.server.connected&&this.isInRange}async reconnect(){await super.reconnect(),Ue.log("attempting to reconnect..."),this.status="connecting";try{await this.server.connect()}catch(e){Ue.error(e),this.isInRange=!1}this.isConnected?(Ue.log("successfully reconnected!"),await this.#ts(),this.status="connected"):(Ue.log("unable to reconnect"),this.status="not connected")}}const Ae=4294967296,Oe=9007199254740992;const Ne={encode:function(e){let t,s=new ArrayBuffer(256),n=new DataView(s),i=0;function a(e){let a=s.byteLength;const r=i+e;for(;a<r;)a<<=1;if(a!==s.byteLength){const e=n;s=new ArrayBuffer(a),n=new DataView(s);const t=i+3>>2;for(let s=0;s<t;++s)n.setUint32(s<<2,e.getUint32(s<<2))}return t=e,n}function r(){i+=t}function o(e){r(a(1).setUint8(i,e))}function c(e){const t=a(e.length);for(let s=0;s<e.length;++s)t.setUint8(i+s,e[s]);r()}function h(e,t){t<24?o(e<<5|t):t<256?(o(e<<5|24),o(t)):t<65536?(o(e<<5|25),function(e){r(a(2).setUint16(i,e))}(t)):t<4294967296?(o(e<<5|26),function(e){r(a(4).setUint32(i,e))}(t)):(o(e<<5|27),function(e){const t=e%Ae,s=(e-t)/Ae,n=a(8);n.setUint32(i,s),n.setUint32(i+4,t),r()}(t))}if(function e(t){let s;const n=[];let g;if(!1===t)return o(244);if(!0===t)return o(245);if(null===t)return o(246);if(void 0===t)return o(247);switch(typeof t){case"number":if(Math.floor(t)===t){if(t>=0&&t<=Oe)return h(0,t);if(-Oe<=t&&t<0)return h(1,-(t+1))}return o(251),function(e){r(a(8).setFloat64(i,e))}(t);case"string":for(s=0;s<t.length;++s){let e=t.charCodeAt(s);e<128?n.push(e):e<2048?(n.push(192|e>>6),n.push(128|63&e)):e<55296?(n.push(224|e>>12),n.push(128|e>>6&63),n.push(128|63&e)):(e=(1023&e)<<10,e|=1023&t.charCodeAt(++s),e+=65536,n.push(240|e>>18),n.push(128|e>>12&63),n.push(128|e>>6&63),n.push(128|63&e))}return h(3,n.length),c(n);default:if(Array.isArray(t))for(g=t.length,h(4,g),s=0;s<g;++s)e(t[s]);else if(t instanceof Uint8Array)h(2,t.length),c(t);else{const n=Object.keys(t);for(g=n.length,h(5,g),s=0;s<g;++s){const i=n[s];e(i),e(t[i])}}}}(e),"slice"in s)return s.slice(0,i);const g=new ArrayBuffer(i),l=new DataView(g);for(let e=0;e<i;++e)l.setUint8(e,n.getUint8(e));return g},decode:function(e,t,s){const n=new DataView(e);let i=0;function a(e,t){return i+=e,t}function r(t){return a(t,new Uint8Array(e,i,t))}function o(){return a(1,n.getUint8(i))}function c(){return a(2,n.getUint16(i))}function h(){return a(4,n.getUint32(i))}function g(){return 255===n.getUint8(i)&&(i+=1,!0)}function l(e){if(e<24)return e;if(24===e)return o();if(25===e)return c();if(26===e)return h();if(27===e)return h()*Ae+h();if(31===e)return-1;throw new Error("Invalid length encoding")}function u(e){const t=o();if(255===t)return-1;const s=l(31&t);if(s<0||t>>5!==e)throw new Error("Invalid indefinite length element");return s}function d(e,t){for(let s=0;s<t;++s){let s=o();128&s&&(s<224?(s=(31&s)<<6|63&o(),t-=1):s<240?(s=(15&s)<<12|(63&o())<<6|63&o(),t-=2):(s=(15&s)<<18|(63&o())<<12|(63&o())<<6|63&o(),t-=3)),s<65536?e.push(s):(s-=65536,e.push(55296|s>>10),e.push(56320|1023&s))}}"function"!=typeof t&&(t=function(e){return e}),"function"!=typeof s&&(s=function(){});const p=function e(){const h=o(),p=h>>5,f=31&h;let m,v;if(7===p)switch(f){case 25:return function(){const e=new ArrayBuffer(4),t=new DataView(e),s=c(),n=32768&s;let i=31744&s;const a=1023&s;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==a)return(n?-1:1)*a*5.960464477539063e-8;return t.setUint32(0,n<<16|i<<13|a<<13),t.getFloat32(0)}();case 26:return a(4,n.getFloat32(i));case 27:return a(8,n.getFloat64(i))}if(v=l(f),v<0&&(p<2||p>6))throw new Error("Invalid length");const y=[];let S;const b={};switch(p){case 0:return v;case 1:return-1-v;case 2:if(v<0){const e=[];let t=0;for(;(v=u(p))>=0;)t+=v,e.push(r(v));const s=new Uint8Array(t);let n=0;for(m=0;m<e.length;++m)s.set(e[m],n),n+=e[m].length;return s}return r(v);case 3:if(v<0)for(;(v=u(p))>=0;)d(y,v);else d(y,v);return String.fromCharCode.apply(null,y);case 4:if(v<0)for(S=[];!g();)S.push(e());else for(S=new Array(v),m=0;m<v;++m)S[m]=e();return S;case 5:for(m=0;m<v||v<0&&!g();++m){b[e()]=e()}return b;case 6:return t(e(),v);case 7:switch(v){case 20:return!1;case 21:return!0;case 22:return null;case 23:return;default:return s(v)}}}();if(i!==e.byteLength)throw new Error("Remaining bytes");return p}},$e=T("mcumgr",{log:!0}),Ve=0,Be=1,Pe=2,ze=3,qe=0,je=1,He=8,Ge=0,Qe=2,Je=3,Ze=5,Ke=0,Xe=1,Ye=5,et=0;class tt{constructor(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}onMessage(e){return this._messageCallback=e,this}onImageUploadNext(e){return this._imageUploadNextCallback=e,this}onImageUploadProgress(e){return this._imageUploadProgressCallback=e,this}onImageUploadFinished(e){return this._imageUploadFinishedCallback=e,this}onFileUploadNext(e){return this._fileUploadNextCallback=e,this}onFileUploadProgress(e){return this._fileUploadProgressCallback=e,this}onFileUploadFinished(e){return this._fileUploadFinishedCallback=e,this}onFileDownloadNext(e){return this._fileDownloadNextCallback=e,this}onFileDownloadProgress(e){return this._fileDownloadProgressCallback=e,this}onFileDownloadFinished(e){return this._fileDownloadFinishedCallback=e,this}_getMessage(e,t,s,n){let i=[];void 0!==n&&(i=[...new Uint8Array(Ne.encode(n))]);const a=255&i.length,r=[e,0,i.length>>8,a,t>>8,255&t,this._seq,s,...i];return this._seq=(this._seq+1)%256,r}_notification(e){$e.log("mcumgr - message received");const t=new Uint8Array(e);this._buffer=new Uint8Array([...this._buffer,...t]);const s=256*this._buffer[2]+this._buffer[3];this._buffer.length<s+8||(this._processMessage(this._buffer.slice(0,s+8)),this._buffer=this._buffer.slice(s+8))}_processMessage(e){const[t,,s,n,i,a,,r]=e,o=Ne.decode(e.slice(8).buffer),c=256*s+n,h=256*i+a;return $e.log("mcumgr - Process Message - Group: "+h+", Id: "+r+", Off: "+o.off),h===je&&r===Xe&&o.off?(this._uploadOffset=o.off,void this._uploadNext()):t===ze&&h===He&&r===et&&o.off?(this._uploadFileOffset=o.off,void this._uploadFileNext()):t===Be&&h===He&&r===et?(this._downloadFileOffset+=o.data.length,null!=o.len&&(this._downloadFileLength=o.len),$e.log("downloaded "+this._downloadFileOffset+" bytes of "+this._downloadFileLength),this._downloadFileLength>0&&this._fileDownloadProgressCallback({percentage:Math.floor(this._downloadFileOffset/this._downloadFileLength*100)}),this._messageCallback&&this._messageCallback({op:t,group:h,id:r,data:o,length:c}),void this._downloadFileNext()):void(this._messageCallback&&this._messageCallback({op:t,group:h,id:r,data:o,length:c}))}cmdReset(){return this._getMessage(Pe,qe,Ze)}smpEcho(e){return this._getMessage(Pe,qe,Ge,{d:e})}cmdImageState(){return this._getMessage(Ve,je,Ke)}cmdImageErase(){return this._getMessage(Pe,je,Ye,{})}cmdImageTest(e){return this._getMessage(Pe,je,Ke,{hash:e,confirm:!1})}cmdImageConfirm(e){return this._getMessage(Pe,je,Ke,{hash:e,confirm:!0})}_hash(e){return crypto.subtle.digest("SHA-256",e)}async _uploadNext(){if(!this._uploadImage)return;if(this._uploadOffset>=this._uploadImage.byteLength)return this._uploadIsInProgress=!1,void this._imageUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadOffset};0===this._uploadOffset&&(e.len=this._uploadImage.byteLength,e.sha=new Uint8Array(await this._hash(this._uploadImage))),this._imageUploadProgressCallback({percentage:Math.floor(this._uploadOffset/this._uploadImage.byteLength*100)});const t=this._mtu-Ne.encode(e).byteLength-8-3-5;e.data=new Uint8Array(this._uploadImage.slice(this._uploadOffset,this._uploadOffset+t)),this._uploadOffset+=t;const s=this._getMessage(Pe,je,Xe,e);$e.log("mcumgr - _uploadNext: Message Length: "+s.length),this._imageUploadNextCallback({packet:s})}async reset(){this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}async cmdUpload(e,t=0){this._uploadIsInProgress?$e.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadOffset=0,this._uploadImage=e,this._uploadSlot=t,this._uploadNext())}async cmdUploadFile(e,t){this._uploadIsInProgress?$e.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadFileOffset=0,this._uploadFile=e,this._uploadFilename=t,this._uploadFileNext())}async _uploadFileNext(){if($e.log("uploadFileNext - offset: "+this._uploadFileOffset+", length: "+this._uploadFile.byteLength),this._uploadFileOffset>=this._uploadFile.byteLength)return this._uploadIsInProgress=!1,void this._fileUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadFileOffset};0===this._uploadFileOffset&&(e.len=this._uploadFile.byteLength),e.name=this._uploadFilename,this._fileUploadProgressCallback({percentage:Math.floor(this._uploadFileOffset/this._uploadFile.byteLength*100)});const t=this._mtu-Ne.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadFile.slice(this._uploadFileOffset,this._uploadFileOffset+t)),this._uploadFileOffset+=t;const s=this._getMessage(Pe,He,et,e);$e.log("mcumgr - _uploadNext: Message Length: "+s.length),this._fileUploadNextCallback({packet:s})}async cmdDownloadFile(e,t){this._downloadIsInProgress?$e.error("Download is already in progress."):(this._downloadIsInProgress=!0,this._downloadFileOffset=0,this._downloadFileLength=0,this._downloadRemoteFilename=e,this._downloadLocalFilename=t,this._downloadFileNext())}async _downloadFileNext(){if(this._downloadFileLength>0&&this._downloadFileOffset>=this._downloadFileLength)return this._downloadIsInProgress=!1,void this._fileDownloadFinishedCallback();const e={off:this._downloadFileOffset};0===this._downloadFileOffset&&(e.name=this._downloadRemoteFilename);const t=this._getMessage(Ve,He,et,e);$e.log("mcumgr - _downloadNext: Message Length: "+t.length),this._fileDownloadNextCallback({packet:t})}async imageInfo(e){const t={},s=new Uint8Array(e);if(s.length<32)throw new Error("Invalid image (too short file)");if(61!==s[0]||184!==s[1]||243!==s[2]||150!==s[3])throw new Error("Invalid image (wrong magic bytes)");if(0!==s[4]||0!==s[5]||0!==s[6]||0!==s[7])throw new Error("Invalid image (wrong load address)");const n=s[8]+256*s[9];if(0!==s[10]||0!==s[11])throw new Error("Invalid image (wrong protected TLV area size)");const i=s[12]+256*s[13]+65536*s[14]+s[15]*2**24;if(t.imageSize=i,s.length<i+n)throw new Error("Invalid image (wrong image size)");if(0!==s[16]||0!==s[17]||0!==s[18]||0!==s[19])throw new Error("Invalid image (wrong flags)");const a=`${s[20]}.${s[21]}.${s[22]+256*s[23]}`;return t.version=a,t.hash=[...new Uint8Array(await this._hash(e.slice(0,i+32)))].map((e=>e.toString(16).padStart(2,"0"))).join(""),t}}const st=T("FirmwareManager",{log:!0});class nt{sendMessage;constructor(){this.#is()}static#g=["smp"];static get MessageTypes(){return this.#g}get messageTypes(){return nt.MessageTypes}static#l=[...this.#g,"firmwareImages","firmwareUploadProgress","firmwareUploadComplete","firmwareStatus"];static get EventTypes(){return this.#l}get eventTypes(){return nt.#l}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}parseMessage(e,t){if(st.log({messageType:e}),"smp"!==e)throw Error(`uncaught messageType ${e}`);this.#as._notification(Array.from(new Uint8Array(t.buffer))),this.#u({type:"smp"})}async uploadFirmware(e){st.log("uploadFirmware",e);const t=this.waitForEvent("firmwareUploadComplete");await this.getImages();const s=await P(e),n=await this.#as.imageInfo(s);st.log({imageInfo:n}),this.#as.cmdUpload(s,1),this.#$("uploading"),await t}static#m=["idle","uploading","uploaded","pending","testing","erasing"];static get Statuses(){return this.#m}#O="idle";get status(){return this.#O}#$(e){st.assertEnumWithError(e,nt.Statuses),this.#O!=e?(this.#O=e,st.log({firmwareStatus:this.#O}),this.#u({type:"firmwareStatus",message:{firmwareStatus:this.#O}})):st.log(`redundant firmwareStatus assignment "${e}"`)}#rs;get images(){return this.#rs}#os(){st.assertWithError(this.#rs,"didn't get imageState")}#cs(e){st.assertTypeWithError(e,"number"),st.assertWithError(0==e||1==e,"imageIndex must be 0 or 1")}async getImages(){const e=this.waitForEvent("firmwareImages");st.log("getting firmware image state..."),this.sendMessage(Uint8Array.from(this.#as.cmdImageState()).buffer),await e}async testImage(e=1){if(this.#cs(e),this.#os(),!this.#rs[e])return void st.log(`image ${e} not found`);if(1==this.#rs[e].pending)return void st.log(`image ${e} is already pending`);if(this.#rs[e].empty)return void st.log(`image ${e} is empty`);const t=this.waitForEvent("smp");st.log("testing firmware image..."),this.sendMessage(Uint8Array.from(this.#as.cmdImageTest(this.#rs[e].hash)).buffer),await t}async eraseImage(){this.#os();const e=this.waitForEvent("smp");st.log("erasing image..."),this.sendMessage(Uint8Array.from(this.#as.cmdImageErase()).buffer),this.#$("erasing"),await e,await this.getImages()}async confirmImage(e=0){if(this.#cs(e),this.#os(),!0===this.#rs[e].confirmed)return void st.log(`image ${e} is already confirmed`);const t=this.waitForEvent("smp");st.log("confirming image..."),this.sendMessage(Uint8Array.from(this.#as.cmdImageConfirm(this.#rs[e].hash)).buffer),await t}async echo(e){st.assertTypeWithError(e,"string");const t=this.waitForEvent("smp");st.log("sending echo..."),this.sendMessage(Uint8Array.from(this.#as.smpEcho(e)).buffer),await t}async reset(){const e=this.waitForEvent("smp");st.log("resetting..."),this.sendMessage(Uint8Array.from(this.#as.cmdReset()).buffer),await e}#rt;get mtu(){return this.#rt}set mtu(e){this.#rt=e,this.#as._mtu=this.#rt}#as=new tt;#is(){this.#as.onMessage(this.#hs.bind(this)),this.#as.onFileDownloadNext(this.#gs),this.#as.onFileDownloadProgress(this.#ls.bind(this)),this.#as.onFileDownloadFinished(this.#us.bind(this)),this.#as.onFileUploadNext(this.#ds.bind(this)),this.#as.onFileUploadProgress(this.#ps.bind(this)),this.#as.onFileUploadFinished(this.#fs.bind(this)),this.#as.onImageUploadNext(this.#ms.bind(this)),this.#as.onImageUploadProgress(this.#vs.bind(this)),this.#as.onImageUploadFinished(this.#ys.bind(this))}#hs({op:e,group:t,id:s,data:n,length:i}){switch(st.log("onMcuMessage",...arguments),t){case qe:switch(s){case Ge:st.log(`echo "${n.r}"`);break;case Qe:st.table(n.tasks);break;case Je:st.log(n)}break;case je:if(s===Ke)this.#Ss(n);break;default:throw Error(`uncaught mcuMessage group ${t}`)}}#gs(){st.log("onMcuFileDownloadNext",...arguments)}#ls(){st.log("onMcuFileDownloadProgress",...arguments)}#us(){st.log("onMcuFileDownloadFinished",...arguments)}#ds(){st.log("onMcuFileUploadNext",...arguments)}#ps(){st.log("onMcuFileUploadProgress",...arguments)}#fs(){st.log("onMcuFileUploadFinished",...arguments)}#ms({packet:e}){st.log("onMcuImageUploadNext",...arguments),this.sendMessage(Uint8Array.from(e).buffer)}#vs({percentage:e}){const t=e/100;st.log("onMcuImageUploadProgress",...arguments),this.#u({type:"firmwareUploadProgress",message:{firmwareUploadProgress:t}})}async#ys(){st.log("onMcuImageUploadFinished",...arguments),await this.getImages(),this.#u({type:"firmwareUploadProgress",message:{firmwareUploadProgress:100}}),this.#u({type:"firmwareUploadComplete"})}#Ss(e){if(!e.images)return void st.log("no images found");this.#rs=e.images,st.log("images",this.#rs);let t="idle";2==this.#rs.length&&(this.#rs[1].bootable?this.#rs[0].confirmed?this.#rs[1].pending?(st.log("reset to upload to the new firmware image"),t="pending"):(st.log("Slot 1 has a valid image. run testImage() to test it or upload a different image."),t="uploaded"):(st.log('Slot 0 has a valid image. Click "Confirm Image" to confirm it or wait and the device will swap images back.'),t="testing"):st.warn('Slot 1 has a invalid image. Click "Erase Image" to erase it or upload a different image')),1==this.#rs.length&&(this.#rs.push({slot:1,empty:!0,version:"Empty",pending:!1,confirmed:!1,bootable:!1}),st.log("Select a firmware upload image to upload to slot 1.")),this.#$(t),this.#u({type:"firmwareImages",message:{firmwareImages:this.#rs}})}}const it=T("Device",{log:!0});class at{get bluetoothId(){return this.#bs?.bluetoothId}constructor(){this.#Ts.eventDispatcher=this.#ws,this.#Es.sendMessage=this.#Ms.bind(this),this.#Es.eventDispatcher=this.#ws,this.#Cs.sendMessage=this.#Ms.bind(this),this.#Cs.eventDispatcher=this.#ws,this.#Ds.sendMessage=this.#Ms.bind(this),this.#Ds.eventDispatcher=this.#ws,this.#Is.sendMessage=this.#Ms.bind(this),this.#ks.sendMessage=this.#Ms.bind(this),this.#ks.eventDispatcher=this.#ws,this.#Ls.sendMessage=this.#Ms.bind(this),this.#Ls.eventDispatcher=this.#ws,this.#Ws.sendMessage=this.#xs.bind(this),this.#Ws.eventDispatcher=this.#ws,this.addEventListener("getMtu",(()=>{this.#Ws.mtu=this.mtu,this.#Ls.mtu=this.mtu,this.connectionManager.mtu=this.mtu})),this.addEventListener("getType",(()=>{at.#Rs&&at.#Us(this)})),t&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),s&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{at.#Fs(this)}))}static get#_s(){return _e}static#l=["batteryLevel","connectionStatus",...Se.Statuses,"isConnected","connectionMessage",...ue.EventTypes,...pe.EventTypes,...ce.EventTypes,...re.EventTypes,...q.EventTypes,...ge.EventTypes,...nt.EventTypes];static get EventTypes(){return this.#l}get eventTypes(){return at.#l}#ws=new D(this,this.eventTypes);addEventListener(e,t,s){this.#ws.addEventListener(e,t,s)}#u(e){this.#ws.dispatchEvent(e)}removeEventListener(e,t){return this.#ws.removeEventListener(e,t)}waitForEvent(e){return this.#ws.waitForEvent(e)}#bs;get connectionManager(){return this.#bs}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#As.bind(this),e.onMessageReceived=this.#Os.bind(this)),this.#bs=e,it.log("assigned new connectionManager",this.#bs)):it.log("same connectionManager is already assigned")}async#Ms(e,t){await(this.#bs?.sendTxMessages(...arguments))}async connect(){return this.connectionManager||(this.connectionManager=new at.#_s),this.#Ns(),this.connectionManager.connect()}#$s=!1;get isConnected(){return this.#$s}#Pt(){it.assertWithError(this.isConnected,"not connected")}static#Vs=["isCharging","getBatteryCurrent","getId","getMtu","getName","getType","getCurrentTime","getSensorConfiguration","getSensorScalars","getPressurePositions","maxFileLength","getFileLength","getFileChecksum","getFileTransferType","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];get#Bs(){return at.#Vs}get#Ps(){return this.#Bs.every((e=>this.latestConnectionMessage.has(e)))}#zs(){const e=this.#Bs.map((e=>({type:e})));this.#Ms(e)}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#Ns(),this.connectionManager?.reconnect()}static#qs=!1;static get ReconnectOnDisconnection(){return this.#qs}static set ReconnectOnDisconnection(e){it.assertTypeWithError(e,"boolean"),this.#qs=e}#js=at.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#js}set reconnectOnDisconnection(e){it.assertTypeWithError(e,"boolean"),this.#js=e}#Hs;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#Pt(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#bs?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#bs.status;default:return"not connected"}}get isConnectionBusy(){return"connecting"==this.connectionStatus||"disconnecting"==this.connectionStatus}#As(e){if(it.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(it.log("starting reconnect interval..."),this.#Hs=setInterval((()=>{it.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Hs&&(it.log("clearing reconnect interval"),clearInterval(this.#Hs),this.#Hs=void 0),this.#Gt(),"connected"!=e||this.#$s||this.#zs(),"not connected"==e&&!this.canReconnect&&at.#Gs.includes(this)){const e=at.#Gs.indexOf(this);at.AvailableDevices.splice(e,1),at.#Qs()}}#Js(e=!1){this.#u({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#u({type:this.connectionStatus}),e&&this.#u({type:"isConnected",message:{isConnected:this.isConnected}})}#Gt(){switch(this.#$s=this.connectionManager?.isConnected&&this.#Ps&&this.#Es.isCurrentTimeSet,this.connectionStatus){case"connected":this.#$s&&this.#Js(!0);break;case"not connected":this.#Js(!0);break;default:this.#Js(!1)}}#Ns(){this.latestConnectionMessage.clear(),this.#Es.clear(),this.#Ts.clear()}#Os(e,t){if(it.log({messageType:e,dataView:t}),"batteryLevel"===e){const e=t.getUint8(0);it.log("received battery level",{batteryLevel:e}),this.#Zs(e)}else if(this.#Ls.messageTypes.includes(e))this.#Ls.parseMessage(e,t);else if(this.#ks.messageTypes.includes(e))this.#ks.parseMessage(e,t);else if(this.#Ds.messageTypes.includes(e))this.#Ds.parseMessage(e,t);else if(this.#Ws.messageTypes.includes(e))this.#Ws.parseMessage(e,t);else if(this.#Ts.messageTypes.includes(e))this.#Ts.parseMessage(e,t);else if(this.#Es.messageTypes.includes(e))this.#Es.parseMessage(e,t);else{if(!this.#Cs.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Cs.parseMessage(e,t)}this.latestConnectionMessage.set(e,t),this.#u({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#Ps&&this.#Gt()}latestConnectionMessage=new Map;#Ts=new ue;get deviceInformation(){return this.#Ts.information}#Ks=0;get batteryLevel(){return this.#Ks}#Zs(e){it.assertTypeWithError(e,"number"),this.#Ks!=e?(this.#Ks=e,it.log({updatedBatteryLevel:this.#Ks}),this.#u({type:"batteryLevel",message:{batteryLevel:this.#Ks}})):it.log(`duplicate batteryLevel assignment ${e}`)}#Es=new pe;get id(){return this.#Es.id}get isCharging(){return this.#Es.isCharging}get batteryCurrent(){return this.#Es.batteryCurrent}async getBatteryCurrent(){await this.#Es.getBatteryCurrent()}static get MinNameLength(){return pe.MinNameLength}static get MaxNameLength(){return pe.MaxNameLength}get name(){return this.#Es.name}async setName(e){await this.#Es.setName(e)}static get Types(){return pe.Types}get type(){return this.#Es.type}async setType(e){await this.#Es.setType(e)}static get InsoleSides(){return pe.InsoleSides}get isInsole(){return this.#Es.isInsole}get insoleSide(){return this.#Es.insoleSide}get mtu(){return this.#Es.mtu}static get SensorTypes(){return re.Types}static get ContinuousSensorTypes(){return re.ContinuousTypes}get sensorTypes(){return Object.keys(this.sensorConfiguration)}get continuousSensorTypes(){return this.sensorTypes.filter((e=>at.ContinuousSensorTypes.includes(e)))}#Cs=new ce;get sensorConfiguration(){return this.#Cs.configuration}static get MaxSensorRate(){return ce.MaxSensorRate}static get SensorRateStep(){return ce.SensorRateStep}async setSensorConfiguration(e){await this.#Cs.setConfiguration(e)}async clearSensorConfiguration(){return this.#Cs.clearSensorConfiguration()}static#Xs=!0;static get ClearSensorConfigurationOnLeave(){return this.#Xs}static set ClearSensorConfigurationOnLeave(e){it.assertTypeWithError(e,"boolean"),this.#Xs=e}#Ys=at.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Ys}set clearSensorConfigurationOnLeave(e){it.assertTypeWithError(e,"boolean"),this.#Ys=e}static#en=8;static get DefaultNumberOfPressureSensors(){return this.#en}get numberOfPressureSensors(){return this.#Ds.pressureSensorDataManager.numberOfSensors}#Ds=new re;resetPressureRange(){this.#Ds.pressureSensorDataManager.resetRange()}#Is=new ve;static get VibrationLocations(){return ve.Locations}static get VibrationTypes(){return ve.Types}static get VibrationWaveformEffects(){return ve.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return ve.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return ve.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return ve.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return ve.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return ve.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return ve.MaxNumberOfWaveformSegments}async triggerVibration(e,t){this.#Is.triggerVibration(e,t)}#Ls=new q;static get FileTypes(){return q.Types}get maxFileLength(){return this.#Ls.maxLength}async sendFile(e,t){const s=this.waitForEvent("fileTransferComplete");this.#Ls.send(e,t),await s}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#Ls.receive(e),await t}get fileTransferStatus(){return this.#Ls.status}cancelFileTransfer(){this.#Ls.cancel()}static get TfliteSensorTypes(){return ge.SensorTypes}#ks=new ge;get tfliteName(){return this.#ks.name}setTfliteName(e){return this.#ks.setName(e)}static get TfliteTasks(){return ge.Tasks}get tfliteTask(){return this.#ks.task}setTfliteTask(e){return this.#ks.setTask(e)}get tfliteSampleRate(){return this.#ks.sampleRate}setTfliteSampleRate(e){return this.#ks.setSampleRate(e)}get tfliteSensorTypes(){return this.#ks.sensorTypes}get allowedTfliteSensorTypes(){return this.sensorTypes.filter((e=>ge.SensorTypes.includes(e)))}setTfliteSensorTypes(e){return this.#ks.setSensorTypes(e)}get tfliteIsReady(){return this.#ks.isReady}get tfliteInferencingEnabled(){return this.#ks.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#ks.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#ks.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#ks.captureDelay}async setTfliteCaptureDelay(e){return this.#ks.setCaptureDelay(e)}get tfliteThreshold(){return this.#ks.threshold}async setTfliteThreshold(e){return this.#ks.setThreshold(e)}#Ws=new nt;#xs(e){this.#bs.sendSmpMessage(e)}async uploadFirmware(e){return this.#Ws.uploadFirmware(e)}async reset(){return await this.#Ws.reset(),this.#bs.disconnect()}get firmwareStatus(){return this.#Ws.status}async getFirmwareImages(){return this.#Ws.getImages()}get firmwareImages(){return this.#Ws.images}async eraseFirmwareImage(){return this.#Ws.eraseImage()}async confirmFirmwareImage(e){return this.#Ws.confirmImage(e)}async testFirmwareImage(e){return this.#Ws.testImage(e)}static#tn=[];static get ConnectedDevices(){return this.#tn}static#Rs=!1;static get UseLocalStorage(){return this.#Rs}static set UseLocalStorage(e){this.#sn(),it.assertTypeWithError(e,"boolean"),this.#Rs=e,this.#Rs&&!this.#nn&&this.#in()}static#an={devices:[]};static#nn;static get CanUseLocalStorage(){return t&&window.localStorage}static#sn(){it.assertWithError(t,"localStorage is only available in the browser"),it.assertWithError(window.localStorage,"localStorage not found")}static#rn="BS.Device";static#on(){this.#sn(),localStorage.setItem(this.#rn,JSON.stringify(this.#nn))}static async#in(){this.#sn();let e=localStorage.getItem(this.#rn);if("string"!=typeof e)return it.log("no info found in localStorage"),this.#nn=Object.assign({},this.#an),void this.#on();try{const t=JSON.parse(e);it.log({configuration:t}),this.#nn=t,this.CanGetDevices&&await this.GetDevices()}catch(e){it.error(e)}}static#Us(e){if("webBluetooth"!=e.connectionType)return void it.log("localStorage is only for webBluetooth devices");this.#sn();const t=this.#nn.devices.findIndex((t=>t.bluetoothId==e.bluetoothId));-1!=t&&(this.#nn.devices[t].type=e.type,this.#on())}static#Gs=[];static get AvailableDevices(){return this.#Gs}static get CanGetDevices(){return t&&navigator.bluetooth?.getDevices&&!a}static async GetDevices(){if(!t)return void it.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void it.warn("bluetooth is not available in this browser");if(a)return void it.warn("bluefy lists too many devices...");if(!navigator.bluetooth.getDevices)return void it.warn("bluetooth.getDevices() is not available in this browser");this.#nn||this.#in();const e=this.#nn;if(!e.devices||0==e.devices.length)return void it.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return it.log({bluetoothDevices:s}),s.forEach((t=>{if(!t.gatt)return;let s=e.devices.find((e=>t.id==e.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.bluetoothId==t.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.bluetoothId==t.id));if(i)return void(n?.bluetoothId==i.bluetoothId&&n!=i&&(this.AvailableDevices[this.#Gs.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const a=new at,r=new _e;r.device=t,t.name&&a.#Es.updateName(t.name),a.#Es.updateType(s.type),a.connectionManager=r,this.AvailableDevices.push(a)})),this.#Qs(),this.AvailableDevices}static#cn=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices","connectedDevices"];static get StaticEventTypes(){return this.#cn}static#hn=new D(this,this.#cn);static AddEventListener(e,t,s){this.#hn.addEventListener(e,t,s)}static#gn(e){this.#hn.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#hn.removeEventListener(e,t)}static#Fs(e){if(e.isConnected)if(this.#tn.includes(e))it.log("device already included");else{if(it.log("adding device",e),this.#tn.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.bluetoothId},s=this.#nn.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#nn.devices.push(t):this.#nn.devices[s]=t,this.#on()}this.#gn({type:"deviceConnected",message:{device:e}}),this.#gn({type:"deviceIsConnected",message:{device:e}}),this.#ln()}else this.#tn.includes(e)?(it.log("removing device",e),this.#tn.splice(this.#tn.indexOf(e),1),this.#gn({type:"deviceDisconnected",message:{device:e}}),this.#gn({type:"deviceIsConnected",message:{device:e}}),this.#ln()):it.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.bluetoothId==e.bluetoothId));it.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#Qs()}}static#Qs(){it.log({AvailableDevices:this.AvailableDevices}),this.#gn({type:"availableDevices",message:{devices:this.AvailableDevices}})}static#ln(){it.log({ConnectedDevices:this.ConnectedDevices}),this.#gn({type:"connectedDevices",message:{devices:this.ConnectedDevices}})}static async Connect(){const e=new at;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const rt=T("DevicePairPressureSensorDataManager",{log:!0});class ot{static get Sides(){return at.InsoleSides}get sides(){return at.InsoleSides}#un={};#J=new J;resetPressureRange(){this.#J.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(rt.log({pressure:t,insoleSide:s}),this.#un[s]=t,this.#dn)return this.#pn();rt.log("doesn't have all pressure data yet...")}get#dn(){return this.sides.every((e=>e in this.#un))}#pn(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#un[t].rawSum,e.normalizedSum+=this.#un[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#un[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#J.updateAndGetNormalization(e.center)),rt.log({devicePairPressure:e}),e}}const ct=T("DevicePairSensorDataManager",{log:!0});class ht{static get Sides(){return at.InsoleSides}get sides(){return at.InsoleSides}#fn={};pressureSensorDataManager=new ot;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(ct.log({sensorType:s,timestamp:t,event:e}),this.#fn[s]||(this.#fn[s]={}),this.#fn[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else ct.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#fn[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else ct.log("no value received")}onDataReceived}const gt=T("DevicePair",{log:!0});class lt{constructor(){this.#Ds.onDataReceived=this.#mn.bind(this)}static#l=["isConnected","pressure",...at.EventTypes.map((e=>`device${M(e)}`))];static get EventTypes(){return this.#l}get eventTypes(){return lt.#l}#ws=new D(this,this.eventTypes);addEventListener(e,t,s){this.#ws.addEventListener(e,t,s)}#u(e){this.#ws.dispatchEvent(e)}removeEventListener(e,t){return this.#ws.removeEventListener(e,t)}static get Sides(){return at.InsoleSides}get sides(){return lt.Sides}#vn;get left(){return this.#vn}#yn;get right(){return this.#yn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#Pt(){gt.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void gt.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&k(s,this.#Sn),I(e,this.#Sn),t){case"left":this.#vn=e;break;case"right":this.#yn=e}return gt.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#u({type:"isConnected",message:{isConnected:this.isConnected}}),this.#u({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}gt.log("device already assigned")}#Sn={connectionStatus:this.#bn.bind(this),isConnected:this.#Tn.bind(this),sensorData:this.#wn.bind(this),getSensorConfiguration:this.#bn.bind(this)};#bn(e){this.#u({type:`device${M(e.type)}`,message:{...e.message,device:e.target}})}#Tn(e){this.#bn(e),this.#u({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#Ds=new ht;#wn(e){this.#bn(e),this.#u({type:`device${M(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Ds.onDeviceSensorData(e)}#mn(e,t){gt.log({sensorType:e,sensorData:t}),this.#u({type:e,message:t})}resetPressureRange(){this.#Ds.resetPressureRange()}async triggerVibration(e,t){const s=this.sides.map((s=>this[s]?.triggerVibration(e,t))).filter(Boolean);return Promise.allSettled(s)}static#En=new lt;static get shared(){return this.#En}static{at.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#En.assignInsole(t)}))}}const ut=T("ServerUtils",{log:!1});function dt(e,...t){ut.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=$(...t.data),n=s.byteLength;ut.assertEnumWithError(t.type,e);return $(e.indexOf(t.type),Uint16Array.from([n]),s)}));return ut.log("messageBuffers",...s),$(...s)}const pt=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function ft(...e){return dt(pt,...e)}function mt(...e){return dt(Se.MessageTypes,...e)}ft("ping"),ft("pong"),ft("isScanningAvailable"),ft("isScanning"),ft("startScan"),ft("stopScan");const vt=ft("discoveredDevices"),yt=T("WebSocketClientConnectionManager",{log:!0});class St extends Se{static get isSupported(){return t}static get type(){return"webSocketClient"}#Mn;get bluetoothId(){return this.#Mn}set bluetoothId(e){yt.assertTypeWithError(e,"string"),this.#Mn!=e?this.#Mn=e:yt.log("redundant bluetoothId assignment")}#$s=!1;get isConnected(){return this.#$s}set isConnected(e){yt.assertTypeWithError(e,"boolean"),this.#$s!=e?(this.#$s=e,this.status=this.#$s?"connected":"not connected",this.isConnected&&this.#Cn()):yt.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}get canReconnect(){return!0}async reconnect(){await super.reconnect(),yt.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;async sendSmpMessage(e){super.sendSmpMessage(...arguments),this.sendWebSocketMessage({type:"smp",data:e})}async sendTxData(e){super.sendTxData(...arguments),this.sendWebSocketMessage({type:"tx",data:e})}static#Dn=[...ue.MessageTypes,"batteryLevel"];get#In(){return St.#Dn}#Cn(){this.sendWebSocketMessage(...this.#In)}onWebSocketMessage(e){yt.log({dataView:e}),ie(e,at.EventTypes,this.#kn.bind(this),null,!0)}#kn(e,t){let s=0;switch(e){case"isConnected":const n=Boolean(t.getUint8(s++));yt.log({isConnected:n}),this.isConnected=n;break;case"rx":this.parseRxMessage(t);break;default:this.onMessageReceived(e,t)}}}const bt=T("WebSocketClient",{log:!0});class Tt{static#l=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#l}get eventTypes(){return Tt.#l}#ws=new D(this,this.eventTypes);addEventListener(e,t,s){this.#ws.addEventListener(e,t,s)}#u(e){this.#ws.dispatchEvent(e)}removeEventListener(e,t){return this.#ws.removeEventListener(e,t)}#Ln;get webSocket(){return this.#Ln}set webSocket(e){this.#Ln!=e?(bt.log("assigning webSocket",e),this.#Ln&&k(this.#Ln,this.#Wn),I(e,this.#Wn),this.#Ln=e,bt.log("assigned webSocket")):bt.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#xn(){bt.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Rn(){bt.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#Rn(),this.#Un="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#xn(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Un="disconnecting",this.webSocket.close()}reconnect(){this.#Rn(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#qs=!0;static get ReconnectOnDisconnection(){return this.#qs}static set ReconnectOnDisconnection(e){bt.assertTypeWithError(e,"boolean"),this.#qs=e}#js=Tt.#qs;get reconnectOnDisconnection(){return this.#js}set reconnectOnDisconnection(e){bt.assertTypeWithError(e,"boolean"),this.#js=e}#Fn(e){this.#xn(),this.#Ln.send(e)}#_n(...e){this.#Fn(ft(...e))}#Wn={open:this.#An.bind(this),message:this.#On.bind(this),close:this.#Nn.bind(this),error:this.#$n.bind(this)};#An(e){bt.log("webSocket.open",e),this.#Vn.start(),this.#Un="connected"}async#On(e){bt.log("webSocket.message",e),this.#Vn.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Bn(s)}#Nn(e){bt.log("webSocket.close",e),this.#Un="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#Vn.stop(),this.#js&&setTimeout((()=>{this.reconnect()}),3e3)}#$n(e){bt.log("webSocket.error",e)}#Pn="not connected";get#Un(){return this.#Pn}set#Un(e){switch(bt.assertTypeWithError(e,"string"),bt.log({newConnectionStatus:e}),this.#Pn=e,this.#u({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#u({type:this.connectionStatus}),e){case"connected":case"not connected":this.#u({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#_n("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#zn=!1,this.#qn=!1)}}get connectionStatus(){return this.#Un}#Bn(e){bt.log("parseMessage",{dataView:e}),ie(e,pt,this.#jn.bind(this),null,!0)}#jn(e,t){let s=0;switch(e){case"ping":this.#Hn();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(s++));bt.log({isScanningAvailable:e}),this.#zn=e}break;case"isScanning":{const e=Boolean(t.getUint8(s++));bt.log({isScanning:e}),this.#qn=e}break;case"discoveredDevice":{const{string:e}=ne(t,s);bt.log({discoveredDeviceString:e});const n=JSON.parse(e);bt.log({discoveredDevice:n}),this.#Gn(n)}break;case"expiredDiscoveredDevice":{const{string:e}=ne(t,s);this.#Qn(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=ne(t,s);bt.log({connectedBluetoothDeviceIdStrings:e});const n=JSON.parse(e);bt.log({connectedBluetoothDeviceIds:n}),this.#Jn(n)}break;case"deviceMessage":{const{string:e,byteOffset:n}=ne(t,s);s=n;const i=this.#Zn[e];bt.assertWithError(i,`no device found for id ${e}`);const a=i.connectionManager,r=B(t,s);a.onWebSocketMessage(r)}break;default:bt.error(`uncaught messageType "${e}"`)}}#Vn=new W(this.#Kn.bind(this),3e7);#Kn(){this.#_n("ping")}#Hn(){this.#_n("pong")}#Xn=!1;get#zn(){return this.#Xn}set#zn(e){bt.assertTypeWithError(e,"boolean"),this.#Xn=e,this.#u({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Yn()}get isScanningAvailable(){return this.#zn}#ei(){this.#xn(),bt.assertWithError(this.isScanningAvailable,"scanning is not available")}#ti(){this.#_n("isScanningAvailable")}#si=!1;get#qn(){return this.#si}set#qn(e){bt.assertTypeWithError(e,"boolean"),this.#si=e,this.#u({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#qn}#Yn(){this.#_n("isScanning")}#ni(){bt.assertWithError(this.isScanning,"is not scanning")}#ii(){bt.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#ii(),this.#_n("startScan")}stopScan(){this.#ni(),this.#_n("stopScan")}toggleScan(){this.#ei(),this.isScanning?this.stopScan():this.startScan()}#ai={};get discoveredDevices(){return this.#ai}#Gn(e){bt.log({discoveredDevice:e}),this.#ai[e.bluetoothId]=e,this.#u({type:"discoveredDevice",message:{discoveredDevice:e}})}#ri(){this.#Fn(vt)}#Qn(e){bt.log({expiredBluetoothDeviceId:e});const t=this.#ai[e];t?(bt.log({expiredDiscoveredDevice:t}),delete this.#ai[e],this.#u({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):bt.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#oi(e)}#oi(e){this.#xn(),bt.assertTypeWithError(e,"string");const t=this.#ci(e);return t.connect(),t}#hi(e){this.#Fn(this.#gi(e))}#gi(e){return ft({type:"connectToDevice",data:e})}#li(e){const t=new at,s=new St;return s.bluetoothId=e,s.sendWebSocketMessage=this.#ui.bind(this,e),s.sendWebSocketConnectMessage=this.#hi.bind(this,e),s.sendWebSocketDisconnectMessage=this.#di.bind(this,e),t.connectionManager=s,t}#ci(e){let t=this.#Zn[e];return t||(t=this.#li(e),this.#Zn[e]=t),t}#Jn(e){bt.log({bluetoothIds:e}),e.forEach((e=>{this.#ci(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#pi(e)}#pi(e){this.#xn(),bt.assertTypeWithError(e,"string");const t=this.devices[e];return bt.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#di(e){this.#Fn(this.#fi(e))}#fi(e){return ft({type:"disconnectFromDevice",data:e})}#ui(e,...t){this.#Fn(this.#mi(e,...t))}#mi(e,...t){return ft({type:"deviceMessage",data:[e,mt(...t)]})}#Zn={};get devices(){return this.#Zn}}export{at as Device,lt as DevicePair,d as Environment,Tt as WebSocketClient,E as setAllConsoleLevelFlags,w as setConsoleLevelFlagsForType};
