/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new h(e)}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function l(e,t){return h.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=l("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const m=l("ConnectionManager");class f{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorData","triggerVibration"];static get MessageTypes(){return this.#o}get id(){this.#c("id")}onStatusUpdated;onMessageReceived;static#h(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#c(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#h("type")}get type(){return this.constructor.type}#l(){m.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){m.assertWithError(this.constructor!=f,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#l()}#d="not connected";get status(){return this.#d}set status(e){m.assertTypeWithError(e,"string"),this.#d!=e?(m.log(`new connection status "${e}"`),this.#d=e,this.onStatusUpdated?.(this.status)):m.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#u(){m.assertWithError(!this.isConnected,"device is already connected")}#v(){m.assertWithError("connecting"!=this.status,"device is already connecting")}#p(){m.assertWithError(this.isConnected,"device is not connected")}#m(){m.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#f(){this.#p(),this.#m()}async connect(){this.#u(),this.#v(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#u(),this.#v(),m.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#p(),this.#m(),this.status="disconnecting",m.log("disconnecting from device...")}async sendMessage(e,t){this.#f(),m.log("sending message",{messageType:e,data:t})}}if(t){var S=require("webbluetooth").BluetoothUUID}if(e)S=window.BluetoothUUID;function b(e){return`ea6da725-2000-4f9b-893d-c3913e33b3e${e}`}function y(e){return S?.getCharacteristic?.(e)}function D(e){return S?.getService?.(e)}const C=Object.freeze({services:{deviceInformation:{uuid:D("device_information"),characteristics:{manufacturerName:{uuid:y("manufacturer_name_string")},modelNumber:{uuid:y("model_number_string")},hardwareRevision:{uuid:y("hardware_revision_string")},firmwareRevision:{uuid:y("firmware_revision_string")},softwareRevision:{uuid:y("software_revision_string")},pnpId:{uuid:y("pnp_id")},serialNumber:{uuid:y("serial_number_string")}}},battery:{uuid:D("battery_service"),characteristics:{batteryLevel:{uuid:y("battery_level")}}},main:{uuid:b(0),characteristics:{name:{uuid:b(1)},type:{uuid:b(2)},sensorConfiguration:{uuid:b(3)},sensorData:{uuid:b(4)},vibration:{uuid:b(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),E=C.serviceUUIDs,w=C.optionalServiceUUIDs,M=[...E,...w];function T(e){return C.getServiceNameFromUUID(e)}const L=[],W=[],N=[];function k(e){return C.getCharacteristicNameFromUUID(e)}function R(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":t.read=!1}switch(e){case"batteryLevel":case"sensorData":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(C.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{E.includes(t.uuid)&&L.push(s.uuid),W.push(s.uuid),N.push(e)}))}),[]);const I=l("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var x={bluetooth:t}}if(e)x=window.navigator;class A extends f{get id(){return this.device?.id}#S={characteristicvaluechanged:this.#b.bind(this)};#y={gattserverdisconnected:this.#D.bind(this)};static get isSupported(){return"bluetooth"in x}static get type(){return"webBluetooth"}#C;get device(){return this.#C}set device(e){this.#C!=e?(this.#C&&p(this.#C,this.#y),e&&v(e,this.#y),this.#C=e):I.log("tried to assign the same BluetoothDevice")}get server(){return this.#C?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const t=await x.bluetooth.requestDevice({filters:[{services:E}],optionalServices:e?w:[]});I.log("got BluetoothDevice"),this.device=t,I.log("connecting to device...");const s=await this.device.gatt.connect();I.log(`connected to device? ${s.connected}`),await this.#M(),I.log("fully connected"),this.status="connected"}catch(e){I.error(e),this.status="not connected",this.server?.disconnect(),this.#T()}}async#M(){this.#T(),I.log("getting services...");const e=await this.server.getPrimaryServices();I.log("got services",e.length),I.log("getting characteristics...");for(const t in e){const i=e[t];I.log({service:i});const r=T(i.uuid);if(I.assertWithError(r,`no name found for service uuid "${i.uuid}"`),I.log(`got "${r}" service`),"dfu"==r){I.log("skipping dfu service");continue}i._name=r,this.#E.set(r,i),I.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();I.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];I.log({characteristic:t});const i=k(t.uuid);I.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),I.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#w.set(i,t),v(t,this.#S);const o=t.properties||R(i);o.read&&(I.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#L(t)),o.notify&&(I.log(`starting notifications for "${i}" characteristic`),await t.startNotifications())}}}#T(){this.device&&p(this.device,this.#y),this.#w.forEach((e=>{p(e,this.#S)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#T(),this.status="not connected"}#b(e){I.log("oncharacteristicvaluechanged");const t=e.target;this.#L(t)}#L(e){I.log("onCharacteristicValue");const t=e._name;I.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),I.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;switch(I.assertWithError(s,`no data found for "${t}" characteristic`),I.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),t){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${t}"`)}}#D(e){I.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let i,r;switch(await super.sendMessage(...arguments),e){case"setName":i="name";break;case"setType":i="type";break;case"setSensorConfiguration":i="sensorConfiguration";break;case"triggerVibration":i="vibration";break;default:throw Error(`uncaught messageType "${e}"`)}if(!i)return void I.log("no characteristicName found");r=this.#w.get(i),I.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||R(i);a.read&&!a.notify&&(await r.readValue(),(s||n)&&this.#L(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),I.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(I.log("successfully reconnected!"),await this.#M(),this.status="connected"):(I.log("unable to reconnect"),this.status="not connected")}}const O=l("ArrayBufferUtils",{log:!1}),P=new TextEncoder;function $(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return _(e)}if(e instanceof Array){return $(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return _(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function U(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function _(e){const t=P.encode(e);return $(t.byteLength,t)}function V(e,t,s){let n;return s&&(n=e.byteOffset+t+s),O.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const z=l("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class B extends f{get id(){return this.#W?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#W?.state}async connect(){await super.connect(),await this.#W.connectAsync()}async disconnect(){await super.disconnect(),await this.#W.disconnectAsync()}async sendMessage(e,t){let s,n;switch(await super.sendMessage(...arguments),e){case"setName":s="name";break;case"setType":s="type";break;case"setSensorConfiguration":s="sensorConfiguration";break;case"triggerVibration":s="vibration";break;default:throw Error(`uncaught messageType "${e}"`)}if(z.log("characteristicName",s),!s)return void z.log("no characteristicName found");n=this.#w.get(s),z.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);z.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#W.connectable}async reconnect(){await super.reconnect(),z.log("attempting to reconnect..."),this.connect()}#W;get noblePeripheral(){return this.#W}set noblePeripheral(e){z.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(z.log("newNoblePeripheral",e.id),this.#W&&(p(this.#W,this.#N),delete this.#W._connectionManager),e&&(e._connectionManager=this,v(e,this.#N)),this.#W=e):z.log("attempted to assign duplicate noblePeripheral")}#N={connect:this.#k,disconnect:this.#R,rssiUpdate:this.#I,servicesDiscover:this.#x};async#k(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){z.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#W.discoverServicesAsync(M),await this.#A()}async#R(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){z.log("onNoblePeripheralDisconnect",e.id),await this.#A()}async#A(){switch(z.log(`noblePeripheral ${this.id} state ${this.#W.state}`),this.#W.state){case"connected":case"connecting":break;case"disconnected":this.#T(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":z.error("noblePeripheral error");break;default:z.log(`uncaught noblePeripheral state ${this.#W.state}`)}}#T(){z.log("removing noblePeripheral eventListeners"),this.#E.forEach((e=>{p(e,this.#O)})),this.#E.clear(),this.#w.forEach((e=>{p(e,this.#P)})),this.#w.clear()}async#I(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){z.log("onNoblePeripheralRssiUpdate",e.id,t)}async#x(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){z.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];z.log("service",s.uuid);const n=T(s.uuid);z.assertWithError(n,`no name found for service uuid "${s.uuid}"`),z.log({serviceName:n}),this.#E.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#O),await s.discoverCharacteristicsAsync()}}#E=new Map;#O={characteristicsDiscover:this.#$};async#$(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){z.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];z.log("characteristic",s.uuid);const n=k(s.uuid);z.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),z.log({characteristicName:n}),this.#w.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#P),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#U&&(this.status="connected")}#P={data:this.#_,write:this.#V,notify:this.#z};#w=new Map;get#U(){return N.every((e=>this.#w.has(e)))}#_(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){z.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(U(t)),i=e._name;switch(z.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),i){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${i}"`)}}#V(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){z.log("onNobleCharacteristicWrite",e.uuid)}#z(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){z.log("onNobleCharacteristicNotify",e.uuid,t)}}const F={min:1/0,max:-1/0};class q{#B=Object.assign({},F);reset(){Object.assign(this.#B,F)}update(e){this.#B.min=Math.min(e,this.#B.min),this.#B.max=Math.max(e,this.#B.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#B.min,this.#B.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class j{#B={x:new q,y:new q};reset(){this.#B.x.reset(),this.#B.y.reset()}update(e){this.#B.x.update(e.x),this.#B.y.update(e.y)}getNormalization(e){return{x:this.#B.x.getNormalization(e.x),y:this.#B.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const H=l("PressureSensorDataManager",{log:!0});class G{#F;get deviceType(){return this.#F}set deviceType(e){H.assertTypeWithError(e,"string"),this.#F!=e?(H.log({newDeviceType:e}),this.#F=e,this.#q(),this.resetRange()):H.log(`redundant deviceType assignment "${e}"`)}static#j=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#j}get names(){return G.Names}static#H={pressure:2**-16};static get Scalars(){return this.#H}get scalars(){return G.Scalars}static#G=8;static get NumberOfPressureSensors(){return this.#G}get numberOfPressureSensors(){return G.NumberOfPressureSensors}static#J=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#J}#Q;get pressureSensorPositions(){return this.#Q}#q(){const e=G.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));H.log({pressureSensorPositions:e}),this.#Q=e}#Z=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new q));#K=new j;resetRange(){this.#Z.forEach((e=>e.reset())),this.#K.reset()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const i=e.getUint16(t,!0),r=this.#Z[n].updateAndGetNormalization(i),a=this.pressureSensorPositions[n],o=this.names[n];s.sensors[n]={rawValue:i,normalizedValue:r,position:a,name:o},s.rawSum+=i,s.normalizedSum+=r/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#K.updateAndGetNormalization(s.center)),H.log({pressure:s}),s}}const J=l("MotionSensorDataManager",{log:!1});class Q{#F;get deviceType(){return this.#F}set deviceType(e){J.assertTypeWithError(e,"string"),this.#F!=e?(J.log({newDeviceType:e}),this.#F=e):J.log(`redundant deviceType assignment "${e}"`)}static#H={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#H}get scalars(){return Q.Scalars}static#X=6;static get Vector3Size(){return this.#X}get vector3Size(){return Q.Vector3Size}parseVector3(e,t,s){let[n,i,r]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:i,z:r};return J.log({vector:a}),a}static#Y=8;static get QuaternionSize(){return this.#Y}get quaternionSize(){return Q.QuaternionSize}parseQuaternion(e,t,s){let[n,i,r,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:i,z:r,w:a};return J.log({quaternion:o}),o}}l("BarometerSensorDataManager",{log:!0});class Z{static#H={barometer:.78125};static get Scalars(){return this.#H}get scalars(){return Z.Scalars}}const K=l("ParseUtils",{log:!0}),X=new TextDecoder;function Y(e,t=0){const s=e.getUint8(t++);return{string:X.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function ee(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),K.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),K.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=V(e,i,o);K.log({_dataView:c}),s(a,c),i+=o}}const te=l("SensorDataManager",{log:!1});class se{#F;get deviceType(){return this.#F}set deviceType(e){te.assertTypeWithError(e,"string"),this.#F!=e?(te.log({newDeviceType:e}),this.#F=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):te.log(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new G;motionSensorDataManager=new Q;barometerSensorDataManager=new Z;static#ee=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#ee}get#te(){return se.Types}static AssertValidSensorType(e){te.assertTypeWithError(e,"string"),te.assertWithError(this.#ee.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){te.assertTypeWithError(e,"number"),te.assertWithError(e in this.#ee,`invalid sensorTypeEnum ${e}`)}onDataReceived;#se=0;#ne=0;clearTimestamp(){te.log("clearing sensorDataManager timestamp data"),this.#se=0,this.#ne=0}#ie(e,t){const s=e.getUint16(t,!0);s<this.#ne&&(this.#se+=65536),this.#ne=s;return s+this.#se}parse(e){te.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#ie(e,t);t+=2;ee(new DataView(e.buffer,t),se.Types,((e,t)=>{const n=e;let i;switch(n){case"pressure":i=this.pressureSensorDataManager.parsePressure(t,0);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(t,0,n);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(t,0,n);break;case"barometer":break;default:te.error(`uncaught sensorType "${n}"`)}te.assertWithError(i,`no value defined for sensorType "${n}"`),this.onDataReceived?.(n,{timestamp:s,[n]:i})}))}static get NumberOfPressureSensors(){return G.NumberOfPressureSensors}get numberOfPressureSensors(){return se.NumberOfPressureSensors}static get PressureSensorNames(){return G.Names}get pressureSensorNames(){return se.PressureSensorNames}}const ne=l("SensorConfigurationManager",{log:!1});class ie{#F;get deviceType(){return this.#F}set deviceType(e){ne.assertTypeWithError(e,"string"),this.#F!=e?(ne.log({newDeviceType:e}),this.#F=e):ne.log(`redundant deviceType assignment "${e}"`)}#re;#ae(e){ne.assertWithError(this.#re,"must get initial sensorConfiguration");const t=this.#re?.includes(e);return ne.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=se.Types[n];if(!i){ne.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);ne.log({sensorType:i,sensorRate:r}),t[i]=r}return ne.log({parsedSensorConfiguration:t}),this.#re=Object.keys(t),t}static#oe=65535;static get MaxSensorRate(){return this.#oe}get maxSensorRate(){return ie.MaxSensorRate}static#ce=5;static get SensorRateStep(){return this.#ce}get sensorRateStep(){return ie.SensorRateStep}static#he(e){ne.assertTypeWithError(e,"number"),ne.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),ne.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),ne.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#le(e){ie.#he(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#ae(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{se.AssertValidSensorType(t);const i=se.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#le(r),s.setUint16(3*n+1,e[t],!0)})),ne.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const re=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ae=l("VibrationManager");class oe{static#ge=["front","rear"];static get Locations(){return this.#ge}get locations(){return oe.Locations}#de(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ue(e){this.#ve(e),e.forEach((e=>{this.#de(e)}))}#pe(e){this.#ue(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ae.log({locationsBitmask:t}),ae.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ve(e){ae.assertWithError(Array.isArray(e),"passed non-array"),ae.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return re}get waveformEffects(){return oe.WaveformEffects}#me(e){ae.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#fe=1270;static get MaxWaveformEffectSegmentDelay(){return this.#fe}get maxWaveformEffectSegmentDelay(){return oe.MaxWaveformEffectSegmentDelay}#Se(e){if(null!=e.effect){const t=e.effect;this.#me(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ae.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ae.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#be(t)}}static#ye=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#ye}get maxWaveformEffectSegmentLoopCount(){return oe.MaxWaveformEffectSegmentLoopCount}#be(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#De=8;static get MaxNumberOfWaveformEffectSegments(){return this.#De}get maxNumberOfWaveformEffectSegments(){return oe.MaxNumberOfWaveformEffectSegments}#Ce(e){this.#ve(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Se(e)}))}static#Ee=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Ee}get maxWaveformEffectSequenceLoopCount(){return oe.MaxWaveformEffectSequenceLoopCount}#we(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Me=2550;static get MaxWaveformSegmentDuration(){return this.#Me}get maxWaveformSegmentDuration(){return oe.MaxWaveformSegmentDuration}#Te(e){ae.assertTypeWithError(e.amplitude,"number"),ae.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ae.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ae.assertTypeWithError(e.duration,"number"),ae.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ae.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Le=20;static get MaxNumberOfWaveformSegments(){return this.#Le}get maxNumberOfWaveformSegments(){return oe.MaxNumberOfWaveformSegments}#We(e){this.#ve(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Te(e)}))}createWaveformEffectsData(e,t,s=0){this.#Ce(t),this.#we(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ae.log({dataArray:n,dataView:o}),this.#Ne(e,"waveformEffect",o)}createWaveformData(e,t){this.#We(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ae.log({dataView:s}),this.#Ne(e,"waveform",s)}static#ee=["waveformEffect","waveform"];static get Types(){return this.#ee}get#te(){return oe.Types}#ke(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.#te.includes(e),`invalid vibrationType "${e}"`)}#Ne(e,t,s){ae.assertWithError(s?.byteLength>0,"no data received");const n=this.#pe(e);this.#ke(t);const i=this.#te.indexOf(t);ae.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=$(n,i,s.byteLength,s);return ae.log({data:r}),r}}const ce=l("Device",{log:!0});class he{get id(){return this.#Re?.id}constructor(){this.#Ie.onDataReceived=this.#xe.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{he.#Ae(this)}))}static get#Oe(){return A}static#Pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage"];static get EventTypes(){return this.#Pe}get eventTypes(){return he.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}#Ue(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}#Re;get connectionManager(){return this.#Re}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#_e.bind(this),e.onMessageReceived=this.#Ve.bind(this)),this.#Re=e,ce.log("assigned new connectionManager",this.#Re)):ce.log("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new he.#Oe),this.#ze(),this.connectionManager.connect()}#Be=!1;get isConnected(){return this.#Be}#p(){ce.assertWithError(this.isConnected,"not connected")}static#Fe=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration"];static get AllInformationConnectionMessages(){return this.#Fe}get#qe(){return he.#Fe}get#je(){return this.#qe.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#ze(),this.connectionManager?.reconnect()}static#He=!1;static get ReconnectOnDisconnection(){return this.#He}static set ReconnectOnDisconnection(e){ce.assertTypeWithError(e,"boolean"),this.#He=e}#Ge=he.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Ge}set reconnectOnDisconnection(e){ce.assertTypeWithError(e,"boolean"),this.#Ge=e}#Je;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#p(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#Re?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#Re.status;default:return"not connected"}}#_e(e){ce.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(ce.log("starting reconnect interval..."),this.#Je=setInterval((()=>{ce.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Je&&(ce.log("clearing reconnect interval"),clearInterval(this.#Je),this.#Je=void 0),this.#Qe()}#Ze(e=!1){this.#Ue({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Ue({type:this.connectionStatus}),e&&this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}})}#Qe(){switch(this.#Be=this.connectionManager?.isConnected&&this.#je,this.connectionStatus){case"connected":this.#Be&&this.#Ze(!0);break;case"not connected":this.#Ze(!0);break;default:this.#Ze(!1)}}#ze(){this.latestConnectionMessage.clear()}#Ve(e,t){switch(ce.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Ke.decode(t);ce.log({manufacturerName:s}),this.#Xe({manufacturerName:s});break;case"modelNumber":const n=this.#Ke.decode(t);ce.log({modelNumber:n}),this.#Xe({modelNumber:n});break;case"softwareRevision":const i=this.#Ke.decode(t);ce.log({softwareRevision:i}),this.#Xe({softwareRevision:i});break;case"hardwareRevision":const r=this.#Ke.decode(t);ce.log({hardwareRevision:r}),this.#Xe({hardwareRevision:r});break;case"firmwareRevision":const a=this.#Ke.decode(t);ce.log({firmwareRevision:a}),this.#Xe({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),ce.log({pnpId:o}),this.#Xe({pnpId:o});break;case"serialNumber":const c=this.#Ke.decode(t);ce.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);ce.log("received battery level",{batteryLevel:h}),this.#Ye(h);break;case"getName":const l=this.#Ke.decode(t);ce.log({name:l}),this.#et(l);break;case"getType":const g=t.getUint8(0),d=this.#te[g];ce.log({typeEnum:g,type:d}),this.#tt(d);break;case"getSensorConfiguration":const u=this.#st.parse(t);ce.log({sensorConfiguration:u}),this.#nt(u);break;case"sensorData":this.#Ie.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}this.latestConnectionMessage.set(e,t),this.#Ue({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#je&&this.#Qe()}latestConnectionMessage=new Map;static#it=new TextEncoder;get#rt(){return he.#it}static#at=new TextDecoder;get#Ke(){return he.#at}#ot={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#ot}get#ct(){return Object.values(this.#ot).every((e=>null!=e))}#Xe(e){ce.log({partialDeviceInformation:e});for(const t in e)this.#Ue({type:t,message:{[t]:e[t]}});Object.assign(this.#ot,e),ce.log({deviceInformation:this.#ot}),this.#ct&&(ce.log("completed deviceInformation"),this.#Ue({type:"deviceInformation",message:{deviceInformation:this.#ot}}))}#ht=null;get batteryLevel(){return this.#ht}#Ye(e){ce.assertTypeWithError(e,"number"),this.#ht!=e?(this.#ht=e,ce.log({updatedBatteryLevel:this.#ht}),this.#Ue({type:"batteryLevel",message:{batteryLevel:this.#ht}})):ce.log(`duplicate batteryLevel assignment ${e}`)}#lt;get name(){return this.#lt}#et(e){ce.assertTypeWithError(e,"string"),this.#lt=e,ce.log({updatedName:this.#lt}),this.#Ue({type:"getName",message:{name:this.#lt}})}static get MinNameLength(){return 2}get minNameLength(){return he.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return he.MaxNameLength}async setName(e){this.#p(),ce.assertTypeWithError(e,"string"),ce.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ce.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#rt.encode(e);ce.log({setNameData:t}),await this.#Re.sendMessage("setName",t)}static#ee=["leftInsole","rightInsole"];static get Types(){return this.#ee}get#te(){return he.Types}#gt;get type(){return this.#gt}get typeEnum(){return he.Types.indexOf(this.type)}#dt(e){ce.assertEnumWithError(e,this.#te)}#ut(e){ce.assertTypeWithError(e,"number"),ce.assertWithError(this.#te[e],`invalid typeEnum ${e}`)}#tt(e){this.#dt(e),e!=this.type?(this.#gt=e,ce.log({updatedType:this.#gt}),this.#Ie.deviceType=this.#gt,this.#st.deviceType=this.#gt,this.#Ue({type:"getType",message:{type:this.#gt}}),he.#vt&&he.#pt(this)):ce.log("redundant type assignment")}async#mt(e){this.#ut(e);const t=Uint8Array.from([e]);ce.log({setTypeData:t}),await this.#Re.sendMessage("setType",t)}async setType(e){this.#p(),this.#dt(e);const t=this.#te.indexOf(e);this.#mt(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ft=["left","right"];static get InsoleSides(){return this.#ft}get insoleSides(){return he.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return se.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}static get PressureSensorNames(){return se.PressureSensorNames}get pressureSensorNames(){return he.PressureSensorNames}static get NumberOfPressureSensors(){return se.NumberOfPressureSensors}get numberOfPressureSensors(){return he.NumberOfPressureSensors}#st=new ie;#St;get sensorConfiguration(){return this.#St}get sensorConfigurationData(){return this.#st.createData(this.sensorConfiguration)}static get MaxSensorRate(){return ie.MaxSensorRate}static get SensorRateStep(){return ie.SensorRateStep}#nt(e){this.#St=e,ce.log({updatedSensorConfiguration:this.#St}),this.#st.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(ce.log("clearing sensorDataManager timestamp..."),this.#Ie.clearTimestamp()),this.#Ue({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#p(),ce.log({newSensorConfiguration:e});const t=this.#st.createData(e);ce.log({setSensorConfigurationData:t}),await this.#Re.sendMessage("setSensorConfiguration",t)}static#bt=!0;static get ClearSensorConfigurationOnLeave(){return this.#bt}static set ClearSensorConfigurationOnLeave(e){ce.assertTypeWithError(e,"boolean"),this.#bt=e}#yt=he.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#yt}set clearSensorConfigurationOnLeave(e){ce.assertTypeWithError(e,"boolean"),this.#yt=e}static#Dt={};static get ZeroSensorConfiguration(){return this.#Dt}static{this.SensorTypes.forEach((e=>{this.#Dt[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#Ie=new se;#xe(e,t){ce.log({sensorType:e,sensorData:t}),this.#Ue({type:e,message:t}),this.#Ue({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#Ie.pressureSensorDataManager.resetRange()}#Ct=new oe;static get VibrationLocations(){return oe.Locations}static get VibrationTypes(){return oe.Types}static get VibrationWaveformEffects(){return oe.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return oe.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return oe.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return oe.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return oe.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return oe.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return oe.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#Ct.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#Ct.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Ct.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}ce.log({type:s,dataView:n}),t=$(t,n)})),await this.#Re.sendMessage("triggerVibration",t)}static#Et=[];static get ConnectedDevices(){return this.#Et}static#vt=!1;static get UseLocalStorage(){return this.#vt}static set UseLocalStorage(e){this.#wt(),ce.assertTypeWithError(e,"boolean"),this.#vt=e,this.#vt&&!this.#Mt&&this.#Tt()}static#Lt={devices:[]};static#Mt;static get CanUseLocalStorage(){return e&&window.localStorage}static#wt(){ce.assertWithError(e,"localStorage is only available in the browser"),ce.assertWithError(window.localStorage,"localStorage not found")}static#Wt="BS.Device";static#Nt(){this.#wt(),localStorage.setItem(this.#Wt,JSON.stringify(this.#Mt))}static async#Tt(){this.#wt();let e=localStorage.getItem(this.#Wt);if("string"!=typeof e)return ce.log("no info found in localStorage"),this.#Mt=Object.assign({},this.#Lt),void this.#Nt();try{const t=JSON.parse(e);ce.log({configuration:t}),this.#Mt=t,this.CanGetDevices&&await this.GetDevices()}catch(e){ce.error(e)}}static#pt(e){if("webBluetooth"!=e.connectionType)return void ce.log("localStorage is only for webBluetooth devices");this.#wt();const t=this.#Mt.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#Mt.devices[t].type=e.type,this.#Nt())}static#kt=[];static get AvailableDevices(){return this.#kt}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void ce.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void ce.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void ce.warn("bluetooth.getDevices() is not available in this browser");this.#Mt||this.#Tt();const t=this.#Mt;if(!t.devices||0==t.devices.length)return void ce.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return ce.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#kt.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new he,a=new A;a.device=e,e.name&&r.#et(e.name),r.#tt(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#Rt(),this.AvailableDevices}static#It=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#It}static#xt=new u(this,this.#It);static AddEventListener(e,t,s){this.#xt.addEventListener(e,t,s)}static#At(e){this.#xt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#xt.removeEventListener(e,t)}static#Ae(e){if(e.isConnected)if(this.#Et.includes(e))ce.log("device already included");else{if(ce.log("adding device",e),this.#Et.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#Mt.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Mt.devices.push(t):this.#Mt.devices[s]=t,this.#Nt()}this.#At({type:"deviceConnected",message:{device:e}}),this.#At({type:"deviceIsConnected",message:{device:e}})}else this.#Et.includes(e)?(ce.log("removing device",e),this.#Et.splice(this.#Et.indexOf(e),1),this.#At({type:"deviceDisconnected",message:{device:e}}),this.#At({type:"deviceIsConnected",message:{device:e}})):ce.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#Rt()}}static#Rt(){ce.log({AvailableDevices:this.AvailableDevices}),this.#At({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new he;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const le=l("Timer",{log:!1});class ge{#Ot;get callback(){return this.#Ot}set callback(e){le.assertTypeWithError(e,"function"),le.log({newCallback:e}),this.#Ot=e,this.isRunning&&this.restart()}#Pt;get interval(){return this.#Pt}set interval(e){le.assertTypeWithError(e,"number"),le.assertWithError(e>0,"interval must be above 0"),le.log({newInterval:e}),this.#Pt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#$t=null;get isRunning(){return null!=this.#$t}start(){this.isRunning?le.log("interval already running"):(le.log("starting interval"),this.#$t=setInterval(this.#Ot,this.#Pt))}stop(){this.isRunning?(le.log("stopping interval"),clearInterval(this.#$t),this.#$t=null):le.log("interval already not running")}restart(){this.stop(),this.start()}}const de=l("BaseScanner");class ue{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#l(){de.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){de.assertWithError(this.constructor!=ue,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#l(),v(this,this.#Ut)}#Ut={discoveredDevice:this.#_t.bind(this),isScanning:this.#Vt.bind(this)};static#Pe=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Pe}get eventTypes(){return ue.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}dispatchEvent(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}get isAvailable(){return!1}#zt(){de.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#Bt(){de.assertWithError(this.isScanning,"not scanning")}#Ft(){de.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#zt(),this.#Ft()}stopScan(){this.#Bt()}#Vt(){this.isScanning?(this.#qt={},this.#jt={}):this.#Ht.stop()}#qt={};get discoveredDevices(){return this.#qt}get discoveredDevicesArray(){return Object.values(this.#qt).sort(((e,t)=>this.#jt[e.id]-this.#jt[t.id]))}#Gt(e){de.assertWithError(this.#qt[e],`no discovered device with id "${e}"`)}#_t(e){const t=e.message.discoveredDevice;this.#qt[t.id]=t,this.#jt[t.id]=Date.now(),this.#Ht.start()}#jt={};static#Jt=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#Jt}get#Qt(){return ue.DiscoveredDeviceExpirationTimeout}#Ht=new ge(this.#Zt.bind(this),1e3);#Zt(){const e=Object.entries(this.#qt);if(0==e.length)return void this.#Ht.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#jt[e];t-n>this.#Qt&&(de.log("discovered device timeout"),delete this.#qt[e],delete this.#jt[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#zt()}get canReset(){return!1}reset(){de.log("resetting...")}}const ve=l("NobleScanner",{log:!0});let pe=!1;if(t){var me=require("@abandonware/noble");pe=!0}class fe extends ue{static get isSupported(){return pe}#Kt=!1;get#Xt(){return this.#Kt}set#Xt(e){ve.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Kt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ve.log("duplicate isScanning assignment")}get isScanning(){return this.#Xt}#Yt="unknown";get#es(){return this.#Yt}set#es(e){ve.assertTypeWithError(e,"string"),this.#es!=e?(this.#Yt=e,ve.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ve.log("duplicate nobleState assignment")}#ts={scanStart:this.#ss.bind(this),scanStop:this.#ns.bind(this),stateChange:this.#is.bind(this),discover:this.#rs.bind(this)};#ss(){ve.log("OnNobleScanStart"),this.#Xt=!0}#ns(){ve.log("OnNobleScanStop"),this.#Xt=!1}#is(e){ve.log("onNobleStateChange",e),this.#es=e}#rs(e){let t;ve.log("onNobleDiscover",e.id),this.#as[e.id]||(e._scanner=this,this.#as[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=E[0].replaceAll("-",""),n=s.find((t=>t.uuid==e));if(n){const e=n.data.readUint8(0);t=he.Types[e]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(me,this.#ts),v(this,this.#os)}get isAvailable(){return"poweredOn"==this.#es}startScan(){super.startScan(),me.startScanningAsync(E,!0)}stopScan(){super.stopScan(),me.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),me.reset()}#os={expiredDiscoveredDevice:this.#cs.bind(this)};#cs(e){const t=e.message.discoveredDevice;this.#as[t.id]&&delete this.#as[t.id]}#as={};#hs(e){ve.assertTypeWithError(e,"string"),ve.assertWithError(this.#as[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#hs(e);const t=this.#as[e];ve.log("connecting to discoveredDevice...",e);let s=he.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#ls(t),await s.connect())}#ls(e){const t=new he,s=new B;return s.noblePeripheral=e,t.connectionManager=s,t}}const Se=l("Scanner",{log:!1});let be;fe.isSupported?(Se.log("using NobleScanner"),be=new fe):Se.log("Scanner not available");var ye=be;const De=l("DevicePairPressureSensorDataManager",{log:!0});class Ce{static get Sides(){return he.InsoleSides}get sides(){return he.InsoleSides}#gs={};#K=new j;resetPressureRange(){this.#K.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(De.log({pressure:t,insoleSide:s}),this.#gs[s]=t,this.#ds)return this.#us();De.log("doesn't have all pressure data yet...")}get#ds(){return this.sides.every((e=>e in this.#gs))}static#H={pressure:G.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#H}get scalars(){return Ce.Scalars}#us(){this.scalars.pressure;const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#gs[t].rawSum,e.normalizedSum+=this.#gs[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#gs[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#K.updateAndGetNormalization(e.center)),De.log({devicePairPressure:e}),e}}const Ee=l("DevicePairSensorDataManager",{log:!0});class we{static get Sides(){return he.InsoleSides}get sides(){return he.InsoleSides}#vs={};pressureSensorDataManager=new Ce;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(Ee.log({sensorType:s,timestamp:t,event:e}),this.#vs[s]||(this.#vs[s]={}),this.#vs[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else Ee.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#vs[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else Ee.log("no value received")}onDataReceived}const Me=l("DevicePair",{log:!0});class Te{constructor(){this.#Ie.onDataReceived=this.#xe.bind(this)}static#Pe=["isConnected","pressure",...he.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#Pe}get eventTypes(){return Te.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}#Ue(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}static get Sides(){return he.InsoleSides}get sides(){return Te.Sides}#ps;get left(){return this.#ps}#ms;get right(){return this.#ms}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#p(){Me.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Me.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#fs),v(e,this.#fs),t){case"left":this.#ps=e;break;case"right":this.#ms=e}return Me.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}}),this.#Ue({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Me.log("device already assigned")}#fs={connectionStatus:this.#Ss.bind(this),isConnected:this.#bs.bind(this),sensorData:this.#ys.bind(this),getSensorConfiguration:this.#Ss.bind(this)};#Ss(e){this.#Ue({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#bs(e){this.#Ss(e),this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#Ie=new we;#ys(e){this.#Ss(e),this.#Ue({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Ie.onDeviceSensorData(e)}#xe(e,t){Me.log({sensorType:e,sensorData:t}),this.#Ue({type:e,message:t})}resetPressureRange(){this.#Ie.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#Ds=new Te;static get shared(){return this.#Ds}static{he.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Ds.assignInsole(t)}))}}const Le=l("ServerUtils",{log:!1}),We=3e7;function Ne(e,...t){Le.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=$(...t.data),n=s.byteLength;Le.assertEnumWithError(t.type,e);return $(e.indexOf(t.type),Uint16Array.from([n]),s)}));return Le.log("messageBuffers",...s),$(...s)}const ke=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function Re(...e){return Ne(ke,...e)}function Ie(...e){return Le.log("createDeviceMessage",...e),Ne(he.EventTypes,...e)}function xe(...e){return Ne(f.MessageTypes,...e)}const Ae=Re("ping"),Oe=Re("pong");Re("isScanningAvailable"),Re("isScanning"),Re("startScan"),Re("stopScan");const Pe=Re("discoveredDevices"),$e=l("WebSocketClientConnectionManager",{log:!0});class Ue extends f{static get isSupported(){return e}static get type(){return"webSocketClient"}#Cs;get id(){return this.#Cs}set id(e){$e.assertTypeWithError(e,"string"),this.#Cs!=e?this.#Cs=e:$e.log("redundant id assignment")}#Be=!1;get isConnected(){return this.#Be}set isConnected(e){$e.assertTypeWithError(e,"boolean"),this.#Be!=e?(this.#Be=e,this.status=this.#Be?"connected":"not connected",this.#Be&&this.#Es()):$e.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),$e.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){$e.log({dataView:e}),ee(e,he.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));$e.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"sensorData":this.onMessageReceived(s,t);break;default:$e.error(`uncaught messageType "${s}"`)}}),!0)}#Es(){this.sendWebSocketMessage(...he.AllInformationConnectionMessages)}}const _e=l("WebSocketClient",{log:!0});class Ve{static#Pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Pe}get eventTypes(){return Ve.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}#Ue(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}#ws;get webSocket(){return this.#ws}set webSocket(e){this.#ws!=e?(_e.log("assigning webSocket",e),this.#ws&&p(this.#ws,this.#Ms),v(e,this.#Ms),this.#ws=e,_e.log("assigned webSocket")):_e.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Ts(){_e.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Ls(){_e.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#Ls(),this.#Ws="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Ts(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Ws="disconnecting",this.webSocket.close()}reconnect(){this.#Ls(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#He=!0;static get ReconnectOnDisconnection(){return this.#He}static set ReconnectOnDisconnection(e){_e.assertTypeWithError(e,"boolean"),this.#He=e}#Ge=Ve.#He;get reconnectOnDisconnection(){return this.#Ge}set reconnectOnDisconnection(e){_e.assertTypeWithError(e,"boolean"),this.#Ge=e}#Ns(e){this.#Ts(),this.#ws.send(e)}#ks(...e){this.#Ns(Re(...e))}#Ms={open:this.#Rs.bind(this),message:this.#Is.bind(this),close:this.#xs.bind(this),error:this.#As.bind(this)};#Rs(e){_e.log("webSocket.open",e),this.#Os.start(),this.#Ws="connected"}async#Is(e){_e.log("webSocket.message",e),this.#Os.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Ps(s)}#xs(e){_e.log("webSocket.close",e),this.#Ws="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#Os.stop(),this.#Ge&&setTimeout((()=>{this.reconnect()}),3e3)}#As(e){_e.log("webSocket.error",e)}#$s="not connected";get#Ws(){return this.#$s}set#Ws(e){switch(_e.assertTypeWithError(e,"string"),_e.log({newConnectionStatus:e}),this.#$s=e,this.#Ue({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Ue({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#ks("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Us=!1,this.#Xt=!1)}}get connectionStatus(){return this.#Ws}#Ps(e){_e.log("parseMessage",{dataView:e}),ee(e,ke,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#_s();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));_e.log({isScanningAvailable:e}),this.#Us=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));_e.log({isScanning:e}),this.#Xt=e}break;case"discoveredDevice":{const{string:e}=Y(t,n);_e.log({discoveredDeviceString:e});const s=JSON.parse(e);_e.log({discoveredDevice:s}),this.#_t(s)}break;case"expiredDiscoveredDevice":{const{string:e}=Y(t,n);this.#cs(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=Y(t,n);_e.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);_e.log({connectedDeviceIds:s}),this.#Vs(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=Y(t,n);n=s;const i=this.#zs[e];_e.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=V(t,n);r.onWebSocketMessage(a)}break;default:_e.error(`uncaught messageType "${s}"`)}}),!0)}#Os=new ge(this.#Bs.bind(this),We);#Bs(){this.#ks("ping")}#_s(){this.#ks("pong")}#Fs=!1;get#Us(){return this.#Fs}set#Us(e){_e.assertTypeWithError(e,"boolean"),this.#Fs=e,this.#Ue({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#qs()}get isScanningAvailable(){return this.#Us}#js(){this.#Ts(),_e.assertWithError(this.isScanningAvailable,"scanning is not available")}#Hs(){this.#ks("isScanningAvailable")}#Kt=!1;get#Xt(){return this.#Kt}set#Xt(e){_e.assertTypeWithError(e,"boolean"),this.#Kt=e,this.#Ue({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Xt}#qs(){this.#ks("isScanning")}#Bt(){_e.assertWithError(this.isScanning,"is not scanning")}#Ft(){_e.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Ft(),this.#ks("startScan")}stopScan(){this.#Bt(),this.#ks("stopScan")}toggleScan(){this.#js(),this.isScanning?this.stopScan():this.startScan()}#qt={};get discoveredDevices(){return this.#qt}#_t(e){_e.log({discoveredDevice:e}),this.#qt[e.id]=e,this.#Ue({type:"discoveredDevice",message:{discoveredDevice:e}})}#Gs(){this.#Ns(Pe)}#cs(e){_e.log({expiredDeviceId:e});const t=this.#qt[e];t?(_e.log({expiredDiscoveredDevice:t}),delete this.#qt[e],this.#Ue({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):_e.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#Js(e)}#Js(e){this.#Ts(),_e.assertTypeWithError(e,"string");const t=this.#Qs(e);return t.connect(),t}#Zs(e){this.#Ns(this.#Ks(e))}#Ks(e){return Re({type:"connectToDevice",data:e})}#ls(e){const t=new he,s=new Ue;return s.id=e,s.sendWebSocketMessage=this.#Xs.bind(this,e),s.sendWebSocketConnectMessage=this.#Zs.bind(this,e),s.sendWebSocketDisconnectMessage=this.#Ys.bind(this,e),t.connectionManager=s,t}#Qs(e){let t=this.#zs[e];return t||(t=this.#ls(e),this.#zs[e]=t),t}#Vs(e){_e.log({deviceIds:e}),e.forEach((e=>{this.#Qs(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#en(e)}#en(e){this.#Ts(),_e.assertTypeWithError(e,"string");const t=this.devices[e];return _e.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#Ys(e){this.#Ns(this.#tn(e))}#tn(e){return Re({type:"disconnectFromDevice",data:e})}#Xs(e,...t){this.#Ns(this.#sn(e,...t))}#sn(e,...t){return Re({type:"deviceMessage",data:[e,xe(...t)]})}#zs={};get devices(){return this.#zs}}const ze=l("BaseServer",{log:!0});class Be{#g(){ze.assertWithError(this.constructor!=Be,`${this.constructor.name} must be subclassed`)}static#Pe=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Pe}get eventTypes(){return Be.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}dispatchEvent(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}constructor(){this.#g(),ze.assertWithError(ye,"no scanner defined"),v(ye,this.#nn),v(he,this.#in),v(this,this.#rn)}get numberOfClients(){return 0}static#an=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#an}static set ClearSensorConfigurationsWhenNoClients(e){ze.assertTypeWithError(e,"boolean"),this.#an=e}#on=Be.#an;get clearSensorConfigurationsWhenNoClients(){return this.#on}set clearSensorConfigurationsWhenNoClients(e){ze.assertTypeWithError(e,"boolean"),this.#on=e}#rn={clientConnected:this.#cn.bind(this),clientDisconnected:this.#hn.bind(this)};#cn(e){e.message.client,ze.log("onClientConnected")}#hn(e){e.message.client,ze.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&he.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){ze.log("broadcasting",e)}#nn={isAvailable:this.#ln.bind(this),isScanning:this.#gn.bind(this),discoveredDevice:this.#dn.bind(this),expiredDiscoveredDevice:this.#cs.bind(this)};#ln(e){this.broadcastMessage(this.#un)}get#un(){return Re({type:"isScanningAvailable",data:ye.isAvailable})}#gn(e){this.broadcastMessage(this.#vn)}get#vn(){return Re({type:"isScanning",data:ye.isScanning})}#dn(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#pn(t))}#pn(e){return Re({type:"discoveredDevice",data:e})}#cs(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#mn(t))}#mn(e){return Re({type:"expiredDiscoveredDevice",data:e.id})}get#fn(){return Re(...ye.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#Sn(){return Re({type:"connectedDevices",data:JSON.stringify(he.ConnectedDevices.map((e=>e.id)))})}#bn={connectionMessage:this.#yn.bind(this)};#sn(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#yn(e){const t=e.target;if(ze.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#Dn(t,this.#sn(t,s,n)))}#in={deviceConnected:this.#Cn.bind(this),deviceDisconnected:this.#En.bind(this),deviceIsConnected:this.#bs.bind(this)};#Cn(e){const t=e.message.device;ze.log("onDeviceConnected",t.id),v(t,this.#bn)}#En(e){const t=e.message.device;ze.log("onDeviceDisconnected",t.id),p(t,this.#bn)}#bs(e){const t=e.message.device;ze.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#wn(t))}#wn(e){return this.#Dn(e,{type:"isConnected",data:e.isConnected})}#Dn(e,...t){return Re({type:"deviceMessage",data:[e.id,Ie(...t)]})}parseClientMessage(e){let t=[];if(ee(e,ke,((e,s)=>{const n=e;switch(n){case"ping":t.push(Oe);break;case"pong":break;case"isScanningAvailable":t.push(this.#un);break;case"isScanning":t.push(this.#vn);break;case"startScan":ye.startScan();break;case"stopScan":ye.stopScan();break;case"discoveredDevices":t.push(this.#fn);break;case"connectToDevice":{const{string:e}=Y(s);ye.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=Y(s),t=he.ConnectedDevices.find((t=>t.id==e));if(!t){ze.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#Sn);break;case"deviceMessage":{const{string:e,byteOffset:n}=Y(s),i=he.ConnectedDevices.find((t=>t.id==e));if(!i){ze.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:ze.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return $(t)}parseClientDeviceMessage(e,t){ze.log("onDeviceMessage",e.id,t);let s=[];if(ee(t,f.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":s.push(this.#sn(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:ze.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#Dn(e,...s)}}const Fe=l("WebSocketServer",{log:!0});t&&require("ws");var qe={setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:he,DevicePair:Te,WebSocketClient:Ve,WebSocketServer:class extends Be{get numberOfClients(){return this.#Mn?.clients.size||0}#Mn;get server(){return this.#Mn}set server(e){this.#Mn!=e?(Fe.log("assigning server..."),this.#Mn&&(Fe.log("clearing existing server..."),p(this.#Mn,this.#rn)),v(e,this.#rn),this.#Mn=e,Fe.log("assigned server")):Fe.log("redundant WebSocket assignment")}#rn={close:this.#Tn.bind(this),connection:this.#Ln.bind(this),error:this.#Wn.bind(this),headers:this.#Nn.bind(this),listening:this.#kn.bind(this)};#Tn(){Fe.log("server.close")}#Ln(e){Fe.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new ge((()=>this.#Rn(e)),We),e.pingClientTimer.start(),v(e,this.#In),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#Wn(e){Fe.error(e)}#Nn(){}#kn(){Fe.log("server.listening")}#In={open:this.#xn.bind(this),message:this.#An.bind(this),close:this.#On.bind(this),error:this.#Pn.bind(this)};#xn(e){Fe.log("client.open")}#An(e){Fe.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(U(e.data));this.#$n(t,s)}#On(e){Fe.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#In),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#Pn(e){Fe.log("client.error")}#$n(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Rn(e){e.isAlive?(e.isAlive=!1,e.send(Ae)):e.terminate()}},Scanner:ye};export{qe as default};
