/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function n(){}e&&navigator.userAgent.includes("Android");const r=console.log.bind(console),s=console.warn.bind(console),a=console.error.bind(console),o=console.assert.bind(console);class i{static#e={};constructor(e){if(i.#e[e])throw new Error(`"${e}" console already exists`);i.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new i(e)}get log(){return this.#t.log?r:n}get warn(){return this.#t.warn?s:n}get error(){return this.#t.error?a:n}get assert(){return this.#t.assert?o:n}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}}function c(e,t){return i.create(e,t)}function u(e,t){i.setLevelFlagsForType(e,t)}function h(e){i.setAllLevelFlags(e)}const m=c("EventDispatcher",{log:!1});class g{constructor(e){m.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#n=e}#n;#r(e){return!this.#n||this.#n.includes(e)}#s(e){m.assertWithError(this.#r(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,n){if(m.log(`adding "${e}" eventListener`,t),this.#s(e),this.#a||(this.#a={}),n?.once){const n=t;t=function t(r){n.apply(this,arguments),this.removeEventListener(e,t)}}const r=this.#a;r[e]||(r[e]=[]),r[e].includes(t)||r[e].push(t)}hasEventListener(e,t){return m.log(`has "${e}" eventListener?`,t),this.#s(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(m.log(`removing "${e}" eventListener`,t),this.#s(e),this.hasEventListener(e,t)){const n=this.#a[e].indexOf(t);return this.#a[e].splice(n,1),!0}return!1}dispatchEvent(e){if(this.#s(e.type),this.#a?.[e.type]){e.target=this;const t=this.#a[e.type].slice(0);for(let n=0,r=t.length;n<r;n++)t[n].call(this,e)}}}function l(e,t){Object.entries(t).forEach((([t,n])=>{e.addEventListener(t,n)}))}const f=c("ConnectionManager");class d{onStatusUpdated;onMessageReceived;static#o(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#i(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#o("type")}get type(){return this.constructor.type}#c(){f.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#u(){f.assertWithError(this.constructor!=d,`${this.constructor.name} must be subclassed`)}constructor(){this.#u(),this.#c()}#h="not connected";get status(){return this.#h}set status(e){f.assertTypeWithError(e,"string"),this.#h!=e?(f.log(`new connection status "${e}"`),this.#h=e,this.onStatusUpdated?.(this.status)):f.warn("same connection status")}get isConnected(){return"connected"==this.status}#m(){f.assertWithError(!this.isConnected,"device is already connected")}#g(){f.assertWithError("connecting"!=this.status,"device is already connecting")}#l(){f.assertWithError(this.isConnected,"device is not connected")}#f(){f.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#d(){this.#l(),this.#f()}async connect(){this.#m(),this.#g(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#m(),this.#g(),f.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#l(),this.#f(),this.status="disconnecting"}async sendMessage(e,t){this.#d(),f.log("sending message",{messageType:e,data:t})}}if(t){var p=require("webbluetooth").BluetoothUUID}if(e)p=window.BluetoothUUID;function v(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function y(e){return p.getCharacteristic(e)}function S(e){return p.getService(e)}const b=Object.freeze({services:{deviceInformation:{uuid:S("device_information"),characteristics:{manufacturerName:{uuid:y("manufacturer_name_string")},modelNumber:{uuid:y("model_number_string")},hardwareRevision:{uuid:y("hardware_revision_string")},firmwareRevision:{uuid:y("firmware_revision_string")},softwareRevision:{uuid:y("software_revision_string")},pnpId:{uuid:y("pnp_id")},serialNumber:{uuid:y("serial_number_string")}}},battery:{uuid:S("battery_service"),characteristics:{batteryLevel:{uuid:y("battery_level")}}},main:{uuid:v(0),characteristics:{name:{uuid:v(1)},type:{uuid:v(2)},sensorConfiguration:{uuid:v(3)},sensorData:{uuid:v(4)},vibration:{uuid:v(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,n])=>e==n.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((n=>(t=Object.entries(n.characteristics).find((([t,n])=>e==n.uuid))?.[0],t))),t}}),E=b.serviceUUIDs,w=b.optionalServiceUUIDs;const D=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var C={bluetooth:t}}if(e)C=window.navigator;class M extends d{#p={characteristicvaluechanged:this.#v.bind(this)};#y={gattserverdisconnected:this.#S.bind(this)};static get isSupported(){return"bluetooth"in C}static get type(){return"web bluetooth"}#b;get device(){return this.#b}set device(e){var t,n;this.#b!=e?(this.#b&&(t=this.#b,n=this.#y,Object.entries(n).forEach((([e,n])=>{t.removeEventListener(e,n)}))),e&&l(e,this.#y),this.#b=e):D.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const t=await C.bluetooth.requestDevice({filters:[{services:E}],optionalServices:e?w:[]});D.log("got BluetoothDevice"),this.device=t,D.log("connecting to device...");const n=await this.device.gatt.connect();D.log(`connected to device? ${n.connected}`),await this.#D(),D.log("fully connected"),this.status="connected"}catch(e){D.error(e),this.status="not connected",this.server?.disconnect()}}async#D(){D.log("getting services...");const e=await this.server.getPrimaryServices();D.log("got services",e.length),D.log("getting characteristics...");for(const r in e){const s=e[r],a=(n=s.uuid,b.getServiceNameFromUUID(n));if(D.assertWithError(a,`no name found for service uuid "${s.uuid}"`),D.log(`got "${a}" service`),"dfu"==a){D.log("skipping dfu service");continue}s._name=a,this.#E.set(a,s),D.log(`getting characteristics for "${a}" service`);const o=await s.getCharacteristics();D.log(`got characteristics for "${a}" service`);for(const e in o){const n=o[e],r=(t=n.uuid,b.getCharacteristicNameFromUUID(t));D.assertWithError(r,`no name found for characteristic uuid "${n.uuid}" in "${a}" service`),D.log(`got "${r}" characteristic in "${a}" service`),n._name=r,this.#w.set(r,n),l(n,this.#p),n.properties.read&&(D.log(`reading "${r}" characteristic...`),await n.readValue()),n.properties.notify&&(D.log(`starting notifications for "${r}" characteristic`),await n.startNotifications())}}var t,n}async disconnect(){await super.disconnect(),D.log("disconnecting from device..."),this.server?.disconnect()}#v(e){D.log("oncharacteristicvaluechanged");const t=e.target,n=t._name;D.assertWithError(n,`no name found for characteristic with uuid "${t.uuid}"`),D.log(`oncharacteristicvaluechanged for "${n}" characteristic`);const r=t.value;switch(D.assertWithError(r,`no data found for "${n}" characteristic`),D.log(`data for "${n}" characteristic`,Array.from(new Uint8Array(r.buffer))),n){case"manufacturerName":this.onMessageReceived("manufacturerName",r);break;case"modelNumber":this.onMessageReceived("modelNumber",r);break;case"softwareRevision":this.onMessageReceived("softwareRevision",r);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",r);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",r);break;case"pnpId":this.onMessageReceived("pnpId",r);break;case"serialNumber":this.onMessageReceived("serialNumber",r);break;case"batteryLevel":this.onMessageReceived("batteryLevel",r);break;case"name":this.onMessageReceived("getName",r);break;case"type":this.onMessageReceived("getType",r);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",r);break;case"sensorData":this.onMessageReceived("sensorData",r);break;default:throw new Error(`uncaught characteristicName "${n}"`)}}#S(e){D.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let n;switch(await super.sendMessage(...arguments),e){case"setName":n=this.#w.get("name");break;case"setType":n=this.#w.get("type");break;case"setSensorConfiguration":n=this.#w.get("sensorConfiguration");break;case"triggerVibration":n=this.#w.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}D.assert(n,"no characteristic found"),await n.writeValueWithResponse(t),n.properties.read&&await n.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),D.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(D.log("successfully reconnected!"),await this.#D(),this.status="connected"):(D.log("unable to reconnect"),this.status="not connected")}}c("NobleConnectionManager",{log:!0}),t&&require("@abandonware/noble");const W=c("SensorDataManager",{log:!0});class T{#C;get deviceType(){return this.#C}set deviceType(e){W.assertTypeWithError(e,"string"),this.#C!=e?(W.log({newDeviceType:e}),this.#C=e):W.warn(`redundant deviceType assignment "${e}"`)}static#M=["pressure","accelerometer","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#M}get#W(){return T.#M}static assertValidSensorType(e){W.assertTypeWithError(e,"string"),W.assertWithError(this.#M.includes(e),`invalid sensorType "${e}"`)}static assertValidSensorTypeEnum(e){W.assertTypeWithError(e,"number"),W.assertWithError(e in this.#M,`invalid sensorTypeEnum ${e}`)}onDataReceived;#T=0;#R=0;clearTimestamp(){W.log("clearing sensorDataManager timestamp data"),this.#T=0,this.#R=0}static#L=65536;get Uint16Max(){return T.#L}#x(e,t){const n=e.getUint16(t,!0);n<this.#R&&(this.#T+=this.Uint16Max),this.#R=n;return n+this.#T}parse(e){W.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const n=this.#x(e,t);for(t+=2;t<e.byteLength;){const r=e.getUint8(t++);let s;T.assertValidSensorTypeEnum(r);const a=this.#W[r];switch(a){case"pressure":s=this.#I(e,t),t+=2*this.numberOfPressureSensors;break;case"accelerometer":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":s=this.#N(e,t,a),t+=6;break;case"gameRotation":case"rotation":s=this.#k(e,t,a),t+=8;break;case"barometer":break;default:throw Error(`uncaught sensorType "${a}"`)}W.assertWithError(s,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:n,[a]:s})}}static#U={pressure:65536,accelerometer:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14,barometer:.78125};get#$(){return T.#U}static#_=8;get numberOfPressureSensors(){return T.#_}#I(e,t){const n=[];for(let r=0;r<this.numberOfPressureSensors;r++,t+=2)n[r]=e.getUint16(t,!0);return W.log({pressure:n}),n}#N(e,t,n){let[r,s,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.#$[n]));const o={x:r,y:s,z:a};return W.log({vector:o}),o}#k(e,t,n){let[r,s,a,o]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.#$[n]));const i={x:r,y:s,z:a,w:o};return W.log({quaternion:i}),i}}const R=c("SensorConfigurationManager",{log:!0});class L{#C;get deviceType(){return this.#C}set deviceType(e){R.assertTypeWithError(e,"string"),this.#C!=e?(R.log({newDeviceType:e}),this.#C=e):R.warn(`redundant deviceType assignment "${e}"`)}parse(e){const t={};return T.Types.forEach(((n,r)=>{const s=e.getUint16(2*r,!0);R.log({sensorType:n,sensorRate:s}),t[n]=s})),R.log({parsedSensorConfiguration:t}),t}static get MaxSensorRate(){return 65535}get maxSensorRate(){return L.MaxSensorRate}static get SensorRateStep(){return 5}get sensorRateStep(){return L.SensorRateStep}#O(e){R.assertTypeWithError(e,"number"),R.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),R.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),R.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){const t=Object.keys(e),n=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,r)=>{T.assertValidSensorType(t);const s=T.Types.indexOf(t);n.setUint8(3*r,s);const a=e[t];this.#O(a),n.setUint16(3*r+1,e[t],!0)})),R.log({sensorConfigurationData:n}),n}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const x=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];function I(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}const N=c("VibrationManager");class k{static#V=["front","rear"];static get Locations(){return this.#V}get locations(){return k.#V}#A(e){N.assertTypeWithError(e,"string"),N.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#B(e){this.#z(e),e.forEach((e=>{this.#A(e)}))}#F(e){this.#B(e);let t=0;return e.forEach((e=>{const n=this.locations.indexOf(e);t|=1<<n})),N.log({locationsBitmask:t}),N.assertWithError(t>0,"locationsBitmask must not be zero"),t}#z(e){N.assertWithError(Array.isArray(e),"passed non-array"),N.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return x}get#q(){return k.WaveformEffects}#j(e){N.assertWithError(this.#q.includes(e),`invalid waveformEffect "${e}"`)}static#H=1270;static get MaxWaveformEffectSegmentDelay(){return this.#H}get#P(){return k.#H}#G(e){if(null!=e.effect){const t=e.effect;this.#j(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;N.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),N.assertWithError(t<=this.#P,`delay must be ${this.#P}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#Q(t)}}static#Z=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#Z}get#J(){return k.#Z}#Q(e){N.assertTypeWithError(e,"number"),N.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),N.assertWithError(e<=this.#J,`waveformEffectSegmentLoopCount must be ${this.#J} or fewer (got ${e})`)}static#K=8;static get MaxNumberOfWaveformEffectSegments(){return this.#K}get maxNumberOfWaveformEffectSegments(){return k.#K}#X(e){this.#z(e),N.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#G(e)}))}static#Y=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Y}get maxWaveformEffectSequenceLoopCount(){return k.#Y}#ee(e){N.assertTypeWithError(e,"number"),N.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),N.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#te=2550;static get MaxWaveformSegmentDuration(){return this.#te}get#ne(){return k.#te}#re(e){N.assertTypeWithError(e.amplitude,"number"),N.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),N.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),N.assertTypeWithError(e.duration,"number"),N.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),N.assertWithError(e.duration<=this.#ne,`duration must be ${this.#ne}ms or less (got ${e.duration}ms)`)}static#se=20;static get MaxNumberOfWaveformSegments(){return this.#se}get maxNumberOfWaveformSegments(){return k.#se}#ae(e){this.#z(e),N.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#re(e)}))}createWaveformEffectsData(e,t,n=0){this.#X(t),this.#ee(n);let r=[],s=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=n;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const n=t[e]||{effect:"none"};if(null!=n.effect){const e=n.effect;r[s++]=this.#q.indexOf(e)}else{if(null==n.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=n;r[s++]=128|Math.floor(e/10)}}}const o=0!=n;for(let e=0;e<t.length||o&&e<this.maxNumberOfWaveformEffectSegments;e++){const n=t[e]?.loopCount||0;0!=e&&4!=e||(r[s]=0);const a=e%4*2;r[s]|=n<<a,3!=e&&7!=e||s++}0!=n&&(r[s++]=n);const i=new DataView(Uint8Array.from(r).buffer);return N.log({dataArray:r,dataView:i}),this.#oe(e,"waveformEffect",i)}createWaveformData(e,t){this.#ae(t);const n=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{n.setUint8(2*t,Math.floor(127*e.amplitude)),n.setUint8(2*t+1,Math.floor(e.duration/10))})),N.log({dataView:n}),this.#oe(e,"waveform",n)}static#M=["waveformEffect","waveform"];static get Types(){return this.#M}get#W(){return k.#M}#ie(e){N.assertTypeWithError(e,"string"),N.assertWithError(this.#W.includes(e),`invalid vibrationType "${e}"`)}#oe(e,t,n){N.assertWithError(n?.byteLength>0,"no data received");const r=this.#F(e);this.#ie(t);const s=this.#W.indexOf(t);N.log({locationsBitmask:r,vibrationTypeIndex:s,dataView:n});const a=I(r,s,n.byteLength,n);return N.log({data:a}),a}}const U=c("BrilliantSoleDevice",{log:!0});class ${constructor(){this.connectionManager=new $.#ce,this.#ue.onDataReceived=this.#he.bind(this)}static get#ce(){return M}static#me=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","accelerometer","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];get#n(){return $.#me}#ge=new g(this.#n);addEventListener(e,t,n){this.#ge.addEventListener(...arguments)}#le(e){this.#ge.dispatchEvent(e)}removeEventListener(e,t){return this.#ge.removeEventListener(...arguments)}#fe;get connectionManager(){return this.#fe}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#de.bind(this),e.onMessageReceived=this.#pe.bind(this)),this.#fe=e,U.log("assigned new connectionManager",this.#fe)):U.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#l(){U.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}#ve=!1;get reconnectOnDisconnection(){return this.#ve}set reconnectOnDisconnection(e){U.assertTypeWithError(e,"boolean"),this.#ve=e}#ye;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#l(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}get connectionStatus(){return this.#fe?.status}#de(e){switch(U.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(U.log("starting reconnect interval..."),this.#ye=setInterval((()=>{U.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#ye&&(U.log("clearing reconnect interval"),clearInterval(this.#ye),this.#ye=void 0),this.#le({type:"connectionStatus",message:{connectionStatus:e}}),this.#le({type:this.connectionStatus}),e){case"connected":case"not connected":this.#le({type:"isConnected",message:{isConnected:this.isConnected}})}}#Se(){this.#be=null,this.#Ee=null,this.#we=null;for(const e in this.#De)this.#De[e]=null}#pe(e,t){switch(U.log({messageType:e,dataView:t}),e){case"manufacturerName":const n=this.#Ce.decode(t);U.log({manufacturerName:n}),this.#Me({manufacturerName:n});break;case"modelNumber":const r=this.#Ce.decode(t);U.log({modelNumber:r}),this.#Me({modelNumber:r});break;case"softwareRevision":const s=this.#Ce.decode(t);U.log({softwareRevision:s}),this.#Me({softwareRevision:s});break;case"hardwareRevision":const a=this.#Ce.decode(t);U.log({hardwareRevision:a}),this.#Me({hardwareRevision:a});break;case"firmwareRevision":const o=this.#Ce.decode(t);U.log({firmwareRevision:o}),this.#Me({firmwareRevision:o});break;case"pnpId":const i={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==i.source&&(i.vendorId=t.getUint8(1)|t.getUint8(2)<<8),U.log({pnpId:i}),this.#Me({pnpId:i});break;case"serialNumber":const c=this.#Ce.decode(t);U.log({serialNumber:c});break;case"batteryLevel":const u=t.getUint8(0);U.log("received battery level",{batteryLevel:u}),this.#We(u);break;case"getName":const h=this.#Ce.decode(t);U.log({name:h}),this.#Te(h);break;case"getType":const m=t.getUint8(0),g=this.#W[m];U.log({typeEnum:m,type:g}),this.#Re(g);break;case"getSensorConfiguration":const l=this.#Le.parse(t);U.log({sensorConfiguration:l}),this.#xe(l);break;case"sensorData":this.#ue.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#Ie=new TextEncoder;get#Ne(){return $.#Ie}static#ke=new TextDecoder;get#Ce(){return $.#ke}#De={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#De}get#Ue(){return Object.values(this.#De).every((e=>null!=e))}#Me(e){U.log({partialDeviceInformation:e});for(const t in e)this.#le({type:t,message:{[t]:e[t]}});Object.assign(this.#De,e),U.log({deviceInformation:this.#De}),this.#Ue&&(U.log("completed deviceInformation"),this.#le({type:"deviceInformation",message:{deviceInformation:this.#De}}))}#we=null;get batteryLevel(){return this.#we}#We(e){U.assertTypeWithError(e,"number"),this.#we!=e?(this.#we=e,U.log({updatedBatteryLevel:this.#we}),this.#le({type:"batteryLevel",message:{batteryLevel:this.#we}})):U.warn(`duplicate batteryLevel assignment ${e}`)}#be;get name(){return this.#be}#Te(e){U.assertTypeWithError(e,"string"),this.#be=e,U.log({updatedName:this.#be}),this.#le({type:"getName",message:{name:this.#be}})}static get MinNameLength(){return 2}get#$e(){return $.MinNameLength}static get MaxNameLength(){return 65}get#_e(){return $.MaxNameLength}async setName(e){this.#l(),U.assertTypeWithError(e,"string"),U.assertWithError(e.length>=this.#$e,`name must be greater than ${this.#$e} characters long ("${e}" is ${e.length} characters long)`),U.assertWithError(e.length<this.#_e,`name must be less than ${this.#_e} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Ne.encode(e);U.log({setNameData:t}),await this.#fe.sendMessage("setName",t)}static#M=["leftInsole","rightInsole"];static get Types(){return this.#M}get#W(){return $.#M}#Ee;get type(){return this.#Ee}#Oe(e){U.assertTypeWithError(e,"string"),U.assertWithError(this.#W.includes(e),`invalid type "${e}"`)}#Re(e){this.#Oe(e),e!=this.type?(this.#Ee=e,U.log({updatedType:this.#Ee}),this.#ue.deviceType=this.#Ee,this.#Le.deviceType=this.#Ee,this.#le({type:"getType",message:{type:this.#Ee}})):U.warn("redundant type assignment")}async setType(e){this.#l(),this.#Oe(e);const t=this.#W.indexOf(e),n=Uint8Array.from([t]);U.log({setTypeData:n}),await this.#fe.sendMessage("setType",n)}#Le=new L;#Ve;get sensorConfiguration(){return this.#Ve}static get MaxSensorRate(){return L.MaxSensorRate}static get SensorRateStep(){return L.SensorRateStep}#xe(e){this.#Ve=e,U.log({updatedSensorConfiguration:this.#Ve}),this.#Le.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(U.log("clearing sensorDataManager timestamp..."),this.#ue.clearTimestamp()),this.#le({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#l(),U.log({newSensorConfiguration:e});const t=this.#Le.createData(e);U.log({setSensorConfigurationData:t}),await this.#fe.sendMessage("setSensorConfiguration",t)}static#Ae=T.Types;static get SensorTypes(){return this.#Ae}#ue=new T;#he(e,t){U.log({sensorType:e,sensorData:t}),this.#le({type:e,message:t}),this.#le({type:"sensorData",message:t})}#Be=new k;static get VibrationLocations(){return k.Locations}static get VibrationTypes(){return k.Types}static get VibrationWaveformEffects(){return k.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return k.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return k.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return k.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return k.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return k.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return k.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:n,type:r}=e;let s;switch(r){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:r,loopCount:a}=t;s=this.#Be.createWaveformEffectsData(n,r,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:r}=t;s=this.#Be.createWaveformData(n,r)}break;default:throw Error(`invalid vibration type "${r}"`)}U.log({type:r,dataView:s}),t=I(t,s)})),await this.#fe.sendMessage("triggerVibration",t)}}export{$ as BrilliantSoleDevice,h as setAllConsoleLevelFlags,u as setConsoleLevelFlagsForType};
