/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function r(){}const i=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new h(e)}get log(){return this.#t.log?i:r}get warn(){return this.#t.warn?a:r}get error(){return this.#t.error?o:r}get assert(){return this.#t.assert?c:r}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function l(e,t){return h.create(e,t)}const g=l("EventDispatcher",{log:!1});class d{constructor(e,t){g.assertWithError(e,"target is required"),this.#s=e,g.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#r(e){return!this.#n||this.#n.includes(e)}#i(e){g.assertWithError(this.#r(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(g.log(`adding "${e}" eventListener`,t),this.#i(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return g.log(`has "${e}" eventListener?`,t),this.#i(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(g.log(`removing "${e}" eventListener`,t),this.#i(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#i(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function u(e,t){let s=e.addEventListener||e.addListener||e.on;g.assertWithError(s,"no add listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener;g.assertWithError(s,"no remove listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const v=l("ConnectionManager");class m{get id(){this.#o("id")}onStatusUpdated;onMessageReceived;static#c(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#c("type")}get type(){return this.constructor.type}#h(){v.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){v.assertWithError(this.constructor!=m,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#h()}#g="not connected";get status(){return this.#g}set status(e){v.assertTypeWithError(e,"string"),this.#g!=e?(v.log(`new connection status "${e}"`),this.#g=e,this.onStatusUpdated?.(this.status)):v.log("tried to assign same connection status")}get isConnected(){return"connected"==this.status}#d(){v.assertWithError(!this.isConnected,"device is already connected")}#u(){v.assertWithError("connecting"!=this.status,"device is already connecting")}#p(){v.assertWithError(this.isConnected,"device is not connected")}#v(){v.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#m(){this.#p(),this.#v()}async connect(){this.#d(),this.#u(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#d(),this.#u(),v.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#p(),this.#v(),this.status="disconnecting"}async sendMessage(e,t){this.#m(),v.log("sending message",{messageType:e,data:t})}}if(t){var f=require("webbluetooth").BluetoothUUID}if(e)f=window.BluetoothUUID;function S(e){return`ea6da725-2000-4f9b-893d-c3913e33b3e${e}`}function b(e){return f.getCharacteristic(e)}function y(e){return f.getService(e)}const E=Object.freeze({services:{deviceInformation:{uuid:y("device_information"),characteristics:{manufacturerName:{uuid:b("manufacturer_name_string")},modelNumber:{uuid:b("model_number_string")},hardwareRevision:{uuid:b("hardware_revision_string")},firmwareRevision:{uuid:b("firmware_revision_string")},softwareRevision:{uuid:b("software_revision_string")},pnpId:{uuid:b("pnp_id")},serialNumber:{uuid:b("serial_number_string")}}},battery:{uuid:y("battery_service"),characteristics:{batteryLevel:{uuid:b("battery_level")}}},main:{uuid:S(0),characteristics:{name:{uuid:S(1)},type:{uuid:S(2)},sensorConfiguration:{uuid:S(3)},sensorData:{uuid:S(4)},vibration:{uuid:S(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e==n}))?.[0],t))),t}}),D=E.serviceUUIDs,w=E.optionalServiceUUIDs;function C(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":t.read=!1}switch(e){case"batteryLevel":case"sensorData":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}const T=l("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var P={bluetooth:t}}if(e)P=window.navigator;class L extends m{get id(){return this.device?.id}#f={characteristicvaluechanged:this.#S.bind(this)};#b={gattserverdisconnected:this.#y.bind(this)};static get isSupported(){return"bluetooth"in P}static get type(){return"webBluetooth"}#E;get device(){return this.#E}set device(e){this.#E!=e?(this.#E&&p(this.#E,this.#b),e&&u(e,this.#b),this.#E=e):T.log("tried to assign the same BluetoothDevice")}get server(){return this.#E?.gatt}get isConnected(){return this.server?.connected}#D=new Map;#w=new Map;async connect(){await super.connect();try{const t=await P.bluetooth.requestDevice({filters:[{services:D}],optionalServices:e?w:[]});T.log("got BluetoothDevice"),this.device=t,T.log("connecting to device...");const s=await this.device.gatt.connect();T.log(`connected to device? ${s.connected}`),await this.#C(),T.log("fully connected"),this.status="connected"}catch(e){T.error(e),this.status="not connected",this.server?.disconnect(),this.#T()}}async#C(){this.#T(),T.log("getting services...");const e=await this.server.getPrimaryServices();T.log("got services",e.length),T.log("getting characteristics...");for(const i in e){const a=e[i];T.log({service:a});const o=(r=a.uuid,E.getServiceNameFromUUID(r));if(T.assertWithError(o,`no name found for service uuid "${a.uuid}"`),T.log(`got "${o}" service`),"dfu"==o){T.log("skipping dfu service");continue}a._name=o,this.#D.set(o,a),T.log(`getting characteristics for "${o}" service`);const c=await a.getCharacteristics();T.log(`got characteristics for "${o}" service`);for(const e in c){const r=c[e];T.log({characteristic:r});const i=(t=r.uuid,E.getCharacteristicNameFromUUID(t));T.assertWithError(i,`no name found for characteristic uuid "${r.uuid}" in "${o}" service`),T.log(`got "${i}" characteristic in "${o}" service`),r._name=i,this.#w.set(i,r),u(r,this.#f);const a=r.properties||C(i);a.read&&(T.log(`reading "${i}" characteristic...`),await r.readValue(),(s||n)&&this.#P(r)),a.notify&&(T.log(`starting notifications for "${i}" characteristic`),await r.startNotifications())}}var t,r}#T(){this.device&&p(this.device,this.#b),this.#w.forEach((e=>{p(e,this.#f)}))}async disconnect(){await super.disconnect(),T.log("disconnecting from device..."),this.server?.disconnect(),this.#T(),this.status="not connected"}#S(e){T.log("oncharacteristicvaluechanged");const t=e.target;this.#P(t)}#P(e){T.log("onCharacteristicValue");const t=e._name;T.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),T.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;switch(T.assertWithError(s,`no data found for "${t}" characteristic`),T.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),t){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${t}"`)}}#y(e){T.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s,n;switch(await super.sendMessage(...arguments),e){case"setName":n="name",s=this.#w.get(n);break;case"setType":n="type",s=this.#w.get(n);break;case"setSensorConfiguration":n="sensorConfiguration",s=this.#w.get(n);break;case"triggerVibration":n="vibration",s=this.#w.get(n);break;default:throw Error(`uncaught messageType "${e}"`)}T.assert(s,"no characteristic found"),t instanceof DataView&&(t=t.buffer),await s.writeValueWithResponse(t);(s.properties||C(n)).read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),T.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(T.log("successfully reconnected!"),await this.#C(),this.status="connected"):(T.log("unable to reconnect"),this.status="not connected")}}const M=l("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class W extends m{get id(){return this.#L?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return!1}async connect(){await super.connect()}async disconnect(){await super.disconnect(),M.log("disconnecting from device...")}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!1}async reconnect(){await super.reconnect(),M.log("attempting to reconnect...")}#L;get noblePeripheral(){return this.#L}set noblePeripheral(e){M.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(M.log({newNoblePeripheral:e}),this.#L&&(p(this.#L,this.#M),delete this.#L._device),e&&(e._device=this,u(e,this.#M)),this.#L=e):M.log("attempted to assign duplicate noblePeripheral")}#M={connect:this.#W,disconnect:this.#N,rssiUpdate:this.#R,servicesDiscover:this.#x};#W(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){M.log("onNoblePeripheralConnect",e)}#N(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){M.log("onNoblePeripheralDisconnect",e)}#R(e){this._device.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){M.log("onNoblePeripheralRssiUpdate",e,t)}#x(e){this._device.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){M.log("onNoblePeripheralServicesDiscover",e,t)}}const N={min:1/0,max:-1/0};class R{#I=Object.assign({},N);reset(){Object.assign(this.#I,N)}update(e){this.#I.min=Math.min(e,this.#I.min),this.#I.max=Math.max(e,this.#I.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#I.min,this.#I.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class x{#I={x:new R,y:new R};reset(){this.#I.x.reset(),this.#I.y.reset()}update(e){this.#I.x.update(e.x),this.#I.y.update(e.y)}getNormalization(e){return{x:this.#I.x.getNormalization(e.x),y:this.#I.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const I=l("PressureSensorDataManager",{log:!0});class k{#k;get deviceType(){return this.#k}set deviceType(e){I.assertTypeWithError(e,"string"),this.#k!=e?(I.log({newDeviceType:e}),this.#k=e,this.#O(),this.resetRange()):I.log(`redundant deviceType assignment "${e}"`)}static#A=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#A}get names(){return k.Names}static#U={pressure:2**-16};static get Scalars(){return this.#U}get scalars(){return k.Scalars}static#_=8;static get NumberOfPressureSensors(){return this.#_}get numberOfPressureSensors(){return k.NumberOfPressureSensors}static#$=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#$}#V;get pressureSensorPositions(){return this.#V}#O(){const e=k.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));I.log({pressureSensorPositions:e}),this.#V=e}#z=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new R));#B=new x;resetRange(){this.#z.forEach((e=>e.reset())),this.#B.reset()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const r=e.getUint16(t,!0),i=this.#z[n].updateAndGetNormalization(r),a=this.pressureSensorPositions[n],o=this.names[n];s.sensors[n]={rawValue:r,normalizedValue:i,position:a,name:o},s.rawSum+=r,s.normalizedSum=i/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#B.updateAndGetNormalization(s.center)),I.log({pressure:s}),s}}const O=l("MotionSensorDataManager",{log:!0});class A{#k;get deviceType(){return this.#k}set deviceType(e){O.assertTypeWithError(e,"string"),this.#k!=e?(O.log({newDeviceType:e}),this.#k=e):O.log(`redundant deviceType assignment "${e}"`)}static#U={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#U}get scalars(){return A.Scalars}static#F=6;static get Vector3Size(){return this.#F}get vector3Size(){return A.Vector3Size}parseVector3(e,t,s){let[n,r,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:r,z:i};return O.log({vector:a}),a}static#q=8;static get QuaternionSize(){return this.#q}get quaternionSize(){return A.QuaternionSize}parseQuaternion(e,t,s){let[n,r,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:r,z:i,w:a};return O.log({quaternion:o}),o}}l("BarometerSensorDataManager",{log:!0});class U{static#U={barometer:.78125};static get Scalars(){return this.#U}get scalars(){return U.Scalars}}const _=l("SensorDataManager",{log:!0});class ${#k;get deviceType(){return this.#k}set deviceType(e){_.assertTypeWithError(e,"string"),this.#k!=e?(_.log({newDeviceType:e}),this.#k=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):_.log(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new k;motionSensorDataManager=new A;barometerSensorDataManager=new U;static#H=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#H}get#j(){return $.Types}static AssertValidSensorType(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.#H.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){_.assertTypeWithError(e,"number"),_.assertWithError(e in this.#H,`invalid sensorTypeEnum ${e}`)}onDataReceived;#G=0;#Z=0;clearTimestamp(){_.log("clearing sensorDataManager timestamp data"),this.#G=0,this.#Z=0}#Q(e,t){const s=e.getUint16(t,!0);s<this.#Z&&(this.#G+=65536),this.#Z=s;return s+this.#G}parse(e){_.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#Q(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let r;$.AssertValidSensorTypeEnum(n);const i=e.getUint8(t++),a=this.#j[n];switch(_.log({sensorTypeEnum:n,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":r=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:_.error(`uncaught sensorType "${a}"`)}t+=i,_.assertWithError(r,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:r})}}static get NumberOfPressureSensors(){return k.NumberOfPressureSensors}get numberOfPressureSensors(){return $.NumberOfPressureSensors}static get PressureSensorNames(){return k.Names}get pressureSensorNames(){return $.PressureSensorNames}}const V=l("SensorConfigurationManager",{log:!0});class z{#k;get deviceType(){return this.#k}set deviceType(e){V.assertTypeWithError(e,"string"),this.#k!=e?(V.log({newDeviceType:e}),this.#k=e):V.log(`redundant deviceType assignment "${e}"`)}#J;#K(e){V.assertWithError(this.#J,"must get initial sensorConfiguration");const t=this.#J?.includes(e);return V.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),r=$.Types[n];if(!r){V.warn(`unknown sensorType index ${n}`);continue}const i=e.getUint16(s+1,!0);V.log({sensorType:r,sensorRate:i}),t[r]=i}return V.log({parsedSensorConfiguration:t}),this.#J=Object.keys(t),t}static#X=65535;static get MaxSensorRate(){return this.#X}get maxSensorRate(){return z.MaxSensorRate}static#Y=5;static get SensorRateStep(){return this.#Y}get sensorRateStep(){return z.SensorRateStep}#ee(e){V.assertTypeWithError(e,"number"),V.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),V.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),V.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#K(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{$.AssertValidSensorType(t);const r=$.Types.indexOf(t);s.setUint8(3*n,r);const i=e[t];this.#ee(i),s.setUint16(3*n+1,e[t],!0)})),V.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const B=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],F=new TextEncoder;function q(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return H(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return H(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function H(e){const t=F.encode(e);return q(t.byteLength,t)}const j=l("VibrationManager");class G{static#te=["front","rear"];static get Locations(){return this.#te}get locations(){return G.Locations}#se(e){j.assertTypeWithError(e,"string"),j.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ne(e){this.#re(e),e.forEach((e=>{this.#se(e)}))}#ie(e){this.#ne(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),j.log({locationsBitmask:t}),j.assertWithError(t>0,"locationsBitmask must not be zero"),t}#re(e){j.assertWithError(Array.isArray(e),"passed non-array"),j.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return B}get waveformEffects(){return G.WaveformEffects}#ae(e){j.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#oe=1270;static get MaxWaveformEffectSegmentDelay(){return this.#oe}get maxWaveformEffectSegmentDelay(){return G.MaxWaveformEffectSegmentDelay}#ce(e){if(null!=e.effect){const t=e.effect;this.#ae(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;j.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),j.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#he(t)}}static#le=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#le}get maxWaveformEffectSegmentLoopCount(){return G.MaxWaveformEffectSegmentLoopCount}#he(e){j.assertTypeWithError(e,"number"),j.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),j.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ge=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ge}get maxNumberOfWaveformEffectSegments(){return G.MaxNumberOfWaveformEffectSegments}#de(e){this.#re(e),j.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ce(e)}))}static#ue=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ue}get maxWaveformEffectSequenceLoopCount(){return G.MaxWaveformEffectSequenceLoopCount}#pe(e){j.assertTypeWithError(e,"number"),j.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),j.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ve=2550;static get MaxWaveformSegmentDuration(){return this.#ve}get maxWaveformSegmentDuration(){return G.MaxWaveformSegmentDuration}#me(e){j.assertTypeWithError(e.amplitude,"number"),j.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),j.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),j.assertTypeWithError(e.duration,"number"),j.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),j.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#fe=20;static get MaxNumberOfWaveformSegments(){return this.#fe}get maxNumberOfWaveformSegments(){return G.MaxNumberOfWaveformSegments}#Se(e){this.#re(e),j.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#me(e)}))}createWaveformEffectsData(e,t,s=0){this.#de(t),this.#pe(s);let n=[],r=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[r++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[r++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[r]=0);const i=e%4*2;n[r]|=s<<i,3!=e&&7!=e||r++}0!=s&&(n[r++]=s);const o=new DataView(Uint8Array.from(n).buffer);return j.log({dataArray:n,dataView:o}),this.#be(e,"waveformEffect",o)}createWaveformData(e,t){this.#Se(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),j.log({dataView:s}),this.#be(e,"waveform",s)}static#H=["waveformEffect","waveform"];static get Types(){return this.#H}get#j(){return G.Types}#ye(e){j.assertTypeWithError(e,"string"),j.assertWithError(this.#j.includes(e),`invalid vibrationType "${e}"`)}#be(e,t,s){j.assertWithError(s?.byteLength>0,"no data received");const n=this.#ie(e);this.#ye(t);const r=this.#j.indexOf(t);j.log({locationsBitmask:n,vibrationTypeIndex:r,dataView:s});const i=q(n,r,s.byteLength,s);return j.log({data:i}),i}}const Z=l("Device",{log:!0});class Q{get id(){return this.#Ee?.id}constructor(){this.#De.onDataReceived=this.#we.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{Q.#Ce(this)}))}static get#Te(){return L}static#Pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#Pe}get eventTypes(){return Q.#Pe}#Le=new d(this,this.eventTypes);addEventListener(e,t,s){this.#Le.addEventListener(e,t,s)}#Me(e){this.#Le.dispatchEvent(e)}removeEventListener(e,t){return this.#Le.removeEventListener(e,t)}#Ee;get connectionManager(){return this.#Ee}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#We.bind(this),e.onMessageReceived=this.#Ne.bind(this)),this.#Ee=e,Z.log("assigned new connectionManager",this.#Ee)):Z.log("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new Q.#Te),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#p(){Z.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#Re=!1;static get ReconnectOnDisconnection(){return this.#Re}static set ReconnectOnDisconnection(e){Z.assertTypeWithError(e,"boolean"),this.#Re=e}#xe=Q.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#xe}set reconnectOnDisconnection(e){Z.assertTypeWithError(e,"boolean"),this.#xe=e}#Ie;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#p(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#Ee?.status||"not connected"}#We(e){switch(Z.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(Z.log("starting reconnect interval..."),this.#Ie=setInterval((()=>{Z.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Ie&&(Z.log("clearing reconnect interval"),clearInterval(this.#Ie),this.#Ie=void 0),this.#Me({type:"connectionStatus",message:{connectionStatus:e}}),this.#Me({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Me({type:"isConnected",message:{isConnected:this.isConnected}})}}#ke(){this.#Oe=null,this.#Ae=null,this.#Ue=null;for(const e in this.#_e)this.#_e[e]=null}#Ne(e,t){switch(Z.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#$e.decode(t);Z.log({manufacturerName:s}),this.#Ve({manufacturerName:s});break;case"modelNumber":const n=this.#$e.decode(t);Z.log({modelNumber:n}),this.#Ve({modelNumber:n});break;case"softwareRevision":const r=this.#$e.decode(t);Z.log({softwareRevision:r}),this.#Ve({softwareRevision:r});break;case"hardwareRevision":const i=this.#$e.decode(t);Z.log({hardwareRevision:i}),this.#Ve({hardwareRevision:i});break;case"firmwareRevision":const a=this.#$e.decode(t);Z.log({firmwareRevision:a}),this.#Ve({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),Z.log({pnpId:o}),this.#Ve({pnpId:o});break;case"serialNumber":const c=this.#$e.decode(t);Z.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);Z.log("received battery level",{batteryLevel:h}),this.#ze(h);break;case"getName":const l=this.#$e.decode(t);Z.log({name:l}),this.#Be(l);break;case"getType":const g=t.getUint8(0),d=this.#j[g];Z.log({typeEnum:g,type:d}),this.#Fe(d);break;case"getSensorConfiguration":const u=this.#qe.parse(t);Z.log({sensorConfiguration:u}),this.#He(u);break;case"sensorData":this.#De.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#je=new TextEncoder;get#Ge(){return Q.#je}static#Ze=new TextDecoder;get#$e(){return Q.#Ze}#_e={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#_e}get#Qe(){return Object.values(this.#_e).every((e=>null!=e))}#Ve(e){Z.log({partialDeviceInformation:e});for(const t in e)this.#Me({type:t,message:{[t]:e[t]}});Object.assign(this.#_e,e),Z.log({deviceInformation:this.#_e}),this.#Qe&&(Z.log("completed deviceInformation"),this.#Me({type:"deviceInformation",message:{deviceInformation:this.#_e}}))}#Ue=null;get batteryLevel(){return this.#Ue}#ze(e){Z.assertTypeWithError(e,"number"),this.#Ue!=e?(this.#Ue=e,Z.log({updatedBatteryLevel:this.#Ue}),this.#Me({type:"batteryLevel",message:{batteryLevel:this.#Ue}})):Z.log(`duplicate batteryLevel assignment ${e}`)}#Oe;get name(){return this.#Oe}#Be(e){Z.assertTypeWithError(e,"string"),this.#Oe=e,Z.log({updatedName:this.#Oe}),this.#Me({type:"getName",message:{name:this.#Oe}})}static get MinNameLength(){return 2}get minNameLength(){return Q.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return Q.MaxNameLength}async setName(e){this.#p(),Z.assertTypeWithError(e,"string"),Z.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),Z.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Ge.encode(e);Z.log({setNameData:t}),await this.#Ee.sendMessage("setName",t)}static#H=["leftInsole","rightInsole"];static get Types(){return this.#H}get#j(){return Q.Types}#Ae;get type(){return this.#Ae}#Je(e){Z.assertTypeWithError(e,"string"),Z.assertWithError(this.#j.includes(e),`invalid type "${e}"`)}#Fe(e){this.#Je(e),e!=this.type?(this.#Ae=e,Z.log({updatedType:this.#Ae}),this.#De.deviceType=this.#Ae,this.#qe.deviceType=this.#Ae,this.#Me({type:"getType",message:{type:this.#Ae}}),Q.#Ke&&Q.#Xe(this)):Z.log("redundant type assignment")}async setType(e){this.#p(),this.#Je(e);const t=this.#j.indexOf(e),s=Uint8Array.from([t]);Z.log({setTypeData:s}),await this.#Ee.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Ye=["left","right"];static get InsoleSides(){return this.#Ye}get insoleSides(){return Q.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return $.Types}get sensorTypes(){return Q.SensorTypes}static get PressureSensorNames(){return $.PressureSensorNames}get pressureSensorNames(){return Q.PressureSensorNames}static get NumberOfPressureSensors(){return $.NumberOfPressureSensors}get numberOfPressureSensors(){return Q.NumberOfPressureSensors}#qe=new z;#et;get sensorConfiguration(){return this.#et}static get MaxSensorRate(){return z.MaxSensorRate}static get SensorRateStep(){return z.SensorRateStep}#He(e){this.#et=e,Z.log({updatedSensorConfiguration:this.#et}),this.#qe.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(Z.log("clearing sensorDataManager timestamp..."),this.#De.clearTimestamp()),this.#Me({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#p(),Z.log({newSensorConfiguration:e});const t=this.#qe.createData(e);Z.log({setSensorConfigurationData:t}),await this.#Ee.sendMessage("setSensorConfiguration",t)}static#tt=!0;static get ClearSensorConfigurationOnLeave(){return this.#tt}static set ClearSensorConfigurationOnLeave(e){Z.assertTypeWithError(e,"boolean"),this.#tt=e}#st=Q.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#st}set clearSensorConfigurationOnLeave(e){Z.assertTypeWithError(e,"boolean"),this.#st=e}static#nt={};static get ZeroSensorConfiguration(){return this.#nt}static{this.SensorTypes.forEach((e=>{this.#nt[e]=0}))}get zeroSensorConfiguration(){return Q.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#De=new $;#we(e,t){Z.log({sensorType:e,sensorData:t}),this.#Me({type:e,message:t}),this.#Me({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#De.pressureSensorDataManager.resetRange()}#rt=new G;static get VibrationLocations(){return G.Locations}static get VibrationTypes(){return G.Types}static get VibrationWaveformEffects(){return G.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return G.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return G.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return G.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return G.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return G.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return G.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let r;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:i}=t;r=this.#rt.createWaveformEffectsData(s,n,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;r=this.#rt.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}Z.log({type:n,dataView:r}),t=q(t,r)})),await this.#Ee.sendMessage("triggerVibration",t)}static#it=[];static get ConnectedDevices(){return this.#it}static#Ke=!1;static get UseLocalStorage(){return this.#Ke}static set UseLocalStorage(e){this.#at(),Z.assertTypeWithError(e,"boolean"),this.#Ke=e,this.#Ke&&!this.#ot&&this.#ct()}static#ht={devices:[]};static#ot;static#at(){Z.assertWithError(e,"localStorage is only available in the browser"),Z.assertWithError(window.localStorage,"localStorage not found")}static#lt="BS.Device";static#gt(){this.#at(),localStorage.setItem(this.#lt,JSON.stringify(this.#ot))}static async#ct(){this.#at();let e=localStorage.getItem(this.#lt);if("string"!=typeof e)return Z.log("no info found in localStorage"),this.#ot=Object.assign({},this.#ht),void this.#gt();try{const t=JSON.parse(e);Z.log({configuration:t}),this.#ot=t,this.CanGetDevices&&await this.GetDevices()}catch(e){Z.error(e)}}static#Xe(e){if("webBluetooth"!=e.connectionType)return void Z.log("localStorage is only for webBluetooth devices");this.#at();const t=this.#ot.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#ot.devices[t].type=e.type,this.#gt())}static#dt=[];static get AvailableDevices(){return this.#dt}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void Z.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void Z.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void Z.warn("bluetooth.getDevices() is not available in this browser");this.#ot||this.#ct();const t=this.#ot;if(!t.devices||0==t.devices.length)return void Z.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return Z.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;const n=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(n)return;const r=new Q,i=new L;i.device=e,e.name&&r.#Be(e.name),r.#Fe(s.type),r.connectionManager=i,this.AvailableDevices.push(r)})),this.#ut({type:"availableDevices",message:{devices:this.AvailableDevices}}),this.AvailableDevices}static#pt=["deviceConnected","deviceDisconnected","deviceIsConnectedUpdated","availableDevices"];static get StaticEventTypes(){return this.#pt}static#vt=new d(this,this.#pt);static AddEventListener(e,t,s){this.#vt.addEventListener(e,t,s)}static#ut(e){this.#vt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#vt.removeEventListener(e,t)}static#Ce(e){if(e.isConnected)if(this.#it.includes(e))Z.log("device already included");else{if(Z.log("adding device",e),this.#it.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#ot.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#ot.devices.push(t):this.#ot.devices[s]=t,this.#gt()}this.#ut({type:"deviceConnected",message:{device:e}}),this.#ut({type:"deviceIsConnectedUpdated",message:{device:e}})}else this.#it.includes(e)?(Z.log("removing device",e),this.#it.splice(this.#it.indexOf(e),1),this.#ut({type:"deviceDisconnected",message:{device:e}}),this.#ut({type:"deviceIsConnectedUpdated",message:{device:e}})):Z.log("device already not included");this.CanGetDevices&&this.GetDevices()}static{this.UseLocalStorage=!0}}const J=l("Timer",{log:!1});class K{#mt;get callback(){return this.#mt}set callback(e){J.assertTypeWithError(e,"function"),J.log({newCallback:e}),this.#mt=e,this.isRunning&&this.restart()}#ft;get interval(){return this.#ft}set interval(e){J.assertTypeWithError(e,"number"),J.assertWithError(e>0,"interval must be above 0"),J.log({newInterval:e}),this.#ft=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#St=null;get isRunning(){return null!=this.#St}start(){this.isRunning?J.log("interval already running"):(J.log("starting interval"),this.#St=setInterval(this.#mt,this.#ft))}stop(){this.isRunning?(J.log("stopping interval"),clearInterval(this.#St),this.#St=null):J.log("interval already not running")}restart(){this.stop(),this.start()}}const X=l("BaseScanner");class Y{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#h(){X.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){X.assertWithError(this.constructor!=Y,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#h(),u(this,this.#bt)}#bt={discoveredPeripheral:this.#yt.bind(this),isScanning:this.#Et.bind(this)};static#Pe=["isAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#Pe}get eventTypes(){return Y.#Pe}#Le=new d(this,this.eventTypes);addEventListener(e,t,s){this.#Le.addEventListener(e,t,s)}dispatchEvent(e){this.#Le.dispatchEvent(e)}removeEventListener(e,t){return this.#Le.removeEventListener(e,t)}get isAvailable(){return!1}#Dt(){X.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#wt(){X.assertWithError(this.isScanning,"not scanning")}#Ct(){X.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#Dt(),this.#Ct()}stopScan(){this.#wt()}#Et(){this.isScanning?(this.#Tt={},this.#Pt={}):this.#Lt.stop()}#Tt={};get discoveredPeripherals(){return this.#Tt}get discoveredPeripheralsArray(){return Object.values(this.#Tt).sort(((e,t)=>this.#Pt[e.id]-this.#Pt[t.id]))}#Mt(e){X.assertWithError(this.#Tt[e],`no discovered peripheral with id "${e}"`)}#yt(e){const t=e.message.discoveredPeripheral;this.#Tt[t.id]=t,this.#Pt[t.id]=Date.now(),this.#Lt.start()}#Pt={};static#Wt=5e3;static get DiscoveredPeripheralExpirationTimeout(){return this.#Wt}get#Nt(){return Y.DiscoveredPeripheralExpirationTimeout}#Lt=new K(this.#Rt.bind(this),1e3);#Rt(){const e=Object.entries(this.#Tt);if(0==e.length)return void this.#Lt.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Pt[e];console.log(t-n),t-n>this.#Nt&&(X.log("discovered peripheral timeout"),delete this.#Tt[e],delete this.#Pt[e],this.dispatchEvent({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:s}}))}))}connectToPeripheral(e){this.#Dt()}disconnectFromPeripheral(e){this.#Dt()}reset(){X.log("resetting...")}}const ee=l("NobleScanner",{log:!0});let te=!1;if(t){var se=require("@abandonware/noble");te=!0}class ne extends Y{static get isSupported(){return te}#xt=!1;get#It(){return this.#xt}set#It(e){ee.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#xt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ee.log("duplicate isScanning assignment")}get isScanning(){return this.#It}#kt="unknown";get#Ot(){return this.#kt}set#Ot(e){ee.assertTypeWithError(e,"string"),this.#Ot!=e?(this.#kt=e,ee.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ee.log("duplicate nobleState assignment")}#At={scanStart:this.#Ut.bind(this),scanStop:this.#_t.bind(this),stateChange:this.#$t.bind(this),discover:this.#Vt.bind(this)};#Ut(){ee.log("OnNobleScanStart"),this.#It=!0}#_t(){ee.log("OnNobleScanStop"),this.#It=!1}#$t(e){ee.log("onNobleStateChange",e),this.#Ot=e}#Vt(e){ee.log("onNobleDiscover",e),this.#zt[e.id]||(e._scanner=this,this.#zt[e.id]=e,u(e,this.#M));const t={name:e.advertisement.localName,id:e.id,rssi:e.rssi};this.dispatchEvent({type:"discoveredPeripheral",message:{discoveredPeripheral:t}})}constructor(){super(),u(se,this.#At),u(this,this.#Bt)}get isAvailable(){return"poweredOn"==this.#Ot}startScan(){super.startScan(),se.startScanningAsync([],!0)}stopScan(){super.stopScan(),se.stopScanningAsync()}reset(){super.reset(),se.reset()}#Bt={expiredDiscoveredPeripheral:this.#Ft.bind(this)};#Ft(e){const t=e.message.discoveredPeripheral,s=this.#zt[t.id];s&&(delete this.#zt[t.id],p(s,this.#M))}#zt={};#qt(e){ee.assertTypeWithError(e,"string"),ee.assertWithError(this.#zt[e],`no noblePeripheral found with id "${e}"`)}#M={connect:this.#W,disconnect:this.#N,rssiUpdate:this.#R,servicesDiscover:this.#x};#W(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){ee.log("onNoblePeripheralConnect",e)}#N(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){ee.log("onNoblePeripheralDisconnect",e)}#R(e){this._scanner.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){ee.log("onNoblePeripheralRssiUpdate",e,t)}#x(e){this._scanner.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){ee.log("onNoblePeripheralServicesDiscover",e,t)}connectToPeripheral(e){super.connectToPeripheral(e),this.#qt(e);const t=this.#zt[e];ee.log("connecting to discoveredPeripheral...",e);const s=new Q,n=new W;s.noblePeripheral=t,s.connectionManager=n,s.connect()}disconnectFromPeripheral(e){super.disconnectFromPeripheral(e),this.#qt(e),this.#zt[e],ee.log("disconnecting from discoveredPeripheral...",e)}}const re=l("Scanner",{log:!1});let ie;ne.isSupported?(re.log("using NobleScanner"),ie=new ne):re.log("Scanner not available");var ae=ie;const oe=l("DevicePairPressureSensorDataManager",{log:!0});class ce{static get Sides(){return Q.InsoleSides}get sides(){return Q.InsoleSides}#Ht={};#B=new x;resetPressureRange(){this.#B.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(oe.log({pressure:t,insoleSide:s}),this.#Ht[s]=t,this.#jt)return this.#Gt();oe.log("doesn't have all pressure data yet...")}get#jt(){return this.sides.every((e=>e in this.#Ht))}static#U={pressure:k.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#U}get scalars(){return ce.Scalars}#Gt(){this.scalars.pressure;const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Ht[t].rawSum,e.normalizedSum+=this.#Ht[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Ht[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#B.updateAndGetNormalization(e.center)),oe.log({devicePairPressure:e}),e}}const he=l("DevicePairSensorDataManager",{log:!0});class le{static get Sides(){return Q.InsoleSides}get sides(){return Q.InsoleSides}#Zt={};pressureSensorDataManager=new ce;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{type:t}=e,{timestamp:s}=e.message;he.log({type:t,timestamp:s,event:e});const n=t;let r;if(this.#Zt[n]||(this.#Zt[n]={}),this.#Zt[n][e.target.insoleSide]=s,"pressure"===n)r=this.pressureSensorDataManager.onDevicePressureData(e);else he.warn(`uncaught sensorType "${n}"`);if(r){const e=Object.assign({},this.#Zt[n]);this.onDataReceived?.(n,{timestamps:e,[n]:r})}else he.log("no value received")}onDataReceived}const ge=l("DevicePair",{log:!0});class de{constructor(){this.#De.onDataReceived=this.#we.bind(this)}static#Pe=["pressure","isConnected"];static get EventTypes(){return this.#Pe}get eventTypes(){return de.#Pe}#Le=new d(this,this.eventTypes);addEventListener(e,t,s){this.#Le.addEventListener(e,t,s)}#Me(e){this.#Le.dispatchEvent(e)}removeEventListener(e,t){return this.#Le.removeEventListener(e,t)}static get Sides(){return Q.InsoleSides}get sides(){return de.Sides}#Qt;get left(){return this.#Qt}#Jt;get right(){return this.#Jt}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}#p(){ge.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void ge.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#Kt),u(e,this.#Kt),t){case"left":this.#Qt=e;break;case"right":this.#Jt=e}return ge.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Me({type:"isConnected",message:{isConnected:this.isConnected}}),s}ge.log("device already assigned")}#Kt={pressure:this.#Xt.bind(this),isConnected:this.#Yt.bind(this)};#Yt(e){this.#Me({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#De=new le;#Xt(e){this.isConnected&&this.#De.onDeviceSensorData(e)}#we(e,t){ge.log({sensorType:e,sensorData:t}),this.#Me({type:e,message:t})}resetPressureRange(){this.#De.resetPressureRange()}static#es=new de;static get shared(){return this.#es}static{Q.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#es.assignInsole(t)}))}}const ue=l("ServerUtils",{log:!1}),pe=3e7,ve=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredPeripheral","discoveredPeripherals","expiredDiscoveredPeripheral","peripheralRSSI","connectToPeripheral","disconnectFromPeripheral"];function me(...e){ue.log("createServerMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=q(...e.data),s=t.byteLength;return q((n=e.type,ue.assertTypeWithError(n,"string"),ue.assertWithError(ve.includes(n),`invalid serverMessageType "${n}"`),ve.indexOf(n)),s,t);var n}));return ue.log("messageBuffers",...t),q(...t)}const fe=new TextDecoder;function Se(e,t){const s=e.getUint8(t++),n=fe.decode(e.buffer.slice(t,t+s));return t+=s,n}const be=me("ping"),ye=me("pong"),Ee=me("isScanningAvailable"),De=me("isScanning"),we=me("startScan"),Ce=me("stopScan"),Te=me("discoveredPeripherals"),Pe=l("WebSocketClient",{log:!0});class Le{static#Pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#Pe}get eventTypes(){return Le.#Pe}#Le=new d(this,this.eventTypes);addEventListener(e,t,s){this.#Le.addEventListener(e,t,s)}#Me(e){this.#Le.dispatchEvent(e)}removeEventListener(e,t){return this.#Le.removeEventListener(e,t)}#ts;get webSocket(){return this.#ts}set webSocket(e){this.#ts!=e?(Pe.log("assigning webSocket",e),this.#ts&&p(this.#ts,this.#ss),u(e,this.#ss),this.#ts=e,Pe.log("assigned webSocket")):Pe.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#ns(){Pe.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#rs(){Pe.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#rs(),this.#is="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#ns(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#is="disconnecting",this.webSocket.close()}reconnect(){this.#rs(),this.webSocket=new WebSocket(this.webSocket.url)}static#Re=!0;static get ReconnectOnDisconnection(){return this.#Re}static set ReconnectOnDisconnection(e){Pe.assertTypeWithError(e,"boolean"),this.#Re=e}#xe=Le.#Re;get reconnectOnDisconnection(){return this.#xe}set reconnectOnDisconnection(e){Pe.assertTypeWithError(e,"boolean"),this.#xe=e}#ss={open:this.#as.bind(this),message:this.#os.bind(this),close:this.#cs.bind(this),error:this.#hs.bind(this)};#as(e){Pe.log("webSocket.open",e),this.#ls.start(),this.#is="connected"}async#os(e){Pe.log("webSocket.message",e),this.#ls.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#gs(s)}#cs(e){Pe.log("webSocket.close",e),this.#is="not connected",this.#ls.stop(),this.#xe&&setTimeout((()=>{this.reconnect()}),3e3)}#hs(e){Pe.log("webSocket.error",e)}#ds="not connected";get#is(){return this.#ds}set#is(e){switch(Pe.assertTypeWithError(e,"string"),Pe.log({newConnectionStatus:e}),this.#ds=e,this.#Me({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Me({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Me({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?(this.#us(),this.#ps()):(this.#vs=!1,this.#It=!1)}}get connectionStatus(){return this.#is}static#Ze=new TextDecoder;get#$e(){return Le.#Ze}#gs(e){Pe.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=ve[s],r=e.getUint8(t++);Pe.log({messageTypeEnum:s,messageType:n,messageByteLength:r}),Pe.assertWithError(n,`invalid messageTypeEnum ${s}`);let i=t;switch(n){case"ping":this.#ms();break;case"pong":break;case"isScanningAvailable":{const t=Boolean(e.getUint8(i++));Pe.log({isScanningAvailable:t}),this.#vs=t}break;case"isScanning":{const t=Boolean(e.getUint8(i++));Pe.log({isScanning:t}),this.#It=t}break;case"discoveredPeripheral":{const t=Se(e,i);Pe.log({discoveredPeripheralString:t}),i+=t.length;const s=JSON.parse(t);Pe.log({discoveredPeripheral:s}),this.#yt(s)}break;case"expiredDiscoveredPeripheral":{const t=Se(e,i);i+=t.length,this.#Ft(t)}break;default:Pe.error(`uncaught messageType "${n}"`)}t+=r}}#ls=new K(this.#fs.bind(this),pe);#fs(){this.#ns(),this.webSocket.send(be)}#ms(){this.#ns(),this.webSocket.send(ye)}#Ss=!1;get#vs(){return this.#Ss}set#vs(e){Pe.assertTypeWithError(e,"boolean"),this.#Ss=e,this.#Me({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#bs()}get isScanningAvailable(){return this.#vs}#ys(){this.#ns(),Pe.assertWithError(this.isScanningAvailable,"scanning is not available")}#us(){this.#ns(),this.webSocket.send(Ee)}#xt=!1;get#It(){return this.#xt}set#It(e){Pe.assertTypeWithError(e,"boolean"),this.#xt=e,this.#Me({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#It}#bs(){this.#ns(),this.webSocket.send(De)}#wt(){Pe.assertWithError(this.isScanning,"is not scanning")}#Ct(){Pe.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Ct(),this.webSocket.send(we)}stopScan(){this.#wt(),this.webSocket.send(Ce)}toggleScan(){this.#ys(),this.isScanning?this.stopScan():this.startScan()}#Tt={};get discoveredPeripherals(){return this.#Tt}#Mt(e){Pe.assertTypeWithError(e,"string"),Pe.assertWithError(this.#Tt[e],`no discoveredPeripheral found with id "${e}"`)}#yt(e){Pe.log({discoveredPeripheral:e}),this.#Tt[e.id]=e,this.#Me({type:"discoveredPeripheral",message:{discoveredPeripheral:e}})}#ps(){this.#ns(),this.webSocket.send(Te)}#Ft(e){Pe.log({discoveredPeripheralId:e});let t=this.#Tt[e];t?(Pe.log({expiredDiscoveredPeripheral:t}),delete this.#Tt[e],this.#Me({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:t}})):Pe.warn(`no discoveredPeripheral found with id "${e}"`)}connectToPeripheral(e){this.#Es(e)}disconnectFromPeripheral(e){this.#Ds(e)}#Es(e){this.#ns(),Pe.assertTypeWithError(e,"string"),this.webSocket.send(this.#ws(e))}#Ds(e){this.#ns(),Pe.assertTypeWithError(e,"string"),this.webSocket.send(this.#Cs(e))}#ws(e){return me({type:"connectToPeripheral",data:e})}#Cs(e){return me({type:"disconnectFromPeripheral",data:e})}#Ts={};get devices(){return this.#Ts}}const Me=l("WebSocketServer",{log:!0});t&&require("ws");class We{constructor(){ae&&u(ae,this.#Ps)}static#Pe=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Pe}get eventTypes(){return We.#Pe}#Le=new d(this,this.eventTypes);addEventListener(e,t,s){this.#Le.addEventListener(e,t,s)}#Me(e){this.#Le.dispatchEvent(e)}removeEventListener(e,t){return this.#Le.removeEventListener(e,t)}#Ls;get server(){return this.#Ls}set server(e){this.#Ls!=e?(Me.log("assigning server..."),this.#Ls&&(Me.log("clearing existing server..."),p(this.#Ls,this.#Ms)),u(e,this.#Ms),this.#Ls=e,Me.log("assigned server")):Me.log("redundant WebSocket assignment")}broadcast(e){this.server.clients.forEach((t=>{t.send(e)}))}#Ms={close:this.#Ws.bind(this),connection:this.#Ns.bind(this),error:this.#Rs.bind(this),headers:this.#xs.bind(this),listening:this.#Is.bind(this)};#Ws(){Me.log("server.close")}#Ns(e){Me.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new K((()=>this.#ks(e)),pe),e.pingClientTimer.start(),u(e,this.#Os),this.#Me({type:"clientConnected",message:{client:e}})}#Rs(e){Me.error(e)}#xs(){}#Is(){Me.log("server.listening")}#Os={open:this.#As.bind(this),message:this.#Us.bind(this),close:this.#_s.bind(this),error:this.#$s.bind(this)};#As(e){Me.log("client.open")}#Us(e){Me.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView((n=e.data).buffer.slice(n.byteOffset,n.byteOffset+n.byteLength));var n;this.#Vs(t,s)}#_s(e){Me.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#Os),this.#Me({type:"clientDisconnected",message:{client:t}})}#$s(e){Me.log("client.error")}static#Ze=new TextDecoder;get#$e(){return We.#Ze}#Vs(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),r=ve[n],i=t.getUint8(s++);Me.log({messageTypeEnum:n,messageType:r,messageByteLength:i}),Me.assertWithError(r,`invalid messageTypeEnum ${n}`);let a=s;switch(r){case"ping":e.send(pongMessageBuffer);break;case"pong":case"disconnectFromAllPeripherals":break;case"isScanningAvailable":e.send(this.#zs);break;case"isScanning":e.send(this.#Bs);break;case"startScan":ae.startScan();break;case"stopScan":ae.stopScan();break;case"discoveredPeripherals":e.send(this.#Fs);break;case"connectToPeripheral":{const e=Se(t,a);a+=e.length,ae.connectToPeripheral(e)}break;case"disconnectFromPeripheral":{const e=Se(t,a);a+=e.length,ae.disconnectFromPeripheral(e)}break;default:Me.error(`uncaught messageType "${r}"`)}s+=i}}get#zs(){return me({type:"isScanningAvailable",data:ae.isAvailable})}get#Bs(){return me({type:"isScanning",data:ae.isScanning})}#qs(e){this.server.clients.forEach((t=>{t.send(e)}))}#ks(e){e.isAlive?(e.isAlive=!1,e.send(be)):e.terminate()}#Ps={isAvailable:this.#Hs.bind(this),isScanning:this.#js.bind(this),discoveredPeripheral:this.#Gs.bind(this),expiredDiscoveredPeripheral:this.#Ft.bind(this)};#Hs(e){this.#qs(this.#zs)}#js(e){this.#qs(this.#Bs)}#Gs(e){const t=e.message.discoveredPeripheral;console.log(t),this.#qs(this.#Zs(t))}#Ft(e){const t=e.message.discoveredPeripheral;console.log("expired",t),this.#qs(this.#Qs(t))}#Zs(e){return me({type:"discoveredPeripheral",data:e})}get#Fs(){return me(...ae.discoveredPeripheralsArray.map((e=>({type:"discoveredPeripheral",data:e}))))}#Qs(e){return me({type:"expiredDiscoveredPeripheral",data:e.id})}}var Ne={setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:Q,DevicePair:de,WebSocketClient:Le,WebSocketServer:We,Scanner:ae};export{Ne as default};
