/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}if(!console.table){const e=(...e)=>{console.log(...e)};console.table=e}function i(){}const a=console.log.bind(console),r=console.warn.bind(console),o=console.error.bind(console),c=console.table.bind(console),l=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0,table:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new h(e)}get log(){return this.#t.log?a:i}get warn(){return this.#t.warn?r:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?l:i}get table(){return this.#t.table?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function g(e,t){return h.create(e,t)}function d(e){return e[0].toUpperCase()+e.slice(1)}const u=g("EventDispatcher",{log:!1});class p{constructor(e,t){u.assertWithError(e,"target is required"),this.#s=e,u.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#a(e){u.assertWithError(this.#i(e),`invalid event type "${e}"`)}#r;addEventListener(e,t,s){if(u.log(`adding "${e}" eventListener`,t),this.#a(e),this.#r||(this.#r={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#r;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return u.log(`has "${e}" eventListener?`,t),this.#a(e),this.#r?.[e]?.includes(t)}removeEventListener(e,t){if(u.log(`removing "${e}" eventListener`,t),this.#a(e),this.hasEventListener(e,t)){const s=this.#r[e].indexOf(t);return this.#r[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#a(e.type),this.#r?.[e.type]){e.target=this.#s;const t=this.#r[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){u.error(e)}}}waitForEvent(e){return u.log(`waiting for event "${e}"`),this.#a(e),new Promise((t=>{this.addEventListener(e,(e=>{t(e)}),{once:!0})}))}}function f(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;u.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function m(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;u.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const v=g("Timer",{log:!1});class y{#o;get callback(){return this.#o}set callback(e){v.assertTypeWithError(e,"function"),v.log({newCallback:e}),this.#o=e,this.isRunning&&this.restart()}#c;get interval(){return this.#c}set interval(e){v.assertTypeWithError(e,"number"),v.assertWithError(e>0,"interval must be above 0"),v.log({newInterval:e}),this.#c=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#l=null;get isRunning(){return null!=this.#l}start(){this.isRunning?v.log("interval already running"):(v.log("starting interval"),this.#l=setInterval(this.#o,this.#c))}stop(){this.isRunning?(v.log("stopping interval"),clearInterval(this.#l),this.#l=null):v.log("interval already not running")}restart(){this.stop(),this.start()}}function b(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}const S=new Uint32Array(256);for(let e=0;e<256;++e)S[e]=b(e);function D(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(S[n^i]^s>>>8)>>>0}return s}const w=g("ArrayBufferUtils",{log:!1}),T=new TextEncoder;function C(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return M(e)}if(e instanceof Array){return C(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return M(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function E(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function M(e){const t=T.encode(e);return C(t.byteLength,t)}function I(e,t,s){let n;return null!=s&&(n=e.byteOffset+t+s),w.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}async function L(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}const k=g("FileTransferManager",{log:!0});class W{static#h=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#h}get messageTypes(){return W.MessageTypes}static#g=[...this.#h,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#g}get eventTypes(){return W.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#u=["tflite"];static get Types(){return this.#u}get types(){return W.Types}#p(e){k.assertEnumWithError(e,this.types)}#f(e){k.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#m=["idle","sending","receiving"];static get Statuses(){return this.#m}get statuses(){return W.Statuses}#v(e){k.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#y=["startSend","startReceive","cancel"];static get Commands(){return this.#y}get commands(){return W.Commands}#b(e){k.assertEnumWithError(e,this.commands)}static#S=0;static get MaxLength(){return this.#S}#D=W.MaxLength;get maxLength(){return this.#D}#w(e){k.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);k.log(`maxLength: ${t/1024}kB`),this.#D=t}#T(e){k.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#C;get type(){return this.#C}#E(e){k.log("parseFileType",e);const t=e.getUint8(0);this.#f(t);const s=this.types[t];this.#M(s)}#M(e){k.log({fileTransferType:e}),this.#C=e,this.#d({type:"getFileTransferType",message:{fileType:e}})}async#I(e,t){if(this.#p(e),this.type==e)return void k.log(`redundant type assignment ${e}`);const s=this.waitForEvent("getFileTransferType"),n=this.types.indexOf(e);this.sendMessage([{type:"setFileTransferType",data:Uint8Array.from([n]).buffer}],t),await s}#L=0;get length(){return this.#L}#k(e){k.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#W(t)}#W(e){k.log(`length: ${e/1024}kB`),this.#L=e,this.#d({type:"getFileLength",message:{fileLength:e}})}async#N(e,t){if(k.assertTypeWithError(e,"number"),this.#T(e),this.length==e)return void k.log(`redundant length assignment ${e}`);const s=this.waitForEvent("getFileLength"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileLength",data:n.buffer}],t),await s}#x=0;get checksum(){return this.#x}#R(e){k.log("checksum",e);const t=e.getUint32(0,!0);this.#_(t)}#_(e){k.log({checksum:e}),this.#x=e,this.#d({type:"getFileChecksum",message:{fileChecksum:e}})}async#F(e,t){if(k.assertTypeWithError(e,"number"),this.checksum==e)return void k.log(`redundant checksum assignment ${e}`);const s=this.waitForEvent("getFileChecksum"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileChecksum",data:n.buffer}],t),await s}async#U(e,t){this.#b(e);const s=this.waitForEvent("fileTransferStatus"),n=this.commands.indexOf(e);this.sendMessage([{type:"setFileTransferCommand",data:Uint8Array.from([n]).buffer}],t),await s}#A="idle";get status(){return this.#A}#O(e){k.log("parseFileStatus",e);const t=e.getUint8(0);this.#v(t);const s=this.statuses[t];this.#P(s)}#P(e){k.log({status:e}),this.#A=e,this.#d({type:"fileTransferStatus",message:{fileTransferStatus:e}}),this.#$.length=0}#V(){k.assertWithError("idle"==this.#A,"status is not idle")}#B(){k.assertWithError("idle"!=this.#A,"status is idle")}#$=[];async#z(e){k.log("parseFileBlock",e),this.#$.push(e.buffer);const t=this.#$.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#L;if(k.log(`received ${t} of ${this.#L} bytes (${100*s}%)`),this.#d({type:"fileTransferProgress",message:{progress:s}}),t!=this.#L)return;k.log("file transfer complete");let n,i=(new Date).toLocaleString();if("tflite"===this.type)i+=".tflite";n="undefined"!=typeof File?new File(this.#$,i):new Blob(this.#$);const a=D(await n.arrayBuffer());k.log({checksum:a}),a==this.#x?(console.log("received file",n),this.#d({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#d({type:"fileReceived",message:{file:n}})):k.error(`wrong checksum - expected ${this.#x}, got ${a}`)}parseMessage(e,t){switch(k.log({messageType:e}),e){case"maxFileLength":this.#w(t);break;case"getFileTransferType":case"setFileTransferType":this.#E(t);break;case"getFileLength":case"setFileLength":this.#k(t);break;case"getFileChecksum":case"setFileChecksum":this.#R(t);break;case"fileTransferStatus":this.#O(t);break;case"getFileTransferBlock":this.#z(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#V(),this.#p(e);const s=await L(t),n=[];n.push(this.#I(e,!1));const i=s.byteLength;n.push(this.#N(i,!1));const a=D(s);n.push(this.#F(a,!1)),n.push(this.#U("startSend",!1)),this.sendMessage(),await Promise.all(n),await this.#q(s)}async#q(e){return this.#j(e)}async#j(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+(this.#H-3-3));console.log("slicedBuffer",s);const n=1-(e.byteLength-t)/e.byteLength;if(k.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#d({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage([{type:"setFileTransferBlock",data:s}]),this.#j(e,t+s.byteLength);k.log("finished sending buffer"),this.#d({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#V(),this.#p(e),await this.#I(e),await this.#U("startReceive")}async cancel(){this.#B(),await this.#U("cancel")}sendMessage;#H;get mtu(){return this.#H}set mtu(e){this.#H=e}}const N=new TextEncoder,x=new TextDecoder;const R=65536;function _(e,t){const s=Date.now();var n;return(n=s)-n%R+e.getUint16(t,!0)}const F={min:1/0,max:-1/0};class U{#G=Object.assign({},F);reset(){Object.assign(this.#G,F)}update(e){this.#G.min=Math.min(e,this.#G.min),this.#G.max=Math.max(e,this.#G.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#G.min,this.#G.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class A{#G={x:new U,y:new U};reset(){this.#G.x.reset(),this.#G.y.reset()}update(e){this.#G.x.update(e.x),this.#G.y.update(e.y)}getNormalization(e){return{x:this.#G.x.getNormalization(e.x),y:this.#G.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const O=g("PressureSensorDataManager",{log:!0});class P{#J=[];get positions(){return this.#J}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;O.log({positions:t}),this.#J=t,this.#Q=(s=this.numberOfSensors,n=()=>new U,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#Q;#Z=new A;resetRange(){this.#Q.forEach((e=>e.reset())),this.#Z.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),a=this.#Q[s].updateAndGetNormalization(i),r=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:a,position:r},t.rawSum+=i,t.normalizedSum+=a/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#Z.updateAndGetNormalization(t.center)),O.log({pressure:t}),t}}const $=g("MotionSensorDataManager",{log:!1});class V{static#K=6;static get Vector3Size(){return this.#K}get vector3Size(){return V.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const a={x:s,y:n,z:i};return $.log({vector:a}),a}static#X=8;static get QuaternionSize(){return this.#X}get quaternionSize(){return V.QuaternionSize}parseQuaternion(e,t){let[s,n,i,a]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const r={x:s,y:n,z:i,w:a};return $.log({quaternion:r}),r}}g("BarometerSensorDataManager",{log:!0});class B{static#Y={barometer:.78125};static get Scalars(){return this.#Y}get scalars(){return B.Scalars}}const z=g("ParseUtils",{log:!0}),q=new TextDecoder;function j(e,t=0){const s=e.getUint8(t++);return{string:q.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function H(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const a=e.getUint8(i++),r=t[a];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),z.log({messageTypeEnum:a,messageType:r,messageLength:o,dataView:e,byteOffset:i}),z.assertWithError(r,`invalid messageTypeEnum ${a}`);const c=I(e,i,o);z.log({_dataView:c}),s(r,c),i+=o}}const G=g("SensorDataManager",{log:!0});class J{pressureSensorDataManager=new P;motionSensorDataManager=new V;barometerSensorDataManager=new B;static#u=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#u}get types(){return J.Types}#ee=new Map;static AssertValidSensorType(e){G.assertTypeWithError(e,"string"),G.assertWithError(this.#u.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){G.assertTypeWithError(e,"number"),G.assertWithError(e in this.#u,`invalid sensorTypeEnum ${e}`)}onDataReceived;parseData(e){G.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=_(e,t);t+=2;H(new DataView(e.buffer,t),J.Types,((e,t)=>{const n=e,i=this.#ee.get(n);let a;switch(n){case"pressure":a=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":a=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":a=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:G.error(`uncaught sensorType "${n}"`)}G.assertWithError(a,`no value defined for sensorType "${n}"`),this.onDataReceived(n,{timestamp:s,[n]:a})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=J.Types[s];if(!n){G.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);G.log({sensorType:n,sensorScalar:i}),this.#ee.set(n,i)}}}const Q=g("SensorConfigurationManager",{log:!1});class Z{#te;#se(e){Q.assertWithError(this.#te,"must get initial sensorConfiguration");const t=this.#te?.includes(e);return Q.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=J.Types[n];if(!i){Q.warn(`unknown sensorType index ${n}`);continue}const a=e.getUint16(s+1,!0);Q.log({sensorType:i,sensorRate:a}),t[i]=a}return Q.log({parsedSensorConfiguration:t}),this.#te=Object.keys(t),t}static#ne=65535;static get MaxSensorRate(){return this.#ne}get maxSensorRate(){return Z.MaxSensorRate}static#ie=5;static get SensorRateStep(){return this.#ie}get sensorRateStep(){return Z.SensorRateStep}static#ae(e){Q.assertTypeWithError(e,"number"),Q.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),Q.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),Q.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#re(e){Z.#ae(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#se(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{J.AssertValidSensorType(t);const i=J.Types.indexOf(t);s.setUint8(3*n,i);const a=e[t];this.#re(a),s.setUint16(3*n+1,e[t],!0)})),Q.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const K=g("TfliteManager",{log:!0});class X{static#h=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteSensorTypes","setTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#h}get messageTypes(){return X.MessageTypes}static#oe=["classification","regression"];static get Tasks(){return this.#oe}get tasks(){return X.Tasks}#ce(e){K.assertEnumWithError(e,this.tasks)}#le(e){K.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#g=[...this.#h];static get EventTypes(){return this.#g}get eventTypes(){return X.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#he;get name(){return this.#he}#ge(e){K.log("parseName",e);const t=x.decode(e);this.#de(t)}#de(e){K.log({name:e}),this.#he=e,this.#d({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e,t){if(K.assertTypeWithError(e,"string"),this.name==e)return void K.log(`redundant name assignment ${e}`);const s=this.waitForEvent("getTfliteName"),n=N.encode(e);this.sendMessage([{type:"setTfliteName",data:n.buffer}],t),await s}#ue;get task(){return this.#ue}#pe(e){K.log("parseTask",e);const t=e.getUint8(0);this.#le(t);const s=this.tasks[t];this.#fe(s)}#fe(e){K.log({task:e}),this.#ue=e,this.#d({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e,t){if(this.#ce(e),this.task==e)return void K.log(`redundant task assignment ${e}`);const s=this.waitForEvent("getTfliteTask"),n=this.tasks.indexOf(e);this.sendMessage([{type:"setTfliteTask",data:Uint8Array.from([n]).buffer}],t),await s}#me;get sampleRate(){return this.#me}#ve(e){K.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#ye(t)}#ye(e){K.log({sampleRate:e}),this.#me=e,this.#d({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e,t){if(K.assertTypeWithError(e,"number"),e-=e%Z.SensorRateStep,K.assertWithError(e>=Z.SensorRateStep,`sampleRate must be multiple of ${Z.SensorRateStep} greater than 0 (got ${e})`),this.#me==e)return void K.log(`redundant sampleRate assignment ${e}`);const s=this.waitForEvent("getTfliteSampleRate"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteSampleRate",data:n.buffer}],t),await s}static#be=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#be}static AssertValidSensorType(e){J.AssertValidSensorType(e),K.assertWithError(this.#be.includes(e),`invalid tflite sensorType "${e}"`)}#Se=[];get sensorTypes(){return this.#Se.slice()}#De(e){K.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=J.Types[n];i?t.push(i):K.error(`invalid sensorTypeEnum ${n}`)}this.#we(t)}#we(e){K.log({sensorTypes:e}),this.#Se=e,this.#d({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(e,t){e.forEach((e=>{X.AssertValidSensorType(e)}));const s=this.waitForEvent("getTfliteSensorTypes");var n;const i=(e=(n=e).filter(((e,t)=>n.indexOf(e)==t))).map((e=>J.Types.indexOf(e))).sort();K.log(e,i),this.sendMessage([{type:"setTfliteSensorTypes",data:Uint8Array.from(i).buffer}],t),await s}#Te;get isReady(){return this.#Te}#Ce(e){K.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Ee(t)}#Ee(e){K.log({isReady:e}),this.#Te=e,this.#d({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#Me(){K.assertWithError(this.isReady,"tflite is not ready")}#Ie;get captureDelay(){return this.#Ie}#Le(e){K.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#ke(t)}#ke(e){K.log({captureDelay:e}),this.#Ie=e,this.#d({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e,t){if(K.assertTypeWithError(e,"number"),this.#Ie==e)return void K.log(`redundant captureDelay assignment ${e}`);const s=this.waitForEvent("getTfliteCaptureDelay"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteCaptureDelay",data:n.buffer}],t),await s}#We;get threshold(){return this.#We}#Ne(e){K.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#xe(t)}#xe(e){K.log({threshold:e}),this.#We=e,this.#d({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e,t){if(K.assertTypeWithError(e,"number"),K.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#We==e)return void K.log(`redundant threshold assignment ${e}`);const s=this.waitForEvent("getTfliteThreshold"),n=new DataView(new ArrayBuffer(4));n.setFloat32(0,e,!0),this.sendMessage([{type:"setTfliteThreshold",data:n.buffer}],t),await s}#Re;get inferencingEnabled(){return this.#Re}#_e(e){K.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#Fe(t)}#Fe(e){K.log({inferencingEnabled:e}),this.#Re=e,this.#d({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e,t){if(K.assertTypeWithError(e,"boolean"),this.#Me(),this.#Re==e)return void K.log(`redundant inferencingEnabled assignment ${e}`);const s=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage([{type:"setTfliteInferencingEnabled",data:Uint8Array.from([e]).buffer}],t),await s}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#Ue(e){K.log("parseInference",e);const t=_(e,0);K.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}K.log("values",s);const n={timestamp:t,values:s};this.#d({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(K.log({messageType:e}),e){case"getTfliteName":case"setTfliteName":this.#ge(t);break;case"getTfliteTask":case"setTfliteTask":this.#pe(t);break;case"getTfliteSampleRate":case"setTfliteSampleRate":this.#ve(t);break;case"getTfliteSensorTypes":case"setTfliteSensorTypes":this.#De(t);break;case"tfliteModelIsReady":this.#Ce(t);break;case"getTfliteCaptureDelay":case"setTfliteCaptureDelay":this.#Le(t);break;case"getTfliteThreshold":case"setTfliteThreshold":this.#Ne(t);break;case"getTfliteInferencingEnabled":case"setTfliteInferencingEnabled":this.#_e(t);break;case"tfliteModelInference":this.#Ue(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const Y=g("BaseConnectionManager",{log:!0});class ee{static#Ae=["getMtu","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","setCurrentTime","sensorData","triggerVibration",...X.MessageTypes,...W.MessageTypes];static get TxRxMessageTypes(){return this.#Ae}static#h=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","smp","rx",...this.TxRxMessageTypes];static get MessageTypes(){return this.#h}static#Oe(e){Y.assertEnumWithError(e,this.#Ae)}get id(){this.#Pe("id")}onStatusUpdated;onMessageReceived;static#$e(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#Pe(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#$e("type")}get type(){return this.constructor.type}#Ve(){Y.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Be(){Y.assertWithError(this.constructor!=ee,`${this.constructor.name} must be subclassed`)}constructor(){this.#Be(),this.#Ve()}#A="not connected";get status(){return this.#A}set status(e){Y.assertTypeWithError(e,"string"),this.#A!=e?(Y.log(`new connection status "${e}"`),this.#A=e,this.onStatusUpdated?.(this.status),this.isConnected?this.#ze.start():this.#ze.stop(),"not connected"==this.#A&&(this.#H=null)):Y.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#qe(){Y.assertWithError(!this.isConnected,"device is already connected")}#je(){Y.assertWithError("connecting"!=this.status,"device is already connecting")}#He(){Y.assertWithError(this.isConnected,"device is not connected")}#Ge(){Y.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Je(){this.#He(),this.#Ge()}async connect(){this.#qe(),this.#je(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#qe(),this.#je(),Y.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#He(),this.#Ge(),this.status="disconnecting",Y.log("disconnecting from device...")}async sendSmpMessage(e){this.#Je(),Y.log("sending smp message",e)}#Qe=[];async sendTxMessages(e,t=!0){if(this.#Je(),e&&this.#Qe.push(...e),!t)return;Y.log("sendTxMessages",this.#Qe.slice());const s=this.#Qe.map((e=>{ee.#Oe(e.type);const t=ee.TxRxMessageTypes.indexOf(e.type),s=new DataView(new ArrayBuffer(2));return s.setUint16(0,e.data?.byteLength||0,!0),C(t,s,e.data)}));if(this.#H)for(;s.length>0;){let e=0,t=0;s.some((s=>{if(e+s.byteLength>this.#H-3)return!0;t++,e+=s.byteLength}));const n=s.splice(0,t);Y.log({arrayBufferCount:t,arrayBuffersToSend:n});const i=C(...n);Y.log("sending arrayBuffer",i),await this.sendTxData(i)}else{const e=C(...s);Y.log("sending arrayBuffer",e),await this.sendTxData(e)}this.#Qe.length=0}#H;get mtu(){return this.#H}set mtu(e){this.#H=e}async sendTxData(e){Y.log("sendTxData",e)}parseRxMessage(e){this.onMessageReceived?.("rx",e),H(e,ee.#Ae,this.#Ze.bind(this),!0)}#Ze(e,t){Y.log({messageType:e,dataView:t}),this.onMessageReceived?.(e,t)}#ze=new y(this.#Ke.bind(this),5e3);#Ke(){this.isConnected||(Y.log("timer detected disconnection"),this.status="not connected")}}const te=g("bluetoothUUIDs",{log:!1});if(t){var se=require("webbluetooth").BluetoothUUID}if(e)se=window.BluetoothUUID;function ne(e){return te.assertTypeWithError(e,"string"),te.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function ie(e){return se?.getCharacteristic?.(e)}function ae(e){return se?.getService?.(e)}const re=Object.freeze({services:{deviceInformation:{uuid:ae("device_information"),characteristics:{manufacturerName:{uuid:ie("manufacturer_name_string")},modelNumber:{uuid:ie("model_number_string")},hardwareRevision:{uuid:ie("hardware_revision_string")},firmwareRevision:{uuid:ie("firmware_revision_string")},softwareRevision:{uuid:ie("software_revision_string")},pnpId:{uuid:ie("pnp_id")},serialNumber:{uuid:ie("serial_number_string")}}},battery:{uuid:ae("battery_service"),characteristics:{batteryLevel:{uuid:ie("battery_level")}}},main:{uuid:ne("0000"),characteristics:{rx:{uuid:ne("1000")},tx:{uuid:ne("1001")}}},smp:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{smp:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.smp.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),oe=re.serviceUUIDs,ce=re.optionalServiceUUIDs,le=[...oe,...ce];function he(e){return re.getServiceNameFromUUID(e)}const ge=[],de=[],ue=[];function pe(e){return re.getCharacteristicNameFromUUID(e)}function fe(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"rx":case"tx":case"smp":t.read=!1}switch(e){case"batteryLevel":case"rx":case"smp":t.notify=!0}switch(e){case"tx":case"smp":t.writeWithoutResponse=!0}return t}Object.entries(re.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{oe.includes(t.uuid)&&ge.push(s.uuid),de.push(s.uuid),ue.push(e)}))}),[]);const me=g("BluetoothConnectionManager",{log:!0});class ve extends ee{onCharacteristicValueChanged(e,t){"rx"==e?this.parseRxMessage(t):this.onMessageReceived?.(e,t)}async writeCharacteristic(e,t){me.log("writeCharacteristic",...arguments)}async sendSmpMessage(e){super.sendSmpMessage(...arguments),await this.writeCharacteristic("smp",e)}async sendTxData(e){super.sendTxData(...arguments),await this.writeCharacteristic("tx",e)}}const ye=g("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var be={bluetooth:t}}if(e)be=window.navigator;class Se extends ve{get id(){return this.device?.id}#Xe={characteristicvaluechanged:this.#Ye.bind(this)};#et={gattserverdisconnected:this.#tt.bind(this)};static get isSupported(){return"bluetooth"in be}static get type(){return"webBluetooth"}#st;get device(){return this.#st}set device(e){this.#st!=e?(this.#st&&m(this.#st,this.#et),e&&f(e,this.#et),this.#st=e):ye.log("tried to assign the same BluetoothDevice")}get server(){return this.#st?.gatt}get isConnected(){return this.server?.connected}#nt=new Map;#it=new Map;async connect(){await super.connect();try{const t=await be.bluetooth.requestDevice({filters:[{services:oe}],optionalServices:e?ce:[]});ye.log("got BluetoothDevice"),this.device=t,ye.log("connecting to device...");const s=await this.device.gatt.connect();ye.log(`connected to device? ${s.connected}`),await this.#at(),ye.log("fully connected"),this.status="connected"}catch(e){ye.error(e),this.status="not connected",this.server?.disconnect(),this.#rt()}}async#at(){this.#rt(),ye.log("getting services...");const e=await this.server.getPrimaryServices();ye.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),ye.log("getting characteristics...");for(const t in e){const i=e[t];ye.log({service:i});const a=he(i.uuid);ye.assertWithError(a,`no name found for service uuid "${i.uuid}"`),ye.log(`got "${a}" service`),i._name=a,this.#nt.set(a,i),ye.log(`getting characteristics for "${a}" service`);const r=await i.getCharacteristics();ye.log(`got characteristics for "${a}" service`);for(const e in r){const t=r[e];ye.log({characteristic:t});const i=pe(t.uuid);ye.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${a}" service`),ye.log(`got "${i}" characteristic in "${a}" service`),t._name=i,this.#it.set(i,t),f(t,this.#Xe);const o=t.properties||fe(i);o.notify&&(ye.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(ye.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#ot(t))}}}#rt(){this.device&&m(this.device,this.#et),this.#it.forEach((e=>{m(e,this.#Xe)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#rt(),this.status="not connected"}#Ye(e){ye.log("oncharacteristicvaluechanged");const t=e.target;this.#ot(t)}#ot(e){ye.log("onCharacteristicValue");const t=e._name;ye.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),ye.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;ye.assertWithError(s,`no data found for "${t}" characteristic`),ye.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}async writeCharacteristic(e,t){super.writeCharacteristic(...arguments);const i=this.#it.get(e);ye.assertWithError(i,`${e} characteristic not found`),ye.log("writing characteristic",i,t);const a=i.properties||fe(e);a.writeWithoutResponse?(ye.log("writing without response"),await i.writeValueWithoutResponse(t)):(ye.log("writing with response"),await i.writeValueWithResponse(t)),ye.log("wrote characteristic"),a.read&&!a.notify&&(ye.log("reading value after write..."),await i.readValue(),(s||n)&&this.#ot(i))}#tt(e){ye.log("gattserverdisconnected"),this.status="not connected"}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),ye.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(ye.log("successfully reconnected!"),await this.#at(),this.status="connected"):(ye.log("unable to reconnect"),this.status="not connected")}}const De=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],we=g("VibrationManager");class Te{static#ct=["front","rear"];static get Locations(){return this.#ct}get locations(){return Te.Locations}#lt(e){we.assertTypeWithError(e,"string"),we.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ht(e){this.#gt(e),e.forEach((e=>{this.#lt(e)}))}#dt(e){this.#ht(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),we.log({locationsBitmask:t}),we.assertWithError(t>0,"locationsBitmask must not be zero"),t}#gt(e){we.assertWithError(Array.isArray(e),"passed non-array"),we.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return De}get waveformEffects(){return Te.WaveformEffects}#ut(e){we.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#pt=1270;static get MaxWaveformEffectSegmentDelay(){return this.#pt}get maxWaveformEffectSegmentDelay(){return Te.MaxWaveformEffectSegmentDelay}#ft(e){if(null!=e.effect){const t=e.effect;this.#ut(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;we.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),we.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#mt(t)}}static#vt=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#vt}get maxWaveformEffectSegmentLoopCount(){return Te.MaxWaveformEffectSegmentLoopCount}#mt(e){we.assertTypeWithError(e,"number"),we.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),we.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#yt=8;static get MaxNumberOfWaveformEffectSegments(){return this.#yt}get maxNumberOfWaveformEffectSegments(){return Te.MaxNumberOfWaveformEffectSegments}#bt(e){this.#gt(e),we.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ft(e)}))}static#St=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#St}get maxWaveformEffectSequenceLoopCount(){return Te.MaxWaveformEffectSequenceLoopCount}#Dt(e){we.assertTypeWithError(e,"number"),we.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),we.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#wt=2550;static get MaxWaveformSegmentDuration(){return this.#wt}get maxWaveformSegmentDuration(){return Te.MaxWaveformSegmentDuration}#Tt(e){we.assertTypeWithError(e.amplitude,"number"),we.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),we.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),we.assertTypeWithError(e.duration,"number"),we.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),we.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Ct=20;static get MaxNumberOfWaveformSegments(){return this.#Ct}get maxNumberOfWaveformSegments(){return Te.MaxNumberOfWaveformSegments}#Et(e){this.#gt(e),we.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Tt(e)}))}createWaveformEffectsData(e,t,s=0){this.#bt(t),this.#Dt(s);let n=[],i=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const r=0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const a=e%4*2;n[i]|=s<<a,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return we.log({dataArray:n,dataView:o}),this.#Mt(e,"waveformEffect",o)}createWaveformData(e,t){this.#Et(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),we.log({dataView:s}),this.#Mt(e,"waveform",s)}static#u=["waveformEffect","waveform"];static get Types(){return this.#u}get#It(){return Te.Types}#Lt(e){we.assertTypeWithError(e,"string"),we.assertWithError(this.#It.includes(e),`invalid vibrationType "${e}"`)}#Mt(e,t,s){we.assertWithError(s?.byteLength>0,"no data received");const n=this.#dt(e);this.#Lt(t);const i=this.#It.indexOf(t);we.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const a=C(n,i,s.byteLength,s);return we.log({data:a}),a}}const Ce=4294967296,Ee=9007199254740992;const Me={encode:function(e){let t,s=new ArrayBuffer(256),n=new DataView(s),i=0;function a(e){let a=s.byteLength;const r=i+e;for(;a<r;)a<<=1;if(a!==s.byteLength){const e=n;s=new ArrayBuffer(a),n=new DataView(s);const t=i+3>>2;for(let s=0;s<t;++s)n.setUint32(s<<2,e.getUint32(s<<2))}return t=e,n}function r(){i+=t}function o(e){r(a(1).setUint8(i,e))}function c(e){const t=a(e.length);for(let s=0;s<e.length;++s)t.setUint8(i+s,e[s]);r()}function l(e,t){t<24?o(e<<5|t):t<256?(o(e<<5|24),o(t)):t<65536?(o(e<<5|25),function(e){r(a(2).setUint16(i,e))}(t)):t<4294967296?(o(e<<5|26),function(e){r(a(4).setUint32(i,e))}(t)):(o(e<<5|27),function(e){const t=e%Ce,s=(e-t)/Ce,n=a(8);n.setUint32(i,s),n.setUint32(i+4,t),r()}(t))}if(function e(t){let s;const n=[];let h;if(!1===t)return o(244);if(!0===t)return o(245);if(null===t)return o(246);if(void 0===t)return o(247);switch(typeof t){case"number":if(Math.floor(t)===t){if(t>=0&&t<=Ee)return l(0,t);if(-Ee<=t&&t<0)return l(1,-(t+1))}return o(251),function(e){r(a(8).setFloat64(i,e))}(t);case"string":for(s=0;s<t.length;++s){let e=t.charCodeAt(s);e<128?n.push(e):e<2048?(n.push(192|e>>6),n.push(128|63&e)):e<55296?(n.push(224|e>>12),n.push(128|e>>6&63),n.push(128|63&e)):(e=(1023&e)<<10,e|=1023&t.charCodeAt(++s),e+=65536,n.push(240|e>>18),n.push(128|e>>12&63),n.push(128|e>>6&63),n.push(128|63&e))}return l(3,n.length),c(n);default:if(Array.isArray(t))for(h=t.length,l(4,h),s=0;s<h;++s)e(t[s]);else if(t instanceof Uint8Array)l(2,t.length),c(t);else{const n=Object.keys(t);for(h=n.length,l(5,h),s=0;s<h;++s){const i=n[s];e(i),e(t[i])}}}}(e),"slice"in s)return s.slice(0,i);const h=new ArrayBuffer(i),g=new DataView(h);for(let e=0;e<i;++e)g.setUint8(e,n.getUint8(e));return h},decode:function(e,t,s){const n=new DataView(e);let i=0;function a(e,t){return i+=e,t}function r(t){return a(t,new Uint8Array(e,i,t))}function o(){return a(1,n.getUint8(i))}function c(){return a(2,n.getUint16(i))}function l(){return a(4,n.getUint32(i))}function h(){return 255===n.getUint8(i)&&(i+=1,!0)}function g(e){if(e<24)return e;if(24===e)return o();if(25===e)return c();if(26===e)return l();if(27===e)return l()*Ce+l();if(31===e)return-1;throw new Error("Invalid length encoding")}function d(e){const t=o();if(255===t)return-1;const s=g(31&t);if(s<0||t>>5!==e)throw new Error("Invalid indefinite length element");return s}function u(e,t){for(let s=0;s<t;++s){let s=o();128&s&&(s<224?(s=(31&s)<<6|63&o(),t-=1):s<240?(s=(15&s)<<12|(63&o())<<6|63&o(),t-=2):(s=(15&s)<<18|(63&o())<<12|(63&o())<<6|63&o(),t-=3)),s<65536?e.push(s):(s-=65536,e.push(55296|s>>10),e.push(56320|1023&s))}}"function"!=typeof t&&(t=function(e){return e}),"function"!=typeof s&&(s=function(){});const p=function e(){const l=o(),p=l>>5,f=31&l;let m,v;if(7===p)switch(f){case 25:return function(){const e=new ArrayBuffer(4),t=new DataView(e),s=c(),n=32768&s;let i=31744&s;const a=1023&s;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==a)return(n?-1:1)*a*5.960464477539063e-8;return t.setUint32(0,n<<16|i<<13|a<<13),t.getFloat32(0)}();case 26:return a(4,n.getFloat32(i));case 27:return a(8,n.getFloat64(i))}if(v=g(f),v<0&&(p<2||p>6))throw new Error("Invalid length");const y=[];let b;const S={};switch(p){case 0:return v;case 1:return-1-v;case 2:if(v<0){const e=[];let t=0;for(;(v=d(p))>=0;)t+=v,e.push(r(v));const s=new Uint8Array(t);let n=0;for(m=0;m<e.length;++m)s.set(e[m],n),n+=e[m].length;return s}return r(v);case 3:if(v<0)for(;(v=d(p))>=0;)u(y,v);else u(y,v);return String.fromCharCode.apply(null,y);case 4:if(v<0)for(b=[];!h();)b.push(e());else for(b=new Array(v),m=0;m<v;++m)b[m]=e();return b;case 5:for(m=0;m<v||v<0&&!h();++m){S[e()]=e()}return S;case 6:return t(e(),v);case 7:switch(v){case 20:return!1;case 21:return!0;case 22:return null;case 23:return;default:return s(v)}}}();if(i!==e.byteLength)throw new Error("Remaining bytes");return p}},Ie=g("mcumgr",{log:!0}),Le=0,ke=1,We=2,Ne=3,xe=0,Re=1,_e=8,Fe=0,Ue=2,Ae=3,Oe=5,Pe=0,$e=1,Ve=5,Be=0;class ze{constructor(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}onMessage(e){return this._messageCallback=e,this}onImageUploadNext(e){return this._imageUploadNextCallback=e,this}onImageUploadProgress(e){return this._imageUploadProgressCallback=e,this}onImageUploadFinished(e){return this._imageUploadFinishedCallback=e,this}onFileUploadNext(e){return this._fileUploadNextCallback=e,this}onFileUploadProgress(e){return this._fileUploadProgressCallback=e,this}onFileUploadFinished(e){return this._fileUploadFinishedCallback=e,this}onFileDownloadNext(e){return this._fileDownloadNextCallback=e,this}onFileDownloadProgress(e){return this._fileDownloadProgressCallback=e,this}onFileDownloadFinished(e){return this._fileDownloadFinishedCallback=e,this}_getMessage(e,t,s,n){let i=[];void 0!==n&&(i=[...new Uint8Array(Me.encode(n))]);const a=255&i.length,r=[e,0,i.length>>8,a,t>>8,255&t,this._seq,s,...i];return this._seq=(this._seq+1)%256,r}_notification(e){Ie.log("mcumgr - message received");const t=new Uint8Array(e);this._buffer=new Uint8Array([...this._buffer,...t]);const s=256*this._buffer[2]+this._buffer[3];this._buffer.length<s+8||(this._processMessage(this._buffer.slice(0,s+8)),this._buffer=this._buffer.slice(s+8))}_processMessage(e){const[t,,s,n,i,a,,r]=e,o=Me.decode(e.slice(8).buffer),c=256*s+n,l=256*i+a;return Ie.log("mcumgr - Process Message - Group: "+l+", Id: "+r+", Off: "+o.off),l===Re&&r===$e&&o.off?(this._uploadOffset=o.off,void this._uploadNext()):t===Ne&&l===_e&&r===Be&&o.off?(this._uploadFileOffset=o.off,void this._uploadFileNext()):t===ke&&l===_e&&r===Be?(this._downloadFileOffset+=o.data.length,null!=o.len&&(this._downloadFileLength=o.len),Ie.log("downloaded "+this._downloadFileOffset+" bytes of "+this._downloadFileLength),this._downloadFileLength>0&&this._fileDownloadProgressCallback({percentage:Math.floor(this._downloadFileOffset/this._downloadFileLength*100)}),this._messageCallback&&this._messageCallback({op:t,group:l,id:r,data:o,length:c}),void this._downloadFileNext()):void(this._messageCallback&&this._messageCallback({op:t,group:l,id:r,data:o,length:c}))}cmdReset(){return this._getMessage(We,xe,Oe)}smpEcho(e){return this._getMessage(We,xe,Fe,{d:e})}cmdImageState(){return this._getMessage(Le,Re,Pe)}cmdImageErase(){return this._getMessage(We,Re,Ve,{})}cmdImageTest(e){return this._getMessage(We,Re,Pe,{hash:e,confirm:!1})}cmdImageConfirm(e){return this._getMessage(We,Re,Pe,{hash:e,confirm:!0})}_hash(e){return crypto.subtle.digest("SHA-256",e)}async _uploadNext(){if(!this._uploadImage)return;if(this._uploadOffset>=this._uploadImage.byteLength)return this._uploadIsInProgress=!1,void this._imageUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadOffset};0===this._uploadOffset&&(e.len=this._uploadImage.byteLength,e.sha=new Uint8Array(await this._hash(this._uploadImage))),this._imageUploadProgressCallback({percentage:Math.floor(this._uploadOffset/this._uploadImage.byteLength*100)});const t=this._mtu-Me.encode(e).byteLength-8-3-5;e.data=new Uint8Array(this._uploadImage.slice(this._uploadOffset,this._uploadOffset+t)),this._uploadOffset+=t;const s=this._getMessage(We,Re,$e,e);Ie.log("mcumgr - _uploadNext: Message Length: "+s.length),this._imageUploadNextCallback({packet:s})}async reset(){this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}async cmdUpload(e,t=0){this._uploadIsInProgress?Ie.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadOffset=0,this._uploadImage=e,this._uploadSlot=t,this._uploadNext())}async cmdUploadFile(e,t){this._uploadIsInProgress?Ie.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadFileOffset=0,this._uploadFile=e,this._uploadFilename=t,this._uploadFileNext())}async _uploadFileNext(){if(Ie.log("uploadFileNext - offset: "+this._uploadFileOffset+", length: "+this._uploadFile.byteLength),this._uploadFileOffset>=this._uploadFile.byteLength)return this._uploadIsInProgress=!1,void this._fileUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadFileOffset};0===this._uploadFileOffset&&(e.len=this._uploadFile.byteLength),e.name=this._uploadFilename,this._fileUploadProgressCallback({percentage:Math.floor(this._uploadFileOffset/this._uploadFile.byteLength*100)});const t=this._mtu-Me.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadFile.slice(this._uploadFileOffset,this._uploadFileOffset+t)),this._uploadFileOffset+=t;const s=this._getMessage(We,_e,Be,e);Ie.log("mcumgr - _uploadNext: Message Length: "+s.length),this._fileUploadNextCallback({packet:s})}async cmdDownloadFile(e,t){this._downloadIsInProgress?Ie.error("Download is already in progress."):(this._downloadIsInProgress=!0,this._downloadFileOffset=0,this._downloadFileLength=0,this._downloadRemoteFilename=e,this._downloadLocalFilename=t,this._downloadFileNext())}async _downloadFileNext(){if(this._downloadFileLength>0&&this._downloadFileOffset>=this._downloadFileLength)return this._downloadIsInProgress=!1,void this._fileDownloadFinishedCallback();const e={off:this._downloadFileOffset};0===this._downloadFileOffset&&(e.name=this._downloadRemoteFilename);const t=this._getMessage(Le,_e,Be,e);Ie.log("mcumgr - _downloadNext: Message Length: "+t.length),this._fileDownloadNextCallback({packet:t})}async imageInfo(e){const t={},s=new Uint8Array(e);if(s.length<32)throw new Error("Invalid image (too short file)");if(61!==s[0]||184!==s[1]||243!==s[2]||150!==s[3])throw new Error("Invalid image (wrong magic bytes)");if(0!==s[4]||0!==s[5]||0!==s[6]||0!==s[7])throw new Error("Invalid image (wrong load address)");const n=s[8]+256*s[9];if(0!==s[10]||0!==s[11])throw new Error("Invalid image (wrong protected TLV area size)");const i=s[12]+256*s[13]+65536*s[14]+s[15]*2**24;if(t.imageSize=i,s.length<i+n)throw new Error("Invalid image (wrong image size)");if(0!==s[16]||0!==s[17]||0!==s[18]||0!==s[19])throw new Error("Invalid image (wrong flags)");const a=`${s[20]}.${s[21]}.${s[22]+256*s[23]}`;return t.version=a,t.hash=[...new Uint8Array(await this._hash(e.slice(0,i+32)))].map((e=>e.toString(16).padStart(2,"0"))).join(""),t}}const qe=g("FirmwareManager",{log:!0});class je{sendMessage;constructor(){this.#kt()}static#h=["smp"];static get MessageTypes(){return this.#h}get messageTypes(){return je.MessageTypes}static#g=[...this.#h,"firmwareImages","firmwareUploadProgress","firmwareUploadComplete","firmwareStatus"];static get EventTypes(){return this.#g}get eventTypes(){return je.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}parseMessage(e,t){if(qe.log({messageType:e}),"smp"!==e)throw Error(`uncaught messageType ${e}`);this.#Wt._notification(Array.from(new Uint8Array(t.buffer))),this.#d({type:"smp"})}async uploadFirmware(e){qe.log("uploadFirmware",e);const t=this.waitForEvent("firmwareUploadComplete");await this.getImages();const s=await L(e),n=await this.#Wt.imageInfo(s);console.log({imageInfo:n}),this.#Wt.cmdUpload(s,1),this.#P("uploading"),await t}static#m=["idle","uploading","uploaded","pending","testing","erasing"];static get Statuses(){return this.#m}#A="idle";get status(){return this.#A}#P(e){qe.assertEnumWithError(e,je.Statuses),this.#A!=e?(this.#A=e,qe.log({firmwareStatus:this.#A}),this.#d({type:"firmwareStatus",message:{firmwareStatus:this.#A}})):qe.log(`redundant firmwareStatus assignment "${e}"`)}#Nt;get images(){return this.#Nt}#xt(){qe.assertWithError(this.#Nt,"didn't get imageState")}async getImages(){const e=this.waitForEvent("firmwareImages");qe.log("getting firmware image state..."),this.sendMessage(Uint8Array.from(this.#Wt.cmdImageState()).buffer),await e}async testImage(){if(this.#xt(),this.#Nt.length<2)return void qe.log("image 1 not found");if(1==this.#Nt[1].pending)return void qe.log("image 1 is already pending");if(this.#Nt[1].empty)return void qe.log("image 1 is empty");const e=this.waitForEvent("smp");qe.log("testing firmware image..."),this.sendMessage(Uint8Array.from(this.#Wt.cmdImageTest(this.#Nt[1].hash)).buffer),await e}async eraseImage(){this.#xt();const e=this.waitForEvent("smp");qe.log("erasing image..."),this.sendMessage(Uint8Array.from(this.#Wt.cmdImageErase()).buffer),this.#P("erasing"),await e,await this.getImages()}async confirmImage(){if(this.#xt(),!0===this.#Nt[0].confirmed)return void qe.log("image 0 is already confirmed");const e=this.waitForEvent("smp");qe.log("confirming image..."),this.sendMessage(Uint8Array.from(this.#Wt.cmdImageConfirm(this.#Nt[0].hash)).buffer),await e}async echo(e){qe.assertTypeWithError(e,"string");const t=this.waitForEvent("smp");qe.log("sending echo..."),this.sendMessage(Uint8Array.from(this.#Wt.smpEcho(e)).buffer),await t}async reset(){const e=this.waitForEvent("smp");qe.log("resetting..."),this.sendMessage(Uint8Array.from(this.#Wt.cmdReset()).buffer),await e}#H;get mtu(){return this.#H}set mtu(e){this.#H=e,this.#Wt._mtu=this.#H}#Wt=new ze;#kt(){this.#Wt.onMessage(this.#Rt.bind(this)),this.#Wt.onFileDownloadNext(this.#_t),this.#Wt.onFileDownloadProgress(this.#Ft.bind(this)),this.#Wt.onFileDownloadFinished(this.#Ut.bind(this)),this.#Wt.onFileUploadNext(this.#At.bind(this)),this.#Wt.onFileUploadProgress(this.#Ot.bind(this)),this.#Wt.onFileUploadFinished(this.#Pt.bind(this)),this.#Wt.onImageUploadNext(this.#$t.bind(this)),this.#Wt.onImageUploadProgress(this.#Vt.bind(this)),this.#Wt.onImageUploadFinished(this.#Bt.bind(this))}#Rt({op:e,group:t,id:s,data:n,length:i}){switch(qe.log("onMcuMessage",...arguments),t){case xe:switch(s){case Fe:qe.log(`echo "${n.r}"`);break;case Ue:qe.table(n.tasks);break;case Ae:qe.log(n)}break;case Re:if(s===Pe)this.#zt(n);break;default:throw Error(`uncaught mcuMessage group ${t}`)}}#_t(){qe.log("onMcuFileDownloadNext",...arguments)}#Ft(){qe.log("onMcuFileDownloadProgress",...arguments)}#Ut(){qe.log("onMcuFileDownloadFinished",...arguments)}#At(){qe.log("onMcuFileUploadNext",...arguments)}#Ot(){qe.log("onMcuFileUploadProgress",...arguments)}#Pt(){qe.log("onMcuFileUploadFinished",...arguments)}#$t({packet:e}){qe.log("onMcuImageUploadNext",...arguments),this.sendMessage(Uint8Array.from(e).buffer)}#Vt({percentage:e}){const t=e/100;qe.log("onMcuImageUploadProgress",...arguments),this.#d({type:"firmwareUploadProgress",message:{firmwareUploadProgress:t}})}async#Bt(){qe.log("onMcuImageUploadFinished",...arguments),await this.getImages(),this.#d({type:"firmwareUploadProgress",message:{firmwareUploadProgress:100}}),this.#d({type:"firmwareUploadComplete"})}#zt(e){if(!e.images)return void qe.log("no images found");this.#Nt=e.images,qe.log("images",this.#Nt);let t="idle";2==this.#Nt.length&&(this.#Nt[1].bootable?this.#Nt[0].confirmed?0==this.#Nt[1].pending?(qe.log("Slot 1 has a valid image. run testImage() to test it or upload a different image."),t="uploaded"):(qe.log("reset to upload to the new firmware image"),t="pending"):(qe.log('Slot 0 has a valid image. Click "Confirm Image" to confirm it or wait and the device will swap images back.'),t="testing"):qe.warn('Slot 1 has a invalid image. Click "Erase Image" to erase it or upload a different image')),1==this.#Nt.length&&(this.#Nt.push({slot:1,empty:!0,version:"Empty",pending:!1,confirmed:!1,bootable:!1}),qe.log("Select a firmware upload image to upload to slot 1.")),this.#P(t),this.#d({type:"firmwareImages",message:{firmwareImages:this.#Nt}})}}const He=g("Device",{log:!0});class Ge{get id(){return this.#qt?.id}constructor(){this.#jt.onDataReceived=this.#Ht.bind(this),this.#Gt.sendMessage=this.#Jt.bind(this),this.#Gt.eventDispatcher=this.#Qt,this.#Zt.sendMessage=this.#Jt.bind(this),this.#Zt.eventDispatcher=this.#Qt,this.#Kt.sendMessage=this.#Xt.bind(this),this.#Kt.eventDispatcher=this.#Qt,e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{Ge.#Yt(this)}))}static get#es(){return Se}static#g=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getMtu","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage",...W.EventTypes,...X.EventTypes,...je.EventTypes];static get EventTypes(){return this.#g}get eventTypes(){return Ge.#g}#Qt=new p(this,this.eventTypes);addEventListener(e,t,s){this.#Qt.addEventListener(e,t,s)}#d(e){this.#Qt.dispatchEvent(e)}removeEventListener(e,t){return this.#Qt.removeEventListener(e,t)}waitForEvent(e){return this.#Qt.waitForEvent(e)}#qt;get connectionManager(){return this.#qt}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#ts.bind(this),e.onMessageReceived=this.#ss.bind(this)),this.#qt=e,He.log("assigned new connectionManager",this.#qt)):He.log("same connectionManager is already assigned")}async#Jt(e,t){await(this.#qt?.sendTxMessages(...arguments))}async connect(){return this.connectionManager||(this.connectionManager=new Ge.#es),this.#ns(),this.connectionManager.connect()}#is=!1;get isConnected(){return this.#is}#He(){He.assertWithError(this.isConnected,"not connected")}static#as=["getMtu","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","getFileTransferType","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];get#rs(){return Ge.#as}get#os(){return this.#rs.every((e=>this.latestConnectionMessage.has(e)))}#cs(){const e=this.#rs.map((e=>({type:e})));this.#Jt(e)}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#ns(),this.connectionManager?.reconnect()}static#ls=!1;static get ReconnectOnDisconnection(){return this.#ls}static set ReconnectOnDisconnection(e){He.assertTypeWithError(e,"boolean"),this.#ls=e}#hs=Ge.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#hs}set reconnectOnDisconnection(e){He.assertTypeWithError(e,"boolean"),this.#hs=e}#gs;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#He(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#qt?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#qt.status;default:return"not connected"}}#ts(e){He.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(He.log("starting reconnect interval..."),this.#gs=setInterval((()=>{He.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#gs&&(He.log("clearing reconnect interval"),clearInterval(this.#gs),this.#gs=void 0),this.#Ke(),"connected"!=e||this.#is||this.#cs()}#ds(e=!1){this.#d({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#d({type:this.connectionStatus}),e&&this.#d({type:"isConnected",message:{isConnected:this.isConnected}})}#Ke(){switch(this.#is=this.connectionManager?.isConnected&&this.#os&&this.#us,this.connectionStatus){case"connected":this.#is&&this.#ds(!0);break;case"not connected":this.#ds(!0);break;default:this.#ds(!1)}}#ns(){this.latestConnectionMessage.clear(),this.#us=!1}#ss(e,t){switch(He.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=x.decode(t);He.log({manufacturerName:s}),this.#ps({manufacturerName:s});break;case"modelNumber":const n=x.decode(t);He.log({modelNumber:n}),this.#ps({modelNumber:n});break;case"softwareRevision":const i=x.decode(t);He.log({softwareRevision:i}),this.#ps({softwareRevision:i});break;case"hardwareRevision":const a=x.decode(t);He.log({hardwareRevision:a}),this.#ps({hardwareRevision:a});break;case"firmwareRevision":const r=x.decode(t);He.log({firmwareRevision:r}),this.#ps({firmwareRevision:r});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),He.log({pnpId:o}),this.#ps({pnpId:o});break;case"serialNumber":const c=x.decode(t);He.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);He.log("received battery level",{batteryLevel:l}),this.#fs(l);break;case"getName":case"setName":const h=x.decode(t);He.log({name:h}),this.#de(h);break;case"getType":case"setType":const g=t.getUint8(0),d=this.#It[g];He.log({typeEnum:g,type:d}),this.#M(d);break;case"getSensorConfiguration":case"setSensorConfiguration":const u=this.#ms.parse(t);He.log({sensorConfiguration:u}),this.#vs(u);break;case"sensorScalars":this.#jt.parseScalars(t);break;case"pressurePositions":this.#jt.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":case"setCurrentTime":const p=Number(t.getBigUint64(0,!0));this.#ys(p);break;case"sensorData":this.#jt.parseData(t);break;case"getMtu":const f=t.getUint16(0,!0);He.log({mtu:f}),this.#bs(f);break;case"rx":break;default:if(this.#Gt.messageTypes.includes(e))this.#Gt.parseMessage(e,t);else if(this.#Zt.messageTypes.includes(e))this.#Zt.parseMessage(e,t);else{if(!this.#Kt.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Kt.parseMessage(e,t)}}this.latestConnectionMessage.set(e,t),this.#d({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#os&&this.#Ke()}latestConnectionMessage=new Map;#us=!1;#ys(e){He.log({currentTime:e}),this.#us=0!=e,this.#us||this.#Ss()}#Ss(){He.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#Jt([{type:"setCurrentTime",data:e.buffer}])}#Ds={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Ds}get#ws(){return Object.values(this.#Ds).every((e=>null!=e))}#ps(e){He.log({partialDeviceInformation:e});for(const t in e)this.#d({type:t,message:{[t]:e[t]}});Object.assign(this.#Ds,e),He.log({deviceInformation:this.#Ds}),this.#ws&&(He.log("completed deviceInformation"),this.#d({type:"deviceInformation",message:{deviceInformation:this.#Ds}}))}#Ts=null;get batteryLevel(){return this.#Ts}#fs(e){He.assertTypeWithError(e,"number"),this.#Ts!=e?(this.#Ts=e,He.log({updatedBatteryLevel:this.#Ts}),this.#d({type:"batteryLevel",message:{batteryLevel:this.#Ts}})):He.log(`duplicate batteryLevel assignment ${e}`)}#he;get name(){return this.#he}#de(e){He.assertTypeWithError(e,"string"),this.#he=e,He.log({updatedName:this.#he}),this.#d({type:"getName",message:{name:this.#he}})}static get MinNameLength(){return 2}get minNameLength(){return Ge.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return Ge.MaxNameLength}async setName(e){this.#He(),He.assertTypeWithError(e,"string"),He.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),He.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=N.encode(e);He.log({setNameData:t}),await this.#Jt([{type:"setName",data:t.buffer}])}static#u=["leftInsole","rightInsole"];static get Types(){return this.#u}get#It(){return Ge.Types}#C;get type(){return this.#C}get typeEnum(){return Ge.Types.indexOf(this.type)}#Cs(e){He.assertEnumWithError(e,this.#It)}#Es(e){He.assertTypeWithError(e,"number"),He.assertWithError(this.#It[e],`invalid typeEnum ${e}`)}#M(e){this.#Cs(e),e!=this.type?(this.#C=e,He.log({updatedType:this.#C}),this.#d({type:"getType",message:{type:this.#C}}),Ge.#Ms&&Ge.#Is(this)):He.log("redundant type assignment")}async#Ls(e){this.#Es(e);const t=Uint8Array.from([e]);He.log({setTypeData:t}),await this.#Jt([{type:"setType",data:t.buffer}])}async setType(e){this.#He(),this.#Cs(e);const t=this.#It.indexOf(e);this.#Ls(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ks=["left","right"];static get InsoleSides(){return this.#ks}get insoleSides(){return Ge.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return J.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#ms=new Z;#Ws={};get sensorConfiguration(){return this.#Ws}get sensorConfigurationData(){return this.#ms.createData(this.sensorConfiguration)}static get MaxSensorRate(){return Z.MaxSensorRate}static get SensorRateStep(){return Z.SensorRateStep}#vs(e){this.#Ws=e,He.log({updatedSensorConfiguration:this.#Ws}),this.#d({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#He(),He.log({newSensorConfiguration:e});const t=this.#ms.createData(e);He.log({setSensorConfigurationData:t}),await this.#Jt([{type:"setSensorConfiguration",data:t.buffer}])}static#Ns=!0;static get ClearSensorConfigurationOnLeave(){return this.#Ns}static set ClearSensorConfigurationOnLeave(e){He.assertTypeWithError(e,"boolean"),this.#Ns=e}#xs=Ge.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#xs}set clearSensorConfigurationOnLeave(e){He.assertTypeWithError(e,"boolean"),this.#xs=e}static#Rs={};static get ZeroSensorConfiguration(){return this.#Rs}static{this.SensorTypes.forEach((e=>{this.#Rs[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#_s=8;static get DefaultNumberOfPressureSensors(){return this.#_s}get numberOfPressureSensors(){return this.#jt.pressureSensorDataManager.numberOfSensors}#jt=new J;#Ht(e,t){He.log({sensorType:e,sensorData:t}),this.#d({type:e,message:t}),this.#d({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#jt.pressureSensorDataManager.resetRange()}#Fs=new Te;static get VibrationLocations(){return Te.Locations}static get VibrationTypes(){return Te.Types}static get VibrationWaveformEffects(){return Te.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return Te.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return Te.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return Te.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return Te.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return Te.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return Te.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#Fs.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:a}=t;n=this.#Fs.createWaveformEffectsData(i,s,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Fs.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}He.log({type:s,dataView:n}),t=C(t,n)})),await this.#Jt([{type:"triggerVibration",data:t.buffer}])}static#Us=[];static get ConnectedDevices(){return this.#Us}static#Ms=!1;static get UseLocalStorage(){return this.#Ms}static set UseLocalStorage(e){this.#As(),He.assertTypeWithError(e,"boolean"),this.#Ms=e,this.#Ms&&!this.#Os&&this.#Ps()}static#$s={devices:[]};static#Os;static get CanUseLocalStorage(){return e&&window.localStorage}static#As(){He.assertWithError(e,"localStorage is only available in the browser"),He.assertWithError(window.localStorage,"localStorage not found")}static#Vs="BS.Device";static#Bs(){this.#As(),localStorage.setItem(this.#Vs,JSON.stringify(this.#Os))}static async#Ps(){this.#As();let e=localStorage.getItem(this.#Vs);if("string"!=typeof e)return He.log("no info found in localStorage"),this.#Os=Object.assign({},this.#$s),void this.#Bs();try{const t=JSON.parse(e);He.log({configuration:t}),this.#Os=t,this.CanGetDevices&&await this.GetDevices()}catch(e){He.error(e)}}static#Is(e){if("webBluetooth"!=e.connectionType)return void He.log("localStorage is only for webBluetooth devices");this.#As();const t=this.#Os.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#Os.devices[t].type=e.type,this.#Bs())}static#zs=[];static get AvailableDevices(){return this.#zs}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void He.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void He.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void He.warn("bluetooth.getDevices() is not available in this browser");this.#Os||this.#Ps();const t=this.#Os;if(!t.devices||0==t.devices.length)return void He.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return He.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#zs.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const a=new Ge,r=new Se;r.device=e,e.name&&a.#de(e.name),a.#M(s.type),a.connectionManager=r,this.AvailableDevices.push(a)})),this.#qs(),this.AvailableDevices}static#js=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#js}static#Hs=new p(this,this.#js);static AddEventListener(e,t,s){this.#Hs.addEventListener(e,t,s)}static#Gs(e){this.#Hs.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Hs.removeEventListener(e,t)}static#Yt(e){if(e.isConnected)if(this.#Us.includes(e))He.log("device already included");else{if(He.log("adding device",e),this.#Us.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#Os.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Os.devices.push(t):this.#Os.devices[s]=t,this.#Bs()}this.#Gs({type:"deviceConnected",message:{device:e}}),this.#Gs({type:"deviceIsConnected",message:{device:e}})}else this.#Us.includes(e)?(He.log("removing device",e),this.#Us.splice(this.#Us.indexOf(e),1),this.#Gs({type:"deviceDisconnected",message:{device:e}}),this.#Gs({type:"deviceIsConnected",message:{device:e}})):He.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));He.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#qs()}}static#qs(){He.log({AvailableDevices:this.AvailableDevices}),this.#Gs({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new Ge;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#Gt=new W;static get FileTypes(){return W.Types}get maxFileLength(){return this.#Gt.maxLength}async sendFile(e,t){const s=this.waitForEvent("fileTransferComplete");this.#Gt.send(e,t),await s}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#Gt.receive(e),await t}get fileTransferStatus(){return this.#Gt.status}cancelFileTransfer(){this.#Gt.cancel()}static get TfliteSensorTypes(){return X.SensorTypes}#Zt=new X;get tfliteName(){return this.#Zt.name}setTfliteName(e){return this.#Zt.setName(e)}static get TfliteTasks(){return X.Tasks}get tfliteTask(){return this.#Zt.task}setTfliteTask(e){return this.#Zt.setTask(e)}get tfliteSampleRate(){return this.#Zt.sampleRate}setTfliteSampleRate(e){return this.#Zt.setSampleRate(e)}get tfliteSensorTypes(){return this.#Zt.sensorTypes}get allowedTfliteSensorTypes(){return this.sensorTypes.filter((e=>X.SensorTypes.includes(e)))}setTfliteSensorTypes(e){return this.#Zt.setSensorTypes(e)}get tfliteIsReady(){return this.#Zt.isReady}get tfliteInferencingEnabled(){return this.#Zt.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#Zt.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#Zt.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#Zt.captureDelay}async setTfliteCaptureDelay(e){return this.#Zt.setCaptureDelay(e)}get tfliteThreshold(){return this.#Zt.threshold}async setTfliteThreshold(e){return this.#Zt.setThreshold(e)}#Kt=new je;#Xt(e){this.#qt.sendSmpMessage(e)}async uploadFirmware(e){return this.#Kt.uploadFirmware(e)}async reset(){return await this.#Kt.reset(),this.#qt.disconnect()}get firmwareStatus(){return this.#Kt.status}async getFirmwareImages(){return this.#Kt.getImages()}get firmwareImages(){return this.#Kt.images}async eraseFirmwareImage(){return this.#Kt.eraseImage()}async confirmFirmwareImage(){return this.#Kt.confirmImage()}async testFirmwareImage(){return this.#Kt.testImage()}#H=0;get mtu(){return this.#H}#bs(e){He.assertTypeWithError(e,"number"),this.#H!=e?(this.#H=e,this.#Kt.mtu=this.mtu,this.#Gt.mtu=this.mtu,this.connectionManager.mtu=this.mtu,this.#d({type:"getMtu",message:{mtu:this.#H}})):He.log("redundant mtu assignment",e)}}const Je=g("BaseScanner");class Qe{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#Ve(){Je.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Be(){Je.assertWithError(this.constructor!=Qe,`${this.constructor.name} must be subclassed`)}constructor(){this.#Be(),this.#Ve(),f(this,this.#Js)}#Js={discoveredDevice:this.#Qs.bind(this),isScanning:this.#Zs.bind(this)};static#g=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#g}get eventTypes(){return Qe.#g}#Qt=new p(this,this.eventTypes);addEventListener(e,t,s){this.#Qt.addEventListener(e,t,s)}dispatchEvent(e){this.#Qt.dispatchEvent(e)}removeEventListener(e,t){return this.#Qt.removeEventListener(e,t)}get isAvailable(){return!1}#Ks(){Je.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#Xs(){Je.assertWithError(this.isScanning,"not scanning")}#Ys(){Je.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#Ks(),this.#Ys()}stopScan(){this.#Xs()}#Zs(){this.isScanning?(this.#en={},this.#tn={}):this.#sn.stop()}#en={};get discoveredDevices(){return this.#en}get discoveredDevicesArray(){return Object.values(this.#en).sort(((e,t)=>this.#tn[e.id]-this.#tn[t.id]))}#nn(e){Je.assertWithError(this.#en[e],`no discovered device with id "${e}"`)}#Qs(e){const t=e.message.discoveredDevice;this.#en[t.id]=t,this.#tn[t.id]=Date.now(),this.#sn.start()}#tn={};static#in=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#in}get#an(){return Qe.DiscoveredDeviceExpirationTimeout}#sn=new y(this.#rn.bind(this),1e3);#rn(){const e=Object.entries(this.#en);if(0==e.length)return void this.#sn.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#tn[e];t-n>this.#an&&(Je.log("discovered device timeout"),delete this.#en[e],delete this.#tn[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#Ks()}get canReset(){return!1}reset(){Je.log("resetting...")}}const Ze=g("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class Ke extends ve{get id(){return this.#on?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#on?.state}async connect(){await super.connect(),await this.#on.connectAsync()}async disconnect(){await super.disconnect(),await this.#on.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);Ze.log({characteristicName:s});const n=this.#it.get(s);Ze.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);Ze.log("writing data",i);await n.writeAsync(i,!0),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#on.connectable}async reconnect(){await super.reconnect(),Ze.log("attempting to reconnect..."),this.connect()}#on;get noblePeripheral(){return this.#on}set noblePeripheral(e){Ze.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(Ze.log("newNoblePeripheral",e.id),this.#on&&(m(this.#on,this.#cn),delete this.#on._connectionManager),e&&(e._connectionManager=this,f(e,this.#cn)),this.#on=e):Ze.log("attempted to assign duplicate noblePeripheral")}#cn={connect:this.#ln,disconnect:this.#hn,rssiUpdate:this.#gn,servicesDiscover:this.#dn};async#ln(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){Ze.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#on.discoverServicesAsync(le),await this.#un()}async#hn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){Ze.log("onNoblePeripheralDisconnect",e.id),await this.#un()}async#un(){switch(Ze.log(`noblePeripheral ${this.id} state ${this.#on.state}`),this.#on.state){case"connected":case"connecting":break;case"disconnected":this.#rt(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":Ze.error("noblePeripheral error");break;default:Ze.log(`uncaught noblePeripheral state ${this.#on.state}`)}}#rt(){Ze.log("removing noblePeripheral eventListeners"),this.#nt.forEach((e=>{m(e,this.#pn)})),this.#nt.clear(),this.#it.forEach((e=>{m(e,this.#fn)})),this.#it.clear()}async#gn(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){Ze.log("onNoblePeripheralRssiUpdate",e.id,t)}async#dn(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){Ze.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];Ze.log("service",s.uuid);const n=he(s.uuid);Ze.assertWithError(n,`no name found for service uuid "${s.uuid}"`),Ze.log({serviceName:n}),this.#nt.set(n,s),s._name=n,s._connectionManager=this,f(s,this.#pn),await s.discoverCharacteristicsAsync()}}#nt=new Map;#pn={characteristicsDiscover:this.#mn};async#mn(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){Ze.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];Ze.log("characteristic",s.uuid);const n=pe(s.uuid);Ze.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),Ze.log({characteristicName:n}),this.#it.set(n,s),s._name=n,s._connectionManager=this,f(s,this.#fn),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#vn&&(this.status="connected")}#fn={data:this.#yn,write:this.#bn,notify:this.#Sn};#it=new Map;get#vn(){return ue.every((e=>this.#it.has(e)))}#yn(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){Ze.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(E(t)),i=e._name;Ze.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#bn(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){Ze.log("onNobleCharacteristicWrite",e.uuid)}#Sn(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){Ze.log("onNobleCharacteristicNotify",e.uuid,t)}}const Xe=g("NobleScanner",{log:!0});let Ye=!1;if(t){var et=require("@abandonware/noble");Ye=!0}class tt extends Qe{static get isSupported(){return Ye}#Dn=!1;get#wn(){return this.#Dn}set#wn(e){Xe.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Dn=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):Xe.log("duplicate isScanning assignment")}get isScanning(){return this.#wn}#Tn="unknown";get#Cn(){return this.#Tn}set#Cn(e){Xe.assertTypeWithError(e,"string"),this.#Cn!=e?(this.#Tn=e,Xe.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):Xe.log("duplicate nobleState assignment")}#En={scanStart:this.#Mn.bind(this),scanStop:this.#In.bind(this),stateChange:this.#Ln.bind(this),discover:this.#kn.bind(this)};#Mn(){Xe.log("OnNobleScanStart"),this.#wn=!0}#In(){Xe.log("OnNobleScanStop"),this.#wn=!1}#Ln(e){Xe.log("onNobleStateChange",e),this.#Cn=e}#kn(e){let t;Xe.log("onNobleDiscover",e.id),this.#Wn[e.id]||(e._scanner=this,this.#Wn[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=Ge.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),f(et,this.#En),f(this,this.#Nn)}get isAvailable(){return"poweredOn"==this.#Cn}startScan(){super.startScan(),et.startScanningAsync(oe,!0)}stopScan(){super.stopScan(),et.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),et.reset()}#Nn={expiredDiscoveredDevice:this.#xn.bind(this)};#xn(e){const t=e.message.discoveredDevice;this.#Wn[t.id]&&delete this.#Wn[t.id]}#Wn={};#Rn(e){Xe.assertTypeWithError(e,"string"),Xe.assertWithError(this.#Wn[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#Rn(e);const t=this.#Wn[e];Xe.log("connecting to discoveredDevice...",e);let s=Ge.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#_n(t),await s.connect())}#_n(e){const t=new Ge,s=new Ke;return s.noblePeripheral=e,t.connectionManager=s,t}}const st=g("Scanner",{log:!1});let nt;tt.isSupported?(st.log("using NobleScanner"),nt=new tt):st.log("Scanner not available");var it=nt;const at=g("DevicePairPressureSensorDataManager",{log:!0});class rt{static get Sides(){return Ge.InsoleSides}get sides(){return Ge.InsoleSides}#Fn={};#Z=new A;resetPressureRange(){this.#Z.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(at.log({pressure:t,insoleSide:s}),this.#Fn[s]=t,this.#Un)return this.#An();at.log("doesn't have all pressure data yet...")}get#Un(){return this.sides.every((e=>e in this.#Fn))}#An(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Fn[t].rawSum,e.normalizedSum+=this.#Fn[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Fn[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#Z.updateAndGetNormalization(e.center)),at.log({devicePairPressure:e}),e}}const ot=g("DevicePairSensorDataManager",{log:!0});class ct{static get Sides(){return Ge.InsoleSides}get sides(){return Ge.InsoleSides}#On={};pressureSensorDataManager=new rt;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(ot.log({sensorType:s,timestamp:t,event:e}),this.#On[s]||(this.#On[s]={}),this.#On[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else ot.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#On[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else ot.log("no value received")}onDataReceived}const lt=g("DevicePair",{log:!0});class ht{constructor(){this.#jt.onDataReceived=this.#Ht.bind(this)}static#g=["isConnected","pressure",...Ge.EventTypes.map((e=>`device${d(e)}`))];static get EventTypes(){return this.#g}get eventTypes(){return ht.#g}#Qt=new p(this,this.eventTypes);addEventListener(e,t,s){this.#Qt.addEventListener(e,t,s)}#d(e){this.#Qt.dispatchEvent(e)}removeEventListener(e,t){return this.#Qt.removeEventListener(e,t)}static get Sides(){return Ge.InsoleSides}get sides(){return ht.Sides}#Pn;get left(){return this.#Pn}#$n;get right(){return this.#$n}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#He(){lt.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void lt.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&m(s,this.#Vn),f(e,this.#Vn),t){case"left":this.#Pn=e;break;case"right":this.#$n=e}return lt.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#d({type:"isConnected",message:{isConnected:this.isConnected}}),this.#d({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}lt.log("device already assigned")}#Vn={connectionStatus:this.#Bn.bind(this),isConnected:this.#zn.bind(this),sensorData:this.#qn.bind(this),getSensorConfiguration:this.#Bn.bind(this)};#Bn(e){this.#d({type:`device${d(e.type)}`,message:{...e.message,device:e.target}})}#zn(e){this.#Bn(e),this.#d({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#jt=new ct;#qn(e){this.#Bn(e),this.#d({type:`device${d(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#jt.onDeviceSensorData(e)}#Ht(e,t){lt.log({sensorType:e,sensorData:t}),this.#d({type:e,message:t})}resetPressureRange(){this.#jt.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#jn=new ht;static get shared(){return this.#jn}static{Ge.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#jn.assignInsole(t)}))}}const gt=g("ServerUtils",{log:!1}),dt=3e7;function ut(e,...t){gt.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=C(...t.data),n=s.byteLength;gt.assertEnumWithError(t.type,e);return C(e.indexOf(t.type),Uint16Array.from([n]),s)}));return gt.log("messageBuffers",...s),C(...s)}const pt=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function ft(...e){return ut(pt,...e)}function mt(...e){return gt.log("createDeviceMessage",...e),ut(Ge.EventTypes,...e)}function vt(...e){return ut(ee.MessageTypes,...e)}const yt=ft("ping"),bt=ft("pong");ft("isScanningAvailable"),ft("isScanning"),ft("startScan"),ft("stopScan");const St=ft("discoveredDevices"),Dt=g("WebSocketClientConnectionManager",{log:!0});class wt extends ee{static get isSupported(){return e}static get type(){return"webSocketClient"}#Hn;get id(){return this.#Hn}set id(e){Dt.assertTypeWithError(e,"string"),this.#Hn!=e?this.#Hn=e:Dt.log("redundant id assignment")}#is=!1;get isConnected(){return this.#is}set isConnected(e){Dt.assertTypeWithError(e,"boolean"),this.#is!=e?(this.#is=e,this.status=this.#is?"connected":"not connected",this.#is&&this.#Gn()):Dt.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":case"setFileTransferType":case"setFileLength":case"setFileChecksum":case"setFileTransferCommand":case"setFileTransferBlock":case"setTfliteName":case"setTfliteTask":case"setTfliteSensorTypes":case"setTfliteSampleRate":case"setTfliteThreshold":case"setTfliteCaptureDelay":case"setTfliteInferencingEnabled":case"smp":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":Dt.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),Dt.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){Dt.log({dataView:e}),H(e,Ge.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));Dt.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":case"maxFileLength":case"getFileChecksum":case"getFileLength":case"getFileTransferType":case"getFileTransferBlock":case"fileTransferStatus":case"getTfliteName":case"getTfliteTask":case"getTfliteSampleRate":case"getTfliteSensorTypes":case"tfliteModelIsReady":case"getTfliteCaptureDelay":case"getTfliteThreshold":case"getTfliteInferencingEnabled":case"tfliteModelInference":case"getMtu":case"smp":this.onMessageReceived(s,t);break;default:Dt.error(`uncaught messageType "${s}"`)}}),!0)}#Gn(){this.sendWebSocketMessage(...Ge.AllInformationConnectionMessages)}}const Tt=g("WebSocketClient",{log:!0});class Ct{static#g=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#g}get eventTypes(){return Ct.#g}#Qt=new p(this,this.eventTypes);addEventListener(e,t,s){this.#Qt.addEventListener(e,t,s)}#d(e){this.#Qt.dispatchEvent(e)}removeEventListener(e,t){return this.#Qt.removeEventListener(e,t)}#Jn;get webSocket(){return this.#Jn}set webSocket(e){this.#Jn!=e?(Tt.log("assigning webSocket",e),this.#Jn&&m(this.#Jn,this.#Qn),f(e,this.#Qn),this.#Jn=e,Tt.log("assigned webSocket")):Tt.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Zn(){Tt.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Kn(){Tt.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#Kn(),this.#Xn="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Zn(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Xn="disconnecting",this.webSocket.close()}reconnect(){this.#Kn(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#ls=!0;static get ReconnectOnDisconnection(){return this.#ls}static set ReconnectOnDisconnection(e){Tt.assertTypeWithError(e,"boolean"),this.#ls=e}#hs=Ct.#ls;get reconnectOnDisconnection(){return this.#hs}set reconnectOnDisconnection(e){Tt.assertTypeWithError(e,"boolean"),this.#hs=e}#Yn(e){this.#Zn(),this.#Jn.send(e)}#ei(...e){this.#Yn(ft(...e))}#Qn={open:this.#ti.bind(this),message:this.#si.bind(this),close:this.#ni.bind(this),error:this.#ii.bind(this)};#ti(e){Tt.log("webSocket.open",e),this.#ai.start(),this.#Xn="connected"}async#si(e){Tt.log("webSocket.message",e),this.#ai.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#ri(s)}#ni(e){Tt.log("webSocket.close",e),this.#Xn="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#ai.stop(),this.#hs&&setTimeout((()=>{this.reconnect()}),3e3)}#ii(e){Tt.log("webSocket.error",e)}#oi="not connected";get#Xn(){return this.#oi}set#Xn(e){switch(Tt.assertTypeWithError(e,"string"),Tt.log({newConnectionStatus:e}),this.#oi=e,this.#d({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#d({type:this.connectionStatus}),e){case"connected":case"not connected":this.#d({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#ei("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#ci=!1,this.#wn=!1)}}get connectionStatus(){return this.#Xn}#ri(e){Tt.log("parseMessage",{dataView:e}),H(e,pt,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#li();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));Tt.log({isScanningAvailable:e}),this.#ci=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));Tt.log({isScanning:e}),this.#wn=e}break;case"discoveredDevice":{const{string:e}=j(t,n);Tt.log({discoveredDeviceString:e});const s=JSON.parse(e);Tt.log({discoveredDevice:s}),this.#Qs(s)}break;case"expiredDiscoveredDevice":{const{string:e}=j(t,n);this.#xn(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=j(t,n);Tt.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);Tt.log({connectedDeviceIds:s}),this.#hi(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=j(t,n);n=s;const i=this.#gi[e];Tt.assertWithError(i,`no device found for id ${e}`);const a=i.connectionManager,r=I(t,n);a.onWebSocketMessage(r)}break;default:Tt.error(`uncaught messageType "${s}"`)}}),!0)}#ai=new y(this.#di.bind(this),dt);#di(){this.#ei("ping")}#li(){this.#ei("pong")}#ui=!1;get#ci(){return this.#ui}set#ci(e){Tt.assertTypeWithError(e,"boolean"),this.#ui=e,this.#d({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#pi()}get isScanningAvailable(){return this.#ci}#fi(){this.#Zn(),Tt.assertWithError(this.isScanningAvailable,"scanning is not available")}#mi(){this.#ei("isScanningAvailable")}#Dn=!1;get#wn(){return this.#Dn}set#wn(e){Tt.assertTypeWithError(e,"boolean"),this.#Dn=e,this.#d({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#wn}#pi(){this.#ei("isScanning")}#Xs(){Tt.assertWithError(this.isScanning,"is not scanning")}#Ys(){Tt.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Ys(),this.#ei("startScan")}stopScan(){this.#Xs(),this.#ei("stopScan")}toggleScan(){this.#fi(),this.isScanning?this.stopScan():this.startScan()}#en={};get discoveredDevices(){return this.#en}#Qs(e){Tt.log({discoveredDevice:e}),this.#en[e.id]=e,this.#d({type:"discoveredDevice",message:{discoveredDevice:e}})}#vi(){this.#Yn(St)}#xn(e){Tt.log({expiredDeviceId:e});const t=this.#en[e];t?(Tt.log({expiredDiscoveredDevice:t}),delete this.#en[e],this.#d({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Tt.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#yi(e)}#yi(e){this.#Zn(),Tt.assertTypeWithError(e,"string");const t=this.#bi(e);return t.connect(),t}#Si(e){this.#Yn(this.#Di(e))}#Di(e){return ft({type:"connectToDevice",data:e})}#_n(e){const t=new Ge,s=new wt;return s.id=e,s.sendWebSocketMessage=this.#wi.bind(this,e),s.sendWebSocketConnectMessage=this.#Si.bind(this,e),s.sendWebSocketDisconnectMessage=this.#Ti.bind(this,e),t.connectionManager=s,t}#bi(e){let t=this.#gi[e];return t||(t=this.#_n(e),this.#gi[e]=t),t}#hi(e){Tt.log({deviceIds:e}),e.forEach((e=>{this.#bi(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#Ci(e)}#Ci(e){this.#Zn(),Tt.assertTypeWithError(e,"string");const t=this.devices[e];return Tt.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#Ti(e){this.#Yn(this.#Ei(e))}#Ei(e){return ft({type:"disconnectFromDevice",data:e})}#wi(e,...t){this.#Yn(this.#Mi(e,...t))}#Mi(e,...t){return ft({type:"deviceMessage",data:[e,vt(...t)]})}#gi={};get devices(){return this.#gi}}const Et=g("BaseServer",{log:!0});class Mt{#Be(){Et.assertWithError(this.constructor!=Mt,`${this.constructor.name} must be subclassed`)}static#g=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#g}get eventTypes(){return Mt.#g}#Qt=new p(this,this.eventTypes);addEventListener(e,t,s){this.#Qt.addEventListener(e,t,s)}dispatchEvent(e){this.#Qt.dispatchEvent(e)}removeEventListener(e,t){return this.#Qt.removeEventListener(e,t)}constructor(){this.#Be(),Et.assertWithError(it,"no scanner defined"),f(it,this.#Ii),f(Ge,this.#Li),f(this,this.#ki)}get numberOfClients(){return 0}static#Wi=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#Wi}static set ClearSensorConfigurationsWhenNoClients(e){Et.assertTypeWithError(e,"boolean"),this.#Wi=e}#Ni=Mt.#Wi;get clearSensorConfigurationsWhenNoClients(){return this.#Ni}set clearSensorConfigurationsWhenNoClients(e){Et.assertTypeWithError(e,"boolean"),this.#Ni=e}#ki={clientConnected:this.#xi.bind(this),clientDisconnected:this.#Ri.bind(this)};#xi(e){e.message.client,Et.log("onClientConnected")}#Ri(e){e.message.client,Et.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&Ge.ConnectedDevices.forEach((e=>{e.clearSensorConfiguration(),e.setTfliteInferencingEnabled(!1)}))}broadcastMessage(e){Et.log("broadcasting",e)}#Ii={isAvailable:this.#_i.bind(this),isScanning:this.#Fi.bind(this),discoveredDevice:this.#Ui.bind(this),expiredDiscoveredDevice:this.#xn.bind(this)};#_i(e){this.broadcastMessage(this.#Ai)}get#Ai(){return ft({type:"isScanningAvailable",data:it.isAvailable})}#Fi(e){this.broadcastMessage(this.#Oi)}get#Oi(){return ft({type:"isScanning",data:it.isScanning})}#Ui(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#Pi(t))}#Pi(e){return ft({type:"discoveredDevice",data:e})}#xn(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#$i(t))}#$i(e){return ft({type:"expiredDiscoveredDevice",data:e.id})}get#Vi(){return ft(...it.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#Bi(){return ft({type:"connectedDevices",data:JSON.stringify(Ge.ConnectedDevices.map((e=>e.id)))})}#zi={connectionMessage:this.#qi.bind(this)};#Mi(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#qi(e){const t=e.target;if(Et.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#ji(t,this.#Mi(t,s,n)))}#Li={deviceConnected:this.#Hi.bind(this),deviceDisconnected:this.#Gi.bind(this),deviceIsConnected:this.#zn.bind(this)};#Hi(e){const t=e.message.device;Et.log("onDeviceConnected",t.id),f(t,this.#zi)}#Gi(e){const t=e.message.device;Et.log("onDeviceDisconnected",t.id),m(t,this.#zi)}#zn(e){const t=e.message.device;Et.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#Ji(t))}#Ji(e){return this.#ji(e,{type:"isConnected",data:e.isConnected})}#ji(e,...t){return ft({type:"deviceMessage",data:[e.id,mt(...t)]})}parseClientMessage(e){let t=[];if(H(e,pt,((e,s)=>{const n=e;switch(n){case"ping":t.push(bt);break;case"pong":break;case"isScanningAvailable":t.push(this.#Ai);break;case"isScanning":t.push(this.#Oi);break;case"startScan":it.startScan();break;case"stopScan":it.stopScan();break;case"discoveredDevices":t.push(this.#Vi);break;case"connectToDevice":{const{string:e}=j(s);it.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=j(s),t=Ge.ConnectedDevices.find((t=>t.id==e));if(!t){Et.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#Bi);break;case"deviceMessage":{const{string:e,byteOffset:n}=j(s),i=Ge.ConnectedDevices.find((t=>t.id==e));if(!i){Et.error(`no device found with id ${e}`);break}const a=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,a))}break;default:Et.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return C(t)}parseClientDeviceMessage(e,t){Et.log("onDeviceMessage",e.id,t);let s=[];if(H(t,ee.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":case"getMtu":case"maxFileLength":case"getFileChecksum":case"getFileLength":case"getFileTransferType":case"getFileTransferBlock":case"fileTransferStatus":case"getTfliteName":case"getTfliteTask":case"getTfliteSampleRate":case"getTfliteSensorTypes":case"tfliteModelIsReady":case"getTfliteCaptureDelay":case"getTfliteThreshold":case"getTfliteInferencingEnabled":case"tfliteModelInference":s.push(this.#Mi(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":case"setFileTransferType":case"setFileLength":case"setFileChecksum":case"setFileTransferCommand":case"setFileTransferBlock":case"setTfliteName":case"setTfliteTask":case"setTfliteSensorTypes":case"setTfliteSampleRate":case"setTfliteThreshold":case"setTfliteCaptureDelay":case"setTfliteInferencingEnabled":case"smp":e.connectionManager.sendMessage(i,n);break;default:Et.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#ji(e,...s)}}const It=g("WebSocketServer",{log:!0});t&&require("ws");var Lt={setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:Ge,DevicePair:ht,WebSocketClient:Ct,WebSocketServer:class extends Mt{get numberOfClients(){return this.#Qi?.clients.size||0}#Qi;get server(){return this.#Qi}set server(e){this.#Qi!=e?(It.log("assigning server..."),this.#Qi&&(It.log("clearing existing server..."),m(this.#Qi,this.#ki)),f(e,this.#ki),this.#Qi=e,It.log("assigned server")):It.log("redundant WebSocket assignment")}#ki={close:this.#Zi.bind(this),connection:this.#Ki.bind(this),error:this.#Xi.bind(this),headers:this.#Yi.bind(this),listening:this.#ea.bind(this)};#Zi(){It.log("server.close")}#Ki(e){It.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new y((()=>this.#ta(e)),dt),e.pingClientTimer.start(),f(e,this.#sa),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#Xi(e){It.error(e)}#Yi(){}#ea(){It.log("server.listening")}#sa={open:this.#na.bind(this),message:this.#ia.bind(this),close:this.#aa.bind(this),error:this.#ra.bind(this)};#na(e){It.log("client.open")}#ia(e){It.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(E(e.data));this.#oa(t,s)}#aa(e){It.log("client.close");const t=e.target;t.pingClientTimer.stop(),m(t,this.#sa),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#ra(e){It.log("client.error")}#oa(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#ta(e){e.isAlive?(e.isAlive=!1,e.send(yt)):e.terminate()}},Scanner:it};export{Lt as default};
