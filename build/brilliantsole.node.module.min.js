/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
import e from"webbluetooth";import t from"@abandonware/noble";import"ws";const s=!0,n="undefined"!=typeof window&&"undefined"!==window?.document,i="undefined"!=typeof process&&null!=process?.versions?.node,r=n&&navigator.userAgent.includes("Bluefy"),a=n&&navigator.userAgent.includes("WebBLE");n&&navigator.userAgent.includes("Android"),n&&navigator.userAgent.includes("Safari");var o;if(!n&&!i&&"undefined"!=typeof global&&"undefined"!=typeof Studio){const e=function(...e){Studio.log(e.map((e=>new String(e))).join(","))};(o={}).log=e,o.warn=e.bind(o,"WARNING"),o.error=e.bind(o,"ERROR")}else o=console;if(!o.assert){const e=(e,...t)=>{e||o.warn(...t)};o.assert=e}if(!o.table){const e=(...e)=>{o.log(...e)};o.table=e}function c(){}const h=o.log.bind(o),l=o.warn.bind(o),g=o.error.bind(o),u=o.table.bind(o),d=o.assert.bind(o);class p{static#e={};constructor(e){if(p.#e[e])throw new Error(`"${e}" console already exists`);p.#e[e]=this}#t={log:s,warn:s,assert:!0,error:!0,table:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new p(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?h:c}get warn(){return this.#t.warn?l:c}get error(){return this.#t.error?g:c}get assert(){return this.#t.assert?d:c}get table(){return this.#t.table?u:c}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function f(e,t){return p.create(e,t)}function m(e,t){p.setLevelFlagsForType(e,t)}function v(e){p.setAllLevelFlags(e)}function y(e){return e[0].toUpperCase()+e.slice(1)}const b=f("EventDispatcher",{log:!1});class S{constructor(e,t){b.assertWithError(e,"target is required"),this.#s=e,b.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){b.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(b.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return b.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(b.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){b.error(e)}}}waitForEvent(e){return b.log(`waiting for event "${e}"`),this.#r(e),new Promise((t=>{this.addEventListener(e,(e=>{t(e)}),{once:!0})}))}}function T(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;b.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function E(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;b.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const w=f("Timer",{log:!1});class C{#o;get callback(){return this.#o}set callback(e){w.assertTypeWithError(e,"function"),w.log({newCallback:e}),this.#o=e,this.isRunning&&this.restart()}#c;get interval(){return this.#c}set interval(e){w.assertTypeWithError(e,"number"),w.assertWithError(e>0,"interval must be above 0"),w.log({newInterval:e}),this.#c=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#h=null;get isRunning(){return null!=this.#h}start(){this.isRunning?w.log("interval already running"):(w.log("starting interval"),this.#h=setInterval(this.#o,this.#c))}stop(){this.isRunning?(w.log("stopping interval"),clearInterval(this.#h),this.#h=null):w.log("interval already not running")}restart(){this.stop(),this.start()}}function D(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}f("checksum",{log:!0});const M=new Uint32Array(256);for(let e=0;e<256;++e)M[e]=D(e);function I(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(M[n^i]^s>>>8)>>>0}return s}var L,k;L="undefined"==typeof TextEncoder?class{encode(e){const t=Array.from(e).map((e=>e.charCodeAt(0)));return Uint8Array.from(t)}}:TextEncoder,k="undefined"==typeof TextDecoder?class{decode(e){return Array.from(new Uint8Array(e)).map((e=>String.fromCharCode(e))).join("")}}:TextDecoder;const N=new L,x=new k,U=f("ArrayBufferUtils",{log:!1});function _(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return W(e)}if(e instanceof Array){return _(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return W(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function R(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function W(e){const t=N.encode(e);return _(t.byteLength,t)}function F(e,t,s){let n;return null!=s&&(n=e.byteOffset+t+s),U.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}async function A(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}const O=f("FileTransferManager",{log:!0});class P{static#l=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#l}get messageTypes(){return P.MessageTypes}static#g=[...this.#l,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#g}get eventTypes(){return P.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#d=["tflite"];static get Types(){return this.#d}get types(){return P.Types}#p(e){O.assertEnumWithError(e,this.types)}#f(e){O.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#m=["idle","sending","receiving"];static get Statuses(){return this.#m}get statuses(){return P.Statuses}#v(e){O.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#y=["startSend","startReceive","cancel"];static get Commands(){return this.#y}get commands(){return P.Commands}#b(e){O.assertEnumWithError(e,this.commands)}static#S=0;static get MaxLength(){return this.#S}#T=P.MaxLength;get maxLength(){return this.#T}#E(e){O.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);O.log(`maxLength: ${t/1024}kB`),this.#T=t}#w(e){O.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#C;get type(){return this.#C}#D(e){O.log("parseFileType",e);const t=e.getUint8(0);this.#f(t);const s=this.types[t];this.#M(s)}#M(e){O.log({fileTransferType:e}),this.#C=e,this.#u({type:"getFileTransferType",message:{fileType:e}})}async#I(e,t){if(this.#p(e),this.type==e)return void O.log(`redundant type assignment ${e}`);const s=this.waitForEvent("getFileTransferType"),n=this.types.indexOf(e);this.sendMessage([{type:"setFileTransferType",data:Uint8Array.from([n]).buffer}],t),await s}#L=0;get length(){return this.#L}#k(e){O.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#N(t)}#N(e){O.log(`length: ${e/1024}kB`),this.#L=e,this.#u({type:"getFileLength",message:{fileLength:e}})}async#x(e,t){if(O.assertTypeWithError(e,"number"),this.#w(e),this.length==e)return void O.log(`redundant length assignment ${e}`);const s=this.waitForEvent("getFileLength"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileLength",data:n.buffer}],t),await s}#U=0;get checksum(){return this.#U}#_(e){O.log("checksum",e);const t=e.getUint32(0,!0);this.#R(t)}#R(e){O.log({checksum:e}),this.#U=e,this.#u({type:"getFileChecksum",message:{fileChecksum:e}})}async#W(e,t){if(O.assertTypeWithError(e,"number"),this.checksum==e)return void O.log(`redundant checksum assignment ${e}`);const s=this.waitForEvent("getFileChecksum"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileChecksum",data:n.buffer}],t),await s}async#F(e,t){this.#b(e);const s=this.waitForEvent("fileTransferStatus"),n=this.commands.indexOf(e);this.sendMessage([{type:"setFileTransferCommand",data:Uint8Array.from([n]).buffer}],t),await s}#A="idle";get status(){return this.#A}#O(e){O.log("parseFileStatus",e);const t=e.getUint8(0);this.#v(t);const s=this.statuses[t];this.#P(s)}#P(e){O.log({status:e}),this.#A=e,this.#u({type:"fileTransferStatus",message:{fileTransferStatus:e}}),this.#$.length=0}#V(){O.assertWithError("idle"==this.#A,"status is not idle")}#B(){O.assertWithError("idle"!=this.#A,"status is idle")}#$=[];async#z(e){O.log("parseFileBlock",e),this.#$.push(e.buffer);const t=this.#$.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#L;if(O.log(`received ${t} of ${this.#L} bytes (${100*s}%)`),this.#u({type:"fileTransferProgress",message:{progress:s}}),t!=this.#L)return;O.log("file transfer complete");let n,i=(new Date).toLocaleString();if("tflite"===this.type)i+=".tflite";n="undefined"!=typeof File?new File(this.#$,i):new Blob(this.#$);const r=I(await n.arrayBuffer());O.log({checksum:r}),r==this.#U?(O.log("received file",n),this.#u({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#u({type:"fileReceived",message:{file:n}})):O.error(`wrong checksum - expected ${this.#U}, got ${r}`)}parseMessage(e,t){switch(O.log({messageType:e}),e){case"maxFileLength":this.#E(t);break;case"getFileTransferType":case"setFileTransferType":this.#D(t);break;case"getFileLength":case"setFileLength":this.#k(t);break;case"getFileChecksum":case"setFileChecksum":this.#_(t);break;case"fileTransferStatus":this.#O(t);break;case"getFileTransferBlock":this.#z(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#V(),this.#p(e);const s=await A(t),n=[];n.push(this.#I(e,!1));const i=s.byteLength;n.push(this.#x(i,!1));const r=I(s);n.push(this.#W(r,!1)),n.push(this.#F("startSend",!1)),this.sendMessage(),await Promise.all(n),await this.#q(s)}async#q(e){return this.#j(e)}async#j(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+(this.mtu-3-3));O.log("slicedBuffer",s);const n=1-(e.byteLength-t)/e.byteLength;if(O.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#u({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage([{type:"setFileTransferBlock",data:s}]),this.#j(e,t+s.byteLength);O.log("finished sending buffer"),this.#u({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#V(),this.#p(e),await this.#I(e),await this.#F("startReceive")}async cancel(){this.#B(),await this.#F("cancel")}sendMessage;mtu}const $=65536;function V(e,t){const s=Date.now();var n;return(n=s)-n%$+e.getUint16(t,!0)}const B={min:1/0,max:-1/0,range:0};class z{#H=Object.assign({},B);reset(){Object.assign(this.#H,B)}update(e){this.#H.min=Math.min(e,this.#H.min),this.#H.max=Math.max(e,this.#H.max),this.#H.range=this.#H.max-this.#H.min}getNormalization(e){return this.#H.range*e||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class q{#H={x:new z,y:new z};reset(){this.#H.x.reset(),this.#H.y.reset()}update(e){this.#H.x.update(e.x),this.#H.y.update(e.y)}getNormalization(e){return{x:this.#H.x.getNormalization(e.x),y:this.#H.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const j=f("PressureSensorDataManager",{log:!0});class H{static#d=["pressure"];static get Types(){return this.#d}#G=[];get positions(){return this.#G}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;j.log({positions:t}),this.#G=t,this.#Q=(s=this.numberOfSensors,n=()=>new z,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#Q;#J=new q;resetRange(){this.#Q.forEach((e=>e.reset())),this.#J.reset()}parseData(e,t){const s={sensors:[],scaledSum:0,normalizedSum:0};for(let n=0,i=0;i<e.byteLength;n++,i+=2){const r=e.getUint16(i,!0),a=r*t,o=this.#Q[n].updateAndGetNormalization(a),c=this.positions[n];s.sensors[n]={rawValue:r,scaledValue:a,normalizedValue:o,position:c,weightedValue:0},s.scaledSum+=a,s.normalizedSum+=o/this.numberOfSensors}return s.scaledSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.scaledValue/s.scaledSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#J.updateAndGetNormalization(s.center)),j.log({pressure:s}),s}}const G=f("MotionSensorDataManager",{log:!0});class Q{static#d=["acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","orientation","activity","stepCounter","stepDetector","deviceOrientation"];static get Types(){return this.#d}static#Z=6;static get Vector3Size(){return this.#Z}get vector3Size(){return Q.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return G.log({vector:r}),r}static#K=8;static get QuaternionSize(){return this.#K}get quaternionSize(){return Q.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return G.log({quaternion:a}),a}static#X=6;static get EulerSize(){return this.#X}get eulerSize(){return Q.EulerSize}parseEuler(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));n*=-1,s*=-1;const r={heading:s,pitch:n,roll:i};return G.log({euler:r}),r}parseStepCounter(e){G.log("parseStepCounter",e);const t=e.getUint32(0,!0);return G.log({stepCount:t}),t}static#Y=["still","walking","running","bicycle","vehicle","tilting"];static get ActivityTypes(){return this.#Y}get#ee(){return Q.#Y}parseActivity(e){G.log("parseActivity",e);const t={},s=e.getUint8(0);return G.log("activityBitfield",s.toString(2)),this.#ee.forEach(((e,n)=>{t[e]=Boolean(s&1<<n)})),G.log("activity",t),t}static#te=["portraitUpright","landscapeLeft","portraitUpsideDown","landscapeRight","unknown"];static get DeviceOrientations(){return this.#te}get#se(){return Q.#te}parseDeviceOrientation(e){G.log("parseDeviceOrientation",e);const t=e.getUint8(0),s=this.#se[t];return G.assertWithError(s,"undefined deviceOrientation"),G.log({deviceOrientation:s}),s}}const J=f("BarometerSensorDataManager",{log:!0});class Z{static#d=["barometer"];static get Types(){return this.#d}#ne(e){const t=.0065;return 288.15/t*(1-Math.pow(e/101325,.19026643566373183))}parseData(e,t){const s=e.getUint32(0,!0)*t,n=this.#ne(s);return J.log({pressure:s,altitude:n}),{pressure:s}}}const K=f("ParseUtils",{log:!0});function X(e,t=0){const s=e.getUint8(t++);return{string:x.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function Y(e,t,s,n,i=!1){let r=0;for(;r<e.byteLength;){const a=e.getUint8(r++),o=t[a];let c;i?(c=e.getUint16(r,!0),r+=2):c=e.getUint8(r++),K.log({messageTypeEnum:a,messageType:o,messageLength:c,dataView:e,byteOffset:r}),K.assertWithError(o,`invalid messageTypeEnum ${a}`);const h=F(e,r,c);K.log({_dataView:h}),s(o,h,n),r+=c}}const ee=f("SensorDataManager",{log:!0});class te{static#l=["getPressurePositions","getSensorScalars","sensorData"];static get MessageTypes(){return this.#l}get messageTypes(){return te.MessageTypes}pressureSensorDataManager=new H;motionSensorDataManager=new Q;barometerSensorDataManager=new Z;static#d=[...H.Types,...Q.Types,...Z.Types];static get Types(){return this.#d}get types(){return te.Types}#ie=new Map;static AssertValidSensorType(e){ee.assertTypeWithError(e,"string"),ee.assertWithError(this.#d.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){ee.assertTypeWithError(e,"number"),ee.assertWithError(e in this.#d,`invalid sensorTypeEnum ${e}`)}static#g=[...this.#l,...this.#d];static get EventTypes(){return this.#g}get eventTypes(){return te.#g}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#re(e){ee.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=V(e,t);t+=2;Y(new DataView(e.buffer,t),te.Types,this.#ae.bind(this),{timestamp:s})}#ae(e,t,{timestamp:s}){const n=this.#ie.get(e);let i=null;switch(e){case"pressure":i=this.pressureSensorDataManager.parseData(t,n);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(t,n);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(t,n);break;case"orientation":i=this.motionSensorDataManager.parseEuler(t,n);break;case"stepCounter":i=this.motionSensorDataManager.parseStepCounter(t);break;case"stepDetector":i={};break;case"activity":i=this.motionSensorDataManager.parseActivity(t);break;case"deviceOrientation":i=this.motionSensorDataManager.parseDeviceOrientation(t);break;case"barometer":i=this.barometerSensorDataManager.parseData(t,n);break;default:ee.error(`uncaught sensorType "${e}"`)}ee.assertWithError(null!=i,`no sensorData defined for sensorType "${e}"`),ee.log({sensorType:e,sensorData:i,sensorData:i}),this.#u({type:e,message:{[e]:i,timestamp:s}}),this.#u({type:"sensorData",message:{[e]:i,sensorType:e,timestamp:s}})}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=te.Types[s];if(!n){ee.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);ee.log({sensorType:n,sensorScalar:i}),this.#ie.set(n,i)}}parseMessage(e,t){switch(ee.log({messageType:e}),e){case"getSensorScalars":this.parseScalars(t);break;case"getPressurePositions":this.pressureSensorDataManager.parsePositions(t);break;case"sensorData":this.#re(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const se=f("SensorConfigurationManager",{log:!0});class ne{static#l=["getSensorConfiguration","setSensorConfiguration"];static get MessageTypes(){return this.#l}get messageTypes(){return ne.MessageTypes}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return ne.#g}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static get#oe(){return te.Types}get#ce(){return ne.#oe}#he;#le(e){se.assertWithError(this.#he,"must get initial sensorConfiguration");const t=this.#he?.includes(e);return se.assert(t,`unavailable sensor type "${e}"`),t}#ge;get configuration(){return this.#ge}#ue(e){this.#ge=e,se.log({updatedConfiguration:this.#ge}),this.#u({type:"getSensorConfiguration",message:{sensorConfiguration:this.configuration}})}async setConfiguration(e){se.log({newSensorConfiguration:e});const t=this.#de(e);se.log({setSensorConfigurationData:t});const s=this.waitForEvent("getSensorConfiguration");this.sendMessage([{type:"setSensorConfiguration",data:t.buffer}]),await s}#pe(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=te.Types[n];if(!i){se.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);se.log({sensorType:i,sensorRate:r}),t[i]=r}return se.log({parsedSensorConfiguration:t}),this.#he=Object.keys(t),t}static#fe=65535;static get MaxSensorRate(){return this.#fe}get maxSensorRate(){return ne.MaxSensorRate}static#me=5;static get SensorRateStep(){return this.#me}get sensorRateStep(){return ne.SensorRateStep}static#ve(e){se.assertTypeWithError(e,"number"),se.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),se.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),se.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ye(e){ne.#ve(e)}#de(e){let t=Object.keys(e);t=t.filter((e=>this.#le(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{te.AssertValidSensorType(t);const i=te.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#ye(r),s.setUint16(3*n+1,e[t],!0)})),se.log({sensorConfigurationData:s}),s}static#be={};static get ZeroSensorConfiguration(){return this.#be}static{this.#oe.forEach((e=>{this.#be[e]=0}))}get zeroSensorConfiguration(){const e={};return this.#ce.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setConfiguration(this.zeroSensorConfiguration)}parseMessage(e,t){switch(se.log({messageType:e}),e){case"getSensorConfiguration":case"setSensorConfiguration":const s=this.#pe(t);this.#ue(s);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const ie=f("TfliteManager",{log:!0});let re=class e{static#l=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteSensorTypes","setTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#l}get messageTypes(){return e.MessageTypes}static#Se=["classification","regression"];static get Tasks(){return this.#Se}get tasks(){return e.Tasks}#Te(e){ie.assertEnumWithError(e,this.tasks)}#Ee(e){ie.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return e.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#we;get name(){return this.#we}#Ce(e){ie.log("parseName",e);const t=x.decode(e);this.#De(t)}#De(e){ie.log({name:e}),this.#we=e,this.#u({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e,t){if(ie.assertTypeWithError(e,"string"),this.name==e)return void ie.log(`redundant name assignment ${e}`);const s=this.waitForEvent("getTfliteName"),n=N.encode(e);this.sendMessage([{type:"setTfliteName",data:n.buffer}],t),await s}#Me;get task(){return this.#Me}#Ie(e){ie.log("parseTask",e);const t=e.getUint8(0);this.#Ee(t);const s=this.tasks[t];this.#Le(s)}#Le(e){ie.log({task:e}),this.#Me=e,this.#u({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e,t){if(this.#Te(e),this.task==e)return void ie.log(`redundant task assignment ${e}`);const s=this.waitForEvent("getTfliteTask"),n=this.tasks.indexOf(e);this.sendMessage([{type:"setTfliteTask",data:Uint8Array.from([n]).buffer}],t),await s}#ke;get sampleRate(){return this.#ke}#Ne(e){ie.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#xe(t)}#xe(e){ie.log({sampleRate:e}),this.#ke=e,this.#u({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e,t){if(ie.assertTypeWithError(e,"number"),e-=e%ne.SensorRateStep,ie.assertWithError(e>=ne.SensorRateStep,`sampleRate must be multiple of ${ne.SensorRateStep} greater than 0 (got ${e})`),this.#ke==e)return void ie.log(`redundant sampleRate assignment ${e}`);const s=this.waitForEvent("getTfliteSampleRate"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteSampleRate",data:n.buffer}],t),await s}static#oe=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#oe}static AssertValidSensorType(e){te.AssertValidSensorType(e),ie.assertWithError(this.#oe.includes(e),`invalid tflite sensorType "${e}"`)}#ce=[];get sensorTypes(){return this.#ce.slice()}#Ue(e){ie.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=te.Types[n];i?t.push(i):ie.error(`invalid sensorTypeEnum ${n}`)}this.#_e(t)}#_e(e){ie.log({sensorTypes:e}),this.#ce=e,this.#u({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(t,s){t.forEach((t=>{e.AssertValidSensorType(t)}));const n=this.waitForEvent("getTfliteSensorTypes");var i;const r=(t=(i=t).filter(((e,t)=>i.indexOf(e)==t))).map((e=>te.Types.indexOf(e))).sort();ie.log(t,r),this.sendMessage([{type:"setTfliteSensorTypes",data:Uint8Array.from(r).buffer}],s),await n}#Re;get isReady(){return this.#Re}#We(e){ie.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Fe(t)}#Fe(e){ie.log({isReady:e}),this.#Re=e,this.#u({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#Ae(){ie.assertWithError(this.isReady,"tflite is not ready")}#Oe;get captureDelay(){return this.#Oe}#Pe(e){ie.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#$e(t)}#$e(e){ie.log({captureDelay:e}),this.#Oe=e,this.#u({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e,t){if(ie.assertTypeWithError(e,"number"),this.#Oe==e)return void ie.log(`redundant captureDelay assignment ${e}`);const s=this.waitForEvent("getTfliteCaptureDelay"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteCaptureDelay",data:n.buffer}],t),await s}#Ve;get threshold(){return this.#Ve}#Be(e){ie.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#ze(t)}#ze(e){ie.log({threshold:e}),this.#Ve=e,this.#u({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e,t){if(ie.assertTypeWithError(e,"number"),ie.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#Ve==e)return void ie.log(`redundant threshold assignment ${e}`);const s=this.waitForEvent("getTfliteThreshold"),n=new DataView(new ArrayBuffer(4));n.setFloat32(0,e,!0),this.sendMessage([{type:"setTfliteThreshold",data:n.buffer}],t),await s}#qe;get inferencingEnabled(){return this.#qe}#je(e){ie.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#He(t)}#He(e){ie.log({inferencingEnabled:e}),this.#qe=e,this.#u({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e,t){if(ie.assertTypeWithError(e,"boolean"),!e&&!this.isReady)return;if(this.#Ae(),this.#qe==e)return void ie.log(`redundant inferencingEnabled assignment ${e}`);const s=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage([{type:"setTfliteInferencingEnabled",data:Uint8Array.from([e]).buffer}],t),await s}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#Ge(e){ie.log("parseInference",e);const t=V(e,0);ie.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}ie.log("values",s);const n={timestamp:t,values:s};this.#u({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(ie.log({messageType:e}),e){case"getTfliteName":case"setTfliteName":this.#Ce(t);break;case"getTfliteTask":case"setTfliteTask":this.#Ie(t);break;case"getTfliteSampleRate":case"setTfliteSampleRate":this.#Ne(t);break;case"getTfliteSensorTypes":case"setTfliteSensorTypes":this.#Ue(t);break;case"tfliteModelIsReady":this.#We(t);break;case"getTfliteCaptureDelay":case"setTfliteCaptureDelay":this.#Pe(t);break;case"getTfliteThreshold":case"setTfliteThreshold":this.#Be(t);break;case"getTfliteInferencingEnabled":case"setTfliteInferencingEnabled":this.#je(t);break;case"tfliteModelInference":this.#Ge(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage};const ae=f("DeviceInformationManager",{log:!0});class oe{static#l=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber"];static get MessageTypes(){return this.#l}get messageTypes(){return oe.MessageTypes}static#g=[...this.#l,"deviceInformation"];static get EventTypes(){return this.#g}get eventTypes(){return oe.#g}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}information={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get#Qe(){return Object.values(this.information).every((e=>null!=e))}#Je(e){ae.log({partialDeviceInformation:e});for(const t in e)this.#u({type:t,message:{[t]:e[t]}});Object.assign(this.information,e),ae.log({deviceInformation:this.information}),this.#Qe&&(ae.log("completed deviceInformation"),this.#u({type:"deviceInformation",message:{deviceInformation:this.information}}))}parseMessage(e,t){switch(ae.log({messageType:e}),e){case"manufacturerName":const s=x.decode(t);ae.log({manufacturerName:s}),this.#Je({manufacturerName:s});break;case"modelNumber":const n=x.decode(t);ae.log({modelNumber:n}),this.#Je({modelNumber:n});break;case"softwareRevision":const i=x.decode(t);ae.log({softwareRevision:i}),this.#Je({softwareRevision:i});break;case"hardwareRevision":const r=x.decode(t);ae.log({hardwareRevision:r}),this.#Je({hardwareRevision:r});break;case"firmwareRevision":const a=x.decode(t);ae.log({firmwareRevision:a}),this.#Je({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),ae.log({pnpId:o}),this.#Je({pnpId:o});break;case"serialNumber":const c=x.decode(t);ae.log({serialNumber:c});break;default:throw Error(`uncaught messageType ${e}`)}}}const ce=f("InformationManager",{log:!0});class he{static#l=["isCharging","getBatteryCurrent","getMtu","getId","getName","setName","getType","setType","getCurrentTime","setCurrentTime"];static get MessageTypes(){return this.#l}get messageTypes(){return he.MessageTypes}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return he.#g}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#Ze;get isCharging(){return this.#Ze}updateIsCharging(e){ce.assertTypeWithError(e,"boolean"),this.#Ze=e,ce.log({isCharging:this.#Ze}),this.#u({type:"isCharging",message:{isCharging:this.#Ze}})}#Ke;get batteryCurrent(){return this.#Ke}async getBatteryCurrent(){ce.log("getting battery current...");const e=this.waitForEvent("getBatteryCurrent");this.sendMessage([{type:"getBatteryCurrent"}]),await e}updateBatteryCurrent(e){ce.assertTypeWithError(e,"number"),this.#Ke=e,ce.log({batteryCurrent:this.#Ke}),this.#u({type:"getBatteryCurrent",message:{batteryCurrent:this.#Ke}})}#Xe;get id(){return this.#Xe}updateId(e){ce.assertTypeWithError(e,"string"),this.#Xe=e,ce.log({id:this.#Xe}),this.#u({type:"getId",message:{id:this.#Xe}})}#we;get name(){return this.#we}updateName(e){ce.assertTypeWithError(e,"string"),this.#we=e,ce.log({updatedName:this.#we}),this.#u({type:"getName",message:{name:this.#we}})}static get MinNameLength(){return 2}get minNameLength(){return he.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return he.MaxNameLength}async setName(e){ce.assertTypeWithError(e,"string"),ce.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ce.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=N.encode(e);ce.log({setNameData:t});const s=this.waitForEvent("getName");this.sendMessage([{type:"setName",data:t.buffer}]),await s}static#d=["leftInsole","rightInsole"];static get Types(){return this.#d}get#Ye(){return he.Types}#C;get type(){return this.#C}get typeEnum(){return he.Types.indexOf(this.type)}#et(e){ce.assertEnumWithError(e,this.#Ye)}#tt(e){ce.assertTypeWithError(e,"number"),ce.assertWithError(this.#Ye[e],`invalid typeEnum ${e}`)}updateType(e){this.#et(e),e!=this.type?(this.#C=e,ce.log({updatedType:this.#C}),this.#u({type:"getType",message:{type:this.#C}})):ce.log("redundant type assignment")}async#st(e){this.#tt(e);const t=Uint8Array.from([e]);ce.log({setTypeData:t});const s=this.waitForEvent("getType");this.sendMessage([{type:"setType",data:t.buffer}]),await s}async setType(e){this.#et(e);const t=this.#Ye.indexOf(e);this.#st(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#nt=["left","right"];static get InsoleSides(){return this.#nt}get insoleSides(){return he.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}#it=0;get mtu(){return this.#it}#rt(e){ce.assertTypeWithError(e,"number"),this.#it!=e?(this.#it=e,this.#u({type:"getMtu",message:{mtu:this.#it}})):ce.log("redundant mtu assignment",e)}#at=!1;get isCurrentTimeSet(){return this.#at}#ot(e){ce.log({currentTime:e}),this.#at=0!=e,this.#at||this.#ct()}async#ct(){ce.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0);const t=this.waitForEvent("getCurrentTime");this.sendMessage([{type:"setCurrentTime",data:e.buffer}]),await t}parseMessage(e,t){switch(ce.log({messageType:e}),e){case"isCharging":const s=Boolean(t.getUint8(0));ce.log({isCharging:s}),this.updateIsCharging(s);break;case"getBatteryCurrent":const n=t.getFloat32(0,!0);ce.log({batteryCurrent:n}),this.updateBatteryCurrent(n);break;case"getId":const i=x.decode(t);ce.log({id:i}),this.updateId(i);break;case"getName":case"setName":const r=x.decode(t);ce.log({name:r}),this.updateName(r);break;case"getType":case"setType":const a=t.getUint8(0),o=this.#Ye[a];ce.log({typeEnum:a,type:o}),this.updateType(o);break;case"getMtu":const c=t.getUint16(0,!0);ce.log({mtu:c}),this.#rt(c);break;case"getCurrentTime":case"setCurrentTime":const h=Number(t.getBigUint64(0,!0));this.#ot(h);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage;clear(){this.#at=!1}}const le=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ge=f("VibrationManager");class ue{static#l=["triggerVibration"];static get MessageTypes(){return this.#l}get messageTypes(){return TfliteManager.MessageTypes}static#ht=["front","rear"];static get Locations(){return this.#ht}get locations(){return ue.Locations}#lt(e){ge.assertTypeWithError(e,"string"),ge.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#gt(e){this.#ut(e),e.forEach((e=>{this.#lt(e)}))}#dt(e){this.#gt(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ge.log({locationsBitmask:t}),ge.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ut(e){ge.assertWithError(Array.isArray(e),"passed non-array"),ge.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return le}get waveformEffects(){return ue.WaveformEffects}#pt(e){ge.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#ft=1270;static get MaxWaveformEffectSegmentDelay(){return this.#ft}get maxWaveformEffectSegmentDelay(){return ue.MaxWaveformEffectSegmentDelay}#mt(e){if(null!=e.effect){const t=e.effect;this.#pt(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ge.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ge.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#vt(t)}}static#yt=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#yt}get maxWaveformEffectSegmentLoopCount(){return ue.MaxWaveformEffectSegmentLoopCount}#vt(e){ge.assertTypeWithError(e,"number"),ge.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ge.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#bt=8;static get MaxNumberOfWaveformEffectSegments(){return this.#bt}get maxNumberOfWaveformEffectSegments(){return ue.MaxNumberOfWaveformEffectSegments}#St(e){this.#ut(e),ge.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#mt(e)}))}static#Tt=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Tt}get maxWaveformEffectSequenceLoopCount(){return ue.MaxWaveformEffectSequenceLoopCount}#Et(e){ge.assertTypeWithError(e,"number"),ge.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ge.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#wt=2550;static get MaxWaveformSegmentDuration(){return this.#wt}get maxWaveformSegmentDuration(){return ue.MaxWaveformSegmentDuration}#Ct(e){ge.assertTypeWithError(e.amplitude,"number"),ge.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ge.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ge.assertTypeWithError(e.duration,"number"),ge.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ge.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Dt=20;static get MaxNumberOfWaveformSegments(){return this.#Dt}get maxNumberOfWaveformSegments(){return ue.MaxNumberOfWaveformSegments}#Mt(e){this.#ut(e),ge.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Ct(e)}))}#It(e,t,s=0){this.#St(t),this.#Et(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ge.log({dataArray:n,dataView:o}),this.#de(e,"waveformEffect",o)}#Lt(e,t){this.#Mt(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ge.log({dataView:s}),this.#de(e,"waveform",s)}static#d=["waveformEffect","waveform"];static get Types(){return this.#d}get#Ye(){return ue.Types}#kt(e){ge.assertTypeWithError(e,"string"),ge.assertWithError(this.#Ye.includes(e),`invalid vibrationType "${e}"`)}#de(e,t,s){ge.assertWithError(s?.byteLength>0,"no data received");const n=this.#dt(e);this.#kt(t);const i=this.#Ye.indexOf(t);ge.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=_(n,i,s.byteLength,s);return ge.log({data:r}),r}async triggerVibration(e,t){let s;e.forEach((e=>{const{type:t}=e;let n,{locations:i}=e;switch(i=i||this.locations.slice(),t){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#It(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Lt(i,s)}break;default:throw Error(`invalid vibration type "${t}"`)}ge.log({type:t,dataView:n}),s=_(s,n)})),await this.sendMessage([{type:"triggerVibration",data:s}],t)}sendMessage}const de=f("BaseConnectionManager",{log:!0});class pe{static#Nt=[...he.MessageTypes,...ne.MessageTypes,...te.MessageTypes,...ue.MessageTypes,...re.MessageTypes,...P.MessageTypes];static get TxRxMessageTypes(){return this.#Nt}static#l=[...oe.MessageTypes,"batteryLevel","smp","rx","tx",...this.TxRxMessageTypes];static get MessageTypes(){return this.#l}static#xt(e){de.assertEnumWithError(e,this.#Nt)}get bluetoothId(){this.#Ut("bluetoothId")}onStatusUpdated;onMessageReceived;static#_t(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#Ut(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#_t("type")}get type(){return this.constructor.type}#Rt(){de.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Wt(){de.assertWithError(this.constructor!=pe,`${this.constructor.name} must be subclassed`)}constructor(){this.#Wt(),this.#Rt()}static get#m(){return["not connected","connecting","connected","disconnecting"]}static get Statuses(){return this.#m}get#Ft(){return pe.#m}#A="not connected";get status(){return this.#A}set status(e){de.assertEnumWithError(e,this.#Ft),this.#A!=e?(de.log(`new connection status "${e}"`),this.#A=e,this.onStatusUpdated?.(this.status),this.isConnected?this.#At.start():this.#At.stop(),"not connected"==this.#A&&(this.#it=null)):de.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#Ot(){de.assertWithError(!this.isConnected,"device is already connected")}#Pt(){de.assertWithError("connecting"!=this.status,"device is already connecting")}#$t(){de.assertWithError(this.isConnected,"device is not connected")}#Vt(){de.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Bt(){this.#$t(),this.#Vt()}async connect(){this.#Ot(),this.#Pt(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#Ot(),this.#Pt(),de.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#$t(),this.#Vt(),this.status="disconnecting",de.log("disconnecting from device...")}async sendSmpMessage(e){this.#Bt(),de.log("sending smp message",e)}#zt=[];async sendTxMessages(e,t=!0){if(this.#Bt(),e&&this.#zt.push(...e),!t)return;de.log("sendTxMessages",this.#zt.slice());const s=this.#zt.map((e=>{pe.#xt(e.type);const t=pe.TxRxMessageTypes.indexOf(e.type),s=new DataView(new ArrayBuffer(2));return s.setUint16(0,e.data?.byteLength||0,!0),_(t,s,e.data)}));if(this.#it)for(;s.length>0;){let e=0,t=0;s.some((s=>{if(e+s.byteLength>this.#it-3)return!0;t++,e+=s.byteLength}));const n=s.splice(0,t);de.log({arrayBufferCount:t,arrayBuffersToSend:n});const i=_(...n);de.log("sending arrayBuffer",i),await this.sendTxData(i)}else{const e=_(...s);de.log("sending arrayBuffer",e),await this.sendTxData(e)}this.#zt.length=0}#it;get mtu(){return this.#it}set mtu(e){this.#it=e}async sendTxData(e){de.log("sendTxData",e)}parseRxMessage(e){Y(e,pe.#Nt,this.#qt.bind(this),null,!0)}#qt(e,t){de.log({messageType:e,dataView:t}),this.onMessageReceived?.(e,t)}#At=new C(this.#jt.bind(this),5e3);#jt(){this.isConnected||(de.log("timer detected disconnection"),this.status="not connected")}}const fe=f("bluetoothUUIDs",{log:!1});var me=e.BluetoothUUID;function ve(e){return fe.assertTypeWithError(e,"string"),fe.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function ye(e){return me?.getCharacteristic?.(e)}function be(e){return me?.getService?.(e)}const Se=Object.freeze({services:{deviceInformation:{uuid:be("device_information"),characteristics:{manufacturerName:{uuid:ye("manufacturer_name_string")},modelNumber:{uuid:ye("model_number_string")},hardwareRevision:{uuid:ye("hardware_revision_string")},firmwareRevision:{uuid:ye("firmware_revision_string")},softwareRevision:{uuid:ye("software_revision_string")},pnpId:{uuid:ye("pnp_id")},serialNumber:{uuid:ye("serial_number_string")}}},battery:{uuid:be("battery_service"),characteristics:{batteryLevel:{uuid:ye("battery_level")}}},main:{uuid:ve("0000"),characteristics:{rx:{uuid:ve("1000")},tx:{uuid:ve("1001")}}},smp:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{smp:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.smp.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),Te=Se.serviceUUIDs,Ee=Se.optionalServiceUUIDs,we=[...Te,...Ee];function Ce(e){return Se.getServiceNameFromUUID(e)}const De=[],Me=[],Ie=[];function Le(e){return Se.getCharacteristicNameFromUUID(e)}function ke(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"rx":case"tx":case"smp":t.read=!1}switch(e){case"batteryLevel":case"rx":case"smp":t.notify=!0}switch(e){case"tx":case"smp":t.writeWithoutResponse=!0}return t}Object.entries(Se.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{Te.includes(t.uuid)&&De.push(s.uuid),Me.push(s.uuid),Ie.push(e)}))}),[]);const Ne=f("BluetoothConnectionManager",{log:!0});class xe extends pe{onCharacteristicValueChanged(e,t){"rx"==e?this.parseRxMessage(t):this.onMessageReceived?.(e,t)}async writeCharacteristic(e,t){Ne.log("writeCharacteristic",...arguments)}async sendSmpMessage(e){super.sendSmpMessage(...arguments),await this.writeCharacteristic("smp",e)}async sendTxData(e){super.sendTxData(...arguments),await this.writeCharacteristic("tx",e)}}const Ue=f("WebBluetoothConnectionManager",{log:!0}),{bluetooth:_e}=e;var Re={bluetooth:_e};class We extends xe{get bluetoothId(){return this.device?.id}#Ht={characteristicvaluechanged:this.#Gt.bind(this)};#Qt={gattserverdisconnected:this.#Jt.bind(this)};static get isSupported(){return"bluetooth"in Re}static get type(){return"webBluetooth"}#Zt;get device(){return this.#Zt}set device(e){this.#Zt!=e?(this.#Zt&&E(this.#Zt,this.#Qt),e&&T(e,this.#Qt),this.#Zt=e):Ue.log("tried to assign the same BluetoothDevice")}get server(){return this.#Zt?.gatt}get isConnected(){return this.server?.connected}#Kt=new Map;#Xt=new Map;async connect(){await super.connect();try{const e=await Re.bluetooth.requestDevice({filters:[{services:Te}],optionalServices:n?Ee:[]});Ue.log("got BluetoothDevice"),this.device=e,Ue.log("connecting to device...");const t=await this.device.gatt.connect();Ue.log(`connected to device? ${t.connected}`),await this.#Yt(),Ue.log("fully connected"),this.status="connected"}catch(e){Ue.error(e),this.status="not connected",this.server?.disconnect(),this.#es()}}async#Yt(){this.#es(),Ue.log("getting services...");const e=await this.server.getPrimaryServices();Ue.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),Ue.log("getting characteristics...");for(const t in e){const s=e[t];Ue.log({service:s});const n=Ce(s.uuid);Ue.assertWithError(n,`no name found for service uuid "${s.uuid}"`),Ue.log(`got "${n}" service`),s._name=n,this.#Kt.set(n,s),Ue.log(`getting characteristics for "${n}" service`);const i=await s.getCharacteristics();Ue.log(`got characteristics for "${n}" service`);for(const e in i){const t=i[e];Ue.log({characteristic:t});const s=Le(t.uuid);Ue.assertWithError(s,`no name found for characteristic uuid "${t.uuid}" in "${n}" service`),Ue.log(`got "${s}" characteristic in "${n}" service`),t._name=s,this.#Xt.set(s,t),T(t,this.#Ht);const o=t.properties||ke(s);o.notify&&(Ue.log(`starting notifications for "${s}" characteristic`),await t.startNotifications()),o.read&&(Ue.log(`reading "${s}" characteristic...`),await t.readValue(),(r||a)&&this.#ts(t))}}}#es(){this.device&&E(this.device,this.#Qt),this.#Xt.forEach((e=>{E(e,this.#Ht)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#es(),this.status="not connected"}#Gt(e){Ue.log("oncharacteristicvaluechanged");const t=e.target;this.#ts(t)}#ts(e){Ue.log("onCharacteristicValue");const t=e._name;Ue.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),Ue.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;Ue.assertWithError(s,`no data found for "${t}" characteristic`),Ue.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer)));try{this.onCharacteristicValueChanged(t,s)}catch(e){Ue.error(e)}}async writeCharacteristic(e,t){super.writeCharacteristic(...arguments);const s=this.#Xt.get(e);Ue.assertWithError(s,`${e} characteristic not found`),Ue.log("writing characteristic",s,t);const n=s.properties||ke(e);n.writeWithoutResponse?(Ue.log("writing without response"),await s.writeValueWithoutResponse(t)):(Ue.log("writing with response"),await s.writeValueWithResponse(t)),Ue.log("wrote characteristic"),n.read&&!n.notify&&(Ue.log("reading value after write..."),await s.readValue(),(r||a)&&this.#ts(s))}#Jt(e){Ue.log("gattserverdisconnected"),this.status="not connected"}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),Ue.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(Ue.log("successfully reconnected!"),await this.#Yt(),this.status="connected"):(Ue.log("unable to reconnect"),this.status="not connected")}}const Fe=4294967296,Ae=9007199254740992;const Oe={encode:function(e){let t,s=new ArrayBuffer(256),n=new DataView(s),i=0;function r(e){let r=s.byteLength;const a=i+e;for(;r<a;)r<<=1;if(r!==s.byteLength){const e=n;s=new ArrayBuffer(r),n=new DataView(s);const t=i+3>>2;for(let s=0;s<t;++s)n.setUint32(s<<2,e.getUint32(s<<2))}return t=e,n}function a(){i+=t}function o(e){a(r(1).setUint8(i,e))}function c(e){const t=r(e.length);for(let s=0;s<e.length;++s)t.setUint8(i+s,e[s]);a()}function h(e,t){t<24?o(e<<5|t):t<256?(o(e<<5|24),o(t)):t<65536?(o(e<<5|25),function(e){a(r(2).setUint16(i,e))}(t)):t<4294967296?(o(e<<5|26),function(e){a(r(4).setUint32(i,e))}(t)):(o(e<<5|27),function(e){const t=e%Fe,s=(e-t)/Fe,n=r(8);n.setUint32(i,s),n.setUint32(i+4,t),a()}(t))}if(function e(t){let s;const n=[];let l;if(!1===t)return o(244);if(!0===t)return o(245);if(null===t)return o(246);if(void 0===t)return o(247);switch(typeof t){case"number":if(Math.floor(t)===t){if(t>=0&&t<=Ae)return h(0,t);if(-Ae<=t&&t<0)return h(1,-(t+1))}return o(251),function(e){a(r(8).setFloat64(i,e))}(t);case"string":for(s=0;s<t.length;++s){let e=t.charCodeAt(s);e<128?n.push(e):e<2048?(n.push(192|e>>6),n.push(128|63&e)):e<55296?(n.push(224|e>>12),n.push(128|e>>6&63),n.push(128|63&e)):(e=(1023&e)<<10,e|=1023&t.charCodeAt(++s),e+=65536,n.push(240|e>>18),n.push(128|e>>12&63),n.push(128|e>>6&63),n.push(128|63&e))}return h(3,n.length),c(n);default:if(Array.isArray(t))for(l=t.length,h(4,l),s=0;s<l;++s)e(t[s]);else if(t instanceof Uint8Array)h(2,t.length),c(t);else{const n=Object.keys(t);for(l=n.length,h(5,l),s=0;s<l;++s){const i=n[s];e(i),e(t[i])}}}}(e),"slice"in s)return s.slice(0,i);const l=new ArrayBuffer(i),g=new DataView(l);for(let e=0;e<i;++e)g.setUint8(e,n.getUint8(e));return l},decode:function(e,t,s){const n=new DataView(e);let i=0;function r(e,t){return i+=e,t}function a(t){return r(t,new Uint8Array(e,i,t))}function o(){return r(1,n.getUint8(i))}function c(){return r(2,n.getUint16(i))}function h(){return r(4,n.getUint32(i))}function l(){return 255===n.getUint8(i)&&(i+=1,!0)}function g(e){if(e<24)return e;if(24===e)return o();if(25===e)return c();if(26===e)return h();if(27===e)return h()*Fe+h();if(31===e)return-1;throw new Error("Invalid length encoding")}function u(e){const t=o();if(255===t)return-1;const s=g(31&t);if(s<0||t>>5!==e)throw new Error("Invalid indefinite length element");return s}function d(e,t){for(let s=0;s<t;++s){let s=o();128&s&&(s<224?(s=(31&s)<<6|63&o(),t-=1):s<240?(s=(15&s)<<12|(63&o())<<6|63&o(),t-=2):(s=(15&s)<<18|(63&o())<<12|(63&o())<<6|63&o(),t-=3)),s<65536?e.push(s):(s-=65536,e.push(55296|s>>10),e.push(56320|1023&s))}}"function"!=typeof t&&(t=function(e){return e}),"function"!=typeof s&&(s=function(){});const p=function e(){const h=o(),p=h>>5,f=31&h;let m,v;if(7===p)switch(f){case 25:return function(){const e=new ArrayBuffer(4),t=new DataView(e),s=c(),n=32768&s;let i=31744&s;const r=1023&s;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==r)return(n?-1:1)*r*5.960464477539063e-8;return t.setUint32(0,n<<16|i<<13|r<<13),t.getFloat32(0)}();case 26:return r(4,n.getFloat32(i));case 27:return r(8,n.getFloat64(i))}if(v=g(f),v<0&&(p<2||p>6))throw new Error("Invalid length");const y=[];let b;const S={};switch(p){case 0:return v;case 1:return-1-v;case 2:if(v<0){const e=[];let t=0;for(;(v=u(p))>=0;)t+=v,e.push(a(v));const s=new Uint8Array(t);let n=0;for(m=0;m<e.length;++m)s.set(e[m],n),n+=e[m].length;return s}return a(v);case 3:if(v<0)for(;(v=u(p))>=0;)d(y,v);else d(y,v);return String.fromCharCode.apply(null,y);case 4:if(v<0)for(b=[];!l();)b.push(e());else for(b=new Array(v),m=0;m<v;++m)b[m]=e();return b;case 5:for(m=0;m<v||v<0&&!l();++m){S[e()]=e()}return S;case 6:return t(e(),v);case 7:switch(v){case 20:return!1;case 21:return!0;case 22:return null;case 23:return;default:return s(v)}}}();if(i!==e.byteLength)throw new Error("Remaining bytes");return p}},Pe=f("mcumgr",{log:!0}),$e=0,Ve=1,Be=2,ze=3,qe=0,je=1,He=8,Ge=0,Qe=2,Je=3,Ze=5,Ke=0,Xe=1,Ye=5,et=0;class tt{constructor(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}onMessage(e){return this._messageCallback=e,this}onImageUploadNext(e){return this._imageUploadNextCallback=e,this}onImageUploadProgress(e){return this._imageUploadProgressCallback=e,this}onImageUploadFinished(e){return this._imageUploadFinishedCallback=e,this}onFileUploadNext(e){return this._fileUploadNextCallback=e,this}onFileUploadProgress(e){return this._fileUploadProgressCallback=e,this}onFileUploadFinished(e){return this._fileUploadFinishedCallback=e,this}onFileDownloadNext(e){return this._fileDownloadNextCallback=e,this}onFileDownloadProgress(e){return this._fileDownloadProgressCallback=e,this}onFileDownloadFinished(e){return this._fileDownloadFinishedCallback=e,this}_getMessage(e,t,s,n){let i=[];void 0!==n&&(i=[...new Uint8Array(Oe.encode(n))]);const r=255&i.length,a=[e,0,i.length>>8,r,t>>8,255&t,this._seq,s,...i];return this._seq=(this._seq+1)%256,a}_notification(e){Pe.log("mcumgr - message received");const t=new Uint8Array(e);this._buffer=new Uint8Array([...this._buffer,...t]);const s=256*this._buffer[2]+this._buffer[3];this._buffer.length<s+8||(this._processMessage(this._buffer.slice(0,s+8)),this._buffer=this._buffer.slice(s+8))}_processMessage(e){const[t,,s,n,i,r,,a]=e,o=Oe.decode(e.slice(8).buffer),c=256*s+n,h=256*i+r;return Pe.log("mcumgr - Process Message - Group: "+h+", Id: "+a+", Off: "+o.off),h===je&&a===Xe&&o.off?(this._uploadOffset=o.off,void this._uploadNext()):t===ze&&h===He&&a===et&&o.off?(this._uploadFileOffset=o.off,void this._uploadFileNext()):t===Ve&&h===He&&a===et?(this._downloadFileOffset+=o.data.length,null!=o.len&&(this._downloadFileLength=o.len),Pe.log("downloaded "+this._downloadFileOffset+" bytes of "+this._downloadFileLength),this._downloadFileLength>0&&this._fileDownloadProgressCallback({percentage:Math.floor(this._downloadFileOffset/this._downloadFileLength*100)}),this._messageCallback&&this._messageCallback({op:t,group:h,id:a,data:o,length:c}),void this._downloadFileNext()):void(this._messageCallback&&this._messageCallback({op:t,group:h,id:a,data:o,length:c}))}cmdReset(){return this._getMessage(Be,qe,Ze)}smpEcho(e){return this._getMessage(Be,qe,Ge,{d:e})}cmdImageState(){return this._getMessage($e,je,Ke)}cmdImageErase(){return this._getMessage(Be,je,Ye,{})}cmdImageTest(e){return this._getMessage(Be,je,Ke,{hash:e,confirm:!1})}cmdImageConfirm(e){return this._getMessage(Be,je,Ke,{hash:e,confirm:!0})}_hash(e){return crypto.subtle.digest("SHA-256",e)}async _uploadNext(){if(!this._uploadImage)return;if(this._uploadOffset>=this._uploadImage.byteLength)return this._uploadIsInProgress=!1,void this._imageUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadOffset};0===this._uploadOffset&&(e.len=this._uploadImage.byteLength,e.sha=new Uint8Array(await this._hash(this._uploadImage))),this._imageUploadProgressCallback({percentage:Math.floor(this._uploadOffset/this._uploadImage.byteLength*100)});const t=this._mtu-Oe.encode(e).byteLength-8-3-5;e.data=new Uint8Array(this._uploadImage.slice(this._uploadOffset,this._uploadOffset+t)),this._uploadOffset+=t;const s=this._getMessage(Be,je,Xe,e);Pe.log("mcumgr - _uploadNext: Message Length: "+s.length),this._imageUploadNextCallback({packet:s})}async reset(){this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}async cmdUpload(e,t=0){this._uploadIsInProgress?Pe.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadOffset=0,this._uploadImage=e,this._uploadSlot=t,this._uploadNext())}async cmdUploadFile(e,t){this._uploadIsInProgress?Pe.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadFileOffset=0,this._uploadFile=e,this._uploadFilename=t,this._uploadFileNext())}async _uploadFileNext(){if(Pe.log("uploadFileNext - offset: "+this._uploadFileOffset+", length: "+this._uploadFile.byteLength),this._uploadFileOffset>=this._uploadFile.byteLength)return this._uploadIsInProgress=!1,void this._fileUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadFileOffset};0===this._uploadFileOffset&&(e.len=this._uploadFile.byteLength),e.name=this._uploadFilename,this._fileUploadProgressCallback({percentage:Math.floor(this._uploadFileOffset/this._uploadFile.byteLength*100)});const t=this._mtu-Oe.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadFile.slice(this._uploadFileOffset,this._uploadFileOffset+t)),this._uploadFileOffset+=t;const s=this._getMessage(Be,He,et,e);Pe.log("mcumgr - _uploadNext: Message Length: "+s.length),this._fileUploadNextCallback({packet:s})}async cmdDownloadFile(e,t){this._downloadIsInProgress?Pe.error("Download is already in progress."):(this._downloadIsInProgress=!0,this._downloadFileOffset=0,this._downloadFileLength=0,this._downloadRemoteFilename=e,this._downloadLocalFilename=t,this._downloadFileNext())}async _downloadFileNext(){if(this._downloadFileLength>0&&this._downloadFileOffset>=this._downloadFileLength)return this._downloadIsInProgress=!1,void this._fileDownloadFinishedCallback();const e={off:this._downloadFileOffset};0===this._downloadFileOffset&&(e.name=this._downloadRemoteFilename);const t=this._getMessage($e,He,et,e);Pe.log("mcumgr - _downloadNext: Message Length: "+t.length),this._fileDownloadNextCallback({packet:t})}async imageInfo(e){const t={},s=new Uint8Array(e);if(s.length<32)throw new Error("Invalid image (too short file)");if(61!==s[0]||184!==s[1]||243!==s[2]||150!==s[3])throw new Error("Invalid image (wrong magic bytes)");if(0!==s[4]||0!==s[5]||0!==s[6]||0!==s[7])throw new Error("Invalid image (wrong load address)");const n=s[8]+256*s[9];if(0!==s[10]||0!==s[11])throw new Error("Invalid image (wrong protected TLV area size)");const i=s[12]+256*s[13]+65536*s[14]+s[15]*2**24;if(t.imageSize=i,s.length<i+n)throw new Error("Invalid image (wrong image size)");if(0!==s[16]||0!==s[17]||0!==s[18]||0!==s[19])throw new Error("Invalid image (wrong flags)");const r=`${s[20]}.${s[21]}.${s[22]+256*s[23]}`;return t.version=r,t.hash=[...new Uint8Array(await this._hash(e.slice(0,i+32)))].map((e=>e.toString(16).padStart(2,"0"))).join(""),t}}const st=f("FirmwareManager",{log:!0});class nt{sendMessage;constructor(){this.#ss()}static#l=["smp"];static get MessageTypes(){return this.#l}get messageTypes(){return nt.MessageTypes}static#g=[...this.#l,"firmwareImages","firmwareUploadProgress","firmwareUploadComplete","firmwareStatus"];static get EventTypes(){return this.#g}get eventTypes(){return nt.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}parseMessage(e,t){if(st.log({messageType:e}),"smp"!==e)throw Error(`uncaught messageType ${e}`);this.#ns._notification(Array.from(new Uint8Array(t.buffer))),this.#u({type:"smp"})}async uploadFirmware(e){st.log("uploadFirmware",e);const t=this.waitForEvent("firmwareUploadComplete");await this.getImages();const s=await A(e),n=await this.#ns.imageInfo(s);st.log({imageInfo:n}),this.#ns.cmdUpload(s,1),this.#P("uploading"),await t}static#m=["idle","uploading","uploaded","pending","testing","erasing"];static get Statuses(){return this.#m}#A="idle";get status(){return this.#A}#P(e){st.assertEnumWithError(e,nt.Statuses),this.#A!=e?(this.#A=e,st.log({firmwareStatus:this.#A}),this.#u({type:"firmwareStatus",message:{firmwareStatus:this.#A}})):st.log(`redundant firmwareStatus assignment "${e}"`)}#is;get images(){return this.#is}#rs(){st.assertWithError(this.#is,"didn't get imageState")}#as(e){st.assertTypeWithError(e,"number"),st.assertWithError(0==e||1==e,"imageIndex must be 0 or 1")}async getImages(){const e=this.waitForEvent("firmwareImages");st.log("getting firmware image state..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageState()).buffer),await e}async testImage(e=1){if(this.#as(e),this.#rs(),!this.#is[e])return void st.log(`image ${e} not found`);if(1==this.#is[e].pending)return void st.log(`image ${e} is already pending`);if(this.#is[e].empty)return void st.log(`image ${e} is empty`);const t=this.waitForEvent("smp");st.log("testing firmware image..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageTest(this.#is[e].hash)).buffer),await t}async eraseImage(){this.#rs();const e=this.waitForEvent("smp");st.log("erasing image..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageErase()).buffer),this.#P("erasing"),await e,await this.getImages()}async confirmImage(e=0){if(this.#as(e),this.#rs(),!0===this.#is[e].confirmed)return void st.log(`image ${e} is already confirmed`);const t=this.waitForEvent("smp");st.log("confirming image..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageConfirm(this.#is[e].hash)).buffer),await t}async echo(e){st.assertTypeWithError(e,"string");const t=this.waitForEvent("smp");st.log("sending echo..."),this.sendMessage(Uint8Array.from(this.#ns.smpEcho(e)).buffer),await t}async reset(){const e=this.waitForEvent("smp");st.log("resetting..."),this.sendMessage(Uint8Array.from(this.#ns.cmdReset()).buffer),await e}#it;get mtu(){return this.#it}set mtu(e){this.#it=e,this.#ns._mtu=this.#it}#ns=new tt;#ss(){this.#ns.onMessage(this.#os.bind(this)),this.#ns.onFileDownloadNext(this.#cs),this.#ns.onFileDownloadProgress(this.#hs.bind(this)),this.#ns.onFileDownloadFinished(this.#ls.bind(this)),this.#ns.onFileUploadNext(this.#gs.bind(this)),this.#ns.onFileUploadProgress(this.#us.bind(this)),this.#ns.onFileUploadFinished(this.#ds.bind(this)),this.#ns.onImageUploadNext(this.#ps.bind(this)),this.#ns.onImageUploadProgress(this.#fs.bind(this)),this.#ns.onImageUploadFinished(this.#ms.bind(this))}#os({op:e,group:t,id:s,data:n,length:i}){switch(st.log("onMcuMessage",...arguments),t){case qe:switch(s){case Ge:st.log(`echo "${n.r}"`);break;case Qe:st.table(n.tasks);break;case Je:st.log(n)}break;case je:if(s===Ke)this.#vs(n);break;default:throw Error(`uncaught mcuMessage group ${t}`)}}#cs(){st.log("onMcuFileDownloadNext",...arguments)}#hs(){st.log("onMcuFileDownloadProgress",...arguments)}#ls(){st.log("onMcuFileDownloadFinished",...arguments)}#gs(){st.log("onMcuFileUploadNext",...arguments)}#us(){st.log("onMcuFileUploadProgress",...arguments)}#ds(){st.log("onMcuFileUploadFinished",...arguments)}#ps({packet:e}){st.log("onMcuImageUploadNext",...arguments),this.sendMessage(Uint8Array.from(e).buffer)}#fs({percentage:e}){const t=e/100;st.log("onMcuImageUploadProgress",...arguments),this.#u({type:"firmwareUploadProgress",message:{firmwareUploadProgress:t}})}async#ms(){st.log("onMcuImageUploadFinished",...arguments),await this.getImages(),this.#u({type:"firmwareUploadProgress",message:{firmwareUploadProgress:100}}),this.#u({type:"firmwareUploadComplete"})}#vs(e){if(!e.images)return void st.log("no images found");this.#is=e.images,st.log("images",this.#is);let t="idle";2==this.#is.length&&(this.#is[1].bootable?this.#is[0].confirmed?this.#is[1].pending?(st.log("reset to upload to the new firmware image"),t="pending"):(st.log("Slot 1 has a valid image. run testImage() to test it or upload a different image."),t="uploaded"):(st.log('Slot 0 has a valid image. Click "Confirm Image" to confirm it or wait and the device will swap images back.'),t="testing"):st.warn('Slot 1 has a invalid image. Click "Erase Image" to erase it or upload a different image')),1==this.#is.length&&(this.#is.push({slot:1,empty:!0,version:"Empty",pending:!1,confirmed:!1,bootable:!1}),st.log("Select a firmware upload image to upload to slot 1.")),this.#P(t),this.#u({type:"firmwareImages",message:{firmwareImages:this.#is}})}}const it=f("Device",{log:!0});class rt{get bluetoothId(){return this.#ys?.bluetoothId}constructor(){this.#bs.eventDispatcher=this.#Ss,this.#Ts.sendMessage=this.#Es.bind(this),this.#Ts.eventDispatcher=this.#Ss,this.#ws.sendMessage=this.#Es.bind(this),this.#ws.eventDispatcher=this.#Ss,this.#Cs.sendMessage=this.#Es.bind(this),this.#Cs.eventDispatcher=this.#Ss,this.#Ds.sendMessage=this.#Es.bind(this),this.#Ms.sendMessage=this.#Es.bind(this),this.#Ms.eventDispatcher=this.#Ss,this.#Is.sendMessage=this.#Es.bind(this),this.#Is.eventDispatcher=this.#Ss,this.#Ls.sendMessage=this.#ks.bind(this),this.#Ls.eventDispatcher=this.#Ss,this.addEventListener("getMtu",(()=>{this.#Ls.mtu=this.mtu,this.#Is.mtu=this.mtu,this.connectionManager.mtu=this.mtu})),this.addEventListener("getType",(()=>{rt.#Ns&&rt.#xs(this)})),n&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),i&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{rt.#Us(this)}))}static get#_s(){return We}static#g=["batteryLevel","connectionStatus",...pe.Statuses,"isConnected","connectionMessage",...oe.EventTypes,...he.EventTypes,...ne.EventTypes,...te.EventTypes,...P.EventTypes,...re.EventTypes,...nt.EventTypes];static get EventTypes(){return this.#g}get eventTypes(){return rt.#g}#Ss=new S(this,this.eventTypes);addEventListener(e,t,s){this.#Ss.addEventListener(e,t,s)}#u(e){this.#Ss.dispatchEvent(e)}removeEventListener(e,t){return this.#Ss.removeEventListener(e,t)}waitForEvent(e){return this.#Ss.waitForEvent(e)}#ys;get connectionManager(){return this.#ys}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Rs.bind(this),e.onMessageReceived=this.#Ws.bind(this)),this.#ys=e,it.log("assigned new connectionManager",this.#ys)):it.log("same connectionManager is already assigned")}async#Es(e,t){await(this.#ys?.sendTxMessages(...arguments))}async connect(){return this.connectionManager||(this.connectionManager=new rt.#_s),this.#Fs(),this.connectionManager.connect()}#As=!1;get isConnected(){return this.#As}#$t(){it.assertWithError(this.isConnected,"not connected")}static#Os=["isCharging","getBatteryCurrent","getId","getMtu","getName","getType","getCurrentTime","getSensorConfiguration","getSensorScalars","getPressurePositions","maxFileLength","getFileLength","getFileChecksum","getFileTransferType","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];get#Ps(){return rt.#Os}get#$s(){return this.#Ps.every((e=>this.latestConnectionMessage.has(e)))}#Vs(){const e=this.#Ps.map((e=>({type:e})));this.#Es(e)}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#Fs(),this.connectionManager?.reconnect()}static#Bs=!1;static get ReconnectOnDisconnection(){return this.#Bs}static set ReconnectOnDisconnection(e){it.assertTypeWithError(e,"boolean"),this.#Bs=e}#zs=rt.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#zs}set reconnectOnDisconnection(e){it.assertTypeWithError(e,"boolean"),this.#zs=e}#qs;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#$t(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#ys?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#ys.status;default:return"not connected"}}#Rs(e){it.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(it.log("starting reconnect interval..."),this.#qs=setInterval((()=>{it.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#qs&&(it.log("clearing reconnect interval"),clearInterval(this.#qs),this.#qs=void 0),this.#jt(),"connected"!=e||this.#As||this.#Vs()}#js(e=!1){this.#u({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#u({type:this.connectionStatus}),e&&this.#u({type:"isConnected",message:{isConnected:this.isConnected}})}#jt(){switch(this.#As=this.connectionManager?.isConnected&&this.#$s&&this.#Ts.isCurrentTimeSet,this.connectionStatus){case"connected":this.#As&&this.#js(!0);break;case"not connected":this.#js(!0);break;default:this.#js(!1)}}#Fs(){this.latestConnectionMessage.clear(),this.#Ts.clear()}#Ws(e,t){if(it.log({messageType:e,dataView:t}),"batteryLevel"===e){const e=t.getUint8(0);it.log("received battery level",{batteryLevel:e}),this.#Hs(e)}else if(this.#Is.messageTypes.includes(e))this.#Is.parseMessage(e,t);else if(this.#Ms.messageTypes.includes(e))this.#Ms.parseMessage(e,t);else if(this.#Cs.messageTypes.includes(e))this.#Cs.parseMessage(e,t);else if(this.#Ls.messageTypes.includes(e))this.#Ls.parseMessage(e,t);else if(this.#bs.messageTypes.includes(e))this.#bs.parseMessage(e,t);else if(this.#Ts.messageTypes.includes(e))this.#Ts.parseMessage(e,t);else{if(!this.#ws.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#ws.parseMessage(e,t)}this.latestConnectionMessage.set(e,t),this.#u({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#$s&&this.#jt()}latestConnectionMessage=new Map;#bs=new oe;get deviceInformation(){return this.#bs.information}#Gs=null;get batteryLevel(){return this.#Gs}#Hs(e){it.assertTypeWithError(e,"number"),this.#Gs!=e?(this.#Gs=e,it.log({updatedBatteryLevel:this.#Gs}),this.#u({type:"batteryLevel",message:{batteryLevel:this.#Gs}})):it.log(`duplicate batteryLevel assignment ${e}`)}#Ts=new he;get id(){return this.#Ts.id}get isCharging(){return this.#Ts.isCharging}get batteryCurrent(){return this.#Ts.batteryCurrent}async getBatteryCurrent(){await this.#Ts.getBatteryCurrent()}static get MinNameLength(){return he.MinNameLength}static get MaxNameLength(){return he.MaxNameLength}get name(){return this.#Ts.name}async setName(e){await this.#Ts.setName(e)}static get Types(){return he.Types}get type(){return this.#Ts.type}async setType(e){await this.#Ts.setType(e)}static get InsoleSides(){return he.InsoleSides}get isInsole(){return this.#Ts.isInsole}get insoleSide(){return this.#Ts.insoleSide}get mtu(){return this.#Ts.mtu}static get SensorTypes(){return te.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#ws=new ne;get sensorConfiguration(){return this.#ws.configuration}static get MaxSensorRate(){return ne.MaxSensorRate}static get SensorRateStep(){return ne.SensorRateStep}async setSensorConfiguration(e){await this.#ws.setConfiguration(e)}async clearSensorConfiguration(){return this.#ws.clearSensorConfiguration()}static#Qs=!0;static get ClearSensorConfigurationOnLeave(){return this.#Qs}static set ClearSensorConfigurationOnLeave(e){it.assertTypeWithError(e,"boolean"),this.#Qs=e}#Js=rt.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Js}set clearSensorConfigurationOnLeave(e){it.assertTypeWithError(e,"boolean"),this.#Js=e}static#Zs=8;static get DefaultNumberOfPressureSensors(){return this.#Zs}get numberOfPressureSensors(){return this.#Cs.pressureSensorDataManager.numberOfSensors}#Cs=new te;resetPressureRange(){this.#Cs.pressureSensorDataManager.resetRange()}#Ds=new ue;static get VibrationLocations(){return ue.Locations}static get VibrationTypes(){return ue.Types}static get VibrationWaveformEffects(){return ue.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return ue.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return ue.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return ue.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return ue.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return ue.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return ue.MaxNumberOfWaveformSegments}async triggerVibration(e,t){this.#Ds.triggerVibration(e,t)}#Is=new P;static get FileTypes(){return P.Types}get maxFileLength(){return this.#Is.maxLength}async sendFile(e,t){const s=this.waitForEvent("fileTransferComplete");this.#Is.send(e,t),await s}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#Is.receive(e),await t}get fileTransferStatus(){return this.#Is.status}cancelFileTransfer(){this.#Is.cancel()}static get TfliteSensorTypes(){return re.SensorTypes}#Ms=new re;get tfliteName(){return this.#Ms.name}setTfliteName(e){return this.#Ms.setName(e)}static get TfliteTasks(){return re.Tasks}get tfliteTask(){return this.#Ms.task}setTfliteTask(e){return this.#Ms.setTask(e)}get tfliteSampleRate(){return this.#Ms.sampleRate}setTfliteSampleRate(e){return this.#Ms.setSampleRate(e)}get tfliteSensorTypes(){return this.#Ms.sensorTypes}get allowedTfliteSensorTypes(){return this.sensorTypes.filter((e=>re.SensorTypes.includes(e)))}setTfliteSensorTypes(e){return this.#Ms.setSensorTypes(e)}get tfliteIsReady(){return this.#Ms.isReady}get tfliteInferencingEnabled(){return this.#Ms.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#Ms.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#Ms.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#Ms.captureDelay}async setTfliteCaptureDelay(e){return this.#Ms.setCaptureDelay(e)}get tfliteThreshold(){return this.#Ms.threshold}async setTfliteThreshold(e){return this.#Ms.setThreshold(e)}#Ls=new nt;#ks(e){this.#ys.sendSmpMessage(e)}async uploadFirmware(e){return this.#Ls.uploadFirmware(e)}async reset(){return await this.#Ls.reset(),this.#ys.disconnect()}get firmwareStatus(){return this.#Ls.status}async getFirmwareImages(){return this.#Ls.getImages()}get firmwareImages(){return this.#Ls.images}async eraseFirmwareImage(){return this.#Ls.eraseImage()}async confirmFirmwareImage(e){return this.#Ls.confirmImage(e)}async testFirmwareImage(e){return this.#Ls.testImage(e)}static#Ks=[];static get ConnectedDevices(){return this.#Ks}static#Ns=!1;static get UseLocalStorage(){return this.#Ns}static set UseLocalStorage(e){this.#Xs(),it.assertTypeWithError(e,"boolean"),this.#Ns=e,this.#Ns&&!this.#Ys&&this.#en()}static#tn={devices:[]};static#Ys;static get CanUseLocalStorage(){return n&&window.localStorage}static#Xs(){it.assertWithError(n,"localStorage is only available in the browser"),it.assertWithError(window.localStorage,"localStorage not found")}static#sn="BS.Device";static#nn(){this.#Xs(),localStorage.setItem(this.#sn,JSON.stringify(this.#Ys))}static async#en(){this.#Xs();let e=localStorage.getItem(this.#sn);if("string"!=typeof e)return it.log("no info found in localStorage"),this.#Ys=Object.assign({},this.#tn),void this.#nn();try{const t=JSON.parse(e);it.log({configuration:t}),this.#Ys=t,this.CanGetDevices&&await this.GetDevices()}catch(e){it.error(e)}}static#xs(e){if("webBluetooth"!=e.connectionType)return void it.log("localStorage is only for webBluetooth devices");this.#Xs();const t=this.#Ys.devices.findIndex((t=>t.bluetoothId==e.bluetoothId));-1!=t&&(this.#Ys.devices[t].type=e.type,this.#nn())}static#in=[];static get AvailableDevices(){return this.#in}static get CanGetDevices(){return n&&navigator.bluetooth?.getDevices&&!r}static async GetDevices(){if(!n)return void it.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void it.warn("bluetooth is not available in this browser");if(r)return void it.warn("bluefy lists too many devices...");if(!navigator.bluetooth.getDevices)return void it.warn("bluetooth.getDevices() is not available in this browser");this.#Ys||this.#en();const e=this.#Ys;if(!e.devices||0==e.devices.length)return void it.log("no devices found in configuration");const t=await navigator.bluetooth.getDevices();return it.log({bluetoothDevices:t}),t.forEach((t=>{if(!t.gatt)return;let s=e.devices.find((e=>t.id==e.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.bluetoothId==t.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.bluetoothId==t.id));if(i)return void(n?.bluetoothId==i.bluetoothId&&n!=i&&(this.AvailableDevices[this.#in.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new rt,a=new We;a.device=t,t.name&&r.#Ts.updateName(t.name),r.#Ts.updateType(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#rn(),this.AvailableDevices}static#an=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#an}static#on=new S(this,this.#an);static AddEventListener(e,t,s){this.#on.addEventListener(e,t,s)}static#cn(e){this.#on.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#on.removeEventListener(e,t)}static#Us(e){if(e.isConnected)if(this.#Ks.includes(e))it.log("device already included");else{if(it.log("adding device",e),this.#Ks.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.bluetoothId},s=this.#Ys.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Ys.devices.push(t):this.#Ys.devices[s]=t,this.#nn()}this.#cn({type:"deviceConnected",message:{device:e}}),this.#cn({type:"deviceIsConnected",message:{device:e}})}else this.#Ks.includes(e)?(it.log("removing device",e),this.#Ks.splice(this.#Ks.indexOf(e),1),this.#cn({type:"deviceDisconnected",message:{device:e}}),this.#cn({type:"deviceIsConnected",message:{device:e}})):it.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.bluetoothId==e.bluetoothId));it.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#rn()}}static#rn(){it.log({AvailableDevices:this.AvailableDevices}),this.#cn({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new rt;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const at=f("BaseScanner");class ot{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#Rt(){at.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Wt(){at.assertWithError(this.constructor!=ot,`${this.constructor.name} must be subclassed`)}constructor(){this.#Wt(),this.#Rt(),T(this,this.#hn)}#hn={discoveredDevice:this.#ln.bind(this),isScanning:this.#gn.bind(this)};static#g=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#g}get eventTypes(){return ot.#g}#Ss=new S(this,this.eventTypes);addEventListener(e,t,s){this.#Ss.addEventListener(e,t,s)}dispatchEvent(e){this.#Ss.dispatchEvent(e)}removeEventListener(e,t){return this.#Ss.removeEventListener(e,t)}get isAvailable(){return!1}#un(){at.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#dn(){at.assertWithError(this.isScanning,"not scanning")}#pn(){at.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#un(),this.#pn()}stopScan(){this.#dn()}#gn(){this.isScanning?(this.#fn={},this.#mn={}):this.#vn.stop()}#fn={};get discoveredDevices(){return this.#fn}get discoveredDevicesArray(){return Object.values(this.#fn).sort(((e,t)=>this.#mn[e.bluetoothId]-this.#mn[t.bluetoothId]))}#yn(e){at.assertWithError(this.#fn[e],`no discovered device with id "${e}"`)}#ln(e){const t=e.message.discoveredDevice;this.#fn[t.bluetoothId]=t,this.#mn[t.bluetoothId]=Date.now(),this.#vn.start()}#mn={};static#bn=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#bn}get#Sn(){return ot.DiscoveredDeviceExpirationTimeout}#vn=new C(this.#Tn.bind(this),1e3);#Tn(){const e=Object.entries(this.#fn);if(0==e.length)return void this.#vn.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#mn[e];t-n>this.#Sn&&(at.log("discovered device timeout"),delete this.#fn[e],delete this.#mn[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#un()}get canReset(){return!1}reset(){at.log("resetting...")}}const ct=f("NobleConnectionManager",{log:!0});class ht extends xe{get bluetoothId(){return this.#En?.id}static get isSupported(){return i}static get type(){return"noble"}get isConnected(){return"connected"==this.#En?.state}async connect(){await super.connect(),await this.#En.connectAsync()}async disconnect(){await super.disconnect(),await this.#En.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);ct.log({characteristicName:s});const n=this.#Xt.get(s);ct.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);ct.log("writing data",i);await n.writeAsync(i,!0),n.properties.includes("read")&&await n.readAsync()}async writeCharacteristic(e,t){const s=this.#Xt.get(e);ct.assertWithError(s,`no characteristic found with name "${e}"`);const n=Buffer.from(t);ct.log("writing data",n);await s.writeAsync(n,!0),s.properties.includes("read")&&await s.readAsync()}get canReconnect(){return this.#En.connectable}async reconnect(){await super.reconnect(),ct.log("attempting to reconnect..."),this.connect()}#En;get noblePeripheral(){return this.#En}set noblePeripheral(e){ct.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(ct.log("newNoblePeripheral",e.id),this.#En&&(E(this.#En,this.#wn),delete this.#En._connectionManager),e&&(e._connectionManager=this,T(e,this.#wn)),this.#En=e):ct.log("attempted to assign duplicate noblePeripheral")}#wn={connect:this.#Cn,disconnect:this.#Dn,rssiUpdate:this.#Mn,servicesDiscover:this.#In};async#Cn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){ct.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#En.discoverServicesAsync(we),await this.#Ln()}async#Dn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){ct.log("onNoblePeripheralDisconnect",e.id),await this.#Ln()}async#Ln(){switch(ct.log(`noblePeripheral ${this.bluetoothId} state ${this.#En.state}`),this.#En.state){case"connected":case"connecting":break;case"disconnected":this.#es(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":ct.error("noblePeripheral error");break;default:ct.log(`uncaught noblePeripheral state ${this.#En.state}`)}}#es(){ct.log("removing noblePeripheral eventListeners"),this.#Kt.forEach((e=>{E(e,this.#kn)})),this.#Kt.clear(),this.#Xt.forEach((e=>{E(e,this.#Nn)})),this.#Xt.clear()}async#Mn(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){ct.log("onNoblePeripheralRssiUpdate",e.id,t)}async#In(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){ct.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];ct.log("service",s.uuid);const n=Ce(s.uuid);ct.assertWithError(n,`no name found for service uuid "${s.uuid}"`),ct.log({serviceName:n}),this.#Kt.set(n,s),s._name=n,s._connectionManager=this,T(s,this.#kn),await s.discoverCharacteristicsAsync()}}#Kt=new Map;#kn={characteristicsDiscover:this.#xn};async#xn(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){ct.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];ct.log("characteristic",s.uuid);const n=Le(s.uuid);ct.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),ct.log({characteristicName:n}),this.#Xt.set(n,s),s._name=n,s._connectionManager=this,T(s,this.#Nn),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#Un&&(this.status="connected")}#Nn={data:this.#_n,write:this.#Rn,notify:this.#Wn};#Xt=new Map;get#Un(){return Ie.every((e=>this.#Xt.has(e)))}#_n(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){ct.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(R(t)),i=e._name;ct.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#Rn(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){ct.log("onNobleCharacteristicWrite",e.uuid)}#Wn(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){ct.log("onNobleCharacteristicNotify",e.uuid,t)}}const lt=f("NobleScanner",{log:!0});let gt=!1;gt=!0;class ut extends ot{static get isSupported(){return true}#Fn=!1;get#An(){return this.#Fn}set#An(e){lt.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Fn=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):lt.log("duplicate isScanning assignment")}get isScanning(){return this.#An}#On="unknown";get#Pn(){return this.#On}set#Pn(e){lt.assertTypeWithError(e,"string"),this.#Pn!=e?(this.#On=e,lt.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):lt.log("duplicate nobleState assignment")}#$n={scanStart:this.#Vn.bind(this),scanStop:this.#Bn.bind(this),stateChange:this.#zn.bind(this),discover:this.#qn.bind(this)};#Vn(){lt.log("OnNobleScanStart"),this.#An=!0}#Bn(){lt.log("OnNobleScanStop"),this.#An=!1}#zn(e){lt.log("onNobleStateChange",e),this.#Pn=e}#qn(e){let t;lt.log("onNobleDiscover",e.id),this.#jn[e.id]||(e._scanner=this,this.#jn[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=rt.Types[s]}}const n={name:e.advertisement.localName,bluetoothId:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),T(t,this.#$n),T(this,this.#Hn)}get isAvailable(){return"poweredOn"==this.#Pn}startScan(){super.startScan(),t.startScanningAsync(Te,!0)}stopScan(){super.stopScan(),t.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),t.reset()}#Hn={expiredDiscoveredDevice:this.#Gn.bind(this)};#Gn(e){const t=e.message.discoveredDevice;this.#jn[t.bluetoothId]&&delete this.#jn[t.bluetoothId]}#jn={};#Qn(e){lt.assertTypeWithError(e,"string"),lt.assertWithError(this.#jn[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#Qn(e);const t=this.#jn[e];lt.log("connecting to discoveredDevice...",e);let s=rt.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.bluetoothId==e));s?await s.reconnect():(s=this.#Jn(t),await s.connect())}#Jn(e){const t=new rt,s=new ht;return s.noblePeripheral=e,t.connectionManager=s,t}}const dt=f("Scanner",{log:!1});let pt;ut.isSupported?(dt.log("using NobleScanner"),pt=new ut):dt.log("Scanner not available");var ft=pt;const mt=f("ServerUtils",{log:!1});function vt(e,...t){mt.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=_(...t.data),n=s.byteLength;mt.assertEnumWithError(t.type,e);return _(e.indexOf(t.type),Uint16Array.from([n]),s)}));return mt.log("messageBuffers",...s),_(...s)}const yt=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function bt(...e){return vt(yt,...e)}function St(...e){return mt.log("createDeviceMessage",...e),vt(rt.EventTypes,...e)}const Tt=bt("ping"),Et=bt("pong");bt("isScanningAvailable"),bt("isScanning"),bt("startScan"),bt("stopScan"),bt("discoveredDevices");const wt=f("BaseServer",{log:!0});class Ct{#Wt(){wt.assertWithError(this.constructor!=Ct,`${this.constructor.name} must be subclassed`)}static#g=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#g}get eventTypes(){return Ct.#g}#Ss=new S(this,this.eventTypes);addEventListener(e,t,s){this.#Ss.addEventListener(e,t,s)}dispatchEvent(e){this.#Ss.dispatchEvent(e)}removeEventListener(e,t){return this.#Ss.removeEventListener(e,t)}constructor(){this.#Wt(),wt.assertWithError(ft,"no scanner defined"),T(ft,this.#Zn),T(rt,this.#Kn),T(this,this.#Xn)}get numberOfClients(){return 0}static#Yn=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#Yn}static set ClearSensorConfigurationsWhenNoClients(e){wt.assertTypeWithError(e,"boolean"),this.#Yn=e}#ei=Ct.#Yn;get clearSensorConfigurationsWhenNoClients(){return this.#ei}set clearSensorConfigurationsWhenNoClients(e){wt.assertTypeWithError(e,"boolean"),this.#ei=e}#Xn={clientConnected:this.#ti.bind(this),clientDisconnected:this.#si.bind(this)};#ti(e){e.message.client,wt.log("onClientConnected")}#si(e){e.message.client,wt.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&rt.ConnectedDevices.forEach((e=>{e.clearSensorConfiguration(),e.setTfliteInferencingEnabled(!1)}))}broadcastMessage(e){wt.log("broadcasting",e)}#Zn={isAvailable:this.#ni.bind(this),isScanning:this.#ii.bind(this),discoveredDevice:this.#ri.bind(this),expiredDiscoveredDevice:this.#Gn.bind(this)};#ni(e){this.broadcastMessage(this.#ai)}get#ai(){return bt({type:"isScanningAvailable",data:ft.isAvailable})}#ii(e){this.broadcastMessage(this.#oi)}get#oi(){return bt({type:"isScanning",data:ft.isScanning})}#ri(e){const t=e.message.discoveredDevice;wt.log(t),this.broadcastMessage(this.#ci(t))}#ci(e){return bt({type:"discoveredDevice",data:e})}#Gn(e){const t=e.message.discoveredDevice;wt.log("expired",t),this.broadcastMessage(this.#hi(t))}#hi(e){return bt({type:"expiredDiscoveredDevice",data:e.bluetoothId})}get#li(){return bt(...ft.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#gi(){return bt({type:"connectedDevices",data:JSON.stringify(rt.ConnectedDevices.map((e=>e.bluetoothId)))})}#ui={connectionMessage:this.#di.bind(this)};#pi(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#di(e){const t=e.target;if(wt.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#fi(t,this.#pi(t,s,n)))}#Kn={deviceConnected:this.#mi.bind(this),deviceDisconnected:this.#vi.bind(this),deviceIsConnected:this.#yi.bind(this)};#mi(e){const t=e.message.device;wt.log("onDeviceConnected",t.bluetoothId),T(t,this.#ui)}#vi(e){const t=e.message.device;wt.log("onDeviceDisconnected",t.bluetoothId),E(t,this.#ui)}#yi(e){const t=e.message.device;wt.log("onDeviceIsConnected",t.bluetoothId),this.broadcastMessage(this.#bi(t))}#bi(e){return this.#fi(e,{type:"isConnected",data:e.isConnected})}#fi(e,...t){return bt({type:"deviceMessage",data:[e.bluetoothId,St(...t)]})}parseClientMessage(e){let t=[];if(Y(e,yt,this.#Si.bind(this),{responseMessages:t},!0),t=t.filter(Boolean),t.length>0)return _(t)}#Si(e,t,s){switch(e){case"ping":responseMessages.push(Et);break;case"pong":break;case"isScanningAvailable":s.responseMessages.push(this.#ai);break;case"isScanning":s.responseMessages.push(this.#oi);break;case"startScan":ft.startScan();break;case"stopScan":ft.stopScan();break;case"discoveredDevices":s.responseMessages.push(this.#li);break;case"connectToDevice":{const{string:e}=X(t);ft.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=X(t),s=rt.ConnectedDevices.find((t=>t.bluetoothId==e));if(!s){wt.error(`no device found with id ${e}`);break}s.disconnect()}break;case"connectedDevices":s.responseMessages.push(this.#gi);break;case"deviceMessage":{const{string:e,byteOffset:n}=X(t),i=rt.ConnectedDevices.find((t=>t.bluetoothId==e));if(!i){wt.error(`no device found with id ${e}`);break}const r=new DataView(t.buffer,t.byteOffset+n);s.responseMessages.push(this.parseClientDeviceMessage(i,r))}break;default:wt.error(`uncaught messageType "${e}"`)}}parseClientDeviceMessage(e,t){wt.log("onDeviceMessage",e.bluetoothId,t);let s=[];if(Y(t,pe.MessageTypes,this.#Ti.bind(this),{responseMessages:s,device:e},!0),s.length>0)return this.#fi(e,...s)}#Ti(e,t,s){switch(e){case"smp":s.device.connectionManager.sendSmpMessage(t.buffer);break;case"tx":s.device.connectionManager.sendTxData(t.buffer);break;default:s.responseMessages.push(this.#pi(s.device,e))}}}const Dt=f("WebSocketServer",{log:!0});class Mt extends Ct{get numberOfClients(){return this.#Ei?.clients.size||0}#Ei;get server(){return this.#Ei}set server(e){this.#Ei!=e?(Dt.log("assigning server..."),this.#Ei&&(Dt.log("clearing existing server..."),E(this.#Ei,this.#Xn)),T(e,this.#Xn),this.#Ei=e,Dt.log("assigned server")):Dt.log("redundant WebSocket assignment")}#Xn={close:this.#wi.bind(this),connection:this.#Ci.bind(this),error:this.#Di.bind(this),headers:this.#Mi.bind(this),listening:this.#Ii.bind(this)};#wi(){Dt.log("server.close")}#Ci(e){Dt.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new C((()=>this.#Li(e)),3e7),e.pingClientTimer.start(),T(e,this.#ki),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#Di(e){Dt.error(e)}#Mi(){}#Ii(){Dt.log("server.listening")}#ki={open:this.#Ni.bind(this),message:this.#Si.bind(this),close:this.#xi.bind(this),error:this.#Ui.bind(this)};#Ni(e){Dt.log("client.open")}#Si(e){Dt.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(R(e.data));this.#_i(t,s)}#xi(e){Dt.log("client.close");const t=e.target;t.pingClientTimer.stop(),E(t,this.#ki),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#Ui(e){Dt.log("client.error")}#_i(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Li(e){e.isAlive?(e.isAlive=!1,e.send(Tt)):e.terminate()}}const It=f("DevicePairPressureSensorDataManager",{log:!0});class Lt{static get Sides(){return rt.InsoleSides}get sides(){return rt.InsoleSides}#Ri={};#J=new q;resetPressureRange(){this.#J.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(It.log({pressure:t,insoleSide:s}),this.#Ri[s]=t,this.#Wi)return this.#Fi();It.log("doesn't have all pressure data yet...")}get#Wi(){return this.sides.every((e=>e in this.#Ri))}#Fi(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Ri[t].rawSum,e.normalizedSum+=this.#Ri[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Ri[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#J.updateAndGetNormalization(e.center)),It.log({devicePairPressure:e}),e}}const kt=f("DevicePairSensorDataManager",{log:!0});class Nt{static get Sides(){return rt.InsoleSides}get sides(){return rt.InsoleSides}#Ai={};pressureSensorDataManager=new Lt;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(kt.log({sensorType:s,timestamp:t,event:e}),this.#Ai[s]||(this.#Ai[s]={}),this.#Ai[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else kt.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#Ai[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else kt.log("no value received")}onDataReceived}const xt=f("DevicePair",{log:!0});class Ut{constructor(){this.#Cs.onDataReceived=this.#Oi.bind(this)}static#g=["isConnected","pressure",...rt.EventTypes.map((e=>`device${y(e)}`))];static get EventTypes(){return this.#g}get eventTypes(){return Ut.#g}#Ss=new S(this,this.eventTypes);addEventListener(e,t,s){this.#Ss.addEventListener(e,t,s)}#u(e){this.#Ss.dispatchEvent(e)}removeEventListener(e,t){return this.#Ss.removeEventListener(e,t)}static get Sides(){return rt.InsoleSides}get sides(){return Ut.Sides}#Pi;get left(){return this.#Pi}#$i;get right(){return this.#$i}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#$t(){xt.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void xt.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&E(s,this.#Vi),T(e,this.#Vi),t){case"left":this.#Pi=e;break;case"right":this.#$i=e}return xt.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#u({type:"isConnected",message:{isConnected:this.isConnected}}),this.#u({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}xt.log("device already assigned")}#Vi={connectionStatus:this.#Bi.bind(this),isConnected:this.#yi.bind(this),sensorData:this.#zi.bind(this),getSensorConfiguration:this.#Bi.bind(this)};#Bi(e){this.#u({type:`device${y(e.type)}`,message:{...e.message,device:e.target}})}#yi(e){this.#Bi(e),this.#u({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#Cs=new Nt;#zi(e){this.#Bi(e),this.#u({type:`device${y(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Cs.onDeviceSensorData(e)}#Oi(e,t){xt.log({sensorType:e,sensorData:t}),this.#u({type:e,message:t})}resetPressureRange(){this.#Cs.resetPressureRange()}async triggerVibration(e,t){const s=this.sides.map((s=>this[s]?.triggerVibration(e,t))).filter(Boolean);return Promise.allSettled(s)}static#qi=new Ut;static get shared(){return this.#qi}static{rt.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#qi.assignInsole(t)}))}}export{rt as Device,Ut as DevicePair,ft as Scanner,Mt as WebSocketServer,v as setAllConsoleLevelFlags,m as setConsoleLevelFlagsForType};
