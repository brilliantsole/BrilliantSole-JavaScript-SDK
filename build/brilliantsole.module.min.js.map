{"version":3,"file":"brilliantsole.module.min.js","sources":["../node_modules/tslib/tslib.es6.js","../brilliantsole/utils/environment.ts","../brilliantsole/utils/Console.ts","../brilliantsole/utils/EventDispatcher.ts","../brilliantsole/utils/Timer.ts","../brilliantsole/utils/checksum.ts","../brilliantsole/utils/Text.ts","../brilliantsole/utils/ArrayBufferUtils.ts","../node_modules/auto-bind/index.js","../brilliantsole/FileTransferManager.ts","../brilliantsole/utils/MathUtils.ts","../brilliantsole/utils/RangeHelper.ts","../brilliantsole/utils/CenterOfPressureHelper.ts","../brilliantsole/sensor/PressureSensorDataManager.ts","../brilliantsole/utils/ArrayUtils.ts","../brilliantsole/sensor/MotionSensorDataManager.ts","../brilliantsole/sensor/BarometerSensorDataManager.ts","../brilliantsole/utils/ParseUtils.ts","../brilliantsole/sensor/SensorDataManager.ts","../brilliantsole/sensor/SensorConfigurationManager.ts","../brilliantsole/TfliteManager.ts","../brilliantsole/DeviceInformationManager.ts","../brilliantsole/InformationManager.ts","../brilliantsole/vibration/VibrationWaveformEffects.ts","../brilliantsole/vibration/VibrationManager.ts","../brilliantsole/WifiManager.ts","../brilliantsole/connection/BaseConnectionManager.ts","../brilliantsole/utils/EventUtils.ts","../brilliantsole/connection/bluetooth/bluetoothUUIDs.ts","../brilliantsole/connection/bluetooth/BluetoothConnectionManager.ts","../brilliantsole/connection/bluetooth/WebBluetoothConnectionManager.ts","../brilliantsole/utils/cbor.js","../brilliantsole/utils/mcumgr.js","../brilliantsole/FirmwareManager.ts","../brilliantsole/DeviceManager.ts","../brilliantsole/server/ServerUtils.ts","../brilliantsole/server/websocket/WebSocketUtils.ts","../brilliantsole/connection/websocket/WebSocketConnectionManager.ts","../brilliantsole/Device.ts","../brilliantsole/devicePair/DevicePairPressureSensorDataManager.ts","../brilliantsole/devicePair/DevicePairSensorDataManager.ts","../brilliantsole/devicePair/DevicePair.ts","../brilliantsole/utils/stringUtils.ts","../brilliantsole/connection/ClientConnectionManager.ts","../brilliantsole/server/BaseClient.ts","../brilliantsole/server/websocket/WebSocketClient.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","type ENVIRONMENT_FLAG = \"__BRILLIANTSOLE__DEV__\" | \"__BRILLIANTSOLE__PROD__\";\nconst __BRILLIANTSOLE__ENVIRONMENT__: ENVIRONMENT_FLAG = \"__BRILLIANTSOLE__DEV__\";\n\n//@ts-expect-error\nconst isInProduction = __BRILLIANTSOLE__ENVIRONMENT__ == \"__BRILLIANTSOLE__PROD__\";\nconst isInDev = __BRILLIANTSOLE__ENVIRONMENT__ == \"__BRILLIANTSOLE__DEV__\";\n\n// https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isInBrowser = typeof window !== \"undefined\" && typeof window?.document !== \"undefined\";\nconst isInNode = typeof process !== \"undefined\" && process?.versions?.node != null;\n\nconst userAgent = (isInBrowser && navigator.userAgent) || \"\";\n\nlet isBluetoothSupported = false;\nif (isInBrowser) {\n  isBluetoothSupported = Boolean(navigator.bluetooth);\n} else if (isInNode) {\n  isBluetoothSupported = true;\n}\n\nconst isInBluefy = isInBrowser && /Bluefy/i.test(userAgent);\nconst isInWebBLE = isInBrowser && /WebBLE/i.test(userAgent);\n\nconst isAndroid = isInBrowser && /Android/i.test(userAgent);\nconst isSafari = isInBrowser && /Safari/i.test(userAgent) && !/Chrome/i.test(userAgent);\n\nconst isIOS = isInBrowser && /iPad|iPhone|iPod/i.test(userAgent);\nconst isMac = isInBrowser && /Macintosh/i.test(userAgent);\n\n// @ts-expect-error\nconst isInLensStudio = !isInBrowser && !isInNode && typeof global !== \"undefined\" && typeof Studio !== \"undefined\";\n\nexport {\n  isInDev,\n  isInProduction,\n  isInBrowser,\n  isInNode,\n  isAndroid,\n  isInBluefy,\n  isInWebBLE,\n  isSafari,\n  isInLensStudio,\n  isIOS,\n  isMac,\n  isBluetoothSupported,\n};\n","import { isInDev, isInLensStudio, isInNode } from \"./environment.ts\";\n\ndeclare var Studio: any | undefined;\n\nexport type LogFunction = (...data: any[]) => void;\nexport type AssertLogFunction = (condition: boolean, ...data: any[]) => void;\n\nexport interface ConsoleLevelFlags {\n  log?: boolean;\n  warn?: boolean;\n  error?: boolean;\n  assert?: boolean;\n  table?: boolean;\n}\n\ninterface ConsoleLike {\n  log?: LogFunction;\n  warn?: LogFunction;\n  error?: LogFunction;\n  assert?: AssertLogFunction;\n  table?: LogFunction;\n}\n\nvar __console: ConsoleLike;\nif (isInLensStudio) {\n  const log = function (...args: any[]) {\n    Studio.log(args.map((value) => new String(value)).join(\",\"));\n  };\n  __console = {};\n  __console.log = log;\n  __console.warn = log.bind(__console, \"WARNING\");\n  __console.error = log.bind(__console, \"ERROR\");\n} else {\n  __console = console;\n}\n\nfunction getCallerFunctionPath(): string {\n  const stack = new Error().stack;\n  if (!stack) return \"\";\n\n  const lines = stack.split(\"\\n\");\n  const callerLine = lines[3] || lines[2];\n\n  const match = callerLine.match(/at (.*?) \\(/) || callerLine.match(/at (.*)/);\n  if (!match) return \"\";\n\n  const fullFn = match[1].trim();\n  return `[${fullFn}]`;\n}\n\nfunction wrapWithLocation(fn: LogFunction): LogFunction {\n  return (...args: any[]) => {\n    if (isInNode) {\n      const functionPath = getCallerFunctionPath();\n      fn(functionPath, ...args);\n    } else {\n      fn(...args);\n    }\n  };\n}\n\n// console.assert not supported in WebBLE\nif (!__console.assert) {\n  const assert: AssertLogFunction = (condition, ...data) => {\n    if (!condition) {\n      __console.warn!(...data);\n    }\n  };\n  __console.assert = assert;\n}\n\n// console.table not supported in WebBLE\nif (!__console.table) {\n  const table: LogFunction = (...data) => {\n    __console.log!(...data);\n  };\n  __console.table = table;\n}\n\nfunction emptyFunction() {}\n\nconst log: LogFunction = isInNode\n  ? wrapWithLocation(__console.log!.bind(__console))\n  : __console.log!.bind(__console);\nconst warn: LogFunction = isInNode\n  ? wrapWithLocation(__console.warn!.bind(__console))\n  : __console.warn!.bind(__console);\nconst error: LogFunction = isInNode\n  ? wrapWithLocation(__console.error!.bind(__console))\n  : __console.error!.bind(__console);\nconst table: LogFunction = isInNode\n  ? wrapWithLocation(__console.table!.bind(__console))\n  : __console.table!.bind(__console);\nconst assert: AssertLogFunction = __console.assert.bind(__console);\n\nclass Console {\n  static #consoles: { [type: string]: Console } = {};\n\n  constructor(type: string) {\n    if (Console.#consoles[type]) {\n      throw new Error(`\"${type}\" console already exists`);\n    }\n    Console.#consoles[type] = this;\n  }\n\n  #levelFlags: ConsoleLevelFlags = {\n    log: isInDev,\n    warn: isInDev,\n    assert: true,\n    error: true,\n    table: true,\n  };\n\n  setLevelFlags(levelFlags: ConsoleLevelFlags) {\n    Object.assign(this.#levelFlags, levelFlags);\n  }\n\n  /** @throws {Error} if no console with type \"type\" is found */\n  static setLevelFlagsForType(type: string, levelFlags: ConsoleLevelFlags) {\n    if (!this.#consoles[type]) {\n      throw new Error(`no console found with type \"${type}\"`);\n    }\n    this.#consoles[type].setLevelFlags(levelFlags);\n  }\n\n  static setAllLevelFlags(levelFlags: ConsoleLevelFlags) {\n    for (const type in this.#consoles) {\n      this.#consoles[type].setLevelFlags(levelFlags);\n    }\n  }\n\n  static create(type: string, levelFlags?: ConsoleLevelFlags): Console {\n    const console = this.#consoles[type] || new Console(type);\n    if (isInDev && levelFlags) {\n      console.setLevelFlags(levelFlags);\n    }\n    return console;\n  }\n\n  get log() {\n    return this.#levelFlags.log ? log : emptyFunction;\n  }\n\n  get warn() {\n    return this.#levelFlags.warn ? warn : emptyFunction;\n  }\n\n  get error() {\n    return this.#levelFlags.error ? error : emptyFunction;\n  }\n\n  get assert() {\n    return this.#levelFlags.assert ? assert : emptyFunction;\n  }\n\n  get table() {\n    return this.#levelFlags.table ? table : emptyFunction;\n  }\n\n  /** @throws {Error} if condition is not met */\n  assertWithError(condition: any, message: string) {\n    if (!Boolean(condition)) {\n      throw new Error(message);\n    }\n  }\n\n  /** @throws {Error} if value's type doesn't match */\n  assertTypeWithError(value: any, type: string) {\n    this.assertWithError(\n      typeof value == type,\n      `value ${value} of type \"${typeof value}\" not of type \"${type}\"`\n    );\n  }\n\n  /** @throws {Error} if value's type doesn't match */\n  assertEnumWithError(value: string, enumeration: readonly string[]) {\n    this.assertWithError(\n      enumeration.includes(value),\n      `invalid enum \"${value}\"`\n    );\n  }\n\n  /** @throws {Error} if value is not within some range */\n  assertRangeWithError(name: string, value: number, min: number, max: number) {\n    this.assertWithError(\n      value >= min && value <= max,\n      `${name} ${value} must be within ${min}-${max}`\n    );\n  }\n}\n\nexport function createConsole(\n  type: string,\n  levelFlags?: ConsoleLevelFlags\n): Console {\n  return Console.create(type, levelFlags);\n}\n\n/** @throws {Error} if no console with type is found */\nexport function setConsoleLevelFlagsForType(\n  type: string,\n  levelFlags: ConsoleLevelFlags\n) {\n  Console.setLevelFlagsForType(type, levelFlags);\n}\n\nexport function setAllConsoleLevelFlags(levelFlags: ConsoleLevelFlags) {\n  Console.setAllLevelFlags(levelFlags);\n}\n","import { createConsole } from \"./Console.ts\";\nimport { deepEqual } from \"./ObjectUtils.ts\";\n\nconst _console = createConsole(\"EventDispatcher\", { log: false });\n\nexport type EventMap<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = {\n  [T in keyof EventMessages]: { type: T; target: Target; message: EventMessages[T] };\n};\nexport type EventListenerMap<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = {\n  [T in keyof EventMessages]: (event: { type: T; target: Target; message: EventMessages[T] }) => void;\n};\n\nexport type Event<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = EventMap<Target, EventType, EventMessages>[keyof EventMessages];\n\ntype SpecificEvent<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>,\n  SpecificEventType extends EventType\n> = { type: SpecificEventType; target: Target; message: EventMessages[SpecificEventType] };\n\nexport type BoundEventListeners<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = {\n  [SpecificEventType in keyof EventMessages]?: (\n    // @ts-expect-error\n    event: SpecificEvent<Target, EventType, EventMessages, SpecificEventType>\n  ) => void;\n};\n\nclass EventDispatcher<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> {\n  private listeners: {\n    [T in EventType]?: {\n      listener: (event: { type: T; target: Target; message: EventMessages[T] }) => void;\n      once?: boolean;\n      shouldRemove?: boolean;\n    }[];\n  } = {};\n\n  constructor(private target: Target, private validEventTypes: readonly EventType[]) {\n    this.addEventListener = this.addEventListener.bind(this);\n    this.removeEventListener = this.removeEventListener.bind(this);\n    this.removeEventListeners = this.removeEventListeners.bind(this);\n    this.removeAllEventListeners = this.removeAllEventListeners.bind(this);\n    this.dispatchEvent = this.dispatchEvent.bind(this);\n    this.waitForEvent = this.waitForEvent.bind(this);\n  }\n\n  private isValidEventType(type: any): type is EventType {\n    return this.validEventTypes.includes(type);\n  }\n\n  private updateEventListeners(type: EventType) {\n    if (!this.listeners[type]) return;\n    this.listeners[type] = this.listeners[type]!.filter((listenerObj) => {\n      if (listenerObj.shouldRemove) {\n        _console.log(`removing \"${type}\" eventListener`, listenerObj);\n      }\n      return !listenerObj.shouldRemove;\n    });\n  }\n\n  addEventListener<T extends EventType>(\n    type: T,\n    listener: (event: { type: T; target: Target; message: EventMessages[T] }) => void,\n    options: { once?: boolean } = { once: false }\n  ): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n      _console.log(`creating \"${type}\" listeners array`, this.listeners[type]!);\n    }\n    const alreadyAdded = this.listeners[type].find((listenerObject) => {\n      return listenerObject.listener == listener && listenerObject.once == options.once;\n    });\n    if (alreadyAdded) {\n      _console.log(\"already added listener\");\n      return;\n    }\n    _console.log(`adding \"${type}\" listener`, listener, options);\n    this.listeners[type]!.push({ listener, once: options.once });\n\n    _console.log(`currently have ${this.listeners[type]!.length} \"${type}\" listeners`);\n  }\n\n  removeEventListener<T extends EventType>(\n    type: T,\n    listener: (event: { type: T; target: Target; message: EventMessages[T] }) => void\n  ): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) return;\n\n    _console.log(`removing \"${type}\" listener...`, listener);\n    this.listeners[type]!.forEach((listenerObj) => {\n      const isListenerToRemove = listenerObj.listener === listener;\n      if (isListenerToRemove) {\n        _console.log(`flagging \"${type}\" listener`, listener);\n        listenerObj.shouldRemove = true;\n      }\n    });\n\n    this.updateEventListeners(type);\n  }\n\n  removeEventListeners<T extends EventType>(type: T): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) return;\n\n    _console.log(`removing \"${type}\" listeners...`);\n    this.listeners[type] = [];\n  }\n\n  removeAllEventListeners(): void {\n    _console.log(`removing listeners...`);\n    this.listeners = {};\n  }\n\n  dispatchEvent<T extends EventType>(type: T, message: EventMessages[T]): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) return;\n\n    this.listeners[type]!.forEach((listenerObj) => {\n      if (listenerObj.shouldRemove) {\n        return;\n      }\n\n      _console.log(`dispatching \"${type}\" listener`, listenerObj);\n      listenerObj.listener({ type, target: this.target, message });\n\n      if (listenerObj.once) {\n        _console.log(`flagging \"${type}\" listener`, listenerObj);\n        listenerObj.shouldRemove = true;\n      }\n    });\n    this.updateEventListeners(type);\n  }\n\n  waitForEvent<T extends EventType>(type: T): Promise<{ type: T; target: Target; message: EventMessages[T] }> {\n    return new Promise((resolve) => {\n      const onceListener = (event: { type: T; target: Target; message: EventMessages[T] }) => {\n        resolve(event);\n      };\n\n      this.addEventListener(type, onceListener, { once: true });\n    });\n  }\n}\n\nexport default EventDispatcher;\n","import { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"Timer\", { log: false });\n\nexport async function wait(delay: number) {\n  _console.log(`waiting for ${delay} ms`);\n  return new Promise((resolve: Function) => {\n    setTimeout(() => resolve(), delay);\n  });\n}\n\nclass Timer {\n  #callback!: Function;\n  get callback() {\n    return this.#callback;\n  }\n  set callback(newCallback) {\n    _console.assertTypeWithError(newCallback, \"function\");\n    _console.log({ newCallback });\n    this.#callback = newCallback;\n    if (this.isRunning) {\n      this.restart();\n    }\n  }\n\n  #interval!: number;\n  get interval() {\n    return this.#interval;\n  }\n  set interval(newInterval) {\n    _console.assertTypeWithError(newInterval, \"number\");\n    _console.assertWithError(newInterval > 0, \"interval must be above 0\");\n    _console.log({ newInterval });\n    this.#interval = newInterval;\n    if (this.isRunning) {\n      this.restart();\n    }\n  }\n\n  constructor(callback: Function, interval: number) {\n    this.interval = interval;\n    this.callback = callback;\n  }\n\n  #intervalId: number | undefined;\n  get isRunning() {\n    return this.#intervalId != undefined;\n  }\n\n  start(immediately = false) {\n    if (this.isRunning) {\n      _console.log(\"interval already running\");\n      return;\n    }\n    _console.log(`starting interval every ${this.#interval}ms`);\n    this.#intervalId = setInterval(this.#callback, this.#interval);\n    if (immediately) {\n      this.#callback();\n    }\n  }\n  stop() {\n    if (!this.isRunning) {\n      _console.log(\"interval already not running\");\n      return;\n    }\n    _console.log(\"stopping interval\");\n    clearInterval(this.#intervalId);\n    this.#intervalId = undefined;\n  }\n  restart(startImmediately = false) {\n    this.stop();\n    this.start(startImmediately);\n  }\n}\nexport default Timer;\n","import { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"checksum\", { log: false });\n\n// https://github.com/googlecreativelab/tiny-motion-trainer/blob/5fceb49f018ae0c403bf9f0ccc437309c2acb507/frontend/src/tf4micro-motion-kit/modules/bleFileTransfer#L195\n\n// See http://home.thep.lu.se/~bjorn/crc/ for more information on simple CRC32 calculations.\nexport function crc32ForByte(r: number) {\n  for (let j = 0; j < 8; ++j) {\n    r = (r & 1 ? 0 : 0xedb88320) ^ (r >>> 1);\n  }\n  return r ^ 0xff000000;\n}\n\nconst tableSize = 256;\nconst crc32Table = new Uint32Array(tableSize);\nfor (let i = 0; i < tableSize; ++i) {\n  crc32Table[i] = crc32ForByte(i);\n}\n\nexport function crc32(dataIterable: ArrayBuffer | number[]) {\n  let dataBytes = new Uint8Array(dataIterable);\n  let crc = 0;\n  for (let i = 0; i < dataBytes.byteLength; ++i) {\n    const crcLowByte = crc & 0x000000ff;\n    const dataByte = dataBytes[i];\n    const tableIndex = crcLowByte ^ dataByte;\n    // The last >>> is to convert this into an unsigned 32-bit integer.\n    crc = (crc32Table[tableIndex] ^ (crc >>> 8)) >>> 0;\n  }\n  return crc;\n}\n\n// This is a small test function for the CRC32 implementation, not normally called but left in\n// for debugging purposes. We know the expected CRC32 of [97, 98, 99, 100, 101] is 2240272485,\n// or 0x8587d865, so if anything else is output we know there's an error in the implementation.\nexport function testCrc32() {\n  const testArray = [97, 98, 99, 100, 101];\n  const testArrayCrc32 = crc32(testArray);\n  _console.log(\"CRC32 for [97, 98, 99, 100, 101] is 0x\" + testArrayCrc32.toString(16) + \" (\" + testArrayCrc32 + \")\");\n}\n","var _TextEncoder;\nif (typeof TextEncoder == \"undefined\") {\n  _TextEncoder = class {\n    encode(string: string) {\n      const encoding = Array.from(string).map((char) => char.charCodeAt(0));\n      return Uint8Array.from(encoding);\n    }\n  };\n} else {\n  _TextEncoder = TextEncoder;\n}\n\nvar _TextDecoder;\nif (typeof TextDecoder == \"undefined\") {\n  _TextDecoder = class {\n    decode(data: ArrayBuffer) {\n      const byteArray = Array.from(new Uint8Array(data));\n      return byteArray\n        .map((value) => {\n          return String.fromCharCode(value);\n        })\n        .join(\"\");\n    }\n  };\n} else {\n  _TextDecoder = TextDecoder;\n}\n\nexport const textEncoder = new _TextEncoder();\nexport const textDecoder = new _TextDecoder();\n","import { createConsole } from \"./Console.ts\";\nimport { textEncoder } from \"./Text.ts\";\n\nconst _console = createConsole(\"ArrayBufferUtils\", { log: false });\n\nexport function concatenateArrayBuffers(...arrayBuffers: any[]): ArrayBuffer {\n  arrayBuffers = arrayBuffers.filter((arrayBuffer) => arrayBuffer != undefined || arrayBuffer != null);\n  arrayBuffers = arrayBuffers.map((arrayBuffer) => {\n    if (typeof arrayBuffer == \"number\") {\n      const number = arrayBuffer;\n      return Uint8Array.from([Math.floor(number)]);\n    } else if (typeof arrayBuffer == \"boolean\") {\n      const boolean = arrayBuffer;\n      return Uint8Array.from([boolean ? 1 : 0]);\n    } else if (typeof arrayBuffer == \"string\") {\n      const string = arrayBuffer;\n      return stringToArrayBuffer(string);\n    } else if (arrayBuffer instanceof Array) {\n      const array = arrayBuffer;\n      return concatenateArrayBuffers(...array);\n    } else if (arrayBuffer instanceof ArrayBuffer) {\n      return arrayBuffer;\n    } else if (\"buffer\" in arrayBuffer && arrayBuffer.buffer instanceof ArrayBuffer) {\n      const bufferContainer = arrayBuffer;\n      return bufferContainer.buffer;\n    } else if (arrayBuffer instanceof DataView) {\n      const dataView = arrayBuffer;\n      return dataView.buffer;\n    } else if (typeof arrayBuffer == \"object\") {\n      const object = arrayBuffer;\n      return objectToArrayBuffer(object);\n    } else {\n      return arrayBuffer;\n    }\n  });\n  arrayBuffers = arrayBuffers.filter((arrayBuffer) => arrayBuffer && \"byteLength\" in arrayBuffer);\n  const length = arrayBuffers.reduce((length, arrayBuffer) => length + arrayBuffer.byteLength, 0);\n  const uint8Array = new Uint8Array(length);\n  let byteOffset = 0;\n  arrayBuffers.forEach((arrayBuffer) => {\n    uint8Array.set(new Uint8Array(arrayBuffer), byteOffset);\n    byteOffset += arrayBuffer.byteLength;\n  });\n  return uint8Array.buffer;\n}\n\nexport function dataToArrayBuffer(data: Buffer) {\n  return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n}\n\nexport function stringToArrayBuffer(string: string) {\n  const encoding = textEncoder.encode(string);\n  return concatenateArrayBuffers(encoding.byteLength, encoding);\n}\n\nexport function objectToArrayBuffer(object: object) {\n  return stringToArrayBuffer(JSON.stringify(object));\n}\n\nexport function sliceDataView(dataView: DataView, begin: number, length?: number) {\n  let end;\n  if (length != undefined) {\n    end = dataView.byteOffset + begin + length;\n  }\n  _console.log({ dataView, begin, end, length });\n  return new DataView(dataView.buffer.slice(dataView.byteOffset + begin, end));\n}\n\nexport type FileLike = number[] | ArrayBuffer | DataView | URL | string | File;\n\nexport async function getFileBuffer(file: FileLike) {\n  let fileBuffer;\n  if (file instanceof Array) {\n    fileBuffer = Uint8Array.from(file);\n  } else if (file instanceof DataView) {\n    fileBuffer = file.buffer;\n  } else if (typeof file == \"string\" || file instanceof URL) {\n    const response = await fetch(file);\n    fileBuffer = await response.arrayBuffer();\n  } else if (file instanceof File) {\n    fileBuffer = await file.arrayBuffer();\n  } else if (file instanceof ArrayBuffer) {\n    fileBuffer = file;\n  } else {\n    throw { error: \"invalid file type\", file };\n  }\n  return fileBuffer;\n}\n","// Gets all non-builtin properties up the prototype chain.\nconst getAllProperties = object => {\n\tconst properties = new Set();\n\n\tdo {\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tproperties.add([object, key]);\n\t\t}\n\t} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n\treturn properties;\n};\n\nexport default function autoBind(self, {include, exclude} = {}) {\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n\t\tif (include) {\n\t\t\treturn include.some(match); // eslint-disable-line unicorn/no-array-callback-reference\n\t\t}\n\n\t\tif (exclude) {\n\t\t\treturn !exclude.some(match); // eslint-disable-line unicorn/no-array-callback-reference\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tfor (const [object, key] of getAllProperties(self.constructor.prototype)) {\n\t\tif (key === 'constructor' || !filter(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\t\tif (descriptor && typeof descriptor.value === 'function') {\n\t\t\tself[key] = self[key].bind(self);\n\t\t}\n\t}\n\n\treturn self;\n}\n","import { createConsole } from \"./utils/Console.ts\";\nimport { crc32 } from \"./utils/checksum.ts\";\nimport { getFileBuffer } from \"./utils/ArrayBufferUtils.ts\";\nimport { FileLike } from \"./utils/ArrayBufferUtils.ts\";\nimport Device, { SendMessageCallback } from \"./Device.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"FileTransferManager\", { log: false });\n\nexport const FileTransferMessageTypes = [\n  \"maxFileLength\",\n  \"getFileType\",\n  \"setFileType\",\n  \"getFileLength\",\n  \"setFileLength\",\n  \"getFileChecksum\",\n  \"setFileChecksum\",\n  \"setFileTransferCommand\",\n  \"fileTransferStatus\",\n  \"getFileBlock\",\n  \"setFileBlock\",\n  \"fileBytesTransferred\",\n] as const;\nexport type FileTransferMessageType = (typeof FileTransferMessageTypes)[number];\n\nexport const FileTypes = [\"tflite\", \"wifiServerCert\", \"wifiServerKey\"] as const;\nexport type FileType = (typeof FileTypes)[number];\n\nexport const FileTransferStatuses = [\"idle\", \"sending\", \"receiving\"] as const;\nexport type FileTransferStatus = (typeof FileTransferStatuses)[number];\n\nexport const FileTransferCommands = [\n  \"startSend\",\n  \"startReceive\",\n  \"cancel\",\n] as const;\nexport type FileTransferCommand = (typeof FileTransferCommands)[number];\n\nexport const FileTransferDirections = [\"sending\", \"receiving\"] as const;\nexport type FileTransferDirection = (typeof FileTransferDirections)[number];\n\nexport const FileTransferEventTypes = [\n  ...FileTransferMessageTypes,\n  \"fileTransferProgress\",\n  \"fileTransferComplete\",\n  \"fileReceived\",\n] as const;\nexport type FileTransferEventType = (typeof FileTransferEventTypes)[number];\n\nexport interface FileTransferEventMessages {\n  maxFileLength: { maxFileLength: number };\n  getFileType: { fileType: FileType };\n  getFileLength: { fileLength: number };\n  getFileChecksum: { fileChecksum: number };\n  fileTransferStatus: { fileTransferStatus: FileTransferStatus };\n  getFileBlock: { fileTransferBlock: DataView };\n  fileTransferProgress: { progress: number };\n  fileTransferComplete: { direction: FileTransferDirection };\n  fileReceived: { file: File | Blob };\n}\n\nexport type FileTransferEventDispatcher = EventDispatcher<\n  Device,\n  FileTransferEventType,\n  FileTransferEventMessages\n>;\nexport type SendFileTransferMessageCallback =\n  SendMessageCallback<FileTransferMessageType>;\n\nclass FileTransferManager {\n  constructor() {\n    autoBind(this);\n  }\n  sendMessage!: SendFileTransferMessageCallback;\n\n  eventDispatcher!: FileTransferEventDispatcher;\n  get addEventListener() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  #assertValidType(type: FileType) {\n    _console.assertEnumWithError(type, FileTypes);\n  }\n  #assertValidTypeEnum(typeEnum: number) {\n    _console.assertWithError(\n      typeEnum in FileTypes,\n      `invalid typeEnum ${typeEnum}`\n    );\n  }\n\n  #assertValidStatusEnum(statusEnum: number) {\n    _console.assertWithError(\n      statusEnum in FileTransferStatuses,\n      `invalid statusEnum ${statusEnum}`\n    );\n  }\n  #assertValidCommand(command: FileTransferCommand) {\n    _console.assertEnumWithError(command, FileTransferCommands);\n  }\n\n  static #MaxLength = 0; // kB\n  static get MaxLength() {\n    return this.#MaxLength;\n  }\n  #maxLength = FileTransferManager.MaxLength;\n  /** kB */\n  get maxLength() {\n    return this.#maxLength;\n  }\n  #parseMaxLength(dataView: DataView) {\n    _console.log(\"parseFileMaxLength\", dataView);\n    const maxLength = dataView.getUint32(0, true);\n    _console.log(`maxLength: ${maxLength / 1024}kB`);\n    this.#updateMaxLength(maxLength);\n  }\n  #updateMaxLength(maxLength: number) {\n    _console.log({ maxLength });\n    this.#maxLength = maxLength;\n    this.#dispatchEvent(\"maxFileLength\", { maxFileLength: maxLength });\n  }\n  #assertValidLength(length: number) {\n    _console.assertWithError(\n      length <= this.maxLength,\n      `file length ${length}kB too large - must be ${this.maxLength}kB or less`\n    );\n  }\n\n  #type: FileType | undefined;\n  get type() {\n    return this.#type;\n  }\n  #parseType(dataView: DataView) {\n    _console.log(\"parseFileType\", dataView);\n    const typeEnum = dataView.getUint8(0);\n    this.#assertValidTypeEnum(typeEnum);\n    const type = FileTypes[typeEnum];\n    this.#updateType(type);\n  }\n  #updateType(type: FileType) {\n    _console.log({ fileTransferType: type });\n    this.#type = type;\n    this.#dispatchEvent(\"getFileType\", { fileType: type });\n  }\n  async #setType(newType: FileType, sendImmediately?: boolean) {\n    this.#assertValidType(newType);\n    if (this.type == newType) {\n      _console.log(`redundant type assignment ${newType}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getFileType\");\n\n    const typeEnum = FileTypes.indexOf(newType);\n    this.sendMessage(\n      [{ type: \"setFileType\", data: Uint8Array.from([typeEnum]).buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #length = 0;\n  get length() {\n    return this.#length;\n  }\n  #parseLength(dataView: DataView) {\n    _console.log(\"parseFileLength\", dataView);\n    const length = dataView.getUint32(0, true);\n\n    this.#updateLength(length);\n  }\n  #updateLength(length: number) {\n    _console.log(`length: ${length / 1024}kB`);\n    this.#length = length;\n    this.#dispatchEvent(\"getFileLength\", { fileLength: length });\n  }\n  async #setLength(newLength: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newLength, \"number\");\n    this.#assertValidLength(newLength);\n    if (this.length == newLength) {\n      _console.log(`redundant length assignment ${newLength}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getFileLength\");\n\n    const dataView = new DataView(new ArrayBuffer(4));\n    dataView.setUint32(0, newLength, true);\n    this.sendMessage(\n      [{ type: \"setFileLength\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #checksum = 0;\n  get checksum() {\n    return this.#checksum;\n  }\n  #parseChecksum(dataView: DataView) {\n    _console.log(\"checksum\", dataView);\n    const checksum = dataView.getUint32(0, true);\n    this.#updateChecksum(checksum);\n  }\n  #updateChecksum(checksum: number) {\n    _console.log({ checksum });\n    this.#checksum = checksum;\n    this.#dispatchEvent(\"getFileChecksum\", { fileChecksum: checksum });\n  }\n  async #setChecksum(newChecksum: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newChecksum, \"number\");\n    if (this.checksum == newChecksum) {\n      _console.log(`redundant checksum assignment ${newChecksum}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getFileChecksum\");\n\n    const dataView = new DataView(new ArrayBuffer(4));\n    dataView.setUint32(0, newChecksum, true);\n    this.sendMessage(\n      [{ type: \"setFileChecksum\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  async #setCommand(command: FileTransferCommand, sendImmediately?: boolean) {\n    this.#assertValidCommand(command);\n\n    const promise = this.waitForEvent(\"fileTransferStatus\");\n    _console.log(`setting command ${command}`);\n    const commandEnum = FileTransferCommands.indexOf(command);\n    this.sendMessage(\n      [\n        {\n          type: \"setFileTransferCommand\",\n          data: Uint8Array.from([commandEnum]).buffer,\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #status: FileTransferStatus = \"idle\";\n  get status() {\n    return this.#status;\n  }\n  #parseStatus(dataView: DataView) {\n    _console.log(\"parseFileStatus\", dataView);\n    const statusEnum = dataView.getUint8(0);\n    this.#assertValidStatusEnum(statusEnum);\n    const status = FileTransferStatuses[statusEnum];\n    this.#updateStatus(status);\n  }\n  #updateStatus(status: FileTransferStatus) {\n    _console.log({ status });\n    this.#status = status;\n    this.#dispatchEvent(\"fileTransferStatus\", { fileTransferStatus: status });\n    this.#receivedBlocks.length = 0;\n    this.#isCancelling = false;\n  }\n  #assertIsIdle() {\n    _console.assertWithError(this.#status == \"idle\", \"status is not idle\");\n  }\n  #assertIsNotIdle() {\n    _console.assertWithError(this.#status != \"idle\", \"status is idle\");\n  }\n\n  // BLOCK\n\n  #receivedBlocks: ArrayBuffer[] = [];\n\n  async #parseBlock(dataView: DataView) {\n    _console.log(\"parseFileBlock\", dataView);\n    this.#receivedBlocks.push(dataView.buffer);\n\n    const bytesReceived = this.#receivedBlocks.reduce(\n      (sum, arrayBuffer) => (sum += arrayBuffer.byteLength),\n      0\n    );\n    const progress = bytesReceived / this.#length;\n\n    _console.log(\n      `received ${bytesReceived} of ${this.#length} bytes (${progress * 100}%)`\n    );\n\n    this.#dispatchEvent(\"fileTransferProgress\", { progress });\n\n    if (bytesReceived != this.#length) {\n      const dataView = new DataView(new ArrayBuffer(4));\n      dataView.setUint32(0, bytesReceived, true);\n\n      if (this.isServerSide) {\n        return;\n      }\n      await this.sendMessage([\n        { type: \"fileBytesTransferred\", data: dataView.buffer },\n      ]);\n      return;\n    }\n\n    _console.log(\"file transfer complete\");\n\n    let fileName = new Date().toLocaleString();\n    switch (this.type) {\n      case \"tflite\":\n        fileName += \".tflite\";\n        break;\n      case \"wifiServerCert\":\n        fileName += \"_server.crt\";\n        break;\n      case \"wifiServerKey\":\n        fileName += \"_server.key\";\n        break;\n    }\n\n    let file: File | Blob;\n    if (typeof File !== \"undefined\") {\n      file = new File(this.#receivedBlocks, fileName);\n    } else {\n      file = new Blob(this.#receivedBlocks);\n    }\n\n    const arrayBuffer = await file.arrayBuffer();\n    const checksum = crc32(arrayBuffer);\n    _console.log({ checksum });\n\n    if (checksum != this.#checksum) {\n      _console.error(\n        `wrong checksum - expected ${this.#checksum}, got ${checksum}`\n      );\n      return;\n    }\n\n    _console.log(\"received file\", file);\n\n    this.#dispatchEvent(\"getFileBlock\", { fileTransferBlock: dataView });\n    this.#dispatchEvent(\"fileTransferComplete\", { direction: \"receiving\" });\n    this.#dispatchEvent(\"fileReceived\", { file });\n  }\n\n  parseMessage(messageType: FileTransferMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"maxFileLength\":\n        this.#parseMaxLength(dataView);\n        break;\n      case \"getFileType\":\n      case \"setFileType\":\n        this.#parseType(dataView);\n        break;\n      case \"getFileLength\":\n      case \"setFileLength\":\n        this.#parseLength(dataView);\n        break;\n      case \"getFileChecksum\":\n      case \"setFileChecksum\":\n        this.#parseChecksum(dataView);\n        break;\n      case \"fileTransferStatus\":\n        this.#parseStatus(dataView);\n        break;\n      case \"getFileBlock\":\n        this.#parseBlock(dataView);\n        break;\n      case \"fileBytesTransferred\":\n        this.#parseBytesTransferred(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  async send(type: FileType, file: FileLike) {\n    this.#assertIsIdle();\n\n    this.#assertValidType(type);\n    const fileBuffer = await getFileBuffer(file);\n\n    const promises: Promise<any>[] = [];\n\n    promises.push(this.#setType(type, false));\n    const fileLength = fileBuffer.byteLength;\n    promises.push(this.#setLength(fileLength, false));\n    const checksum = crc32(fileBuffer);\n    promises.push(this.#setChecksum(checksum, false));\n    promises.push(this.#setCommand(\"startSend\", false));\n\n    this.sendMessage();\n\n    await Promise.all(promises);\n\n    await this.#send(fileBuffer);\n  }\n\n  #buffer?: ArrayBuffer;\n  #bytesTransferred = 0;\n  async #send(buffer: ArrayBuffer) {\n    this.#buffer = buffer;\n    this.#bytesTransferred = 0;\n    return this.#sendBlock();\n  }\n\n  mtu!: number;\n  async #sendBlock(): Promise<void> {\n    if (this.status != \"sending\") {\n      return;\n    }\n    if (this.#isCancelling) {\n      _console.error(\"not sending block - busy cancelling\");\n      return;\n    }\n    if (!this.#buffer) {\n      if (!this.isServerSide) {\n        _console.error(\"no buffer defined\");\n      }\n      return;\n    }\n\n    const buffer = this.#buffer;\n    let offset = this.#bytesTransferred;\n\n    const slicedBuffer = buffer.slice(offset, offset + (this.mtu - 3 - 3));\n    _console.log(\"slicedBuffer\", slicedBuffer);\n    const bytesLeft = buffer.byteLength - offset;\n\n    const progress = 1 - bytesLeft / buffer.byteLength;\n    _console.log(\n      `sending bytes ${offset}-${offset + slicedBuffer.byteLength} of ${\n        buffer.byteLength\n      } bytes (${progress * 100}%)`\n    );\n    this.#dispatchEvent(\"fileTransferProgress\", { progress });\n    if (slicedBuffer.byteLength == 0) {\n      _console.log(\"finished sending buffer\");\n      this.#dispatchEvent(\"fileTransferComplete\", { direction: \"sending\" });\n    } else {\n      await this.sendMessage([{ type: \"setFileBlock\", data: slicedBuffer }]);\n      this.#bytesTransferred = offset + slicedBuffer.byteLength;\n      //return this.#sendBlock(buffer, offset + slicedBuffer.byteLength);\n    }\n  }\n\n  async #parseBytesTransferred(dataView: DataView) {\n    _console.log(\"parseBytesTransferred\", dataView);\n    const bytesTransferred = dataView.getUint32(0, true);\n    _console.log({ bytesTransferred });\n    if (this.status != \"sending\") {\n      _console.error(`not currently sending file`);\n      return;\n    }\n    if (!this.isServerSide && this.#bytesTransferred != bytesTransferred) {\n      _console.error(\n        `bytesTransferred are not equal - got ${bytesTransferred}, expected ${\n          this.#bytesTransferred\n        }`\n      );\n      this.cancel();\n      return;\n    }\n    this.#sendBlock();\n  }\n\n  async receive(type: FileType) {\n    this.#assertIsIdle();\n\n    this.#assertValidType(type);\n\n    await this.#setType(type);\n    await this.#setCommand(\"startReceive\");\n  }\n\n  #isCancelling = false;\n  async cancel() {\n    this.#assertIsNotIdle();\n    _console.log(\"cancelling file transfer...\");\n    this.#isCancelling = true;\n    await this.#setCommand(\"cancel\");\n  }\n\n  // SERVER SIDE\n  #isServerSide = false;\n  get isServerSide() {\n    return this.#isServerSide;\n  }\n  set isServerSide(newIsServerSide) {\n    if (this.#isServerSide == newIsServerSide) {\n      _console.log(\"redundant isServerSide assignment\");\n      return;\n    }\n    _console.log({ newIsServerSide });\n    this.#isServerSide = newIsServerSide;\n  }\n}\n\nexport default FileTransferManager;\n","import { PressureSensorPosition } from \"../sensor/PressureSensorDataManager.ts\";\nimport { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"MathUtils\", { log: false });\n\nexport function getInterpolation(value: number, min: number, max: number, span: number) {\n  if (span == undefined) {\n    span = max - min;\n  }\n  return (value - min) / span;\n}\n\nexport const Uint16Max = 2 ** 16;\n\nfunction removeLower2Bytes(number: number) {\n  const lower2Bytes = number % Uint16Max;\n  return number - lower2Bytes;\n}\n\nconst timestampThreshold = 60_000;\n\nexport function parseTimestamp(dataView: DataView, byteOffset: number) {\n  const now = Date.now();\n  const nowWithoutLower2Bytes = removeLower2Bytes(now);\n  const lower2Bytes = dataView.getUint16(byteOffset, true);\n  let timestamp = nowWithoutLower2Bytes + lower2Bytes;\n  if (Math.abs(now - timestamp) > timestampThreshold) {\n    _console.log(\"correcting timestamp delta\");\n    timestamp += Uint16Max * Math.sign(now - timestamp);\n  }\n  return timestamp;\n}\n\nexport interface Vector2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vector3 extends Vector2 {\n  z: number;\n}\n\nexport interface Quaternion {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Euler {\n  heading: number;\n  pitch: number;\n  roll: number;\n}\n\nexport function computeVoronoiWeights(points: PressureSensorPosition[], sampleCount = 100000) {\n  const n = points.length;\n  const counts = new Array(n).fill(0);\n\n  for (let i = 0; i < sampleCount; i++) {\n    const x = Math.random();\n    const y = Math.random();\n\n    // Find the closest input point\n    let minDist = Infinity;\n    let closestIndex = -1;\n\n    for (let j = 0; j < n; j++) {\n      const { x: px, y: py } = points[j];\n      const dist = (px - x) ** 2 + (py - y) ** 2; // Squared Euclidean distance\n      if (dist < minDist) {\n        minDist = dist;\n        closestIndex = j;\n      }\n    }\n\n    // Increment count for the closest point\n    counts[closestIndex]++;\n  }\n\n  // Convert counts to weights (sum to 1)\n  return counts.map((c) => c / sampleCount);\n}\n","import { getInterpolation } from \"./MathUtils.ts\";\n\ninterface Range {\n  min: number;\n  max: number;\n  span: number;\n}\n\nconst initialRange: Range = { min: Infinity, max: -Infinity, span: 0 };\n\nclass RangeHelper {\n  #range: Range = Object.assign({}, initialRange);\n  get min() {\n    return this.#range.min;\n  }\n  get max() {\n    return this.#range.max;\n  }\n\n  set min(newMin) {\n    this.#range.min = newMin;\n    this.#range.max = Math.max(newMin, this.#range.max);\n    this.#updateSpan();\n  }\n  set max(newMax) {\n    this.#range.max = newMax;\n    this.#range.min = Math.min(newMax, this.#range.min);\n    this.#updateSpan();\n  }\n\n  #updateSpan() {\n    this.#range.span = this.#range.max - this.#range.min;\n  }\n\n  reset() {\n    Object.assign(this.#range, initialRange);\n  }\n\n  update(value: number) {\n    this.#range.min = Math.min(value, this.#range.min);\n    this.#range.max = Math.max(value, this.#range.max);\n    this.#updateSpan();\n  }\n\n  getNormalization(value: number, weightByRange: boolean) {\n    let normalization = getInterpolation(value, this.#range.min, this.#range.max, this.#range.span);\n    if (weightByRange) {\n      normalization *= this.#range.span;\n    }\n    return normalization || 0;\n  }\n\n  updateAndGetNormalization(value: number, weightByRange: boolean) {\n    this.update(value);\n    return this.getNormalization(value, weightByRange);\n  }\n}\n\nexport default RangeHelper;\n","import RangeHelper from \"./RangeHelper.ts\";\n\nimport { Vector2 } from \"./MathUtils.ts\";\n\nexport type CenterOfPressure = Vector2;\n\nexport interface CenterOfPressureRange {\n  x: RangeHelper;\n  y: RangeHelper;\n}\n\nclass CenterOfPressureHelper {\n  #range: CenterOfPressureRange = {\n    x: new RangeHelper(),\n    y: new RangeHelper(),\n  };\n  reset() {\n    this.#range.x.reset();\n    this.#range.y.reset();\n  }\n\n  update(centerOfPressure: CenterOfPressure) {\n    this.#range.x.update(centerOfPressure.x);\n    this.#range.y.update(centerOfPressure.y);\n  }\n  getNormalization(centerOfPressure: CenterOfPressure, weightByRange: boolean): CenterOfPressure {\n    return {\n      x: this.#range.x.getNormalization(centerOfPressure.x, weightByRange),\n      y: this.#range.y.getNormalization(centerOfPressure.y, weightByRange),\n    };\n  }\n\n  updateAndGetNormalization(centerOfPressure: CenterOfPressure, weightByRange: boolean) {\n    this.update(centerOfPressure);\n    return this.getNormalization(centerOfPressure, weightByRange);\n  }\n}\n\nexport default CenterOfPressureHelper;\n","import { createConsole } from \"../utils/Console.ts\";\nimport CenterOfPressureHelper from \"../utils/CenterOfPressureHelper.ts\";\nimport RangeHelper from \"../utils/RangeHelper.ts\";\nimport { createArray } from \"../utils/ArrayUtils.ts\";\n\nconst _console = createConsole(\"PressureDataManager\", { log: false });\n\nexport const PressureSensorTypes = [\"pressure\"] as const;\nexport type PressureSensorType = (typeof PressureSensorTypes)[number];\n\nexport const ContinuousPressureSensorTypes = PressureSensorTypes;\nexport type ContinuousPressureSensorType = (typeof ContinuousPressureSensorTypes)[number];\n\nimport { computeVoronoiWeights, Vector2 } from \"../utils/MathUtils.ts\";\nexport type PressureSensorPosition = Vector2;\n\nimport { CenterOfPressure } from \"../utils/CenterOfPressureHelper.ts\";\n\nexport interface PressureSensorValue {\n  position: PressureSensorPosition;\n  rawValue: number;\n  scaledValue: number;\n  normalizedValue: number;\n  weightedValue: number;\n}\n\nexport interface PressureData {\n  sensors: PressureSensorValue[];\n  scaledSum: number;\n  normalizedSum: number;\n  center?: CenterOfPressure;\n  normalizedCenter?: CenterOfPressure;\n}\n\nexport interface PressureDataEventMessages {\n  pressure: { pressure: PressureData };\n}\n\nexport const DefaultNumberOfPressureSensors = 8;\n\nclass PressureSensorDataManager {\n  #positions: PressureSensorPosition[] = [];\n  get positions() {\n    return this.#positions;\n  }\n\n  get numberOfSensors() {\n    return this.positions.length;\n  }\n\n  parsePositions(dataView: DataView) {\n    const positions: PressureSensorPosition[] = [];\n\n    for (\n      let pressureSensorIndex = 0, byteOffset = 0;\n      byteOffset < dataView.byteLength;\n      pressureSensorIndex++, byteOffset += 2\n    ) {\n      positions.push({\n        x: dataView.getUint8(byteOffset) / 2 ** 8,\n        y: dataView.getUint8(byteOffset + 1) / 2 ** 8,\n      });\n    }\n\n    _console.log({ positions });\n\n    this.#positions = positions;\n\n    this.#sensorRangeHelpers = createArray(this.numberOfSensors, () => new RangeHelper());\n\n    this.resetRange();\n  }\n\n  #sensorRangeHelpers!: RangeHelper[];\n  #normalizedSumRangeHelper = new RangeHelper();\n\n  #centerOfPressureHelper = new CenterOfPressureHelper();\n\n  resetRange() {\n    this.#sensorRangeHelpers?.forEach((rangeHelper) => rangeHelper.reset());\n    this.#centerOfPressureHelper.reset();\n    this.#normalizedSumRangeHelper.reset();\n  }\n\n  parseData(dataView: DataView, scalar: number) {\n    const pressure: PressureData = { sensors: [], scaledSum: 0, normalizedSum: 0 };\n    for (let index = 0, byteOffset = 0; byteOffset < dataView.byteLength; index++, byteOffset += 2) {\n      const rawValue = dataView.getUint16(byteOffset, true);\n      let scaledValue = (rawValue * scalar) / this.numberOfSensors;\n      const rangeHelper = this.#sensorRangeHelpers[index];\n      const normalizedValue = rangeHelper.updateAndGetNormalization(scaledValue, false);\n      //scaledValue -= rangeHelper.min;\n\n      const position = this.positions[index];\n      pressure.sensors[index] = { rawValue, scaledValue, normalizedValue, position, weightedValue: 0 };\n\n      pressure.scaledSum += scaledValue;\n      //pressure.normalizedSum += normalizedValue;\n    }\n    pressure.normalizedSum = this.#normalizedSumRangeHelper.updateAndGetNormalization(pressure.scaledSum, false);\n\n    if (pressure.scaledSum > 0) {\n      pressure.center = { x: 0, y: 0 };\n      pressure.sensors.forEach((sensor) => {\n        sensor.weightedValue = sensor.scaledValue / pressure.scaledSum;\n        pressure.center!.x += sensor.position.x * sensor.weightedValue;\n        pressure.center!.y += sensor.position.y * sensor.weightedValue;\n      });\n      pressure.normalizedCenter = this.#centerOfPressureHelper.updateAndGetNormalization(pressure.center, false);\n    }\n\n    _console.log({ pressure });\n    return pressure;\n  }\n}\n\nexport default PressureSensorDataManager;\n","export function createArray(arrayLength: number, objectOrCallback: ((index: number) => any) | object) {\n  return new Array(arrayLength).fill(1).map((_, index) => {\n    if (typeof objectOrCallback == \"function\") {\n      const callback = objectOrCallback;\n      return callback(index);\n    } else {\n      const object = objectOrCallback;\n      return Object.assign({}, object);\n    }\n  });\n}\n\nexport function arrayWithoutDuplicates(array: any[]) {\n  return array.filter((value, index) => array.indexOf(value) == index);\n}\n","import { createConsole } from \"../utils/Console.ts\";\n\nconst _console = createConsole(\"MotionSensorDataManager\", { log: false });\n\nexport const MotionSensorTypes = [\n  \"acceleration\",\n  \"gravity\",\n  \"linearAcceleration\",\n  \"gyroscope\",\n  \"magnetometer\",\n  \"gameRotation\",\n  \"rotation\",\n  \"orientation\",\n  \"activity\",\n  \"stepCounter\",\n  \"stepDetector\",\n  \"deviceOrientation\",\n] as const;\nexport type MotionSensorType = (typeof MotionSensorTypes)[number];\n\nexport const ContinuousMotionTypes = [\n  \"acceleration\",\n  \"gravity\",\n  \"linearAcceleration\",\n  \"gyroscope\",\n  \"magnetometer\",\n  \"gameRotation\",\n  \"rotation\",\n] as const;\nexport type ContinuousMotionType = (typeof ContinuousMotionTypes)[number];\n\nimport { Vector3, Quaternion, Euler } from \"../utils/MathUtils.ts\";\nimport { ValueOf } from \"../utils/TypeScriptUtils.ts\";\n\nexport const Vector2Size = 2 * 2;\nexport const Vector3Size = 3 * 2;\nexport const QuaternionSize = 4 * 2;\n\nexport const ActivityTypes = [\"still\", \"walking\", \"running\", \"bicycle\", \"vehicle\", \"tilting\"] as const;\nexport type ActivityType = (typeof ActivityTypes)[number];\n\nexport interface Activity {\n  still: boolean;\n  walking: boolean;\n  running: boolean;\n  bicycle: boolean;\n  vehicle: boolean;\n  tilting: boolean;\n}\n\nexport const DeviceOrientations = [\n  \"portraitUpright\",\n  \"landscapeLeft\",\n  \"portraitUpsideDown\",\n  \"landscapeRight\",\n  \"unknown\",\n] as const;\nexport type DeviceOrientation = (typeof DeviceOrientations)[number];\n\nexport interface MotionSensorDataEventMessages {\n  acceleration: { acceleration: Vector3 };\n  gravity: { gravity: Vector3 };\n  linearAcceleration: { linearAcceleration: Vector3 };\n  gyroscope: { gyroscope: Vector3 };\n  magnetometer: { magnetometer: Vector3 };\n  gameRotation: { gameRotation: Quaternion };\n  rotation: { rotation: Quaternion };\n  orientation: { orientation: Euler };\n  stepDetector: { stepDetector: Object };\n  stepCounter: { stepCounter: number };\n  activity: { activity: Activity };\n  deviceOrientation: { deviceOrientation: DeviceOrientation };\n}\n\nexport type MotionSensorDataEventMessage = ValueOf<MotionSensorDataEventMessages>;\n\nclass MotionSensorDataManager {\n  parseVector3(dataView: DataView, scalar: number): Vector3 {\n    let [x, y, z] = [dataView.getInt16(0, true), dataView.getInt16(2, true), dataView.getInt16(4, true)].map(\n      (value) => value * scalar\n    );\n\n    const vector: Vector3 = { x, y, z };\n\n    _console.log({ vector });\n    return vector;\n  }\n\n  parseQuaternion(dataView: DataView, scalar: number): Quaternion {\n    let [x, y, z, w] = [\n      dataView.getInt16(0, true),\n      dataView.getInt16(2, true),\n      dataView.getInt16(4, true),\n      dataView.getInt16(6, true),\n    ].map((value) => value * scalar);\n\n    const quaternion: Quaternion = { x, y, z, w };\n\n    _console.log({ quaternion });\n    return quaternion;\n  }\n\n  parseEuler(dataView: DataView, scalar: number): Euler {\n    let [heading, pitch, roll] = [\n      dataView.getInt16(0, true),\n      dataView.getInt16(2, true),\n      dataView.getInt16(4, true),\n    ].map((value) => value * scalar);\n\n    pitch *= -1;\n    heading *= -1;\n    heading += 360;\n\n    const euler: Euler = { heading, pitch, roll };\n\n    _console.log({ euler });\n    return euler;\n  }\n\n  parseStepCounter(dataView: DataView) {\n    _console.log(\"parseStepCounter\", dataView);\n    const stepCount = dataView.getUint32(0, true);\n    _console.log({ stepCount });\n    return stepCount;\n  }\n\n  parseActivity(dataView: DataView) {\n    _console.log(\"parseActivity\", dataView);\n    const activity: Partial<Activity> = {};\n\n    const activityBitfield = dataView.getUint8(0);\n    _console.log(\"activityBitfield\", activityBitfield.toString(2));\n    ActivityTypes.forEach((activityType, index) => {\n      activity[activityType] = Boolean(activityBitfield & (1 << index));\n    });\n\n    _console.log(\"activity\", activity);\n\n    return activity as Activity;\n  }\n\n  parseDeviceOrientation(dataView: DataView) {\n    _console.log(\"parseDeviceOrientation\", dataView);\n    const index = dataView.getUint8(0);\n    const deviceOrientation = DeviceOrientations[index];\n    _console.assertWithError(deviceOrientation, \"undefined deviceOrientation\");\n    _console.log({ deviceOrientation });\n    return deviceOrientation;\n  }\n}\n\nexport default MotionSensorDataManager;\n","import { createConsole } from \"../utils/Console.ts\";\n\nexport const BarometerSensorTypes = [\"barometer\"] as const;\nexport type BarometerSensorType = (typeof BarometerSensorTypes)[number];\n\nexport const ContinuousBarometerSensorTypes = BarometerSensorTypes;\nexport type ContinuousBarometerSensorType = (typeof ContinuousBarometerSensorTypes)[number];\n\nexport interface BarometerSensorDataEventMessages {\n  barometer: {\n    barometer: number;\n    //altitude: number;\n  };\n}\n\nconst _console = createConsole(\"BarometerSensorDataManager\", { log: false });\n\nclass BarometerSensorDataManager {\n  #calculcateAltitude(pressure: number) {\n    const P0 = 101325; // Standard atmospheric pressure at sea level in Pascals\n    const T0 = 288.15; // Standard temperature at sea level in Kelvin\n    const L = 0.0065; // Temperature lapse rate in K/m\n    const R = 8.3144598; // Universal gas constant in J/(mol·K)\n    const g = 9.80665; // Acceleration due to gravity in m/s²\n    const M = 0.0289644; // Molar mass of Earth's air in kg/mol\n\n    const exponent = (R * L) / (g * M);\n    const h = (T0 / L) * (1 - Math.pow(pressure / P0, exponent));\n\n    return h;\n  }\n\n  parseData(dataView: DataView, scalar: number) {\n    const pressure = dataView.getUint32(0, true) * scalar;\n    const altitude = this.#calculcateAltitude(pressure);\n    _console.log({ pressure, altitude });\n    return { pressure };\n  }\n}\n\nexport default BarometerSensorDataManager;\n","import { sliceDataView } from \"./ArrayBufferUtils.ts\";\nimport { createConsole } from \"./Console.ts\";\nimport { textDecoder } from \"./Text.ts\";\n\nconst _console = createConsole(\"ParseUtils\", { log: false });\n\nexport function parseStringFromDataView(\n  dataView: DataView,\n  byteOffset: number = 0\n) {\n  const stringLength = dataView.getUint8(byteOffset++);\n  const string = textDecoder.decode(\n    dataView.buffer.slice(\n      dataView.byteOffset + byteOffset,\n      dataView.byteOffset + byteOffset + stringLength\n    )\n  );\n  byteOffset += stringLength;\n  return { string, byteOffset };\n}\n\nexport function parseMessage<MessageType extends string>(\n  dataView: DataView,\n  messageTypes: readonly MessageType[],\n  callback: (\n    messageType: MessageType,\n    dataView: DataView,\n    context?: any\n  ) => void,\n  context?: any,\n  parseMessageLengthAsUint16: boolean = false\n) {\n  let byteOffset = 0;\n  while (byteOffset < dataView.byteLength) {\n    const messageTypeEnum = dataView.getUint8(byteOffset++);\n    _console.assertWithError(\n      messageTypeEnum in messageTypes,\n      `invalid messageTypeEnum ${messageTypeEnum}`\n    );\n    const messageType = messageTypes[messageTypeEnum];\n\n    let messageLength: number;\n    if (parseMessageLengthAsUint16) {\n      messageLength = dataView.getUint16(byteOffset, true);\n      byteOffset += 2;\n    } else {\n      messageLength = dataView.getUint8(byteOffset++);\n    }\n\n    _console.log({\n      messageTypeEnum,\n      messageType,\n      messageLength,\n      dataView,\n      byteOffset,\n    });\n\n    const _dataView = sliceDataView(dataView, byteOffset, messageLength);\n    _console.log({ _dataView });\n\n    callback(messageType, _dataView, context);\n\n    byteOffset += messageLength;\n  }\n}\n","import { createConsole } from \"../utils/Console.ts\";\nimport { parseTimestamp } from \"../utils/MathUtils.ts\";\nimport PressureSensorDataManager, { PressureDataEventMessages } from \"./PressureSensorDataManager.ts\";\nimport MotionSensorDataManager, { MotionSensorDataEventMessages } from \"./MotionSensorDataManager.ts\";\nimport BarometerSensorDataManager, { BarometerSensorDataEventMessages } from \"./BarometerSensorDataManager.ts\";\nimport { parseMessage } from \"../utils/ParseUtils.ts\";\nimport EventDispatcher from \"../utils/EventDispatcher.ts\";\nimport { MotionSensorTypes, ContinuousMotionTypes } from \"./MotionSensorDataManager.ts\";\nimport { PressureSensorTypes, ContinuousPressureSensorTypes } from \"./PressureSensorDataManager.ts\";\nimport { BarometerSensorTypes, ContinuousBarometerSensorTypes } from \"./BarometerSensorDataManager.ts\";\nimport Device from \"../Device.ts\";\nimport { AddKeysAsPropertyToInterface, ExtendInterfaceValues, ValueOf } from \"../utils/TypeScriptUtils.ts\";\n\nconst _console = createConsole(\"SensorDataManager\", { log: false });\n\nexport const SensorTypes = [...PressureSensorTypes, ...MotionSensorTypes, ...BarometerSensorTypes] as const;\nexport type SensorType = (typeof SensorTypes)[number];\n\nexport const ContinuousSensorTypes = [\n  ...ContinuousPressureSensorTypes,\n  ...ContinuousMotionTypes,\n  ...ContinuousBarometerSensorTypes,\n] as const;\nexport type ContinuousSensorType = (typeof ContinuousSensorTypes)[number];\n\nexport const SensorDataMessageTypes = [\"getPressurePositions\", \"getSensorScalars\", \"sensorData\"] as const;\nexport type SensorDataMessageType = (typeof SensorDataMessageTypes)[number];\n\nexport const SensorDataEventTypes = [...SensorDataMessageTypes, ...SensorTypes] as const;\nexport type SensorDataEventType = (typeof SensorDataEventTypes)[number];\n\ninterface BaseSensorDataEventMessage {\n  timestamp: number;\n}\n\ntype BaseSensorDataEventMessages = BarometerSensorDataEventMessages &\n  MotionSensorDataEventMessages &\n  PressureDataEventMessages;\ntype _SensorDataEventMessages = ExtendInterfaceValues<\n  AddKeysAsPropertyToInterface<BaseSensorDataEventMessages, \"sensorType\">,\n  BaseSensorDataEventMessage\n>;\nexport type SensorDataEventMessage = ValueOf<_SensorDataEventMessages>;\ninterface AnySensorDataEventMessages {\n  sensorData: SensorDataEventMessage;\n}\nexport type SensorDataEventMessages = _SensorDataEventMessages & AnySensorDataEventMessages;\n\nexport type SensorDataEventDispatcher = EventDispatcher<Device, SensorDataEventType, SensorDataEventMessages>;\n\nclass SensorDataManager {\n  pressureSensorDataManager = new PressureSensorDataManager();\n  motionSensorDataManager = new MotionSensorDataManager();\n  barometerSensorDataManager = new BarometerSensorDataManager();\n\n  #scalars: Map<SensorType, number> = new Map();\n\n  static AssertValidSensorType(sensorType: SensorType) {\n    _console.assertEnumWithError(sensorType, SensorTypes);\n  }\n  static AssertValidSensorTypeEnum(sensorTypeEnum: number) {\n    _console.assertTypeWithError(sensorTypeEnum, \"number\");\n    _console.assertWithError(sensorTypeEnum in SensorTypes, `invalid sensorTypeEnum ${sensorTypeEnum}`);\n  }\n\n  eventDispatcher!: SensorDataEventDispatcher;\n  get dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n\n  parseMessage(messageType: SensorDataMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getSensorScalars\":\n        this.parseScalars(dataView);\n        break;\n      case \"getPressurePositions\":\n        this.pressureSensorDataManager.parsePositions(dataView);\n        break;\n      case \"sensorData\":\n        this.parseData(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  parseScalars(dataView: DataView) {\n    for (let byteOffset = 0; byteOffset < dataView.byteLength; byteOffset += 5) {\n      const sensorTypeIndex = dataView.getUint8(byteOffset);\n      const sensorType = SensorTypes[sensorTypeIndex];\n      if (!sensorType) {\n        _console.warn(`unknown sensorType index ${sensorTypeIndex}`);\n        continue;\n      }\n      const sensorScalar = dataView.getFloat32(byteOffset + 1, true);\n      _console.log({ sensorType, sensorScalar });\n      this.#scalars.set(sensorType, sensorScalar);\n    }\n  }\n\n  private parseData(dataView: DataView) {\n    _console.log(\"sensorData\", Array.from(new Uint8Array(dataView.buffer)));\n\n    let byteOffset = 0;\n    const timestamp = parseTimestamp(dataView, byteOffset);\n    byteOffset += 2;\n\n    const _dataView = new DataView(dataView.buffer, byteOffset);\n\n    parseMessage(_dataView, SensorTypes, this.parseDataCallback.bind(this), { timestamp });\n  }\n\n  private parseDataCallback(sensorType: SensorType, dataView: DataView, { timestamp }: { timestamp: number }) {\n    const scalar = this.#scalars.get(sensorType) || 1;\n\n    let sensorData = null;\n    switch (sensorType) {\n      case \"pressure\":\n        sensorData = this.pressureSensorDataManager.parseData(dataView, scalar);\n        break;\n      case \"acceleration\":\n      case \"gravity\":\n      case \"linearAcceleration\":\n      case \"gyroscope\":\n      case \"magnetometer\":\n        sensorData = this.motionSensorDataManager.parseVector3(dataView, scalar);\n        break;\n      case \"gameRotation\":\n      case \"rotation\":\n        sensorData = this.motionSensorDataManager.parseQuaternion(dataView, scalar);\n        break;\n      case \"orientation\":\n        sensorData = this.motionSensorDataManager.parseEuler(dataView, scalar);\n        break;\n      case \"stepCounter\":\n        sensorData = this.motionSensorDataManager.parseStepCounter(dataView);\n        break;\n      case \"stepDetector\":\n        sensorData = {};\n        break;\n      case \"activity\":\n        sensorData = this.motionSensorDataManager.parseActivity(dataView);\n        break;\n      case \"deviceOrientation\":\n        sensorData = this.motionSensorDataManager.parseDeviceOrientation(dataView);\n        break;\n      case \"barometer\":\n        sensorData = this.barometerSensorDataManager.parseData(dataView, scalar);\n        break;\n      default:\n        _console.error(`uncaught sensorType \"${sensorType}\"`);\n    }\n\n    _console.assertWithError(sensorData != null, `no sensorData defined for sensorType \"${sensorType}\"`);\n\n    _console.log({ sensorType, sensorData });\n    // @ts-expect-error\n    this.dispatchEvent(sensorType, { sensorType, [sensorType]: sensorData, timestamp });\n    // @ts-expect-error\n    this.dispatchEvent(\"sensorData\", { sensorType, [sensorType]: sensorData, timestamp });\n  }\n}\n\nexport default SensorDataManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport SensorDataManager, { SensorTypes, SensorType } from \"./SensorDataManager.ts\";\nimport EventDispatcher from \"../utils/EventDispatcher.ts\";\nimport Device, { SendMessageCallback } from \"../Device.ts\";\nimport autoBind from \"../../node_modules/auto-bind/index.js\";\n\nconst _console = createConsole(\"SensorConfigurationManager\", { log: false });\n\nexport type SensorConfiguration = { [sensorType in SensorType]?: number };\n\nexport const MaxSensorRate = 2 ** 16 - 1;\nexport const SensorRateStep = 5;\n\nexport const SensorConfigurationMessageTypes = [\"getSensorConfiguration\", \"setSensorConfiguration\"] as const;\nexport type SensorConfigurationMessageType = (typeof SensorConfigurationMessageTypes)[number];\n\nexport const SensorConfigurationEventTypes = SensorConfigurationMessageTypes;\nexport type SensorConfigurationEventType = (typeof SensorConfigurationEventTypes)[number];\n\nexport interface SensorConfigurationEventMessages {\n  getSensorConfiguration: { sensorConfiguration: SensorConfiguration };\n}\n\nexport type SensorConfigurationEventDispatcher = EventDispatcher<\n  Device,\n  SensorConfigurationEventType,\n  SensorConfigurationEventMessages\n>;\n\nexport type SendSensorConfigurationMessageCallback = SendMessageCallback<SensorConfigurationMessageType>;\n\nclass SensorConfigurationManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendSensorConfigurationMessageCallback;\n\n  eventDispatcher!: SensorConfigurationEventDispatcher;\n  get addEventListener() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  #availableSensorTypes!: SensorType[];\n  #assertAvailableSensorType(sensorType: SensorType) {\n    _console.assertWithError(this.#availableSensorTypes, \"must get initial sensorConfiguration\");\n    const isSensorTypeAvailable = this.#availableSensorTypes?.includes(sensorType);\n    _console.log(isSensorTypeAvailable, `unavailable sensor type \"${sensorType}\"`);\n    return isSensorTypeAvailable;\n  }\n\n  #configuration!: SensorConfiguration;\n  get configuration() {\n    return this.#configuration;\n  }\n\n  #updateConfiguration(updatedConfiguration: SensorConfiguration) {\n    this.#configuration = updatedConfiguration;\n    _console.log({ updatedConfiguration: this.#configuration });\n    this.#dispatchEvent(\"getSensorConfiguration\", { sensorConfiguration: this.configuration });\n  }\n\n  #isRedundant(sensorConfiguration: SensorConfiguration) {\n    let sensorTypes = Object.keys(sensorConfiguration) as SensorType[];\n    return sensorTypes.every((sensorType) => {\n      return this.configuration[sensorType] == sensorConfiguration[sensorType];\n    });\n  }\n\n  async setConfiguration(newSensorConfiguration: SensorConfiguration, clearRest?: boolean) {\n    if (clearRest) {\n      newSensorConfiguration = Object.assign({ ...this.zeroSensorConfiguration }, newSensorConfiguration);\n    }\n    _console.log({ newSensorConfiguration });\n    if (this.#isRedundant(newSensorConfiguration)) {\n      _console.log(\"redundant sensor configuration\");\n      return;\n    }\n    const setSensorConfigurationData = this.#createData(newSensorConfiguration);\n    _console.log({ setSensorConfigurationData });\n\n    const promise = this.waitForEvent(\"getSensorConfiguration\");\n    this.sendMessage([{ type: \"setSensorConfiguration\", data: setSensorConfigurationData.buffer }]);\n    await promise;\n  }\n\n  #parse(dataView: DataView) {\n    const parsedSensorConfiguration: SensorConfiguration = {};\n    for (let byteOffset = 0; byteOffset < dataView.byteLength; byteOffset += 3) {\n      const sensorTypeIndex = dataView.getUint8(byteOffset);\n      const sensorType = SensorTypes[sensorTypeIndex];\n      if (!sensorType) {\n        _console.warn(`unknown sensorType index ${sensorTypeIndex}`);\n        continue;\n      }\n      const sensorRate = dataView.getUint16(byteOffset + 1, true);\n      _console.log({ sensorType, sensorRate });\n      parsedSensorConfiguration[sensorType] = sensorRate;\n    }\n    _console.log({ parsedSensorConfiguration });\n    this.#availableSensorTypes = Object.keys(parsedSensorConfiguration) as SensorType[];\n    return parsedSensorConfiguration;\n  }\n\n  static #AssertValidSensorRate(sensorRate: number) {\n    _console.assertTypeWithError(sensorRate, \"number\");\n    _console.assertWithError(sensorRate >= 0, `sensorRate must be 0 or greater (got ${sensorRate})`);\n    _console.assertWithError(sensorRate < MaxSensorRate, `sensorRate must be 0 or greater (got ${sensorRate})`);\n    _console.assertWithError(sensorRate % SensorRateStep == 0, `sensorRate must be multiple of ${SensorRateStep}`);\n  }\n\n  #assertValidSensorRate(sensorRate: number) {\n    SensorConfigurationManager.#AssertValidSensorRate(sensorRate);\n  }\n\n  #createData(sensorConfiguration: SensorConfiguration) {\n    let sensorTypes = Object.keys(sensorConfiguration) as SensorType[];\n    sensorTypes = sensorTypes.filter((sensorType) => this.#assertAvailableSensorType(sensorType));\n\n    const dataView = new DataView(new ArrayBuffer(sensorTypes.length * 3));\n    sensorTypes.forEach((sensorType, index) => {\n      SensorDataManager.AssertValidSensorType(sensorType);\n      const sensorTypeEnum = SensorTypes.indexOf(sensorType);\n      dataView.setUint8(index * 3, sensorTypeEnum);\n\n      const sensorRate = sensorConfiguration[sensorType]!;\n      this.#assertValidSensorRate(sensorRate);\n      dataView.setUint16(index * 3 + 1, sensorRate, true);\n    });\n    _console.log({ sensorConfigurationData: dataView });\n    return dataView;\n  }\n\n  // ZERO\n  static #ZeroSensorConfiguration: SensorConfiguration = {};\n  static get ZeroSensorConfiguration() {\n    return this.#ZeroSensorConfiguration;\n  }\n  static {\n    SensorTypes.forEach((sensorType) => {\n      this.#ZeroSensorConfiguration[sensorType] = 0;\n    });\n  }\n  get zeroSensorConfiguration() {\n    const zeroSensorConfiguration: SensorConfiguration = {};\n    this.#availableSensorTypes.forEach((sensorType) => {\n      zeroSensorConfiguration[sensorType] = 0;\n    });\n    return zeroSensorConfiguration;\n  }\n  async clearSensorConfiguration() {\n    return this.setConfiguration(this.zeroSensorConfiguration);\n  }\n\n  // MESSAGE\n  parseMessage(messageType: SensorConfigurationMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getSensorConfiguration\":\n      case \"setSensorConfiguration\":\n        const newSensorConfiguration = this.#parse(dataView);\n        this.#updateConfiguration(newSensorConfiguration);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n}\n\nexport default SensorConfigurationManager;\n","import { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { textDecoder, textEncoder } from \"./utils/Text.ts\";\nimport SensorDataManager, { SensorTypes } from \"./sensor/SensorDataManager.ts\";\nimport { arrayWithoutDuplicates } from \"./utils/ArrayUtils.ts\";\nimport { SensorRateStep } from \"./sensor/SensorConfigurationManager.ts\";\nimport { parseTimestamp } from \"./utils/MathUtils.ts\";\nimport { SensorType } from \"./sensor/SensorDataManager.ts\";\nimport Device, { SendMessageCallback } from \"./Device.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"TfliteManager\", { log: false });\n\nexport const TfliteMessageTypes = [\n  \"getTfliteName\",\n  \"setTfliteName\",\n  \"getTfliteTask\",\n  \"setTfliteTask\",\n  \"getTfliteSampleRate\",\n  \"setTfliteSampleRate\",\n  \"getTfliteSensorTypes\",\n  \"setTfliteSensorTypes\",\n  \"tfliteIsReady\",\n  \"getTfliteCaptureDelay\",\n  \"setTfliteCaptureDelay\",\n  \"getTfliteThreshold\",\n  \"setTfliteThreshold\",\n  \"getTfliteInferencingEnabled\",\n  \"setTfliteInferencingEnabled\",\n  \"tfliteInference\",\n] as const;\nexport type TfliteMessageType = (typeof TfliteMessageTypes)[number];\n\nexport const TfliteEventTypes = TfliteMessageTypes;\nexport type TfliteEventType = (typeof TfliteEventTypes)[number];\n\nexport const TfliteTasks = [\"classification\", \"regression\"] as const;\nexport type TfliteTask = (typeof TfliteTasks)[number];\n\nexport interface TfliteEventMessages {\n  getTfliteName: { tfliteName: string };\n  getTfliteTask: { tfliteTask: TfliteTask };\n  getTfliteSampleRate: { tfliteSampleRate: number };\n  getTfliteSensorTypes: { tfliteSensorTypes: SensorType[] };\n  tfliteIsReady: { tfliteIsReady: boolean };\n  getTfliteCaptureDelay: { tfliteCaptureDelay: number };\n  getTfliteThreshold: { tfliteThreshold: number };\n  getTfliteInferencingEnabled: { tfliteInferencingEnabled: boolean };\n  tfliteInference: { tfliteInference: TfliteInference };\n}\n\nexport interface TfliteInference {\n  timestamp: number;\n  values: number[];\n  maxValue?: number;\n  maxIndex?: number;\n}\n\nexport type TfliteEventDispatcher = EventDispatcher<\n  Device,\n  TfliteEventType,\n  TfliteEventMessages\n>;\nexport type SendTfliteMessageCallback = SendMessageCallback<TfliteMessageType>;\n\nexport const TfliteSensorTypes: SensorType[] = [\n  \"pressure\",\n  \"linearAcceleration\",\n  \"gyroscope\",\n  \"magnetometer\",\n] as const;\nexport type TfliteSensorType = (typeof TfliteSensorTypes)[number];\n\nclass TfliteManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendTfliteMessageCallback;\n\n  #assertValidTask(task: TfliteTask) {\n    _console.assertEnumWithError(task, TfliteTasks);\n  }\n  #assertValidTaskEnum(taskEnum: number) {\n    _console.assertWithError(\n      taskEnum in TfliteTasks,\n      `invalid taskEnum ${taskEnum}`\n    );\n  }\n\n  eventDispatcher!: TfliteEventDispatcher;\n  get addEventListenter() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  // PROPERTIES\n\n  #name!: string;\n  get name() {\n    return this.#name;\n  }\n  #parseName(dataView: DataView) {\n    _console.log(\"parseName\", dataView);\n    const name = textDecoder.decode(dataView.buffer);\n    this.#updateName(name);\n  }\n  #updateName(name: string) {\n    _console.log({ name });\n    this.#name = name;\n    this.#dispatchEvent(\"getTfliteName\", { tfliteName: name });\n  }\n  async setName(newName: string, sendImmediately?: boolean) {\n    _console.assertTypeWithError(newName, \"string\");\n    if (this.name == newName) {\n      _console.log(`redundant name assignment ${newName}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteName\");\n\n    const setNameData = textEncoder.encode(newName);\n    this.sendMessage(\n      [{ type: \"setTfliteName\", data: setNameData.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #task!: TfliteTask;\n  get task() {\n    return this.#task;\n  }\n  #parseTask(dataView: DataView) {\n    _console.log(\"parseTask\", dataView);\n    const taskEnum = dataView.getUint8(0);\n    this.#assertValidTaskEnum(taskEnum);\n    const task = TfliteTasks[taskEnum];\n    this.#updateTask(task);\n  }\n  #updateTask(task: TfliteTask) {\n    _console.log({ task });\n    this.#task = task;\n    this.#dispatchEvent(\"getTfliteTask\", { tfliteTask: task });\n  }\n  async setTask(newTask: TfliteTask, sendImmediately?: boolean) {\n    this.#assertValidTask(newTask);\n    if (this.task == newTask) {\n      _console.log(`redundant task assignment ${newTask}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteTask\");\n\n    const taskEnum = TfliteTasks.indexOf(newTask);\n    this.sendMessage(\n      [{ type: \"setTfliteTask\", data: Uint8Array.from([taskEnum]).buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #sampleRate!: number;\n  get sampleRate() {\n    return this.#sampleRate;\n  }\n  #parseSampleRate(dataView: DataView) {\n    _console.log(\"parseSampleRate\", dataView);\n    const sampleRate = dataView.getUint16(0, true);\n    this.#updateSampleRate(sampleRate);\n  }\n  #updateSampleRate(sampleRate: number) {\n    _console.log({ sampleRate });\n    this.#sampleRate = sampleRate;\n    this.#dispatchEvent(\"getTfliteSampleRate\", {\n      tfliteSampleRate: sampleRate,\n    });\n  }\n  async setSampleRate(newSampleRate: number, sendImmediately?: boolean) {\n    _console.assertTypeWithError(newSampleRate, \"number\");\n    newSampleRate -= newSampleRate % SensorRateStep;\n    _console.assertWithError(\n      newSampleRate >= SensorRateStep,\n      `sampleRate must be multiple of ${SensorRateStep} greater than 0 (got ${newSampleRate})`\n    );\n    if (this.#sampleRate == newSampleRate) {\n      _console.log(`redundant sampleRate assignment ${newSampleRate}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteSampleRate\");\n\n    const dataView = new DataView(new ArrayBuffer(2));\n    dataView.setUint16(0, newSampleRate, true);\n    this.sendMessage(\n      [{ type: \"setTfliteSampleRate\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  static AssertValidSensorType(sensorType: SensorType) {\n    SensorDataManager.AssertValidSensorType(sensorType);\n    _console.assertWithError(\n      TfliteSensorTypes.includes(sensorType),\n      `invalid tflite sensorType \"${sensorType}\"`\n    );\n  }\n\n  #sensorTypes: SensorType[] = [];\n  get sensorTypes() {\n    return this.#sensorTypes.slice();\n  }\n  #parseSensorTypes(dataView: DataView) {\n    _console.log(\"parseSensorTypes\", dataView);\n    const sensorTypes: SensorType[] = [];\n    for (let index = 0; index < dataView.byteLength; index++) {\n      const sensorTypeEnum = dataView.getUint8(index);\n      const sensorType = SensorTypes[sensorTypeEnum];\n      if (sensorType) {\n        sensorTypes.push(sensorType);\n      } else {\n        _console.error(`invalid sensorTypeEnum ${sensorTypeEnum}`);\n      }\n    }\n    this.#updateSensorTypes(sensorTypes);\n  }\n  #updateSensorTypes(sensorTypes: SensorType[]) {\n    _console.log({ sensorTypes });\n    this.#sensorTypes = sensorTypes;\n    this.#dispatchEvent(\"getTfliteSensorTypes\", {\n      tfliteSensorTypes: sensorTypes,\n    });\n  }\n  async setSensorTypes(\n    newSensorTypes: SensorType[],\n    sendImmediately?: boolean\n  ) {\n    newSensorTypes.forEach((sensorType) => {\n      TfliteManager.AssertValidSensorType(sensorType);\n    });\n\n    const promise = this.waitForEvent(\"getTfliteSensorTypes\");\n\n    newSensorTypes = arrayWithoutDuplicates(newSensorTypes);\n    const newSensorTypeEnums = newSensorTypes\n      .map((sensorType) => SensorTypes.indexOf(sensorType))\n      .sort();\n    _console.log(newSensorTypes, newSensorTypeEnums);\n    this.sendMessage(\n      [\n        {\n          type: \"setTfliteSensorTypes\",\n          data: Uint8Array.from(newSensorTypeEnums).buffer,\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #isReady!: boolean;\n  get isReady() {\n    return this.#isReady;\n  }\n  #parseIsReady(dataView: DataView) {\n    _console.log(\"parseIsReady\", dataView);\n    const isReady = Boolean(dataView.getUint8(0));\n    this.#updateIsReady(isReady);\n  }\n  #updateIsReady(isReady: boolean) {\n    _console.log({ isReady });\n    this.#isReady = isReady;\n    this.#dispatchEvent(\"tfliteIsReady\", { tfliteIsReady: isReady });\n  }\n  #assertIsReady() {\n    _console.assertWithError(this.isReady, `tflite is not ready`);\n  }\n\n  #captureDelay!: number;\n  get captureDelay() {\n    return this.#captureDelay;\n  }\n  #parseCaptureDelay(dataView: DataView) {\n    _console.log(\"parseCaptureDelay\", dataView);\n    const captureDelay = dataView.getUint16(0, true);\n    this.#updateCaptueDelay(captureDelay);\n  }\n  #updateCaptueDelay(captureDelay: number) {\n    _console.log({ captureDelay });\n    this.#captureDelay = captureDelay;\n    this.#dispatchEvent(\"getTfliteCaptureDelay\", {\n      tfliteCaptureDelay: captureDelay,\n    });\n  }\n  async setCaptureDelay(newCaptureDelay: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newCaptureDelay, \"number\");\n    if (this.#captureDelay == newCaptureDelay) {\n      _console.log(`redundant captureDelay assignment ${newCaptureDelay}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteCaptureDelay\");\n\n    const dataView = new DataView(new ArrayBuffer(2));\n    dataView.setUint16(0, newCaptureDelay, true);\n    this.sendMessage(\n      [{ type: \"setTfliteCaptureDelay\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #threshold!: number;\n  get threshold() {\n    return this.#threshold;\n  }\n  #parseThreshold(dataView: DataView) {\n    _console.log(\"parseThreshold\", dataView);\n    const threshold = dataView.getFloat32(0, true);\n    this.#updateThreshold(threshold);\n  }\n  #updateThreshold(threshold: number) {\n    _console.log({ threshold });\n    this.#threshold = threshold;\n    this.#dispatchEvent(\"getTfliteThreshold\", { tfliteThreshold: threshold });\n  }\n  async setThreshold(newThreshold: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newThreshold, \"number\");\n    _console.assertWithError(\n      newThreshold >= 0,\n      `threshold must be positive (got ${newThreshold})`\n    );\n    if (this.#threshold == newThreshold) {\n      _console.log(`redundant threshold assignment ${newThreshold}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteThreshold\");\n\n    const dataView = new DataView(new ArrayBuffer(4));\n    dataView.setFloat32(0, newThreshold, true);\n    this.sendMessage(\n      [{ type: \"setTfliteThreshold\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #inferencingEnabled!: boolean;\n  get inferencingEnabled() {\n    return this.#inferencingEnabled;\n  }\n  #parseInferencingEnabled(dataView: DataView) {\n    _console.log(\"parseInferencingEnabled\", dataView);\n    const inferencingEnabled = Boolean(dataView.getUint8(0));\n    this.#updateInferencingEnabled(inferencingEnabled);\n  }\n  #updateInferencingEnabled(inferencingEnabled: boolean) {\n    _console.log({ inferencingEnabled });\n    this.#inferencingEnabled = inferencingEnabled;\n    this.#dispatchEvent(\"getTfliteInferencingEnabled\", {\n      tfliteInferencingEnabled: inferencingEnabled,\n    });\n  }\n  async setInferencingEnabled(\n    newInferencingEnabled: boolean,\n    sendImmediately: boolean = true\n  ) {\n    _console.assertTypeWithError(newInferencingEnabled, \"boolean\");\n    if (!newInferencingEnabled && !this.isReady) {\n      return;\n    }\n    this.#assertIsReady();\n    if (this.#inferencingEnabled == newInferencingEnabled) {\n      _console.log(\n        `redundant inferencingEnabled assignment ${newInferencingEnabled}`\n      );\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteInferencingEnabled\");\n\n    this.sendMessage(\n      [\n        {\n          type: \"setTfliteInferencingEnabled\",\n          data: Uint8Array.from([Number(newInferencingEnabled)]).buffer,\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n  async toggleInferencingEnabled() {\n    return this.setInferencingEnabled(!this.inferencingEnabled);\n  }\n\n  async enableInferencing() {\n    if (this.inferencingEnabled) {\n      return;\n    }\n    this.setInferencingEnabled(true);\n  }\n  async disableInferencing() {\n    if (!this.inferencingEnabled) {\n      return;\n    }\n    this.setInferencingEnabled(false);\n  }\n\n  #parseInference(dataView: DataView) {\n    _console.log(\"parseInference\", dataView);\n\n    const timestamp = parseTimestamp(dataView, 0);\n    _console.log({ timestamp });\n\n    const values: number[] = [];\n    for (\n      let index = 0, byteOffset = 2;\n      byteOffset < dataView.byteLength;\n      index++, byteOffset += 4\n    ) {\n      const value = dataView.getFloat32(byteOffset, true);\n      values.push(value);\n    }\n    _console.log(\"values\", values);\n\n    const inference: TfliteInference = {\n      timestamp,\n      values,\n    };\n\n    if (this.task == \"classification\") {\n      let maxValue = 0;\n      let maxIndex = 0;\n      values.forEach((value, index) => {\n        if (value > maxValue) {\n          maxValue = value;\n          maxIndex = index;\n        }\n      });\n      _console.log({ maxIndex, maxValue });\n      inference.maxIndex = maxIndex;\n      inference.maxValue = maxValue;\n    }\n\n    this.#dispatchEvent(\"tfliteInference\", { tfliteInference: inference });\n  }\n\n  parseMessage(messageType: TfliteMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getTfliteName\":\n      case \"setTfliteName\":\n        this.#parseName(dataView);\n        break;\n      case \"getTfliteTask\":\n      case \"setTfliteTask\":\n        this.#parseTask(dataView);\n        break;\n      case \"getTfliteSampleRate\":\n      case \"setTfliteSampleRate\":\n        this.#parseSampleRate(dataView);\n        break;\n      case \"getTfliteSensorTypes\":\n      case \"setTfliteSensorTypes\":\n        this.#parseSensorTypes(dataView);\n        break;\n      case \"tfliteIsReady\":\n        this.#parseIsReady(dataView);\n        break;\n      case \"getTfliteCaptureDelay\":\n      case \"setTfliteCaptureDelay\":\n        this.#parseCaptureDelay(dataView);\n        break;\n      case \"getTfliteThreshold\":\n      case \"setTfliteThreshold\":\n        this.#parseThreshold(dataView);\n        break;\n      case \"getTfliteInferencingEnabled\":\n      case \"setTfliteInferencingEnabled\":\n        this.#parseInferencingEnabled(dataView);\n        break;\n      case \"tfliteInference\":\n        this.#parseInference(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n}\n\nexport default TfliteManager;\n","import Device from \"./Device.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { textDecoder } from \"./utils/Text.ts\";\n\nconst _console = createConsole(\"DeviceInformationManager\", { log: false });\n\nexport interface PnpId {\n  source: \"Bluetooth\" | \"USB\";\n  vendorId: number;\n  productId: number;\n  productVersion: number;\n}\n\nexport interface DeviceInformation {\n  manufacturerName: string;\n  modelNumber: string;\n  softwareRevision: string;\n  hardwareRevision: string;\n  firmwareRevision: string;\n  pnpId: PnpId;\n  serialNumber: string;\n}\n\nexport const DeviceInformationTypes = [\n  \"manufacturerName\",\n  \"modelNumber\",\n  \"hardwareRevision\",\n  \"firmwareRevision\",\n  \"softwareRevision\",\n  \"pnpId\",\n  \"serialNumber\",\n] as const;\nexport type DeviceInformationType = (typeof DeviceInformationTypes)[number];\n\nexport const DeviceInformationEventTypes = [\n  ...DeviceInformationTypes,\n  \"deviceInformation\",\n] as const;\nexport type DeviceInformationEventType =\n  (typeof DeviceInformationEventTypes)[number];\n\nexport interface DeviceInformationEventMessages {\n  manufacturerName: { manufacturerName: string };\n  modelNumber: { modelNumber: string };\n  softwareRevision: { softwareRevision: string };\n  hardwareRevision: { hardwareRevision: string };\n  firmwareRevision: { firmwareRevision: string };\n  pnpId: { pnpId: PnpId };\n  serialNumber: { serialNumber: string };\n  deviceInformation: { deviceInformation: DeviceInformation };\n}\n\nexport type DeviceInformationEventDispatcher = EventDispatcher<\n  Device,\n  DeviceInformationEventType,\n  DeviceInformationEventMessages\n>;\n\nclass DeviceInformationManager {\n  eventDispatcher!: DeviceInformationEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n\n  #information: Partial<DeviceInformation> = {};\n  get information() {\n    return this.#information as DeviceInformation;\n  }\n  clear() {\n    this.#information = {};\n  }\n  get #isComplete() {\n    return DeviceInformationTypes.filter((key) => key != \"serialNumber\").every(\n      (key) => key in this.#information\n    );\n  }\n\n  #update(partialDeviceInformation: Partial<DeviceInformation>) {\n    _console.log({ partialDeviceInformation });\n    const deviceInformationNames = Object.keys(\n      partialDeviceInformation\n    ) as (keyof DeviceInformation)[];\n    deviceInformationNames.forEach((deviceInformationName) => {\n      // @ts-expect-error\n      this.#dispatchEvent(deviceInformationName, {\n        [deviceInformationName]:\n          partialDeviceInformation[deviceInformationName],\n      });\n    });\n\n    Object.assign(this.#information, partialDeviceInformation);\n    _console.log({ deviceInformation: this.#information });\n    if (this.#isComplete) {\n      _console.log(\"completed deviceInformation\");\n      this.#dispatchEvent(\"deviceInformation\", {\n        deviceInformation: this.information,\n      });\n    }\n  }\n\n  parseMessage(messageType: DeviceInformationType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"manufacturerName\":\n        const manufacturerName = textDecoder.decode(dataView.buffer);\n        _console.log({ manufacturerName });\n        this.#update({ manufacturerName });\n        break;\n      case \"modelNumber\":\n        const modelNumber = textDecoder.decode(dataView.buffer);\n        _console.log({ modelNumber });\n        this.#update({ modelNumber });\n        break;\n      case \"softwareRevision\":\n        const softwareRevision = textDecoder.decode(dataView.buffer);\n        _console.log({ softwareRevision });\n        this.#update({ softwareRevision });\n        break;\n      case \"hardwareRevision\":\n        const hardwareRevision = textDecoder.decode(dataView.buffer);\n        _console.log({ hardwareRevision });\n        this.#update({ hardwareRevision });\n        break;\n      case \"firmwareRevision\":\n        const firmwareRevision = textDecoder.decode(dataView.buffer);\n        _console.log({ firmwareRevision });\n        this.#update({ firmwareRevision });\n        break;\n      case \"pnpId\":\n        const pnpId: PnpId = {\n          source: dataView.getUint8(0) === 1 ? \"Bluetooth\" : \"USB\",\n          productId: dataView.getUint16(3, true),\n          productVersion: dataView.getUint16(5, true),\n          vendorId: 0,\n        };\n        if (pnpId.source == \"Bluetooth\") {\n          pnpId.vendorId = dataView.getUint16(1, true);\n        } else {\n          // no need to implement\n        }\n        _console.log({ pnpId });\n        this.#update({ pnpId });\n        break;\n      case \"serialNumber\":\n        const serialNumber = textDecoder.decode(dataView.buffer);\n        _console.log({ serialNumber });\n        // will only be used for node\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n}\n\nexport default DeviceInformationManager;\n","import { ConnectionType } from \"./connection/BaseConnectionManager.ts\";\nimport Device, { SendMessageCallback } from \"./Device.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport { isInBrowser } from \"./utils/environment.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { Uint16Max } from \"./utils/MathUtils.ts\";\nimport { textDecoder, textEncoder } from \"./utils/Text.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"InformationManager\", { log: false });\n\nexport const DeviceTypes = [\n  \"leftInsole\",\n  \"rightInsole\",\n  \"leftGlove\",\n  \"rightGlove\",\n  \"glasses\",\n  \"generic\",\n] as const;\nexport type DeviceType = (typeof DeviceTypes)[number];\n\nexport const Sides = [\"left\", \"right\"] as const;\nexport type Side = (typeof Sides)[number];\n\nexport const MinNameLength = 2;\nexport const MaxNameLength = 30;\n\nexport const InformationMessageTypes = [\n  \"isCharging\",\n  \"getBatteryCurrent\",\n  \"getMtu\",\n  \"getId\",\n  \"getName\",\n  \"setName\",\n  \"getType\",\n  \"setType\",\n  \"getCurrentTime\",\n  \"setCurrentTime\",\n] as const;\nexport type InformationMessageType = (typeof InformationMessageTypes)[number];\n\nexport const InformationEventTypes = InformationMessageTypes;\nexport type InformationEventType = (typeof InformationEventTypes)[number];\n\nexport interface InformationEventMessages {\n  isCharging: { isCharging: boolean };\n  getBatteryCurrent: { batteryCurrent: number };\n  getMtu: { mtu: number };\n  getId: { id: string };\n  getName: { name: string };\n  getType: { type: DeviceType };\n  getCurrentTime: { currentTime: number };\n}\n\nexport type InformationEventDispatcher = EventDispatcher<\n  Device,\n  InformationEventType,\n  InformationEventMessages\n>;\nexport type SendInformationMessageCallback =\n  SendMessageCallback<InformationMessageType>;\n\nclass InformationManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendInformationMessageCallback;\n\n  eventDispatcher!: InformationEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  // PROPERTIES\n\n  #isCharging = false;\n  get isCharging() {\n    return this.#isCharging;\n  }\n  #updateIsCharging(updatedIsCharging: boolean) {\n    _console.assertTypeWithError(updatedIsCharging, \"boolean\");\n    this.#isCharging = updatedIsCharging;\n    _console.log({ isCharging: this.#isCharging });\n    this.#dispatchEvent(\"isCharging\", { isCharging: this.#isCharging });\n  }\n\n  #batteryCurrent!: number;\n  get batteryCurrent() {\n    return this.#batteryCurrent;\n  }\n  async getBatteryCurrent() {\n    _console.log(\"getting battery current...\");\n    const promise = this.waitForEvent(\"getBatteryCurrent\");\n    this.sendMessage([{ type: \"getBatteryCurrent\" }]);\n    await promise;\n  }\n  #updateBatteryCurrent(updatedBatteryCurrent: number) {\n    _console.assertTypeWithError(updatedBatteryCurrent, \"number\");\n    this.#batteryCurrent = updatedBatteryCurrent;\n    _console.log({ batteryCurrent: this.#batteryCurrent });\n    this.#dispatchEvent(\"getBatteryCurrent\", {\n      batteryCurrent: this.#batteryCurrent,\n    });\n  }\n\n  #id!: string;\n  get id() {\n    return this.#id;\n  }\n  #updateId(updatedId: string) {\n    _console.assertTypeWithError(updatedId, \"string\");\n    this.#id = updatedId;\n    _console.log({ id: this.#id });\n    this.#dispatchEvent(\"getId\", { id: this.#id });\n  }\n\n  #name = \"\";\n  get name() {\n    return this.#name;\n  }\n\n  updateName(updatedName: string) {\n    _console.assertTypeWithError(updatedName, \"string\");\n    this.#name = updatedName;\n    _console.log({ updatedName: this.#name });\n    this.#dispatchEvent(\"getName\", { name: this.#name });\n  }\n  async setName(newName: string) {\n    _console.assertTypeWithError(newName, \"string\");\n    _console.assertRangeWithError(\n      \"newName\",\n      newName.length,\n      MinNameLength,\n      MaxNameLength\n    );\n    const setNameData = textEncoder.encode(newName);\n    _console.log({ setNameData });\n\n    const promise = this.waitForEvent(\"getName\");\n    this.sendMessage([{ type: \"setName\", data: setNameData.buffer }]);\n    await promise;\n  }\n\n  // TYPE\n  #type!: DeviceType;\n  get type() {\n    return this.#type;\n  }\n  get typeEnum() {\n    return DeviceTypes.indexOf(this.type);\n  }\n  #assertValidDeviceType(type: DeviceType) {\n    _console.assertEnumWithError(type, DeviceTypes);\n  }\n  #assertValidDeviceTypeEnum(typeEnum: number) {\n    _console.assertTypeWithError(typeEnum, \"number\");\n    _console.assertWithError(\n      typeEnum in DeviceTypes,\n      `invalid typeEnum ${typeEnum}`\n    );\n  }\n  updateType(updatedType: DeviceType) {\n    this.#assertValidDeviceType(updatedType);\n    if (updatedType == this.type) {\n      _console.log(\"redundant type assignment\");\n      return;\n    }\n    this.#type = updatedType;\n    _console.log({ updatedType: this.#type });\n\n    this.#dispatchEvent(\"getType\", { type: this.#type });\n  }\n  async #setTypeEnum(newTypeEnum: number) {\n    this.#assertValidDeviceTypeEnum(newTypeEnum);\n    const setTypeData = Uint8Array.from([newTypeEnum]);\n    _console.log({ setTypeData });\n    const promise = this.waitForEvent(\"getType\");\n    this.sendMessage([{ type: \"setType\", data: setTypeData.buffer }]);\n    await promise;\n  }\n  async setType(newType: DeviceType) {\n    this.#assertValidDeviceType(newType);\n    const newTypeEnum = DeviceTypes.indexOf(newType);\n    this.#setTypeEnum(newTypeEnum);\n  }\n\n  get isInsole() {\n    switch (this.type) {\n      case \"leftInsole\":\n      case \"rightInsole\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get isGlove() {\n    switch (this.type) {\n      case \"leftGlove\":\n      case \"rightGlove\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get side(): Side {\n    switch (this.type) {\n      case \"leftInsole\":\n      case \"leftGlove\":\n        return \"left\";\n      case \"rightInsole\":\n      case \"rightGlove\":\n        return \"right\";\n      default:\n        return \"left\";\n    }\n  }\n\n  #mtu = 0;\n  get mtu() {\n    return this.#mtu;\n  }\n  #updateMtu(newMtu: number) {\n    _console.assertTypeWithError(newMtu, \"number\");\n    if (this.#mtu == newMtu) {\n      _console.log(\"redundant mtu assignment\", newMtu);\n      return;\n    }\n    this.#mtu = newMtu;\n\n    this.#dispatchEvent(\"getMtu\", { mtu: this.#mtu });\n  }\n\n  #isCurrentTimeSet = false;\n  get isCurrentTimeSet() {\n    return this.#isCurrentTimeSet;\n  }\n\n  #onCurrentTime(currentTime: number) {\n    _console.log({ currentTime });\n    this.#isCurrentTimeSet =\n      currentTime != 0 || Math.abs(Date.now() - currentTime) < Uint16Max;\n    if (!this.#isCurrentTimeSet) {\n      this.#setCurrentTime(false);\n    }\n  }\n  async #setCurrentTime(sendImmediately?: boolean) {\n    _console.log(\"setting current time...\");\n    const dataView = new DataView(new ArrayBuffer(8));\n    dataView.setBigUint64(0, BigInt(Date.now()), true);\n    const promise = this.waitForEvent(\"getCurrentTime\");\n    this.sendMessage(\n      [{ type: \"setCurrentTime\", data: dataView.buffer }],\n      sendImmediately\n    );\n    await promise;\n  }\n\n  // MESSAGE\n  parseMessage(messageType: InformationMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"isCharging\":\n        const isCharging = Boolean(dataView.getUint8(0));\n        _console.log({ isCharging });\n        this.#updateIsCharging(isCharging);\n        break;\n      case \"getBatteryCurrent\":\n        const batteryCurrent = dataView.getFloat32(0, true);\n        _console.log({ batteryCurrent });\n        this.#updateBatteryCurrent(batteryCurrent);\n        break;\n      case \"getId\":\n        const id = textDecoder.decode(dataView.buffer);\n        _console.log({ id });\n        this.#updateId(id);\n        break;\n      case \"getName\":\n      case \"setName\":\n        const name = textDecoder.decode(dataView.buffer);\n        _console.log({ name });\n        this.updateName(name);\n        break;\n      case \"getType\":\n      case \"setType\":\n        const typeEnum = dataView.getUint8(0);\n        const type = DeviceTypes[typeEnum];\n        _console.log({ typeEnum, type });\n        this.updateType(type);\n        break;\n      case \"getMtu\":\n        let mtu = dataView.getUint16(0, true);\n        if (\n          this.connectionType != \"webSocket\" &&\n          this.connectionType != \"udp\"\n        ) {\n          mtu = Math.min(mtu, 512);\n        }\n        _console.log({ mtu });\n        this.#updateMtu(mtu);\n        break;\n      case \"getCurrentTime\":\n      case \"setCurrentTime\":\n        const currentTime = Number(dataView.getBigUint64(0, true));\n        this.#onCurrentTime(currentTime);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  clear() {\n    this.#isCurrentTimeSet = false;\n  }\n\n  connectionType?: ConnectionType;\n}\n\nexport default InformationManager;\n","export const VibrationWaveformEffects = [\n  \"none\",\n  \"strongClick100\",\n  \"strongClick60\",\n  \"strongClick30\",\n  \"sharpClick100\",\n  \"sharpClick60\",\n  \"sharpClick30\",\n  \"softBump100\",\n  \"softBump60\",\n  \"softBump30\",\n  \"doubleClick100\",\n  \"doubleClick60\",\n  \"tripleClick100\",\n  \"softFuzz60\",\n  \"strongBuzz100\",\n  \"alert750ms\",\n  \"alert1000ms\",\n  \"strongClick1_100\",\n  \"strongClick2_80\",\n  \"strongClick3_60\",\n  \"strongClick4_30\",\n  \"mediumClick100\",\n  \"mediumClick80\",\n  \"mediumClick60\",\n  \"sharpTick100\",\n  \"sharpTick80\",\n  \"sharpTick60\",\n  \"shortDoubleClickStrong100\",\n  \"shortDoubleClickStrong80\",\n  \"shortDoubleClickStrong60\",\n  \"shortDoubleClickStrong30\",\n  \"shortDoubleClickMedium100\",\n  \"shortDoubleClickMedium80\",\n  \"shortDoubleClickMedium60\",\n  \"shortDoubleSharpTick100\",\n  \"shortDoubleSharpTick80\",\n  \"shortDoubleSharpTick60\",\n  \"longDoubleSharpClickStrong100\",\n  \"longDoubleSharpClickStrong80\",\n  \"longDoubleSharpClickStrong60\",\n  \"longDoubleSharpClickStrong30\",\n  \"longDoubleSharpClickMedium100\",\n  \"longDoubleSharpClickMedium80\",\n  \"longDoubleSharpClickMedium60\",\n  \"longDoubleSharpTick100\",\n  \"longDoubleSharpTick80\",\n  \"longDoubleSharpTick60\",\n  \"buzz100\",\n  \"buzz80\",\n  \"buzz60\",\n  \"buzz40\",\n  \"buzz20\",\n  \"pulsingStrong100\",\n  \"pulsingStrong60\",\n  \"pulsingMedium100\",\n  \"pulsingMedium60\",\n  \"pulsingSharp100\",\n  \"pulsingSharp60\",\n  \"transitionClick100\",\n  \"transitionClick80\",\n  \"transitionClick60\",\n  \"transitionClick40\",\n  \"transitionClick20\",\n  \"transitionClick10\",\n  \"transitionHum100\",\n  \"transitionHum80\",\n  \"transitionHum60\",\n  \"transitionHum40\",\n  \"transitionHum20\",\n  \"transitionHum10\",\n  \"transitionRampDownLongSmooth2_100\",\n  \"transitionRampDownLongSmooth1_100\",\n  \"transitionRampDownMediumSmooth1_100\",\n  \"transitionRampDownMediumSmooth2_100\",\n  \"transitionRampDownShortSmooth1_100\",\n  \"transitionRampDownShortSmooth2_100\",\n  \"transitionRampDownLongSharp1_100\",\n  \"transitionRampDownLongSharp2_100\",\n  \"transitionRampDownMediumSharp1_100\",\n  \"transitionRampDownMediumSharp2_100\",\n  \"transitionRampDownShortSharp1_100\",\n  \"transitionRampDownShortSharp2_100\",\n  \"transitionRampUpLongSmooth1_100\",\n  \"transitionRampUpLongSmooth2_100\",\n  \"transitionRampUpMediumSmooth1_100\",\n  \"transitionRampUpMediumSmooth2_100\",\n  \"transitionRampUpShortSmooth1_100\",\n  \"transitionRampUpShortSmooth2_100\",\n  \"transitionRampUpLongSharp1_100\",\n  \"transitionRampUpLongSharp2_100\",\n  \"transitionRampUpMediumSharp1_100\",\n  \"transitionRampUpMediumSharp2_100\",\n  \"transitionRampUpShortSharp1_100\",\n  \"transitionRampUpShortSharp2_100\",\n  \"transitionRampDownLongSmooth1_50\",\n  \"transitionRampDownLongSmooth2_50\",\n  \"transitionRampDownMediumSmooth1_50\",\n  \"transitionRampDownMediumSmooth2_50\",\n  \"transitionRampDownShortSmooth1_50\",\n  \"transitionRampDownShortSmooth2_50\",\n  \"transitionRampDownLongSharp1_50\",\n  \"transitionRampDownLongSharp2_50\",\n  \"transitionRampDownMediumSharp1_50\",\n  \"transitionRampDownMediumSharp2_50\",\n  \"transitionRampDownShortSharp1_50\",\n  \"transitionRampDownShortSharp2_50\",\n  \"transitionRampUpLongSmooth1_50\",\n  \"transitionRampUpLongSmooth2_50\",\n  \"transitionRampUpMediumSmooth1_50\",\n  \"transitionRampUpMediumSmooth2_50\",\n  \"transitionRampUpShortSmooth1_50\",\n  \"transitionRampUpShortSmooth2_50\",\n  \"transitionRampUpLongSharp1_50\",\n  \"transitionRampUpLongSharp2_50\",\n  \"transitionRampUpMediumSharp1_50\",\n  \"transitionRampUpMediumSharp2_50\",\n  \"transitionRampUpShortSharp1_50\",\n  \"transitionRampUpShortSharp2_50\",\n  \"longBuzz100\",\n  \"smoothHum50\",\n  \"smoothHum40\",\n  \"smoothHum30\",\n  \"smoothHum20\",\n  \"smoothHum10\",\n] as const;\n\nexport type VibrationWaveformEffect = (typeof VibrationWaveformEffects)[number];\n","import { createConsole } from \"../utils/Console.ts\";\nimport { VibrationWaveformEffect, VibrationWaveformEffects } from \"./VibrationWaveformEffects.ts\";\nimport { concatenateArrayBuffers } from \"../utils/ArrayBufferUtils.ts\";\nimport { SendMessageCallback } from \"../Device.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"VibrationManager\");\n\nexport const VibrationLocations = [\"front\", \"rear\"] as const;\nexport type VibrationLocation = (typeof VibrationLocations)[number];\n\nexport const VibrationTypes = [\"waveformEffect\", \"waveform\"] as const;\nexport type VibrationType = (typeof VibrationTypes)[number];\n\nexport interface VibrationWaveformEffectSegment {\n  effect?: VibrationWaveformEffect;\n  delay?: number;\n  loopCount?: number;\n}\n\nexport interface VibrationWaveformSegment {\n  duration: number;\n  amplitude: number;\n}\n\nexport const VibrationMessageTypes = [\"triggerVibration\"] as const;\nexport type VibrationMessageType = (typeof VibrationMessageTypes)[number];\n\nexport const MaxNumberOfVibrationWaveformEffectSegments = 8;\nexport const MaxVibrationWaveformSegmentDuration = 2550;\nexport const MaxVibrationWaveformEffectSegmentDelay = 1270;\nexport const MaxVibrationWaveformEffectSegmentLoopCount = 3;\nexport const MaxNumberOfVibrationWaveformSegments = 20;\nexport const MaxVibrationWaveformEffectSequenceLoopCount = 6;\n\ninterface BaseVibrationConfiguration {\n  type: VibrationType;\n  locations?: VibrationLocation[];\n}\n\nexport interface VibrationWaveformEffectConfiguration extends BaseVibrationConfiguration {\n  type: \"waveformEffect\";\n  segments: VibrationWaveformEffectSegment[];\n  loopCount?: number;\n}\n\nexport interface VibrationWaveformConfiguration extends BaseVibrationConfiguration {\n  type: \"waveform\";\n  segments: VibrationWaveformSegment[];\n}\n\nexport type VibrationConfiguration = VibrationWaveformEffectConfiguration | VibrationWaveformConfiguration;\n\nexport type SendVibrationMessageCallback = SendMessageCallback<VibrationMessageType>;\n\nclass VibrationManager {\n  constructor() {\n    autoBind(this);\n  }\n  sendMessage!: SendVibrationMessageCallback;\n\n  #verifyLocation(location: VibrationLocation) {\n    _console.assertTypeWithError(location, \"string\");\n    _console.assertWithError(VibrationLocations.includes(location), `invalid location \"${location}\"`);\n  }\n  #verifyLocations(locations: VibrationLocation[]) {\n    this.#assertNonEmptyArray(locations);\n    locations.forEach((location) => {\n      this.#verifyLocation(location);\n    });\n  }\n  #createLocationsBitmask(locations: VibrationLocation[]) {\n    this.#verifyLocations(locations);\n\n    let locationsBitmask = 0;\n    locations.forEach((location) => {\n      const locationIndex = VibrationLocations.indexOf(location);\n      locationsBitmask |= 1 << locationIndex;\n    });\n    _console.log({ locationsBitmask });\n    _console.assertWithError(locationsBitmask > 0, `locationsBitmask must not be zero`);\n    return locationsBitmask;\n  }\n\n  #assertNonEmptyArray(array: any[]) {\n    _console.assertWithError(Array.isArray(array), \"passed non-array\");\n    _console.assertWithError(array.length > 0, \"passed empty array\");\n  }\n\n  #verifyWaveformEffect(waveformEffect: VibrationWaveformEffect) {\n    _console.assertWithError(\n      VibrationWaveformEffects.includes(waveformEffect),\n      `invalid waveformEffect \"${waveformEffect}\"`\n    );\n  }\n\n  #verifyWaveformEffectSegment(waveformEffectSegment: VibrationWaveformEffectSegment) {\n    if (waveformEffectSegment.effect != undefined) {\n      const waveformEffect = waveformEffectSegment.effect;\n      this.#verifyWaveformEffect(waveformEffect);\n    } else if (waveformEffectSegment.delay != undefined) {\n      const { delay } = waveformEffectSegment;\n      _console.assertWithError(delay >= 0, `delay must be 0ms or greater (got ${delay})`);\n      _console.assertWithError(\n        delay <= MaxVibrationWaveformEffectSegmentDelay,\n        `delay must be ${MaxVibrationWaveformEffectSegmentDelay}ms or less (got ${delay})`\n      );\n    } else {\n      throw Error(\"no effect or delay found in waveformEffectSegment\");\n    }\n\n    if (waveformEffectSegment.loopCount != undefined) {\n      const { loopCount } = waveformEffectSegment;\n      this.#verifyWaveformEffectSegmentLoopCount(loopCount);\n    }\n  }\n\n  #verifyWaveformEffectSegmentLoopCount(waveformEffectSegmentLoopCount: number) {\n    _console.assertTypeWithError(waveformEffectSegmentLoopCount, \"number\");\n    _console.assertWithError(\n      waveformEffectSegmentLoopCount >= 0,\n      `waveformEffectSegmentLoopCount must be 0 or greater (got ${waveformEffectSegmentLoopCount})`\n    );\n    _console.assertWithError(\n      waveformEffectSegmentLoopCount <= MaxVibrationWaveformEffectSegmentLoopCount,\n      `waveformEffectSegmentLoopCount must be ${MaxVibrationWaveformEffectSegmentLoopCount} or fewer (got ${waveformEffectSegmentLoopCount})`\n    );\n  }\n\n  #verifyWaveformEffectSegments(waveformEffectSegments: VibrationWaveformEffectSegment[]) {\n    this.#assertNonEmptyArray(waveformEffectSegments);\n    _console.assertWithError(\n      waveformEffectSegments.length <= MaxNumberOfVibrationWaveformEffectSegments,\n      `must have ${MaxNumberOfVibrationWaveformEffectSegments} waveformEffectSegments or fewer (got ${waveformEffectSegments.length})`\n    );\n    waveformEffectSegments.forEach((waveformEffectSegment) => {\n      this.#verifyWaveformEffectSegment(waveformEffectSegment);\n    });\n  }\n\n  #verifyWaveformEffectSequenceLoopCount(waveformEffectSequenceLoopCount: number) {\n    _console.assertTypeWithError(waveformEffectSequenceLoopCount, \"number\");\n    _console.assertWithError(\n      waveformEffectSequenceLoopCount >= 0,\n      `waveformEffectSequenceLoopCount must be 0 or greater (got ${waveformEffectSequenceLoopCount})`\n    );\n    _console.assertWithError(\n      waveformEffectSequenceLoopCount <= MaxVibrationWaveformEffectSequenceLoopCount,\n      `waveformEffectSequenceLoopCount must be ${MaxVibrationWaveformEffectSequenceLoopCount} or fewer (got ${waveformEffectSequenceLoopCount})`\n    );\n  }\n\n  #verifyWaveformSegment(waveformSegment: VibrationWaveformSegment) {\n    _console.assertTypeWithError(waveformSegment.amplitude, \"number\");\n    _console.assertWithError(\n      waveformSegment.amplitude >= 0,\n      `amplitude must be 0 or greater (got ${waveformSegment.amplitude})`\n    );\n    _console.assertWithError(\n      waveformSegment.amplitude <= 1,\n      `amplitude must be 1 or less (got ${waveformSegment.amplitude})`\n    );\n\n    _console.assertTypeWithError(waveformSegment.duration, \"number\");\n    _console.assertWithError(\n      waveformSegment.duration > 0,\n      `duration must be greater than 0ms (got ${waveformSegment.duration}ms)`\n    );\n    _console.assertWithError(\n      waveformSegment.duration <= MaxVibrationWaveformSegmentDuration,\n      `duration must be ${MaxVibrationWaveformSegmentDuration}ms or less (got ${waveformSegment.duration}ms)`\n    );\n  }\n\n  #verifyWaveformSegments(waveformSegments: VibrationWaveformSegment[]) {\n    this.#assertNonEmptyArray(waveformSegments);\n    _console.assertWithError(\n      waveformSegments.length <= MaxNumberOfVibrationWaveformSegments,\n      `must have ${MaxNumberOfVibrationWaveformSegments} waveformSegments or fewer (got ${waveformSegments.length})`\n    );\n    waveformSegments.forEach((waveformSegment) => {\n      this.#verifyWaveformSegment(waveformSegment);\n    });\n  }\n\n  #createWaveformEffectsData(\n    locations: VibrationLocation[],\n    waveformEffectSegments: VibrationWaveformEffectSegment[],\n    waveformEffectSequenceLoopCount: number = 0\n  ) {\n    this.#verifyWaveformEffectSegments(waveformEffectSegments);\n    this.#verifyWaveformEffectSequenceLoopCount(waveformEffectSequenceLoopCount);\n\n    let dataArray = [];\n    let byteOffset = 0;\n\n    const hasAtLeast1WaveformEffectWithANonzeroLoopCount = waveformEffectSegments.some((waveformEffectSegment) => {\n      const { loopCount } = waveformEffectSegment;\n      return loopCount != undefined && loopCount > 0;\n    });\n\n    const includeAllWaveformEffectSegments =\n      hasAtLeast1WaveformEffectWithANonzeroLoopCount || waveformEffectSequenceLoopCount != 0;\n\n    for (\n      let index = 0;\n      index < waveformEffectSegments.length ||\n      (includeAllWaveformEffectSegments && index < MaxNumberOfVibrationWaveformEffectSegments);\n      index++\n    ) {\n      const waveformEffectSegment = waveformEffectSegments[index] || { effect: \"none\" };\n      if (waveformEffectSegment.effect != undefined) {\n        const waveformEffect = waveformEffectSegment.effect;\n        dataArray[byteOffset++] = VibrationWaveformEffects.indexOf(waveformEffect);\n      } else if (waveformEffectSegment.delay != undefined) {\n        const { delay } = waveformEffectSegment;\n        dataArray[byteOffset++] = (1 << 7) | Math.floor(delay / 10); // set most significant bit to 1\n      } else {\n        throw Error(\"invalid waveformEffectSegment\");\n      }\n    }\n\n    const includeAllWaveformEffectSegmentLoopCounts = waveformEffectSequenceLoopCount != 0;\n    for (\n      let index = 0;\n      index < waveformEffectSegments.length ||\n      (includeAllWaveformEffectSegmentLoopCounts && index < MaxNumberOfVibrationWaveformEffectSegments);\n      index++\n    ) {\n      const waveformEffectSegmentLoopCount = waveformEffectSegments[index]?.loopCount || 0;\n      if (index == 0 || index == 4) {\n        dataArray[byteOffset] = 0;\n      }\n      const bitOffset = 2 * (index % 4);\n      dataArray[byteOffset] |= waveformEffectSegmentLoopCount << bitOffset;\n      if (index == 3 || index == 7) {\n        byteOffset++;\n      }\n    }\n\n    if (waveformEffectSequenceLoopCount != 0) {\n      dataArray[byteOffset++] = waveformEffectSequenceLoopCount;\n    }\n    const dataView = new DataView(Uint8Array.from(dataArray).buffer);\n    _console.log({ dataArray, dataView });\n    return this.#createData(locations, \"waveformEffect\", dataView);\n  }\n  #createWaveformData(locations: VibrationLocation[], waveformSegments: VibrationWaveformSegment[]) {\n    this.#verifyWaveformSegments(waveformSegments);\n    const dataView = new DataView(new ArrayBuffer(waveformSegments.length * 2));\n    waveformSegments.forEach((waveformSegment, index) => {\n      dataView.setUint8(index * 2, Math.floor(waveformSegment.amplitude * 127));\n      dataView.setUint8(index * 2 + 1, Math.floor(waveformSegment.duration / 10));\n    });\n    _console.log({ dataView });\n    return this.#createData(locations, \"waveform\", dataView);\n  }\n\n  #verifyVibrationType(vibrationType: VibrationType) {\n    _console.assertTypeWithError(vibrationType, \"string\");\n    _console.assertWithError(VibrationTypes.includes(vibrationType), `invalid vibrationType \"${vibrationType}\"`);\n  }\n\n  #createData(locations: VibrationLocation[], vibrationType: VibrationType, dataView: DataView) {\n    _console.assertWithError(dataView?.byteLength > 0, \"no data received\");\n    const locationsBitmask = this.#createLocationsBitmask(locations);\n    this.#verifyVibrationType(vibrationType);\n    const vibrationTypeIndex = VibrationTypes.indexOf(vibrationType);\n    _console.log({ locationsBitmask, vibrationTypeIndex, dataView });\n    const data = concatenateArrayBuffers(locationsBitmask, vibrationTypeIndex, dataView.byteLength, dataView);\n    _console.log({ data });\n    return data;\n  }\n\n  async triggerVibration(vibrationConfigurations: VibrationConfiguration[], sendImmediately: boolean = true) {\n    let triggerVibrationData!: ArrayBuffer;\n    vibrationConfigurations.forEach((vibrationConfiguration) => {\n      const { type } = vibrationConfiguration;\n\n      let { locations } = vibrationConfiguration;\n      locations = locations || VibrationLocations.slice();\n\n      let arrayBuffer: ArrayBuffer;\n\n      switch (type) {\n        case \"waveformEffect\":\n          {\n            const { segments, loopCount } = vibrationConfiguration;\n            arrayBuffer = this.#createWaveformEffectsData(locations, segments, loopCount);\n          }\n          break;\n        case \"waveform\":\n          {\n            const { segments } = vibrationConfiguration;\n            arrayBuffer = this.#createWaveformData(locations, segments);\n          }\n          break;\n        default:\n          throw Error(`invalid vibration type \"${type}\"`);\n      }\n      _console.log({ type, arrayBuffer });\n      triggerVibrationData = concatenateArrayBuffers(triggerVibrationData, arrayBuffer);\n    });\n    await this.sendMessage([{ type: \"triggerVibration\", data: triggerVibrationData }], sendImmediately);\n  }\n}\n\nexport default VibrationManager;\n","import Device, { SendMessageCallback } from \"./Device.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport { isInNode } from \"./utils/environment.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { textDecoder, textEncoder } from \"./utils/Text.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"WifiManager\", { log: false });\n\nexport const MinWifiSSIDLength = 1;\nexport const MaxWifiSSIDLength = 32;\n\nexport const MinWifiPasswordLength = 8;\nexport const MaxWifiPasswordLength = 64;\n\nexport const WifiMessageTypes = [\n  \"isWifiAvailable\",\n  \"getWifiSSID\",\n  \"setWifiSSID\",\n  \"getWifiPassword\",\n  \"setWifiPassword\",\n  \"getEnableWifiConnection\",\n  \"setEnableWifiConnection\",\n  \"isWifiConnected\",\n  \"ipAddress\",\n  \"isWifiSecure\",\n] as const;\nexport type WifiMessageType = (typeof WifiMessageTypes)[number];\n\nexport const RequiredWifiMessageTypes: WifiMessageType[] = [\n  \"getWifiSSID\",\n  \"getWifiPassword\",\n  \"getEnableWifiConnection\",\n  \"isWifiConnected\",\n  \"ipAddress\",\n  \"isWifiSecure\",\n];\n\nexport const WifiEventTypes = WifiMessageTypes;\nexport type WifiEventType = (typeof WifiEventTypes)[number];\n\nexport interface WifiEventMessages {\n  isWifiAvailable: { isWifiAvailable: boolean };\n  getWifiSSID: { wifiSSID: string };\n  getWifiPassword: { wifiPassword: string };\n  getEnableWifiConnection: { wifiConnectionEnabled: boolean };\n  isWifiConnected: { isWifiConnected: boolean };\n  ipAddress: { ipAddress: string };\n}\n\nexport type WifiEventDispatcher = EventDispatcher<\n  Device,\n  WifiEventType,\n  WifiEventMessages\n>;\nexport type SendWifiMessageCallback = SendMessageCallback<WifiMessageType>;\n\nclass WifiManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendWifiMessageCallback;\n\n  eventDispatcher!: WifiEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  requestRequiredInformation() {\n    _console.log(\"requesting required wifi information\");\n    const messages = RequiredWifiMessageTypes.map((messageType) => ({\n      type: messageType,\n    }));\n    this.sendMessage(messages, false);\n  }\n\n  // PROPERTIES\n\n  #isWifiAvailable = false;\n  get isWifiAvailable() {\n    return this.#isWifiAvailable;\n  }\n  #updateIsWifiAvailable(updatedIsWifiAvailable: boolean) {\n    _console.assertTypeWithError(updatedIsWifiAvailable, \"boolean\");\n    this.#isWifiAvailable = updatedIsWifiAvailable;\n    _console.log({ isWifiAvailable: this.#isWifiAvailable });\n    this.#dispatchEvent(\"isWifiAvailable\", {\n      isWifiAvailable: this.#isWifiAvailable,\n    });\n  }\n\n  #assertWifiIsAvailable() {\n    _console.assertWithError(this.#isWifiAvailable, \"wifi is not available\");\n  }\n\n  // WIFI SSID\n  #wifiSSID = \"\";\n  get wifiSSID() {\n    return this.#wifiSSID;\n  }\n\n  #updateWifiSSID(updatedWifiSSID: string) {\n    _console.assertTypeWithError(updatedWifiSSID, \"string\");\n    this.#wifiSSID = updatedWifiSSID;\n    _console.log({ wifiSSID: this.#wifiSSID });\n    this.#dispatchEvent(\"getWifiSSID\", { wifiSSID: this.#wifiSSID });\n  }\n  async setWifiSSID(newWifiSSID: string) {\n    this.#assertWifiIsAvailable();\n    if (this.#wifiConnectionEnabled) {\n      _console.error(\"cannot change ssid while wifi connection is enabled\");\n      return;\n    }\n    _console.assertTypeWithError(newWifiSSID, \"string\");\n    _console.assertRangeWithError(\n      \"wifiSSID\",\n      newWifiSSID.length,\n      MinWifiSSIDLength,\n      MaxWifiSSIDLength\n    );\n\n    const setWifiSSIDData = textEncoder.encode(newWifiSSID);\n    _console.log({ setWifiSSIDData });\n\n    const promise = this.waitForEvent(\"getWifiSSID\");\n    this.sendMessage([{ type: \"setWifiSSID\", data: setWifiSSIDData.buffer }]);\n    await promise;\n  }\n\n  // WIFI PASSWORD\n  #wifiPassword = \"\";\n  get wifiPassword() {\n    return this.#wifiPassword;\n  }\n\n  #updateWifiPassword(updatedWifiPassword: string) {\n    _console.assertTypeWithError(updatedWifiPassword, \"string\");\n    this.#wifiPassword = updatedWifiPassword;\n    _console.log({ wifiPassword: this.#wifiPassword });\n    this.#dispatchEvent(\"getWifiPassword\", {\n      wifiPassword: this.#wifiPassword,\n    });\n  }\n  async setWifiPassword(newWifiPassword: string) {\n    this.#assertWifiIsAvailable();\n    if (this.#wifiConnectionEnabled) {\n      _console.error(\"cannot change password while wifi connection is enabled\");\n      return;\n    }\n    _console.assertTypeWithError(newWifiPassword, \"string\");\n    if (newWifiPassword.length > 0) {\n      _console.assertRangeWithError(\n        \"wifiPassword\",\n        newWifiPassword.length,\n        MinWifiPasswordLength,\n        MaxWifiPasswordLength\n      );\n    }\n\n    const setWifiPasswordData = textEncoder.encode(newWifiPassword);\n    _console.log({ setWifiPasswordData });\n\n    const promise = this.waitForEvent(\"getWifiPassword\");\n    this.sendMessage([\n      { type: \"setWifiPassword\", data: setWifiPasswordData.buffer },\n    ]);\n    await promise;\n  }\n\n  // ENABLE WIFI CONNECTION\n  #wifiConnectionEnabled!: boolean;\n  get wifiConnectionEnabled() {\n    return this.#wifiConnectionEnabled;\n  }\n  #updateWifiConnectionEnabled(wifiConnectionEnabled: boolean) {\n    _console.log({ wifiConnectionEnabled });\n    this.#wifiConnectionEnabled = wifiConnectionEnabled;\n    this.#dispatchEvent(\"getEnableWifiConnection\", {\n      wifiConnectionEnabled: wifiConnectionEnabled,\n    });\n  }\n  async setWifiConnectionEnabled(\n    newWifiConnectionEnabled: boolean,\n    sendImmediately: boolean = true\n  ) {\n    this.#assertWifiIsAvailable();\n    _console.assertTypeWithError(newWifiConnectionEnabled, \"boolean\");\n    if (this.#wifiConnectionEnabled == newWifiConnectionEnabled) {\n      _console.log(\n        `redundant wifiConnectionEnabled assignment ${newWifiConnectionEnabled}`\n      );\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getEnableWifiConnection\");\n    this.sendMessage(\n      [\n        {\n          type: \"setEnableWifiConnection\",\n          data: Uint8Array.from([Number(newWifiConnectionEnabled)]).buffer,\n        },\n      ],\n      sendImmediately\n    );\n    await promise;\n  }\n  async toggleWifiConnection() {\n    return this.setWifiConnectionEnabled(!this.wifiConnectionEnabled);\n  }\n  async enableWifiConnection() {\n    return this.setWifiConnectionEnabled(true);\n  }\n  async disableWifiConnection() {\n    return this.setWifiConnectionEnabled(false);\n  }\n\n  // IS WIFI CONNECTED\n  #isWifiConnected = false;\n  get isWifiConnected() {\n    return this.#isWifiConnected;\n  }\n  #updateIsWifiConnected(updatedIsWifiConnected: boolean) {\n    _console.assertTypeWithError(updatedIsWifiConnected, \"boolean\");\n    this.#isWifiConnected = updatedIsWifiConnected;\n    _console.log({ isWifiConnected: this.#isWifiConnected });\n    this.#dispatchEvent(\"isWifiConnected\", {\n      isWifiConnected: this.#isWifiConnected,\n    });\n  }\n\n  // IP ADDRESS\n  #ipAddress?: string;\n  get ipAddress() {\n    return this.#ipAddress;\n  }\n\n  #updateIpAddress(updatedIpAddress: string) {\n    _console.assertTypeWithError(updatedIpAddress, \"string\");\n    this.#ipAddress = updatedIpAddress;\n    _console.log({ ipAddress: this.#ipAddress });\n    this.#dispatchEvent(\"ipAddress\", {\n      ipAddress: this.#ipAddress,\n    });\n  }\n\n  // IS WIFI SECURE\n  #isWifiSecure = false;\n  get isWifiSecure() {\n    return this.#isWifiSecure;\n  }\n  #updateIsWifiSecure(updatedIsWifiSecure: boolean) {\n    _console.assertTypeWithError(updatedIsWifiSecure, \"boolean\");\n    this.#isWifiSecure = updatedIsWifiSecure;\n    _console.log({ isWifiSecure: this.#isWifiSecure });\n    this.#dispatchEvent(\"isWifiSecure\", {\n      isWifiSecure: this.#isWifiSecure,\n    });\n  }\n\n  // MESSAGE\n  parseMessage(messageType: WifiMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"isWifiAvailable\":\n        const isWifiAvailable = Boolean(dataView.getUint8(0));\n        _console.log({ isWifiAvailable });\n        this.#updateIsWifiAvailable(isWifiAvailable);\n        break;\n      case \"getWifiSSID\":\n      case \"setWifiSSID\":\n        const ssid = textDecoder.decode(dataView.buffer);\n        _console.log({ ssid });\n        this.#updateWifiSSID(ssid);\n        break;\n      case \"getWifiPassword\":\n      case \"setWifiPassword\":\n        const password = textDecoder.decode(dataView.buffer);\n        _console.log({ password });\n        this.#updateWifiPassword(password);\n        break;\n      case \"getEnableWifiConnection\":\n      case \"setEnableWifiConnection\":\n        const enableWifiConnection = Boolean(dataView.getUint8(0));\n        _console.log({ enableWifiConnection });\n        this.#updateWifiConnectionEnabled(enableWifiConnection);\n        break;\n      case \"isWifiConnected\":\n        const isWifiConnected = Boolean(dataView.getUint8(0));\n        _console.log({ isWifiConnected });\n        this.#updateIsWifiConnected(isWifiConnected);\n        break;\n      case \"ipAddress\":\n        const ipAddress = new Uint8Array(dataView.buffer.slice(0, 4)).join(\".\");\n        _console.log({ ipAddress });\n        this.#updateIpAddress(ipAddress);\n        break;\n      case \"isWifiSecure\":\n        const isWifiSecure = Boolean(dataView.getUint8(0));\n        _console.log({ isWifiSecure });\n        this.#updateIsWifiSecure(isWifiSecure);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  clear() {\n    this.#wifiSSID = \"\";\n    this.#wifiPassword = \"\";\n    this.#ipAddress = \"\";\n    this.#isWifiConnected = false;\n    this.#isWifiAvailable = false;\n  }\n}\n\nexport default WifiManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport Timer from \"../utils/Timer.ts\";\n\nimport { FileTransferMessageTypes } from \"../FileTransferManager.ts\";\nimport { TfliteMessageTypes } from \"../TfliteManager.ts\";\nimport { concatenateArrayBuffers } from \"../utils/ArrayBufferUtils.ts\";\nimport { parseMessage } from \"../utils/ParseUtils.ts\";\nimport { DeviceInformationTypes } from \"../DeviceInformationManager.ts\";\nimport { InformationMessageTypes } from \"../InformationManager.ts\";\nimport { VibrationMessageTypes } from \"../vibration/VibrationManager.ts\";\nimport { SensorConfigurationMessageTypes } from \"../sensor/SensorConfigurationManager.ts\";\nimport { SensorDataMessageTypes } from \"../sensor/SensorDataManager.ts\";\nimport { WifiMessageTypes } from \"../WifiManager.ts\";\n\nconst _console = createConsole(\"BaseConnectionManager\", { log: false });\n\nexport const ConnectionTypes = [\n  \"webBluetooth\",\n  \"noble\",\n  \"client\",\n  \"webSocket\",\n  \"udp\",\n] as const;\nexport type ConnectionType = (typeof ConnectionTypes)[number];\n\nexport const ClientConnectionTypes = [\"noble\", \"webSocket\", \"udp\"] as const;\nexport type ClientConnectionType = (typeof ClientConnectionTypes)[number];\n\ninterface BaseConnectOptions {\n  type: \"client\" | \"webBluetooth\" | \"webSocket\" | \"udp\";\n}\nexport interface WebBluetoothConnectOptions extends BaseConnectOptions {\n  type: \"webBluetooth\";\n}\ninterface BaseWifiConnectOptions extends BaseConnectOptions {\n  ipAddress: string;\n}\nexport interface ClientConnectOptions extends BaseConnectOptions {\n  type: \"client\";\n  subType?: \"noble\" | \"webSocket\" | \"udp\";\n}\nexport interface WebSocketConnectOptions extends BaseWifiConnectOptions {\n  type: \"webSocket\";\n  isWifiSecure?: boolean;\n}\nexport interface UDPConnectOptions extends BaseWifiConnectOptions {\n  type: \"udp\";\n  //sendPort: number;\n  receivePort?: number;\n}\nexport type ConnectOptions =\n  | WebBluetoothConnectOptions\n  | WebSocketConnectOptions\n  | UDPConnectOptions\n  | ClientConnectOptions;\n\nexport const ConnectionStatuses = [\n  \"notConnected\",\n  \"connecting\",\n  \"connected\",\n  \"disconnecting\",\n] as const;\nexport type ConnectionStatus = (typeof ConnectionStatuses)[number];\n\nexport const ConnectionEventTypes = [\n  ...ConnectionStatuses,\n  \"connectionStatus\",\n  \"isConnected\",\n] as const;\nexport type ConnectionEventType = (typeof ConnectionEventTypes)[number];\n\nexport interface ConnectionStatusEventMessages {\n  notConnected: any;\n  connecting: any;\n  connected: any;\n  disconnecting: any;\n  connectionStatus: { connectionStatus: ConnectionStatus };\n  isConnected: { isConnected: boolean };\n}\n\nexport interface TxMessage {\n  type: TxRxMessageType;\n  data?: ArrayBuffer;\n}\n\nexport const TxRxMessageTypes = [\n  ...InformationMessageTypes,\n  ...SensorConfigurationMessageTypes,\n  ...SensorDataMessageTypes,\n  ...VibrationMessageTypes,\n  ...TfliteMessageTypes,\n  ...FileTransferMessageTypes,\n  ...WifiMessageTypes,\n] as const;\nexport type TxRxMessageType = (typeof TxRxMessageTypes)[number];\n\nexport const SMPMessageTypes = [\"smp\"] as const;\nexport type SMPMessageType = (typeof SMPMessageTypes)[number];\n\nexport const BatteryLevelMessageTypes = [\"batteryLevel\"] as const;\nexport type BatteryLevelMessageType = (typeof BatteryLevelMessageTypes)[number];\n\nexport const MetaConnectionMessageTypes = [\"rx\", \"tx\"] as const;\nexport type MetaConnectionMessageType =\n  (typeof MetaConnectionMessageTypes)[number];\n\nexport const ConnectionMessageTypes = [\n  ...BatteryLevelMessageTypes,\n  ...DeviceInformationTypes,\n  ...MetaConnectionMessageTypes,\n  ...TxRxMessageTypes,\n  ...SMPMessageTypes,\n] as const;\nexport type ConnectionMessageType = (typeof ConnectionMessageTypes)[number];\n\nexport type ConnectionStatusCallback = (status: ConnectionStatus) => void;\nexport type MessageReceivedCallback = (\n  messageType: ConnectionMessageType,\n  dataView: DataView\n) => void;\nexport type MessagesReceivedCallback = () => void;\n\nabstract class BaseConnectionManager {\n  static #AssertValidTxRxMessageType(messageType: TxRxMessageType) {\n    _console.assertEnumWithError(messageType, TxRxMessageTypes);\n  }\n\n  abstract get bluetoothId(): string;\n\n  // CALLBACKS\n  onStatusUpdated?: ConnectionStatusCallback;\n  onMessageReceived?: MessageReceivedCallback;\n  onMessagesReceived?: MessagesReceivedCallback;\n\n  protected get baseConstructor() {\n    return this.constructor as typeof BaseConnectionManager;\n  }\n  static get isSupported() {\n    return false;\n  }\n  get isSupported() {\n    return this.baseConstructor.isSupported;\n  }\n\n  get canUpdateFirmware() {\n    return false;\n  }\n\n  static type: ConnectionType;\n  get type(): ConnectionType {\n    return this.baseConstructor.type;\n  }\n\n  /** @throws {Error} if not supported */\n  #assertIsSupported() {\n    _console.assertWithError(\n      this.isSupported,\n      `${this.constructor.name} is not supported`\n    );\n  }\n\n  constructor() {\n    this.#assertIsSupported();\n  }\n\n  #status: ConnectionStatus = \"notConnected\";\n  get status() {\n    return this.#status;\n  }\n  protected set status(newConnectionStatus) {\n    _console.assertEnumWithError(newConnectionStatus, ConnectionStatuses);\n    if (this.#status == newConnectionStatus) {\n      _console.log(\n        `tried to assign same connection status \"${newConnectionStatus}\"`\n      );\n      return;\n    }\n    _console.log(`new connection status \"${newConnectionStatus}\"`);\n    this.#status = newConnectionStatus;\n    this.onStatusUpdated!(this.status);\n\n    if (this.isConnected) {\n      this.#timer.start();\n    } else {\n      this.#timer.stop();\n    }\n\n    if (this.#status == \"notConnected\") {\n      this.mtu = this.defaultMtu;\n    }\n  }\n\n  get isConnected() {\n    return this.status == \"connected\";\n  }\n\n  get isAvailable() {\n    return false;\n  }\n\n  /** @throws {Error} if connected */\n  protected assertIsNotConnected() {\n    _console.assertWithError(!this.isConnected, \"device is already connected\");\n  }\n  /** @throws {Error} if connecting */\n  #assertIsNotConnecting() {\n    _console.assertWithError(\n      this.status != \"connecting\",\n      \"device is already connecting\"\n    );\n  }\n  /** @throws {Error} if not connected */\n  protected assertIsConnected() {\n    _console.assertWithError(this.isConnected, \"device is not connected\");\n  }\n  /** @throws {Error} if disconnecting */\n  #assertIsNotDisconnecting() {\n    _console.assertWithError(\n      this.status != \"disconnecting\",\n      \"device is already disconnecting\"\n    );\n  }\n  /** @throws {Error} if not connected or is disconnecting */\n  assertIsConnectedAndNotDisconnecting() {\n    this.assertIsConnected();\n    this.#assertIsNotDisconnecting();\n  }\n\n  async connect() {\n    this.assertIsNotConnected();\n    this.#assertIsNotConnecting();\n    this.status = \"connecting\";\n  }\n  get canReconnect() {\n    return false;\n  }\n  async reconnect() {\n    this.assertIsNotConnected();\n    this.#assertIsNotConnecting();\n    _console.assertWithError(this.canReconnect, \"unable to reconnect\");\n    this.status = \"connecting\";\n    _console.log(\"attempting to reconnect...\");\n  }\n  async disconnect() {\n    this.assertIsConnected();\n    this.#assertIsNotDisconnecting();\n    this.status = \"disconnecting\";\n    _console.log(\"disconnecting from device...\");\n  }\n\n  async sendSmpMessage(data: ArrayBuffer) {\n    this.assertIsConnectedAndNotDisconnecting();\n    _console.log(\"sending smp message\", data);\n  }\n\n  #pendingMessages: TxMessage[] = [];\n  #isSendingMessages = false;\n  async sendTxMessages(\n    messages: TxMessage[] | undefined,\n    sendImmediately: boolean = true\n  ) {\n    this.assertIsConnectedAndNotDisconnecting();\n\n    if (messages) {\n      this.#pendingMessages.push(...messages);\n      _console.log(`appended ${messages.length} messages`);\n    }\n\n    if (!sendImmediately) {\n      _console.log(\"not sending immediately - waiting until later\");\n      return;\n    }\n\n    if (this.#isSendingMessages) {\n      _console.log(\"already sending messages - waiting until later\");\n      return;\n    }\n    this.#isSendingMessages = true;\n\n    _console.log(\"sendTxMessages\", this.#pendingMessages.slice());\n\n    const arrayBuffers = this.#pendingMessages.map((message) => {\n      BaseConnectionManager.#AssertValidTxRxMessageType(message.type);\n      const messageTypeEnum = TxRxMessageTypes.indexOf(message.type);\n      const dataLength = new DataView(new ArrayBuffer(2));\n      dataLength.setUint16(0, message.data?.byteLength || 0, true);\n      return concatenateArrayBuffers(messageTypeEnum, dataLength, message.data);\n    });\n    this.#pendingMessages.length = 0;\n\n    if (this.mtu) {\n      while (arrayBuffers.length > 0) {\n        if (\n          arrayBuffers.every(\n            (arrayBuffer) => arrayBuffer.byteLength > this.mtu! - 3\n          )\n        ) {\n          _console.log(\"every arrayBuffer is too big to send\");\n          break;\n        }\n        _console.log(\"remaining arrayBuffers.length\", arrayBuffers.length);\n        let arrayBufferByteLength = 0;\n        let arrayBufferCount = 0;\n        arrayBuffers.some((arrayBuffer) => {\n          if (arrayBufferByteLength + arrayBuffer.byteLength > this.mtu! - 3) {\n            _console.log(\n              `stopping appending arrayBuffers ( length ${arrayBuffer.byteLength} too much)`\n            );\n            return true;\n          }\n          _console.log(\n            `allowing arrayBuffer with length ${arrayBuffer.byteLength}`\n          );\n          arrayBufferCount++;\n          arrayBufferByteLength += arrayBuffer.byteLength;\n        });\n        const arrayBuffersToSend = arrayBuffers.splice(0, arrayBufferCount);\n        _console.log({ arrayBufferCount, arrayBuffersToSend });\n\n        const arrayBuffer = concatenateArrayBuffers(...arrayBuffersToSend);\n        _console.log(\"sending arrayBuffer (partitioned)\", arrayBuffer);\n        await this.sendTxData(arrayBuffer);\n      }\n    } else {\n      const arrayBuffer = concatenateArrayBuffers(...arrayBuffers);\n      _console.log(\"sending arrayBuffer (all)\", arrayBuffer);\n      await this.sendTxData(arrayBuffer);\n    }\n\n    this.#isSendingMessages = false;\n  }\n\n  protected defaultMtu = 23;\n  //mtu?: number;\n  mtu?: number = this.defaultMtu;\n\n  async sendTxData(data: ArrayBuffer) {\n    _console.log(\"sendTxData\", data);\n  }\n\n  parseRxMessage(dataView: DataView) {\n    parseMessage(\n      dataView,\n      TxRxMessageTypes,\n      this.#onRxMessage.bind(this),\n      null,\n      true\n    );\n    this.onMessagesReceived!();\n  }\n\n  #onRxMessage(messageType: TxRxMessageType, dataView: DataView) {\n    _console.log({ messageType, dataView });\n    this.onMessageReceived!(messageType, dataView);\n  }\n\n  #timer = new Timer(this.#checkConnection.bind(this), 5000);\n  #checkConnection() {\n    //console.log(\"checking connection...\");\n    if (!this.isConnected) {\n      _console.log(\"timer detected disconnection\");\n      this.status = \"notConnected\";\n    }\n  }\n\n  clear() {\n    this.#isSendingMessages = false;\n    this.#pendingMessages.length = 0;\n  }\n}\n\nexport default BaseConnectionManager;\n","import { createConsole } from \"./Console.ts\";\nimport { spacesToPascalCase } from \"./stringUtils.ts\";\n\nconst _console = createConsole(\"EventUtils\", { log: false });\n\ntype BoundEventListeners = { [eventType: string]: EventListener };\nexport type BoundGenericEventListeners = { [eventType: string]: Function };\n\nexport function bindEventListeners(\n  eventTypes: readonly string[],\n  boundEventListeners: BoundGenericEventListeners,\n  target: any\n) {\n  _console.log(\"bindEventListeners\", { eventTypes, boundEventListeners, target });\n  eventTypes.forEach((eventType) => {\n    const _eventType = `_on${spacesToPascalCase(eventType)}`;\n    _console.assertWithError(target[_eventType], `no event \"${_eventType}\" found in target`);\n    _console.log(`binding eventType \"${eventType}\" as ${_eventType} from target`, target);\n    const boundEvent = target[_eventType].bind(target);\n    target[_eventType] = boundEvent;\n    boundEventListeners[eventType] = boundEvent;\n  });\n}\n\nexport function addEventListeners(target: any, boundEventListeners: BoundGenericEventListeners) {\n  let addEventListener = target.addEventListener || target.addListener || target.on || target.AddEventListener;\n  _console.assertWithError(addEventListener, \"no add listener function found for target\");\n  addEventListener = addEventListener.bind(target);\n  Object.entries(boundEventListeners).forEach(([eventType, eventListener]) => {\n    addEventListener(eventType, eventListener);\n  });\n}\n\nexport function removeEventListeners(target: any, boundEventListeners: BoundGenericEventListeners) {\n  let removeEventListener = target.removeEventListener || target.removeListener || target.RemoveEventListener;\n  _console.assertWithError(removeEventListener, \"no remove listener function found for target\");\n  removeEventListener = removeEventListener.bind(target);\n  Object.entries(boundEventListeners).forEach(([eventType, eventListener]) => {\n    removeEventListener(eventType, eventListener);\n  });\n}\n","import { isInBrowser, isInNode } from \"../../utils/environment.ts\";\nimport { createConsole } from \"../../utils/Console.ts\";\n\nconst _console = createConsole(\"bluetoothUUIDs\", { log: false });\n\n/** NODE_START */\nimport * as webbluetooth from \"webbluetooth\";\nvar BluetoothUUID = webbluetooth.BluetoothUUID;\n/** NODE_END */\n/** BROWSER_START */\nif (isInBrowser) {\n  var BluetoothUUID = window.BluetoothUUID;\n}\n/** BROWSER_END */\n\nfunction generateBluetoothUUID(value: string): BluetoothServiceUUID {\n  _console.assertTypeWithError(value, \"string\");\n  _console.assertWithError(\n    value.length == 4,\n    \"value must be 4 characters long\"\n  );\n  return `ea6da725-${value}-4f9b-893d-c3913e33b39f`;\n}\n\nfunction stringToCharacteristicUUID(\n  identifier: string\n): BluetoothCharacteristicUUID {\n  return BluetoothUUID?.getCharacteristic?.(identifier);\n}\n\nfunction stringToServiceUUID(identifier: string): BluetoothServiceUUID {\n  return BluetoothUUID?.getService?.(identifier);\n}\n\nexport type BluetoothServiceName =\n  | \"deviceInformation\"\n  | \"battery\"\n  | \"main\"\n  | \"smp\";\nimport { DeviceInformationType } from \"../../DeviceInformationManager.ts\";\nexport type BluetoothCharacteristicName =\n  | DeviceInformationType\n  | \"batteryLevel\"\n  | \"rx\"\n  | \"tx\"\n  | \"smp\";\n\ninterface BluetoothCharacteristicInformation {\n  uuid: BluetoothCharacteristicUUID;\n}\ninterface BluetoothServiceInformation {\n  uuid: BluetoothServiceUUID;\n  characteristics: {\n    [characteristicName in BluetoothCharacteristicName]?: BluetoothCharacteristicInformation;\n  };\n}\ninterface BluetoothServicesInformation {\n  services: {\n    [serviceName in BluetoothServiceName]: BluetoothServiceInformation;\n  };\n}\nconst bluetoothUUIDs: BluetoothServicesInformation = Object.freeze({\n  services: {\n    deviceInformation: {\n      uuid: stringToServiceUUID(\"device_information\"),\n      characteristics: {\n        manufacturerName: {\n          uuid: stringToCharacteristicUUID(\"manufacturer_name_string\"),\n        },\n        modelNumber: {\n          uuid: stringToCharacteristicUUID(\"model_number_string\"),\n        },\n        hardwareRevision: {\n          uuid: stringToCharacteristicUUID(\"hardware_revision_string\"),\n        },\n        firmwareRevision: {\n          uuid: stringToCharacteristicUUID(\"firmware_revision_string\"),\n        },\n        softwareRevision: {\n          uuid: stringToCharacteristicUUID(\"software_revision_string\"),\n        },\n        pnpId: {\n          uuid: stringToCharacteristicUUID(\"pnp_id\"),\n        },\n        serialNumber: {\n          uuid: stringToCharacteristicUUID(\"serial_number_string\"),\n        },\n      },\n    },\n    battery: {\n      uuid: stringToServiceUUID(\"battery_service\"),\n      characteristics: {\n        batteryLevel: {\n          uuid: stringToCharacteristicUUID(\"battery_level\"),\n        },\n      },\n    },\n    main: {\n      uuid: generateBluetoothUUID(\"0000\"),\n      characteristics: {\n        rx: { uuid: generateBluetoothUUID(\"1000\") },\n        tx: { uuid: generateBluetoothUUID(\"1001\") },\n      },\n    },\n    smp: {\n      uuid: \"8d53dc1d-1db7-4cd3-868b-8a527460aa84\",\n      characteristics: {\n        smp: { uuid: \"da2e7828-fbce-4e01-ae9e-261174997c48\" },\n      },\n    },\n  },\n});\n\nexport const serviceUUIDs = [bluetoothUUIDs.services.main.uuid];\nexport const optionalServiceUUIDs = [\n  bluetoothUUIDs.services.deviceInformation.uuid,\n  bluetoothUUIDs.services.battery.uuid,\n  bluetoothUUIDs.services.smp.uuid,\n];\nexport const allServiceUUIDs = [...serviceUUIDs, ...optionalServiceUUIDs];\n\nexport function getServiceNameFromUUID(\n  serviceUUID: BluetoothServiceUUID\n): BluetoothServiceName | undefined {\n  serviceUUID = serviceUUID.toString().toLowerCase();\n  const serviceNames = Object.keys(\n    bluetoothUUIDs.services\n  ) as BluetoothServiceName[];\n  return serviceNames.find((serviceName) => {\n    const serviceInfo = bluetoothUUIDs.services[serviceName];\n    let serviceInfoUUID = serviceInfo.uuid.toString();\n    if (serviceUUID.length == 4) {\n      serviceInfoUUID = serviceInfoUUID.slice(4, 8);\n    }\n    if (!serviceUUID.includes(\"-\")) {\n      serviceInfoUUID = serviceInfoUUID.replaceAll(\"-\", \"\");\n    }\n    return serviceUUID == serviceInfoUUID;\n  });\n}\n\nexport const characteristicUUIDs: BluetoothCharacteristicUUID[] = [];\nexport const allCharacteristicUUIDs: BluetoothCharacteristicUUID[] = [];\n\nexport const characteristicNames: BluetoothCharacteristicName[] = [];\nexport const allCharacteristicNames: BluetoothCharacteristicName[] = [];\n\nObject.values(bluetoothUUIDs.services).forEach((serviceInfo) => {\n  if (!serviceInfo.characteristics) {\n    return;\n  }\n  const characteristicNames = Object.keys(\n    serviceInfo.characteristics\n  ) as BluetoothCharacteristicName[];\n  characteristicNames.forEach((characteristicName) => {\n    const characteristicInfo = serviceInfo.characteristics[characteristicName]!;\n    if (serviceUUIDs.includes(serviceInfo.uuid)) {\n      characteristicUUIDs.push(characteristicInfo.uuid);\n      characteristicNames.push(characteristicName);\n    }\n    allCharacteristicUUIDs.push(characteristicInfo.uuid);\n    allCharacteristicNames.push(characteristicName);\n  });\n}, []);\n\n//_console.log({ characteristicUUIDs, allCharacteristicUUIDs });\n\nexport function getCharacteristicNameFromUUID(\n  characteristicUUID: BluetoothCharacteristicUUID\n): BluetoothCharacteristicName | undefined {\n  //_console.log({ characteristicUUID });\n  characteristicUUID = characteristicUUID.toString().toLowerCase();\n  var characteristicName: BluetoothCharacteristicName | undefined;\n  Object.values(bluetoothUUIDs.services).some((serviceInfo) => {\n    const characteristicNames = Object.keys(\n      serviceInfo.characteristics\n    ) as BluetoothCharacteristicName[];\n    characteristicName = characteristicNames.find((_characteristicName) => {\n      const characteristicInfo =\n        serviceInfo.characteristics[_characteristicName]!;\n      let characteristicInfoUUID = characteristicInfo.uuid.toString();\n      if (characteristicUUID.length == 4) {\n        characteristicInfoUUID = characteristicInfoUUID.slice(4, 8);\n      }\n      if (!characteristicUUID.includes(\"-\")) {\n        characteristicInfoUUID = characteristicInfoUUID.replaceAll(\"-\", \"\");\n      }\n      return characteristicUUID == characteristicInfoUUID;\n    });\n    return characteristicName;\n  });\n  return characteristicName;\n}\n\nexport function getCharacteristicProperties(\n  characteristicName: BluetoothCharacteristicName\n): BluetoothCharacteristicProperties {\n  const properties = {\n    broadcast: false,\n    read: true,\n    writeWithoutResponse: false,\n    write: false,\n    notify: false,\n    indicate: false,\n    authenticatedSignedWrites: false,\n    reliableWrite: false,\n    writableAuxiliaries: false,\n  };\n\n  // read\n  switch (characteristicName) {\n    case \"rx\":\n    case \"tx\":\n    case \"smp\":\n      properties.read = false;\n      break;\n  }\n\n  // notify\n  switch (characteristicName) {\n    case \"batteryLevel\":\n    case \"rx\":\n    case \"smp\":\n      properties.notify = true;\n      break;\n  }\n\n  // write without response\n  switch (characteristicName) {\n    case \"smp\":\n      properties.writeWithoutResponse = true;\n      break;\n  }\n\n  // write\n  switch (characteristicName) {\n    case \"tx\":\n      properties.write = true;\n      break;\n  }\n\n  return properties;\n}\n\nexport const serviceDataUUID = \"0000\";\n","import { createConsole } from \"../../utils/Console.ts\";\nimport BaseConnectionManager from \"../BaseConnectionManager.ts\";\n\nconst _console = createConsole(\"BluetoothConnectionManager\", { log: false });\n\nimport { BluetoothCharacteristicName } from \"./bluetoothUUIDs.ts\";\n\nabstract class BluetoothConnectionManager extends BaseConnectionManager {\n  get isAvailable() {\n    // no way to tell if the user has turned bluetooth on or off\n    return true;\n  }\n\n  isInRange = true;\n\n  protected onCharacteristicValueChanged(characteristicName: BluetoothCharacteristicName, dataView: DataView) {\n    if (characteristicName == \"rx\") {\n      this.parseRxMessage(dataView);\n    } else {\n      this.onMessageReceived?.(characteristicName, dataView);\n    }\n  }\n\n  protected async writeCharacteristic(characteristicName: BluetoothCharacteristicName, data: ArrayBuffer) {\n    _console.log(\"writeCharacteristic\", ...arguments);\n  }\n\n  async sendSmpMessage(data: ArrayBuffer) {\n    super.sendSmpMessage(data);\n    await this.writeCharacteristic(\"smp\", data);\n  }\n\n  async sendTxData(data: ArrayBuffer) {\n    super.sendTxData(data);\n    if (data.byteLength == 0) {\n      return;\n    }\n    await this.writeCharacteristic(\"tx\", data);\n  }\n}\n\nexport default BluetoothConnectionManager;\n","import { createConsole } from \"../../utils/Console.ts\";\nimport {\n  isInNode,\n  isInBrowser,\n  isInBluefy,\n  isInWebBLE,\n} from \"../../utils/environment.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../../utils/EventUtils.ts\";\nimport {\n  serviceUUIDs,\n  optionalServiceUUIDs,\n  getServiceNameFromUUID,\n  getCharacteristicNameFromUUID,\n  getCharacteristicProperties,\n} from \"./bluetoothUUIDs.ts\";\nimport BluetoothConnectionManager from \"./BluetoothConnectionManager.ts\";\nimport {\n  BluetoothCharacteristicName,\n  BluetoothServiceName,\n} from \"./bluetoothUUIDs.ts\";\nimport { ConnectionType } from \"../BaseConnectionManager.ts\";\n\nconst _console = createConsole(\"WebBluetoothConnectionManager\", { log: false });\n\ntype WebBluetoothInterface = webbluetooth.Bluetooth | Bluetooth;\n\ninterface BluetoothService extends BluetoothRemoteGATTService {\n  name?: BluetoothServiceName;\n}\ninterface BluetoothCharacteristic extends BluetoothRemoteGATTCharacteristic {\n  name?: BluetoothCharacteristicName;\n}\n\nvar bluetooth: WebBluetoothInterface | undefined;\n/** NODE_START */\nimport * as webbluetooth from \"webbluetooth\";\nif (isInNode) {\n  bluetooth = webbluetooth.bluetooth;\n}\n/** NODE_END */\n\n/** BROWSER_START */\nif (isInBrowser) {\n  bluetooth = window.navigator.bluetooth;\n}\n/** BROWSER_END */\n\nclass WebBluetoothConnectionManager extends BluetoothConnectionManager {\n  get bluetoothId() {\n    return this.device!.id;\n  }\n\n  get canUpdateFirmware() {\n    return this.#characteristics.has(\"smp\");\n  }\n\n  #boundBluetoothCharacteristicEventListeners: {\n    [eventType: string]: EventListener;\n  } = {\n    characteristicvaluechanged: this.#onCharacteristicvaluechanged.bind(this),\n  };\n  #boundBluetoothDeviceEventListeners: { [eventType: string]: EventListener } =\n    {\n      gattserverdisconnected: this.#onGattserverdisconnected.bind(this),\n    };\n\n  static get isSupported() {\n    return Boolean(bluetooth);\n  }\n  static get type(): ConnectionType {\n    return \"webBluetooth\";\n  }\n\n  #device!: BluetoothDevice | undefined;\n  get device() {\n    return this.#device;\n  }\n  set device(newDevice) {\n    if (this.#device == newDevice) {\n      _console.log(\"tried to assign the same BluetoothDevice\");\n      return;\n    }\n    if (this.#device) {\n      removeEventListeners(\n        this.#device,\n        this.#boundBluetoothDeviceEventListeners\n      );\n    }\n    if (newDevice) {\n      addEventListeners(newDevice, this.#boundBluetoothDeviceEventListeners);\n    }\n    this.#device = newDevice;\n  }\n\n  get server(): BluetoothRemoteGATTServer | undefined {\n    return this.#device?.gatt;\n  }\n  get isConnected() {\n    return this.server?.connected || false;\n  }\n\n  #services: Map<BluetoothServiceName, BluetoothService> = new Map();\n  #characteristics: Map<BluetoothCharacteristicName, BluetoothCharacteristic> =\n    new Map();\n\n  async connect() {\n    await super.connect();\n\n    try {\n      const device = await bluetooth!.requestDevice({\n        filters: [{ services: serviceUUIDs }],\n        optionalServices: isInBrowser ? optionalServiceUUIDs : [],\n      });\n\n      _console.log(\"got BluetoothDevice\");\n      this.device = device;\n\n      _console.log(\"connecting to device...\");\n      const server = await this.server!.connect();\n      _console.log(`connected to device? ${server.connected}`);\n\n      await this.#getServicesAndCharacteristics();\n\n      _console.log(\"fully connected\");\n\n      this.status = \"connected\";\n    } catch (error) {\n      _console.error(error);\n      this.status = \"notConnected\";\n      this.server?.disconnect();\n      this.#removeEventListeners();\n    }\n  }\n  async #getServicesAndCharacteristics() {\n    this.#removeEventListeners();\n\n    _console.log(\"getting services...\");\n    const services = await this.server!.getPrimaryServices();\n    _console.log(\"got services\", services.length);\n    //const service = await this.server!.getPrimaryService(\"8d53dc1d-1db7-4cd3-868b-8a527460aa84\");\n\n    _console.log(\"getting characteristics...\");\n    for (const serviceIndex in services) {\n      const service = services[serviceIndex] as BluetoothService;\n      _console.log({ service });\n      const serviceName = getServiceNameFromUUID(service.uuid)!;\n      _console.assertWithError(\n        serviceName,\n        `no name found for service uuid \"${service.uuid}\"`\n      );\n      _console.log(`got \"${serviceName}\" service`);\n      service.name = serviceName;\n      this.#services.set(serviceName, service);\n      _console.log(`getting characteristics for \"${serviceName}\" service`);\n      const characteristics = await service.getCharacteristics();\n      _console.log(`got characteristics for \"${serviceName}\" service`);\n      for (const characteristicIndex in characteristics) {\n        const characteristic = characteristics[\n          characteristicIndex\n        ] as BluetoothCharacteristic;\n        _console.log({ characteristic });\n        const characteristicName = getCharacteristicNameFromUUID(\n          characteristic.uuid\n        )!;\n        _console.assertWithError(\n          Boolean(characteristicName),\n          `no name found for characteristic uuid \"${characteristic.uuid}\" in \"${serviceName}\" service`\n        );\n        _console.log(\n          `got \"${characteristicName}\" characteristic in \"${serviceName}\" service`\n        );\n        characteristic.name = characteristicName;\n        this.#characteristics.set(characteristicName, characteristic);\n        addEventListeners(\n          characteristic,\n          this.#boundBluetoothCharacteristicEventListeners\n        );\n        const characteristicProperties =\n          characteristic.properties ||\n          getCharacteristicProperties(characteristicName);\n        if (characteristicProperties.notify) {\n          _console.log(\n            `starting notifications for \"${characteristicName}\" characteristic`\n          );\n          await characteristic.startNotifications();\n        }\n        if (characteristicProperties.read) {\n          _console.log(`reading \"${characteristicName}\" characteristic...`);\n          await characteristic.readValue();\n          if (isInBluefy || isInWebBLE) {\n            this.#onCharacteristicValueChanged(characteristic);\n          }\n        }\n      }\n    }\n  }\n  async #removeEventListeners() {\n    if (this.device) {\n      removeEventListeners(\n        this.device,\n        this.#boundBluetoothDeviceEventListeners\n      );\n    }\n\n    const promises = Array.from(this.#characteristics.keys()).map(\n      (characteristicName) => {\n        const characteristic = this.#characteristics.get(characteristicName)!;\n        removeEventListeners(\n          characteristic,\n          this.#boundBluetoothCharacteristicEventListeners\n        );\n        const characteristicProperties =\n          characteristic.properties ||\n          getCharacteristicProperties(characteristicName);\n        if (characteristicProperties.notify) {\n          _console.log(\n            `stopping notifications for \"${characteristicName}\" characteristic`\n          );\n          return characteristic.stopNotifications();\n        }\n      }\n    );\n\n    return Promise.allSettled(promises);\n  }\n  async disconnect() {\n    await this.#removeEventListeners();\n    await super.disconnect();\n    this.server?.disconnect();\n    this.status = \"notConnected\";\n  }\n\n  #onCharacteristicvaluechanged(event: Event) {\n    _console.log(\"oncharacteristicvaluechanged\");\n\n    const characteristic = event.target as BluetoothCharacteristic;\n    this.#onCharacteristicValueChanged(characteristic);\n  }\n\n  #onCharacteristicValueChanged(characteristic: BluetoothCharacteristic) {\n    _console.log(\"onCharacteristicValue\");\n\n    const characteristicName = characteristic.name!;\n    _console.assertWithError(\n      Boolean(characteristicName),\n      `no name found for characteristic with uuid \"${characteristic.uuid}\"`\n    );\n\n    _console.log(\n      `oncharacteristicvaluechanged for \"${characteristicName}\" characteristic`\n    );\n    const dataView = characteristic.value!;\n    _console.assertWithError(\n      dataView,\n      `no data found for \"${characteristicName}\" characteristic`\n    );\n    _console.log(\n      `data for \"${characteristicName}\" characteristic`,\n      Array.from(new Uint8Array(dataView.buffer))\n    );\n\n    try {\n      this.onCharacteristicValueChanged(characteristicName, dataView);\n    } catch (error) {\n      _console.error(error);\n    }\n  }\n\n  async writeCharacteristic(\n    characteristicName: BluetoothCharacteristicName,\n    data: ArrayBuffer\n  ) {\n    super.writeCharacteristic(characteristicName, data);\n\n    const characteristic = this.#characteristics.get(characteristicName)!;\n    _console.assertWithError(\n      characteristic,\n      `${characteristicName} characteristic not found`\n    );\n    _console.log(\"writing characteristic\", characteristic, data);\n    const characteristicProperties =\n      characteristic.properties ||\n      getCharacteristicProperties(characteristicName);\n    if (characteristicProperties.writeWithoutResponse) {\n      _console.log(\"writing without response\");\n      await characteristic.writeValueWithoutResponse(data);\n    } else {\n      _console.log(\"writing with response\");\n      await characteristic.writeValueWithResponse(data);\n    }\n    _console.log(\"wrote characteristic\");\n\n    if (characteristicProperties.read && !characteristicProperties.notify) {\n      _console.log(\"reading value after write...\");\n      await characteristic.readValue();\n      if (isInBluefy || isInWebBLE) {\n        this.#onCharacteristicValueChanged(characteristic);\n      }\n    }\n  }\n\n  #onGattserverdisconnected() {\n    _console.log(\"gattserverdisconnected\");\n    this.status = \"notConnected\";\n  }\n\n  get canReconnect() {\n    return Boolean(this.server && !this.server.connected && this.isInRange);\n  }\n  async reconnect() {\n    await super.reconnect();\n    try {\n      await this.server!.connect();\n    } catch (error) {\n      _console.error(error);\n      this.isInRange = false;\n    }\n\n    if (this.isConnected) {\n      _console.log(\"successfully reconnected!\");\n      await this.#getServicesAndCharacteristics();\n      this.status = \"connected\";\n    } else {\n      _console.log(\"unable to reconnect\");\n      this.status = \"notConnected\";\n    }\n  }\n}\n\nexport default WebBluetoothConnectionManager;\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst POW_2_24 = 5.960464477539063e-8;\nconst POW_2_32 = 4294967296;\nconst POW_2_53 = 9007199254740992;\n\nexport function encode(value) {\n  let data = new ArrayBuffer(256);\n  let dataView = new DataView(data);\n  let lastLength;\n  let offset = 0;\n\n  function prepareWrite(length) {\n    let newByteLength = data.byteLength;\n    const requiredLength = offset + length;\n    while (newByteLength < requiredLength) {\n      newByteLength <<= 1;\n    }\n    if (newByteLength !== data.byteLength) {\n      const oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      const uint32count = (offset + 3) >> 2;\n      for (let i = 0; i < uint32count; ++i) {\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n      }\n    }\n\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite() {\n    offset += lastLength;\n  }\n  function writeFloat64(value) {\n    commitWrite(prepareWrite(8).setFloat64(offset, value));\n  }\n  function writeUint8(value) {\n    commitWrite(prepareWrite(1).setUint8(offset, value));\n  }\n  function writeUint8Array(value) {\n    const dataView = prepareWrite(value.length);\n    for (let i = 0; i < value.length; ++i) {\n      dataView.setUint8(offset + i, value[i]);\n    }\n    commitWrite();\n  }\n  function writeUint16(value) {\n    commitWrite(prepareWrite(2).setUint16(offset, value));\n  }\n  function writeUint32(value) {\n    commitWrite(prepareWrite(4).setUint32(offset, value));\n  }\n  function writeUint64(value) {\n    const low = value % POW_2_32;\n    const high = (value - low) / POW_2_32;\n    const dataView = prepareWrite(8);\n    dataView.setUint32(offset, high);\n    dataView.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeTypeAndLength(type, length) {\n    if (length < 24) {\n      writeUint8((type << 5) | length);\n    } else if (length < 0x100) {\n      writeUint8((type << 5) | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8((type << 5) | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8((type << 5) | 26);\n      writeUint32(length);\n    } else {\n      writeUint8((type << 5) | 27);\n      writeUint64(length);\n    }\n  }\n\n  function encodeItem(value) {\n    let i;\n    const utf8data = [];\n    let length;\n\n    if (value === false) {\n      return writeUint8(0xf4);\n    }\n    if (value === true) {\n      return writeUint8(0xf5);\n    }\n    if (value === null) {\n      return writeUint8(0xf6);\n    }\n    if (value === undefined) {\n      return writeUint8(0xf7);\n    }\n\n    switch (typeof value) {\n      case \"number\":\n        if (Math.floor(value) === value) {\n          if (value >= 0 && value <= POW_2_53) {\n            return writeTypeAndLength(0, value);\n          }\n          if (-POW_2_53 <= value && value < 0) {\n            return writeTypeAndLength(1, -(value + 1));\n          }\n        }\n        writeUint8(0xfb);\n        return writeFloat64(value);\n\n      case \"string\":\n        for (i = 0; i < value.length; ++i) {\n          let charCode = value.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | (charCode >> 6));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else if (charCode < 0xd800) {\n            utf8data.push(0xe0 | (charCode >> 12));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= value.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n\n            utf8data.push(0xf0 | (charCode >> 18));\n            utf8data.push(0x80 | ((charCode >> 12) & 0x3f));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n\n      default:\n        if (Array.isArray(value)) {\n          length = value.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; ++i) {\n            encodeItem(value[i]);\n          }\n        } else if (value instanceof Uint8Array) {\n          writeTypeAndLength(2, value.length);\n          writeUint8Array(value);\n        } else {\n          const keys = Object.keys(value);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; ++i) {\n            const key = keys[i];\n            encodeItem(key);\n            encodeItem(value[key]);\n          }\n        }\n    }\n  }\n\n  encodeItem(value);\n\n  if (\"slice\" in data) {\n    return data.slice(0, offset);\n  }\n\n  const ret = new ArrayBuffer(offset);\n  const retView = new DataView(ret);\n  for (let i = 0; i < offset; ++i) {\n    retView.setUint8(i, dataView.getUint8(i));\n  }\n  return ret;\n}\n\nexport function decode(data, tagger, simpleValue) {\n  const dataView = new DataView(data);\n  let offset = 0;\n\n  if (typeof tagger !== \"function\") {\n    tagger = function (value) {\n      return value;\n    };\n  }\n  if (typeof simpleValue !== \"function\") {\n    simpleValue = function () {\n      return undefined;\n    };\n  }\n\n  function commitRead(length, value) {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    const tempArrayBuffer = new ArrayBuffer(4);\n    const tempDataView = new DataView(tempArrayBuffer);\n    const value = readUint16();\n\n    const sign = value & 0x8000;\n    let exponent = value & 0x7c00;\n    const fraction = value & 0x03ff;\n\n    if (exponent === 0x7c00) {\n      exponent = 0xff << 10;\n    } else if (exponent !== 0) {\n      exponent += (127 - 15) << 10;\n    } else if (fraction !== 0) {\n      return (sign ? -1 : 1) * fraction * POW_2_24;\n    }\n\n    tempDataView.setUint32(0, (sign << 16) | (exponent << 13) | (fraction << 13));\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32() {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64() {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8() {\n    return commitRead(1, dataView.getUint8(offset));\n  }\n  function readUint16() {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32() {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64() {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak() {\n    if (dataView.getUint8(offset) !== 0xff) {\n      return false;\n    }\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation) {\n    if (additionalInformation < 24) {\n      return additionalInformation;\n    }\n    if (additionalInformation === 24) {\n      return readUint8();\n    }\n    if (additionalInformation === 25) {\n      return readUint16();\n    }\n    if (additionalInformation === 26) {\n      return readUint32();\n    }\n    if (additionalInformation === 27) {\n      return readUint64();\n    }\n    if (additionalInformation === 31) {\n      return -1;\n    }\n    throw new Error(\"Invalid length encoding\");\n  }\n  function readIndefiniteStringLength(majorType) {\n    const initialByte = readUint8();\n    if (initialByte === 0xff) {\n      return -1;\n    }\n    const length = readLength(initialByte & 0x1f);\n    if (length < 0 || initialByte >> 5 !== majorType) {\n      throw new Error(\"Invalid indefinite length element\");\n    }\n    return length;\n  }\n\n  function appendUtf16Data(utf16data, length) {\n    for (let i = 0; i < length; ++i) {\n      let value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = ((value & 0x1f) << 6) | (readUint8() & 0x3f);\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = ((value & 0x0f) << 12) | ((readUint8() & 0x3f) << 6) | (readUint8() & 0x3f);\n          length -= 2;\n        } else {\n          value =\n            ((value & 0x0f) << 18) | ((readUint8() & 0x3f) << 12) | ((readUint8() & 0x3f) << 6) | (readUint8() & 0x3f);\n          length -= 3;\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | (value >> 10));\n        utf16data.push(0xdc00 | (value & 0x3ff));\n      }\n    }\n  }\n\n  function decodeItem() {\n    const initialByte = readUint8();\n    const majorType = initialByte >> 5;\n    const additionalInformation = initialByte & 0x1f;\n    let i;\n    let length;\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || majorType > 6)) {\n      throw new Error(\"Invalid length\");\n    }\n\n    const utf16data = [];\n    let retArray;\n    const retObject = {};\n\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          const elements = [];\n          let fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          const fullArray = new Uint8Array(fullArrayLength);\n          let fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            appendUtf16Data(utf16data, length);\n          }\n        } else {\n          appendUtf16Data(utf16data, length);\n        }\n        return String.fromCharCode.apply(null, utf16data);\n      case 4:\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak()) {\n            retArray.push(decodeItem());\n          }\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i) {\n            retArray[i] = decodeItem();\n          }\n        }\n        return retArray;\n      case 5:\n        for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n          const key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagger(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValue(length);\n        }\n    }\n  }\n\n  const ret = decodeItem();\n  if (offset !== data.byteLength) {\n    throw new Error(\"Remaining bytes\");\n  }\n  return ret;\n}\n\nexport const CBOR = {\n  encode,\n  decode,\n};\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Laird Connectivity\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @file mcumgr\n * @brief Provides MCU manager operation functions for the Xbit USB Shell.\n * This file is inspired by the MIT licensed mcumgr file originally\n * authored by Andras Barthazi (https://github.com/boogie/mcumgr-web),\n * updated to also support file upload/download over SMP.\n */\n\nimport { CBOR } from \"./cbor.js\";\nimport { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"mcumgr\", { log: false });\n\nexport const constants = {\n  // Opcodes\n  MGMT_OP_READ: 0,\n  MGMT_OP_READ_RSP: 1,\n  MGMT_OP_WRITE: 2,\n  MGMT_OP_WRITE_RSP: 3,\n\n  // Groups\n  MGMT_GROUP_ID_OS: 0,\n  MGMT_GROUP_ID_IMAGE: 1,\n  MGMT_GROUP_ID_STAT: 2,\n  MGMT_GROUP_ID_CONFIG: 3,\n  MGMT_GROUP_ID_LOG: 4,\n  MGMT_GROUP_ID_CRASH: 5,\n  MGMT_GROUP_ID_SPLIT: 6,\n  MGMT_GROUP_ID_RUN: 7,\n  MGMT_GROUP_ID_FS: 8,\n  MGMT_GROUP_ID_SHELL: 9,\n\n  // OS group\n  OS_MGMT_ID_ECHO: 0,\n  OS_MGMT_ID_CONS_ECHO_CTRL: 1,\n  OS_MGMT_ID_TASKSTAT: 2,\n  OS_MGMT_ID_MPSTAT: 3,\n  OS_MGMT_ID_DATETIME_STR: 4,\n  OS_MGMT_ID_RESET: 5,\n\n  // Image group\n  IMG_MGMT_ID_STATE: 0,\n  IMG_MGMT_ID_UPLOAD: 1,\n  IMG_MGMT_ID_FILE: 2,\n  IMG_MGMT_ID_CORELIST: 3,\n  IMG_MGMT_ID_CORELOAD: 4,\n  IMG_MGMT_ID_ERASE: 5,\n\n  // Filesystem group\n  FS_MGMT_ID_FILE: 0,\n};\n\nexport class MCUManager {\n  constructor() {\n    this._mtu = 256;\n    this._messageCallback = null;\n    this._imageUploadProgressCallback = null;\n    this._imageUploadNextCallback = null;\n    this._fileUploadProgressCallback = null;\n    this._fileUploadNextCallback = null;\n    this._uploadIsInProgress = false;\n    this._downloadIsInProgress = false;\n    this._buffer = new Uint8Array();\n    this._seq = 0;\n  }\n\n  onMessage(callback) {\n    this._messageCallback = callback;\n    return this;\n  }\n\n  onImageUploadNext(callback) {\n    this._imageUploadNextCallback = callback;\n    return this;\n  }\n\n  onImageUploadProgress(callback) {\n    this._imageUploadProgressCallback = callback;\n    return this;\n  }\n\n  onImageUploadFinished(callback) {\n    this._imageUploadFinishedCallback = callback;\n    return this;\n  }\n\n  onFileUploadNext(callback) {\n    this._fileUploadNextCallback = callback;\n    return this;\n  }\n\n  onFileUploadProgress(callback) {\n    this._fileUploadProgressCallback = callback;\n    return this;\n  }\n\n  onFileUploadFinished(callback) {\n    this._fileUploadFinishedCallback = callback;\n    return this;\n  }\n\n  onFileDownloadNext(callback) {\n    this._fileDownloadNextCallback = callback;\n    return this;\n  }\n\n  onFileDownloadProgress(callback) {\n    this._fileDownloadProgressCallback = callback;\n    return this;\n  }\n\n  onFileDownloadFinished(callback) {\n    this._fileDownloadFinishedCallback = callback;\n    return this;\n  }\n\n  _getMessage(op, group, id, data) {\n    const _flags = 0;\n    let encodedData = [];\n    if (typeof data !== \"undefined\") {\n      encodedData = [...new Uint8Array(CBOR.encode(data))];\n    }\n    const lengthLo = encodedData.length & 255;\n    const lengthHi = encodedData.length >> 8;\n    const groupLo = group & 255;\n    const groupHi = group >> 8;\n    const message = [op, _flags, lengthHi, lengthLo, groupHi, groupLo, this._seq, id, ...encodedData];\n    this._seq = (this._seq + 1) % 256;\n\n    return message;\n  }\n\n  _notification(buffer) {\n    _console.log(\"mcumgr - message received\");\n    const message = new Uint8Array(buffer);\n    this._buffer = new Uint8Array([...this._buffer, ...message]);\n    const messageLength = this._buffer[2] * 256 + this._buffer[3];\n    if (this._buffer.length < messageLength + 8) return;\n    this._processMessage(this._buffer.slice(0, messageLength + 8));\n    this._buffer = this._buffer.slice(messageLength + 8);\n  }\n\n  _processMessage(message) {\n    const [op, , lengthHi, lengthLo, groupHi, groupLo, , id] = message;\n    const data = CBOR.decode(message.slice(8).buffer);\n    const length = lengthHi * 256 + lengthLo;\n    const group = groupHi * 256 + groupLo;\n\n    _console.log(\"mcumgr - Process Message - Group: \" + group + \", Id: \" + id + \", Off: \" + data.off);\n    if (group === constants.MGMT_GROUP_ID_IMAGE && id === constants.IMG_MGMT_ID_UPLOAD && data.off) {\n      this._uploadOffset = data.off;\n      this._uploadNext();\n      return;\n    }\n    if (\n      op === constants.MGMT_OP_WRITE_RSP &&\n      group === constants.MGMT_GROUP_ID_FS &&\n      id === constants.FS_MGMT_ID_FILE &&\n      data.off\n    ) {\n      this._uploadFileOffset = data.off;\n      this._uploadFileNext();\n      return;\n    }\n    if (op === constants.MGMT_OP_READ_RSP && group === constants.MGMT_GROUP_ID_FS && id === constants.FS_MGMT_ID_FILE) {\n      this._downloadFileOffset += data.data.length;\n      if (data.len != undefined) {\n        this._downloadFileLength = data.len;\n      }\n      _console.log(\"downloaded \" + this._downloadFileOffset + \" bytes of \" + this._downloadFileLength);\n      if (this._downloadFileLength > 0) {\n        this._fileDownloadProgressCallback({\n          percentage: Math.floor((this._downloadFileOffset / this._downloadFileLength) * 100),\n        });\n      }\n      if (this._messageCallback) this._messageCallback({ op, group, id, data, length });\n      this._downloadFileNext();\n      return;\n    }\n\n    if (this._messageCallback) this._messageCallback({ op, group, id, data, length });\n  }\n\n  cmdReset() {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_OS, constants.OS_MGMT_ID_RESET);\n  }\n\n  smpEcho(message) {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_OS, constants.OS_MGMT_ID_ECHO, {\n      d: message,\n    });\n  }\n\n  cmdImageState() {\n    return this._getMessage(constants.MGMT_OP_READ, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_STATE);\n  }\n\n  cmdImageErase() {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_ERASE, {});\n  }\n\n  cmdImageTest(hash) {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_STATE, {\n      hash,\n      confirm: false,\n    });\n  }\n\n  cmdImageConfirm(hash) {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_STATE, {\n      hash,\n      confirm: true,\n    });\n  }\n\n  _hash(image) {\n    return crypto.subtle.digest(\"SHA-256\", image);\n  }\n\n  async _uploadNext() {\n    if (!this._uploadImage) {\n      return;\n    }\n\n    if (this._uploadOffset >= this._uploadImage.byteLength) {\n      this._uploadIsInProgress = false;\n      this._imageUploadFinishedCallback();\n      return;\n    }\n\n    const nmpOverhead = 8;\n    const message = { data: new Uint8Array(), off: this._uploadOffset };\n    if (this._uploadOffset === 0) {\n      message.len = this._uploadImage.byteLength;\n      message.sha = new Uint8Array(await this._hash(this._uploadImage));\n    }\n    this._imageUploadProgressCallback({\n      percentage: Math.floor((this._uploadOffset / this._uploadImage.byteLength) * 100),\n    });\n\n    const length = this._mtu - CBOR.encode(message).byteLength - nmpOverhead - 3 - 5;\n\n    message.data = new Uint8Array(this._uploadImage.slice(this._uploadOffset, this._uploadOffset + length));\n\n    this._uploadOffset += length;\n\n    const packet = this._getMessage(\n      constants.MGMT_OP_WRITE,\n      constants.MGMT_GROUP_ID_IMAGE,\n      constants.IMG_MGMT_ID_UPLOAD,\n      message\n    );\n\n    _console.log(\"mcumgr - _uploadNext: Message Length: \" + packet.length);\n\n    this._imageUploadNextCallback({ packet });\n  }\n  async reset() {\n    this._messageCallback = null;\n    this._imageUploadProgressCallback = null;\n    this._imageUploadNextCallback = null;\n    this._fileUploadProgressCallback = null;\n    this._fileUploadNextCallback = null;\n    this._uploadIsInProgress = false;\n    this._downloadIsInProgress = false;\n    this._buffer = new Uint8Array();\n    this._seq = 0;\n  }\n\n  async cmdUpload(image, slot = 0) {\n    if (this._uploadIsInProgress) {\n      _console.error(\"Upload is already in progress.\");\n      return;\n    }\n    this._uploadIsInProgress = true;\n\n    this._uploadOffset = 0;\n    this._uploadImage = image;\n    this._uploadSlot = slot;\n\n    this._uploadNext();\n  }\n\n  async cmdUploadFile(filebuf, destFilename) {\n    if (this._uploadIsInProgress) {\n      _console.error(\"Upload is already in progress.\");\n      return;\n    }\n    this._uploadIsInProgress = true;\n    this._uploadFileOffset = 0;\n    this._uploadFile = filebuf;\n    this._uploadFilename = destFilename;\n\n    this._uploadFileNext();\n  }\n\n  async _uploadFileNext() {\n    _console.log(\"uploadFileNext - offset: \" + this._uploadFileOffset + \", length: \" + this._uploadFile.byteLength);\n\n    if (this._uploadFileOffset >= this._uploadFile.byteLength) {\n      this._uploadIsInProgress = false;\n      this._fileUploadFinishedCallback();\n      return;\n    }\n\n    const nmpOverhead = 8;\n    const message = { data: new Uint8Array(), off: this._uploadFileOffset };\n    if (this._uploadFileOffset === 0) {\n      message.len = this._uploadFile.byteLength;\n    }\n    message.name = this._uploadFilename;\n    this._fileUploadProgressCallback({\n      percentage: Math.floor((this._uploadFileOffset / this._uploadFile.byteLength) * 100),\n    });\n\n    const length = this._mtu - CBOR.encode(message).byteLength - nmpOverhead;\n\n    message.data = new Uint8Array(this._uploadFile.slice(this._uploadFileOffset, this._uploadFileOffset + length));\n\n    this._uploadFileOffset += length;\n\n    const packet = this._getMessage(\n      constants.MGMT_OP_WRITE,\n      constants.MGMT_GROUP_ID_FS,\n      constants.FS_MGMT_ID_FILE,\n      message\n    );\n\n    _console.log(\"mcumgr - _uploadNext: Message Length: \" + packet.length);\n\n    this._fileUploadNextCallback({ packet });\n  }\n\n  async cmdDownloadFile(filename, destFilename) {\n    if (this._downloadIsInProgress) {\n      _console.error(\"Download is already in progress.\");\n      return;\n    }\n    this._downloadIsInProgress = true;\n    this._downloadFileOffset = 0;\n    this._downloadFileLength = 0;\n    this._downloadRemoteFilename = filename;\n    this._downloadLocalFilename = destFilename;\n\n    this._downloadFileNext();\n  }\n\n  async _downloadFileNext() {\n    if (this._downloadFileLength > 0) {\n      if (this._downloadFileOffset >= this._downloadFileLength) {\n        this._downloadIsInProgress = false;\n        this._fileDownloadFinishedCallback();\n        return;\n      }\n    }\n\n    const message = { off: this._downloadFileOffset };\n    if (this._downloadFileOffset === 0) {\n      message.name = this._downloadRemoteFilename;\n    }\n\n    const packet = this._getMessage(\n      constants.MGMT_OP_READ,\n      constants.MGMT_GROUP_ID_FS,\n      constants.FS_MGMT_ID_FILE,\n      message\n    );\n    _console.log(\"mcumgr - _downloadNext: Message Length: \" + packet.length);\n    this._fileDownloadNextCallback({ packet });\n  }\n\n  async imageInfo(image) {\n    const info = {};\n    const view = new Uint8Array(image);\n\n    // check header length\n    if (view.length < 32) {\n      throw new Error(\"Invalid image (too short file)\");\n    }\n\n    // check MAGIC bytes 0x96f3b83d\n    if (view[0] !== 0x3d || view[1] !== 0xb8 || view[2] !== 0xf3 || view[3] !== 0x96) {\n      throw new Error(\"Invalid image (wrong magic bytes)\");\n    }\n\n    // check load address is 0x00000000\n    if (view[4] !== 0x00 || view[5] !== 0x00 || view[6] !== 0x00 || view[7] !== 0x00) {\n      throw new Error(\"Invalid image (wrong load address)\");\n    }\n\n    const headerSize = view[8] + view[9] * 2 ** 8;\n\n    // check protected TLV area size is 0\n    if (view[10] !== 0x00 || view[11] !== 0x00) {\n      throw new Error(\"Invalid image (wrong protected TLV area size)\");\n    }\n\n    const imageSize = view[12] + view[13] * 2 ** 8 + view[14] * 2 ** 16 + view[15] * 2 ** 24;\n    info.imageSize = imageSize;\n\n    // check image size is correct\n    if (view.length < imageSize + headerSize) {\n      throw new Error(\"Invalid image (wrong image size)\");\n    }\n\n    // check flags is 0x00000000\n    if (view[16] !== 0x00 || view[17] !== 0x00 || view[18] !== 0x00 || view[19] !== 0x00) {\n      throw new Error(\"Invalid image (wrong flags)\");\n    }\n\n    const version = `${view[20]}.${view[21]}.${view[22] + view[23] * 2 ** 8}`;\n    info.version = version;\n\n    info.hash = [...new Uint8Array(await this._hash(image.slice(0, imageSize + 32)))]\n      .map((b) => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n\n    return info;\n  }\n}\n","import Device, { SendSmpMessageCallback } from \"./Device.ts\";\nimport { getFileBuffer } from \"./utils/ArrayBufferUtils.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { MCUManager, constants } from \"./utils/mcumgr.js\";\nimport { FileLike } from \"./utils/ArrayBufferUtils.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"FirmwareManager\", { log: false });\n\nexport const FirmwareMessageTypes = [\"smp\"] as const;\nexport type FirmwareMessageType = (typeof FirmwareMessageTypes)[number];\n\nexport const FirmwareEventTypes = [\n  ...FirmwareMessageTypes,\n  \"firmwareImages\",\n  \"firmwareUploadProgress\",\n  \"firmwareStatus\",\n  \"firmwareUploadComplete\",\n] as const;\nexport type FirmwareEventType = (typeof FirmwareEventTypes)[number];\n\nexport const FirmwareStatuses = [\"idle\", \"uploading\", \"uploaded\", \"pending\", \"testing\", \"erasing\"] as const;\nexport type FirmwareStatus = (typeof FirmwareStatuses)[number];\n\nexport interface FirmwareImage {\n  slot: number;\n  active: boolean;\n  confirmed: boolean;\n  pending: boolean;\n  permanent: boolean;\n  bootable: boolean;\n  version: string;\n  hash?: Uint8Array;\n  empty?: boolean;\n}\n\nexport interface FirmwareEventMessages {\n  smp: { dataView: DataView };\n  firmwareImages: { firmwareImages: FirmwareImage[] };\n  firmwareUploadProgress: { progress: number };\n  firmwareStatus: { firmwareStatus: FirmwareStatus };\n  //firmwareUploadComplete: {};\n}\n\nexport type FirmwareEventDispatcher = EventDispatcher<Device, FirmwareEventType, FirmwareEventMessages>;\n\nclass FirmwareManager {\n  sendMessage!: SendSmpMessageCallback;\n\n  constructor() {\n    this.#assignMcuManagerCallbacks();\n    autoBind(this);\n  }\n\n  eventDispatcher!: FirmwareEventDispatcher;\n  get addEventListenter() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  parseMessage(messageType: FirmwareMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"smp\":\n        this.#mcuManager._notification(Array.from(new Uint8Array(dataView.buffer)));\n        this.#dispatchEvent(\"smp\", { dataView });\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  async uploadFirmware(file: FileLike) {\n    _console.log(\"uploadFirmware\", file);\n\n    const promise = this.waitForEvent(\"firmwareUploadComplete\");\n\n    await this.getImages();\n\n    const arrayBuffer = await getFileBuffer(file);\n    const imageInfo = await this.#mcuManager.imageInfo(arrayBuffer);\n    _console.log({ imageInfo });\n\n    this.#mcuManager.cmdUpload(arrayBuffer, 1);\n\n    this.#updateStatus(\"uploading\");\n\n    await promise;\n  }\n\n  #status: FirmwareStatus = \"idle\";\n  get status() {\n    return this.#status;\n  }\n  #updateStatus(newStatus: FirmwareStatus) {\n    _console.assertEnumWithError(newStatus, FirmwareStatuses);\n    if (this.#status == newStatus) {\n      _console.log(`redundant firmwareStatus assignment \"${newStatus}\"`);\n      return;\n    }\n\n    this.#status = newStatus;\n    _console.log({ firmwareStatus: this.#status });\n    this.#dispatchEvent(\"firmwareStatus\", { firmwareStatus: this.#status });\n  }\n\n  // COMMANDS\n\n  #images!: FirmwareImage[];\n  get images() {\n    return this.#images;\n  }\n  #assertImages() {\n    _console.assertWithError(this.#images, \"didn't get imageState\");\n  }\n  #assertValidImageIndex(imageIndex: number) {\n    _console.assertTypeWithError(imageIndex, \"number\");\n    _console.assertWithError(imageIndex == 0 || imageIndex == 1, \"imageIndex must be 0 or 1\");\n  }\n  async getImages() {\n    const promise = this.waitForEvent(\"firmwareImages\");\n\n    _console.log(\"getting firmware image state...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageState()).buffer);\n\n    await promise;\n  }\n\n  async testImage(imageIndex: number = 1) {\n    this.#assertValidImageIndex(imageIndex);\n    this.#assertImages();\n    if (!this.#images[imageIndex]) {\n      _console.log(`image ${imageIndex} not found`);\n      return;\n    }\n    if (this.#images[imageIndex].pending == true) {\n      _console.log(`image ${imageIndex} is already pending`);\n      return;\n    }\n    if (this.#images[imageIndex].empty) {\n      _console.log(`image ${imageIndex} is empty`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"testing firmware image...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageTest(this.#images[imageIndex].hash)).buffer);\n\n    await promise;\n  }\n\n  async eraseImage() {\n    this.#assertImages();\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"erasing image...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageErase()).buffer);\n\n    this.#updateStatus(\"erasing\");\n\n    await promise;\n    await this.getImages();\n  }\n\n  async confirmImage(imageIndex: number = 0) {\n    this.#assertValidImageIndex(imageIndex);\n    this.#assertImages();\n    if (this.#images[imageIndex].confirmed === true) {\n      _console.log(`image ${imageIndex} is already confirmed`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"confirming image...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageConfirm(this.#images[imageIndex].hash)).buffer);\n\n    await promise;\n  }\n\n  async echo(string: string) {\n    _console.assertTypeWithError(string, \"string\");\n\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"sending echo...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.smpEcho(string)).buffer);\n\n    await promise;\n  }\n\n  async reset() {\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"resetting...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdReset()).buffer);\n\n    await promise;\n  }\n\n  // MTU\n  #mtu!: number;\n  get mtu() {\n    return this.#mtu;\n  }\n  set mtu(newMtu: number) {\n    this.#mtu = newMtu;\n    this.#mcuManager._mtu = newMtu;\n  }\n\n  // MCUManager\n  #mcuManager = new MCUManager();\n\n  #assignMcuManagerCallbacks() {\n    this.#mcuManager.onMessage(this.#onMcuMessage.bind(this));\n\n    this.#mcuManager.onFileDownloadNext(this.#onMcuFileDownloadNext);\n    this.#mcuManager.onFileDownloadProgress(this.#onMcuFileDownloadProgress.bind(this));\n    this.#mcuManager.onFileDownloadFinished(this.#onMcuFileDownloadFinished.bind(this));\n\n    this.#mcuManager.onFileUploadNext(this.#onMcuFileUploadNext.bind(this));\n    this.#mcuManager.onFileUploadProgress(this.#onMcuFileUploadProgress.bind(this));\n    this.#mcuManager.onFileUploadFinished(this.#onMcuFileUploadFinished.bind(this));\n\n    this.#mcuManager.onImageUploadNext(this.#onMcuImageUploadNext.bind(this));\n    this.#mcuManager.onImageUploadProgress(this.#onMcuImageUploadProgress.bind(this));\n    this.#mcuManager.onImageUploadFinished(this.#onMcuImageUploadFinished.bind(this));\n  }\n\n  #onMcuMessage({ op, group, id, data, length }: { op: number; group: number; id: number; data: any; length: number }) {\n    _console.log(\"onMcuMessage\", ...arguments);\n\n    switch (group) {\n      case constants.MGMT_GROUP_ID_OS:\n        switch (id) {\n          case constants.OS_MGMT_ID_ECHO:\n            _console.log(`echo \"${data.r}\"`);\n            break;\n          case constants.OS_MGMT_ID_TASKSTAT:\n            _console.table(data.tasks);\n            break;\n          case constants.OS_MGMT_ID_MPSTAT:\n            _console.log(data);\n            break;\n        }\n        break;\n      case constants.MGMT_GROUP_ID_IMAGE:\n        switch (id) {\n          case constants.IMG_MGMT_ID_STATE:\n            this.#onMcuImageState(data);\n        }\n        break;\n      default:\n        throw Error(`uncaught mcuMessage group ${group}`);\n    }\n  }\n\n  #onMcuFileDownloadNext() {\n    _console.log(\"onMcuFileDownloadNext\", ...arguments);\n  }\n  #onMcuFileDownloadProgress() {\n    _console.log(\"onMcuFileDownloadProgress\", ...arguments);\n  }\n  #onMcuFileDownloadFinished() {\n    _console.log(\"onMcuFileDownloadFinished\", ...arguments);\n  }\n\n  #onMcuFileUploadNext() {\n    _console.log(\"onMcuFileUploadNext\");\n  }\n  #onMcuFileUploadProgress() {\n    _console.log(\"onMcuFileUploadProgress\");\n  }\n  #onMcuFileUploadFinished() {\n    _console.log(\"onMcuFileUploadFinished\");\n  }\n\n  #onMcuImageUploadNext({ packet }: { packet: number[] }) {\n    _console.log(\"onMcuImageUploadNext\");\n    this.sendMessage(Uint8Array.from(packet).buffer);\n  }\n  #onMcuImageUploadProgress({ percentage }: { percentage: number }) {\n    const progress = percentage / 100;\n    _console.log(\"onMcuImageUploadProgress\", ...arguments);\n    this.#dispatchEvent(\"firmwareUploadProgress\", { progress });\n  }\n  async #onMcuImageUploadFinished() {\n    _console.log(\"onMcuImageUploadFinished\", ...arguments);\n\n    await this.getImages();\n\n    this.#dispatchEvent(\"firmwareUploadProgress\", { progress: 100 });\n    this.#dispatchEvent(\"firmwareUploadComplete\", {});\n  }\n\n  #onMcuImageState({ images }: { images?: FirmwareImage[] }) {\n    if (images) {\n      this.#images = images;\n      _console.log(\"images\", this.#images);\n    } else {\n      _console.log(\"no images found\");\n      return;\n    }\n\n    let newStatus: FirmwareStatus = \"idle\";\n\n    if (this.#images.length == 2) {\n      if (!this.#images[1].bootable) {\n        _console.warn('Slot 1 has a invalid image. Click \"Erase Image\" to erase it or upload a different image');\n      } else if (!this.#images[0].confirmed) {\n        _console.log(\n          'Slot 0 has a valid image. Click \"Confirm Image\" to confirm it or wait and the device will swap images back.'\n        );\n        newStatus = \"testing\";\n      } else {\n        if (this.#images[1].pending) {\n          _console.log(\"reset to upload to the new firmware image\");\n          newStatus = \"pending\";\n        } else {\n          _console.log(\"Slot 1 has a valid image. run testImage() to test it or upload a different image.\");\n          newStatus = \"uploaded\";\n        }\n      }\n    }\n\n    if (this.#images.length == 1) {\n      this.#images.push({\n        slot: 1,\n        empty: true,\n        version: \"Empty\",\n        pending: false,\n        confirmed: false,\n        bootable: false,\n        active: false,\n        permanent: false,\n      });\n\n      _console.log(\"Select a firmware upload image to upload to slot 1.\");\n    }\n\n    this.#updateStatus(newStatus);\n    this.#dispatchEvent(\"firmwareImages\", { firmwareImages: this.#images });\n  }\n}\n\nexport default FirmwareManager;\n","import { ConnectionStatus } from \"./connection/BaseConnectionManager.ts\";\nimport WebBluetoothConnectionManager from \"./connection/bluetooth/WebBluetoothConnectionManager.ts\";\nimport Device, { BoundDeviceEventListeners, DeviceEventMap } from \"./Device.ts\";\nimport { DeviceType } from \"./InformationManager.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport { isInBluefy, isInBrowser } from \"./utils/environment.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n  EventListenerMap,\n  EventMap,\n} from \"./utils/EventDispatcher.ts\";\nimport { addEventListeners } from \"./utils/EventUtils.ts\";\n\nconst _console = createConsole(\"DeviceManager\", { log: false });\n\nexport interface LocalStorageDeviceInformation {\n  type: DeviceType;\n  bluetoothId: string;\n  ipAddress?: string;\n  isWifiSecure?: boolean;\n}\n\nexport interface LocalStorageConfiguration {\n  devices: LocalStorageDeviceInformation[];\n}\n\nexport const DeviceManagerEventTypes = [\n  \"deviceConnected\",\n  \"deviceDisconnected\",\n  \"deviceIsConnected\",\n  \"availableDevices\",\n  \"connectedDevices\",\n] as const;\nexport type DeviceManagerEventType = (typeof DeviceManagerEventTypes)[number];\n\ninterface DeviceManagerEventMessage {\n  device: Device;\n}\nexport interface DeviceManagerEventMessages {\n  deviceConnected: DeviceManagerEventMessage;\n  deviceDisconnected: DeviceManagerEventMessage;\n  deviceIsConnected: DeviceManagerEventMessage;\n  availableDevices: { availableDevices: Device[] };\n  connectedDevices: { connectedDevices: Device[] };\n}\n\nexport type DeviceManagerEventDispatcher = EventDispatcher<\n  DeviceManager,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type DeviceManagerEventMap = EventMap<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type DeviceManagerEventListenerMap = EventListenerMap<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type DeviceManagerEvent = Event<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type BoundDeviceManagerEventListeners = BoundEventListeners<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\n\nclass DeviceManager {\n  static readonly shared = new DeviceManager();\n\n  constructor() {\n    if (DeviceManager.shared && this != DeviceManager.shared) {\n      throw Error(\"DeviceManager is a singleton - use DeviceManager.shared\");\n    }\n\n    if (this.CanUseLocalStorage) {\n      this.UseLocalStorage = true;\n    }\n  }\n\n  // DEVICE LISTENERS\n  #boundDeviceEventListeners: BoundDeviceEventListeners = {\n    getType: this.#onDeviceType.bind(this),\n    isConnected: this.#OnDeviceIsConnected.bind(this),\n  };\n  /** @private */\n  onDevice(device: Device) {\n    addEventListeners(device, this.#boundDeviceEventListeners);\n  }\n\n  #onDeviceType(event: DeviceEventMap[\"getType\"]) {\n    if (this.#UseLocalStorage) {\n      this.#UpdateLocalStorageConfigurationForDevice(event.target);\n    }\n  }\n\n  // CONNECTION STATUS\n  /** @private */\n  OnDeviceConnectionStatusUpdated(\n    device: Device,\n    connectionStatus: ConnectionStatus\n  ) {\n    if (\n      connectionStatus == \"notConnected\" &&\n      !device.canReconnect &&\n      this.#AvailableDevices.includes(device)\n    ) {\n      const deviceIndex = this.#AvailableDevices.indexOf(device);\n      this.AvailableDevices.splice(deviceIndex, 1);\n      this.#DispatchAvailableDevices();\n    }\n  }\n\n  // CONNECTED DEVICES\n\n  #ConnectedDevices: Device[] = [];\n  get ConnectedDevices() {\n    return this.#ConnectedDevices;\n  }\n\n  #UseLocalStorage = false;\n  get UseLocalStorage() {\n    return this.#UseLocalStorage;\n  }\n  set UseLocalStorage(newUseLocalStorage) {\n    this.#AssertLocalStorage();\n    _console.assertTypeWithError(newUseLocalStorage, \"boolean\");\n    this.#UseLocalStorage = newUseLocalStorage;\n    if (this.#UseLocalStorage && !this.#LocalStorageConfiguration) {\n      this.#LoadFromLocalStorage();\n    }\n  }\n\n  #DefaultLocalStorageConfiguration: LocalStorageConfiguration = {\n    devices: [],\n  };\n  #LocalStorageConfiguration?: LocalStorageConfiguration;\n\n  get CanUseLocalStorage() {\n    return isInBrowser && window.localStorage;\n  }\n\n  #AssertLocalStorage() {\n    _console.assertWithError(\n      isInBrowser,\n      \"localStorage is only available in the browser\"\n    );\n    _console.assertWithError(window.localStorage, \"localStorage not found\");\n  }\n  #LocalStorageKey = \"BS.Device\";\n  #SaveToLocalStorage() {\n    this.#AssertLocalStorage();\n    localStorage.setItem(\n      this.#LocalStorageKey,\n      JSON.stringify(this.#LocalStorageConfiguration)\n    );\n  }\n  async #LoadFromLocalStorage() {\n    this.#AssertLocalStorage();\n    let localStorageString = localStorage.getItem(this.#LocalStorageKey);\n    if (typeof localStorageString != \"string\") {\n      _console.log(\"no info found in localStorage\");\n      this.#LocalStorageConfiguration = Object.assign(\n        {},\n        this.#DefaultLocalStorageConfiguration\n      );\n      this.#SaveToLocalStorage();\n      return;\n    }\n    try {\n      const configuration = JSON.parse(localStorageString);\n      _console.log({ configuration });\n      this.#LocalStorageConfiguration = configuration;\n      if (this.CanGetDevices) {\n        await this.GetDevices(); // redundant?\n      }\n    } catch (error) {\n      _console.error(error);\n    }\n  }\n\n  #UpdateLocalStorageConfigurationForDevice(device: Device) {\n    if (device.connectionType != \"webBluetooth\") {\n      _console.log(\"localStorage is only for webBluetooth devices\");\n      return;\n    }\n    this.#AssertLocalStorage();\n    const deviceInformationIndex =\n      this.#LocalStorageConfiguration!.devices.findIndex(\n        (deviceInformation) => {\n          return deviceInformation.bluetoothId == device.bluetoothId;\n        }\n      );\n    if (deviceInformationIndex == -1) {\n      return;\n    }\n    this.#LocalStorageConfiguration!.devices[deviceInformationIndex].type =\n      device.type;\n    this.#SaveToLocalStorage();\n  }\n\n  // AVAILABLE DEVICES\n  #AvailableDevices: Device[] = [];\n  get AvailableDevices() {\n    return this.#AvailableDevices;\n  }\n\n  get CanGetDevices() {\n    return isInBrowser && navigator.bluetooth?.getDevices;\n  }\n  /**\n   * retrieves devices already connected via web bluetooth in other tabs/windows\n   *\n   * _only available on web-bluetooth enabled browsers_\n   */\n  async GetDevices(): Promise<Device[] | undefined> {\n    if (!isInBrowser) {\n      _console.warn(\"GetDevices is only available in the browser\");\n      return;\n    }\n\n    if (!navigator.bluetooth) {\n      _console.warn(\"bluetooth is not available in this browser\");\n      return;\n    }\n\n    if (isInBluefy) {\n      _console.warn(\"bluefy lists too many devices...\");\n      return;\n    }\n\n    if (!navigator.bluetooth.getDevices) {\n      _console.warn(\"bluetooth.getDevices() is not available in this browser\");\n      return;\n    }\n\n    if (!this.CanGetDevices) {\n      _console.log(\"CanGetDevices is false\");\n      return;\n    }\n\n    if (!this.#LocalStorageConfiguration) {\n      this.#LoadFromLocalStorage();\n    }\n\n    const configuration = this.#LocalStorageConfiguration!;\n    if (!configuration.devices || configuration.devices.length == 0) {\n      _console.log(\"no devices found in configuration\");\n      return;\n    }\n\n    const bluetoothDevices = await navigator.bluetooth.getDevices();\n\n    _console.log({ bluetoothDevices });\n\n    bluetoothDevices.forEach((bluetoothDevice) => {\n      if (!bluetoothDevice.gatt) {\n        return;\n      }\n      let deviceInformation = configuration.devices.find(\n        (deviceInformation) =>\n          bluetoothDevice.id == deviceInformation.bluetoothId\n      );\n      if (!deviceInformation) {\n        return;\n      }\n\n      let existingConnectedDevice = this.ConnectedDevices.filter(\n        (device) => device.connectionType == \"webBluetooth\"\n      ).find((device) => device.bluetoothId == bluetoothDevice.id);\n\n      const existingAvailableDevice = this.AvailableDevices.filter(\n        (device) => device.connectionType == \"webBluetooth\"\n      ).find((device) => device.bluetoothId == bluetoothDevice.id);\n      if (existingAvailableDevice) {\n        if (\n          existingConnectedDevice &&\n          existingConnectedDevice?.bluetoothId ==\n            existingAvailableDevice.bluetoothId &&\n          existingConnectedDevice != existingAvailableDevice\n        ) {\n          this.AvailableDevices[\n            this.#AvailableDevices.indexOf(existingAvailableDevice)\n          ] = existingConnectedDevice;\n        }\n        return;\n      }\n\n      if (existingConnectedDevice) {\n        this.AvailableDevices.push(existingConnectedDevice);\n        return;\n      }\n\n      const device = new Device();\n      const connectionManager = new WebBluetoothConnectionManager();\n      connectionManager.device = bluetoothDevice;\n      if (bluetoothDevice.name) {\n        device._informationManager.updateName(bluetoothDevice.name);\n      }\n      device._informationManager.updateType(deviceInformation.type);\n      device.connectionManager = connectionManager;\n      this.AvailableDevices.push(device);\n    });\n    this.#DispatchAvailableDevices();\n    return this.AvailableDevices;\n  }\n\n  // STATIC EVENTLISTENERS\n\n  #EventDispatcher: DeviceManagerEventDispatcher = new EventDispatcher(\n    this as DeviceManager,\n    DeviceManagerEventTypes\n  );\n\n  get AddEventListener() {\n    return this.#EventDispatcher.addEventListener;\n  }\n  get #DispatchEvent() {\n    return this.#EventDispatcher.dispatchEvent;\n  }\n  get RemoveEventListener() {\n    return this.#EventDispatcher.removeEventListener;\n  }\n  get RemoveEventListeners() {\n    return this.#EventDispatcher.removeEventListeners;\n  }\n  get RemoveAllEventListeners() {\n    return this.#EventDispatcher.removeAllEventListeners;\n  }\n\n  #OnDeviceIsConnected(event: DeviceEventMap[\"isConnected\"]) {\n    const { target: device } = event;\n    if (device.isConnected) {\n      if (!this.#ConnectedDevices.includes(device)) {\n        _console.log(\"adding device\", device);\n        this.#ConnectedDevices.push(device);\n        if (this.UseLocalStorage && device.connectionType == \"webBluetooth\") {\n          const deviceInformation: LocalStorageDeviceInformation = {\n            type: device.type,\n            bluetoothId: device.bluetoothId!,\n            ipAddress: device.ipAddress,\n            isWifiSecure: device.isWifiSecure,\n          };\n          const deviceInformationIndex =\n            this.#LocalStorageConfiguration!.devices.findIndex(\n              (_deviceInformation) =>\n                _deviceInformation.bluetoothId == deviceInformation.bluetoothId\n            );\n          if (deviceInformationIndex == -1) {\n            this.#LocalStorageConfiguration!.devices.push(deviceInformation);\n          } else {\n            this.#LocalStorageConfiguration!.devices[deviceInformationIndex] =\n              deviceInformation;\n          }\n          this.#SaveToLocalStorage();\n        }\n        this.#DispatchEvent(\"deviceConnected\", { device });\n        this.#DispatchEvent(\"deviceIsConnected\", { device });\n        this.#DispatchConnectedDevices();\n      } else {\n        _console.log(\"device already included\");\n      }\n    } else {\n      if (this.#ConnectedDevices.includes(device)) {\n        _console.log(\"removing device\", device);\n        this.#ConnectedDevices.splice(\n          this.#ConnectedDevices.indexOf(device),\n          1\n        );\n        this.#DispatchEvent(\"deviceDisconnected\", { device });\n        this.#DispatchEvent(\"deviceIsConnected\", { device });\n        this.#DispatchConnectedDevices();\n      } else {\n        _console.log(\"device already not included\");\n      }\n    }\n    if (this.CanGetDevices) {\n      this.GetDevices();\n    }\n    if (device.isConnected && !this.AvailableDevices.includes(device)) {\n      const existingAvailableDevice = this.AvailableDevices.find(\n        (_device) => _device.bluetoothId == device.bluetoothId\n      );\n      _console.log({ existingAvailableDevice });\n      if (existingAvailableDevice) {\n        this.AvailableDevices[\n          this.AvailableDevices.indexOf(existingAvailableDevice)\n        ] = device;\n      } else {\n        this.AvailableDevices.push(device);\n      }\n      this.#DispatchAvailableDevices();\n    }\n    this._CheckDeviceAvailability(device);\n  }\n\n  _CheckDeviceAvailability(device: Device) {\n    if (\n      !device.isConnected &&\n      !device.isAvailable &&\n      this.#AvailableDevices.includes(device)\n    ) {\n      _console.log(\"removing device from availableDevices...\");\n      this.#AvailableDevices.splice(this.#AvailableDevices.indexOf(device), 1);\n      this.#DispatchAvailableDevices();\n    }\n  }\n\n  #DispatchAvailableDevices() {\n    _console.log({ AvailableDevices: this.AvailableDevices });\n    this.#DispatchEvent(\"availableDevices\", {\n      availableDevices: this.AvailableDevices,\n    });\n  }\n  #DispatchConnectedDevices() {\n    _console.log({ ConnectedDevices: this.ConnectedDevices });\n    this.#DispatchEvent(\"connectedDevices\", {\n      connectedDevices: this.ConnectedDevices,\n    });\n  }\n}\n\nexport default DeviceManager.shared;\n","import { DeviceEventTypes } from \"../Device.ts\";\nimport {\n  ConnectionMessageType,\n  ConnectionMessageTypes,\n} from \"../connection/BaseConnectionManager.ts\";\nimport { concatenateArrayBuffers } from \"../utils/ArrayBufferUtils.ts\";\nimport { createConsole } from \"../utils/Console.ts\";\nimport { DeviceEventType } from \"../Device.ts\";\n\nconst _console = createConsole(\"ServerUtils\", { log: false });\n\nexport const ServerMessageTypes = [\n  \"isScanningAvailable\",\n  \"isScanning\",\n  \"startScan\",\n  \"stopScan\",\n  \"discoveredDevice\",\n  \"discoveredDevices\",\n  \"expiredDiscoveredDevice\",\n  \"connectToDevice\",\n  \"disconnectFromDevice\",\n  \"connectedDevices\",\n  \"deviceMessage\",\n] as const;\nexport type ServerMessageType = (typeof ServerMessageTypes)[number];\n\nexport const DeviceMessageTypes = [\n  \"connectionStatus\",\n  \"batteryLevel\",\n  \"deviceInformation\",\n  \"rx\",\n  \"smp\",\n] as const;\nexport type DeviceMessageType = (typeof DeviceMessageTypes)[number];\n\n// MESSAGING\n\nexport type MessageLike =\n  | number\n  | number[]\n  | ArrayBufferLike\n  | DataView\n  | boolean\n  | string\n  | any;\n\nexport interface Message<MessageType extends string> {\n  type: MessageType;\n  data?: MessageLike | MessageLike[];\n}\n\nexport function createMessage<MessageType extends string>(\n  enumeration: readonly MessageType[],\n  ...messages: (Message<MessageType> | MessageType)[]\n) {\n  _console.log(\"createMessage\", ...messages);\n\n  const messageBuffers = messages.map((message) => {\n    if (typeof message == \"string\") {\n      message = { type: message };\n    }\n\n    if (message.data != undefined) {\n      if (!Array.isArray(message.data)) {\n        message.data = [message.data];\n      }\n    } else {\n      message.data = [];\n    }\n\n    const messageDataArrayBuffer = concatenateArrayBuffers(...message.data);\n    const messageDataArrayBufferByteLength = messageDataArrayBuffer.byteLength;\n\n    _console.assertEnumWithError(message.type, enumeration);\n    const messageTypeEnum = enumeration.indexOf(message.type);\n\n    const messageDataLengthDataView = new DataView(new ArrayBuffer(2));\n    messageDataLengthDataView.setUint16(\n      0,\n      messageDataArrayBufferByteLength,\n      true\n    );\n\n    return concatenateArrayBuffers(\n      messageTypeEnum,\n      messageDataLengthDataView,\n      messageDataArrayBuffer\n    );\n  });\n  _console.log(\"messageBuffers\", ...messageBuffers);\n  return concatenateArrayBuffers(...messageBuffers);\n}\n\nexport type ServerMessage = ServerMessageType | Message<ServerMessageType>;\nexport function createServerMessage(...messages: ServerMessage[]) {\n  _console.log(\"createServerMessage\", ...messages);\n  return createMessage(ServerMessageTypes, ...messages);\n}\n\nexport type DeviceMessage = DeviceEventType | Message<DeviceEventType>;\nexport function createDeviceMessage(...messages: DeviceMessage[]) {\n  _console.log(\"createDeviceMessage\", ...messages);\n  return createMessage(DeviceEventTypes, ...messages);\n}\n\nexport type ClientDeviceMessage =\n  | ConnectionMessageType\n  | Message<ConnectionMessageType>;\nexport function createClientDeviceMessage(...messages: ClientDeviceMessage[]) {\n  _console.log(\"createClientDeviceMessage\", ...messages);\n  return createMessage(ConnectionMessageTypes, ...messages);\n}\n\n// STATIC MESSAGES\nexport const isScanningAvailableRequestMessage = createServerMessage(\n  \"isScanningAvailable\"\n);\nexport const isScanningRequestMessage = createServerMessage(\"isScanning\");\nexport const startScanRequestMessage = createServerMessage(\"startScan\");\nexport const stopScanRequestMessage = createServerMessage(\"stopScan\");\nexport const discoveredDevicesMessage =\n  createServerMessage(\"discoveredDevices\");\n","import { createConsole } from \"../../utils/Console.ts\";\nimport { createMessage, Message } from \"../ServerUtils.ts\";\n\nconst _console = createConsole(\"WebSocketUtils\", { log: false });\n\nexport const webSocketPingTimeout = 30_000;\nexport const webSocketReconnectTimeout = 3_000;\n\nexport const WebSocketMessageTypes = [\"ping\", \"pong\", \"serverMessage\"] as const;\nexport type WebSocketMessageType = (typeof WebSocketMessageTypes)[number];\n\nexport type WebSocketMessage =\n  | WebSocketMessageType\n  | Message<WebSocketMessageType>;\nexport function createWebSocketMessage(...messages: WebSocketMessage[]) {\n  _console.log(\"createWebSocketMessage\", ...messages);\n  return createMessage(WebSocketMessageTypes, ...messages);\n}\n\n// STATIC MESSAGES\nexport const webSocketPingMessage = createWebSocketMessage(\"ping\");\nexport const webSocketPongMessage = createWebSocketMessage(\"pong\");\n","import { DeviceInformationTypes } from \"../../DeviceInformationManager.ts\";\nimport {\n  createMessage,\n  Message,\n  MessageLike,\n} from \"../../server/ServerUtils.ts\";\nimport { webSocketPingTimeout } from \"../../server/websocket/WebSocketUtils.ts\";\nimport { createConsole } from \"../../utils/Console.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../../utils/EventUtils.ts\";\nimport { parseMessage } from \"../../utils/ParseUtils.ts\";\nimport Timer from \"../../utils/Timer.ts\";\nimport BaseConnectionManager, {\n  ConnectionType,\n} from \"../BaseConnectionManager.ts\";\nimport type * as ws from \"ws\";\n\nconst _console = createConsole(\"WebSocketConnectionManager\", { log: false });\n\nconst WebSocketMessageTypes = [\n  \"ping\",\n  \"pong\",\n  \"batteryLevel\",\n  \"deviceInformation\",\n  \"message\",\n] as const;\ntype WebSocketMessageType = (typeof WebSocketMessageTypes)[number];\n\ntype WebSocketMessage = WebSocketMessageType | Message<WebSocketMessageType>;\nfunction createWebSocketMessage(...messages: WebSocketMessage[]) {\n  _console.log(\"createWebSocketMessage\", ...messages);\n  return createMessage(WebSocketMessageTypes, ...messages);\n}\n\nconst WebSocketDeviceInformationMessageTypes: WebSocketMessageType[] = [\n  \"deviceInformation\",\n  \"batteryLevel\",\n];\n\nclass WebSocketConnectionManager extends BaseConnectionManager {\n  #bluetoothId?: string;\n  get bluetoothId() {\n    return this.#bluetoothId ?? \"\";\n  }\n\n  defaultMtu = 2 ** 10;\n\n  constructor(\n    ipAddress: string,\n    isSecure: boolean = false,\n    bluetoothId?: string\n  ) {\n    super();\n    this.ipAddress = ipAddress;\n    this.isSecure = isSecure;\n    this.mtu = this.defaultMtu;\n    this.#bluetoothId = bluetoothId;\n  }\n\n  get isAvailable() {\n    return true;\n  }\n\n  static get isSupported() {\n    return true;\n  }\n  static get type(): ConnectionType {\n    return \"webSocket\";\n  }\n\n  // WEBSOCKET\n  #webSocket?: WebSocket;\n  get webSocket() {\n    return this.#webSocket;\n  }\n  set webSocket(newWebSocket) {\n    if (this.#webSocket == newWebSocket) {\n      _console.log(\"redundant webSocket assignment\");\n      return;\n    }\n\n    _console.log(\"assigning webSocket\", newWebSocket);\n\n    if (this.#webSocket) {\n      removeEventListeners(this.#webSocket, this.#boundWebSocketEventListeners);\n      if (this.#webSocket.readyState == this.#webSocket.OPEN) {\n        this.#webSocket.close();\n      }\n    }\n\n    addEventListeners(newWebSocket, this.#boundWebSocketEventListeners);\n    this.#webSocket = newWebSocket;\n\n    _console.log(\"assigned webSocket\");\n  }\n\n  // IP ADDRESS\n  #ipAddress!: string;\n  get ipAddress() {\n    return this.#ipAddress;\n  }\n  set ipAddress(newIpAddress) {\n    this.assertIsNotConnected();\n    if (this.#ipAddress == newIpAddress) {\n      _console.log(`redundnant ipAddress assignment \"${newIpAddress}\"`);\n      return;\n    }\n    this.#ipAddress = newIpAddress;\n    _console.log(`updated ipAddress to \"${this.ipAddress}\"`);\n  }\n\n  // IS SECURE\n  #isSecure = false;\n  get isSecure() {\n    return this.#isSecure;\n  }\n  set isSecure(newIsSecure) {\n    this.assertIsNotConnected();\n    if (this.#isSecure == newIsSecure) {\n      _console.log(`redundant isSecure assignment ${newIsSecure}`);\n      return;\n    }\n    this.#isSecure = newIsSecure;\n    _console.log(`updated isSecure to \"${this.isSecure}\"`);\n  }\n\n  // URL\n  get url() {\n    return `${this.isSecure ? \"wss\" : \"ws\"}://${this.ipAddress}/ws`;\n  }\n\n  // CONNECTION\n  async connect() {\n    await super.connect();\n    this.webSocket = new WebSocket(this.url);\n  }\n  async disconnect() {\n    await super.disconnect();\n    _console.log(\"closing websocket\");\n    this.#pingTimer.stop();\n    this.#webSocket?.close();\n  }\n\n  get canReconnect() {\n    return true;\n  }\n  async reconnect() {\n    await super.reconnect();\n    this.webSocket = new WebSocket(this.url);\n  }\n\n  // BASE CONNECTION MANAGER\n  async sendSmpMessage(data: ArrayBuffer) {\n    super.sendSmpMessage(data);\n    _console.error(\"smp not supported on webSockets\");\n  }\n\n  async sendTxData(data: ArrayBuffer) {\n    await super.sendTxData(data);\n    if (data.byteLength == 0) {\n      return;\n    }\n    this.#sendWebSocketMessage({ type: \"message\", data });\n  }\n\n  // WEBSOCKET MESSAGING\n  #sendMessage(message: MessageLike) {\n    this.assertIsConnected();\n    _console.log(\"sending webSocket message\", message);\n    this.#webSocket!.send(message);\n    this.#pingTimer.restart();\n  }\n\n  #sendWebSocketMessage(...messages: WebSocketMessage[]) {\n    this.#sendMessage(createWebSocketMessage(...messages));\n  }\n\n  // WEBSOCKET EVENTS\n  #boundWebSocketEventListeners: { [eventType: string]: Function } = {\n    open: this.#onWebSocketOpen.bind(this),\n    message: this.#onWebSocketMessage.bind(this),\n    close: this.#onWebSocketClose.bind(this),\n    error: this.#onWebSocketError.bind(this),\n  };\n\n  #onWebSocketOpen(event: ws.Event) {\n    _console.log(\"webSocket.open\", event);\n    this.#pingTimer.start();\n    this.status = \"connected\";\n    this.#requestDeviceInformation();\n  }\n  async #onWebSocketMessage(event: ws.MessageEvent) {\n    // this.#pingTimer.restart();\n    //@ts-expect-error\n    const arrayBuffer = await event.data.arrayBuffer();\n    const dataView = new DataView(arrayBuffer);\n    _console.log(`webSocket.message (${dataView.byteLength} bytes)`);\n    this.#parseWebSocketMessage(dataView);\n  }\n  #onWebSocketClose(event: ws.CloseEvent) {\n    _console.log(\"webSocket.close\", event);\n    this.status = \"notConnected\";\n    this.#pingTimer.stop();\n  }\n  #onWebSocketError(event: ws.ErrorEvent) {\n    _console.error(\"webSocket.error\", event);\n  }\n\n  // PARSING\n  #parseWebSocketMessage(dataView: DataView) {\n    parseMessage(\n      dataView,\n      WebSocketMessageTypes,\n      this.#onMessage.bind(this),\n      null,\n      true\n    );\n  }\n\n  #onMessage(messageType: WebSocketMessageType, dataView: DataView) {\n    _console.log(\n      `received \"${messageType}\" message (${dataView.byteLength} bytes)`\n    );\n    switch (messageType) {\n      case \"ping\":\n        this.#pong();\n        break;\n      case \"pong\":\n        break;\n      case \"batteryLevel\":\n        this.onMessageReceived?.(\"batteryLevel\", dataView);\n        break;\n      case \"deviceInformation\":\n        parseMessage(\n          dataView,\n          DeviceInformationTypes,\n          (deviceInformationType, dataView) => {\n            this.onMessageReceived!(deviceInformationType, dataView);\n          }\n        );\n        break;\n      case \"message\":\n        this.parseRxMessage(dataView);\n        break;\n      default:\n        _console.error(`uncaught messageType \"${messageType}\"`);\n        break;\n    }\n  }\n\n  // PING\n  #pingTimer = new Timer(this.#ping.bind(this), webSocketPingTimeout - 1_000);\n  #ping() {\n    _console.log(\"pinging\");\n    this.#sendWebSocketMessage(\"ping\");\n  }\n  #pong() {\n    _console.log(\"ponging\");\n    this.#sendWebSocketMessage(\"pong\");\n  }\n\n  // DEVICE INFORMATION\n  #requestDeviceInformation() {\n    this.#sendWebSocketMessage(...WebSocketDeviceInformationMessageTypes);\n  }\n}\n\nexport default WebSocketConnectionManager;\n","import { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n  EventListenerMap,\n  EventMap,\n} from \"./utils/EventDispatcher.ts\";\nimport BaseConnectionManager, {\n  TxMessage,\n  TxRxMessageType,\n  ConnectionStatus,\n  ConnectionMessageType,\n  MetaConnectionMessageTypes,\n  BatteryLevelMessageTypes,\n  ConnectionEventTypes,\n  ConnectionStatusEventMessages,\n  ConnectionTypes,\n  ConnectionType,\n  ConnectOptions,\n} from \"./connection/BaseConnectionManager.ts\";\nimport { isInBrowser, isInNode } from \"./utils/environment.ts\";\nimport WebBluetoothConnectionManager from \"./connection/bluetooth/WebBluetoothConnectionManager.ts\";\nimport SensorConfigurationManager, {\n  SendSensorConfigurationMessageCallback,\n  SensorConfiguration,\n  SensorConfigurationEventDispatcher,\n  SensorConfigurationEventMessages,\n  SensorConfigurationEventTypes,\n  SensorConfigurationMessageType,\n  SensorConfigurationMessageTypes,\n} from \"./sensor/SensorConfigurationManager.ts\";\nimport SensorDataManager, {\n  SensorDataEventMessages,\n  SensorDataEventTypes,\n  SensorDataMessageType,\n  SensorDataMessageTypes,\n  SensorType,\n  ContinuousSensorTypes,\n  SensorDataEventDispatcher,\n} from \"./sensor/SensorDataManager.ts\";\nimport VibrationManager, {\n  SendVibrationMessageCallback,\n  VibrationConfiguration,\n} from \"./vibration/VibrationManager.ts\";\nimport FileTransferManager, {\n  FileTransferEventTypes,\n  FileTransferEventMessages,\n  FileTransferEventDispatcher,\n  SendFileTransferMessageCallback,\n  FileTransferMessageTypes,\n  FileTransferMessageType,\n  FileType,\n  FileTypes,\n} from \"./FileTransferManager.ts\";\nimport TfliteManager, {\n  TfliteEventTypes,\n  TfliteEventMessages,\n  TfliteEventDispatcher,\n  SendTfliteMessageCallback,\n  TfliteMessageTypes,\n  TfliteMessageType,\n  TfliteSensorTypes,\n} from \"./TfliteManager.ts\";\nimport FirmwareManager, {\n  FirmwareEventDispatcher,\n  FirmwareEventMessages,\n  FirmwareEventTypes,\n  FirmwareMessageType,\n  FirmwareMessageTypes,\n} from \"./FirmwareManager.ts\";\nimport DeviceInformationManager, {\n  DeviceInformationEventDispatcher,\n  DeviceInformationEventTypes,\n  DeviceInformationType,\n  DeviceInformationTypes,\n  DeviceInformationEventMessages,\n} from \"./DeviceInformationManager.ts\";\nimport InformationManager, {\n  DeviceType,\n  InformationEventDispatcher,\n  InformationEventTypes,\n  InformationMessageType,\n  InformationMessageTypes,\n  InformationEventMessages,\n  SendInformationMessageCallback,\n} from \"./InformationManager.ts\";\nimport { FileLike } from \"./utils/ArrayBufferUtils.ts\";\nimport DeviceManager from \"./DeviceManager.ts\";\nimport WifiManager, {\n  RequiredWifiMessageTypes,\n  SendWifiMessageCallback,\n  WifiEventDispatcher,\n  WifiEventMessages,\n  WifiEventTypes,\n  WifiMessageType,\n  WifiMessageTypes,\n} from \"./WifiManager.ts\";\nimport WebSocketConnectionManager from \"./connection/websocket/WebSocketConnectionManager.ts\";\nimport ClientConnectionManager from \"./connection/ClientConnectionManager.ts\";\n\nconst _console = createConsole(\"Device\", { log: true });\n\nexport const DeviceEventTypes = [\n  \"connectionMessage\",\n  ...ConnectionEventTypes,\n  ...MetaConnectionMessageTypes,\n  ...BatteryLevelMessageTypes,\n  ...InformationEventTypes,\n  ...DeviceInformationEventTypes,\n  ...SensorConfigurationEventTypes,\n  ...SensorDataEventTypes,\n  ...FileTransferEventTypes,\n  ...TfliteEventTypes,\n  ...WifiEventTypes,\n  ...FirmwareEventTypes,\n] as const;\nexport type DeviceEventType = (typeof DeviceEventTypes)[number];\n\nexport interface DeviceEventMessages\n  extends ConnectionStatusEventMessages,\n    DeviceInformationEventMessages,\n    InformationEventMessages,\n    SensorDataEventMessages,\n    SensorConfigurationEventMessages,\n    TfliteEventMessages,\n    FileTransferEventMessages,\n    WifiEventMessages,\n    FirmwareEventMessages {\n  batteryLevel: { batteryLevel: number };\n  connectionMessage: { messageType: ConnectionMessageType; dataView: DataView };\n}\n\nexport type SendMessageCallback<MessageType extends string> = (\n  messages?: { type: MessageType; data?: ArrayBuffer }[],\n  sendImmediately?: boolean\n) => Promise<void>;\n\nexport type SendSmpMessageCallback = (data: ArrayBuffer) => Promise<void>;\n\nexport type DeviceEventDispatcher = EventDispatcher<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\nexport type DeviceEvent = Event<Device, DeviceEventType, DeviceEventMessages>;\nexport type DeviceEventMap = EventMap<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\nexport type DeviceEventListenerMap = EventListenerMap<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\nexport type BoundDeviceEventListeners = BoundEventListeners<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\n\nexport const RequiredInformationConnectionMessages: TxRxMessageType[] = [\n  \"isCharging\",\n  \"getBatteryCurrent\",\n  \"getId\",\n  \"getMtu\",\n\n  \"getName\",\n  \"getType\",\n  \"getCurrentTime\",\n  \"getSensorConfiguration\",\n  \"getSensorScalars\",\n  \"getPressurePositions\",\n\n  \"maxFileLength\",\n  \"getFileLength\",\n  \"getFileChecksum\",\n  \"getFileType\",\n  \"fileTransferStatus\",\n\n  \"getTfliteName\",\n  \"getTfliteTask\",\n  \"getTfliteSampleRate\",\n  \"getTfliteSensorTypes\",\n  \"tfliteIsReady\",\n  \"getTfliteCaptureDelay\",\n  \"getTfliteThreshold\",\n  \"getTfliteInferencingEnabled\",\n\n  \"isWifiAvailable\",\n];\n\nclass Device {\n  get bluetoothId() {\n    return this.#connectionManager?.bluetoothId;\n  }\n\n  get isAvailable() {\n    return this.#connectionManager?.isAvailable;\n  }\n\n  constructor() {\n    this.#deviceInformationManager.eventDispatcher = this\n      .#eventDispatcher as DeviceInformationEventDispatcher;\n\n    this._informationManager.sendMessage = this\n      .sendTxMessages as SendInformationMessageCallback;\n    this._informationManager.eventDispatcher = this\n      .#eventDispatcher as InformationEventDispatcher;\n\n    this.#sensorConfigurationManager.sendMessage = this\n      .sendTxMessages as SendSensorConfigurationMessageCallback;\n    this.#sensorConfigurationManager.eventDispatcher = this\n      .#eventDispatcher as SensorConfigurationEventDispatcher;\n\n    this.#sensorDataManager.eventDispatcher = this\n      .#eventDispatcher as SensorDataEventDispatcher;\n\n    this.#vibrationManager.sendMessage = this\n      .sendTxMessages as SendVibrationMessageCallback;\n\n    this.#tfliteManager.sendMessage = this\n      .sendTxMessages as SendTfliteMessageCallback;\n    this.#tfliteManager.eventDispatcher = this\n      .#eventDispatcher as TfliteEventDispatcher;\n\n    this.#fileTransferManager.sendMessage = this\n      .sendTxMessages as SendFileTransferMessageCallback;\n    this.#fileTransferManager.eventDispatcher = this\n      .#eventDispatcher as FileTransferEventDispatcher;\n\n    this.#wifiManager.sendMessage = this\n      .sendTxMessages as SendWifiMessageCallback;\n    this.#wifiManager.eventDispatcher = this\n      .#eventDispatcher as WifiEventDispatcher;\n\n    this.#firmwareManager.sendMessage = this\n      .sendSmpMessage as SendSmpMessageCallback;\n    this.#firmwareManager.eventDispatcher = this\n      .#eventDispatcher as FirmwareEventDispatcher;\n\n    this.addEventListener(\"getMtu\", () => {\n      this.#firmwareManager.mtu = this.mtu;\n      this.#fileTransferManager.mtu = this.mtu;\n      this.connectionManager!.mtu = this.mtu;\n    });\n    this.addEventListener(\"isWifiAvailable\", () => {\n      if (this.connectionType == \"client\" && !isInNode) {\n        return;\n      }\n      if (this.isWifiAvailable) {\n        this.#wifiManager.requestRequiredInformation();\n      }\n    });\n    DeviceManager.onDevice(this);\n    if (isInBrowser) {\n      window.addEventListener(\"beforeunload\", () => {\n        if (this.isConnected && this.clearSensorConfigurationOnLeave) {\n          this.clearSensorConfiguration();\n        }\n      });\n    }\n    if (isInNode) {\n      /** can add more node leave handlers https://gist.github.com/hyrious/30a878f6e6a057f09db87638567cb11a */\n      process.on(\"exit\", () => {\n        if (this.isConnected && this.clearSensorConfigurationOnLeave) {\n          this.clearSensorConfiguration();\n        }\n      });\n    }\n  }\n\n  static #DefaultConnectionManager(): BaseConnectionManager {\n    return new WebBluetoothConnectionManager();\n  }\n\n  #eventDispatcher: DeviceEventDispatcher = new EventDispatcher(\n    this as Device,\n    DeviceEventTypes\n  );\n  get addEventListener() {\n    return this.#eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.#eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.#eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.#eventDispatcher.waitForEvent;\n  }\n  get removeEventListeners() {\n    return this.#eventDispatcher.removeEventListeners;\n  }\n  get removeAllEventListeners() {\n    return this.#eventDispatcher.removeAllEventListeners;\n  }\n\n  // CONNECTION MANAGER\n\n  #connectionManager?: BaseConnectionManager;\n  get connectionManager() {\n    return this.#connectionManager;\n  }\n  set connectionManager(newConnectionManager) {\n    if (this.connectionManager == newConnectionManager) {\n      _console.log(\"same connectionManager is already assigned\");\n      return;\n    }\n\n    if (this.connectionManager) {\n      this.connectionManager.onStatusUpdated = undefined;\n      this.connectionManager.onMessageReceived = undefined;\n      this.connectionManager.onMessagesReceived = undefined;\n    }\n    if (newConnectionManager) {\n      newConnectionManager.onStatusUpdated =\n        this.#onConnectionStatusUpdated.bind(this);\n      newConnectionManager.onMessageReceived =\n        this.#onConnectionMessageReceived.bind(this);\n      newConnectionManager.onMessagesReceived =\n        this.#onConnectionMessagesReceived.bind(this);\n    }\n\n    this.#connectionManager = newConnectionManager;\n    _console.log(\"assigned new connectionManager\", this.#connectionManager);\n\n    this._informationManager.connectionType = this.connectionType;\n  }\n  async #sendTxMessages(messages?: TxMessage[], sendImmediately?: boolean) {\n    await this.#connectionManager?.sendTxMessages(messages, sendImmediately);\n  }\n  private sendTxMessages = this.#sendTxMessages.bind(this);\n\n  async connect(options?: ConnectOptions) {\n    if (options) {\n      _console.log(\"connect options\", options);\n      switch (options.type) {\n        case \"webBluetooth\":\n          this.connectionManager = new WebBluetoothConnectionManager();\n          break;\n        case \"webSocket\":\n          this.connectionManager = new WebSocketConnectionManager(\n            options.ipAddress,\n            options.isWifiSecure,\n            this.bluetoothId\n          );\n          break;\n        case \"udp\":\n          // FILL\n          break;\n      }\n    }\n    if (!this.connectionManager) {\n      this.connectionManager = Device.#DefaultConnectionManager();\n    }\n    this.#clear();\n\n    if (options?.type == \"client\") {\n      _console.assertWithError(\n        this.connectionType == \"client\",\n        \"expected clientConnectionManager\"\n      );\n      const clientConnectionManager = this\n        .connectionManager as ClientConnectionManager;\n      clientConnectionManager.subType = options.subType;\n      return clientConnectionManager.connect();\n    }\n    return this.connectionManager.connect();\n  }\n  #isConnected = false;\n  get isConnected() {\n    return this.#isConnected;\n  }\n  /** @throws {Error} if not connected */\n  #assertIsConnected() {\n    _console.assertWithError(this.isConnected, \"notConnected\");\n  }\n\n  #didReceiveMessageTypes(messageTypes: ConnectionMessageType[]) {\n    return messageTypes.every((messageType) => {\n      const hasConnectionMessage =\n        this.latestConnectionMessages.has(messageType);\n      if (!hasConnectionMessage) {\n        _console.log(`didn't receive \"${messageType}\" message`);\n      }\n      return hasConnectionMessage;\n    });\n  }\n  get #hasRequiredInformation() {\n    let hasRequiredInformation = this.#didReceiveMessageTypes(\n      RequiredInformationConnectionMessages\n    );\n    if (hasRequiredInformation && this.isWifiAvailable) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredWifiMessageTypes\n      );\n    }\n    return hasRequiredInformation;\n  }\n  #requestRequiredInformation() {\n    _console.log(\"requesting required information\");\n    const messages: TxMessage[] = RequiredInformationConnectionMessages.map(\n      (messageType) => ({\n        type: messageType,\n      })\n    );\n    this.#sendTxMessages(messages);\n  }\n\n  get canReconnect() {\n    return this.connectionManager?.canReconnect;\n  }\n  #assertCanReconnect() {\n    _console.assertWithError(this.canReconnect, \"cannot reconnect to device\");\n  }\n  async reconnect() {\n    this.#assertCanReconnect();\n    this.#clear();\n    return this.connectionManager?.reconnect();\n  }\n\n  static async Connect() {\n    const device = new Device();\n    await device.connect();\n    return device;\n  }\n\n  static #ReconnectOnDisconnection = false;\n  static get ReconnectOnDisconnection() {\n    return this.#ReconnectOnDisconnection;\n  }\n  static set ReconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this.#ReconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n\n  #reconnectOnDisconnection = Device.ReconnectOnDisconnection;\n  get reconnectOnDisconnection() {\n    return this.#reconnectOnDisconnection;\n  }\n  set reconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this.#reconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n  #reconnectIntervalId?: NodeJS.Timeout | number;\n\n  get connectionType() {\n    return this.connectionManager?.type;\n  }\n  async disconnect() {\n    this.#assertIsConnected();\n    if (this.reconnectOnDisconnection) {\n      this.reconnectOnDisconnection = false;\n      this.addEventListener(\n        \"isConnected\",\n        () => {\n          this.reconnectOnDisconnection = true;\n        },\n        { once: true }\n      );\n    }\n\n    return this.connectionManager!.disconnect();\n  }\n\n  toggleConnection() {\n    if (this.isConnected) {\n      this.disconnect();\n    } else if (this.canReconnect) {\n      this.reconnect();\n    } else {\n      this.connect();\n    }\n  }\n\n  get connectionStatus(): ConnectionStatus {\n    switch (this.#connectionManager?.status) {\n      case \"connected\":\n        return this.isConnected ? \"connected\" : \"connecting\";\n      case \"notConnected\":\n      case \"connecting\":\n      case \"disconnecting\":\n        return this.#connectionManager.status;\n      default:\n        return \"notConnected\";\n    }\n  }\n  get isConnectionBusy() {\n    return (\n      this.connectionStatus == \"connecting\" ||\n      this.connectionStatus == \"disconnecting\"\n    );\n  }\n\n  #onConnectionStatusUpdated(connectionStatus: ConnectionStatus) {\n    _console.log({ connectionStatus });\n\n    if (connectionStatus == \"notConnected\") {\n      this.#clearConnection();\n\n      if (this.canReconnect && this.reconnectOnDisconnection) {\n        _console.log(\"starting reconnect interval...\");\n        this.#reconnectIntervalId = setInterval(() => {\n          _console.log(\"attempting reconnect...\");\n          this.reconnect();\n        }, 1000);\n      }\n    } else {\n      if (this.#reconnectIntervalId != undefined) {\n        _console.log(\"clearing reconnect interval\");\n        clearInterval(this.#reconnectIntervalId);\n        this.#reconnectIntervalId = undefined;\n      }\n    }\n\n    this.#checkConnection();\n\n    if (connectionStatus == \"connected\" && !this.#isConnected) {\n      this.#requestRequiredInformation();\n    }\n\n    DeviceManager.OnDeviceConnectionStatusUpdated(this, connectionStatus);\n  }\n\n  #dispatchConnectionEvents(includeIsConnected: boolean = false) {\n    this.#dispatchEvent(\"connectionStatus\", {\n      connectionStatus: this.connectionStatus,\n    });\n    this.#dispatchEvent(this.connectionStatus, {});\n    if (includeIsConnected) {\n      this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n    }\n  }\n  #checkConnection() {\n    this.#isConnected =\n      Boolean(this.connectionManager?.isConnected) &&\n      this.#hasRequiredInformation &&\n      this._informationManager.isCurrentTimeSet;\n\n    switch (this.connectionStatus) {\n      case \"connected\":\n        if (this.#isConnected) {\n          this.#dispatchConnectionEvents(true);\n        }\n        break;\n      case \"notConnected\":\n        this.#dispatchConnectionEvents(true);\n        break;\n      default:\n        this.#dispatchConnectionEvents(false);\n        break;\n    }\n  }\n\n  #clear() {\n    this.#clearConnection();\n    this._informationManager.clear();\n    this.#deviceInformationManager.clear();\n    this.#wifiManager.clear();\n  }\n  #clearConnection() {\n    this.connectionManager?.clear();\n    this.latestConnectionMessages.clear();\n  }\n\n  #onConnectionMessageReceived(\n    messageType: ConnectionMessageType,\n    dataView: DataView\n  ) {\n    _console.log({ messageType, dataView });\n    switch (messageType) {\n      case \"batteryLevel\":\n        const batteryLevel = dataView.getUint8(0);\n        _console.log(\"received battery level\", { batteryLevel });\n        this.#updateBatteryLevel(batteryLevel);\n        break;\n\n      default:\n        if (\n          FileTransferMessageTypes.includes(\n            messageType as FileTransferMessageType\n          )\n        ) {\n          this.#fileTransferManager.parseMessage(\n            messageType as FileTransferMessageType,\n            dataView\n          );\n        } else if (\n          TfliteMessageTypes.includes(messageType as TfliteMessageType)\n        ) {\n          this.#tfliteManager.parseMessage(\n            messageType as TfliteMessageType,\n            dataView\n          );\n        } else if (\n          SensorDataMessageTypes.includes(messageType as SensorDataMessageType)\n        ) {\n          this.#sensorDataManager.parseMessage(\n            messageType as SensorDataMessageType,\n            dataView\n          );\n        } else if (\n          FirmwareMessageTypes.includes(messageType as FirmwareMessageType)\n        ) {\n          this.#firmwareManager.parseMessage(\n            messageType as FirmwareMessageType,\n            dataView\n          );\n        } else if (\n          DeviceInformationTypes.includes(messageType as DeviceInformationType)\n        ) {\n          this.#deviceInformationManager.parseMessage(\n            messageType as DeviceInformationType,\n            dataView\n          );\n        } else if (\n          InformationMessageTypes.includes(\n            messageType as InformationMessageType\n          )\n        ) {\n          this._informationManager.parseMessage(\n            messageType as InformationMessageType,\n            dataView\n          );\n        } else if (\n          SensorConfigurationMessageTypes.includes(\n            messageType as SensorConfigurationMessageType\n          )\n        ) {\n          this.#sensorConfigurationManager.parseMessage(\n            messageType as SensorConfigurationMessageType,\n            dataView\n          );\n        } else if (WifiMessageTypes.includes(messageType as WifiMessageType)) {\n          this.#wifiManager.parseMessage(\n            messageType as WifiMessageType,\n            dataView\n          );\n        } else {\n          throw Error(`uncaught messageType ${messageType}`);\n        }\n    }\n\n    this.latestConnectionMessages.set(messageType, dataView);\n    this.#dispatchEvent(\"connectionMessage\", { messageType, dataView });\n  }\n  #onConnectionMessagesReceived() {\n    if (!this.isConnected && this.#hasRequiredInformation) {\n      this.#checkConnection();\n    }\n    if (this.connectionStatus == \"notConnected\") {\n      return;\n    }\n    this.#sendTxMessages();\n  }\n\n  latestConnectionMessages: Map<ConnectionMessageType, DataView> = new Map();\n\n  // DEVICE INFORMATION\n  #deviceInformationManager = new DeviceInformationManager();\n  get deviceInformation() {\n    return this.#deviceInformationManager.information;\n  }\n\n  // BATTERY LEVEL\n  #batteryLevel = 0;\n  get batteryLevel() {\n    return this.#batteryLevel;\n  }\n  #updateBatteryLevel(updatedBatteryLevel: number) {\n    _console.assertTypeWithError(updatedBatteryLevel, \"number\");\n    if (this.#batteryLevel == updatedBatteryLevel) {\n      _console.log(`duplicate batteryLevel assignment ${updatedBatteryLevel}`);\n      return;\n    }\n    this.#batteryLevel = updatedBatteryLevel;\n    _console.log({ updatedBatteryLevel: this.#batteryLevel });\n    this.#dispatchEvent(\"batteryLevel\", { batteryLevel: this.#batteryLevel });\n  }\n\n  // INFORMATION\n  /** @private */\n  _informationManager = new InformationManager();\n\n  get id() {\n    return this._informationManager.id;\n  }\n\n  get isCharging() {\n    return this._informationManager.isCharging;\n  }\n  get batteryCurrent() {\n    return this._informationManager.batteryCurrent;\n  }\n  get getBatteryCurrent() {\n    return this._informationManager.getBatteryCurrent;\n  }\n\n  get name() {\n    return this._informationManager.name;\n  }\n  get setName() {\n    return this._informationManager.setName;\n  }\n\n  get type() {\n    return this._informationManager.type;\n  }\n  get setType() {\n    return this._informationManager.setType;\n  }\n\n  get isInsole() {\n    return this._informationManager.isInsole;\n  }\n  get isGlove() {\n    return this._informationManager.isGlove;\n  }\n  get side() {\n    return this._informationManager.side;\n  }\n\n  get mtu() {\n    return this._informationManager.mtu;\n  }\n\n  // SENSOR TYPES\n  get sensorTypes() {\n    return Object.keys(this.sensorConfiguration) as SensorType[];\n  }\n  get continuousSensorTypes() {\n    return ContinuousSensorTypes.filter((sensorType) =>\n      this.sensorTypes.includes(sensorType)\n    );\n  }\n\n  // SENSOR CONFIGURATION\n\n  #sensorConfigurationManager = new SensorConfigurationManager();\n\n  get sensorConfiguration() {\n    return this.#sensorConfigurationManager.configuration;\n  }\n\n  async setSensorConfiguration(\n    newSensorConfiguration: SensorConfiguration,\n    clearRest?: boolean\n  ) {\n    await this.#sensorConfigurationManager.setConfiguration(\n      newSensorConfiguration,\n      clearRest\n    );\n  }\n\n  async clearSensorConfiguration() {\n    return this.#sensorConfigurationManager.clearSensorConfiguration();\n  }\n\n  static #ClearSensorConfigurationOnLeave = true;\n  static get ClearSensorConfigurationOnLeave() {\n    return this.#ClearSensorConfigurationOnLeave;\n  }\n  static set ClearSensorConfigurationOnLeave(\n    newClearSensorConfigurationOnLeave\n  ) {\n    _console.assertTypeWithError(newClearSensorConfigurationOnLeave, \"boolean\");\n    this.#ClearSensorConfigurationOnLeave = newClearSensorConfigurationOnLeave;\n  }\n\n  #clearSensorConfigurationOnLeave = Device.ClearSensorConfigurationOnLeave;\n  get clearSensorConfigurationOnLeave() {\n    return this.#clearSensorConfigurationOnLeave;\n  }\n  set clearSensorConfigurationOnLeave(newClearSensorConfigurationOnLeave) {\n    _console.assertTypeWithError(newClearSensorConfigurationOnLeave, \"boolean\");\n    this.#clearSensorConfigurationOnLeave = newClearSensorConfigurationOnLeave;\n  }\n\n  // PRESSURE\n  get numberOfPressureSensors() {\n    return this.#sensorDataManager.pressureSensorDataManager.numberOfSensors;\n  }\n\n  // SENSOR DATA\n  #sensorDataManager = new SensorDataManager();\n  resetPressureRange() {\n    this.#sensorDataManager.pressureSensorDataManager.resetRange();\n  }\n\n  // VIBRATION\n  #vibrationManager = new VibrationManager();\n  async triggerVibration(\n    vibrationConfigurations: VibrationConfiguration[],\n    sendImmediately?: boolean\n  ) {\n    this.#vibrationManager.triggerVibration(\n      vibrationConfigurations,\n      sendImmediately\n    );\n  }\n\n  // FILE TRANSFER\n  #fileTransferManager = new FileTransferManager();\n\n  get maxFileLength() {\n    return this.#fileTransferManager.maxLength;\n  }\n  get validFileTypes() {\n    return FileTypes.filter((fileType) => {\n      if (fileType.includes(\"wifi\") && !this.isWifiAvailable) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  async sendFile(fileType: FileType, file: FileLike) {\n    _console.assertWithError(\n      this.validFileTypes.includes(fileType),\n      `invalid fileType ${fileType}`\n    );\n    const promise = this.waitForEvent(\"fileTransferComplete\");\n    this.#fileTransferManager.send(fileType, file);\n    await promise;\n  }\n  async receiveFile(fileType: FileType) {\n    const promise = this.waitForEvent(\"fileTransferComplete\");\n    this.#fileTransferManager.receive(fileType);\n    await promise;\n  }\n\n  get fileTransferStatus() {\n    return this.#fileTransferManager.status;\n  }\n\n  cancelFileTransfer() {\n    this.#fileTransferManager.cancel();\n  }\n\n  // TFLITE\n  #tfliteManager = new TfliteManager();\n\n  get tfliteName() {\n    return this.#tfliteManager.name;\n  }\n  get setTfliteName() {\n    return this.#tfliteManager.setName;\n  }\n\n  // TFLITE MODEL CONFIG\n  get tfliteTask() {\n    return this.#tfliteManager.task;\n  }\n  get setTfliteTask() {\n    return this.#tfliteManager.setTask;\n  }\n  get tfliteSampleRate() {\n    return this.#tfliteManager.sampleRate;\n  }\n  get setTfliteSampleRate() {\n    return this.#tfliteManager.setSampleRate;\n  }\n  get tfliteSensorTypes() {\n    return this.#tfliteManager.sensorTypes;\n  }\n  get allowedTfliteSensorTypes() {\n    return this.sensorTypes.filter((sensorType) =>\n      TfliteSensorTypes.includes(sensorType)\n    );\n  }\n  get setTfliteSensorTypes() {\n    return this.#tfliteManager.setSensorTypes;\n  }\n  get tfliteIsReady() {\n    return this.#tfliteManager.isReady;\n  }\n\n  // TFLITE INFERENCING\n\n  get tfliteInferencingEnabled() {\n    return this.#tfliteManager.inferencingEnabled;\n  }\n  get setTfliteInferencingEnabled() {\n    return this.#tfliteManager.setInferencingEnabled;\n  }\n  async enableTfliteInferencing() {\n    return this.setTfliteInferencingEnabled(true);\n  }\n  async disableTfliteInferencing() {\n    return this.setTfliteInferencingEnabled(false);\n  }\n  get toggleTfliteInferencing() {\n    return this.#tfliteManager.toggleInferencingEnabled;\n  }\n\n  // TFLITE INFERENCE CONFIG\n\n  get tfliteCaptureDelay() {\n    return this.#tfliteManager.captureDelay;\n  }\n  get setTfliteCaptureDelay() {\n    return this.#tfliteManager.setCaptureDelay;\n  }\n  get tfliteThreshold() {\n    return this.#tfliteManager.threshold;\n  }\n  get setTfliteThreshold() {\n    return this.#tfliteManager.setThreshold;\n  }\n\n  // FIRMWARE MANAGER\n\n  #firmwareManager = new FirmwareManager();\n\n  get canUpdateFirmware() {\n    return this.#connectionManager?.canUpdateFirmware;\n  }\n  #assertCanUpdateFirmware() {\n    _console.assertWithError(this.canUpdateFirmware, \"can't update firmware\");\n  }\n\n  #sendSmpMessage(data: ArrayBuffer) {\n    this.#assertCanUpdateFirmware();\n    return this.#connectionManager!.sendSmpMessage(data);\n  }\n  private sendSmpMessage = this.#sendSmpMessage.bind(this);\n\n  get uploadFirmware() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.uploadFirmware;\n  }\n  get canReset() {\n    return this.canUpdateFirmware;\n  }\n  async reset() {\n    _console.assertWithError(\n      this.canReset,\n      \"reset is not enabled for this device\"\n    );\n    await this.#firmwareManager.reset();\n    return this.#connectionManager!.disconnect();\n  }\n  get firmwareStatus() {\n    return this.#firmwareManager.status;\n  }\n  get getFirmwareImages() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.getImages;\n  }\n  get firmwareImages() {\n    return this.#firmwareManager.images;\n  }\n  get eraseFirmwareImage() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.eraseImage;\n  }\n  get confirmFirmwareImage() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.confirmImage;\n  }\n  get testFirmwareImage() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.testImage;\n  }\n\n  // SERVER SIDE\n  #isServerSide = false;\n  get isServerSide() {\n    return this.#isServerSide;\n  }\n  set isServerSide(newIsServerSide) {\n    if (this.#isServerSide == newIsServerSide) {\n      _console.log(\"redundant isServerSide assignment\");\n      return;\n    }\n    _console.log({ newIsServerSide });\n    this.#isServerSide = newIsServerSide;\n\n    this.#fileTransferManager.isServerSide = this.isServerSide;\n  }\n\n  // UKATON\n  get isUkaton() {\n    return this.deviceInformation.modelNumber.includes(\"Ukaton\");\n  }\n\n  // WIFI MANAGER\n  #wifiManager = new WifiManager();\n  get isWifiAvailable() {\n    return this.#wifiManager.isWifiAvailable;\n  }\n  get wifiSSID() {\n    return this.#wifiManager.wifiSSID;\n  }\n  async setWifiSSID(newWifiSSID: string) {\n    return this.#wifiManager.setWifiSSID(newWifiSSID);\n  }\n  get wifiPassword() {\n    return this.#wifiManager.wifiPassword;\n  }\n  async setWifiPassword(newWifiPassword: string) {\n    return this.#wifiManager.setWifiPassword(newWifiPassword);\n  }\n  get isWifiConnected() {\n    return this.#wifiManager.isWifiConnected;\n  }\n  get ipAddress() {\n    return this.#wifiManager.ipAddress;\n  }\n  get wifiConnectionEnabled() {\n    return this.#wifiManager.wifiConnectionEnabled;\n  }\n  get enableWifiConnection() {\n    return this.#wifiManager.enableWifiConnection;\n  }\n  get setWifiConnectionEnabled() {\n    return this.#wifiManager.setWifiConnectionEnabled;\n  }\n  get disableWifiConnection() {\n    return this.#wifiManager.disableWifiConnection;\n  }\n  get toggleWifiConnection() {\n    return this.#wifiManager.toggleWifiConnection;\n  }\n  get isWifiSecure() {\n    return this.#wifiManager.isWifiSecure;\n  }\n\n  async reconnectViaWebSockets() {\n    _console.assertWithError(this.isWifiConnected, \"wifi is not connected\");\n    _console.assertWithError(\n      this.connectionType != \"webSocket\",\n      \"already connected via webSockets\"\n    );\n    _console.assertTypeWithError(this.ipAddress, \"string\");\n    _console.log(\"reconnecting via websockets...\");\n    await this.disconnect();\n    await this.connect({\n      type: \"webSocket\",\n      ipAddress: this.ipAddress!,\n      isWifiSecure: this.isWifiSecure,\n    });\n  }\n}\n\nexport default Device;\n","import { createConsole } from \"../utils/Console.ts\";\nimport CenterOfPressureHelper from \"../utils/CenterOfPressureHelper.ts\";\nimport { PressureData, PressureSensorPosition, PressureSensorValue } from \"../sensor/PressureSensorDataManager.ts\";\nimport { CenterOfPressure } from \"../utils/CenterOfPressureHelper.ts\";\nimport { Side, Sides } from \"../InformationManager.ts\";\nimport { DeviceEventMap } from \"../Device.ts\";\nimport { RangeHelper } from \"../BS.ts\";\n\nconst _console = createConsole(\"DevicePairPressureSensorDataManager\", { log: false });\n\nexport type DevicePairRawPressureData = { [side in Side]: PressureData };\n\nexport interface DevicePairPressureData {\n  sensors: { [key in Side]: PressureSensorValue[] };\n  scaledSum: number;\n  normalizedSum: number;\n  center?: CenterOfPressure;\n  normalizedCenter?: CenterOfPressure;\n}\n\nexport interface DevicePairPressureDataEventMessage {\n  pressure: DevicePairPressureData;\n}\n\nexport interface DevicePairPressureDataEventMessages {\n  pressure: DevicePairPressureDataEventMessage;\n}\n\nclass DevicePairPressureSensorDataManager {\n  #rawPressure: Partial<DevicePairRawPressureData> = {};\n\n  #centerOfPressureHelper = new CenterOfPressureHelper();\n\n  #normalizedSumRangeHelper = new RangeHelper();\n\n  constructor() {\n    this.resetPressureRange();\n  }\n\n  resetPressureRange() {\n    this.#centerOfPressureHelper.reset();\n    this.#normalizedSumRangeHelper.reset();\n  }\n\n  onDevicePressureData(event: DeviceEventMap[\"pressure\"]) {\n    const { pressure } = event.message;\n    const { side } = event.target;\n    _console.log({ pressure, side });\n    this.#rawPressure[side] = pressure;\n    if (this.#hasAllPressureData) {\n      return this.#updatePressureData();\n    } else {\n      _console.log(\"doesn't have all pressure data yet...\");\n    }\n  }\n\n  get #hasAllPressureData() {\n    return Sides.every((side) => side in this.#rawPressure);\n  }\n\n  #updatePressureData() {\n    const pressure: DevicePairPressureData = { scaledSum: 0, normalizedSum: 0, sensors: { left: [], right: [] } };\n\n    Sides.forEach((side) => {\n      const sidePressure = this.#rawPressure[side]!;\n      pressure.scaledSum += sidePressure.scaledSum;\n      //pressure.normalizedSum += this.#rawPressure[side]!.normalizedSum;\n    });\n    pressure.normalizedSum += this.#normalizedSumRangeHelper.updateAndGetNormalization(pressure.scaledSum, false);\n\n    if (pressure.scaledSum > 0) {\n      pressure.center = { x: 0, y: 0 };\n      Sides.forEach((side) => {\n        const sidePressure = this.#rawPressure[side]!;\n\n        if (false) {\n          const sidePressureWeight = sidePressure.scaledSum / pressure.scaledSum;\n          if (sidePressureWeight > 0) {\n            if (sidePressure.normalizedCenter?.y != undefined) {\n              pressure.center!.y += sidePressure.normalizedCenter!.y * sidePressureWeight;\n            }\n            if (side == \"right\") {\n              pressure.center!.x = sidePressureWeight;\n            }\n          }\n        } else {\n          sidePressure.sensors.forEach((sensor) => {\n            const _sensor: PressureSensorValue = { ...sensor };\n            _sensor.weightedValue = sensor.scaledValue / pressure.scaledSum;\n            let { x, y } = sensor.position;\n            x /= 2;\n            if (side == \"right\") {\n              x += 0.5;\n            }\n            _sensor.position = { x, y };\n            pressure.center!.x += _sensor.position.x * _sensor.weightedValue;\n            pressure.center!.y += _sensor.position.y * _sensor.weightedValue;\n            pressure.sensors[side].push(_sensor);\n          });\n        }\n      });\n\n      pressure.normalizedCenter = this.#centerOfPressureHelper.updateAndGetNormalization(pressure.center, false);\n    }\n\n    _console.log({ devicePairPressure: pressure });\n\n    return pressure;\n  }\n}\n\nexport default DevicePairPressureSensorDataManager;\n","import DevicePairPressureSensorDataManager, {\n  DevicePairPressureDataEventMessages,\n} from \"./DevicePairPressureSensorDataManager.ts\";\nimport { createConsole } from \"../utils/Console.ts\";\nimport { Side } from \"../InformationManager.ts\";\nimport { SensorType } from \"../sensor/SensorDataManager.ts\";\nimport { DeviceEventMap } from \"../Device.ts\";\nimport EventDispatcher from \"../utils/EventDispatcher.ts\";\nimport DevicePair from \"./DevicePair.ts\";\nimport { AddKeysAsPropertyToInterface, ExtendInterfaceValues, ValueOf } from \"../utils/TypeScriptUtils.ts\";\n\nconst _console = createConsole(\"DevicePairSensorDataManager\", { log: false });\n\nexport const DevicePairSensorTypes = [\"pressure\", \"sensorData\"] as const;\nexport type DevicePairSensorType = (typeof DevicePairSensorTypes)[number];\n\nexport const DevicePairSensorDataEventTypes = DevicePairSensorTypes;\nexport type DevicePairSensorDataEventType = (typeof DevicePairSensorDataEventTypes)[number];\n\nexport type DevicePairSensorDataTimestamps = { [side in Side]: number };\n\ninterface BaseDevicePairSensorDataEventMessage {\n  timestamps: DevicePairSensorDataTimestamps;\n}\n\ntype BaseDevicePairSensorDataEventMessages = DevicePairPressureDataEventMessages;\ntype _DevicePairSensorDataEventMessages = ExtendInterfaceValues<\n  AddKeysAsPropertyToInterface<BaseDevicePairSensorDataEventMessages, \"sensorType\">,\n  BaseDevicePairSensorDataEventMessage\n>;\n\nexport type DevicePairSensorDataEventMessage = ValueOf<_DevicePairSensorDataEventMessages>;\ninterface AnyDevicePairSensorDataEventMessages {\n  sensorData: DevicePairSensorDataEventMessage;\n}\nexport type DevicePairSensorDataEventMessages = _DevicePairSensorDataEventMessages &\n  AnyDevicePairSensorDataEventMessages;\n\nexport type DevicePairSensorDataEventDispatcher = EventDispatcher<\n  DevicePair,\n  DevicePairSensorDataEventType,\n  DevicePairSensorDataEventMessages\n>;\n\nclass DevicePairSensorDataManager {\n  eventDispatcher!: DevicePairSensorDataEventDispatcher;\n  get dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n\n  #timestamps: { [sensorType in SensorType]?: Partial<DevicePairSensorDataTimestamps> } = {};\n\n  pressureSensorDataManager = new DevicePairPressureSensorDataManager();\n  resetPressureRange() {\n    this.pressureSensorDataManager.resetPressureRange();\n  }\n\n  onDeviceSensorData(event: DeviceEventMap[\"sensorData\"]) {\n    const { timestamp, sensorType } = event.message;\n\n    _console.log({ sensorType, timestamp, event });\n\n    if (!this.#timestamps[sensorType]) {\n      this.#timestamps[sensorType] = {};\n    }\n    this.#timestamps[sensorType]![event.target.side] = timestamp;\n\n    let value;\n    switch (sensorType) {\n      case \"pressure\":\n        value = this.pressureSensorDataManager.onDevicePressureData(event as unknown as DeviceEventMap[\"pressure\"]);\n        break;\n      default:\n        _console.log(`uncaught sensorType \"${sensorType}\"`);\n        break;\n    }\n\n    if (value) {\n      const timestamps = Object.assign({}, this.#timestamps[sensorType]) as DevicePairSensorDataTimestamps;\n      // @ts-expect-error\n      this.dispatchEvent(sensorType as DevicePairSensorDataEventType, { sensorType, timestamps, [sensorType]: value });\n      // @ts-expect-error\n      this.dispatchEvent(\"sensorData\", { sensorType, timestamps, [sensorType]: value });\n    } else {\n      _console.log(\"no value received\");\n    }\n  }\n}\n\nexport default DevicePairSensorDataManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n  EventListenerMap,\n  EventMap,\n} from \"../utils/EventDispatcher.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../utils/EventUtils.ts\";\nimport Device, {\n  DeviceEvent,\n  DeviceEventType,\n  DeviceEventMessages,\n  DeviceEventTypes,\n  BoundDeviceEventListeners,\n  DeviceEventMap,\n} from \"../Device.ts\";\nimport DevicePairSensorDataManager, {\n  DevicePairSensorDataEventDispatcher,\n} from \"./DevicePairSensorDataManager.ts\";\nimport { capitalizeFirstCharacter } from \"../utils/stringUtils.ts\";\nimport { Side, Sides } from \"../InformationManager.ts\";\nimport { VibrationConfiguration } from \"../vibration/VibrationManager.ts\";\nimport { SensorConfiguration } from \"../sensor/SensorConfigurationManager.ts\";\nimport {\n  DevicePairSensorDataEventMessages,\n  DevicePairSensorDataEventTypes,\n} from \"./DevicePairSensorDataManager.ts\";\nimport {\n  AddPrefixToInterfaceKeys,\n  ExtendInterfaceValues,\n  KeyOf,\n} from \"../utils/TypeScriptUtils.ts\";\nimport DeviceManager from \"../DeviceManager.ts\";\n\nconst _console = createConsole(\"DevicePair\", { log: false });\n\ninterface BaseDevicePairDeviceEventMessage {\n  device: Device;\n  side: Side;\n}\ntype DevicePairDeviceEventMessages = ExtendInterfaceValues<\n  AddPrefixToInterfaceKeys<DeviceEventMessages, \"device\">,\n  BaseDevicePairDeviceEventMessage\n>;\ntype DevicePairDeviceEventType = KeyOf<DevicePairDeviceEventMessages>;\nfunction getDevicePairDeviceEventType(deviceEventType: DeviceEventType) {\n  return `device${capitalizeFirstCharacter(\n    deviceEventType\n  )}` as DevicePairDeviceEventType;\n}\nconst DevicePairDeviceEventTypes = DeviceEventTypes.map((eventType) =>\n  getDevicePairDeviceEventType(eventType)\n) as DevicePairDeviceEventType[];\n\nexport const DevicePairConnectionEventTypes = [\"isConnected\"] as const;\nexport type DevicePairConnectionEventType =\n  (typeof DevicePairConnectionEventTypes)[number];\n\nexport interface DevicePairConnectionEventMessages {\n  isConnected: { isConnected: boolean };\n}\n\nexport const DevicePairEventTypes = [\n  ...DevicePairConnectionEventTypes,\n  ...DevicePairSensorDataEventTypes,\n  ...DevicePairDeviceEventTypes,\n] as const;\nexport type DevicePairEventType = (typeof DevicePairEventTypes)[number];\n\nexport type DevicePairEventMessages = DevicePairConnectionEventMessages &\n  DevicePairSensorDataEventMessages &\n  DevicePairDeviceEventMessages;\n\nexport type DevicePairEventDispatcher = EventDispatcher<\n  DevicePair,\n  DevicePairEventType,\n  DevicePairEventMessages\n>;\nexport type DevicePairEventMap = EventMap<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\nexport type DevicePairEventListenerMap = EventListenerMap<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\nexport type DevicePairEvent = Event<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\nexport type BoundDevicePairEventListeners = BoundEventListeners<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\n\nexport const DevicePairTypes = [\"insoles\", \"gloves\"] as const;\nexport type DevicePairType = (typeof DevicePairTypes)[number];\n\nclass DevicePair {\n  constructor(type: DevicePairType) {\n    this.#type = type;\n    this.#sensorDataManager.eventDispatcher = this\n      .#eventDispatcher as DevicePairSensorDataEventDispatcher;\n  }\n\n  get sides() {\n    return Sides;\n  }\n\n  #type: DevicePairType;\n  get type() {\n    return this.#type;\n  }\n\n  #eventDispatcher: DevicePairEventDispatcher = new EventDispatcher(\n    this as DevicePair,\n    DevicePairEventTypes\n  );\n  get addEventListener() {\n    return this.#eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.#eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.#eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.#eventDispatcher.waitForEvent;\n  }\n  get removeEventListeners() {\n    return this.#eventDispatcher.removeEventListeners;\n  }\n  get removeAllEventListeners() {\n    return this.#eventDispatcher.removeAllEventListeners;\n  }\n\n  // SIDES\n  #left?: Device;\n  get left() {\n    return this.#left;\n  }\n\n  #right?: Device;\n  get right() {\n    return this.#right;\n  }\n\n  get isConnected() {\n    return Sides.every((side) => this[side]?.isConnected);\n  }\n  get isPartiallyConnected() {\n    return Sides.some((side) => this[side]?.isConnected);\n  }\n  get isHalfConnected() {\n    return this.isPartiallyConnected && !this.isConnected;\n  }\n  #assertIsConnected() {\n    _console.assertWithError(this.isConnected, \"devicePair must be connected\");\n  }\n\n  #isDeviceCorrectType(device: Device) {\n    switch (this.type) {\n      case \"insoles\":\n        return device.isInsole;\n      case \"gloves\":\n        return device.isGlove;\n    }\n  }\n\n  assignDevice(device: Device) {\n    if (!this.#isDeviceCorrectType(device)) {\n      _console.log(\n        `device is incorrect type ${device.type} for ${this.type} devicePair`\n      );\n      return;\n    }\n    const side = device.side;\n\n    const currentDevice = this[side];\n\n    if (device == currentDevice) {\n      _console.log(\"device already assigned\");\n      return;\n    }\n\n    if (currentDevice) {\n      this.#removeDeviceEventListeners(currentDevice);\n    }\n    this.#addDeviceEventListeners(device);\n\n    switch (side) {\n      case \"left\":\n        this.#left = device;\n        break;\n      case \"right\":\n        this.#right = device;\n        break;\n    }\n\n    _console.log(`assigned ${side} ${this.type} device`, device);\n\n    this.resetPressureRange();\n\n    this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n    this.#dispatchEvent(\"deviceIsConnected\", {\n      device,\n      isConnected: device.isConnected,\n      side,\n    });\n\n    return currentDevice;\n  }\n\n  #addDeviceEventListeners(device: Device) {\n    addEventListeners(device, this.#boundDeviceEventListeners);\n    DeviceEventTypes.forEach((deviceEventType) => {\n      // @ts-expect-error\n      device.addEventListener(\n        deviceEventType,\n        this.#redispatchDeviceEvent.bind(this)\n      );\n    });\n  }\n  #removeDeviceEventListeners(device: Device) {\n    removeEventListeners(device, this.#boundDeviceEventListeners);\n    DeviceEventTypes.forEach((deviceEventType) => {\n      device.removeEventListener(\n        // @ts-expect-error\n        deviceEventType,\n        this.#redispatchDeviceEvent.bind(this)\n      );\n    });\n  }\n\n  #removeDevice(device: Device) {\n    const foundDevice = Sides.some((side) => {\n      if (this[side] != device) {\n        return false;\n      }\n\n      _console.log(`removing ${side} ${this.type} device`, device);\n      removeEventListeners(device, this.#boundDeviceEventListeners);\n\n      switch (side) {\n        case \"left\":\n          this.#left = undefined;\n          break;\n        case \"right\":\n          this.#right = undefined;\n          break;\n      }\n\n      return true;\n    });\n    if (foundDevice) {\n      this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n    }\n    return foundDevice;\n  }\n\n  #boundDeviceEventListeners: BoundDeviceEventListeners = {\n    isConnected: this.#onDeviceIsConnected.bind(this),\n    sensorData: this.#onDeviceSensorData.bind(this),\n    getType: this.#onDeviceType.bind(this),\n  };\n\n  #redispatchDeviceEvent(deviceEvent: DeviceEvent) {\n    const { type, target: device, message } = deviceEvent;\n    this.#dispatchEvent(getDevicePairDeviceEventType(type), {\n      ...message,\n      device,\n      side: device.side,\n    });\n  }\n\n  #onDeviceIsConnected(deviceEvent: DeviceEventMap[\"isConnected\"]) {\n    this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n  }\n\n  #onDeviceType(deviceEvent: DeviceEventMap[\"getType\"]) {\n    const { target: device } = deviceEvent;\n    if (this[device.side] == device) {\n      return;\n    }\n    const foundDevice = this.#removeDevice(device);\n    if (!foundDevice) {\n      return;\n    }\n    this.assignDevice(device);\n  }\n\n  // SENSOR CONFIGURATION\n  async setSensorConfiguration(sensorConfiguration: SensorConfiguration) {\n    for (let i = 0; i < Sides.length; i++) {\n      const side = Sides[i];\n      if (this[side]?.isConnected) {\n        await this[side].setSensorConfiguration(sensorConfiguration);\n      }\n    }\n  }\n\n  // SENSOR DATA\n  #sensorDataManager = new DevicePairSensorDataManager();\n  #onDeviceSensorData(deviceEvent: DeviceEventMap[\"sensorData\"]) {\n    if (this.isConnected) {\n      this.#sensorDataManager.onDeviceSensorData(deviceEvent);\n    }\n  }\n  resetPressureRange() {\n    Sides.forEach((side) => this[side]?.resetPressureRange());\n    this.#sensorDataManager.resetPressureRange();\n  }\n\n  // VIBRATION\n  async triggerVibration(\n    vibrationConfigurations: VibrationConfiguration[],\n    sendImmediately?: boolean\n  ) {\n    const promises = Sides.map((side) => {\n      return this[side]?.triggerVibration(\n        vibrationConfigurations,\n        sendImmediately\n      );\n    }).filter(Boolean);\n    return Promise.allSettled(promises);\n  }\n\n  // SHARED INSTANCES\n  static #insoles = new DevicePair(\"insoles\");\n  static get insoles() {\n    return this.#insoles;\n  }\n  static #gloves = new DevicePair(\"gloves\");\n  static get gloves() {\n    return this.#gloves;\n  }\n  static {\n    DeviceManager.AddEventListener(\"deviceConnected\", (event) => {\n      const { device } = event.message;\n      if (device.isInsole) {\n        this.#insoles.assignDevice(device);\n      }\n      if (device.isGlove) {\n        this.#gloves.assignDevice(device);\n      }\n    });\n  }\n}\n\nexport default DevicePair;\n","export function spacesToPascalCase(string: string) {\n  return string\n    .replace(/(?:^\\w|\\b\\w)/g, function (match) {\n      return match.toUpperCase();\n    })\n    .replace(/\\s+/g, \"\");\n}\n\nexport function capitalizeFirstCharacter(string: string) {\n  return string[0].toUpperCase() + string.slice(1);\n}\n","import { createConsole } from \"../utils/Console.ts\";\nimport { isInBrowser } from \"../utils/environment.ts\";\nimport BaseConnectionManager, {\n  ConnectionType,\n  ConnectionMessageType,\n  ClientConnectionType,\n} from \"./BaseConnectionManager.ts\";\nimport { DeviceEventTypes } from \"../Device.ts\";\nimport { parseMessage } from \"../utils/ParseUtils.ts\";\nimport { DeviceInformationTypes } from \"../DeviceInformationManager.ts\";\nimport { DeviceEventType } from \"../Device.ts\";\nimport { ClientDeviceMessage } from \"../server/ServerUtils.ts\";\nimport BaseClient from \"../server/BaseClient.ts\";\nimport { DiscoveredDevice } from \"../BS.ts\";\n\nconst _console = createConsole(\"ClientConnectionManager\", { log: false });\n\nexport type SendClientMessageCallback = (\n  ...messages: ClientDeviceMessage[]\n) => void;\n\nexport type SendClientConnectMessageCallback = (\n  connectionType?: ClientConnectionType\n) => void;\n\nconst ClientDeviceInformationMessageTypes: ConnectionMessageType[] = [\n  ...DeviceInformationTypes,\n  \"batteryLevel\",\n];\n\nclass ClientConnectionManager extends BaseConnectionManager {\n  static get isSupported() {\n    return isInBrowser;\n  }\n  static get type(): ConnectionType {\n    return \"client\";\n  }\n\n  subType?: ClientConnectionType;\n\n  get canUpdateFirmware() {\n    // FIX - how to know if it has an smp characteristic?\n    return false;\n  }\n\n  client!: BaseClient;\n  discoveredDevice!: DiscoveredDevice;\n\n  #bluetoothId!: string;\n  get bluetoothId() {\n    return this.#bluetoothId!;\n  }\n  set bluetoothId(newBluetoothId) {\n    _console.assertTypeWithError(newBluetoothId, \"string\");\n    if (this.#bluetoothId == newBluetoothId) {\n      _console.log(\"redundant bluetoothId assignment\");\n      return;\n    }\n    this.#bluetoothId = newBluetoothId;\n  }\n\n  #isConnected = false;\n  get isConnected() {\n    return this.#isConnected;\n  }\n  set isConnected(newIsConnected) {\n    _console.assertTypeWithError(newIsConnected, \"boolean\");\n    if (this.#isConnected == newIsConnected) {\n      _console.log(\"redundant newIsConnected assignment\", newIsConnected);\n      return;\n    }\n    this.#isConnected = newIsConnected;\n\n    this.status = this.#isConnected ? \"connected\" : \"notConnected\";\n\n    if (this.isConnected) {\n      this.#requestDeviceInformation();\n    }\n  }\n\n  get isAvailable() {\n    return this.client.isConnected;\n  }\n\n  async connect() {\n    await super.connect();\n    this.sendClientConnectMessage(this.subType);\n  }\n  async disconnect() {\n    await super.disconnect();\n    this.sendClientDisconnectMessage();\n  }\n\n  get canReconnect() {\n    return true;\n  }\n  async reconnect() {\n    await super.reconnect();\n    this.sendClientConnectMessage();\n  }\n\n  sendClientMessage!: SendClientMessageCallback;\n  sendClientConnectMessage!: SendClientConnectMessageCallback;\n  sendClientDisconnectMessage!: Function;\n\n  async sendSmpMessage(data: ArrayBuffer) {\n    super.sendSmpMessage(data);\n    this.sendClientMessage({ type: \"smp\", data });\n  }\n\n  async sendTxData(data: ArrayBuffer) {\n    super.sendTxData(data);\n    if (data.byteLength == 0) {\n      return;\n    }\n    this.sendClientMessage({ type: \"tx\", data });\n  }\n\n  #requestDeviceInformation() {\n    this.sendClientMessage(...ClientDeviceInformationMessageTypes);\n  }\n\n  onClientMessage(dataView: DataView) {\n    _console.log({ dataView });\n    parseMessage(\n      dataView,\n      DeviceEventTypes,\n      this.#onClientMessageCallback.bind(this),\n      null,\n      true\n    );\n    this.onMessagesReceived!();\n  }\n\n  #onClientMessageCallback(messageType: DeviceEventType, dataView: DataView) {\n    let byteOffset = 0;\n\n    _console.log({ messageType }, dataView);\n\n    switch (messageType) {\n      case \"isConnected\":\n        const isConnected = Boolean(dataView.getUint8(byteOffset++));\n        _console.log({ isConnected });\n        this.isConnected = isConnected;\n        break;\n\n      case \"rx\":\n        this.parseRxMessage(dataView);\n        break;\n\n      default:\n        this.onMessageReceived!(messageType as ConnectionMessageType, dataView);\n        break;\n    }\n  }\n}\n\nexport default ClientConnectionManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport {\n  ServerMessageTypes,\n  discoveredDevicesMessage,\n  ServerMessage,\n  MessageLike,\n  ClientDeviceMessage,\n  createClientDeviceMessage,\n  ServerMessageType,\n} from \"./ServerUtils.ts\";\nimport { parseMessage, parseStringFromDataView } from \"../utils/ParseUtils.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n} from \"../utils/EventDispatcher.ts\";\nimport Device from \"../Device.ts\";\nimport {\n  concatenateArrayBuffers,\n  sliceDataView,\n  stringToArrayBuffer,\n} from \"../utils/ArrayBufferUtils.ts\";\nimport {\n  DiscoveredDevice,\n  DiscoveredDevicesMap,\n  ScannerEventMessages,\n} from \"../scanner/BaseScanner.ts\";\nimport ClientConnectionManager from \"../connection/ClientConnectionManager.ts\";\nimport { DeviceManager } from \"../BS.ts\";\nimport {\n  ClientConnectionType,\n  ConnectionTypes,\n} from \"../connection/BaseConnectionManager.ts\";\n\nconst _console = createConsole(\"BaseClient\", { log: false });\n\nexport const ClientConnectionStatuses = [\n  \"notConnected\",\n  \"connecting\",\n  \"connected\",\n  \"disconnecting\",\n] as const;\nexport type ClientConnectionStatus = (typeof ClientConnectionStatuses)[number];\n\nexport const ClientEventTypes = [\n  ...ClientConnectionStatuses,\n  \"connectionStatus\",\n  \"isConnected\",\n  \"isScanningAvailable\",\n  \"isScanning\",\n  \"discoveredDevice\",\n  \"expiredDiscoveredDevice\",\n] as const;\nexport type ClientEventType = (typeof ClientEventTypes)[number];\n\ninterface ClientConnectionEventMessages {\n  connectionStatus: { connectionStatus: ClientConnectionStatus };\n  isConnected: { isConnected: boolean };\n}\n\nexport type ClientEventMessages = ClientConnectionEventMessages &\n  ScannerEventMessages;\n\nexport type ClientEventDispatcher = EventDispatcher<\n  BaseClient,\n  ClientEventType,\n  ClientEventMessages\n>;\nexport type ClientEvent = Event<\n  BaseClient,\n  ClientEventType,\n  ClientEventMessages\n>;\nexport type BoundClientEventListeners = BoundEventListeners<\n  BaseClient,\n  ClientEventType,\n  ClientEventMessages\n>;\n\nexport type ServerURL = string | URL;\n\ntype DevicesMap = { [deviceId: string]: Device };\n\nabstract class BaseClient {\n  protected get baseConstructor() {\n    return this.constructor as typeof BaseClient;\n  }\n\n  #reset() {\n    this.#isScanningAvailable = false;\n    this.#isScanning = false;\n    for (const id in this.#devices) {\n      const device = this.#devices[id];\n      const connectionManager =\n        device.connectionManager! as ClientConnectionManager;\n      connectionManager.isConnected = false;\n      //device.removeAllEventListeners();\n    }\n    this.#receivedMessageTypes.length = 0;\n    //this.#devices = {};\n  }\n\n  // DEVICES\n  #devices: DevicesMap = {};\n  get devices(): Readonly<DevicesMap> {\n    return this.#devices;\n  }\n\n  #eventDispatcher: ClientEventDispatcher = new EventDispatcher(\n    this as BaseClient,\n    ClientEventTypes\n  );\n  get addEventListener() {\n    return this.#eventDispatcher.addEventListener;\n  }\n  protected get dispatchEvent() {\n    return this.#eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.#eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.#eventDispatcher.waitForEvent;\n  }\n\n  abstract isConnected: boolean;\n  protected assertConnection() {\n    _console.assertWithError(this.isConnected, \"notConnected\");\n  }\n\n  abstract isDisconnected: boolean;\n  protected assertDisconnection() {\n    _console.assertWithError(this.isDisconnected, \"not disconnected\");\n  }\n\n  abstract connect(): void;\n  abstract disconnect(): void;\n  abstract reconnect(): void;\n  abstract toggleConnection(url?: ServerURL): void;\n\n  static _reconnectOnDisconnection = true;\n  static get ReconnectOnDisconnection() {\n    return this._reconnectOnDisconnection;\n  }\n  static set ReconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this._reconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n\n  protected _reconnectOnDisconnection =\n    this.baseConstructor.ReconnectOnDisconnection;\n  get reconnectOnDisconnection() {\n    return this._reconnectOnDisconnection;\n  }\n  set reconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this._reconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n\n  abstract sendServerMessage(...messages: ServerMessage[]): void;\n\n  // CONNECTION STATUS\n  #_connectionStatus: ClientConnectionStatus = \"notConnected\";\n  protected get _connectionStatus() {\n    return this.#_connectionStatus;\n  }\n  protected set _connectionStatus(newConnectionStatus) {\n    _console.assertTypeWithError(newConnectionStatus, \"string\");\n    _console.log({ newConnectionStatus });\n    this.#_connectionStatus = newConnectionStatus;\n\n    this.dispatchEvent(\"connectionStatus\", {\n      connectionStatus: this.connectionStatus,\n    });\n    this.dispatchEvent(this.connectionStatus, {});\n\n    switch (newConnectionStatus) {\n      case \"connected\":\n      case \"notConnected\":\n        this.dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n        if (this.isConnected) {\n          // this._sendRequiredMessages();\n        } else {\n          this.#reset();\n        }\n        break;\n    }\n  }\n  get connectionStatus() {\n    return this._connectionStatus;\n  }\n\n  static #RequiredMessageTypes: ServerMessage[] = [\n    \"isScanningAvailable\",\n    \"discoveredDevices\",\n    \"connectedDevices\",\n  ];\n  get #requiredMessageTypes(): ServerMessage[] {\n    return BaseClient.#RequiredMessageTypes;\n  }\n  protected _sendRequiredMessages() {\n    _console.log(\"sending required messages\", this.#receivedMessageTypes);\n    this.sendServerMessage(...this.#requiredMessageTypes);\n  }\n\n  #receivedMessageTypes: ServerMessage[] = [];\n  #checkIfFullyConnected() {\n    if (this.connectionStatus != \"connecting\") {\n      return;\n    }\n    _console.log(\"checking if fully connected...\");\n\n    if (!this.#receivedMessageTypes.includes(\"isScanningAvailable\")) {\n      _console.log(\"not fully connected - didn't receive isScanningAvailable\");\n      return;\n    }\n\n    if (this.isScanningAvailable) {\n      if (!this.#receivedMessageTypes.includes(\"isScanning\")) {\n        _console.log(\"not fully connected - didn't receive isScanning\");\n        return;\n      }\n    }\n\n    _console.log(\"fully connected\");\n    this._connectionStatus = \"connected\";\n  }\n\n  protected parseMessage(dataView: DataView) {\n    _console.log(\"parseMessage\", { dataView });\n    parseMessage(\n      dataView,\n      ServerMessageTypes,\n      this.#parseMessageCallback.bind(this),\n      null,\n      true\n    );\n    this.#checkIfFullyConnected();\n  }\n\n  #parseMessageCallback(messageType: ServerMessageType, dataView: DataView) {\n    let byteOffset = 0;\n\n    _console.log({ messageType }, dataView);\n\n    switch (messageType) {\n      case \"isScanningAvailable\":\n        {\n          const isScanningAvailable = Boolean(dataView.getUint8(byteOffset++));\n          _console.log({ isScanningAvailable });\n          this.#isScanningAvailable = isScanningAvailable;\n        }\n        break;\n      case \"isScanning\":\n        {\n          const isScanning = Boolean(dataView.getUint8(byteOffset++));\n          _console.log({ isScanning });\n          this.#isScanning = isScanning;\n        }\n        break;\n      case \"discoveredDevice\":\n        {\n          const { string: discoveredDeviceString } = parseStringFromDataView(\n            dataView,\n            byteOffset\n          );\n          _console.log({ discoveredDeviceString });\n\n          const discoveredDevice: DiscoveredDevice = JSON.parse(\n            discoveredDeviceString\n          );\n          _console.log({ discoveredDevice });\n\n          this.onDiscoveredDevice(discoveredDevice);\n        }\n        break;\n      case \"expiredDiscoveredDevice\":\n        {\n          const { string: bluetoothId } = parseStringFromDataView(\n            dataView,\n            byteOffset\n          );\n          this.#onExpiredDiscoveredDevice(bluetoothId);\n        }\n        break;\n      case \"connectedDevices\":\n        {\n          if (dataView.byteLength == 0) {\n            break;\n          }\n          const { string: connectedBluetoothDeviceIdStrings } =\n            parseStringFromDataView(dataView, byteOffset);\n          _console.log({ connectedBluetoothDeviceIdStrings });\n          const connectedBluetoothDeviceIds = JSON.parse(\n            connectedBluetoothDeviceIdStrings\n          ).connectedDevices;\n          _console.log({ connectedBluetoothDeviceIds });\n          this.onConnectedBluetoothDeviceIds(connectedBluetoothDeviceIds);\n        }\n        break;\n      case \"deviceMessage\":\n        {\n          const { string: bluetoothId, byteOffset: _byteOffset } =\n            parseStringFromDataView(dataView, byteOffset);\n          byteOffset = _byteOffset;\n          const device = this.#devices[bluetoothId];\n          _console.assertWithError(\n            device,\n            `no device found for id ${bluetoothId}`\n          );\n          const connectionManager =\n            device.connectionManager! as ClientConnectionManager;\n          const _dataView = sliceDataView(dataView, byteOffset);\n          connectionManager.onClientMessage(_dataView);\n        }\n        break;\n      default:\n        _console.error(`uncaught messageType \"${messageType}\"`);\n        break;\n    }\n\n    if (this.connectionStatus == \"connecting\") {\n      this.#receivedMessageTypes.push(messageType);\n    }\n  }\n\n  // SCANNING\n  #_isScanningAvailable = false;\n  get #isScanningAvailable() {\n    return this.#_isScanningAvailable;\n  }\n  set #isScanningAvailable(newIsAvailable) {\n    _console.assertTypeWithError(newIsAvailable, \"boolean\");\n    this.#_isScanningAvailable = newIsAvailable;\n    this.dispatchEvent(\"isScanningAvailable\", {\n      isScanningAvailable: this.isScanningAvailable,\n    });\n    if (this.isScanningAvailable) {\n      this.#requestIsScanning();\n    }\n  }\n  get isScanningAvailable() {\n    return this.#isScanningAvailable;\n  }\n  #assertIsScanningAvailable() {\n    this.assertConnection();\n    _console.assertWithError(\n      this.isScanningAvailable,\n      \"scanning is not available\"\n    );\n  }\n  protected requestIsScanningAvailable() {\n    this.sendServerMessage(\"isScanningAvailable\");\n  }\n\n  #_isScanning = false;\n  get #isScanning() {\n    return this.#_isScanning;\n  }\n  set #isScanning(newIsScanning) {\n    _console.assertTypeWithError(newIsScanning, \"boolean\");\n    this.#_isScanning = newIsScanning;\n    this.dispatchEvent(\"isScanning\", { isScanning: this.isScanning });\n  }\n  get isScanning() {\n    return this.#isScanning;\n  }\n  #requestIsScanning() {\n    this.sendServerMessage(\"isScanning\");\n  }\n\n  #assertIsScanning() {\n    _console.assertWithError(this.isScanning, \"is not scanning\");\n  }\n  #assertIsNotScanning() {\n    _console.assertWithError(!this.isScanning, \"is already scanning\");\n  }\n\n  startScan() {\n    this.#assertIsNotScanning();\n    this.sendServerMessage(\"startScan\");\n  }\n  stopScan() {\n    this.#assertIsScanning();\n    this.sendServerMessage(\"stopScan\");\n  }\n  toggleScan() {\n    this.#assertIsScanningAvailable();\n\n    if (this.isScanning) {\n      this.stopScan();\n    } else {\n      this.startScan();\n    }\n  }\n\n  // PERIPHERALS\n  #discoveredDevices: DiscoveredDevicesMap = {};\n  get discoveredDevices(): Readonly<DiscoveredDevicesMap> {\n    return this.#discoveredDevices;\n  }\n\n  protected onDiscoveredDevice(discoveredDevice: DiscoveredDevice) {\n    _console.log({ discoveredDevice });\n    this.#discoveredDevices[discoveredDevice.bluetoothId] = discoveredDevice;\n    this.dispatchEvent(\"discoveredDevice\", { discoveredDevice });\n  }\n  requestDiscoveredDevices() {\n    this.sendServerMessage({ type: \"discoveredDevices\" });\n  }\n  #onExpiredDiscoveredDevice(bluetoothId: string) {\n    _console.log({ expiredBluetoothDeviceId: bluetoothId });\n    const discoveredDevice = this.#discoveredDevices[bluetoothId];\n    if (!discoveredDevice) {\n      _console.warn(`no discoveredDevice found with id \"${bluetoothId}\"`);\n      return;\n    }\n    _console.log({ expiredDiscoveredDevice: discoveredDevice });\n    delete this.#discoveredDevices[bluetoothId];\n    this.dispatchEvent(\"expiredDiscoveredDevice\", { discoveredDevice });\n  }\n\n  // DEVICE CONNECTION\n  connectToDevice(bluetoothId: string, connectionType?: ClientConnectionType) {\n    return this.requestConnectionToDevice(bluetoothId, connectionType);\n  }\n  protected requestConnectionToDevice(\n    bluetoothId: string,\n    connectionType?: ClientConnectionType\n  ) {\n    this.assertConnection();\n    _console.assertTypeWithError(bluetoothId, \"string\");\n    const device = this.#getOrCreateDevice(bluetoothId);\n    if (connectionType) {\n      device.connect({ type: \"client\", subType: connectionType });\n    } else {\n      device.connect();\n    }\n    return device;\n  }\n  protected sendConnectToDeviceMessage(\n    bluetoothId: string,\n    connectionType?: ClientConnectionType\n  ) {\n    if (connectionType) {\n      this.sendServerMessage({\n        type: \"connectToDevice\",\n        data: concatenateArrayBuffers(\n          stringToArrayBuffer(bluetoothId),\n          ConnectionTypes.indexOf(connectionType)\n        ),\n      });\n    } else {\n      this.sendServerMessage({ type: \"connectToDevice\", data: bluetoothId });\n    }\n  }\n\n  // DEVICE CONNECTION\n  createDevice(bluetoothId: string) {\n    const device = new Device();\n    const discoveredDevice = this.#discoveredDevices[bluetoothId];\n    const clientConnectionManager = new ClientConnectionManager();\n    clientConnectionManager.discoveredDevice = Object.assign(\n      {},\n      discoveredDevice\n    );\n    clientConnectionManager.client = this;\n    clientConnectionManager.bluetoothId = bluetoothId;\n    clientConnectionManager.sendClientMessage = this.sendDeviceMessage.bind(\n      this,\n      bluetoothId\n    );\n    clientConnectionManager.sendClientConnectMessage =\n      this.sendConnectToDeviceMessage.bind(this, bluetoothId);\n    clientConnectionManager.sendClientDisconnectMessage =\n      this.sendDisconnectFromDeviceMessage.bind(this, bluetoothId);\n    device.connectionManager = clientConnectionManager;\n    return device;\n  }\n\n  #getOrCreateDevice(bluetoothId: string) {\n    let device = this.#devices[bluetoothId];\n    if (!device) {\n      device = this.createDevice(bluetoothId);\n      this.#devices[bluetoothId] = device;\n    }\n    return device;\n  }\n  protected onConnectedBluetoothDeviceIds(bluetoothIds: string[]) {\n    _console.log({ bluetoothIds });\n    bluetoothIds.forEach((bluetoothId) => {\n      const device = this.#getOrCreateDevice(bluetoothId);\n      const connectionManager =\n        device.connectionManager! as ClientConnectionManager;\n      connectionManager.isConnected = true;\n      DeviceManager._CheckDeviceAvailability(device);\n    });\n  }\n\n  disconnectFromDevice(bluetoothId: string) {\n    this.requestDisconnectionFromDevice(bluetoothId);\n  }\n  protected requestDisconnectionFromDevice(bluetoothId: string) {\n    this.assertConnection();\n    _console.assertTypeWithError(bluetoothId, \"string\");\n    const device = this.devices[bluetoothId];\n    _console.assertWithError(device, `no device found with id ${bluetoothId}`);\n    device.disconnect();\n    return device;\n  }\n  protected sendDisconnectFromDeviceMessage(bluetoothId: string) {\n    this.sendServerMessage({ type: \"disconnectFromDevice\", data: bluetoothId });\n  }\n\n  protected sendDeviceMessage(\n    bluetoothId: string,\n    ...messages: ClientDeviceMessage[]\n  ) {\n    this.sendServerMessage({\n      type: \"deviceMessage\",\n      data: [bluetoothId, createClientDeviceMessage(...messages)],\n    });\n  }\n}\n\nexport default BaseClient;\n","import { createConsole } from \"../../utils/Console.ts\";\nimport {\n  createServerMessage,\n  MessageLike,\n  ServerMessage,\n} from \"../ServerUtils.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../../utils/EventUtils.ts\";\nimport ClientConnectionManager from \"../../connection/ClientConnectionManager.ts\";\nimport BaseClient, { ServerURL } from \"../BaseClient.ts\";\nimport type * as ws from \"ws\";\nimport Timer from \"../../utils/Timer.ts\";\nimport {\n  createWebSocketMessage,\n  WebSocketMessageType,\n  WebSocketMessageTypes,\n  webSocketPingTimeout,\n  webSocketReconnectTimeout,\n  WebSocketMessage,\n} from \"./WebSocketUtils.ts\";\nimport { parseMessage } from \"../../utils/ParseUtils.ts\";\n\nconst _console = createConsole(\"WebSocketClient\", { log: false });\n\nclass WebSocketClient extends BaseClient {\n  // WEBSOCKET\n  #webSocket?: WebSocket;\n  get webSocket() {\n    return this.#webSocket;\n  }\n  set webSocket(newWebSocket) {\n    if (this.#webSocket == newWebSocket) {\n      _console.log(\"redundant webSocket assignment\");\n      return;\n    }\n\n    _console.log(\"assigning webSocket\", newWebSocket);\n\n    if (this.#webSocket) {\n      removeEventListeners(this.#webSocket, this.#boundWebSocketEventListeners);\n    }\n\n    addEventListeners(newWebSocket, this.#boundWebSocketEventListeners);\n    this.#webSocket = newWebSocket;\n\n    _console.log(\"assigned webSocket\");\n  }\n  get readyState() {\n    return this.webSocket?.readyState;\n  }\n  get isConnected() {\n    return this.readyState == WebSocket.OPEN;\n  }\n  get isDisconnected() {\n    return this.readyState == WebSocket.CLOSED;\n  }\n\n  connect(url: string | URL = `wss://${location.host}`) {\n    if (this.webSocket) {\n      this.assertDisconnection();\n    }\n    this._connectionStatus = \"connecting\";\n    this.webSocket = new WebSocket(url);\n  }\n\n  disconnect() {\n    this.assertConnection();\n    if (this.reconnectOnDisconnection) {\n      this.reconnectOnDisconnection = false;\n      this.webSocket!.addEventListener(\n        \"close\",\n        () => {\n          this.reconnectOnDisconnection = true;\n        },\n        { once: true }\n      );\n    }\n    this._connectionStatus = \"disconnecting\";\n    this.webSocket!.close();\n  }\n\n  reconnect() {\n    this.assertDisconnection();\n    this.connect(this.webSocket!.url);\n  }\n\n  toggleConnection(url?: ServerURL) {\n    if (this.isConnected) {\n      this.disconnect();\n    } else if (url && this.webSocket?.url == url) {\n      this.reconnect();\n    } else {\n      this.connect(url);\n    }\n  }\n\n  // WEBSOCKET MESSAGING\n  sendMessage(message: MessageLike) {\n    this.assertConnection();\n    this.#webSocket!.send(message);\n    this.#pingTimer.restart();\n  }\n\n  sendServerMessage(...messages: ServerMessage[]) {\n    this.sendMessage(\n      createWebSocketMessage({\n        type: \"serverMessage\",\n        data: createServerMessage(...messages),\n      })\n    );\n  }\n\n  #sendWebSocketMessage(...messages: WebSocketMessage[]) {\n    this.sendMessage(createWebSocketMessage(...messages));\n  }\n\n  // WEBSOCKET EVENTS\n  #boundWebSocketEventListeners: { [eventType: string]: Function } = {\n    open: this.#onWebSocketOpen.bind(this),\n    message: this.#onWebSocketMessage.bind(this),\n    close: this.#onWebSocketClose.bind(this),\n    error: this.#onWebSocketError.bind(this),\n  };\n\n  #onWebSocketOpen(event: ws.Event) {\n    _console.log(\"webSocket.open\", event);\n    this.#pingTimer.start();\n    //this._connectionStatus = \"connected\";\n    this._sendRequiredMessages();\n  }\n  async #onWebSocketMessage(event: ws.MessageEvent) {\n    _console.log(\"webSocket.message\", event);\n    //this.#pingTimer.restart();\n    //@ts-expect-error\n    const arrayBuffer = await event.data.arrayBuffer();\n    const dataView = new DataView(arrayBuffer);\n    this.#parseWebSocketMessage(dataView);\n  }\n  #onWebSocketClose(event: ws.CloseEvent) {\n    _console.log(\"webSocket.close\", event);\n\n    this._connectionStatus = \"notConnected\";\n\n    Object.entries(this.devices).forEach(([id, device]) => {\n      const connectionManager =\n        device.connectionManager! as ClientConnectionManager;\n      connectionManager.isConnected = false;\n    });\n\n    this.#pingTimer.stop();\n    if (this.reconnectOnDisconnection) {\n      setTimeout(() => {\n        this.reconnect();\n      }, webSocketReconnectTimeout);\n    }\n  }\n  #onWebSocketError(event: ws.ErrorEvent) {\n    _console.error(\"webSocket.error\", event);\n  }\n\n  // PARSING\n  #parseWebSocketMessage(dataView: DataView) {\n    parseMessage(\n      dataView,\n      WebSocketMessageTypes,\n      this.#onServerMessage.bind(this),\n      null,\n      true\n    );\n  }\n\n  #onServerMessage(messageType: WebSocketMessageType, dataView: DataView) {\n    switch (messageType) {\n      case \"ping\":\n        this.#pong();\n        break;\n      case \"pong\":\n        break;\n      case \"serverMessage\":\n        this.parseMessage(dataView);\n        break;\n      default:\n        _console.error(`uncaught messageType \"${messageType}\"`);\n        break;\n    }\n  }\n\n  // PING\n  #pingTimer = new Timer(this.#ping.bind(this), webSocketPingTimeout);\n  #ping() {\n    this.#sendWebSocketMessage(\"ping\");\n  }\n  #pong() {\n    this.#sendWebSocketMessage(\"pong\");\n  }\n}\n\nexport default WebSocketClient;\n"],"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","SuppressedError","isInDev","isInBrowser","window","document","isInNode","process","versions","node","userAgent","navigator","isBluetoothSupported","Boolean","bluetooth","isInBluefy","test","isInWebBLE","isAndroid","isSafari","isIOS","isMac","isInLensStudio","global","Studio","__console","log","args","wrapWithLocation","fn","functionPath","stack","Error","match","callerLine","getCallerFunctionPath","assert","warn","data","table","emptyFunction","error","bind","Console","constructor","type","_a$6","_Console_consoles","this","setLevelFlags","levelFlags","setLevelFlagsForType","create","_Console_levelFlags","condition","message","assertWithError","enumeration","includes","assertRangeWithError","name","min","max","createConsole","setConsoleLevelFlagsForType","setAllConsoleLevelFlags","setAllLevelFlags","_console$x","EventDispatcher","isValidEventType","updateEventListeners","listeners","filter","listenerObj","shouldRemove","find","listenerObject","listener","once","options","push","length","removeEventListeners","target","waitForEvent","Promise","resolve","addEventListener","event","_console$w","Timer","callback","assertTypeWithError","newCallback","_Timer_callback","isRunning","interval","newInterval","_Timer_interval","undefined","_Timer_intervalId","setInterval","clearInterval","start","startImmediately","crc32ForByte","r","j","crc32Table","Uint32Array","i","crc32","dataIterable","dataBytes","Uint8Array","byteLength","crcLowByte","crc","dataByte","_TextEncoder","_TextDecoder","TextEncoder","encode","string","from","encoding","TextDecoder","decode","Array","map","String","fromCharCode","textEncoder","textDecoder","_console$v","concatenateArrayBuffers","arrayBuffers","arrayBuffer","Math","floor","number","boolean","stringToArrayBuffer","ArrayBuffer","DataView","object","objectToArrayBuffer","uint8Array","forEach","byteOffset","end","dataView","begin","buffer","slice","async","getFileBuffer","file","fileBuffer","response","fetch","File","autoBind","self","include","exclude","key","pattern","some","properties","Set","Reflect","ownKeys","add","getPrototypeOf","Object","prototype","getAllProperties","descriptor","getOwnPropertyDescriptor","_console$u","FileTransferMessageTypes","FileTypes","FileTransferStatuses","FileTransferCommands","FileTransferEventTypes","FileTransferManager","_FileTransferManager_length","_FileTransferManager_checksum","_FileTransferManager_status","_FileTransferManager_receivedBlocks","_FileTransferManager_bytesTransferred","_FileTransferManager_isCancelling","_FileTransferManager_isServerSide","eventDispatcher","removeEventListener","MaxLength","maxLength","checksum","status","messageType","_FileTransferManager_instances","_FileTransferManager_parseMaxLength","_FileTransferManager_parseType","_FileTransferManager_parseLength","_FileTransferManager_parseChecksum","_FileTransferManager_parseStatus","_FileTransferManager_parseBlock","_FileTransferManager_parseBytesTransferred","send","_FileTransferManager_assertIsIdle","_FileTransferManager_assertValidType","promises","_FileTransferManager_setType","fileLength","_FileTransferManager_setLength","_FileTransferManager_setChecksum","_FileTransferManager_setCommand","all","cancel","_FileTransferManager_assertIsNotIdle","isServerSide","newIsServerSide","dispatchEvent","assertEnumWithError","_FileTransferManager_assertValidTypeEnum","typeEnum","_FileTransferManager_assertValidStatusEnum","statusEnum","_FileTransferManager_assertValidCommand","command","_FileTransferManager_updateMaxLength","_FileTransferManager_maxLength","_FileTransferManager_dispatchEvent_get","maxFileLength","_FileTransferManager_assertValidLength","_FileTransferManager_updateType","_FileTransferManager_type","fileType","newType","sendImmediately","promise","_FileTransferManager_updateLength","newLength","sendMessage","_FileTransferManager_updateChecksum","fileChecksum","newChecksum","_FileTransferManager_updateStatus","fileTransferStatus","progress","bytesReceived","fileTransferBlock","direction","_FileTransferManager_send","_FileTransferManager_buffer","_FileTransferManager_sendBlock","offset","slicedBuffer","bytesTransferred","_FileTransferManager_MaxLength","_console$t","Uint16Max","parseTimestamp","now","Date","timestamp","initialRange","Infinity","span","RangeHelper","_RangeHelper_range","newMin","_RangeHelper_instances","_RangeHelper_updateSpan","newMax","update","normalization","CenterOfPressureHelper","_CenterOfPressureHelper_range","x","reset","y","centerOfPressure","getNormalization","weightByRange","_console$s","PressureSensorTypes","ContinuousPressureSensorTypes","DefaultNumberOfPressureSensors","PressureSensorDataManager","_PressureSensorDataManager_positions","positions","numberOfSensors","parsePositions","getUint8","arrayLength","objectOrCallback","_PressureSensorDataManager_sensorRangeHelpers","fill","_","index","rangeHelper","_PressureSensorDataManager_centerOfPressureHelper","_PressureSensorDataManager_normalizedSumRangeHelper","pressure","sensors","scaledSum","normalizedSum","rawValue","scaledValue","normalizedValue","position","weightedValue","updateAndGetNormalization","center","sensor","normalizedCenter","_console$r","ActivityTypes","DeviceOrientations","MotionSensorDataManager","vector","getInt16","quaternion","heading","pitch","roll","euler","parseStepCounter","stepCount","parseActivity","activityBitfield","toString","activity","activityType","parseDeviceOrientation","deviceOrientation","BarometerSensorTypes","ContinuousBarometerSensorTypes","_console$q","BarometerSensorDataManager","getUint32","scalar","L","_console$p","parseMessage","messageTypes","context","parseMessageLengthAsUint16","messageTypeEnum","messageLength","_dataView","_console$o","SensorTypes","ContinuousSensorTypes","SensorDataMessageTypes","SensorDataEventTypes","SensorDataManager","pressureSensorDataManager","motionSensorDataManager","barometerSensorDataManager","sensorType","sensorTypeEnum","parseScalars","parseData","sensorTypeIndex","sensorScalar","getFloat32","parseDataCallback","_SensorDataManager_scalars","sensorData","_console$n","SensorRateStep","SensorConfigurationMessageTypes","SensorConfigurationEventTypes","SensorConfigurationManager","configuration","setConfiguration","newSensorConfiguration","clearRest","assign","zeroSensorConfiguration","setSensorConfigurationData","ZeroSensorConfiguration","clearSensorConfiguration","_SensorConfigurationManager_instances","_SensorConfigurationManager_updateConfiguration","_SensorConfigurationManager_assertAvailableSensorType","isSensorTypeAvailable","updatedConfiguration","_SensorConfigurationManager_configuration","_SensorConfigurationManager_dispatchEvent_get","sensorConfiguration","_SensorConfigurationManager_isRedundant","every","_SensorConfigurationManager_parse","sensorRate","getUint16","parsedSensorConfiguration","_SensorConfigurationManager_AssertValidSensorRate","_SensorConfigurationManager_assertValidSensorRate","_a$4","_SensorConfigurationManager_createData","sensorTypes","AssertValidSensorType","setUint16","_SensorConfigurationManager_ZeroSensorConfiguration","_console$m","TfliteMessageTypes","TfliteEventTypes","TfliteSensorTypes","TfliteManager","_TfliteManager_sensorTypes","addEventListenter","setName","newName","setNameData","task","setTask","newTask","_TfliteManager_instances","_TfliteManager_assertValidTask","sampleRate","setSampleRate","newSampleRate","_TfliteManager_sampleRate","setSensorTypes","newSensorTypes","array","indexOf","sort","newSensorTypeEnums","isReady","captureDelay","setCaptureDelay","newCaptureDelay","_TfliteManager_captureDelay","threshold","setThreshold","newThreshold","_TfliteManager_threshold","inferencingEnabled","setInferencingEnabled","newInferencingEnabled","_TfliteManager_assertIsReady","_TfliteManager_inferencingEnabled","Number","toggleInferencingEnabled","enableInferencing","disableInferencing","_TfliteManager_parseName","_TfliteManager_parseTask","_TfliteManager_parseSampleRate","_TfliteManager_parseSensorTypes","_TfliteManager_parseIsReady","_TfliteManager_parseCaptureDelay","_TfliteManager_parseThreshold","_TfliteManager_parseInferencingEnabled","_TfliteManager_parseInference","TfliteTasks","_TfliteManager_assertValidTaskEnum","taskEnum","_TfliteManager_dispatchEvent_get","_TfliteManager_updateName","_TfliteManager_name","tfliteName","_TfliteManager_updateTask","_TfliteManager_task","tfliteTask","_TfliteManager_updateSampleRate","tfliteSampleRate","_TfliteManager_updateSensorTypes","tfliteSensorTypes","_TfliteManager_updateIsReady","_TfliteManager_isReady","tfliteIsReady","_TfliteManager_updateCaptueDelay","tfliteCaptureDelay","_TfliteManager_updateThreshold","tfliteThreshold","_TfliteManager_updateInferencingEnabled","tfliteInferencingEnabled","values","inference","maxValue","maxIndex","tfliteInference","_console$l","DeviceInformationTypes","DeviceInformationEventTypes","DeviceInformationManager","_DeviceInformationManager_information","information","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","source","vendorId","serialNumber","_DeviceInformationManager_isComplete_get","_DeviceInformationManager_update","partialDeviceInformation","deviceInformationName","_DeviceInformationManager_instances","_DeviceInformationManager_dispatchEvent_get","_console$k","DeviceTypes","MinNameLength","MaxNameLength","InformationMessageTypes","InformationEventTypes","InformationManager","_InformationManager_isCharging","_InformationManager_name","_InformationManager_mtu","_InformationManager_isCurrentTimeSet","isCharging","batteryCurrent","getBatteryCurrent","id","updateName","updatedName","_InformationManager_instances","_InformationManager_dispatchEvent_get","updateType","updatedType","_InformationManager_assertValidDeviceType","_InformationManager_type","_InformationManager_setTypeEnum","newTypeEnum","isInsole","isGlove","side","mtu","isCurrentTimeSet","_InformationManager_updateIsCharging","_InformationManager_updateBatteryCurrent","_InformationManager_updateId","connectionType","_InformationManager_updateMtu","currentTime","getBigUint64","_InformationManager_onCurrentTime","updatedIsCharging","updatedBatteryCurrent","_InformationManager_batteryCurrent","updatedId","_InformationManager_id","_InformationManager_assertValidDeviceTypeEnum","setTypeData","newMtu","_InformationManager_setCurrentTime","setBigUint64","BigInt","VibrationWaveformEffects","_console$j","MaxNumberOfVibrationWaveformEffectSegments","MaxVibrationWaveformSegmentDuration","MaxVibrationWaveformEffectSegmentDelay","MaxVibrationWaveformEffectSegmentLoopCount","MaxNumberOfVibrationWaveformSegments","MaxVibrationWaveformEffectSequenceLoopCount","VibrationManager","triggerVibration","vibrationConfigurations","triggerVibrationData","vibrationConfiguration","locations","VibrationLocations","segments","loopCount","_VibrationManager_instances","_VibrationManager_createWaveformEffectsData","location","_VibrationManager_verifyLocations","_VibrationManager_assertNonEmptyArray","_VibrationManager_verifyLocation","_VibrationManager_createLocationsBitmask","locationsBitmask","locationIndex","isArray","_VibrationManager_verifyWaveformEffect","waveformEffect","_VibrationManager_verifyWaveformEffectSegment","waveformEffectSegment","effect","delay","_VibrationManager_verifyWaveformEffectSegmentLoopCount","waveformEffectSegmentLoopCount","_VibrationManager_verifyWaveformEffectSegments","waveformEffectSegments","_VibrationManager_verifyWaveformEffectSequenceLoopCount","waveformEffectSequenceLoopCount","_VibrationManager_verifyWaveformSegment","waveformSegment","amplitude","duration","_VibrationManager_verifyWaveformSegments","waveformSegments","includeAllWaveformEffectSegments","includeAllWaveformEffectSegmentLoopCounts","dataArray","bitOffset","_VibrationManager_createData","_VibrationManager_createWaveformData","setUint8","_VibrationManager_verifyVibrationType","vibrationType","VibrationTypes","vibrationTypeIndex","_console$i","MinWifiSSIDLength","MaxWifiSSIDLength","MinWifiPasswordLength","MaxWifiPasswordLength","WifiMessageTypes","RequiredWifiMessageTypes","WifiEventTypes","WifiManager","_WifiManager_isWifiAvailable","_WifiManager_wifiSSID","_WifiManager_wifiPassword","_WifiManager_isWifiConnected","_WifiManager_isWifiSecure","messages","isWifiAvailable","wifiSSID","_WifiManager_instances","_WifiManager_assertWifiIsAvailable","_WifiManager_wifiConnectionEnabled","newWifiSSID","setWifiSSIDData","wifiPassword","newWifiPassword","setWifiPasswordData","wifiConnectionEnabled","setWifiConnectionEnabled","newWifiConnectionEnabled","toggleWifiConnection","enableWifiConnection","disableWifiConnection","isWifiConnected","ipAddress","isWifiSecure","_WifiManager_updateIsWifiAvailable","ssid","_WifiManager_updateWifiSSID","password","_WifiManager_updateWifiPassword","_WifiManager_updateWifiConnectionEnabled","_WifiManager_updateIsWifiConnected","_WifiManager_updateIpAddress","_WifiManager_updateIsWifiSecure","_WifiManager_ipAddress","updatedIsWifiAvailable","_WifiManager_dispatchEvent_get","updatedWifiSSID","updatedWifiPassword","updatedIsWifiConnected","updatedIpAddress","updatedIsWifiSecure","_console$h","ConnectionTypes","ConnectionStatuses","ConnectionEventTypes","TxRxMessageTypes","BatteryLevelMessageTypes","MetaConnectionMessageTypes","ConnectionMessageTypes","BaseConnectionManager","baseConstructor","isSupported","canUpdateFirmware","_BaseConnectionManager_status","_BaseConnectionManager_pendingMessages","_BaseConnectionManager_isSendingMessages","defaultMtu","_BaseConnectionManager_timer","_BaseConnectionManager_instances","_BaseConnectionManager_checkConnection","_BaseConnectionManager_assertIsSupported","newConnectionStatus","onStatusUpdated","isConnected","stop","isAvailable","_BaseConnectionManager_assertIsNotDisconnecting","connect","_BaseConnectionManager_assertIsNotConnecting","canReconnect","reconnect","disconnect","sendTxMessages","dataLength","arrayBufferByteLength","arrayBufferCount","arrayBuffersToSend","sendTxData","parseRxMessage","_BaseConnectionManager_onRxMessage","onMessageReceived","_console$g","addEventListeners","boundEventListeners","addListener","on","AddEventListener","entries","eventType","eventListener","removeListener","RemoveEventListener","_console$f","BluetoothUUID","generateBluetoothUUID","stringToCharacteristicUUID","identifier","getCharacteristic","stringToServiceUUID","getService","bluetoothUUIDs","freeze","services","deviceInformation","uuid","characteristics","battery","batteryLevel","main","smp","serviceUUIDs","optionalServiceUUIDs","getServiceNameFromUUID","serviceUUID","serviceName","characteristicUUIDs","allCharacteristicUUIDs","getCharacteristicNameFromUUID","characteristicUUID","characteristicName","serviceInfo","getCharacteristicProperties","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","characteristicNames","characteristicInfo","_console$e","BluetoothConnectionManager","writeCharacteristic","super","sendSmpMessage","_console$d","WebBluetoothConnectionManager","bluetoothId","device","_WebBluetoothConnectionManager_device","newDevice","_WebBluetoothConnectionManager_boundBluetoothDeviceEventListeners","server","gatt","connected","requestDevice","filters","_WebBluetoothConnectionManager_instances","_WebBluetoothConnectionManager_getServicesAndCharacteristics","_WebBluetoothConnectionManager_removeEventListeners","characteristicProperties","characteristic","writeValueWithoutResponse","writeValueWithResponse","readValue","_WebBluetoothConnectionManager_onCharacteristicValueChanged","isInRange","serviceIndex","service","getCharacteristics","characteristicIndex","_WebBluetoothConnectionManager_boundBluetoothCharacteristicEventListeners","startNotifications","_WebBluetoothConnectionManager_characteristics","keys","stopNotifications","allSettled","_WebBluetoothConnectionManager_onCharacteristicvaluechanged","onCharacteristicValueChanged","_WebBluetoothConnectionManager_onGattserverdisconnected","POW_2_32","POW_2_53","CBOR","lastLength","prepareWrite","newByteLength","requiredLength","oldDataView","uint32count","setUint32","commitWrite","writeUint8","writeUint8Array","writeTypeAndLength","writeUint16","writeUint32","low","high","writeUint64","encodeItem","utf8data","setFloat64","writeFloat64","charCode","charCodeAt","ret","retView","tagger","simpleValue","commitRead","readArrayBuffer","readUint8","readUint16","readUint32","readBreak","readLength","additionalInformation","readIndefiniteStringLength","majorType","initialByte","appendUtf16Data","utf16data","decodeItem","tempArrayBuffer","tempDataView","sign","exponent","fraction","readFloat16","getFloat64","retArray","retObject","elements","fullArrayLength","fullArray","fullArrayOffset","apply","_console$c","constants","MCUManager","_mtu","_messageCallback","_imageUploadProgressCallback","_imageUploadNextCallback","_fileUploadProgressCallback","_fileUploadNextCallback","_uploadIsInProgress","_downloadIsInProgress","_buffer","_seq","onMessage","onImageUploadNext","onImageUploadProgress","onImageUploadFinished","_imageUploadFinishedCallback","onFileUploadNext","onFileUploadProgress","onFileUploadFinished","_fileUploadFinishedCallback","onFileDownloadNext","_fileDownloadNextCallback","onFileDownloadProgress","_fileDownloadProgressCallback","onFileDownloadFinished","_fileDownloadFinishedCallback","_getMessage","op","group","encodedData","lengthLo","_notification","_processMessage","lengthHi","groupHi","groupLo","off","_uploadOffset","_uploadNext","_uploadFileOffset","_uploadFileNext","_downloadFileOffset","len","_downloadFileLength","percentage","_downloadFileNext","cmdReset","smpEcho","d","cmdImageState","cmdImageErase","cmdImageTest","hash","confirm","cmdImageConfirm","_hash","image","crypto","subtle","digest","_uploadImage","sha","packet","cmdUpload","slot","_uploadSlot","cmdUploadFile","filebuf","destFilename","_uploadFile","_uploadFilename","cmdDownloadFile","filename","_downloadRemoteFilename","_downloadLocalFilename","imageInfo","info","view","headerSize","imageSize","version","b","padStart","join","_console$b","FirmwareMessageTypes","FirmwareEventTypes","FirmwareStatuses","FirmwareManager","_FirmwareManager_status","_FirmwareManager_instances","_FirmwareManager_assignMcuManagerCallbacks","_FirmwareManager_mcuManager","getImages","_FirmwareManager_updateStatus","images","testImage","imageIndex","_FirmwareManager_assertValidImageIndex","_FirmwareManager_assertImages","eraseImage","confirmImage","_FirmwareManager_mtu","newStatus","_FirmwareManager_dispatchEvent_get","firmwareStatus","_FirmwareManager_onMcuMessage","_FirmwareManager_onMcuFileDownloadProgress","_FirmwareManager_onMcuFileDownloadFinished","_FirmwareManager_onMcuFileUploadNext","_FirmwareManager_onMcuFileUploadProgress","_FirmwareManager_onMcuFileUploadFinished","_FirmwareManager_onMcuImageUploadNext","_FirmwareManager_onMcuImageUploadProgress","_FirmwareManager_onMcuImageUploadFinished","tasks","_FirmwareManager_onMcuImageState","_FirmwareManager_onMcuFileDownloadNext","_FirmwareManager_images","empty","pending","confirmed","bootable","active","permanent","firmwareImages","_console$a","DeviceManagerEventTypes","DeviceManager","_DeviceManager_ConnectedDevices","_DeviceManager_UseLocalStorage","devices","_DeviceManager_LocalStorageKey","_DeviceManager_AvailableDevices","_DeviceManager_EventDispatcher","CanUseLocalStorage","UseLocalStorage","onDevice","_DeviceManager_boundDeviceEventListeners","_DeviceManager_instances","_DeviceManager_DispatchAvailableDevices","ConnectedDevices","_DeviceManager_AssertLocalStorage","newUseLocalStorage","_DeviceManager_LoadFromLocalStorage","localStorage","AvailableDevices","CanGetDevices","getDevices","GetDevices","_DeviceManager_LocalStorageConfiguration","bluetoothDevices","bluetoothDevice","existingConnectedDevice","existingAvailableDevice","Device","connectionManager","RemoveEventListeners","RemoveAllEventListeners","removeAllEventListeners","_CheckDeviceAvailability","splice","_DeviceManager_SaveToLocalStorage","setItem","JSON","stringify","localStorageString","_DeviceManager_DefaultLocalStorageConfiguration","_DeviceManager_UpdateLocalStorageConfigurationForDevice","deviceInformationIndex","findIndex","_DeviceManager_DispatchEvent_get","_DeviceManager_OnDeviceIsConnected","_DeviceManager_DispatchConnectedDevices","shared","DeviceManager$1","_console$9","ServerMessageTypes","messageDataArrayBufferByteLength","messageDataArrayBuffer","messageBuffers","createServerMessage","createMessage","createClientDeviceMessage","_console$8","WebSocketMessageTypes$1","createWebSocketMessage$1","createWebSocketMessage","_console$7","WebSocketMessageTypes","WebSocketDeviceInformationMessageTypes","WebSocketConnectionManager","_WebSocketConnectionManager_bluetoothId","isSecure","_WebSocketConnectionManager_isSecure","_WebSocketConnectionManager_pingTimer","_WebSocketConnectionManager_instances","_WebSocketConnectionManager_ping","webSocketPingTimeout","webSocket","_WebSocketConnectionManager_webSocket","newWebSocket","readyState","OPEN","close","_WebSocketConnectionManager_boundWebSocketEventListeners","_WebSocketConnectionManager_ipAddress","newIpAddress","newIsSecure","url","_WebSocketConnectionManager_sendWebSocketMessage","restart","_WebSocketConnectionManager_onWebSocketOpen","_WebSocketConnectionManager_requestDeviceInformation","_WebSocketConnectionManager_onWebSocketMessage","_WebSocketConnectionManager_parseWebSocketMessage","_WebSocketConnectionManager_onWebSocketClose","_WebSocketConnectionManager_onWebSocketError","_WebSocketConnectionManager_onMessage","_WebSocketConnectionManager_pong","deviceInformationType","_console$6","DeviceEventTypes","RequiredInformationConnectionMessages","_Device_connectionManager","_Device_eventDispatcher","_Device_isConnected","latestConnectionMessages","Map","_Device_batteryLevel","_informationManager","_Device_isServerSide","_Device_sensorConfigurationManager","_Device_vibrationManager","_Device_tfliteManager","_Device_fileTransferManager","_Device_wifiManager","_Device_firmwareManager","requestRequiredInformation","newConnectionManager","onMessagesReceived","_Device_instances","_Device_onConnectionStatusUpdated","_Device_onConnectionMessageReceived","_Device_onConnectionMessagesReceived","_Device_clear","clientConnectionManager","subType","_Device_assertCanReconnect","_a$2","ReconnectOnDisconnection","newReconnectOnDisconnection","_Device_ReconnectOnDisconnection","reconnectOnDisconnection","_Device_reconnectOnDisconnection","_Device_assertIsConnected","connectionStatus","isConnectionBusy","_Device_deviceInformationManager","setType","continuousSensorTypes","setSensorConfiguration","ClearSensorConfigurationOnLeave","newClearSensorConfigurationOnLeave","_Device_ClearSensorConfigurationOnLeave","clearSensorConfigurationOnLeave","_Device_clearSensorConfigurationOnLeave","numberOfPressureSensors","_Device_sensorDataManager","resetRange","validFileTypes","sendFile","receive","setTfliteName","setTfliteTask","setTfliteSampleRate","allowedTfliteSensorTypes","setTfliteSensorTypes","setTfliteInferencingEnabled","enableTfliteInferencing","disableTfliteInferencing","toggleTfliteInferencing","setTfliteCaptureDelay","setTfliteThreshold","uploadFirmware","_Device_assertCanUpdateFirmware","canReset","getFirmwareImages","eraseFirmwareImage","confirmFirmwareImage","testFirmwareImage","isUkaton","reconnectViaWebSockets","_Device_dispatchEvent_get","_Device_sendTxMessages","_Device_didReceiveMessageTypes","hasConnectionMessage","_Device_hasRequiredInformation_get","hasRequiredInformation","_Device_requestRequiredInformation","_Device_clearConnection","_Device_reconnectIntervalId","_Device_checkConnection","OnDeviceConnectionStatusUpdated","_Device_dispatchConnectionEvents","includeIsConnected","clear","_Device_updateBatteryLevel","updatedBatteryLevel","_Device_sendSmpMessage","_console$5","DevicePairPressureSensorDataManager","_DevicePairPressureSensorDataManager_rawPressure","_DevicePairPressureSensorDataManager_centerOfPressureHelper","_DevicePairPressureSensorDataManager_normalizedSumRangeHelper","onDevicePressureData","_DevicePairPressureSensorDataManager_instances","_DevicePairPressureSensorDataManager_hasAllPressureData_get","_DevicePairPressureSensorDataManager_updatePressureData","Sides","sidePressure","_sensor","_console$4","DevicePairSensorDataEventTypes","DevicePairSensorDataManager","_DevicePairSensorDataManager_timestamps","resetPressureRange","onDeviceSensorData","timestamps","_console$3","getDevicePairDeviceEventType","deviceEventType","toUpperCase","DevicePairEventTypes","DevicePair","_DevicePair_eventDispatcher","_DevicePair_type","sides","left","right","isPartiallyConnected","isHalfConnected","assignDevice","currentDevice","_DevicePair_instances","_DevicePair_removeDeviceEventListeners","_DevicePair_addDeviceEventListeners","_DevicePair_left","_DevicePair_right","_DevicePair_dispatchEvent_get","_DevicePair_sensorDataManager","insoles","gloves","_DevicePair_isDeviceCorrectType","_DevicePair_boundDeviceEventListeners","_DevicePair_redispatchDeviceEvent","_DevicePair_removeDevice","foundDevice","deviceEvent","_DevicePair_onDeviceIsConnected","_DevicePair_onDeviceType","_DevicePair_onDeviceSensorData","_DevicePair_insoles","_a$1","_DevicePair_gloves","_console$2","ClientDeviceInformationMessageTypes","ClientConnectionManager","_ClientConnectionManager_isConnected","newBluetoothId","_ClientConnectionManager_bluetoothId","newIsConnected","_ClientConnectionManager_instances","_ClientConnectionManager_requestDeviceInformation","client","sendClientConnectMessage","onClientMessage","_ClientConnectionManager_onClientMessageCallback","sendClientMessage","_console$1","ClientEventTypes","BaseClient","_BaseClient_devices","_BaseClient_eventDispatcher","_reconnectOnDisconnection","_BaseClient__connectionStatus","_BaseClient_receivedMessageTypes","_BaseClient__isScanningAvailable","_BaseClient__isScanning","_BaseClient_discoveredDevices","_connectionStatus","_BaseClient_instances","_BaseClient_reset","_BaseClient_parseMessageCallback","_BaseClient_checkIfFullyConnected","isScanningAvailable","sendServerMessage","isScanning","_BaseClient_assertIsNotScanning","_BaseClient_assertIsScanning","_BaseClient_assertIsScanningAvailable","discoveredDevices","onDiscoveredDevice","discoveredDevice","createDevice","sendDeviceMessage","sendClientDisconnectMessage","onConnectedBluetoothDeviceIds","bluetoothIds","disconnectFromDevice","requestDisconnectionFromDevice","sendDisconnectFromDeviceMessage","_BaseClient_isScanningAvailable_set","_BaseClient_isScanning_set","_BaseClient_requiredMessageTypes_get","discoveredDeviceString","parseStringFromDataView","_BaseClient_onExpiredDiscoveredDevice","connectedBluetoothDeviceIdStrings","connectedBluetoothDeviceIds","_byteOffset","_BaseClient_isScanningAvailable_get","newIsAvailable","_BaseClient_requestIsScanning","_BaseClient_isScanning_get","newIsScanning","_BaseClient_getOrCreateDevice","_BaseClient_RequiredMessageTypes","_console","WebSocketClient","_WebSocketClient_pingTimer","_WebSocketClient_instances","_WebSocketClient_ping","_WebSocketClient_webSocket","_WebSocketClient_boundWebSocketEventListeners","WebSocket","isDisconnected","CLOSED","host","toggleConnection","WeakMap","WeakSet","_WebSocketClient_sendWebSocketMessage","_WebSocketClient_onWebSocketOpen","_WebSocketClient_onWebSocketMessage","_WebSocketClient_parseWebSocketMessage","_WebSocketClient_onWebSocketClose","_WebSocketClient_onWebSocketError","_WebSocketClient_onServerMessage","_WebSocketClient_pong"],"mappings":"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","x_google_ignoreList":[0,8]}