{"version":3,"file":"brilliantsole.module.min.js","sources":["../brilliantsole/utils/environment.ts","../brilliantsole/utils/Console.ts","../brilliantsole/utils/EventDispatcher.ts","../brilliantsole/utils/Timer.ts","../brilliantsole/utils/checksum.ts","../brilliantsole/utils/Text.ts","../brilliantsole/utils/ArrayBufferUtils.ts","../node_modules/auto-bind/index.js","../brilliantsole/FileTransferManager.ts","../brilliantsole/utils/MathUtils.ts","../brilliantsole/utils/RangeHelper.ts","../brilliantsole/utils/CenterOfPressureHelper.ts","../brilliantsole/sensor/PressureSensorDataManager.ts","../brilliantsole/utils/ArrayUtils.ts","../brilliantsole/sensor/MotionSensorDataManager.ts","../brilliantsole/sensor/BarometerSensorDataManager.ts","../brilliantsole/utils/ParseUtils.ts","../brilliantsole/CameraManager.ts","../brilliantsole/utils/AudioUtils.ts","../brilliantsole/MicrophoneManager.ts","../brilliantsole/sensor/SensorDataManager.ts","../brilliantsole/sensor/SensorConfigurationManager.ts","../brilliantsole/TfliteManager.ts","../brilliantsole/DeviceInformationManager.ts","../brilliantsole/InformationManager.ts","../brilliantsole/vibration/VibrationWaveformEffects.ts","../brilliantsole/vibration/VibrationManager.ts","../brilliantsole/WifiManager.ts","../brilliantsole/utils/ColorUtils.ts","../brilliantsole/utils/DisplayContextState.ts","../brilliantsole/utils/ObjectUtils.ts","../brilliantsole/utils/DisplayContextStateHelper.ts","../brilliantsole/utils/DisplayUtils.ts","../node_modules/rgbquant/src/rgbquant.js","../brilliantsole/utils/DisplayContextCommand.ts","../brilliantsole/utils/DisplayBitmapUtils.ts","../node_modules/opentype.js/dist/opentype.module.js","../node_modules/woff2-encoder/dist/index.js","../node_modules/simplify-js/simplify.js","../node_modules/fit-curve/lib/fit-curve.js","../brilliantsole/utils/PathUtils.ts","../node_modules/svgson/dist/svgson.umd.js","../node_modules/svg-pathdata/dist/SVGPathDataEncoder.js","../node_modules/svg-pathdata/dist/mathUtils.js","../node_modules/svg-pathdata/dist/transformers/reverse_path.js","../node_modules/svg-pathdata/dist/SVGPathDataTransformer.js","../node_modules/svg-pathdata/dist/transformers/remove_collinear.js","../node_modules/svg-pathdata/dist/TransformableSVG.js","../node_modules/svg-pathdata/dist/SVGPathDataParser.js","../node_modules/svg-pathdata/dist/SVGPathData.js","../brilliantsole/utils/SvgUtils.ts","../brilliantsole/utils/stringUtils.ts","../brilliantsole/utils/DisplaySpriteSheetUtils.ts","../brilliantsole/utils/DisplayManagerInterface.ts","../brilliantsole/DisplayManager.ts","../brilliantsole/connection/BaseConnectionManager.ts","../brilliantsole/utils/EventUtils.ts","../brilliantsole/connection/bluetooth/bluetoothUUIDs.ts","../brilliantsole/connection/bluetooth/BluetoothConnectionManager.ts","../brilliantsole/connection/bluetooth/WebBluetoothConnectionManager.ts","../brilliantsole/utils/cbor.js","../brilliantsole/utils/mcumgr.js","../brilliantsole/FirmwareManager.ts","../brilliantsole/DeviceManager.ts","../brilliantsole/server/ServerUtils.ts","../brilliantsole/server/websocket/WebSocketUtils.ts","../brilliantsole/connection/websocket/WebSocketConnectionManager.ts","../brilliantsole/Device.ts","../brilliantsole/utils/DisplayCanvasHelper.ts","../brilliantsole/devicePair/DevicePairPressureSensorDataManager.ts","../brilliantsole/devicePair/DevicePairSensorDataManager.ts","../brilliantsole/devicePair/DevicePair.ts","../brilliantsole/connection/ClientConnectionManager.ts","../brilliantsole/server/BaseClient.ts","../brilliantsole/server/websocket/WebSocketClient.ts","../brilliantsole/BS.ts","../brilliantsole/utils/ThrottleUtils.ts"],"sourcesContent":["type ENVIRONMENT_FLAG = \"__BRILLIANTSOLE__DEV__\" | \"__BRILLIANTSOLE__PROD__\";\nconst __BRILLIANTSOLE__ENVIRONMENT__: ENVIRONMENT_FLAG =\n  \"__BRILLIANTSOLE__DEV__\";\n\n//@ts-expect-error\nconst isInProduction =\n  __BRILLIANTSOLE__ENVIRONMENT__ == \"__BRILLIANTSOLE__PROD__\";\nconst isInDev = __BRILLIANTSOLE__ENVIRONMENT__ == \"__BRILLIANTSOLE__DEV__\";\n\n// https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isInBrowser =\n  typeof window !== \"undefined\" && typeof window?.document !== \"undefined\";\nconst isInNode =\n  typeof process !== \"undefined\" && process?.versions?.node != null;\n\nconst userAgent = (isInBrowser && navigator.userAgent) || \"\";\n\nlet isBluetoothSupported = false;\nif (isInBrowser) {\n  isBluetoothSupported = Boolean(navigator.bluetooth);\n} else if (isInNode) {\n  isBluetoothSupported = true;\n}\n\nconst isInBluefy = isInBrowser && /Bluefy/i.test(userAgent);\nconst isInWebBLE = isInBrowser && /WebBLE/i.test(userAgent);\n\nconst isAndroid = isInBrowser && /Android/i.test(userAgent);\nconst isSafari =\n  isInBrowser && /Safari/i.test(userAgent) && !/Chrome/i.test(userAgent);\n\nconst isIOS = isInBrowser && /iPad|iPhone|iPod/i.test(userAgent);\nconst isMac = isInBrowser && /Macintosh/i.test(userAgent);\n\n// @ts-expect-error\nconst isInLensStudio =\n  !isInBrowser &&\n  !isInNode &&\n  typeof global !== \"undefined\" &&\n  typeof Studio !== \"undefined\";\n\nexport {\n  isInDev,\n  isInProduction,\n  isInBrowser,\n  isInNode,\n  isAndroid,\n  isInBluefy,\n  isInWebBLE,\n  isSafari,\n  isInLensStudio,\n  isIOS,\n  isMac,\n  isBluetoothSupported,\n};\n","import { isInDev, isInLensStudio, isInNode } from \"./environment.ts\";\n\ndeclare var Studio: any | undefined;\n\nexport type LogFunction = (...data: any[]) => void;\nexport type AssertLogFunction = (condition: boolean, ...data: any[]) => void;\n\nexport interface ConsoleLevelFlags {\n  log?: boolean;\n  warn?: boolean;\n  error?: boolean;\n  assert?: boolean;\n  table?: boolean;\n}\n\ninterface ConsoleLike {\n  log?: LogFunction;\n  warn?: LogFunction;\n  error?: LogFunction;\n  assert?: AssertLogFunction;\n  table?: LogFunction;\n}\n\nvar __console: ConsoleLike;\nif (isInLensStudio) {\n  const log = function (...args: any[]) {\n    Studio.log(args.map((value) => new String(value)).join(\",\"));\n  };\n  __console = {};\n  __console.log = log;\n  __console.warn = log.bind(__console, \"WARNING\");\n  __console.error = log.bind(__console, \"ERROR\");\n} else {\n  __console = console;\n}\n\nfunction getCallerFunctionPath(): string {\n  const stack = new Error().stack;\n  if (!stack) return \"\";\n\n  const lines = stack.split(\"\\n\");\n  const callerLine = lines[3] || lines[2];\n\n  const match = callerLine.match(/at (.*?) \\(/) || callerLine.match(/at (.*)/);\n  if (!match) return \"\";\n\n  const fullFn = match[1].trim();\n  return `[${fullFn}]`;\n}\n\nfunction wrapWithLocation(fn: LogFunction): LogFunction {\n  return (...args: any[]) => {\n    if (isInNode) {\n      const functionPath = getCallerFunctionPath();\n      fn(functionPath, ...args);\n    } else {\n      fn(...args);\n    }\n  };\n}\n\n// console.assert not supported in WebBLE\nif (!__console.assert) {\n  const assert: AssertLogFunction = (condition, ...data) => {\n    if (!condition) {\n      __console.warn!(...data);\n    }\n  };\n  __console.assert = assert;\n}\n\n// console.table not supported in WebBLE\nif (!__console.table) {\n  const table: LogFunction = (...data) => {\n    __console.log!(...data);\n  };\n  __console.table = table;\n}\n\nfunction emptyFunction() {}\n\nconst log: LogFunction = isInNode\n  ? wrapWithLocation(__console.log!.bind(__console))\n  : __console.log!.bind(__console);\nconst warn: LogFunction = isInNode\n  ? wrapWithLocation(__console.warn!.bind(__console))\n  : __console.warn!.bind(__console);\nconst error: LogFunction = isInNode\n  ? wrapWithLocation(__console.error!.bind(__console))\n  : __console.error!.bind(__console);\nconst table: LogFunction = isInNode\n  ? wrapWithLocation(__console.table!.bind(__console))\n  : __console.table!.bind(__console);\nconst assert: AssertLogFunction = __console.assert.bind(__console);\n\nclass Console {\n  static #consoles: { [type: string]: Console } = {};\n\n  constructor(type: string) {\n    if (Console.#consoles[type]) {\n      throw new Error(`\"${type}\" console already exists`);\n    }\n    Console.#consoles[type] = this;\n  }\n\n  #levelFlags: ConsoleLevelFlags = {\n    log: isInDev,\n    warn: isInDev,\n    assert: true,\n    error: true,\n    table: true,\n  };\n\n  setLevelFlags(levelFlags: ConsoleLevelFlags) {\n    Object.assign(this.#levelFlags, levelFlags);\n  }\n\n  /** @throws {Error} if no console with type \"type\" is found */\n  static setLevelFlagsForType(type: string, levelFlags: ConsoleLevelFlags) {\n    if (!this.#consoles[type]) {\n      throw new Error(`no console found with type \"${type}\"`);\n    }\n    this.#consoles[type].setLevelFlags(levelFlags);\n  }\n\n  static setAllLevelFlags(levelFlags: ConsoleLevelFlags) {\n    for (const type in this.#consoles) {\n      this.#consoles[type].setLevelFlags(levelFlags);\n    }\n  }\n\n  static create(type: string, levelFlags?: ConsoleLevelFlags): Console {\n    const console = this.#consoles[type] || new Console(type);\n    if (isInDev && levelFlags) {\n      console.setLevelFlags(levelFlags);\n    }\n    return console;\n  }\n\n  get log() {\n    return this.#levelFlags.log ? log : emptyFunction;\n  }\n\n  get warn() {\n    return this.#levelFlags.warn ? warn : emptyFunction;\n  }\n\n  get error() {\n    return this.#levelFlags.error ? error : emptyFunction;\n  }\n\n  get assert() {\n    return this.#levelFlags.assert ? assert : emptyFunction;\n  }\n\n  get table() {\n    return this.#levelFlags.table ? table : emptyFunction;\n  }\n\n  /** @throws {Error} if condition is not met */\n  assertWithError(condition: any, message: string) {\n    if (!Boolean(condition)) {\n      throw new Error(message);\n    }\n  }\n\n  /** @throws {Error} if value's type doesn't match */\n  assertTypeWithError(value: any, type: string) {\n    this.assertWithError(\n      typeof value == type,\n      `value ${value} of type \"${typeof value}\" not of type \"${type}\"`\n    );\n  }\n\n  /** @throws {Error} if value's type doesn't match */\n  assertEnumWithError(value: string, enumeration: readonly string[]) {\n    this.assertWithError(\n      enumeration.includes(value),\n      `invalid enum \"${value}\"`\n    );\n  }\n\n  /** @throws {Error} if value is not within some range */\n  assertRangeWithError(name: string, value: number, min: number, max: number) {\n    this.assertWithError(\n      value >= min && value <= max,\n      `${name} ${value} must be within ${min}-${max}`\n    );\n  }\n}\n\nexport function createConsole(\n  type: string,\n  levelFlags?: ConsoleLevelFlags\n): Console {\n  return Console.create(type, levelFlags);\n}\n\n/** @throws {Error} if no console with type is found */\nexport function setConsoleLevelFlagsForType(\n  type: string,\n  levelFlags: ConsoleLevelFlags\n) {\n  Console.setLevelFlagsForType(type, levelFlags);\n}\n\nexport function setAllConsoleLevelFlags(levelFlags: ConsoleLevelFlags) {\n  Console.setAllLevelFlags(levelFlags);\n}\n","import { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"EventDispatcher\", { log: false });\n\nexport type EventMap<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = {\n  [T in keyof EventMessages]: {\n    type: T;\n    target: Target;\n    message: EventMessages[T];\n  };\n};\nexport type EventListenerMap<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = {\n  [T in keyof EventMessages]: (event: {\n    type: T;\n    target: Target;\n    message: EventMessages[T];\n  }) => void;\n};\n\nexport type Event<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = EventMap<Target, EventType, EventMessages>[keyof EventMessages];\n\ntype SpecificEvent<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>,\n  SpecificEventType extends EventType\n> = {\n  type: SpecificEventType;\n  target: Target;\n  message: EventMessages[SpecificEventType];\n};\n\nexport type BoundEventListeners<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> = {\n  [SpecificEventType in keyof EventMessages]?: (\n    // @ts-expect-error\n    event: SpecificEvent<Target, EventType, EventMessages, SpecificEventType>\n  ) => void;\n};\n\nclass EventDispatcher<\n  Target extends any,\n  EventType extends string,\n  EventMessages extends Partial<Record<EventType, any>>\n> {\n  private listeners: {\n    [T in EventType]?: {\n      listener: (event: {\n        type: T;\n        target: Target;\n        message: EventMessages[T];\n      }) => void;\n      once?: boolean;\n      shouldRemove?: boolean;\n    }[];\n  } = {};\n\n  constructor(\n    private target: Target,\n    private validEventTypes: readonly EventType[]\n  ) {\n    this.addEventListener = this.addEventListener.bind(this);\n    this.removeEventListener = this.removeEventListener.bind(this);\n    this.removeEventListeners = this.removeEventListeners.bind(this);\n    this.removeAllEventListeners = this.removeAllEventListeners.bind(this);\n    this.dispatchEvent = this.dispatchEvent.bind(this);\n    this.waitForEvent = this.waitForEvent.bind(this);\n  }\n\n  private isValidEventType(type: any): type is EventType {\n    return this.validEventTypes.includes(type);\n  }\n\n  private updateEventListeners(type: EventType) {\n    if (!this.listeners[type]) return;\n    this.listeners[type] = this.listeners[type]!.filter((listenerObj) => {\n      if (listenerObj.shouldRemove) {\n        _console.log(`removing \"${type}\" eventListener`, listenerObj);\n      }\n      return !listenerObj.shouldRemove;\n    });\n  }\n\n  addEventListener<T extends EventType>(\n    type: T,\n    listener: (event: {\n      type: T;\n      target: Target;\n      message: EventMessages[T];\n    }) => void,\n    options: { once?: boolean } = { once: false }\n  ): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n      _console.log(`creating \"${type}\" listeners array`, this.listeners[type]!);\n    }\n    const alreadyAdded = this.listeners[type].find((listenerObject) => {\n      return (\n        listenerObject.listener == listener &&\n        listenerObject.once == options.once\n      );\n    });\n    if (alreadyAdded) {\n      _console.log(\"already added listener\");\n      return;\n    }\n    _console.log(`adding \"${type}\" listener`, listener, options);\n    this.listeners[type]!.push({ listener, once: options.once });\n\n    _console.log(\n      `currently have ${this.listeners[type]!.length} \"${type}\" listeners`\n    );\n  }\n\n  removeEventListener<T extends EventType>(\n    type: T,\n    listener: (event: {\n      type: T;\n      target: Target;\n      message: EventMessages[T];\n    }) => void\n  ): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) return;\n\n    _console.log(`removing \"${type}\" listener...`, listener);\n    this.listeners[type]!.forEach((listenerObj) => {\n      const isListenerToRemove = listenerObj.listener === listener;\n      if (isListenerToRemove) {\n        _console.log(`flagging \"${type}\" listener`, listener);\n        listenerObj.shouldRemove = true;\n      }\n    });\n\n    this.updateEventListeners(type);\n  }\n\n  removeEventListeners<T extends EventType>(type: T): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) return;\n\n    _console.log(`removing \"${type}\" listeners...`);\n    this.listeners[type] = [];\n  }\n\n  removeAllEventListeners(): void {\n    _console.log(`removing listeners...`);\n    this.listeners = {};\n  }\n\n  dispatchEvent<T extends EventType>(type: T, message: EventMessages[T]): void {\n    if (!this.isValidEventType(type)) {\n      throw new Error(`Invalid event type: ${type}`);\n    }\n\n    if (!this.listeners[type]) return;\n\n    // Take a snapshot of listeners at this moment\n    const listenersSnapshot = [...this.listeners[type]!];\n\n    listenersSnapshot.forEach((listenerObj) => {\n      if (listenerObj.shouldRemove) {\n        return;\n      }\n\n      _console.log(`dispatching \"${type}\" listener`, listenerObj);\n      try {\n        listenerObj.listener({ type, target: this.target, message });\n      } catch (error) {\n        console.error(error);\n      }\n\n      if (listenerObj.once) {\n        _console.log(`flagging \"${type}\" listener`, listenerObj);\n        listenerObj.shouldRemove = true;\n      }\n    });\n\n    this.updateEventListeners(type);\n  }\n\n  waitForEvent<T extends EventType>(\n    type: T\n  ): Promise<{ type: T; target: Target; message: EventMessages[T] }> {\n    return new Promise((resolve) => {\n      const onceListener = (event: {\n        type: T;\n        target: Target;\n        message: EventMessages[T];\n      }) => {\n        resolve(event);\n      };\n\n      this.addEventListener(type, onceListener, { once: true });\n    });\n  }\n}\n\nexport default EventDispatcher;\n","import { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"Timer\", { log: false });\n\nexport async function wait(delay: number) {\n  _console.log(`waiting for ${delay}ms`);\n  return new Promise((resolve: Function) => {\n    setTimeout(() => resolve(), delay);\n  });\n}\n\nexport class Timer {\n  #callback!: Function;\n  get callback() {\n    return this.#callback;\n  }\n  set callback(newCallback) {\n    _console.assertTypeWithError(newCallback, \"function\");\n    _console.log({ newCallback });\n    this.#callback = newCallback;\n    if (this.isRunning) {\n      this.restart();\n    }\n  }\n\n  #interval!: number;\n  get interval() {\n    return this.#interval;\n  }\n  set interval(newInterval) {\n    _console.assertTypeWithError(newInterval, \"number\");\n    _console.assertWithError(newInterval > 0, \"interval must be above 0\");\n    _console.log({ newInterval });\n    this.#interval = newInterval;\n    if (this.isRunning) {\n      this.restart();\n    }\n  }\n\n  constructor(callback: Function, interval: number) {\n    this.interval = interval;\n    this.callback = callback;\n  }\n\n  #intervalId: number | undefined;\n  get isRunning() {\n    return this.#intervalId != undefined;\n  }\n\n  start(immediately = false) {\n    if (this.isRunning) {\n      _console.log(\"interval already running\");\n      return;\n    }\n    _console.log(`starting interval every ${this.#interval}ms`);\n    this.#intervalId = setInterval(this.#callback, this.#interval);\n    if (immediately) {\n      this.#callback();\n    }\n  }\n  stop() {\n    if (!this.isRunning) {\n      _console.log(\"interval already not running\");\n      return;\n    }\n    _console.log(\"stopping interval\");\n    clearInterval(this.#intervalId);\n    this.#intervalId = undefined;\n  }\n  restart(startImmediately = false) {\n    this.stop();\n    this.start(startImmediately);\n  }\n}\n","import { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"checksum\", { log: false });\n\n// https://github.com/googlecreativelab/tiny-motion-trainer/blob/5fceb49f018ae0c403bf9f0ccc437309c2acb507/frontend/src/tf4micro-motion-kit/modules/bleFileTransfer#L195\n\n// See http://home.thep.lu.se/~bjorn/crc/ for more information on simple CRC32 calculations.\nexport function crc32ForByte(r: number) {\n  for (let j = 0; j < 8; ++j) {\n    r = (r & 1 ? 0 : 0xedb88320) ^ (r >>> 1);\n  }\n  return r ^ 0xff000000;\n}\n\nconst tableSize = 256;\nconst crc32Table = new Uint32Array(tableSize);\nfor (let i = 0; i < tableSize; ++i) {\n  crc32Table[i] = crc32ForByte(i);\n}\n\nexport function crc32(dataIterable: ArrayBuffer | number[]) {\n  let dataBytes = new Uint8Array(dataIterable);\n  let crc = 0;\n  for (let i = 0; i < dataBytes.byteLength; ++i) {\n    const crcLowByte = crc & 0x000000ff;\n    const dataByte = dataBytes[i];\n    const tableIndex = crcLowByte ^ dataByte;\n    // The last >>> is to convert this into an unsigned 32-bit integer.\n    crc = (crc32Table[tableIndex] ^ (crc >>> 8)) >>> 0;\n  }\n  return crc;\n}\n\n// This is a small test function for the CRC32 implementation, not normally called but left in\n// for debugging purposes. We know the expected CRC32 of [97, 98, 99, 100, 101] is 2240272485,\n// or 0x8587d865, so if anything else is output we know there's an error in the implementation.\nexport function testCrc32() {\n  const testArray = [97, 98, 99, 100, 101];\n  const testArrayCrc32 = crc32(testArray);\n  _console.log(\"CRC32 for [97, 98, 99, 100, 101] is 0x\" + testArrayCrc32.toString(16) + \" (\" + testArrayCrc32 + \")\");\n}\n","var _TextEncoder;\nif (typeof TextEncoder == \"undefined\") {\n  _TextEncoder = class {\n    encode(string: string) {\n      const encoding = Array.from(string).map((char) => char.charCodeAt(0));\n      return Uint8Array.from(encoding);\n    }\n  };\n} else {\n  _TextEncoder = TextEncoder;\n}\n\nvar _TextDecoder;\nif (typeof TextDecoder == \"undefined\") {\n  _TextDecoder = class {\n    decode(data: ArrayBuffer) {\n      const byteArray = Array.from(new Uint8Array(data));\n      return byteArray\n        .map((value) => {\n          return String.fromCharCode(value);\n        })\n        .join(\"\");\n    }\n  };\n} else {\n  _TextDecoder = TextDecoder;\n}\n\nexport const textEncoder = new _TextEncoder();\nexport const textDecoder = new _TextDecoder();\n","import { createConsole } from \"./Console.ts\";\nimport { textEncoder } from \"./Text.ts\";\n\nconst _console = createConsole(\"ArrayBufferUtils\", { log: false });\n\nexport function concatenateArrayBuffers(...arrayBuffers: any[]): ArrayBuffer {\n  arrayBuffers = arrayBuffers.filter(\n    (arrayBuffer) => arrayBuffer != undefined || arrayBuffer != null\n  );\n  arrayBuffers = arrayBuffers.map((arrayBuffer) => {\n    if (typeof arrayBuffer == \"number\") {\n      const number = arrayBuffer;\n      return Uint8Array.from([Math.floor(number)]);\n    } else if (typeof arrayBuffer == \"boolean\") {\n      const boolean = arrayBuffer;\n      return Uint8Array.from([boolean ? 1 : 0]);\n    } else if (typeof arrayBuffer == \"string\") {\n      const string = arrayBuffer;\n      return stringToArrayBuffer(string);\n    } else if (arrayBuffer instanceof Array) {\n      const array = arrayBuffer;\n      return concatenateArrayBuffers(...array);\n    } else if (arrayBuffer instanceof ArrayBuffer) {\n      return arrayBuffer;\n    } else if (\n      \"buffer\" in arrayBuffer &&\n      arrayBuffer.buffer instanceof ArrayBuffer\n    ) {\n      const bufferContainer = arrayBuffer;\n      return bufferContainer.buffer;\n    } else if (arrayBuffer instanceof DataView) {\n      const dataView = arrayBuffer;\n      return dataView.buffer;\n    } else if (typeof arrayBuffer == \"object\") {\n      const object = arrayBuffer;\n      return objectToArrayBuffer(object);\n    } else {\n      return arrayBuffer;\n    }\n  });\n  arrayBuffers = arrayBuffers.filter(\n    (arrayBuffer) => arrayBuffer && \"byteLength\" in arrayBuffer\n  );\n  const length = arrayBuffers.reduce(\n    (length, arrayBuffer) => length + arrayBuffer.byteLength,\n    0\n  );\n  const uint8Array = new Uint8Array(length);\n  let byteOffset = 0;\n  arrayBuffers.forEach((arrayBuffer) => {\n    uint8Array.set(new Uint8Array(arrayBuffer), byteOffset);\n    byteOffset += arrayBuffer.byteLength;\n  });\n  return uint8Array.buffer;\n}\n\nexport function dataToArrayBuffer(data: Buffer) {\n  return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n}\n\nexport function stringToArrayBuffer(string: string) {\n  const encoding = textEncoder.encode(string);\n  return concatenateArrayBuffers(encoding.byteLength, encoding);\n}\n\nexport function objectToArrayBuffer(object: object) {\n  return stringToArrayBuffer(JSON.stringify(object));\n}\n\nexport function sliceDataView(\n  dataView: DataView,\n  begin: number,\n  length?: number\n) {\n  let end;\n  if (length != undefined) {\n    end = dataView.byteOffset + begin + length;\n  }\n  _console.log({ dataView, begin, end, length });\n  return new DataView(dataView.buffer.slice(dataView.byteOffset + begin, end));\n}\n\nexport type FileLike = number[] | ArrayBuffer | DataView | URL | string | File;\n\nexport async function getFileBuffer(file: FileLike) {\n  let fileBuffer;\n  if (file instanceof Array) {\n    fileBuffer = Uint8Array.from(file);\n  } else if (file instanceof DataView) {\n    fileBuffer = file.buffer;\n  } else if (typeof file == \"string\" || file instanceof URL) {\n    const response = await fetch(file);\n    fileBuffer = await response.arrayBuffer();\n  } else if (file instanceof File) {\n    fileBuffer = await file.arrayBuffer();\n  } else if (file instanceof ArrayBuffer) {\n    fileBuffer = file;\n  } else {\n    throw { error: \"invalid file type\", file };\n  }\n  return fileBuffer;\n}\n\nexport function UInt8ByteBuffer(value: number) {\n  return Uint8Array.from([value]).buffer;\n}\n","// Gets all non-builtin properties up the prototype chain.\nconst getAllProperties = object => {\n\tconst properties = new Set();\n\n\tdo {\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tproperties.add([object, key]);\n\t\t}\n\t} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n\treturn properties;\n};\n\nexport default function autoBind(self, {include, exclude} = {}) {\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n\t\tif (include) {\n\t\t\treturn include.some(match); // eslint-disable-line unicorn/no-array-callback-reference\n\t\t}\n\n\t\tif (exclude) {\n\t\t\treturn !exclude.some(match); // eslint-disable-line unicorn/no-array-callback-reference\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tfor (const [object, key] of getAllProperties(self.constructor.prototype)) {\n\t\tif (key === 'constructor' || !filter(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\t\tif (descriptor && typeof descriptor.value === 'function') {\n\t\t\tself[key] = self[key].bind(self);\n\t\t}\n\t}\n\n\treturn self;\n}\n","import { createConsole } from \"./utils/Console.ts\";\nimport { crc32 } from \"./utils/checksum.ts\";\nimport { getFileBuffer, UInt8ByteBuffer } from \"./utils/ArrayBufferUtils.ts\";\nimport { FileLike } from \"./utils/ArrayBufferUtils.ts\";\nimport Device, { SendMessageCallback } from \"./Device.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"FileTransferManager\", { log: false });\n\nexport const FileTransferMessageTypes = [\n  \"getFileTypes\",\n  \"maxFileLength\",\n  \"getFileType\",\n  \"setFileType\",\n  \"getFileLength\",\n  \"setFileLength\",\n  \"getFileChecksum\",\n  \"setFileChecksum\",\n  \"setFileTransferCommand\",\n  \"fileTransferStatus\",\n  \"getFileBlock\",\n  \"setFileBlock\",\n  \"fileBytesTransferred\",\n] as const;\nexport type FileTransferMessageType = (typeof FileTransferMessageTypes)[number];\n\nexport const FileTypes = [\n  \"tflite\",\n  \"wifiServerCert\",\n  \"wifiServerKey\",\n  \"spriteSheet\",\n] as const;\nexport type FileType = (typeof FileTypes)[number];\n\nexport const FileTransferStatuses = [\"idle\", \"sending\", \"receiving\"] as const;\nexport type FileTransferStatus = (typeof FileTransferStatuses)[number];\n\nexport const FileTransferCommands = [\n  \"startSend\",\n  \"startReceive\",\n  \"cancel\",\n] as const;\nexport type FileTransferCommand = (typeof FileTransferCommands)[number];\n\nexport const FileTransferDirections = [\"sending\", \"receiving\"] as const;\nexport type FileTransferDirection = (typeof FileTransferDirections)[number];\n\nexport const FileTransferEventTypes = [\n  ...FileTransferMessageTypes,\n  \"fileTransferProgress\",\n  \"fileTransferComplete\",\n  \"fileReceived\",\n] as const;\nexport type FileTransferEventType = (typeof FileTransferEventTypes)[number];\n\nexport const RequiredFileTransferMessageTypes: FileTransferMessageType[] = [\n  \"maxFileLength\",\n  \"getFileLength\",\n  \"getFileChecksum\",\n  \"getFileType\",\n  \"fileTransferStatus\",\n];\n\nexport interface FileConfiguration {\n  file: FileLike;\n  type: FileType;\n}\n\nexport interface FileTransferEventMessages {\n  getFileTypes: { fileTypes: FileType[] };\n  maxFileLength: { maxFileLength: number };\n  getFileType: { fileType: FileType };\n  getFileLength: { fileLength: number };\n  getFileChecksum: { fileChecksum: number };\n  fileTransferStatus: {\n    fileType: FileType;\n    fileTransferStatus: FileTransferStatus;\n  };\n  getFileBlock: { fileTransferBlock: DataView };\n  fileTransferProgress: { fileType: FileType; progress: number };\n  fileTransferComplete: {\n    fileType: FileType;\n    direction: FileTransferDirection;\n  };\n  fileReceived: { fileType: FileType; file: File | Blob };\n}\n\nexport type FileTransferEventDispatcher = EventDispatcher<\n  Device,\n  FileTransferEventType,\n  FileTransferEventMessages\n>;\nexport type SendFileTransferMessageCallback =\n  SendMessageCallback<FileTransferMessageType>;\n\nexport type SendFileCallback = (\n  type: FileType,\n  file: FileLike,\n  override?: boolean\n) => Promise<boolean>;\n\nclass FileTransferManager {\n  constructor() {\n    autoBind(this);\n  }\n  sendMessage!: SendFileTransferMessageCallback;\n\n  eventDispatcher!: FileTransferEventDispatcher;\n  get addEventListener() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  #assertValidType(type: FileType) {\n    _console.assertEnumWithError(type, FileTypes);\n  }\n  #isValidType(type: FileType) {\n    return FileTypes.includes(type);\n  }\n  #assertValidTypeEnum(typeEnum: number) {\n    _console.assertWithError(\n      typeEnum in FileTypes,\n      `invalid typeEnum ${typeEnum}`\n    );\n  }\n\n  #assertValidStatusEnum(statusEnum: number) {\n    _console.assertWithError(\n      statusEnum in FileTransferStatuses,\n      `invalid statusEnum ${statusEnum}`\n    );\n  }\n  #assertValidCommand(command: FileTransferCommand) {\n    _console.assertEnumWithError(command, FileTransferCommands);\n  }\n\n  #fileTypes: FileType[] = [];\n  get fileTypes() {\n    return this.#fileTypes;\n  }\n  #parseFileTypes(dataView: DataView) {\n    const fileTypes = Array.from(new Uint8Array(dataView.buffer))\n      .map((index) => FileTypes[index])\n      .filter(Boolean);\n    this.#fileTypes = fileTypes;\n    _console.log(\"fileTypes\", fileTypes);\n    this.#dispatchEvent(\"getFileTypes\", {\n      fileTypes: this.#fileTypes,\n    });\n  }\n\n  static #MaxLength = 0; // kB\n  static get MaxLength() {\n    return this.#MaxLength;\n  }\n  #maxLength = FileTransferManager.MaxLength;\n  /** kB */\n  get maxLength() {\n    return this.#maxLength;\n  }\n  #parseMaxLength(dataView: DataView) {\n    _console.log(\"parseFileMaxLength\", dataView);\n    const maxLength = dataView.getUint32(0, true);\n    _console.log(`maxLength: ${maxLength / 1024}kB`);\n    this.#updateMaxLength(maxLength);\n  }\n  #updateMaxLength(maxLength: number) {\n    _console.log({ maxLength });\n    this.#maxLength = maxLength;\n    this.#dispatchEvent(\"maxFileLength\", { maxFileLength: maxLength });\n  }\n  #assertValidLength(length: number) {\n    _console.assertWithError(\n      length <= this.maxLength,\n      `file length ${length}kB too large - must be ${this.maxLength}kB or less`\n    );\n  }\n\n  #type: FileType | undefined;\n  get type() {\n    return this.#type;\n  }\n  #parseType(dataView: DataView) {\n    _console.log(\"parseFileType\", dataView);\n    const typeEnum = dataView.getUint8(0);\n    this.#assertValidTypeEnum(typeEnum);\n    const type = FileTypes[typeEnum];\n    this.#updateType(type);\n  }\n  #updateType(type: FileType) {\n    _console.log({ fileTransferType: type });\n    this.#type = type;\n    this.#dispatchEvent(\"getFileType\", { fileType: type });\n  }\n  async #setType(newType: FileType, sendImmediately?: boolean) {\n    this.#assertValidType(newType);\n    if (this.type == newType) {\n      _console.log(`redundant type assignment ${newType}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getFileType\");\n\n    const typeEnum = FileTypes.indexOf(newType);\n\n    this.sendMessage(\n      [{ type: \"setFileType\", data: UInt8ByteBuffer(typeEnum) }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #length = 0;\n  get length() {\n    return this.#length;\n  }\n  #parseLength(dataView: DataView) {\n    _console.log(\"parseFileLength\", dataView);\n    const length = dataView.getUint32(0, true);\n\n    this.#updateLength(length);\n  }\n  #updateLength(length: number) {\n    _console.log(`length: ${length / 1024}kB`);\n    this.#length = length;\n    this.#dispatchEvent(\"getFileLength\", { fileLength: length });\n  }\n  async #setLength(newLength: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newLength, \"number\");\n    this.#assertValidLength(newLength);\n    if (this.length == newLength) {\n      _console.log(`redundant length assignment ${newLength}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getFileLength\");\n\n    const dataView = new DataView(new ArrayBuffer(4));\n    dataView.setUint32(0, newLength, true);\n    this.sendMessage(\n      [{ type: \"setFileLength\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #checksum = 0;\n  get checksum() {\n    return this.#checksum;\n  }\n  #parseChecksum(dataView: DataView) {\n    _console.log(\"checksum\", dataView);\n    const checksum = dataView.getUint32(0, true);\n    this.#updateChecksum(checksum);\n  }\n  #updateChecksum(checksum: number) {\n    _console.log({ checksum });\n    this.#checksum = checksum;\n    this.#dispatchEvent(\"getFileChecksum\", { fileChecksum: checksum });\n  }\n  async #setChecksum(newChecksum: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newChecksum, \"number\");\n    if (this.checksum == newChecksum) {\n      _console.log(`redundant checksum assignment ${newChecksum}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getFileChecksum\");\n\n    const dataView = new DataView(new ArrayBuffer(4));\n    dataView.setUint32(0, newChecksum, true);\n    this.sendMessage(\n      [{ type: \"setFileChecksum\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  async #setCommand(command: FileTransferCommand, sendImmediately?: boolean) {\n    this.#assertValidCommand(command);\n\n    const promise = this.waitForEvent(\"fileTransferStatus\");\n    _console.log(`setting command ${command}`);\n    const commandEnum = FileTransferCommands.indexOf(command);\n\n    this.sendMessage(\n      [\n        {\n          type: \"setFileTransferCommand\",\n          data: UInt8ByteBuffer(commandEnum),\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #status: FileTransferStatus = \"idle\";\n  get status() {\n    return this.#status;\n  }\n  #parseStatus(dataView: DataView) {\n    _console.log(\"parseFileStatus\", dataView);\n    const statusEnum = dataView.getUint8(0);\n    this.#assertValidStatusEnum(statusEnum);\n    const status = FileTransferStatuses[statusEnum];\n    this.#updateStatus(status);\n  }\n  #updateStatus(status: FileTransferStatus) {\n    _console.log({ status });\n    this.#status = status;\n    this.#receivedBlocks.length = 0;\n    this.#isCancelling = false;\n    this.#buffer = undefined;\n    this.#bytesTransferred = 0;\n    this.#dispatchEvent(\"fileTransferStatus\", {\n      fileTransferStatus: status,\n      fileType: this.type!,\n    });\n  }\n  #assertIsIdle() {\n    _console.assertWithError(this.#status == \"idle\", \"status is not idle\");\n  }\n  #assertIsNotIdle() {\n    _console.assertWithError(this.#status != \"idle\", \"status is idle\");\n  }\n\n  // BLOCK\n\n  #receivedBlocks: ArrayBuffer[] = [];\n\n  async #parseBlock(dataView: DataView) {\n    _console.log(\"parseFileBlock\", dataView);\n    this.#receivedBlocks.push(dataView.buffer);\n\n    const bytesReceived = this.#receivedBlocks.reduce(\n      (sum, arrayBuffer) => (sum += arrayBuffer.byteLength),\n      0\n    );\n    const progress = bytesReceived / this.#length;\n\n    _console.log(\n      `received ${bytesReceived} of ${this.#length} bytes (${progress * 100}%)`\n    );\n\n    this.#dispatchEvent(\"fileTransferProgress\", {\n      progress,\n      fileType: this.type!,\n    });\n\n    if (bytesReceived != this.#length) {\n      const dataView = new DataView(new ArrayBuffer(4));\n      dataView.setUint32(0, bytesReceived, true);\n\n      if (this.isServerSide) {\n        return;\n      }\n      await this.sendMessage([\n        { type: \"fileBytesTransferred\", data: dataView.buffer },\n      ]);\n      return;\n    }\n\n    _console.log(\"file transfer complete\");\n\n    let fileName = new Date().toLocaleString();\n    switch (this.type) {\n      case \"tflite\":\n        fileName += \".tflite\";\n        break;\n      case \"wifiServerCert\":\n        fileName += \"_server.crt\";\n        break;\n      case \"wifiServerKey\":\n        fileName += \"_server.key\";\n        break;\n    }\n\n    let file: File | Blob;\n    if (typeof File !== \"undefined\") {\n      file = new File(this.#receivedBlocks, fileName);\n    } else {\n      file = new Blob(this.#receivedBlocks);\n    }\n\n    const arrayBuffer = await file.arrayBuffer();\n    const checksum = crc32(arrayBuffer);\n    _console.log({ checksum });\n\n    if (checksum != this.#checksum) {\n      _console.error(\n        `wrong checksum - expected ${this.#checksum}, got ${checksum}`\n      );\n      return;\n    }\n\n    _console.log(\"received file\", file);\n\n    this.#dispatchEvent(\"getFileBlock\", { fileTransferBlock: dataView });\n    this.#dispatchEvent(\"fileTransferComplete\", {\n      direction: \"receiving\",\n      fileType: this.type!,\n    });\n    this.#dispatchEvent(\"fileReceived\", { file, fileType: this.type! });\n  }\n\n  parseMessage(messageType: FileTransferMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getFileTypes\":\n        this.#parseFileTypes(dataView);\n        break;\n      case \"maxFileLength\":\n        this.#parseMaxLength(dataView);\n        break;\n      case \"getFileType\":\n      case \"setFileType\":\n        this.#parseType(dataView);\n        break;\n      case \"getFileLength\":\n      case \"setFileLength\":\n        this.#parseLength(dataView);\n        break;\n      case \"getFileChecksum\":\n      case \"setFileChecksum\":\n        this.#parseChecksum(dataView);\n        break;\n      case \"fileTransferStatus\":\n        this.#parseStatus(dataView);\n        break;\n      case \"getFileBlock\":\n        this.#parseBlock(dataView);\n        break;\n      case \"fileBytesTransferred\":\n        this.#parseBytesTransferred(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  async send(type: FileType, file: FileLike, override?: boolean) {\n    if (true) {\n      this.#assertIsIdle();\n      this.#assertValidType(type);\n    } else {\n      if (this.status != \"idle\") {\n        _console.warn(`cannot send file - status is ${this.status}`);\n        return false;\n      }\n      if (!this.#isValidType(type)) {\n        _console.warn(`invalid fileType ${type}`);\n        return false;\n      }\n    }\n\n    const fileBuffer = await getFileBuffer(file);\n    const fileLength = fileBuffer.byteLength;\n    const checksum = crc32(fileBuffer);\n    this.#assertValidLength(fileLength);\n\n    if (!override) {\n      if (type != this.type) {\n        _console.log(\"different fileTypes - sending\");\n      } else if (fileLength != this.length) {\n        _console.log(\"different fileLengths - sending\");\n      } else if (checksum != this.checksum) {\n        _console.log(\"different fileChecksums - sending\");\n      } else {\n        _console.log(\"already sent file\");\n        return false;\n      }\n    }\n\n    const promises: Promise<any>[] = [];\n\n    promises.push(this.#setType(type, false));\n    promises.push(this.#setLength(fileLength, false));\n    promises.push(this.#setChecksum(checksum, false));\n    promises.push(this.#setCommand(\"startSend\", false));\n\n    this.sendMessage();\n\n    await Promise.all(promises);\n\n    if (this.#buffer) {\n      return false;\n    }\n    if (this.#length != fileLength) {\n      return false;\n    }\n    if (this.#checksum != checksum) {\n      return false;\n    }\n\n    await this.#send(fileBuffer);\n\n    return true;\n  }\n\n  #buffer?: ArrayBuffer;\n  #bytesTransferred = 0;\n  async #send(buffer: ArrayBuffer) {\n    this.#buffer = buffer;\n    return this.#sendBlock();\n  }\n\n  mtu!: number;\n  async #sendBlock(): Promise<void> {\n    if (this.status != \"sending\") {\n      return;\n    }\n    if (this.#isCancelling) {\n      _console.error(\"not sending block - busy cancelling\");\n      return;\n    }\n    if (!this.#buffer) {\n      if (!this.isServerSide) {\n        _console.error(\"no buffer defined\");\n      }\n      return;\n    }\n\n    const buffer = this.#buffer;\n    let offset = this.#bytesTransferred;\n\n    const slicedBuffer = buffer.slice(offset, offset + (this.mtu - 3 - 3));\n    _console.log(\"slicedBuffer\", slicedBuffer);\n    const bytesLeft = buffer.byteLength - offset;\n\n    const progress = 1 - bytesLeft / buffer.byteLength;\n    _console.log(\n      `sending bytes ${offset}-${offset + slicedBuffer.byteLength} of ${\n        buffer.byteLength\n      } bytes (${progress * 100}%)`\n    );\n    this.#dispatchEvent(\"fileTransferProgress\", {\n      progress,\n      fileType: this.type!,\n    });\n    if (slicedBuffer.byteLength == 0) {\n      _console.log(\"finished sending buffer\");\n      this.#dispatchEvent(\"fileTransferComplete\", {\n        direction: \"sending\",\n        fileType: this.type!,\n      });\n    } else {\n      await this.sendMessage([{ type: \"setFileBlock\", data: slicedBuffer }]);\n      this.#bytesTransferred = offset + slicedBuffer.byteLength;\n      //return this.#sendBlock(buffer, offset + slicedBuffer.byteLength);\n    }\n  }\n\n  async #parseBytesTransferred(dataView: DataView) {\n    _console.log(\"parseBytesTransferred\", dataView);\n    const bytesTransferred = dataView.getUint32(0, true);\n    _console.log({ bytesTransferred });\n    if (this.status != \"sending\") {\n      _console.error(`not currently sending file`);\n      return;\n    }\n    if (!this.isServerSide && this.#bytesTransferred != bytesTransferred) {\n      _console.error(\n        `bytesTransferred are not equal - got ${bytesTransferred}, expected ${\n          this.#bytesTransferred\n        }`\n      );\n      this.cancel();\n      return;\n    }\n    this.#sendBlock();\n  }\n\n  async receive(type: FileType) {\n    this.#assertIsIdle();\n\n    this.#assertValidType(type);\n\n    await this.#setType(type);\n    await this.#setCommand(\"startReceive\");\n  }\n\n  #isCancelling = false;\n  async cancel() {\n    this.#assertIsNotIdle();\n    _console.log(\"cancelling file transfer...\");\n    this.#isCancelling = true;\n    await this.#setCommand(\"cancel\");\n  }\n\n  // SERVER SIDE\n  #isServerSide = false;\n  get isServerSide() {\n    return this.#isServerSide;\n  }\n  set isServerSide(newIsServerSide) {\n    if (this.#isServerSide == newIsServerSide) {\n      _console.log(\"redundant isServerSide assignment\");\n      return;\n    }\n    _console.log({ newIsServerSide });\n    this.#isServerSide = newIsServerSide;\n  }\n\n  requestRequiredInformation() {\n    _console.log(\"requesting required fileTransfer information\");\n    const messages = RequiredFileTransferMessageTypes.map((messageType) => ({\n      type: messageType,\n    }));\n    this.sendMessage(messages, false);\n  }\n\n  clear() {\n    this.#status = \"idle\";\n    this.#isServerSide = false;\n  }\n}\n\nexport default FileTransferManager;\n","import { PressureSensorPosition } from \"../sensor/PressureSensorDataManager.ts\";\nimport { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"MathUtils\", { log: false });\n\nexport function getInterpolation(\n  value: number,\n  min: number,\n  max: number,\n  span: number\n) {\n  if (span == undefined) {\n    span = max - min;\n  }\n  return (value - min) / span;\n}\n\nexport const Uint16Max = 2 ** 16;\nexport const Int16Max = 2 ** 15;\nexport const Int16Min = -(2 ** 15) - 1;\n\nfunction removeLower2Bytes(number: number) {\n  const lower2Bytes = number % Uint16Max;\n  return number - lower2Bytes;\n}\n\nconst timestampThreshold = 60_000;\n\nexport function parseTimestamp(dataView: DataView, byteOffset: number) {\n  const now = Date.now();\n  const nowWithoutLower2Bytes = removeLower2Bytes(now);\n  const lower2Bytes = dataView.getUint16(byteOffset, true);\n  let timestamp = nowWithoutLower2Bytes + lower2Bytes;\n  if (Math.abs(now - timestamp) > timestampThreshold) {\n    _console.log(\"correcting timestamp delta\");\n    timestamp += Uint16Max * Math.sign(now - timestamp);\n  }\n  return timestamp;\n}\n\nexport interface Vector2 {\n  x: number;\n  y: number;\n}\n\nexport function getVector2Length(vector: Vector2) {\n  const { x, y } = vector;\n  return Math.sqrt(x ** 2 + y ** 2);\n}\n\nexport function getVector2Distance(a: Vector2, b: Vector2) {\n  return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2);\n}\n\nexport function getVector2DistanceSquared(a: Vector2, b: Vector2) {\n  return (b.x - a.x) ** 2 + (b.y - a.y) ** 2;\n}\n\nexport function getVector2Angle(vector: Vector2) {\n  const { x, y } = vector;\n  return Math.atan2(y, x);\n}\n\nexport function getVector2Midpoint(a: Vector2, b: Vector2): Vector2 {\n  return {\n    x: (a.x + b.x) / 2,\n    y: (a.y + b.y) / 2,\n  };\n}\n\nexport function multiplyVector2ByScalar(\n  vector: Vector2,\n  scalar: number\n): Vector2 {\n  let { x, y } = vector;\n  x *= scalar;\n  y *= scalar;\n  return { x, y };\n}\nexport function normalizedVector2(vector: Vector2): Vector2 {\n  return multiplyVector2ByScalar(vector, 1 / getVector2Length(vector));\n}\n\nexport interface Vector3 extends Vector2 {\n  z: number;\n}\n\nexport interface Quaternion {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Euler {\n  heading: number;\n  pitch: number;\n  roll: number;\n}\n\nexport function computeVoronoiWeights(\n  points: PressureSensorPosition[],\n  sampleCount = 100000\n) {\n  const n = points.length;\n  const counts = new Array(n).fill(0);\n\n  for (let i = 0; i < sampleCount; i++) {\n    const x = Math.random();\n    const y = Math.random();\n\n    // Find the closest input point\n    let minDist = Infinity;\n    let closestIndex = -1;\n\n    for (let j = 0; j < n; j++) {\n      const { x: px, y: py } = points[j];\n      const dist = (px - x) ** 2 + (py - y) ** 2; // Squared Euclidean distance\n      if (dist < minDist) {\n        minDist = dist;\n        closestIndex = j;\n      }\n    }\n\n    // Increment count for the closest point\n    counts[closestIndex]++;\n  }\n\n  // Convert counts to weights (sum to 1)\n  return counts.map((c) => c / sampleCount);\n}\n\nexport function getVector3Length(vector: Vector3) {\n  const { x, y, z } = vector;\n  return Math.sqrt(x ** 2 + y ** 2 + z ** 2);\n}\n\nexport function clamp(value: number, min: number = 0, max: number = 1) {\n  return Math.min(Math.max(value, min), max);\n}\n\nexport function degToRad(deg: number) {\n  return deg * (Math.PI / 180);\n}\n\nexport function radToDeg(rad: number) {\n  return rad * (180 / Math.PI);\n}\n\nexport const twoPi = Math.PI * 2;\nexport function normalizeRadians(rad: number): number {\n  return ((rad % twoPi) + twoPi) % twoPi;\n}\n\nexport function pointInPolygon(pt: Vector2, polygon: Vector2[]): boolean {\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x,\n      yi = polygon[i].y;\n    const xj = polygon[j].x,\n      yj = polygon[j].y;\n\n    const intersect =\n      yi > pt.y !== yj > pt.y &&\n      pt.x < ((xj - xi) * (pt.y - yi)) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n}\n","import { getInterpolation } from \"./MathUtils.ts\";\n\nexport interface Range {\n  min: number;\n  max: number;\n  span: number;\n}\n\nconst initialRange: Range = { min: Infinity, max: -Infinity, span: 0 };\n\nclass RangeHelper {\n  #range: Range = structuredClone(initialRange);\n  get min() {\n    return this.#range.min;\n  }\n  get max() {\n    return this.#range.max;\n  }\n  get span() {\n    return this.#range.span;\n  }\n\n  get range() {\n    return structuredClone(this.#range);\n  }\n\n  set min(newMin) {\n    this.#range.min = newMin;\n    this.#range.max = Math.max(newMin, this.#range.max);\n    this.#updateSpan();\n  }\n  set max(newMax) {\n    this.#range.max = newMax;\n    this.#range.min = Math.min(newMax, this.#range.min);\n    this.#updateSpan();\n  }\n\n  #updateSpan() {\n    this.#range.span = this.#range.max - this.#range.min;\n  }\n\n  reset() {\n    Object.assign(this.#range, initialRange);\n  }\n\n  update(value: number) {\n    this.#range.min = Math.min(value, this.#range.min);\n    this.#range.max = Math.max(value, this.#range.max);\n    this.#updateSpan();\n  }\n\n  getNormalization(value: number, weightByRange: boolean) {\n    let normalization = getInterpolation(\n      value,\n      this.#range.min,\n      this.#range.max,\n      this.#range.span\n    );\n    if (weightByRange) {\n      normalization *= this.#range.span;\n    }\n    return normalization || 0;\n  }\n\n  updateAndGetNormalization(value: number, weightByRange: boolean) {\n    this.update(value);\n    return this.getNormalization(value, weightByRange);\n  }\n}\n\nexport default RangeHelper;\n","import RangeHelper from \"./RangeHelper.ts\";\n\nimport { Vector2 } from \"./MathUtils.ts\";\n\nexport type CenterOfPressure = Vector2;\n\nexport interface CenterOfPressureRange {\n  x: RangeHelper;\n  y: RangeHelper;\n}\n\nclass CenterOfPressureHelper {\n  #range: CenterOfPressureRange = {\n    x: new RangeHelper(),\n    y: new RangeHelper(),\n  };\n  reset() {\n    this.#range.x.reset();\n    this.#range.y.reset();\n  }\n\n  update(centerOfPressure: CenterOfPressure) {\n    this.#range.x.update(centerOfPressure.x);\n    this.#range.y.update(centerOfPressure.y);\n  }\n  getNormalization(centerOfPressure: CenterOfPressure, weightByRange: boolean): CenterOfPressure {\n    return {\n      x: this.#range.x.getNormalization(centerOfPressure.x, weightByRange),\n      y: this.#range.y.getNormalization(centerOfPressure.y, weightByRange),\n    };\n  }\n\n  updateAndGetNormalization(centerOfPressure: CenterOfPressure, weightByRange: boolean) {\n    this.update(centerOfPressure);\n    return this.getNormalization(centerOfPressure, weightByRange);\n  }\n}\n\nexport default CenterOfPressureHelper;\n","import { createConsole } from \"../utils/Console.ts\";\nimport CenterOfPressureHelper from \"../utils/CenterOfPressureHelper.ts\";\nimport RangeHelper from \"../utils/RangeHelper.ts\";\nimport { createArray } from \"../utils/ArrayUtils.ts\";\n\nconst _console = createConsole(\"PressureDataManager\", { log: false });\n\nexport const PressureSensorTypes = [\"pressure\"] as const;\nexport type PressureSensorType = (typeof PressureSensorTypes)[number];\n\nexport const ContinuousPressureSensorTypes = PressureSensorTypes;\nexport type ContinuousPressureSensorType =\n  (typeof ContinuousPressureSensorTypes)[number];\n\nimport { computeVoronoiWeights, Vector2 } from \"../utils/MathUtils.ts\";\nexport type PressureSensorPosition = Vector2;\n\nimport { CenterOfPressure } from \"../utils/CenterOfPressureHelper.ts\";\n\nexport interface PressureSensorValue {\n  position: PressureSensorPosition;\n  rawValue: number;\n  scaledValue: number;\n  normalizedValue: number;\n  weightedValue: number;\n}\n\nexport interface PressureData {\n  sensors: PressureSensorValue[];\n  scaledSum: number;\n  normalizedSum: number;\n  center?: CenterOfPressure;\n  normalizedCenter?: CenterOfPressure;\n}\n\nexport interface PressureDataEventMessages {\n  pressure: { pressure: PressureData };\n}\n\nexport const DefaultNumberOfPressureSensors = 8;\n\nclass PressureSensorDataManager {\n  #positions: PressureSensorPosition[] = [];\n  get positions() {\n    return this.#positions;\n  }\n\n  get numberOfSensors() {\n    return this.positions.length;\n  }\n\n  parsePositions(dataView: DataView) {\n    const positions: PressureSensorPosition[] = [];\n\n    for (\n      let pressureSensorIndex = 0, byteOffset = 0;\n      byteOffset < dataView.byteLength;\n      pressureSensorIndex++, byteOffset += 2\n    ) {\n      positions.push({\n        x: dataView.getUint8(byteOffset) / 2 ** 8,\n        y: dataView.getUint8(byteOffset + 1) / 2 ** 8,\n      });\n    }\n\n    _console.log({ positions });\n\n    this.#positions = positions;\n\n    this.#sensorRangeHelpers = createArray(\n      this.numberOfSensors,\n      () => new RangeHelper()\n    );\n\n    this.resetRange();\n  }\n\n  #sensorRangeHelpers!: RangeHelper[];\n  #normalizedSumRangeHelper = new RangeHelper();\n\n  #centerOfPressureHelper = new CenterOfPressureHelper();\n\n  resetRange() {\n    this.#sensorRangeHelpers?.forEach((rangeHelper) => rangeHelper.reset());\n    this.#centerOfPressureHelper.reset();\n    this.#normalizedSumRangeHelper.reset();\n  }\n\n  parseData(dataView: DataView, scalar: number) {\n    const pressure: PressureData = {\n      sensors: [],\n      scaledSum: 0,\n      normalizedSum: 0,\n    };\n    for (\n      let index = 0, byteOffset = 0;\n      byteOffset < dataView.byteLength;\n      index++, byteOffset += 2\n    ) {\n      const rawValue = dataView.getUint16(byteOffset, true);\n      let scaledValue = (rawValue * scalar) / this.numberOfSensors;\n      const rangeHelper = this.#sensorRangeHelpers[index];\n      const normalizedValue = rangeHelper.updateAndGetNormalization(\n        scaledValue,\n        false\n      );\n      //scaledValue -= rangeHelper.min;\n\n      const position = this.positions[index];\n      pressure.sensors[index] = {\n        rawValue,\n        scaledValue,\n        normalizedValue,\n        position,\n        weightedValue: 0,\n      };\n\n      pressure.scaledSum += scaledValue;\n      //pressure.normalizedSum += normalizedValue;\n    }\n    pressure.normalizedSum =\n      this.#normalizedSumRangeHelper.updateAndGetNormalization(\n        pressure.scaledSum,\n        false\n      );\n\n    if (pressure.scaledSum > 0) {\n      pressure.center = { x: 0, y: 0 };\n      pressure.sensors.forEach((sensor) => {\n        sensor.weightedValue = sensor.scaledValue / pressure.scaledSum;\n        pressure.center!.x += sensor.position.x * sensor.weightedValue;\n        pressure.center!.y += sensor.position.y * sensor.weightedValue;\n      });\n      pressure.normalizedCenter =\n        this.#centerOfPressureHelper.updateAndGetNormalization(\n          pressure.center,\n          false\n        );\n    }\n\n    _console.log({ pressure });\n    return pressure;\n  }\n}\n\nexport default PressureSensorDataManager;\n","export function createArray(arrayLength: number, objectOrCallback: ((index: number) => any) | object) {\n  return new Array(arrayLength).fill(1).map((_, index) => {\n    if (typeof objectOrCallback == \"function\") {\n      const callback = objectOrCallback;\n      return callback(index);\n    } else {\n      const object = objectOrCallback;\n      return Object.assign({}, object);\n    }\n  });\n}\n\nexport function arrayWithoutDuplicates(array: any[]) {\n  return array.filter((value, index) => array.indexOf(value) == index);\n}\n","import { createConsole } from \"../utils/Console.ts\";\n\nconst _console = createConsole(\"MotionSensorDataManager\", { log: false });\n\nexport const MotionSensorTypes = [\n  \"acceleration\",\n  \"gravity\",\n  \"linearAcceleration\",\n  \"gyroscope\",\n  \"magnetometer\",\n  \"gameRotation\",\n  \"rotation\",\n  \"orientation\",\n  \"activity\",\n  \"stepCounter\",\n  \"stepDetector\",\n  \"deviceOrientation\",\n  \"tapDetector\",\n] as const;\nexport type MotionSensorType = (typeof MotionSensorTypes)[number];\n\nexport const ContinuousMotionTypes = [\n  \"acceleration\",\n  \"gravity\",\n  \"linearAcceleration\",\n  \"gyroscope\",\n  \"magnetometer\",\n  \"gameRotation\",\n  \"rotation\",\n  \"orientation\",\n] as const;\nexport type ContinuousMotionType = (typeof ContinuousMotionTypes)[number];\n\nimport { Vector3, Quaternion, Euler } from \"../utils/MathUtils.ts\";\nimport { ValueOf } from \"../utils/TypeScriptUtils.ts\";\n\nexport const Vector2Size = 2 * 2;\nexport const Vector3Size = 3 * 2;\nexport const QuaternionSize = 4 * 2;\n\nexport const ActivityTypes = [\n  \"still\",\n  \"walking\",\n  \"running\",\n  \"bicycle\",\n  \"vehicle\",\n  \"tilting\",\n] as const;\nexport type ActivityType = (typeof ActivityTypes)[number];\n\nexport interface Activity {\n  still: boolean;\n  walking: boolean;\n  running: boolean;\n  bicycle: boolean;\n  vehicle: boolean;\n  tilting: boolean;\n}\n\nexport const DeviceOrientations = [\n  \"portraitUpright\",\n  \"landscapeLeft\",\n  \"portraitUpsideDown\",\n  \"landscapeRight\",\n  \"unknown\",\n] as const;\nexport type DeviceOrientation = (typeof DeviceOrientations)[number];\n\nexport interface MotionSensorDataEventMessages {\n  acceleration: { acceleration: Vector3 };\n  gravity: { gravity: Vector3 };\n  linearAcceleration: { linearAcceleration: Vector3 };\n  gyroscope: { gyroscope: Vector3 };\n  magnetometer: { magnetometer: Vector3 };\n  gameRotation: { gameRotation: Quaternion };\n  rotation: { rotation: Quaternion };\n  orientation: { orientation: Euler };\n  stepDetector: { stepDetector: Object };\n  stepCounter: { stepCounter: number };\n  activity: { activity: Activity };\n  deviceOrientation: { deviceOrientation: DeviceOrientation };\n  tapDetector: { tapDetector: Object };\n}\n\nexport type MotionSensorDataEventMessage =\n  ValueOf<MotionSensorDataEventMessages>;\n\nclass MotionSensorDataManager {\n  parseVector3(dataView: DataView, scalar: number): Vector3 {\n    let [x, y, z] = [\n      dataView.getInt16(0, true),\n      dataView.getInt16(2, true),\n      dataView.getInt16(4, true),\n    ].map((value) => value * scalar);\n\n    const vector: Vector3 = { x, y, z };\n\n    _console.log({ vector });\n    return vector;\n  }\n\n  parseQuaternion(dataView: DataView, scalar: number): Quaternion {\n    let [x, y, z, w] = [\n      dataView.getInt16(0, true),\n      dataView.getInt16(2, true),\n      dataView.getInt16(4, true),\n      dataView.getInt16(6, true),\n    ].map((value) => value * scalar);\n\n    const quaternion: Quaternion = { x, y, z, w };\n\n    _console.log({ quaternion });\n    return quaternion;\n  }\n\n  parseEuler(dataView: DataView, scalar: number): Euler {\n    let [heading, pitch, roll] = [\n      dataView.getInt16(0, true),\n      dataView.getInt16(2, true),\n      dataView.getInt16(4, true),\n    ].map((value) => value * scalar);\n\n    pitch *= -1;\n    heading *= -1;\n    if (heading < 0) {\n      heading += 360;\n    }\n\n    const euler: Euler = { heading, pitch, roll };\n\n    _console.log({ euler });\n    return euler;\n  }\n\n  parseStepCounter(dataView: DataView) {\n    _console.log(\"parseStepCounter\", dataView);\n    const stepCount = dataView.getUint32(0, true);\n    _console.log({ stepCount });\n    return stepCount;\n  }\n\n  parseActivity(dataView: DataView) {\n    _console.log(\"parseActivity\", dataView);\n    const activity: Partial<Activity> = {};\n\n    const activityBitfield = dataView.getUint8(0);\n    _console.log(\"activityBitfield\", activityBitfield.toString(2));\n    ActivityTypes.forEach((activityType, index) => {\n      activity[activityType] = Boolean(activityBitfield & (1 << index));\n    });\n\n    _console.log(\"activity\", activity);\n\n    return activity as Activity;\n  }\n\n  parseDeviceOrientation(dataView: DataView) {\n    _console.log(\"parseDeviceOrientation\", dataView);\n    const index = dataView.getUint8(0);\n    const deviceOrientation = DeviceOrientations[index];\n    _console.assertWithError(deviceOrientation, \"undefined deviceOrientation\");\n    _console.log({ deviceOrientation });\n    return deviceOrientation;\n  }\n}\n\nexport default MotionSensorDataManager;\n","import { createConsole } from \"../utils/Console.ts\";\n\nexport const BarometerSensorTypes = [\"barometer\"] as const;\nexport type BarometerSensorType = (typeof BarometerSensorTypes)[number];\n\nexport const ContinuousBarometerSensorTypes = BarometerSensorTypes;\nexport type ContinuousBarometerSensorType = (typeof ContinuousBarometerSensorTypes)[number];\n\nexport interface BarometerSensorDataEventMessages {\n  barometer: {\n    barometer: number;\n    //altitude: number;\n  };\n}\n\nconst _console = createConsole(\"BarometerSensorDataManager\", { log: false });\n\nclass BarometerSensorDataManager {\n  #calculcateAltitude(pressure: number) {\n    const P0 = 101325; // Standard atmospheric pressure at sea level in Pascals\n    const T0 = 288.15; // Standard temperature at sea level in Kelvin\n    const L = 0.0065; // Temperature lapse rate in K/m\n    const R = 8.3144598; // Universal gas constant in J/(mol·K)\n    const g = 9.80665; // Acceleration due to gravity in m/s²\n    const M = 0.0289644; // Molar mass of Earth's air in kg/mol\n\n    const exponent = (R * L) / (g * M);\n    const h = (T0 / L) * (1 - Math.pow(pressure / P0, exponent));\n\n    return h;\n  }\n\n  parseData(dataView: DataView, scalar: number) {\n    const pressure = dataView.getUint32(0, true) * scalar;\n    const altitude = this.#calculcateAltitude(pressure);\n    _console.log({ pressure, altitude });\n    return { pressure };\n  }\n}\n\nexport default BarometerSensorDataManager;\n","import { sliceDataView } from \"./ArrayBufferUtils.ts\";\nimport { createConsole } from \"./Console.ts\";\nimport { textDecoder } from \"./Text.ts\";\n\nconst _console = createConsole(\"ParseUtils\", { log: false });\n\nexport function parseStringFromDataView(\n  dataView: DataView,\n  byteOffset: number = 0\n) {\n  const stringLength = dataView.getUint8(byteOffset++);\n  const string = textDecoder.decode(\n    dataView.buffer.slice(\n      dataView.byteOffset + byteOffset,\n      dataView.byteOffset + byteOffset + stringLength\n    )\n  );\n  byteOffset += stringLength;\n  return { string, byteOffset };\n}\n\nexport function parseMessage<MessageType extends string>(\n  dataView: DataView,\n  messageTypes: readonly MessageType[],\n  callback: (\n    messageType: MessageType,\n    dataView: DataView,\n    context?: any\n  ) => void,\n  context?: any,\n  parseMessageLengthAsUint16: boolean = false\n) {\n  let byteOffset = 0;\n  while (byteOffset < dataView.byteLength) {\n    const messageTypeEnum = dataView.getUint8(byteOffset++);\n    _console.assertWithError(\n      messageTypeEnum in messageTypes,\n      `invalid messageTypeEnum ${messageTypeEnum}`\n    );\n    const messageType = messageTypes[messageTypeEnum];\n\n    let messageLength: number;\n    if (parseMessageLengthAsUint16) {\n      messageLength = dataView.getUint16(byteOffset, true);\n      byteOffset += 2;\n    } else {\n      messageLength = dataView.getUint8(byteOffset++);\n    }\n\n    _console.log({\n      messageTypeEnum,\n      messageType,\n      messageLength,\n      dataView,\n      byteOffset,\n    });\n\n    const _dataView = sliceDataView(dataView, byteOffset, messageLength);\n    _console.log({ _dataView });\n\n    callback(messageType, _dataView, context);\n\n    byteOffset += messageLength;\n  }\n}\n","import Device, { SendMessageCallback } from \"./Device.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport { isInNode } from \"./utils/environment.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport autoBind from \"auto-bind\";\nimport { parseMessage } from \"./utils/ParseUtils.ts\";\nimport {\n  concatenateArrayBuffers,\n  UInt8ByteBuffer,\n} from \"./utils/ArrayBufferUtils.ts\";\n\nconst _console = createConsole(\"CameraManager\", { log: false });\n\nexport const CameraSensorTypes = [\"camera\"] as const;\nexport type CameraSensorType = (typeof CameraSensorTypes)[number];\n\nexport const CameraCommands = [\n  \"focus\",\n  \"takePicture\",\n  \"stop\",\n  \"sleep\",\n  \"wake\",\n] as const;\nexport type CameraCommand = (typeof CameraCommands)[number];\n\nexport const CameraStatuses = [\n  \"idle\",\n  \"focusing\",\n  \"takingPicture\",\n  \"asleep\",\n] as const;\nexport type CameraStatus = (typeof CameraStatuses)[number];\n\nexport const CameraDataTypes = [\n  \"headerSize\",\n  \"header\",\n  \"imageSize\",\n  \"image\",\n  \"footerSize\",\n  \"footer\",\n] as const;\nexport type CameraDataType = (typeof CameraDataTypes)[number];\n\nexport const CameraConfigurationTypes = [\n  \"resolution\",\n  \"qualityFactor\",\n  \"shutter\",\n  \"gain\",\n  \"redGain\",\n  \"greenGain\",\n  \"blueGain\",\n] as const;\nexport type CameraConfigurationType = (typeof CameraConfigurationTypes)[number];\n\nexport const CameraMessageTypes = [\n  \"cameraStatus\",\n  \"cameraCommand\",\n  \"getCameraConfiguration\",\n  \"setCameraConfiguration\",\n  \"cameraData\",\n] as const;\nexport type CameraMessageType = (typeof CameraMessageTypes)[number];\n\nexport type CameraConfiguration = {\n  [cameraConfigurationType in CameraConfigurationType]?: number;\n};\nexport type CameraConfigurationRanges = {\n  [cameraConfigurationType in CameraConfigurationType]: {\n    min: number;\n    max: number;\n  };\n};\n\nexport const RequiredCameraMessageTypes: CameraMessageType[] = [\n  \"getCameraConfiguration\",\n  \"cameraStatus\",\n] as const;\n\nexport const CameraEventTypes = [\n  ...CameraMessageTypes,\n  \"cameraImageProgress\",\n  \"cameraImage\",\n] as const;\nexport type CameraEventType = (typeof CameraEventTypes)[number];\n\nexport interface CameraEventMessages {\n  cameraStatus: {\n    cameraStatus: CameraStatus;\n    previousCameraStatus: CameraStatus;\n  };\n  getCameraConfiguration: { cameraConfiguration: CameraConfiguration };\n  cameraImageProgress: { progress: number; type: CameraDataType };\n  cameraImage: { blob: Blob; url: string };\n}\n\nexport type CameraEventDispatcher = EventDispatcher<\n  Device,\n  CameraEventType,\n  CameraEventMessages\n>;\nexport type SendCameraMessageCallback = SendMessageCallback<CameraMessageType>;\n\nclass CameraManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendCameraMessageCallback;\n\n  eventDispatcher!: CameraEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  requestRequiredInformation() {\n    _console.log(\"requesting required camera information\");\n    const messages = RequiredCameraMessageTypes.map((messageType) => ({\n      type: messageType,\n    }));\n    this.sendMessage(messages, false);\n  }\n\n  // CAMERA STATUS\n  #cameraStatus!: CameraStatus;\n  get cameraStatus() {\n    return this.#cameraStatus;\n  }\n  #parseCameraStatus(dataView: DataView) {\n    const cameraStatusIndex = dataView.getUint8(0);\n    const newCameraStatus = CameraStatuses[cameraStatusIndex];\n    this.#updateCameraStatus(newCameraStatus);\n  }\n  #updateCameraStatus(newCameraStatus: CameraStatus) {\n    _console.assertEnumWithError(newCameraStatus, CameraStatuses);\n    if (newCameraStatus == this.#cameraStatus) {\n      _console.log(`redundant cameraStatus ${newCameraStatus}`);\n      return;\n    }\n    const previousCameraStatus = this.#cameraStatus;\n    this.#cameraStatus = newCameraStatus;\n    _console.log(`updated cameraStatus to \"${this.cameraStatus}\"`);\n    this.#dispatchEvent(\"cameraStatus\", {\n      cameraStatus: this.cameraStatus,\n      previousCameraStatus,\n    });\n\n    if (\n      this.#cameraStatus != \"takingPicture\" &&\n      this.#imageProgress > 0 &&\n      !this.#didBuildImage\n    ) {\n      this.#buildImage();\n    }\n  }\n\n  // CAMERA COMMAND\n  async #sendCameraCommand(command: CameraCommand, sendImmediately?: boolean) {\n    _console.assertEnumWithError(command, CameraCommands);\n    _console.log(`sending camera command \"${command}\"`);\n\n    const promise = this.waitForEvent(\"cameraStatus\");\n    _console.log(`setting command \"${command}\"`);\n    const commandEnum = CameraCommands.indexOf(command);\n\n    this.sendMessage(\n      [\n        {\n          type: \"cameraCommand\",\n          data: UInt8ByteBuffer(commandEnum),\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n  #assertIsAsleep() {\n    _console.assertWithError(\n      this.#cameraStatus == \"asleep\",\n      `camera is not asleep - currently ${this.#cameraStatus}`\n    );\n  }\n  #assertIsAwake() {\n    _console.assertWithError(\n      this.#cameraStatus != \"asleep\",\n      `camera is not awake - currently ${this.#cameraStatus}`\n    );\n  }\n  async focus() {\n    this.#assertIsAwake();\n    await this.#sendCameraCommand(\"focus\");\n  }\n  async takePicture() {\n    this.#assertIsAwake();\n    await this.#sendCameraCommand(\"takePicture\");\n  }\n  async stop() {\n    this.#assertIsAwake();\n    await this.#sendCameraCommand(\"stop\");\n  }\n  async sleep() {\n    this.#assertIsAwake();\n    await this.#sendCameraCommand(\"sleep\");\n  }\n  async wake() {\n    this.#assertIsAsleep();\n    await this.#sendCameraCommand(\"wake\");\n  }\n\n  // CAMERA DATA\n  #parseCameraData(dataView: DataView) {\n    _console.log(\"parsing camera data\", dataView);\n    parseMessage(\n      dataView,\n      CameraDataTypes,\n      this.#onCameraData.bind(this),\n      null,\n      true\n    );\n  }\n  #onCameraData(cameraDataType: CameraDataType, dataView: DataView) {\n    _console.log({ cameraDataType, dataView });\n    switch (cameraDataType) {\n      case \"headerSize\":\n        this.#headerSize = dataView.getUint16(0, true);\n        _console.log({ headerSize: this.#headerSize });\n        this.#headerData = undefined;\n        this.#headerProgress == 0;\n        break;\n      case \"header\":\n        this.#headerData = concatenateArrayBuffers(this.#headerData, dataView);\n        _console.log({ headerData: this.#headerData });\n        this.#headerProgress = this.#headerData?.byteLength / this.#headerSize;\n        _console.log({ headerProgress: this.#headerProgress });\n        this.#dispatchEvent(\"cameraImageProgress\", {\n          progress: this.#headerProgress,\n          type: \"header\",\n        });\n        if (this.#headerProgress == 1) {\n          _console.log(\"finished getting header data\");\n        }\n        break;\n      case \"imageSize\":\n        this.#imageSize = dataView.getUint16(0, true);\n        _console.log({ imageSize: this.#imageSize });\n        this.#imageData = undefined;\n        this.#imageProgress == 0;\n        this.#didBuildImage = false;\n        break;\n      case \"image\":\n        this.#imageData = concatenateArrayBuffers(this.#imageData, dataView);\n        _console.log({ imageData: this.#imageData });\n        this.#imageProgress = this.#imageData?.byteLength / this.#imageSize;\n        _console.log({ imageProgress: this.#imageProgress });\n        this.#dispatchEvent(\"cameraImageProgress\", {\n          progress: this.#imageProgress,\n          type: \"image\",\n        });\n        if (this.#imageProgress == 1) {\n          _console.log(\"finished getting image data\");\n          if (this.#headerProgress == 1) {\n            this.#buildImage();\n          }\n        }\n        break;\n      case \"footerSize\":\n        this.#footerSize = dataView.getUint16(0, true);\n        _console.log({ footerSize: this.#footerSize });\n        this.#footerData = undefined;\n        this.#footerProgress == 0;\n        break;\n      case \"footer\":\n        this.#footerData = concatenateArrayBuffers(this.#footerData, dataView);\n        _console.log({ footerData: this.#footerData });\n        this.#footerProgress = this.#footerData?.byteLength / this.#footerSize;\n        _console.log({ footerProgress: this.#footerProgress });\n        this.#dispatchEvent(\"cameraImageProgress\", {\n          progress: this.#footerProgress,\n          type: \"footer\",\n        });\n        if (this.#footerProgress == 1) {\n          _console.log(\"finished getting footer data\");\n          if (this.#imageProgress == 1) {\n            this.#buildImage();\n          }\n        }\n        break;\n    }\n  }\n\n  #headerSize: number = 0;\n  #headerData?: ArrayBuffer;\n  #headerProgress: number = 0;\n\n  #imageSize: number = 0;\n  #imageData?: ArrayBuffer;\n  #imageProgress: number = 0;\n\n  #footerSize: number = 0;\n  #footerData?: ArrayBuffer;\n  #footerProgress: number = 0;\n\n  #didBuildImage: boolean = false;\n  #buildImage() {\n    _console.log(\"building image...\");\n    const imageData = concatenateArrayBuffers(\n      this.#headerData,\n      this.#imageData,\n      this.#footerData\n    );\n    _console.log({ imageData });\n\n    let blob = new Blob([imageData], { type: \"image/jpeg\" });\n    _console.log(\"created blob\", blob);\n\n    const url = URL.createObjectURL(blob);\n    _console.log(\"created url\", url);\n\n    this.#dispatchEvent(\"cameraImage\", { url, blob });\n\n    this.#didBuildImage = true;\n  }\n\n  // CONFIG\n  #cameraConfiguration: CameraConfiguration = {};\n  get cameraConfiguration() {\n    return this.#cameraConfiguration;\n  }\n  #availableCameraConfigurationTypes!: CameraConfigurationType[];\n  get availableCameraConfigurationTypes() {\n    return this.#availableCameraConfigurationTypes;\n  }\n\n  #cameraConfigurationRanges: CameraConfigurationRanges = {\n    resolution: { min: 100, max: 720 },\n    qualityFactor: { min: 15, max: 60 },\n    shutter: { min: 4, max: 16383 },\n    gain: { min: 1, max: 248 },\n    redGain: { min: 0, max: 1023 },\n    greenGain: { min: 0, max: 1023 },\n    blueGain: { min: 0, max: 1023 },\n  };\n  get cameraConfigurationRanges() {\n    return this.#cameraConfigurationRanges;\n  }\n\n  #parseCameraConfiguration(dataView: DataView) {\n    const parsedCameraConfiguration: CameraConfiguration = {};\n\n    let byteOffset = 0;\n    while (byteOffset < dataView.byteLength) {\n      const cameraConfigurationTypeIndex = dataView.getUint8(byteOffset++);\n      const cameraConfigurationType =\n        CameraConfigurationTypes[cameraConfigurationTypeIndex];\n      _console.assertWithError(\n        cameraConfigurationType,\n        `invalid cameraConfigurationTypeIndex ${cameraConfigurationTypeIndex}`\n      );\n      parsedCameraConfiguration[cameraConfigurationType] = dataView.getUint16(\n        byteOffset,\n        true\n      );\n      byteOffset += 2;\n    }\n\n    _console.log({ parsedCameraConfiguration });\n    this.#availableCameraConfigurationTypes = Object.keys(\n      parsedCameraConfiguration\n    ) as CameraConfigurationType[];\n    this.#cameraConfiguration = parsedCameraConfiguration;\n    this.#dispatchEvent(\"getCameraConfiguration\", {\n      cameraConfiguration: this.#cameraConfiguration,\n    });\n  }\n\n  #isCameraConfigurationRedundant(cameraConfiguration: CameraConfiguration) {\n    let cameraConfigurationTypes = Object.keys(\n      cameraConfiguration\n    ) as CameraConfigurationType[];\n    return cameraConfigurationTypes.every((cameraConfigurationType) => {\n      return (\n        this.cameraConfiguration[cameraConfigurationType] ==\n        cameraConfiguration[cameraConfigurationType]\n      );\n    });\n  }\n  async setCameraConfiguration(newCameraConfiguration: CameraConfiguration) {\n    _console.log({ newCameraConfiguration });\n    if (this.#isCameraConfigurationRedundant(newCameraConfiguration)) {\n      _console.log(\"redundant camera configuration\");\n      return;\n    }\n    const setCameraConfigurationData = this.#createData(newCameraConfiguration);\n    _console.log({ setCameraConfigurationData });\n\n    const promise = this.waitForEvent(\"getCameraConfiguration\");\n    this.sendMessage([\n      {\n        type: \"setCameraConfiguration\",\n        data: setCameraConfigurationData.buffer,\n      },\n    ]);\n    await promise;\n  }\n\n  #assertAvailableCameraConfigurationType(\n    cameraConfigurationType: CameraConfigurationType\n  ) {\n    _console.assertWithError(\n      this.#availableCameraConfigurationTypes,\n      \"must get initial cameraConfiguration\"\n    );\n    const isCameraConfigurationTypeAvailable =\n      this.#availableCameraConfigurationTypes?.includes(\n        cameraConfigurationType\n      );\n    _console.assertWithError(\n      isCameraConfigurationTypeAvailable,\n      `unavailable camera configuration type \"${cameraConfigurationType}\"`\n    );\n    return isCameraConfigurationTypeAvailable;\n  }\n\n  static AssertValidCameraConfigurationType(\n    cameraConfigurationType: CameraConfigurationType\n  ) {\n    _console.assertEnumWithError(\n      cameraConfigurationType,\n      CameraConfigurationTypes\n    );\n  }\n  static AssertValidCameraConfigurationTypeEnum(\n    cameraConfigurationTypeEnum: number\n  ) {\n    _console.assertTypeWithError(cameraConfigurationTypeEnum, \"number\");\n    _console.assertWithError(\n      cameraConfigurationTypeEnum in CameraConfigurationTypes,\n      `invalid cameraConfigurationTypeEnum ${cameraConfigurationTypeEnum}`\n    );\n  }\n\n  #createData(cameraConfiguration: CameraConfiguration) {\n    let cameraConfigurationTypes = Object.keys(\n      cameraConfiguration\n    ) as CameraConfigurationType[];\n    cameraConfigurationTypes = cameraConfigurationTypes.filter(\n      (cameraConfigurationType) =>\n        this.#assertAvailableCameraConfigurationType(cameraConfigurationType)\n    );\n\n    const dataView = new DataView(\n      new ArrayBuffer(cameraConfigurationTypes.length * 3)\n    );\n    cameraConfigurationTypes.forEach((cameraConfigurationType, index) => {\n      CameraManager.AssertValidCameraConfigurationType(cameraConfigurationType);\n      const cameraConfigurationTypeEnum = CameraConfigurationTypes.indexOf(\n        cameraConfigurationType\n      );\n      dataView.setUint8(index * 3, cameraConfigurationTypeEnum);\n\n      const value = cameraConfiguration[cameraConfigurationType]!;\n      //this.#assertValidCameraConfigurationValue(cameraConfigurationType, value);\n      dataView.setUint16(index * 3 + 1, value, true);\n    });\n    _console.log({ sensorConfigurationData: dataView });\n    return dataView;\n  }\n\n  // MESSAGE\n  parseMessage(messageType: CameraMessageType, dataView: DataView) {\n    _console.log({ messageType, dataView });\n\n    switch (messageType) {\n      case \"cameraStatus\":\n        this.#parseCameraStatus(dataView);\n        break;\n      case \"getCameraConfiguration\":\n      case \"setCameraConfiguration\":\n        this.#parseCameraConfiguration(dataView);\n        break;\n      case \"cameraData\":\n        this.#parseCameraData(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  clear() {\n    // @ts-ignore\n    this.#cameraStatus = undefined;\n    this.#headerProgress = 0;\n    this.#imageProgress = 0;\n    this.#footerProgress = 0;\n  }\n}\n\nexport default CameraManager;\n","import { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"AudioUtils\", { log: false });\n\nexport function float32ArrayToWav(\n  audioData: Float32Array,\n  sampleRate: number,\n  numChannels: number\n): Blob {\n  const wavBuffer = encodeWAV(audioData, sampleRate, numChannels);\n  return new Blob([wavBuffer], { type: \"audio/wav\" });\n}\n\nfunction encodeWAV(\n  interleaved: Float32Array,\n  sampleRate: number,\n  numChannels: number\n): ArrayBuffer {\n  const buffer = new ArrayBuffer(44 + interleaved.length * 2); // 44 bytes for WAV header\n  const view = new DataView(buffer);\n\n  // RIFF identifier\n  writeString(view, 0, \"RIFF\");\n  // File length minus RIFF identifier length and file description length\n  view.setUint32(4, 36 + interleaved.length * 2, true);\n  // RIFF type\n  writeString(view, 8, \"WAVE\");\n  // Format chunk identifier\n  writeString(view, 12, \"fmt \");\n  // Format chunk length\n  view.setUint32(16, 16, true);\n  // Sample format (raw)\n  view.setUint16(20, 1, true);\n  // Channel count\n  view.setUint16(22, numChannels, true);\n  // Sample rate\n  view.setUint32(24, sampleRate, true);\n  // Byte rate (sample rate * block align)\n  view.setUint32(28, sampleRate * numChannels * 2, true);\n  // Block align (channel count * bytes per sample)\n  view.setUint16(32, numChannels * 2, true);\n  // Bits per sample\n  view.setUint16(34, 16, true);\n  // Data chunk identifier\n  writeString(view, 36, \"data\");\n  // Data chunk length\n  view.setUint32(40, interleaved.length * 2, true);\n\n  // Write interleaved audio data\n  for (let i = 0; i < interleaved.length; i++) {\n    view.setInt16(44 + i * 2, interleaved[i] * 0x7fff, true); // Convert float [-1, 1] to int16\n  }\n\n  return buffer;\n}\n\nexport function writeString(\n  view: DataView,\n  offset: number,\n  string: string\n): void {\n  for (let i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\n","import Device, { SendMessageCallback } from \"./Device.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport autoBind from \"auto-bind\";\nimport {\n  concatenateArrayBuffers,\n  UInt8ByteBuffer,\n} from \"./utils/ArrayBufferUtils.ts\";\nimport { float32ArrayToWav } from \"./utils/AudioUtils.ts\";\n\nconst _console = createConsole(\"MicrophoneManager\", { log: false });\n\nexport const MicrophoneSensorTypes = [\"microphone\"] as const;\nexport type MicrophoneSensorType = (typeof MicrophoneSensorTypes)[number];\n\nexport const MicrophoneCommands = [\"start\", \"stop\", \"vad\"] as const;\nexport type MicrophoneCommand = (typeof MicrophoneCommands)[number];\n\nexport const MicrophoneStatuses = [\"idle\", \"streaming\", \"vad\"] as const;\nexport type MicrophoneStatus = (typeof MicrophoneStatuses)[number];\n\nexport const MicrophoneConfigurationTypes = [\"sampleRate\", \"bitDepth\"] as const;\nexport type MicrophoneConfigurationType =\n  (typeof MicrophoneConfigurationTypes)[number];\n\nexport const MicrophoneSampleRates = [\"8000\", \"16000\"] as const;\nexport type MicrophoneSampleRate = (typeof MicrophoneSampleRates)[number];\n\nexport const MicrophoneBitDepths = [\"8\", \"16\"] as const;\nexport type MicrophoneBitDepth = (typeof MicrophoneBitDepths)[number];\n\nexport const MicrophoneMessageTypes = [\n  \"microphoneStatus\",\n  \"microphoneCommand\",\n  \"getMicrophoneConfiguration\",\n  \"setMicrophoneConfiguration\",\n  \"microphoneData\",\n] as const;\nexport type MicrophoneMessageType = (typeof MicrophoneMessageTypes)[number];\n\nexport type MicrophoneConfiguration = {\n  sampleRate?: MicrophoneSampleRate;\n  bitDepth?: MicrophoneBitDepth;\n};\n\nexport const MicrophoneConfigurationValues = {\n  sampleRate: MicrophoneSampleRates,\n  bitDepth: MicrophoneBitDepths,\n};\n\nexport const RequiredMicrophoneMessageTypes: MicrophoneMessageType[] = [\n  \"getMicrophoneConfiguration\",\n  \"microphoneStatus\",\n] as const;\n\nexport const MicrophoneEventTypes = [\n  ...MicrophoneMessageTypes,\n  \"isRecordingMicrophone\",\n  \"microphoneRecording\",\n] as const;\nexport type MicrophoneEventType = (typeof MicrophoneEventTypes)[number];\n\nexport interface MicrophoneEventMessages {\n  microphoneStatus: {\n    microphoneStatus: MicrophoneStatus;\n    previousMicrophoneStatus: MicrophoneStatus;\n  };\n  getMicrophoneConfiguration: {\n    microphoneConfiguration: MicrophoneConfiguration;\n  };\n  microphoneData: {\n    samples: Float32Array;\n    sampleRate: MicrophoneSampleRate;\n    bitDepth: MicrophoneBitDepth;\n  };\n  isRecordingMicrophone: {\n    isRecordingMicrophone: boolean;\n  };\n  microphoneRecording: {\n    samples: Float32Array;\n    sampleRate: MicrophoneSampleRate;\n    bitDepth: MicrophoneBitDepth;\n    blob: Blob;\n    url: string;\n  };\n}\n\nexport type MicrophoneEventDispatcher = EventDispatcher<\n  Device,\n  MicrophoneEventType,\n  MicrophoneEventMessages\n>;\nexport type SendMicrophoneMessageCallback =\n  SendMessageCallback<MicrophoneMessageType>;\n\nclass MicrophoneManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendMicrophoneMessageCallback;\n\n  eventDispatcher!: MicrophoneEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  requestRequiredInformation() {\n    _console.log(\"requesting required microphone information\");\n    const messages = RequiredMicrophoneMessageTypes.map((messageType) => ({\n      type: messageType,\n    }));\n    this.sendMessage(messages, false);\n  }\n\n  // MICROPHONE STATUS\n  #microphoneStatus!: MicrophoneStatus;\n  get microphoneStatus() {\n    return this.#microphoneStatus;\n  }\n  #parseMicrophoneStatus(dataView: DataView) {\n    const microphoneStatusIndex = dataView.getUint8(0);\n    const newMicrophoneStatus = MicrophoneStatuses[microphoneStatusIndex];\n    this.#updateMicrophoneStatus(newMicrophoneStatus);\n  }\n  #updateMicrophoneStatus(newMicrophoneStatus: MicrophoneStatus) {\n    _console.assertEnumWithError(newMicrophoneStatus, MicrophoneStatuses);\n    if (newMicrophoneStatus == this.#microphoneStatus) {\n      _console.log(`redundant microphoneStatus ${newMicrophoneStatus}`);\n      return;\n    }\n    const previousMicrophoneStatus = this.#microphoneStatus;\n    this.#microphoneStatus = newMicrophoneStatus;\n    _console.log(`updated microphoneStatus to \"${this.microphoneStatus}\"`);\n    this.#dispatchEvent(\"microphoneStatus\", {\n      microphoneStatus: this.microphoneStatus,\n      previousMicrophoneStatus,\n    });\n  }\n\n  // MICROPHONE COMMAND\n  async #sendMicrophoneCommand(\n    command: MicrophoneCommand,\n    sendImmediately?: boolean\n  ) {\n    _console.assertEnumWithError(command, MicrophoneCommands);\n    _console.log(`sending microphone command \"${command}\"`);\n\n    const promise = this.waitForEvent(\"microphoneStatus\");\n    _console.log(`setting command \"${command}\"`);\n    const commandEnum = MicrophoneCommands.indexOf(command);\n\n    this.sendMessage(\n      [\n        {\n          type: \"microphoneCommand\",\n          data: UInt8ByteBuffer(commandEnum),\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n  #assertIsIdle() {\n    _console.assertWithError(\n      this.#microphoneStatus == \"idle\",\n      `microphone is not idle - currently ${this.#microphoneStatus}`\n    );\n  }\n  #assertIsNotIdle() {\n    _console.assertWithError(\n      this.#microphoneStatus != \"idle\",\n      `microphone is idle`\n    );\n  }\n  #assertIsStreaming() {\n    _console.assertWithError(\n      this.#microphoneStatus == \"streaming\",\n      `microphone is not recording - currently ${this.#microphoneStatus}`\n    );\n  }\n\n  async start() {\n    await this.#sendMicrophoneCommand(\"start\");\n  }\n  async stop() {\n    if (this.microphoneStatus == \"idle\") {\n      _console.log(\"microphone is already idle\");\n      return;\n    }\n    await this.#sendMicrophoneCommand(\"stop\");\n  }\n  async vad() {\n    await this.#sendMicrophoneCommand(\"vad\");\n  }\n  async toggle() {\n    switch (this.microphoneStatus) {\n      case \"idle\":\n        this.start();\n        break;\n      case \"streaming\":\n        this.stop();\n        break;\n    }\n  }\n\n  // MICROPHONE DATA\n  #assertValidBitDepth() {\n    _console.assertEnumWithError(this.bitDepth!, MicrophoneBitDepths);\n  }\n  #fadeDuration = 0.001;\n  #playbackTime = 0;\n  #parseMicrophoneData(dataView: DataView) {\n    this.#assertValidBitDepth();\n\n    _console.log(\"parsing microphone data\", dataView);\n\n    const numberOfSamples = dataView.byteLength / this.#bytesPerSample!;\n    const samples = new Float32Array(numberOfSamples);\n\n    for (let i = 0; i < numberOfSamples; i++) {\n      let sample;\n      switch (this.bitDepth) {\n        case \"16\":\n          sample = dataView.getInt16(i * 2, true);\n          samples[i] = sample / 2 ** 15; // Normalize to [-1, 1]\n          break;\n        case \"8\":\n          sample = dataView.getInt8(i);\n          samples[i] = sample / 2 ** 7; // Normalize to [-1, 1]\n          break;\n      }\n    }\n\n    _console.log(\"samples\", samples);\n\n    if (this.#isRecording && this.#microphoneRecordingData) {\n      this.#microphoneRecordingData!.push(samples);\n    }\n\n    if (this.#audioContext) {\n      if (this.#gainNode) {\n        const audioBuffer = this.#audioContext.createBuffer(\n          1,\n          samples.length,\n          Number(this.sampleRate!)\n        );\n        audioBuffer.getChannelData(0).set(samples);\n\n        const bufferSource = this.#audioContext.createBufferSource();\n        bufferSource.buffer = audioBuffer;\n\n        const channelData = audioBuffer.getChannelData(0);\n        const sampleRate = Number(this.sampleRate!);\n\n        for (let i = 0; i < this.#fadeDuration * sampleRate; i++) {\n          channelData[i] *= i / (this.#fadeDuration * sampleRate);\n        }\n\n        for (\n          let i = channelData.length - 1;\n          i >= channelData.length - this.#fadeDuration * sampleRate;\n          i--\n        ) {\n          channelData[i] *=\n            (channelData.length - i) / (this.#fadeDuration * sampleRate);\n        }\n\n        bufferSource.connect(this.#gainNode!);\n\n        if (this.#playbackTime < this.#audioContext.currentTime) {\n          this.#playbackTime = this.#audioContext.currentTime;\n        }\n        bufferSource.start(this.#playbackTime);\n        this.#playbackTime += audioBuffer.duration;\n      }\n    }\n\n    this.#dispatchEvent(\"microphoneData\", {\n      samples,\n      sampleRate: this.sampleRate!,\n      bitDepth: this.bitDepth!,\n    });\n  }\n  get #bytesPerSample() {\n    switch (this.bitDepth) {\n      case \"8\":\n        return 1;\n      case \"16\":\n        return 2;\n    }\n  }\n\n  // CONFIG\n  #microphoneConfiguration: MicrophoneConfiguration = {};\n  get microphoneConfiguration() {\n    return this.#microphoneConfiguration;\n  }\n  #availableMicrophoneConfigurationTypes!: MicrophoneConfigurationType[];\n  get availableMicrophoneConfigurationTypes() {\n    return this.#availableMicrophoneConfigurationTypes;\n  }\n\n  get bitDepth() {\n    return this.#microphoneConfiguration.bitDepth;\n  }\n  get sampleRate() {\n    return this.#microphoneConfiguration.sampleRate;\n  }\n\n  #parseMicrophoneConfiguration(dataView: DataView) {\n    const parsedMicrophoneConfiguration: MicrophoneConfiguration = {};\n\n    let byteOffset = 0;\n    while (byteOffset < dataView.byteLength) {\n      const microphoneConfigurationTypeIndex = dataView.getUint8(byteOffset++);\n      const microphoneConfigurationType =\n        MicrophoneConfigurationTypes[microphoneConfigurationTypeIndex];\n      _console.assertWithError(\n        microphoneConfigurationType,\n        `invalid microphoneConfigurationTypeIndex ${microphoneConfigurationTypeIndex}`\n      );\n      let rawValue = dataView.getUint8(byteOffset++);\n      const values = MicrophoneConfigurationValues[microphoneConfigurationType];\n      const value = values[rawValue];\n      _console.assertEnumWithError(value, values);\n      _console.log({ microphoneConfigurationType, value });\n      // @ts-expect-error\n      parsedMicrophoneConfiguration[microphoneConfigurationType] = value;\n    }\n\n    _console.log({ parsedMicrophoneConfiguration });\n    this.#availableMicrophoneConfigurationTypes = Object.keys(\n      parsedMicrophoneConfiguration\n    ) as MicrophoneConfigurationType[];\n    this.#microphoneConfiguration = parsedMicrophoneConfiguration;\n    this.#dispatchEvent(\"getMicrophoneConfiguration\", {\n      microphoneConfiguration: this.#microphoneConfiguration,\n    });\n  }\n\n  #isMicrophoneConfigurationRedundant(\n    microphoneConfiguration: MicrophoneConfiguration\n  ) {\n    let microphoneConfigurationTypes = Object.keys(\n      microphoneConfiguration\n    ) as MicrophoneConfigurationType[];\n    return microphoneConfigurationTypes.every((microphoneConfigurationType) => {\n      return (\n        this.microphoneConfiguration[microphoneConfigurationType] ==\n        microphoneConfiguration[microphoneConfigurationType]\n      );\n    });\n  }\n  async setMicrophoneConfiguration(\n    newMicrophoneConfiguration: MicrophoneConfiguration\n  ) {\n    _console.log({ newMicrophoneConfiguration });\n    if (this.#isMicrophoneConfigurationRedundant(newMicrophoneConfiguration)) {\n      _console.log(\"redundant microphone configuration\");\n      return;\n    }\n    const setMicrophoneConfigurationData = this.#createData(\n      newMicrophoneConfiguration\n    );\n    _console.log({ setMicrophoneConfigurationData });\n\n    const promise = this.waitForEvent(\"getMicrophoneConfiguration\");\n    this.sendMessage([\n      {\n        type: \"setMicrophoneConfiguration\",\n        data: setMicrophoneConfigurationData.buffer,\n      },\n    ]);\n    await promise;\n  }\n\n  #assertAvailableMicrophoneConfigurationType(\n    microphoneConfigurationType: MicrophoneConfigurationType\n  ) {\n    _console.assertWithError(\n      this.#availableMicrophoneConfigurationTypes,\n      \"must get initial microphoneConfiguration\"\n    );\n    const isMicrophoneConfigurationTypeAvailable =\n      this.#availableMicrophoneConfigurationTypes?.includes(\n        microphoneConfigurationType\n      );\n    _console.assertWithError(\n      isMicrophoneConfigurationTypeAvailable,\n      `unavailable microphone configuration type \"${microphoneConfigurationType}\"`\n    );\n    return isMicrophoneConfigurationTypeAvailable;\n  }\n\n  static AssertValidMicrophoneConfigurationType(\n    microphoneConfigurationType: MicrophoneConfigurationType\n  ) {\n    _console.assertEnumWithError(\n      microphoneConfigurationType,\n      MicrophoneConfigurationTypes\n    );\n  }\n  static AssertValidMicrophoneConfigurationTypeEnum(\n    microphoneConfigurationTypeEnum: number\n  ) {\n    _console.assertTypeWithError(microphoneConfigurationTypeEnum, \"number\");\n    _console.assertWithError(\n      microphoneConfigurationTypeEnum in MicrophoneConfigurationTypes,\n      `invalid microphoneConfigurationTypeEnum ${microphoneConfigurationTypeEnum}`\n    );\n  }\n\n  #createData(microphoneConfiguration: MicrophoneConfiguration) {\n    let microphoneConfigurationTypes = Object.keys(\n      microphoneConfiguration\n    ) as MicrophoneConfigurationType[];\n    microphoneConfigurationTypes = microphoneConfigurationTypes.filter(\n      (microphoneConfigurationType) =>\n        this.#assertAvailableMicrophoneConfigurationType(\n          microphoneConfigurationType\n        )\n    );\n\n    const dataView = new DataView(\n      new ArrayBuffer(microphoneConfigurationTypes.length * 2)\n    );\n    microphoneConfigurationTypes.forEach(\n      (microphoneConfigurationType, index) => {\n        MicrophoneManager.AssertValidMicrophoneConfigurationType(\n          microphoneConfigurationType\n        );\n        const microphoneConfigurationTypeEnum =\n          MicrophoneConfigurationTypes.indexOf(microphoneConfigurationType);\n        dataView.setUint8(index * 2, microphoneConfigurationTypeEnum);\n\n        let value = microphoneConfiguration[microphoneConfigurationType]!;\n        if (typeof value == \"number\") {\n          // @ts-ignore\n          value = value.toString();\n        }\n        const values =\n          MicrophoneConfigurationValues[microphoneConfigurationType];\n        _console.assertEnumWithError(value, values);\n        // @ts-expect-error\n        const rawValue = values.indexOf(value);\n        dataView.setUint8(index * 2 + 1, rawValue);\n      }\n    );\n    _console.log({ sensorConfigurationData: dataView });\n    return dataView;\n  }\n\n  // MESSAGE\n  parseMessage(messageType: MicrophoneMessageType, dataView: DataView) {\n    _console.log({ messageType, dataView });\n\n    switch (messageType) {\n      case \"microphoneStatus\":\n        this.#parseMicrophoneStatus(dataView);\n        break;\n      case \"getMicrophoneConfiguration\":\n      case \"setMicrophoneConfiguration\":\n        this.#parseMicrophoneConfiguration(dataView);\n        break;\n      case \"microphoneData\":\n        this.#parseMicrophoneData(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  #audioContext?: AudioContext;\n  get audioContext() {\n    return this.#audioContext;\n  }\n  set audioContext(newAudioContext) {\n    if (this.#audioContext == newAudioContext) {\n      _console.log(\"redundant audioContext assignment\", this.#audioContext);\n      return;\n    }\n\n    this.#audioContext = newAudioContext;\n\n    _console.log(\"assigned new audioContext\", this.#audioContext);\n    if (this.#audioContext) {\n      this.#playbackTime = this.#audioContext.currentTime;\n    } else {\n      if (this.#mediaStreamDestination) {\n        this.#mediaStreamDestination.disconnect();\n        this.#mediaStreamDestination = undefined;\n      }\n      if (this.#gainNode) {\n        this.#gainNode.disconnect();\n        this.#gainNode = undefined;\n      }\n    }\n  }\n\n  #gainNode?: GainNode;\n  get gainNode() {\n    _console.assertWithError(\n      this.#audioContext,\n      \"audioContext assignment required for gainNode\"\n    );\n    if (!this.#gainNode) {\n      _console.log(\"creating gainNode...\");\n      this.#gainNode = this.#audioContext!.createGain();\n      _console.log(\"created gainNode\", this.#gainNode);\n    }\n    return this.#gainNode;\n  }\n\n  #mediaStreamDestination?: MediaStreamAudioDestinationNode;\n  get mediaStreamDestination() {\n    _console.assertWithError(\n      this.#audioContext,\n      \"audioContext assignment required for mediaStreamDestination\"\n    );\n    if (!this.#mediaStreamDestination) {\n      _console.log(\"creating mediaStreamDestination...\");\n      this.#mediaStreamDestination =\n        this.#audioContext!.createMediaStreamDestination();\n      this.gainNode?.connect(this.#mediaStreamDestination);\n      _console.log(\n        \"created mediaStreamDestination\",\n        this.#mediaStreamDestination\n      );\n    }\n    return this.#mediaStreamDestination;\n  }\n\n  #isRecording = false;\n  get isRecording() {\n    return this.#isRecording;\n  }\n  #microphoneRecordingData?: Float32Array[];\n  startRecording() {\n    if (this.isRecording) {\n      _console.log(\"already recording\");\n      return;\n    }\n    this.#microphoneRecordingData = [];\n    this.#isRecording = true;\n    this.#dispatchEvent(\"isRecordingMicrophone\", {\n      isRecordingMicrophone: this.isRecording,\n    });\n  }\n  stopRecording() {\n    if (!this.isRecording) {\n      _console.log(\"already not recording\");\n      return;\n    }\n    this.#isRecording = false;\n    if (\n      this.#microphoneRecordingData &&\n      this.#microphoneRecordingData.length > 0\n    ) {\n      _console.log(\n        \"parsing microphone data...\",\n        this.#microphoneRecordingData.length\n      );\n      const arrayBuffer = concatenateArrayBuffers(\n        ...this.#microphoneRecordingData\n      );\n      const samples = new Float32Array(arrayBuffer);\n\n      const blob = float32ArrayToWav(samples, Number(this.sampleRate)!, 1);\n      const url = URL.createObjectURL(blob);\n      this.#dispatchEvent(\"microphoneRecording\", {\n        samples,\n        sampleRate: this.sampleRate!,\n        bitDepth: this.bitDepth!,\n        blob,\n        url,\n      });\n    }\n    this.#microphoneRecordingData = undefined;\n    this.#dispatchEvent(\"isRecordingMicrophone\", {\n      isRecordingMicrophone: this.isRecording,\n    });\n  }\n  toggleRecording() {\n    if (this.#isRecording) {\n      this.stopRecording();\n    } else {\n      this.startRecording();\n    }\n  }\n\n  clear() {\n    // @ts-ignore\n    this.#microphoneStatus = undefined;\n    this.#microphoneConfiguration = {};\n    if (this.isRecording) {\n      this.stopRecording();\n    }\n  }\n}\n\nexport default MicrophoneManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport { parseTimestamp } from \"../utils/MathUtils.ts\";\nimport PressureSensorDataManager, {\n  PressureDataEventMessages,\n} from \"./PressureSensorDataManager.ts\";\nimport MotionSensorDataManager, {\n  MotionSensorDataEventMessages,\n} from \"./MotionSensorDataManager.ts\";\nimport BarometerSensorDataManager, {\n  BarometerSensorDataEventMessages,\n} from \"./BarometerSensorDataManager.ts\";\nimport { parseMessage } from \"../utils/ParseUtils.ts\";\nimport EventDispatcher from \"../utils/EventDispatcher.ts\";\nimport {\n  MotionSensorTypes,\n  ContinuousMotionTypes,\n} from \"./MotionSensorDataManager.ts\";\nimport {\n  PressureSensorTypes,\n  ContinuousPressureSensorTypes,\n} from \"./PressureSensorDataManager.ts\";\nimport {\n  BarometerSensorTypes,\n  ContinuousBarometerSensorTypes,\n} from \"./BarometerSensorDataManager.ts\";\nimport Device from \"../Device.ts\";\nimport {\n  AddKeysAsPropertyToInterface,\n  ExtendInterfaceValues,\n  ValueOf,\n} from \"../utils/TypeScriptUtils.ts\";\nimport { CameraSensorTypes } from \"../CameraManager.ts\";\nimport { MicrophoneSensorTypes } from \"../MicrophoneManager.ts\";\n\nconst _console = createConsole(\"SensorDataManager\", { log: false });\n\nexport const SensorTypes = [\n  ...PressureSensorTypes,\n  ...MotionSensorTypes,\n  ...BarometerSensorTypes,\n  ...CameraSensorTypes,\n  ...MicrophoneSensorTypes,\n] as const;\nexport type SensorType = (typeof SensorTypes)[number];\n\nexport const ContinuousSensorTypes = [\n  ...ContinuousPressureSensorTypes,\n  ...ContinuousMotionTypes,\n  ...ContinuousBarometerSensorTypes,\n] as const;\nexport type ContinuousSensorType = (typeof ContinuousSensorTypes)[number];\n\nexport const SensorDataMessageTypes = [\n  \"getPressurePositions\",\n  \"getSensorScalars\",\n  \"sensorData\",\n] as const;\nexport type SensorDataMessageType = (typeof SensorDataMessageTypes)[number];\n\nexport const RequiredPressureMessageTypes: SensorDataMessageType[] = [\n  \"getPressurePositions\",\n] as const;\n\nexport const SensorDataEventTypes = [\n  ...SensorDataMessageTypes,\n  ...SensorTypes,\n] as const;\nexport type SensorDataEventType = (typeof SensorDataEventTypes)[number];\n\ninterface BaseSensorDataEventMessage {\n  timestamp: number;\n}\n\ntype BaseSensorDataEventMessages = BarometerSensorDataEventMessages &\n  MotionSensorDataEventMessages &\n  PressureDataEventMessages;\ntype _SensorDataEventMessages = ExtendInterfaceValues<\n  AddKeysAsPropertyToInterface<BaseSensorDataEventMessages, \"sensorType\">,\n  BaseSensorDataEventMessage\n>;\nexport type SensorDataEventMessage = ValueOf<_SensorDataEventMessages>;\ninterface AnySensorDataEventMessages {\n  sensorData: SensorDataEventMessage;\n}\nexport type SensorDataEventMessages = _SensorDataEventMessages &\n  AnySensorDataEventMessages;\n\nexport type SensorDataEventDispatcher = EventDispatcher<\n  Device,\n  SensorDataEventType,\n  SensorDataEventMessages\n>;\n\nclass SensorDataManager {\n  pressureSensorDataManager = new PressureSensorDataManager();\n  motionSensorDataManager = new MotionSensorDataManager();\n  barometerSensorDataManager = new BarometerSensorDataManager();\n\n  #scalars: Map<SensorType, number> = new Map();\n\n  static AssertValidSensorType(sensorType: SensorType) {\n    _console.assertEnumWithError(sensorType, SensorTypes);\n  }\n  static AssertValidSensorTypeEnum(sensorTypeEnum: number) {\n    _console.assertTypeWithError(sensorTypeEnum, \"number\");\n    _console.assertWithError(\n      sensorTypeEnum in SensorTypes,\n      `invalid sensorTypeEnum ${sensorTypeEnum}`\n    );\n  }\n\n  eventDispatcher!: SensorDataEventDispatcher;\n  get dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n\n  parseMessage(messageType: SensorDataMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getSensorScalars\":\n        this.parseScalars(dataView);\n        break;\n      case \"getPressurePositions\":\n        this.pressureSensorDataManager.parsePositions(dataView);\n        break;\n      case \"sensorData\":\n        this.parseData(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  parseScalars(dataView: DataView) {\n    for (\n      let byteOffset = 0;\n      byteOffset < dataView.byteLength;\n      byteOffset += 5\n    ) {\n      const sensorTypeIndex = dataView.getUint8(byteOffset);\n      const sensorType = SensorTypes[sensorTypeIndex];\n      if (!sensorType) {\n        _console.warn(`unknown sensorType index ${sensorTypeIndex}`);\n        continue;\n      }\n      const sensorScalar = dataView.getFloat32(byteOffset + 1, true);\n      _console.log({ sensorType, sensorScalar });\n      this.#scalars.set(sensorType, sensorScalar);\n    }\n  }\n\n  private parseData(dataView: DataView) {\n    _console.log(\"sensorData\", Array.from(new Uint8Array(dataView.buffer)));\n\n    let byteOffset = 0;\n    const timestamp = parseTimestamp(dataView, byteOffset);\n    byteOffset += 2;\n\n    const _dataView = new DataView(dataView.buffer, byteOffset);\n\n    parseMessage(_dataView, SensorTypes, this.parseDataCallback.bind(this), {\n      timestamp,\n    });\n  }\n\n  private parseDataCallback(\n    sensorType: SensorType,\n    dataView: DataView,\n    { timestamp }: { timestamp: number }\n  ) {\n    const scalar = this.#scalars.get(sensorType) || 1;\n\n    let sensorData = null;\n    switch (sensorType) {\n      case \"pressure\":\n        sensorData = this.pressureSensorDataManager.parseData(dataView, scalar);\n        break;\n      case \"acceleration\":\n      case \"gravity\":\n      case \"linearAcceleration\":\n      case \"gyroscope\":\n      case \"magnetometer\":\n        sensorData = this.motionSensorDataManager.parseVector3(\n          dataView,\n          scalar\n        );\n        break;\n      case \"gameRotation\":\n      case \"rotation\":\n        sensorData = this.motionSensorDataManager.parseQuaternion(\n          dataView,\n          scalar\n        );\n        break;\n      case \"orientation\":\n        sensorData = this.motionSensorDataManager.parseEuler(dataView, scalar);\n        break;\n      case \"stepCounter\":\n        sensorData = this.motionSensorDataManager.parseStepCounter(dataView);\n        break;\n      case \"stepDetector\":\n        sensorData = {};\n        break;\n      case \"activity\":\n        sensorData = this.motionSensorDataManager.parseActivity(dataView);\n        break;\n      case \"deviceOrientation\":\n        sensorData =\n          this.motionSensorDataManager.parseDeviceOrientation(dataView);\n        break;\n      case \"tapDetector\":\n        sensorData = {};\n        break;\n      case \"barometer\":\n        sensorData = this.barometerSensorDataManager.parseData(\n          dataView,\n          scalar\n        );\n        break;\n      case \"camera\":\n        // we parse camera data using CameraManager\n        return;\n      case \"microphone\":\n        // we parse microphone data using MicrophoneManager\n        return;\n      default:\n        _console.error(`uncaught sensorType \"${sensorType}\"`);\n    }\n\n    _console.assertWithError(\n      sensorData != null,\n      `no sensorData defined for sensorType \"${sensorType}\"`\n    );\n\n    _console.log({ sensorType, sensorData });\n    // @ts-expect-error\n    this.dispatchEvent(sensorType, {\n      sensorType,\n      [sensorType]: sensorData,\n      timestamp,\n    });\n    // @ts-expect-error\n    this.dispatchEvent(\"sensorData\", {\n      sensorType,\n      [sensorType]: sensorData,\n      timestamp,\n    });\n  }\n}\n\nexport default SensorDataManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport SensorDataManager, {\n  SensorTypes,\n  SensorType,\n} from \"./SensorDataManager.ts\";\nimport EventDispatcher from \"../utils/EventDispatcher.ts\";\nimport Device, { SendMessageCallback } from \"../Device.ts\";\nimport autoBind from \"../../node_modules/auto-bind/index.js\";\n\nconst _console = createConsole(\"SensorConfigurationManager\", { log: false });\n\nexport type SensorConfiguration = { [sensorType in SensorType]?: number };\n\nexport const MaxSensorRate = 2 ** 16 - 1;\nexport const SensorRateStep = 5;\n\nexport const SensorConfigurationMessageTypes = [\n  \"getSensorConfiguration\",\n  \"setSensorConfiguration\",\n] as const;\nexport type SensorConfigurationMessageType =\n  (typeof SensorConfigurationMessageTypes)[number];\n\nexport const SensorConfigurationEventTypes = SensorConfigurationMessageTypes;\nexport type SensorConfigurationEventType =\n  (typeof SensorConfigurationEventTypes)[number];\n\nexport interface SensorConfigurationEventMessages {\n  getSensorConfiguration: { sensorConfiguration: SensorConfiguration };\n}\n\nexport type SensorConfigurationEventDispatcher = EventDispatcher<\n  Device,\n  SensorConfigurationEventType,\n  SensorConfigurationEventMessages\n>;\n\nexport type SendSensorConfigurationMessageCallback =\n  SendMessageCallback<SensorConfigurationMessageType>;\n\nclass SensorConfigurationManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendSensorConfigurationMessageCallback;\n\n  eventDispatcher!: SensorConfigurationEventDispatcher;\n  get addEventListener() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  #availableSensorTypes!: SensorType[];\n  #assertAvailableSensorType(sensorType: SensorType) {\n    _console.assertWithError(\n      this.#availableSensorTypes,\n      \"must get initial sensorConfiguration\"\n    );\n    const isSensorTypeAvailable =\n      this.#availableSensorTypes?.includes(sensorType);\n    _console.log(\n      isSensorTypeAvailable,\n      `unavailable sensor type \"${sensorType}\"`\n    );\n    return isSensorTypeAvailable;\n  }\n\n  #configuration: SensorConfiguration = {};\n  get configuration() {\n    return this.#configuration;\n  }\n\n  #updateConfiguration(updatedConfiguration: SensorConfiguration) {\n    this.#configuration = updatedConfiguration;\n    _console.log({ updatedConfiguration: this.#configuration });\n    this.#dispatchEvent(\"getSensorConfiguration\", {\n      sensorConfiguration: this.configuration,\n    });\n  }\n\n  clear() {\n    this.#updateConfiguration({});\n  }\n\n  #isRedundant(sensorConfiguration: SensorConfiguration) {\n    let sensorTypes = Object.keys(sensorConfiguration) as SensorType[];\n    return sensorTypes.every((sensorType) => {\n      return this.configuration[sensorType] == sensorConfiguration[sensorType];\n    });\n  }\n\n  async setConfiguration(\n    newSensorConfiguration: SensorConfiguration,\n    clearRest?: boolean,\n    sendImmediately?: boolean\n  ) {\n    if (clearRest) {\n      newSensorConfiguration = Object.assign(\n        structuredClone(this.zeroSensorConfiguration),\n        newSensorConfiguration\n      );\n    }\n    _console.log({ newSensorConfiguration });\n    if (this.#isRedundant(newSensorConfiguration)) {\n      _console.log(\"redundant sensor configuration\");\n      return;\n    }\n    const setSensorConfigurationData = this.#createData(newSensorConfiguration);\n    _console.log({ setSensorConfigurationData });\n\n    const promise = this.waitForEvent(\"getSensorConfiguration\");\n    this.sendMessage(\n      [\n        {\n          type: \"setSensorConfiguration\",\n          data: setSensorConfigurationData.buffer,\n        },\n      ],\n      sendImmediately\n    );\n    await promise;\n  }\n\n  #parse(dataView: DataView) {\n    const parsedSensorConfiguration: SensorConfiguration = {};\n    for (\n      let byteOffset = 0;\n      byteOffset < dataView.byteLength;\n      byteOffset += 3\n    ) {\n      const sensorTypeIndex = dataView.getUint8(byteOffset);\n      const sensorType = SensorTypes[sensorTypeIndex];\n\n      const sensorRate = dataView.getUint16(byteOffset + 1, true);\n      _console.log({ sensorType, sensorRate });\n\n      if (!sensorType) {\n        _console.warn(`unknown sensorType index ${sensorTypeIndex}`);\n        continue;\n      }\n      parsedSensorConfiguration[sensorType] = sensorRate;\n    }\n    _console.log({ parsedSensorConfiguration });\n    this.#availableSensorTypes = Object.keys(\n      parsedSensorConfiguration\n    ) as SensorType[];\n    return parsedSensorConfiguration;\n  }\n\n  static #AssertValidSensorRate(sensorRate: number) {\n    _console.assertTypeWithError(sensorRate, \"number\");\n    _console.assertWithError(\n      sensorRate >= 0,\n      `sensorRate must be 0 or greater (got ${sensorRate})`\n    );\n    _console.assertWithError(\n      sensorRate < MaxSensorRate,\n      `sensorRate must be 0 or greater (got ${sensorRate})`\n    );\n    _console.assertWithError(\n      sensorRate % SensorRateStep == 0,\n      `sensorRate must be multiple of ${SensorRateStep}`\n    );\n  }\n\n  #assertValidSensorRate(sensorRate: number) {\n    SensorConfigurationManager.#AssertValidSensorRate(sensorRate);\n  }\n\n  #createData(sensorConfiguration: SensorConfiguration) {\n    let sensorTypes = Object.keys(sensorConfiguration) as SensorType[];\n    sensorTypes = sensorTypes.filter((sensorType) =>\n      this.#assertAvailableSensorType(sensorType)\n    );\n\n    const dataView = new DataView(new ArrayBuffer(sensorTypes.length * 3));\n    sensorTypes.forEach((sensorType, index) => {\n      SensorDataManager.AssertValidSensorType(sensorType);\n      const sensorTypeEnum = SensorTypes.indexOf(sensorType);\n      dataView.setUint8(index * 3, sensorTypeEnum);\n\n      const sensorRate = sensorConfiguration[sensorType]!;\n      this.#assertValidSensorRate(sensorRate);\n      dataView.setUint16(index * 3 + 1, sensorRate, true);\n    });\n    _console.log({ sensorConfigurationData: dataView });\n    return dataView;\n  }\n\n  // ZERO\n  static #ZeroSensorConfiguration: SensorConfiguration = {};\n  static get ZeroSensorConfiguration() {\n    return this.#ZeroSensorConfiguration;\n  }\n  static {\n    SensorTypes.forEach((sensorType) => {\n      this.#ZeroSensorConfiguration[sensorType] = 0;\n    });\n  }\n  get zeroSensorConfiguration() {\n    const zeroSensorConfiguration: SensorConfiguration = {};\n    this.#availableSensorTypes.forEach((sensorType) => {\n      zeroSensorConfiguration[sensorType] = 0;\n    });\n    return zeroSensorConfiguration;\n  }\n  async clearSensorConfiguration() {\n    return this.setConfiguration(this.zeroSensorConfiguration);\n  }\n\n  // MESSAGE\n  parseMessage(\n    messageType: SensorConfigurationMessageType,\n    dataView: DataView\n  ) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getSensorConfiguration\":\n      case \"setSensorConfiguration\":\n        const newSensorConfiguration = this.#parse(dataView);\n        this.#updateConfiguration(newSensorConfiguration);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n}\n\nexport default SensorConfigurationManager;\n","import { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { textDecoder, textEncoder } from \"./utils/Text.ts\";\nimport SensorDataManager, { SensorTypes } from \"./sensor/SensorDataManager.ts\";\nimport { arrayWithoutDuplicates } from \"./utils/ArrayUtils.ts\";\nimport { SensorRateStep } from \"./sensor/SensorConfigurationManager.ts\";\nimport { parseTimestamp } from \"./utils/MathUtils.ts\";\nimport { SensorType } from \"./sensor/SensorDataManager.ts\";\nimport Device, { SendMessageCallback } from \"./Device.ts\";\nimport autoBind from \"auto-bind\";\nimport { FileConfiguration as BaseFileConfiguration } from \"./FileTransferManager.ts\";\nimport { UInt8ByteBuffer } from \"./utils/ArrayBufferUtils.ts\";\n\nconst _console = createConsole(\"TfliteManager\", { log: false });\n\nexport const TfliteMessageTypes = [\n  \"getTfliteName\",\n  \"setTfliteName\",\n  \"getTfliteTask\",\n  \"setTfliteTask\",\n  \"getTfliteSampleRate\",\n  \"setTfliteSampleRate\",\n  \"getTfliteSensorTypes\",\n  \"setTfliteSensorTypes\",\n  \"tfliteIsReady\",\n  \"getTfliteCaptureDelay\",\n  \"setTfliteCaptureDelay\",\n  \"getTfliteThreshold\",\n  \"setTfliteThreshold\",\n  \"getTfliteInferencingEnabled\",\n  \"setTfliteInferencingEnabled\",\n  \"tfliteInference\",\n] as const;\nexport type TfliteMessageType = (typeof TfliteMessageTypes)[number];\n\nexport const TfliteEventTypes = TfliteMessageTypes;\nexport type TfliteEventType = (typeof TfliteEventTypes)[number];\n\nexport const RequiredTfliteMessageTypes: TfliteMessageType[] = [\n  \"getTfliteName\",\n  \"getTfliteTask\",\n  \"getTfliteSampleRate\",\n  \"getTfliteSensorTypes\",\n  \"tfliteIsReady\",\n  \"getTfliteCaptureDelay\",\n  \"getTfliteThreshold\",\n  \"getTfliteInferencingEnabled\",\n];\n\nexport const TfliteTasks = [\"classification\", \"regression\"] as const;\nexport type TfliteTask = (typeof TfliteTasks)[number];\n\nexport interface TfliteEventMessages {\n  getTfliteName: { tfliteName: string };\n  getTfliteTask: { tfliteTask: TfliteTask };\n  getTfliteSampleRate: { tfliteSampleRate: number };\n  getTfliteSensorTypes: { tfliteSensorTypes: SensorType[] };\n  tfliteIsReady: { tfliteIsReady: boolean };\n  getTfliteCaptureDelay: { tfliteCaptureDelay: number };\n  getTfliteThreshold: { tfliteThreshold: number };\n  getTfliteInferencingEnabled: { tfliteInferencingEnabled: boolean };\n  tfliteInference: { tfliteInference: TfliteInference };\n}\n\nexport interface TfliteInference {\n  timestamp: number;\n  values: number[];\n  maxValue?: number;\n  maxIndex?: number;\n  maxClass?: string;\n  classValues?: { [key: string]: number };\n}\n\nexport type TfliteEventDispatcher = EventDispatcher<\n  Device,\n  TfliteEventType,\n  TfliteEventMessages\n>;\nexport type SendTfliteMessageCallback = SendMessageCallback<TfliteMessageType>;\n\nexport const TfliteSensorTypes = [\n  \"pressure\",\n  \"linearAcceleration\",\n  \"gyroscope\",\n  \"magnetometer\",\n] as const satisfies readonly SensorType[];\nexport type TfliteSensorType = (typeof TfliteSensorTypes)[number];\n\nexport interface TfliteFileConfiguration extends BaseFileConfiguration {\n  type: \"tflite\";\n  name: string;\n  sensorTypes: TfliteSensorType[];\n  task: TfliteTask;\n  sampleRate: number;\n  captureDelay?: number;\n  threshold?: number;\n  classes?: string[];\n}\n\nclass TfliteManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendTfliteMessageCallback;\n\n  #assertValidTask(task: TfliteTask) {\n    _console.assertEnumWithError(task, TfliteTasks);\n  }\n  #assertValidTaskEnum(taskEnum: number) {\n    _console.assertWithError(\n      taskEnum in TfliteTasks,\n      `invalid taskEnum ${taskEnum}`\n    );\n  }\n\n  eventDispatcher!: TfliteEventDispatcher;\n  get addEventListenter() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  // PROPERTIES\n\n  #name!: string;\n  get name() {\n    return this.#name;\n  }\n  #parseName(dataView: DataView) {\n    _console.log(\"parseName\", dataView);\n    const name = textDecoder.decode(dataView.buffer);\n    this.#updateName(name);\n  }\n  #updateName(name: string) {\n    _console.log({ name });\n    this.#name = name;\n    this.#dispatchEvent(\"getTfliteName\", { tfliteName: name });\n  }\n  async setName(newName: string, sendImmediately?: boolean) {\n    _console.assertTypeWithError(newName, \"string\");\n    if (this.name == newName) {\n      _console.log(`redundant name assignment ${newName}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteName\");\n\n    const setNameData = textEncoder.encode(newName);\n    this.sendMessage(\n      [{ type: \"setTfliteName\", data: setNameData.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #task!: TfliteTask;\n  get task() {\n    return this.#task;\n  }\n  #parseTask(dataView: DataView) {\n    _console.log(\"parseTask\", dataView);\n    const taskEnum = dataView.getUint8(0);\n    this.#assertValidTaskEnum(taskEnum);\n    const task = TfliteTasks[taskEnum];\n    this.#updateTask(task);\n  }\n  #updateTask(task: TfliteTask) {\n    _console.log({ task });\n    this.#task = task;\n    this.#dispatchEvent(\"getTfliteTask\", { tfliteTask: task });\n  }\n  async setTask(newTask: TfliteTask, sendImmediately?: boolean) {\n    this.#assertValidTask(newTask);\n    if (this.task == newTask) {\n      _console.log(`redundant task assignment ${newTask}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteTask\");\n\n    const taskEnum = TfliteTasks.indexOf(newTask);\n    this.sendMessage(\n      [{ type: \"setTfliteTask\", data: UInt8ByteBuffer(taskEnum) }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #sampleRate!: number;\n  get sampleRate() {\n    return this.#sampleRate;\n  }\n  #parseSampleRate(dataView: DataView) {\n    _console.log(\"parseSampleRate\", dataView);\n    const sampleRate = dataView.getUint16(0, true);\n    this.#updateSampleRate(sampleRate);\n  }\n  #updateSampleRate(sampleRate: number) {\n    _console.log({ sampleRate });\n    this.#sampleRate = sampleRate;\n    this.#dispatchEvent(\"getTfliteSampleRate\", {\n      tfliteSampleRate: sampleRate,\n    });\n  }\n  async setSampleRate(newSampleRate: number, sendImmediately?: boolean) {\n    _console.assertTypeWithError(newSampleRate, \"number\");\n    newSampleRate -= newSampleRate % SensorRateStep;\n    _console.assertWithError(\n      newSampleRate >= SensorRateStep,\n      `sampleRate must be multiple of ${SensorRateStep} greater than 0 (got ${newSampleRate})`\n    );\n    if (this.#sampleRate == newSampleRate) {\n      _console.log(`redundant sampleRate assignment ${newSampleRate}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteSampleRate\");\n\n    const dataView = new DataView(new ArrayBuffer(2));\n    dataView.setUint16(0, newSampleRate, true);\n    this.sendMessage(\n      [{ type: \"setTfliteSampleRate\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  static AssertValidSensorType(sensorType: SensorType) {\n    SensorDataManager.AssertValidSensorType(sensorType);\n    const tfliteSensorType = sensorType as TfliteSensorType;\n    _console.assertWithError(\n      TfliteSensorTypes.includes(tfliteSensorType),\n      `invalid tflite sensorType \"${sensorType}\"`\n    );\n  }\n\n  #sensorTypes: TfliteSensorType[] = [];\n  get sensorTypes() {\n    return this.#sensorTypes.slice();\n  }\n  #parseSensorTypes(dataView: DataView) {\n    _console.log(\"parseSensorTypes\", dataView);\n    const sensorTypes: TfliteSensorType[] = [];\n    for (let index = 0; index < dataView.byteLength; index++) {\n      const sensorTypeEnum = dataView.getUint8(index);\n      const sensorType = SensorTypes[sensorTypeEnum] as TfliteSensorType;\n      if (sensorType) {\n        if (TfliteSensorTypes.includes(sensorType)) {\n          sensorTypes.push(sensorType);\n        } else {\n          _console.error(`invalid tfliteSensorType ${sensorType}`);\n        }\n      } else {\n        _console.error(`invalid sensorTypeEnum ${sensorTypeEnum}`);\n      }\n    }\n    this.#updateSensorTypes(sensorTypes);\n  }\n  #updateSensorTypes(sensorTypes: TfliteSensorType[]) {\n    _console.log({ sensorTypes });\n    this.#sensorTypes = sensorTypes;\n    this.#dispatchEvent(\"getTfliteSensorTypes\", {\n      tfliteSensorTypes: sensorTypes,\n    });\n  }\n  async setSensorTypes(\n    newSensorTypes: SensorType[],\n    sendImmediately?: boolean\n  ) {\n    newSensorTypes.forEach((sensorType) => {\n      TfliteManager.AssertValidSensorType(sensorType);\n    });\n\n    const promise = this.waitForEvent(\"getTfliteSensorTypes\");\n\n    newSensorTypes = arrayWithoutDuplicates(newSensorTypes);\n    const newSensorTypeEnums = newSensorTypes\n      .map((sensorType) => SensorTypes.indexOf(sensorType))\n      .sort();\n    _console.log(newSensorTypes, newSensorTypeEnums);\n    this.sendMessage(\n      [\n        {\n          type: \"setTfliteSensorTypes\",\n          data: Uint8Array.from(newSensorTypeEnums).buffer,\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #isReady!: boolean;\n  get isReady() {\n    return this.#isReady;\n  }\n  #parseIsReady(dataView: DataView) {\n    _console.log(\"parseIsReady\", dataView);\n    const isReady = Boolean(dataView.getUint8(0));\n    this.#updateIsReady(isReady);\n  }\n  #updateIsReady(isReady: boolean) {\n    _console.log({ isReady });\n    this.#isReady = isReady;\n    this.#dispatchEvent(\"tfliteIsReady\", { tfliteIsReady: isReady });\n  }\n  #assertIsReady() {\n    _console.assertWithError(this.isReady, `tflite is not ready`);\n  }\n\n  #captureDelay!: number;\n  get captureDelay() {\n    return this.#captureDelay;\n  }\n  #parseCaptureDelay(dataView: DataView) {\n    _console.log(\"parseCaptureDelay\", dataView);\n    const captureDelay = dataView.getUint16(0, true);\n    this.#updateCaptueDelay(captureDelay);\n  }\n  #updateCaptueDelay(captureDelay: number) {\n    _console.log({ captureDelay });\n    this.#captureDelay = captureDelay;\n    this.#dispatchEvent(\"getTfliteCaptureDelay\", {\n      tfliteCaptureDelay: captureDelay,\n    });\n  }\n  async setCaptureDelay(newCaptureDelay: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newCaptureDelay, \"number\");\n    if (this.#captureDelay == newCaptureDelay) {\n      _console.log(`redundant captureDelay assignment ${newCaptureDelay}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteCaptureDelay\");\n\n    const dataView = new DataView(new ArrayBuffer(2));\n    dataView.setUint16(0, newCaptureDelay, true);\n    this.sendMessage(\n      [{ type: \"setTfliteCaptureDelay\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #threshold!: number;\n  get threshold() {\n    return this.#threshold;\n  }\n  #parseThreshold(dataView: DataView) {\n    _console.log(\"parseThreshold\", dataView);\n    const threshold = dataView.getFloat32(0, true);\n    this.#updateThreshold(threshold);\n  }\n  #updateThreshold(threshold: number) {\n    _console.log({ threshold });\n    this.#threshold = threshold;\n    this.#dispatchEvent(\"getTfliteThreshold\", { tfliteThreshold: threshold });\n  }\n  async setThreshold(newThreshold: number, sendImmediately: boolean) {\n    _console.assertTypeWithError(newThreshold, \"number\");\n    _console.assertWithError(\n      newThreshold >= 0,\n      `threshold must be positive (got ${newThreshold})`\n    );\n    if (this.#threshold == newThreshold) {\n      _console.log(`redundant threshold assignment ${newThreshold}`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteThreshold\");\n\n    const dataView = new DataView(new ArrayBuffer(4));\n    dataView.setFloat32(0, newThreshold, true);\n    this.sendMessage(\n      [{ type: \"setTfliteThreshold\", data: dataView.buffer }],\n      sendImmediately\n    );\n\n    await promise;\n  }\n\n  #inferencingEnabled!: boolean;\n  get inferencingEnabled() {\n    return this.#inferencingEnabled;\n  }\n  #parseInferencingEnabled(dataView: DataView) {\n    _console.log(\"parseInferencingEnabled\", dataView);\n    const inferencingEnabled = Boolean(dataView.getUint8(0));\n    this.#updateInferencingEnabled(inferencingEnabled);\n  }\n  #updateInferencingEnabled(inferencingEnabled: boolean) {\n    _console.log({ inferencingEnabled });\n    this.#inferencingEnabled = inferencingEnabled;\n    this.#dispatchEvent(\"getTfliteInferencingEnabled\", {\n      tfliteInferencingEnabled: inferencingEnabled,\n    });\n  }\n  async setInferencingEnabled(\n    newInferencingEnabled: boolean,\n    sendImmediately: boolean = true\n  ) {\n    _console.assertTypeWithError(newInferencingEnabled, \"boolean\");\n    if (!newInferencingEnabled && !this.isReady) {\n      return;\n    }\n    this.#assertIsReady();\n    if (this.#inferencingEnabled == newInferencingEnabled) {\n      _console.log(\n        `redundant inferencingEnabled assignment ${newInferencingEnabled}`\n      );\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getTfliteInferencingEnabled\");\n\n    this.sendMessage(\n      [\n        {\n          type: \"setTfliteInferencingEnabled\",\n\n          data: UInt8ByteBuffer(Number(newInferencingEnabled)),\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n  async toggleInferencingEnabled() {\n    return this.setInferencingEnabled(!this.inferencingEnabled);\n  }\n\n  async enableInferencing() {\n    if (this.inferencingEnabled) {\n      return;\n    }\n    this.setInferencingEnabled(true);\n  }\n  async disableInferencing() {\n    if (!this.inferencingEnabled) {\n      return;\n    }\n    this.setInferencingEnabled(false);\n  }\n\n  #parseInference(dataView: DataView) {\n    _console.log(\"parseInference\", dataView);\n\n    const timestamp = parseTimestamp(dataView, 0);\n    _console.log({ timestamp });\n\n    const values: number[] = [];\n    for (\n      let index = 0, byteOffset = 2;\n      byteOffset < dataView.byteLength;\n      index++, byteOffset += 4\n    ) {\n      const value = dataView.getFloat32(byteOffset, true);\n      values.push(value);\n    }\n    _console.log(\"values\", values);\n\n    const inference: TfliteInference = {\n      timestamp,\n      values,\n    };\n\n    if (this.task == \"classification\") {\n      let maxValue = 0;\n      let maxIndex = 0;\n      values.forEach((value, index) => {\n        if (value > maxValue) {\n          maxValue = value;\n          maxIndex = index;\n        }\n      });\n      _console.log({ maxIndex, maxValue });\n      inference.maxIndex = maxIndex;\n      inference.maxValue = maxValue;\n      if (this.#configuration?.classes) {\n        const { classes } = this.#configuration;\n        inference.maxClass = classes[maxIndex];\n        inference.classValues = {};\n        values.forEach((value, index) => {\n          const key = classes[index];\n          inference.classValues![key] = value;\n        });\n      }\n    }\n\n    this.#dispatchEvent(\"tfliteInference\", { tfliteInference: inference });\n  }\n\n  parseMessage(messageType: TfliteMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getTfliteName\":\n      case \"setTfliteName\":\n        this.#parseName(dataView);\n        break;\n      case \"getTfliteTask\":\n      case \"setTfliteTask\":\n        this.#parseTask(dataView);\n        break;\n      case \"getTfliteSampleRate\":\n      case \"setTfliteSampleRate\":\n        this.#parseSampleRate(dataView);\n        break;\n      case \"getTfliteSensorTypes\":\n      case \"setTfliteSensorTypes\":\n        this.#parseSensorTypes(dataView);\n        break;\n      case \"tfliteIsReady\":\n        this.#parseIsReady(dataView);\n        break;\n      case \"getTfliteCaptureDelay\":\n      case \"setTfliteCaptureDelay\":\n        this.#parseCaptureDelay(dataView);\n        break;\n      case \"getTfliteThreshold\":\n      case \"setTfliteThreshold\":\n        this.#parseThreshold(dataView);\n        break;\n      case \"getTfliteInferencingEnabled\":\n      case \"setTfliteInferencingEnabled\":\n        this.#parseInferencingEnabled(dataView);\n        break;\n      case \"tfliteInference\":\n        this.#parseInference(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  #configuration?: TfliteFileConfiguration;\n  get configuration() {\n    return this.#configuration;\n  }\n  sendConfiguration(\n    configuration: TfliteFileConfiguration,\n    sendImmediately?: boolean\n  ) {\n    if (configuration == this.#configuration) {\n      _console.log(\"redundant tflite configuration assignment\");\n      return;\n    }\n    this.#configuration = configuration;\n    _console.log(\"assigned new tflite configuration\", this.configuration);\n    if (!this.configuration) {\n      return;\n    }\n    const { name, task, captureDelay, sampleRate, threshold, sensorTypes } =\n      this.configuration;\n    this.setName(name, false);\n    this.setTask(task, false);\n    if (captureDelay != undefined) {\n      this.setCaptureDelay(captureDelay, false);\n    }\n    this.setSampleRate(sampleRate, false);\n    if (threshold != undefined) {\n      this.setThreshold(threshold, false);\n    }\n    this.setSensorTypes(sensorTypes, sendImmediately);\n  }\n\n  clear() {\n    this.#configuration = undefined;\n    this.#inferencingEnabled = false;\n    this.#sensorTypes = [];\n    this.#sampleRate = 0;\n    this.#isReady = false;\n  }\n\n  requestRequiredInformation() {\n    _console.log(\"requesting required tflite information\");\n    const messages = RequiredTfliteMessageTypes.map((messageType) => ({\n      type: messageType,\n    }));\n    this.sendMessage(messages, false);\n  }\n}\n\nexport default TfliteManager;\n","import Device from \"./Device.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { textDecoder } from \"./utils/Text.ts\";\n\nconst _console = createConsole(\"DeviceInformationManager\", { log: false });\n\nexport interface PnpId {\n  source: \"Bluetooth\" | \"USB\";\n  vendorId: number;\n  productId: number;\n  productVersion: number;\n}\n\nexport interface DeviceInformation {\n  manufacturerName: string;\n  modelNumber: string;\n  softwareRevision: string;\n  hardwareRevision: string;\n  firmwareRevision: string;\n  pnpId: PnpId;\n  serialNumber: string;\n}\n\nexport const DeviceInformationTypes = [\n  \"manufacturerName\",\n  \"modelNumber\",\n  \"hardwareRevision\",\n  \"firmwareRevision\",\n  \"softwareRevision\",\n  \"pnpId\",\n  \"serialNumber\",\n] as const;\nexport type DeviceInformationType = (typeof DeviceInformationTypes)[number];\n\nexport const DeviceInformationEventTypes = [\n  ...DeviceInformationTypes,\n  \"deviceInformation\",\n] as const;\nexport type DeviceInformationEventType =\n  (typeof DeviceInformationEventTypes)[number];\n\nexport interface DeviceInformationEventMessages {\n  manufacturerName: { manufacturerName: string };\n  modelNumber: { modelNumber: string };\n  softwareRevision: { softwareRevision: string };\n  hardwareRevision: { hardwareRevision: string };\n  firmwareRevision: { firmwareRevision: string };\n  pnpId: { pnpId: PnpId };\n  serialNumber: { serialNumber: string };\n  deviceInformation: { deviceInformation: DeviceInformation };\n}\n\nexport type DeviceInformationEventDispatcher = EventDispatcher<\n  Device,\n  DeviceInformationEventType,\n  DeviceInformationEventMessages\n>;\n\nclass DeviceInformationManager {\n  eventDispatcher!: DeviceInformationEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n\n  #information: Partial<DeviceInformation> = {};\n  get information() {\n    return this.#information as DeviceInformation;\n  }\n  clear() {\n    this.#information = {};\n  }\n  get #isComplete() {\n    return DeviceInformationTypes.filter((key) => key != \"serialNumber\").every(\n      (key) => key in this.#information\n    );\n  }\n\n  #update(partialDeviceInformation: Partial<DeviceInformation>) {\n    _console.log({ partialDeviceInformation });\n    const deviceInformationNames = Object.keys(\n      partialDeviceInformation\n    ) as (keyof DeviceInformation)[];\n    deviceInformationNames.forEach((deviceInformationName) => {\n      // @ts-expect-error\n      this.#dispatchEvent(deviceInformationName, {\n        [deviceInformationName]:\n          partialDeviceInformation[deviceInformationName],\n      });\n    });\n\n    Object.assign(this.#information, partialDeviceInformation);\n    _console.log({ deviceInformation: this.#information });\n    if (this.#isComplete) {\n      _console.log(\"completed deviceInformation\");\n      this.#dispatchEvent(\"deviceInformation\", {\n        deviceInformation: this.information,\n      });\n    }\n  }\n\n  parseMessage(messageType: DeviceInformationType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"manufacturerName\":\n        const manufacturerName = textDecoder.decode(dataView.buffer);\n        _console.log({ manufacturerName });\n        this.#update({ manufacturerName });\n        break;\n      case \"modelNumber\":\n        const modelNumber = textDecoder.decode(dataView.buffer);\n        _console.log({ modelNumber });\n        this.#update({ modelNumber });\n        break;\n      case \"softwareRevision\":\n        const softwareRevision = textDecoder.decode(dataView.buffer);\n        _console.log({ softwareRevision });\n        this.#update({ softwareRevision });\n        break;\n      case \"hardwareRevision\":\n        const hardwareRevision = textDecoder.decode(dataView.buffer);\n        _console.log({ hardwareRevision });\n        this.#update({ hardwareRevision });\n        break;\n      case \"firmwareRevision\":\n        const firmwareRevision = textDecoder.decode(dataView.buffer);\n        _console.log({ firmwareRevision });\n        this.#update({ firmwareRevision });\n        break;\n      case \"pnpId\":\n        const pnpId: PnpId = {\n          source: dataView.getUint8(0) === 1 ? \"Bluetooth\" : \"USB\",\n          productId: dataView.getUint16(3, true),\n          productVersion: dataView.getUint16(5, true),\n          vendorId: 0,\n        };\n        if (pnpId.source == \"Bluetooth\") {\n          pnpId.vendorId = dataView.getUint16(1, true);\n        } else {\n          // no need to implement\n        }\n        _console.log({ pnpId });\n        this.#update({ pnpId });\n        break;\n      case \"serialNumber\":\n        const serialNumber = textDecoder.decode(dataView.buffer);\n        _console.log({ serialNumber });\n        // will only be used for node\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n}\n\nexport default DeviceInformationManager;\n","import { ConnectionType } from \"./connection/BaseConnectionManager.ts\";\nimport Device, { SendMessageCallback } from \"./Device.ts\";\nimport { UInt8ByteBuffer } from \"./utils/ArrayBufferUtils.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { Uint16Max } from \"./utils/MathUtils.ts\";\nimport { textDecoder, textEncoder } from \"./utils/Text.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"InformationManager\", { log: false });\n\nexport const DeviceTypes = [\n  \"leftInsole\",\n  \"rightInsole\",\n  \"leftGlove\",\n  \"rightGlove\",\n  \"glasses\",\n  \"generic\",\n] as const;\nexport type DeviceType = (typeof DeviceTypes)[number];\n\nexport const Sides = [\"left\", \"right\"] as const;\nexport type Side = (typeof Sides)[number];\n\nexport const MinNameLength = 2;\nexport const MaxNameLength = 30;\n\nexport const InformationMessageTypes = [\n  \"isCharging\",\n  \"getBatteryCurrent\",\n  \"getMtu\",\n  \"getId\",\n  \"getName\",\n  \"setName\",\n  \"getType\",\n  \"setType\",\n  \"getCurrentTime\",\n  \"setCurrentTime\",\n] as const;\nexport type InformationMessageType = (typeof InformationMessageTypes)[number];\n\nexport const InformationEventTypes = InformationMessageTypes;\nexport type InformationEventType = (typeof InformationEventTypes)[number];\n\nexport interface InformationEventMessages {\n  isCharging: { isCharging: boolean };\n  getBatteryCurrent: { batteryCurrent: number };\n  getMtu: { mtu: number };\n  getId: { id: string };\n  getName: { name: string };\n  getType: { type: DeviceType };\n  getCurrentTime: { currentTime: number };\n}\n\nexport type InformationEventDispatcher = EventDispatcher<\n  Device,\n  InformationEventType,\n  InformationEventMessages\n>;\nexport type SendInformationMessageCallback =\n  SendMessageCallback<InformationMessageType>;\n\nclass InformationManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendInformationMessageCallback;\n\n  eventDispatcher!: InformationEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  // PROPERTIES\n\n  #isCharging = false;\n  get isCharging() {\n    return this.#isCharging;\n  }\n  #updateIsCharging(updatedIsCharging: boolean) {\n    _console.assertTypeWithError(updatedIsCharging, \"boolean\");\n    this.#isCharging = updatedIsCharging;\n    _console.log({ isCharging: this.#isCharging });\n    this.#dispatchEvent(\"isCharging\", { isCharging: this.#isCharging });\n  }\n\n  #batteryCurrent!: number;\n  get batteryCurrent() {\n    return this.#batteryCurrent;\n  }\n  async getBatteryCurrent() {\n    _console.log(\"getting battery current...\");\n    const promise = this.waitForEvent(\"getBatteryCurrent\");\n    this.sendMessage([{ type: \"getBatteryCurrent\" }]);\n    await promise;\n  }\n  #updateBatteryCurrent(updatedBatteryCurrent: number) {\n    _console.assertTypeWithError(updatedBatteryCurrent, \"number\");\n    this.#batteryCurrent = updatedBatteryCurrent;\n    _console.log({ batteryCurrent: this.#batteryCurrent });\n    this.#dispatchEvent(\"getBatteryCurrent\", {\n      batteryCurrent: this.#batteryCurrent,\n    });\n  }\n\n  #id!: string;\n  get id() {\n    return this.#id;\n  }\n  #updateId(updatedId: string) {\n    _console.assertTypeWithError(updatedId, \"string\");\n    this.#id = updatedId;\n    _console.log({ id: this.#id });\n    this.#dispatchEvent(\"getId\", { id: this.#id });\n  }\n\n  #name = \"\";\n  get name() {\n    return this.#name;\n  }\n\n  updateName(updatedName: string) {\n    _console.assertTypeWithError(updatedName, \"string\");\n    this.#name = updatedName;\n    _console.log({ updatedName: this.#name });\n    this.#dispatchEvent(\"getName\", { name: this.#name });\n  }\n  async setName(newName: string) {\n    _console.assertTypeWithError(newName, \"string\");\n    _console.assertRangeWithError(\n      \"newName\",\n      newName.length,\n      MinNameLength,\n      MaxNameLength\n    );\n    const setNameData = textEncoder.encode(newName);\n    _console.log({ setNameData });\n\n    const promise = this.waitForEvent(\"getName\");\n    this.sendMessage([{ type: \"setName\", data: setNameData.buffer }]);\n    await promise;\n  }\n\n  // TYPE\n  #type!: DeviceType;\n  get type() {\n    return this.#type;\n  }\n  get typeEnum() {\n    return DeviceTypes.indexOf(this.type);\n  }\n  #assertValidDeviceType(type: DeviceType) {\n    _console.assertEnumWithError(type, DeviceTypes);\n  }\n  #assertValidDeviceTypeEnum(typeEnum: number) {\n    _console.assertTypeWithError(typeEnum, \"number\");\n    _console.assertWithError(\n      typeEnum in DeviceTypes,\n      `invalid typeEnum ${typeEnum}`\n    );\n  }\n  updateType(updatedType: DeviceType) {\n    this.#assertValidDeviceType(updatedType);\n    // if (updatedType == this.type) {\n    //   _console.log(\"redundant type assignment\");\n    //   return;\n    // }\n    this.#type = updatedType;\n    _console.log({ updatedType: this.#type });\n\n    this.#dispatchEvent(\"getType\", { type: this.#type });\n  }\n  async #setTypeEnum(newTypeEnum: number) {\n    this.#assertValidDeviceTypeEnum(newTypeEnum);\n\n    const setTypeData = UInt8ByteBuffer(newTypeEnum);\n    _console.log({ setTypeData });\n    const promise = this.waitForEvent(\"getType\");\n    this.sendMessage([{ type: \"setType\", data: setTypeData }]);\n    await promise;\n  }\n  async setType(newType: DeviceType) {\n    this.#assertValidDeviceType(newType);\n    const newTypeEnum = DeviceTypes.indexOf(newType);\n    this.#setTypeEnum(newTypeEnum);\n  }\n\n  get isInsole() {\n    switch (this.type) {\n      case \"leftInsole\":\n      case \"rightInsole\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get isGlove() {\n    switch (this.type) {\n      case \"leftGlove\":\n      case \"rightGlove\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get side(): Side {\n    switch (this.type) {\n      case \"leftInsole\":\n      case \"leftGlove\":\n        return \"left\";\n      case \"rightInsole\":\n      case \"rightGlove\":\n        return \"right\";\n      default:\n        return \"left\";\n    }\n  }\n\n  #mtu = 0;\n  get mtu() {\n    return this.#mtu;\n  }\n  #updateMtu(newMtu: number) {\n    _console.assertTypeWithError(newMtu, \"number\");\n    if (this.#mtu == newMtu) {\n      _console.log(\"redundant mtu assignment\", newMtu);\n      return;\n    }\n    this.#mtu = newMtu;\n\n    this.#dispatchEvent(\"getMtu\", { mtu: this.#mtu });\n  }\n\n  #isCurrentTimeSet = false;\n  get isCurrentTimeSet() {\n    return this.#isCurrentTimeSet;\n  }\n\n  #onCurrentTime(currentTime: number) {\n    _console.log({ currentTime });\n    this.#isCurrentTimeSet =\n      currentTime != 0 || Math.abs(Date.now() - currentTime) < Uint16Max;\n    if (!this.#isCurrentTimeSet) {\n      this.#setCurrentTime(false);\n    }\n  }\n  async #setCurrentTime(sendImmediately?: boolean) {\n    _console.log(\"setting current time...\");\n    const dataView = new DataView(new ArrayBuffer(8));\n    dataView.setBigUint64(0, BigInt(Date.now()), true);\n    const promise = this.waitForEvent(\"getCurrentTime\");\n    this.sendMessage(\n      [{ type: \"setCurrentTime\", data: dataView.buffer }],\n      sendImmediately\n    );\n    await promise;\n  }\n\n  // MESSAGE\n  parseMessage(messageType: InformationMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"isCharging\":\n        const isCharging = Boolean(dataView.getUint8(0));\n        _console.log({ isCharging });\n        this.#updateIsCharging(isCharging);\n        break;\n      case \"getBatteryCurrent\":\n        const batteryCurrent = dataView.getFloat32(0, true);\n        _console.log({ batteryCurrent });\n        this.#updateBatteryCurrent(batteryCurrent);\n        break;\n      case \"getId\":\n        const id = textDecoder.decode(dataView.buffer);\n        _console.log({ id });\n        this.#updateId(id);\n        break;\n      case \"getName\":\n      case \"setName\":\n        const name = textDecoder.decode(dataView.buffer);\n        _console.log({ name });\n        this.updateName(name);\n        break;\n      case \"getType\":\n      case \"setType\":\n        const typeEnum = dataView.getUint8(0);\n        const type = DeviceTypes[typeEnum];\n        _console.log({ typeEnum, type });\n        this.updateType(type);\n        break;\n      case \"getMtu\":\n        let mtu = dataView.getUint16(0, true);\n        if (\n          this.connectionType != \"webSocket\" &&\n          this.connectionType != \"udp\"\n        ) {\n          mtu = Math.min(mtu, 512);\n        }\n        _console.log({ mtu });\n        this.#updateMtu(mtu);\n        break;\n      case \"getCurrentTime\":\n      case \"setCurrentTime\":\n        const currentTime = Number(dataView.getBigUint64(0, true));\n        this.#onCurrentTime(currentTime);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  clear() {\n    this.#isCurrentTimeSet = false;\n  }\n\n  connectionType?: ConnectionType;\n}\n\nexport default InformationManager;\n","export const VibrationWaveformEffects = [\n  \"none\",\n  \"strongClick100\",\n  \"strongClick60\",\n  \"strongClick30\",\n  \"sharpClick100\",\n  \"sharpClick60\",\n  \"sharpClick30\",\n  \"softBump100\",\n  \"softBump60\",\n  \"softBump30\",\n  \"doubleClick100\",\n  \"doubleClick60\",\n  \"tripleClick100\",\n  \"softFuzz60\",\n  \"strongBuzz100\",\n  \"alert750ms\",\n  \"alert1000ms\",\n  \"strongClick1_100\",\n  \"strongClick2_80\",\n  \"strongClick3_60\",\n  \"strongClick4_30\",\n  \"mediumClick100\",\n  \"mediumClick80\",\n  \"mediumClick60\",\n  \"sharpTick100\",\n  \"sharpTick80\",\n  \"sharpTick60\",\n  \"shortDoubleClickStrong100\",\n  \"shortDoubleClickStrong80\",\n  \"shortDoubleClickStrong60\",\n  \"shortDoubleClickStrong30\",\n  \"shortDoubleClickMedium100\",\n  \"shortDoubleClickMedium80\",\n  \"shortDoubleClickMedium60\",\n  \"shortDoubleSharpTick100\",\n  \"shortDoubleSharpTick80\",\n  \"shortDoubleSharpTick60\",\n  \"longDoubleSharpClickStrong100\",\n  \"longDoubleSharpClickStrong80\",\n  \"longDoubleSharpClickStrong60\",\n  \"longDoubleSharpClickStrong30\",\n  \"longDoubleSharpClickMedium100\",\n  \"longDoubleSharpClickMedium80\",\n  \"longDoubleSharpClickMedium60\",\n  \"longDoubleSharpTick100\",\n  \"longDoubleSharpTick80\",\n  \"longDoubleSharpTick60\",\n  \"buzz100\",\n  \"buzz80\",\n  \"buzz60\",\n  \"buzz40\",\n  \"buzz20\",\n  \"pulsingStrong100\",\n  \"pulsingStrong60\",\n  \"pulsingMedium100\",\n  \"pulsingMedium60\",\n  \"pulsingSharp100\",\n  \"pulsingSharp60\",\n  \"transitionClick100\",\n  \"transitionClick80\",\n  \"transitionClick60\",\n  \"transitionClick40\",\n  \"transitionClick20\",\n  \"transitionClick10\",\n  \"transitionHum100\",\n  \"transitionHum80\",\n  \"transitionHum60\",\n  \"transitionHum40\",\n  \"transitionHum20\",\n  \"transitionHum10\",\n  \"transitionRampDownLongSmooth2_100\",\n  \"transitionRampDownLongSmooth1_100\",\n  \"transitionRampDownMediumSmooth1_100\",\n  \"transitionRampDownMediumSmooth2_100\",\n  \"transitionRampDownShortSmooth1_100\",\n  \"transitionRampDownShortSmooth2_100\",\n  \"transitionRampDownLongSharp1_100\",\n  \"transitionRampDownLongSharp2_100\",\n  \"transitionRampDownMediumSharp1_100\",\n  \"transitionRampDownMediumSharp2_100\",\n  \"transitionRampDownShortSharp1_100\",\n  \"transitionRampDownShortSharp2_100\",\n  \"transitionRampUpLongSmooth1_100\",\n  \"transitionRampUpLongSmooth2_100\",\n  \"transitionRampUpMediumSmooth1_100\",\n  \"transitionRampUpMediumSmooth2_100\",\n  \"transitionRampUpShortSmooth1_100\",\n  \"transitionRampUpShortSmooth2_100\",\n  \"transitionRampUpLongSharp1_100\",\n  \"transitionRampUpLongSharp2_100\",\n  \"transitionRampUpMediumSharp1_100\",\n  \"transitionRampUpMediumSharp2_100\",\n  \"transitionRampUpShortSharp1_100\",\n  \"transitionRampUpShortSharp2_100\",\n  \"transitionRampDownLongSmooth1_50\",\n  \"transitionRampDownLongSmooth2_50\",\n  \"transitionRampDownMediumSmooth1_50\",\n  \"transitionRampDownMediumSmooth2_50\",\n  \"transitionRampDownShortSmooth1_50\",\n  \"transitionRampDownShortSmooth2_50\",\n  \"transitionRampDownLongSharp1_50\",\n  \"transitionRampDownLongSharp2_50\",\n  \"transitionRampDownMediumSharp1_50\",\n  \"transitionRampDownMediumSharp2_50\",\n  \"transitionRampDownShortSharp1_50\",\n  \"transitionRampDownShortSharp2_50\",\n  \"transitionRampUpLongSmooth1_50\",\n  \"transitionRampUpLongSmooth2_50\",\n  \"transitionRampUpMediumSmooth1_50\",\n  \"transitionRampUpMediumSmooth2_50\",\n  \"transitionRampUpShortSmooth1_50\",\n  \"transitionRampUpShortSmooth2_50\",\n  \"transitionRampUpLongSharp1_50\",\n  \"transitionRampUpLongSharp2_50\",\n  \"transitionRampUpMediumSharp1_50\",\n  \"transitionRampUpMediumSharp2_50\",\n  \"transitionRampUpShortSharp1_50\",\n  \"transitionRampUpShortSharp2_50\",\n  \"longBuzz100\",\n  \"smoothHum50\",\n  \"smoothHum40\",\n  \"smoothHum30\",\n  \"smoothHum20\",\n  \"smoothHum10\",\n] as const;\n\nexport type VibrationWaveformEffect = (typeof VibrationWaveformEffects)[number];\n","import { createConsole } from \"../utils/Console.ts\";\nimport {\n  VibrationWaveformEffect,\n  VibrationWaveformEffects,\n} from \"./VibrationWaveformEffects.ts\";\nimport { concatenateArrayBuffers } from \"../utils/ArrayBufferUtils.ts\";\nimport Device, { SendMessageCallback } from \"../Device.ts\";\nimport autoBind from \"auto-bind\";\nimport EventDispatcher from \"../utils/EventDispatcher.ts\";\n\nconst _console = createConsole(\"VibrationManager\", { log: false });\n\nexport const VibrationLocations = [\"front\", \"rear\"] as const;\nexport type VibrationLocation = (typeof VibrationLocations)[number];\n\nexport const VibrationTypes = [\"waveformEffect\", \"waveform\"] as const;\nexport type VibrationType = (typeof VibrationTypes)[number];\n\nexport interface VibrationWaveformEffectSegment {\n  effect?: VibrationWaveformEffect;\n  delay?: number;\n  loopCount?: number;\n}\n\nexport interface VibrationWaveformSegment {\n  duration: number;\n  amplitude: number;\n}\n\nexport const VibrationMessageTypes = [\n  \"getVibrationLocations\",\n  \"triggerVibration\",\n] as const;\nexport type VibrationMessageType = (typeof VibrationMessageTypes)[number];\n\nexport const VibrationEventTypes = VibrationMessageTypes;\nexport type VibrationEventType = (typeof VibrationEventTypes)[number];\n\nexport interface VibrationEventMessages {\n  getVibrationLocations: { vibrationLocations: VibrationLocation[] };\n}\n\nexport const MaxNumberOfVibrationWaveformEffectSegments = 8;\nexport const MaxVibrationWaveformSegmentDuration = 2550;\nexport const MaxVibrationWaveformEffectSegmentDelay = 1270;\nexport const MaxVibrationWaveformEffectSegmentLoopCount = 3;\nexport const MaxNumberOfVibrationWaveformSegments = 20;\nexport const MaxVibrationWaveformEffectSequenceLoopCount = 6;\n\ninterface BaseVibrationConfiguration {\n  type: VibrationType;\n  locations?: VibrationLocation[];\n}\n\nexport interface VibrationWaveformEffectConfiguration\n  extends BaseVibrationConfiguration {\n  type: \"waveformEffect\";\n  segments: VibrationWaveformEffectSegment[];\n  loopCount?: number;\n}\n\nexport interface VibrationWaveformConfiguration\n  extends BaseVibrationConfiguration {\n  type: \"waveform\";\n  segments: VibrationWaveformSegment[];\n}\n\nexport type VibrationConfiguration =\n  | VibrationWaveformEffectConfiguration\n  | VibrationWaveformConfiguration;\n\nexport type SendVibrationMessageCallback =\n  SendMessageCallback<VibrationMessageType>;\n\nexport type VibrationEventDispatcher = EventDispatcher<\n  Device,\n  VibrationEventType,\n  VibrationEventMessages\n>;\n\nclass VibrationManager {\n  constructor() {\n    autoBind(this);\n  }\n  sendMessage!: SendVibrationMessageCallback;\n\n  eventDispatcher!: VibrationEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  #verifyLocation(location: VibrationLocation) {\n    _console.assertTypeWithError(location, \"string\");\n    _console.assertWithError(\n      VibrationLocations.includes(location),\n      `invalid location \"${location}\"`\n    );\n  }\n  #verifyLocations(locations: VibrationLocation[]) {\n    this.#assertNonEmptyArray(locations);\n    locations.forEach((location) => {\n      this.#verifyLocation(location);\n    });\n  }\n  #createLocationsBitmask(locations: VibrationLocation[]) {\n    this.#verifyLocations(locations);\n\n    let locationsBitmask = 0;\n    locations.forEach((location) => {\n      const locationIndex = VibrationLocations.indexOf(location);\n      locationsBitmask |= 1 << locationIndex;\n    });\n    _console.log({ locationsBitmask });\n    _console.assertWithError(\n      locationsBitmask > 0,\n      `locationsBitmask must not be zero`\n    );\n    return locationsBitmask;\n  }\n\n  #assertNonEmptyArray(array: any[]) {\n    _console.assertWithError(Array.isArray(array), \"passed non-array\");\n    _console.assertWithError(array.length > 0, \"passed empty array\");\n  }\n\n  #verifyWaveformEffect(waveformEffect: VibrationWaveformEffect) {\n    _console.assertWithError(\n      VibrationWaveformEffects.includes(waveformEffect),\n      `invalid waveformEffect \"${waveformEffect}\"`\n    );\n  }\n\n  #verifyWaveformEffectSegment(\n    waveformEffectSegment: VibrationWaveformEffectSegment\n  ) {\n    if (waveformEffectSegment.effect != undefined) {\n      const waveformEffect = waveformEffectSegment.effect;\n      this.#verifyWaveformEffect(waveformEffect);\n    } else if (waveformEffectSegment.delay != undefined) {\n      const { delay } = waveformEffectSegment;\n      _console.assertWithError(\n        delay >= 0,\n        `delay must be 0ms or greater (got ${delay})`\n      );\n      _console.assertWithError(\n        delay <= MaxVibrationWaveformEffectSegmentDelay,\n        `delay must be ${MaxVibrationWaveformEffectSegmentDelay}ms or less (got ${delay})`\n      );\n    } else {\n      throw Error(\"no effect or delay found in waveformEffectSegment\");\n    }\n\n    if (waveformEffectSegment.loopCount != undefined) {\n      const { loopCount } = waveformEffectSegment;\n      this.#verifyWaveformEffectSegmentLoopCount(loopCount);\n    }\n  }\n\n  #verifyWaveformEffectSegmentLoopCount(\n    waveformEffectSegmentLoopCount: number\n  ) {\n    _console.assertTypeWithError(waveformEffectSegmentLoopCount, \"number\");\n    _console.assertWithError(\n      waveformEffectSegmentLoopCount >= 0,\n      `waveformEffectSegmentLoopCount must be 0 or greater (got ${waveformEffectSegmentLoopCount})`\n    );\n    _console.assertWithError(\n      waveformEffectSegmentLoopCount <=\n        MaxVibrationWaveformEffectSegmentLoopCount,\n      `waveformEffectSegmentLoopCount must be ${MaxVibrationWaveformEffectSegmentLoopCount} or fewer (got ${waveformEffectSegmentLoopCount})`\n    );\n  }\n\n  #verifyWaveformEffectSegments(\n    waveformEffectSegments: VibrationWaveformEffectSegment[]\n  ) {\n    this.#assertNonEmptyArray(waveformEffectSegments);\n    _console.assertWithError(\n      waveformEffectSegments.length <=\n        MaxNumberOfVibrationWaveformEffectSegments,\n      `must have ${MaxNumberOfVibrationWaveformEffectSegments} waveformEffectSegments or fewer (got ${waveformEffectSegments.length})`\n    );\n    waveformEffectSegments.forEach((waveformEffectSegment) => {\n      this.#verifyWaveformEffectSegment(waveformEffectSegment);\n    });\n  }\n\n  #verifyWaveformEffectSequenceLoopCount(\n    waveformEffectSequenceLoopCount: number\n  ) {\n    _console.assertTypeWithError(waveformEffectSequenceLoopCount, \"number\");\n    _console.assertWithError(\n      waveformEffectSequenceLoopCount >= 0,\n      `waveformEffectSequenceLoopCount must be 0 or greater (got ${waveformEffectSequenceLoopCount})`\n    );\n    _console.assertWithError(\n      waveformEffectSequenceLoopCount <=\n        MaxVibrationWaveformEffectSequenceLoopCount,\n      `waveformEffectSequenceLoopCount must be ${MaxVibrationWaveformEffectSequenceLoopCount} or fewer (got ${waveformEffectSequenceLoopCount})`\n    );\n  }\n\n  #verifyWaveformSegment(waveformSegment: VibrationWaveformSegment) {\n    _console.assertTypeWithError(waveformSegment.amplitude, \"number\");\n    _console.assertWithError(\n      waveformSegment.amplitude >= 0,\n      `amplitude must be 0 or greater (got ${waveformSegment.amplitude})`\n    );\n    _console.assertWithError(\n      waveformSegment.amplitude <= 1,\n      `amplitude must be 1 or less (got ${waveformSegment.amplitude})`\n    );\n\n    _console.assertTypeWithError(waveformSegment.duration, \"number\");\n    _console.assertWithError(\n      waveformSegment.duration > 0,\n      `duration must be greater than 0ms (got ${waveformSegment.duration}ms)`\n    );\n    _console.assertWithError(\n      waveformSegment.duration <= MaxVibrationWaveformSegmentDuration,\n      `duration must be ${MaxVibrationWaveformSegmentDuration}ms or less (got ${waveformSegment.duration}ms)`\n    );\n  }\n\n  #verifyWaveformSegments(waveformSegments: VibrationWaveformSegment[]) {\n    this.#assertNonEmptyArray(waveformSegments);\n    _console.assertWithError(\n      waveformSegments.length <= MaxNumberOfVibrationWaveformSegments,\n      `must have ${MaxNumberOfVibrationWaveformSegments} waveformSegments or fewer (got ${waveformSegments.length})`\n    );\n    waveformSegments.forEach((waveformSegment) => {\n      this.#verifyWaveformSegment(waveformSegment);\n    });\n  }\n\n  #createWaveformEffectsData(\n    locations: VibrationLocation[],\n    waveformEffectSegments: VibrationWaveformEffectSegment[],\n    waveformEffectSequenceLoopCount: number = 0\n  ) {\n    this.#verifyWaveformEffectSegments(waveformEffectSegments);\n    this.#verifyWaveformEffectSequenceLoopCount(\n      waveformEffectSequenceLoopCount\n    );\n\n    let dataArray = [];\n    let byteOffset = 0;\n\n    const hasAtLeast1WaveformEffectWithANonzeroLoopCount =\n      waveformEffectSegments.some((waveformEffectSegment) => {\n        const { loopCount } = waveformEffectSegment;\n        return loopCount != undefined && loopCount > 0;\n      });\n\n    const includeAllWaveformEffectSegments =\n      hasAtLeast1WaveformEffectWithANonzeroLoopCount ||\n      waveformEffectSequenceLoopCount != 0;\n\n    for (\n      let index = 0;\n      index < waveformEffectSegments.length ||\n      (includeAllWaveformEffectSegments &&\n        index < MaxNumberOfVibrationWaveformEffectSegments);\n      index++\n    ) {\n      const waveformEffectSegment = waveformEffectSegments[index] || {\n        effect: \"none\",\n      };\n      if (waveformEffectSegment.effect != undefined) {\n        const waveformEffect = waveformEffectSegment.effect;\n        dataArray[byteOffset++] =\n          VibrationWaveformEffects.indexOf(waveformEffect);\n      } else if (waveformEffectSegment.delay != undefined) {\n        const { delay } = waveformEffectSegment;\n        dataArray[byteOffset++] = (1 << 7) | Math.floor(delay / 10); // set most significant bit to 1\n      } else {\n        throw Error(\"invalid waveformEffectSegment\");\n      }\n    }\n\n    const includeAllWaveformEffectSegmentLoopCounts =\n      waveformEffectSequenceLoopCount != 0;\n    for (\n      let index = 0;\n      index < waveformEffectSegments.length ||\n      (includeAllWaveformEffectSegmentLoopCounts &&\n        index < MaxNumberOfVibrationWaveformEffectSegments);\n      index++\n    ) {\n      const waveformEffectSegmentLoopCount =\n        waveformEffectSegments[index]?.loopCount || 0;\n      if (index == 0 || index == 4) {\n        dataArray[byteOffset] = 0;\n      }\n      const bitOffset = 2 * (index % 4);\n      dataArray[byteOffset] |= waveformEffectSegmentLoopCount << bitOffset;\n      if (index == 3 || index == 7) {\n        byteOffset++;\n      }\n    }\n\n    if (waveformEffectSequenceLoopCount != 0) {\n      dataArray[byteOffset++] = waveformEffectSequenceLoopCount;\n    }\n    const dataView = new DataView(Uint8Array.from(dataArray).buffer);\n    _console.log({ dataArray, dataView });\n    return this.#createData(locations, \"waveformEffect\", dataView);\n  }\n  #createWaveformData(\n    locations: VibrationLocation[],\n    waveformSegments: VibrationWaveformSegment[]\n  ) {\n    this.#verifyWaveformSegments(waveformSegments);\n    const dataView = new DataView(new ArrayBuffer(waveformSegments.length * 2));\n    waveformSegments.forEach((waveformSegment, index) => {\n      dataView.setUint8(index * 2, Math.floor(waveformSegment.amplitude * 127));\n      dataView.setUint8(\n        index * 2 + 1,\n        Math.floor(waveformSegment.duration / 10)\n      );\n    });\n    _console.log({ dataView });\n    return this.#createData(locations, \"waveform\", dataView);\n  }\n\n  #verifyVibrationType(vibrationType: VibrationType) {\n    _console.assertTypeWithError(vibrationType, \"string\");\n    _console.assertWithError(\n      VibrationTypes.includes(vibrationType),\n      `invalid vibrationType \"${vibrationType}\"`\n    );\n  }\n\n  #createData(\n    locations: VibrationLocation[],\n    vibrationType: VibrationType,\n    dataView: DataView\n  ) {\n    _console.assertWithError(dataView?.byteLength > 0, \"no data received\");\n    const locationsBitmask = this.#createLocationsBitmask(locations);\n    this.#verifyVibrationType(vibrationType);\n    const vibrationTypeIndex = VibrationTypes.indexOf(vibrationType);\n    _console.log({ locationsBitmask, vibrationTypeIndex, dataView });\n    const data = concatenateArrayBuffers(\n      locationsBitmask,\n      vibrationTypeIndex,\n      dataView.byteLength,\n      dataView\n    );\n    _console.log({ data });\n    return data;\n  }\n\n  async triggerVibration(\n    vibrationConfigurations: VibrationConfiguration[],\n    sendImmediately: boolean = true\n  ) {\n    let triggerVibrationData!: ArrayBuffer;\n    vibrationConfigurations.forEach((vibrationConfiguration) => {\n      const { type } = vibrationConfiguration;\n\n      let { locations } = vibrationConfiguration;\n      locations = locations || this.vibrationLocations.slice();\n      locations = locations.filter((location) =>\n        this.vibrationLocations.includes(location)\n      );\n\n      let arrayBuffer: ArrayBuffer;\n\n      switch (type) {\n        case \"waveformEffect\":\n          {\n            const { segments, loopCount } = vibrationConfiguration;\n            arrayBuffer = this.#createWaveformEffectsData(\n              locations,\n              segments,\n              loopCount\n            );\n          }\n          break;\n        case \"waveform\":\n          {\n            const { segments } = vibrationConfiguration;\n            arrayBuffer = this.#createWaveformData(locations, segments);\n          }\n          break;\n        default:\n          throw Error(`invalid vibration type \"${type}\"`);\n      }\n      _console.log({ type, arrayBuffer });\n      triggerVibrationData = concatenateArrayBuffers(\n        triggerVibrationData,\n        arrayBuffer\n      );\n    });\n    await this.sendMessage(\n      [{ type: \"triggerVibration\", data: triggerVibrationData }],\n      sendImmediately\n    );\n  }\n\n  #vibrationLocations: VibrationLocation[] = [];\n  get vibrationLocations() {\n    return this.#vibrationLocations;\n  }\n  #onVibrationLocations(vibrationLocations: VibrationLocation[]) {\n    this.#vibrationLocations = vibrationLocations;\n    _console.log(\"vibrationLocations\", vibrationLocations);\n    this.#dispatchEvent(\"getVibrationLocations\", {\n      vibrationLocations: this.#vibrationLocations,\n    });\n  }\n\n  // MESSAGE\n  parseMessage(messageType: VibrationMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"getVibrationLocations\":\n        const vibrationLocations = Array.from(new Uint8Array(dataView.buffer))\n          .map((index) => VibrationLocations[index])\n          .filter(Boolean);\n        this.#onVibrationLocations(vibrationLocations);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n}\n\nexport default VibrationManager;\n","import Device, { SendMessageCallback } from \"./Device.ts\";\nimport { UInt8ByteBuffer } from \"./utils/ArrayBufferUtils.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport { isInNode } from \"./utils/environment.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { textDecoder, textEncoder } from \"./utils/Text.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"WifiManager\", { log: false });\n\nexport const MinWifiSSIDLength = 1;\nexport const MaxWifiSSIDLength = 32;\n\nexport const MinWifiPasswordLength = 8;\nexport const MaxWifiPasswordLength = 64;\n\nexport const WifiMessageTypes = [\n  \"isWifiAvailable\",\n  \"getWifiSSID\",\n  \"setWifiSSID\",\n  \"getWifiPassword\",\n  \"setWifiPassword\",\n  \"getWifiConnectionEnabled\",\n  \"setWifiConnectionEnabled\",\n  \"isWifiConnected\",\n  \"ipAddress\",\n  \"isWifiSecure\",\n] as const;\nexport type WifiMessageType = (typeof WifiMessageTypes)[number];\n\nexport const RequiredWifiMessageTypes: WifiMessageType[] = [\n  \"getWifiSSID\",\n  \"getWifiPassword\",\n  \"getWifiConnectionEnabled\",\n  \"isWifiConnected\",\n  \"ipAddress\",\n  \"isWifiSecure\",\n] as const;\n\nexport const WifiEventTypes = WifiMessageTypes;\nexport type WifiEventType = (typeof WifiEventTypes)[number];\n\nexport interface WifiEventMessages {\n  isWifiAvailable: { isWifiAvailable: boolean };\n  getWifiSSID: { wifiSSID: string };\n  getWifiPassword: { wifiPassword: string };\n  getEnableWifiConnection: { wifiConnectionEnabled: boolean };\n  isWifiConnected: { isWifiConnected: boolean };\n  ipAddress: { ipAddress?: string };\n}\n\nexport type WifiEventDispatcher = EventDispatcher<\n  Device,\n  WifiEventType,\n  WifiEventMessages\n>;\nexport type SendWifiMessageCallback = SendMessageCallback<WifiMessageType>;\n\nclass WifiManager {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendWifiMessageCallback;\n\n  eventDispatcher!: WifiEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  requestRequiredInformation() {\n    _console.log(\"requesting required wifi information\");\n    const messages = RequiredWifiMessageTypes.map((messageType) => ({\n      type: messageType,\n    }));\n    this.sendMessage(messages, false);\n  }\n\n  // PROPERTIES\n\n  #isWifiAvailable = false;\n  get isWifiAvailable() {\n    return this.#isWifiAvailable;\n  }\n  #updateIsWifiAvailable(updatedIsWifiAvailable: boolean) {\n    _console.assertTypeWithError(updatedIsWifiAvailable, \"boolean\");\n    this.#isWifiAvailable = updatedIsWifiAvailable;\n    _console.log({ isWifiAvailable: this.#isWifiAvailable });\n    this.#dispatchEvent(\"isWifiAvailable\", {\n      isWifiAvailable: this.#isWifiAvailable,\n    });\n  }\n\n  #assertWifiIsAvailable() {\n    _console.assertWithError(this.#isWifiAvailable, \"wifi is not available\");\n  }\n\n  // WIFI SSID\n  #wifiSSID = \"\";\n  get wifiSSID() {\n    return this.#wifiSSID;\n  }\n\n  #updateWifiSSID(updatedWifiSSID: string) {\n    _console.assertTypeWithError(updatedWifiSSID, \"string\");\n    this.#wifiSSID = updatedWifiSSID;\n    _console.log({ wifiSSID: this.#wifiSSID });\n    this.#dispatchEvent(\"getWifiSSID\", { wifiSSID: this.#wifiSSID });\n  }\n  async setWifiSSID(newWifiSSID: string) {\n    this.#assertWifiIsAvailable();\n    if (this.#wifiConnectionEnabled) {\n      _console.error(\"cannot change ssid while wifi connection is enabled\");\n      return;\n    }\n    _console.assertTypeWithError(newWifiSSID, \"string\");\n    _console.assertRangeWithError(\n      \"wifiSSID\",\n      newWifiSSID.length,\n      MinWifiSSIDLength,\n      MaxWifiSSIDLength\n    );\n\n    const setWifiSSIDData = textEncoder.encode(newWifiSSID);\n    _console.log({ setWifiSSIDData });\n\n    const promise = this.waitForEvent(\"getWifiSSID\");\n    this.sendMessage([{ type: \"setWifiSSID\", data: setWifiSSIDData.buffer }]);\n    await promise;\n  }\n\n  // WIFI PASSWORD\n  #wifiPassword = \"\";\n  get wifiPassword() {\n    return this.#wifiPassword;\n  }\n\n  #updateWifiPassword(updatedWifiPassword: string) {\n    _console.assertTypeWithError(updatedWifiPassword, \"string\");\n    this.#wifiPassword = updatedWifiPassword;\n    _console.log({ wifiPassword: this.#wifiPassword });\n    this.#dispatchEvent(\"getWifiPassword\", {\n      wifiPassword: this.#wifiPassword,\n    });\n  }\n  async setWifiPassword(newWifiPassword: string) {\n    this.#assertWifiIsAvailable();\n    if (this.#wifiConnectionEnabled) {\n      _console.error(\"cannot change password while wifi connection is enabled\");\n      return;\n    }\n    _console.assertTypeWithError(newWifiPassword, \"string\");\n    if (newWifiPassword.length > 0) {\n      _console.assertRangeWithError(\n        \"wifiPassword\",\n        newWifiPassword.length,\n        MinWifiPasswordLength,\n        MaxWifiPasswordLength\n      );\n    }\n\n    const setWifiPasswordData = textEncoder.encode(newWifiPassword);\n    _console.log({ setWifiPasswordData });\n\n    const promise = this.waitForEvent(\"getWifiPassword\");\n    this.sendMessage([\n      { type: \"setWifiPassword\", data: setWifiPasswordData.buffer },\n    ]);\n    await promise;\n  }\n\n  // ENABLE WIFI CONNECTION\n  #wifiConnectionEnabled!: boolean;\n  get wifiConnectionEnabled() {\n    return this.#wifiConnectionEnabled;\n  }\n  #updateWifiConnectionEnabled(wifiConnectionEnabled: boolean) {\n    _console.log({ wifiConnectionEnabled });\n    this.#wifiConnectionEnabled = wifiConnectionEnabled;\n    this.#dispatchEvent(\"getWifiConnectionEnabled\", {\n      wifiConnectionEnabled: wifiConnectionEnabled,\n    });\n  }\n  async setWifiConnectionEnabled(\n    newWifiConnectionEnabled: boolean,\n    sendImmediately: boolean = true\n  ) {\n    this.#assertWifiIsAvailable();\n    _console.assertTypeWithError(newWifiConnectionEnabled, \"boolean\");\n    if (this.#wifiConnectionEnabled == newWifiConnectionEnabled) {\n      _console.log(\n        `redundant wifiConnectionEnabled assignment ${newWifiConnectionEnabled}`\n      );\n      return;\n    }\n\n    const promise = this.waitForEvent(\"getWifiConnectionEnabled\");\n\n    this.sendMessage(\n      [\n        {\n          type: \"setWifiConnectionEnabled\",\n\n          data: UInt8ByteBuffer(Number(newWifiConnectionEnabled)),\n        },\n      ],\n      sendImmediately\n    );\n    await promise;\n  }\n  async toggleWifiConnection() {\n    return this.setWifiConnectionEnabled(!this.wifiConnectionEnabled);\n  }\n  async enableWifiConnection() {\n    return this.setWifiConnectionEnabled(true);\n  }\n  async disableWifiConnection() {\n    return this.setWifiConnectionEnabled(false);\n  }\n\n  // IS WIFI CONNECTED\n  #isWifiConnected = false;\n  get isWifiConnected() {\n    return this.#isWifiConnected;\n  }\n  #updateIsWifiConnected(updatedIsWifiConnected: boolean) {\n    _console.assertTypeWithError(updatedIsWifiConnected, \"boolean\");\n    this.#isWifiConnected = updatedIsWifiConnected;\n    _console.log({ isWifiConnected: this.#isWifiConnected });\n    this.#dispatchEvent(\"isWifiConnected\", {\n      isWifiConnected: this.#isWifiConnected,\n    });\n  }\n\n  // IP ADDRESS\n  #ipAddress?: string;\n  get ipAddress() {\n    return this.#ipAddress;\n  }\n\n  #updateIpAddress(updatedIpAddress?: string) {\n    this.#ipAddress = updatedIpAddress;\n    _console.log({ ipAddress: this.#ipAddress });\n    this.#dispatchEvent(\"ipAddress\", {\n      ipAddress: this.#ipAddress,\n    });\n  }\n\n  // IS WIFI SECURE\n  #isWifiSecure = false;\n  get isWifiSecure() {\n    return this.#isWifiSecure;\n  }\n  #updateIsWifiSecure(updatedIsWifiSecure: boolean) {\n    _console.assertTypeWithError(updatedIsWifiSecure, \"boolean\");\n    this.#isWifiSecure = updatedIsWifiSecure;\n    _console.log({ isWifiSecure: this.#isWifiSecure });\n    this.#dispatchEvent(\"isWifiSecure\", {\n      isWifiSecure: this.#isWifiSecure,\n    });\n  }\n\n  // MESSAGE\n  parseMessage(messageType: WifiMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"isWifiAvailable\":\n        const isWifiAvailable = Boolean(dataView.getUint8(0));\n        _console.log({ isWifiAvailable });\n        this.#updateIsWifiAvailable(isWifiAvailable);\n        break;\n      case \"getWifiSSID\":\n      case \"setWifiSSID\":\n        const ssid = textDecoder.decode(dataView.buffer);\n        _console.log({ ssid });\n        this.#updateWifiSSID(ssid);\n        break;\n      case \"getWifiPassword\":\n      case \"setWifiPassword\":\n        const password = textDecoder.decode(dataView.buffer);\n        _console.log({ password });\n        this.#updateWifiPassword(password);\n        break;\n      case \"getWifiConnectionEnabled\":\n      case \"setWifiConnectionEnabled\":\n        const enableWifiConnection = Boolean(dataView.getUint8(0));\n        _console.log({ enableWifiConnection });\n        this.#updateWifiConnectionEnabled(enableWifiConnection);\n        break;\n      case \"isWifiConnected\":\n        const isWifiConnected = Boolean(dataView.getUint8(0));\n        _console.log({ isWifiConnected });\n        this.#updateIsWifiConnected(isWifiConnected);\n        break;\n      case \"ipAddress\":\n        let ipAddress: string | undefined = undefined;\n        if (dataView.byteLength == 4) {\n          ipAddress = new Uint8Array(dataView.buffer.slice(0, 4)).join(\".\");\n        }\n        _console.log({ ipAddress });\n        this.#updateIpAddress(ipAddress);\n        break;\n      case \"isWifiSecure\":\n        const isWifiSecure = Boolean(dataView.getUint8(0));\n        _console.log({ isWifiSecure });\n        this.#updateIsWifiSecure(isWifiSecure);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  clear() {\n    this.#wifiSSID = \"\";\n    this.#wifiPassword = \"\";\n    this.#ipAddress = \"\";\n    this.#isWifiConnected = false;\n    this.#isWifiAvailable = false;\n  }\n}\n\nexport default WifiManager;\n","import { createConsole } from \"./Console.ts\";\nimport { DisplayColorRGB } from \"./DisplayUtils.ts\";\n\nconst _console = createConsole(\"ColorUtils\", { log: false });\n\nexport function hexToRGB(hex: string): DisplayColorRGB {\n  hex = hex.replace(/^#/, \"\");\n\n  if (hex.length == 3) {\n    hex = hex\n      .split(\"\")\n      .map((char) => char + char)\n      .join(\"\");\n  }\n\n  _console.assertWithError(\n    hex.length == 6,\n    `hex length must be 6 (got ${hex.length})`\n  );\n\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n\n  return { r, g, b };\n}\n\nexport const blackColor: DisplayColorRGB = { r: 0, g: 0, b: 0 };\nexport function colorNameToRGB(colorName: string): DisplayColorRGB {\n  const temp = document.createElement(\"div\");\n  temp.style.color = colorName;\n  document.body.appendChild(temp);\n\n  const computedColor = getComputedStyle(temp).color;\n  document.body.removeChild(temp);\n\n  // Match \"rgb(r, g, b)\" or \"rgba(r, g, b, a)\"\n  const match = computedColor.match(/^rgba?\\((\\d+), (\\d+), (\\d+)/);\n  if (!match) return blackColor;\n\n  return {\n    r: parseInt(match[1], 10),\n    g: parseInt(match[2], 10),\n    b: parseInt(match[3], 10),\n  };\n}\n\nexport function stringToRGB(string: string): DisplayColorRGB {\n  if (string.startsWith(\"#\")) {\n    return hexToRGB(string);\n  } else {\n    return colorNameToRGB(string);\n  }\n}\n\nexport function rgbToHex({ r, g, b }: DisplayColorRGB): string {\n  const toHex = (value: number) =>\n    value.toString(16).padStart(2, \"0\").toLowerCase();\n\n  _console.assertWithError(\n    [r, g, b].every((v) => v >= 0 && v <= 255),\n    `RGB values must be between 0 and 255 (got r=${r}, g=${g}, b=${b})`\n  );\n\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\nexport function colorDistanceSq(\n  a: DisplayColorRGB,\n  b: DisplayColorRGB\n): number {\n  return (a.r - b.r) ** 2 + (a.g - b.g) ** 2 + (a.b - b.b) ** 2;\n}\n\nexport interface KMeansOptions {\n  useInputColors?: boolean; // pick nearest input or average\n  maxIterations?: number;\n}\nexport const defaultKMeansOptions: KMeansOptions = {\n  useInputColors: true,\n  maxIterations: 20,\n};\n\nexport interface KMeansResult {\n  palette: string[]; // reduced colors\n  mapping: Record<string, number>; // original -> palette index\n}\n\nexport function kMeansColors(\n  colors: string[],\n  k: number,\n  options?: KMeansOptions\n): KMeansResult {\n  _console.assertTypeWithError(k, \"number\");\n  _console.assertWithError(k > 0, `invalid k ${k}`);\n  options = { ...defaultKMeansOptions, ...options };\n  const maxIter = options.maxIterations!;\n  const useInputColors = options.useInputColors!;\n\n  // cache parsed colors\n  const colorMap = new Map<string, DisplayColorRGB>();\n  for (const c of colors) {\n    if (!colorMap.has(c)) {\n      colorMap.set(c, stringToRGB(c));\n    }\n  }\n\n  const uniqueColors = Array.from(colorMap.values());\n  const uniqueKeys = Array.from(colorMap.keys());\n\n  //_console.log({ uniqueColors, uniqueKeys });\n\n  if (uniqueColors.length <= k) {\n    const mapping: Record<string, number> = {};\n    uniqueKeys.forEach((key, idx) => (mapping[key] = idx));\n    return { palette: uniqueKeys, mapping };\n  }\n\n  // Initialize centroids\n  let centroids: DisplayColorRGB[] = uniqueColors.slice(0, k);\n\n  for (let iter = 0; iter < maxIter; iter++) {\n    const clusters: number[][] = Array.from({ length: k }, () => []);\n    //_console.log({ clusters, k });\n    uniqueColors.forEach((p, idx) => {\n      let best = 0;\n      let bestDist = Infinity;\n      centroids.forEach((c, ci) => {\n        const d = colorDistanceSq(p, c);\n        if (d < bestDist) {\n          bestDist = d;\n          best = ci;\n        }\n      });\n      clusters[best].push(idx);\n    });\n\n    centroids = clusters.map((cluster) => {\n      if (cluster.length === 0) return { ...blackColor };\n      if (useInputColors) {\n        let bestIdx = cluster[0];\n        let bestDist = Infinity;\n        cluster.forEach((idx) => {\n          const d = colorDistanceSq(uniqueColors[idx], centroids[0]);\n          if (d < bestDist) {\n            bestDist = d;\n            bestIdx = idx;\n          }\n        });\n        return uniqueColors[bestIdx];\n      } else {\n        const sum = cluster.reduce(\n          (acc, idx) => {\n            const p = uniqueColors[idx];\n            return {\n              r: acc.r + p.r,\n              g: acc.g + p.g,\n              b: acc.b + p.b,\n            } as DisplayColorRGB;\n          },\n          { ...blackColor }\n        );\n        return {\n          r: sum.r / cluster.length,\n          g: sum.g / cluster.length,\n          b: sum.b / cluster.length,\n        };\n      }\n    });\n  }\n\n  const palette = centroids.map((c) => rgbToHex(c));\n\n  // Build mapping: original color -> palette index\n  const mapping: Record<string, number> = {};\n  for (const [orig, DisplayColorRGB] of colorMap.entries()) {\n    let bestIdx = 0;\n    let bestDist = Infinity;\n    centroids.forEach((c, ci) => {\n      const d = colorDistanceSq(c, DisplayColorRGB);\n      if (d < bestDist) {\n        bestDist = d;\n        bestIdx = ci;\n      }\n    });\n    mapping[orig] = bestIdx;\n  }\n\n  return { palette, mapping };\n}\n\nexport function mapToClosestPaletteIndex(\n  colors: string[],\n  palette: string[]\n): Record<string, number> {\n  const paletteRGB: DisplayColorRGB[] = palette.map(stringToRGB);\n  const mapping: Record<string, number> = {};\n\n  for (const color of colors) {\n    const rgb = stringToRGB(color);\n    let bestIdx = 0;\n    let bestDist = Infinity;\n\n    paletteRGB.forEach((p, idx) => {\n      const d = colorDistanceSq(rgb, p);\n      if (d < bestDist) {\n        bestDist = d;\n        bestIdx = idx;\n      }\n    });\n\n    mapping[color] = bestIdx;\n  }\n\n  return mapping;\n}\n","export const DisplaySegmentCaps = [\"flat\", \"round\"] as const;\nexport type DisplaySegmentCap = (typeof DisplaySegmentCaps)[number];\n\nexport const DisplayAlignments = [\"start\", \"center\", \"end\"] as const;\nexport type DisplayAlignment = (typeof DisplayAlignments)[number];\n\nexport const DisplayAlignmentDirections = [\"horizontal\", \"vertical\"] as const;\nexport type DisplayAlignmentDirection =\n  (typeof DisplayAlignmentDirections)[number];\n\nexport const DisplayDirections = [\"right\", \"left\", \"up\", \"down\"] as const;\nexport type DisplayDirection = (typeof DisplayDirections)[number];\n\nexport type DisplayContextState = {\n  backgroundColorIndex: number;\n  fillColorIndex: number;\n  lineColorIndex: number;\n\n  ignoreFill: boolean;\n  ignoreLine: boolean;\n  fillBackground: boolean;\n\n  lineWidth: number;\n  rotation: number;\n\n  horizontalAlignment: DisplayAlignment;\n  verticalAlignment: DisplayAlignment;\n\n  segmentStartCap: DisplaySegmentCap;\n  segmentEndCap: DisplaySegmentCap;\n\n  segmentStartRadius: number;\n  segmentEndRadius: number;\n\n  cropTop: number;\n  cropRight: number;\n  cropBottom: number;\n  cropLeft: number;\n\n  rotationCropTop: number;\n  rotationCropRight: number;\n  rotationCropBottom: number;\n  rotationCropLeft: number;\n\n  bitmapColorIndices: number[];\n  bitmapScaleX: number;\n  bitmapScaleY: number;\n\n  spriteColorIndices: number[];\n  spriteScaleX: number;\n  spriteScaleY: number;\n\n  spriteSheetName?: string;\n\n  spritesLineHeight: number;\n  spritesDirection: DisplayDirection;\n  spritesLineDirection: DisplayDirection;\n  spritesSpacing: number;\n  spritesLineSpacing: number;\n  spritesAlignment: DisplayAlignment;\n  spritesLineAlignment: DisplayAlignment;\n};\nexport type DisplayContextStateKey = keyof DisplayContextState;\nexport type PartialDisplayContextState = Partial<DisplayContextState>;\n\nexport const DefaultDisplayContextState: DisplayContextState = {\n  backgroundColorIndex: 0,\n  fillColorIndex: 1,\n  lineColorIndex: 1,\n\n  ignoreFill: false,\n  ignoreLine: false,\n  fillBackground: false,\n\n  lineWidth: 0,\n  rotation: 0,\n\n  horizontalAlignment: \"center\",\n  verticalAlignment: \"center\",\n\n  segmentStartCap: \"flat\",\n  segmentEndCap: \"flat\",\n\n  segmentStartRadius: 1,\n  segmentEndRadius: 1,\n\n  cropTop: 0,\n  cropRight: 0,\n  cropBottom: 0,\n  cropLeft: 0,\n\n  rotationCropTop: 0,\n  rotationCropRight: 0,\n  rotationCropBottom: 0,\n  rotationCropLeft: 0,\n\n  bitmapColorIndices: new Array(0).fill(0),\n  bitmapScaleX: 1,\n  bitmapScaleY: 1,\n\n  spriteColorIndices: new Array(0).fill(0),\n  spriteScaleX: 1,\n  spriteScaleY: 1,\n\n  spriteSheetName: undefined,\n\n  spritesLineHeight: 0,\n\n  spritesDirection: \"right\",\n  spritesLineDirection: \"down\",\n\n  spritesSpacing: 0,\n  spritesLineSpacing: 0,\n\n  spritesAlignment: \"end\",\n  spritesLineAlignment: \"start\",\n};\n\nexport function isDirectionPositive(direction: DisplayDirection) {\n  switch (direction) {\n    case \"right\":\n    case \"down\":\n      return true;\n    case \"left\":\n    case \"up\":\n      return false;\n  }\n}\nexport function isDirectionHorizontal(direction: DisplayDirection) {\n  switch (direction) {\n    case \"right\":\n    case \"left\":\n      return true;\n    case \"down\":\n    case \"up\":\n      return false;\n  }\n}\n","export function deepEqual(obj1: any, obj2: any): boolean {\n  if (obj1 === obj2) {\n    return true;\n  }\n\n  if (\n    typeof obj1 !== \"object\" ||\n    obj1 === null ||\n    typeof obj2 !== \"object\" ||\n    obj2 === null\n  ) {\n    return false;\n  }\n\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n\n  if (keys1.length !== keys2.length) return false;\n\n  for (let key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function removeRedundancies(array: any[]) {\n  return Array.from(new Set(array));\n}\n","import { createConsole } from \"./Console.ts\";\nimport {\n  DefaultDisplayContextState,\n  DisplayContextState,\n  DisplayContextStateKey,\n  PartialDisplayContextState,\n} from \"./DisplayContextState.ts\";\nimport { deepEqual } from \"./ObjectUtils.ts\";\n\nconst _console = createConsole(\"DisplayContextStateHelper\", { log: false });\n\nclass DisplayContextStateHelper {\n  #state: DisplayContextState = Object.assign({}, DefaultDisplayContextState);\n  get state() {\n    return this.#state;\n  }\n\n  get isSegmentUniform() {\n    return (\n      this.state.segmentStartRadius == this.state.segmentEndRadius &&\n      this.state.segmentStartCap == this.state.segmentEndCap\n    );\n  }\n\n  diff(other: PartialDisplayContextState) {\n    let differences: DisplayContextStateKey[] = [];\n    const keys = Object.keys(other) as DisplayContextStateKey[];\n    keys.forEach((key) => {\n      const value = other[key]!;\n\n      if (!deepEqual(this.#state[key], value)) {\n        differences.push(key);\n      }\n    });\n    _console.log(\"diff\", other, differences);\n    return differences;\n  }\n  update(newState: PartialDisplayContextState) {\n    let differences = this.diff(newState);\n    if (differences.length == 0) {\n      _console.log(\"redundant contextState\", newState);\n    }\n    differences.forEach((key) => {\n      const value = newState[key]!;\n      // @ts-expect-error\n      this.#state[key] = value;\n    });\n    return differences;\n  }\n  reset() {\n    Object.assign(this.#state, DefaultDisplayContextState);\n  }\n}\n\nexport default DisplayContextStateHelper;\n","import {\n  DisplayBezierCurve,\n  DisplayBezierCurveType,\n  DisplayBrightness,\n  DisplayBrightnesses,\n  DisplayPixelDepth,\n  DisplayPixelDepths,\n  DisplayPointDataType,\n  DisplayPointDataTypes,\n  displayPointDataTypeToRange,\n  displayPointDataTypeToSize,\n  DisplayWireframe,\n  DisplayWireframeEdge,\n} from \"../DisplayManager.ts\";\nimport { createConsole } from \"./Console.ts\";\nimport { DisplayContextCommandType } from \"./DisplayContextCommand.ts\";\nimport {\n  DisplayAlignment,\n  DisplayAlignmentDirection,\n  DisplayAlignmentDirections,\n  DisplayAlignments,\n  DisplayContextStateKey,\n  DisplayDirection,\n  DisplayDirections,\n  DisplaySegmentCap,\n  DisplaySegmentCaps,\n} from \"./DisplayContextState.ts\";\nimport {\n  getVector2Distance,\n  Int16Max,\n  Uint16Max,\n  Vector2,\n} from \"./MathUtils.ts\";\nimport RangeHelper from \"./RangeHelper.ts\";\n\nconst _console = createConsole(\"DisplayUtils\", { log: false });\n\nexport function formatRotation(\n  rotation: number,\n  isRadians?: boolean,\n  isSigned?: boolean\n) {\n  if (isRadians) {\n    const rotationRad = rotation;\n    _console.log({ rotationRad });\n    rotation %= 2 * Math.PI;\n    rotation /= 2 * Math.PI;\n  } else {\n    const rotationDeg = rotation;\n    _console.log({ rotationDeg });\n    rotation %= 360;\n    rotation /= 360;\n  }\n  if (isSigned) {\n    rotation *= Int16Max;\n  } else {\n    rotation *= Uint16Max;\n  }\n  rotation = Math.floor(rotation);\n  _console.log({ formattedRotation: rotation });\n  return rotation;\n}\n\nexport function roundToStep(value: number, step: number) {\n  const roundedValue = Math.round(value / step) * step;\n  //_console.log(value, step, roundedValue);\n  return roundedValue;\n}\n\nexport const minDisplayScale = -50;\nexport const maxDisplayScale = 50;\nexport const displayScaleStep = 0.002;\nexport function formatScale(bitmapScale: number) {\n  bitmapScale /= displayScaleStep;\n  //_console.log({ formattedBitmapScale: bitmapScale });\n  return bitmapScale;\n}\nexport function roundScale(bitmapScale: number) {\n  return roundToStep(bitmapScale, displayScaleStep);\n}\n\nexport function assertValidSegmentCap(segmentCap: DisplaySegmentCap) {\n  _console.assertEnumWithError(segmentCap, DisplaySegmentCaps);\n}\n\nexport function assertValidDisplayBrightness(\n  displayBrightness: DisplayBrightness\n) {\n  _console.assertEnumWithError(displayBrightness, DisplayBrightnesses);\n}\n\nexport function assertValidColorValue(name: string, value: number) {\n  _console.assertRangeWithError(name, value, 0, 255);\n}\nexport function assertValidColor(color: DisplayColorRGB) {\n  assertValidColorValue(\"red\", color.r);\n  assertValidColorValue(\"green\", color.g);\n  assertValidColorValue(\"blue\", color.b);\n}\n\nexport function assertValidOpacity(value: number) {\n  _console.assertRangeWithError(\"opacity\", value, 0, 1);\n}\n\nexport const DisplayCropDirections = [\n  \"top\",\n  \"right\",\n  \"bottom\",\n  \"left\",\n] as const;\nexport type DisplayCropDirection = (typeof DisplayCropDirections)[number];\n\nexport const DisplayContextCropStateKeys = [\n  \"cropTop\",\n  \"cropRight\",\n  \"cropBottom\",\n  \"cropLeft\",\n] as const satisfies readonly DisplayContextStateKey[];\nexport type DisplayContextCropStateKey =\n  (typeof DisplayContextCropStateKeys)[number];\n\nexport const DisplayCropDirectionToStateKey: Record<\n  DisplayCropDirection,\n  DisplayContextCropStateKey\n> = {\n  top: \"cropTop\",\n  right: \"cropRight\",\n  bottom: \"cropBottom\",\n  left: \"cropLeft\",\n};\n\nexport const DisplayContextCropCommandTypes = [\n  \"setCropTop\",\n  \"setCropRight\",\n  \"setCropBottom\",\n  \"setCropLeft\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type DisplayContextCropCommandType =\n  (typeof DisplayContextCropCommandTypes)[number];\n\nexport const DisplayCropDirectionToCommandType: Record<\n  DisplayCropDirection,\n  DisplayContextCropCommandType\n> = {\n  top: \"setCropTop\",\n  right: \"setCropRight\",\n  bottom: \"setCropBottom\",\n  left: \"setCropLeft\",\n};\n\nexport const DisplayContextRotationCropStateKeys = [\n  \"rotationCropTop\",\n  \"rotationCropRight\",\n  \"rotationCropBottom\",\n  \"rotationCropLeft\",\n] as const satisfies readonly DisplayContextStateKey[];\nexport type DisplayContextRotationCropStateKey =\n  (typeof DisplayContextRotationCropStateKeys)[number];\n\nexport const DisplayRotationCropDirectionToStateKey: Record<\n  DisplayCropDirection,\n  DisplayContextRotationCropStateKey\n> = {\n  top: \"rotationCropTop\",\n  right: \"rotationCropRight\",\n  bottom: \"rotationCropBottom\",\n  left: \"rotationCropLeft\",\n};\n\nexport const DisplayContextRotationCropCommandTypes = [\n  \"setRotationCropTop\",\n  \"setRotationCropRight\",\n  \"setRotationCropBottom\",\n  \"setRotationCropLeft\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type DisplayContextRotationCropCommandType =\n  (typeof DisplayContextRotationCropCommandTypes)[number];\n\nexport const DisplayRotationCropDirectionToCommandType: Record<\n  DisplayCropDirection,\n  DisplayContextRotationCropCommandType\n> = {\n  top: \"setRotationCropTop\",\n  right: \"setRotationCropRight\",\n  bottom: \"setRotationCropBottom\",\n  left: \"setRotationCropLeft\",\n};\n\nexport const DisplayContextAlignmentCommandTypes = [\n  \"setVerticalAlignment\",\n  \"setHorizontalAlignment\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type DisplayContextAlignmentCommandType =\n  (typeof DisplayContextAlignmentCommandTypes)[number];\nexport const DisplayAlignmentDirectionToCommandType: Record<\n  DisplayAlignmentDirection,\n  DisplayContextAlignmentCommandType\n> = {\n  horizontal: \"setHorizontalAlignment\",\n  vertical: \"setVerticalAlignment\",\n};\n\nexport const DisplayContextAlignmentStateKeys = [\n  \"verticalAlignment\",\n  \"horizontalAlignment\",\n] as const satisfies readonly DisplayContextStateKey[];\nexport type DisplayContextAlignmentStateKey =\n  (typeof DisplayContextAlignmentStateKeys)[number];\n\nexport const DisplayAlignmentDirectionToStateKey: Record<\n  DisplayAlignmentDirection,\n  DisplayContextAlignmentStateKey\n> = {\n  horizontal: \"horizontalAlignment\",\n  vertical: \"verticalAlignment\",\n};\n\nexport function pixelDepthToNumberOfColors(pixelDepth: DisplayPixelDepth) {\n  return 2 ** Number(pixelDepth);\n}\nexport function pixelDepthToPixelsPerByte(pixelDepth: DisplayPixelDepth) {\n  return 8 / Number(pixelDepth);\n}\nexport function pixelDepthToPixelBitWidth(pixelDepth: DisplayPixelDepth) {\n  return Number(pixelDepth);\n}\nexport function numberOfColorsToPixelDepth(numberOfColors: number) {\n  return DisplayPixelDepths.find(\n    (pixelDepth) => numberOfColors <= pixelDepthToNumberOfColors(pixelDepth)\n  );\n}\n\nexport const DisplayScaleDirections = [\"x\", \"y\", \"all\"] as const;\nexport type DisplayScaleDirection = (typeof DisplayScaleDirections)[number];\n\nexport const DisplayBitmapScaleDirectionToCommandType: Record<\n  DisplayScaleDirection,\n  DisplayContextCommandType\n> = {\n  x: \"setBitmapScaleX\",\n  y: \"setBitmapScaleY\",\n  all: \"setBitmapScale\",\n};\n\nexport const DisplaySpriteScaleDirectionToCommandType: Record<\n  DisplayScaleDirection,\n  DisplayContextCommandType\n> = {\n  x: \"setSpriteScaleX\",\n  y: \"setSpriteScaleY\",\n  all: \"setSpriteScale\",\n};\n\nexport type DisplayColorRGB = {\n  r: number;\n  g: number;\n  b: number;\n};\nexport type DisplayColorYCbCr = {\n  y: number;\n  cb: number;\n  cr: number;\n};\n\nexport function assertValidAlignment(alignment: DisplayAlignment) {\n  _console.assertEnumWithError(alignment, DisplayAlignments);\n}\n\nexport function assertValidDirection(direction: DisplayDirection) {\n  _console.assertEnumWithError(direction, DisplayDirections);\n}\n\nexport function assertValidAlignmentDirection(\n  direction: DisplayAlignmentDirection\n) {\n  _console.assertEnumWithError(direction, DisplayAlignmentDirections);\n}\n\nexport const displayCurveTypeToNumberOfControlPoints: Record<\n  DisplayBezierCurveType,\n  number\n> = {\n  segment: 2,\n  quadratic: 3,\n  cubic: 4,\n};\nexport const displayCurveTolerance = 2.0;\nexport const displayCurveToleranceSquared = displayCurveTolerance ** 2;\n\nexport const maxNumberOfDisplayCurvePoints = 150;\nexport function assertValidNumberOfControlPoints(\n  curveType: DisplayBezierCurveType,\n  controlPoints: Vector2[],\n  isPath = false\n) {\n  let numberOfControlPoints =\n    displayCurveTypeToNumberOfControlPoints[curveType];\n  if (isPath) {\n    numberOfControlPoints -= 1;\n  }\n  _console.assertWithError(\n    controlPoints.length == numberOfControlPoints,\n    `invalid number of control points ${controlPoints.length}, expected ${numberOfControlPoints}`\n  );\n}\nexport function assertValidPathNumberOfControlPoints(\n  curveType: DisplayBezierCurveType,\n  controlPoints: Vector2[]\n) {\n  const numberOfControlPoints =\n    displayCurveTypeToNumberOfControlPoints[curveType];\n  _console.assertWithError(\n    (controlPoints.length - 1) % (numberOfControlPoints - 1) == 0,\n    `invalid number of path control points ${controlPoints.length} for path \"${curveType}\"`\n  );\n}\n\nexport function assertValidPath(curves: DisplayBezierCurve[]) {\n  curves.forEach((curve, index) => {\n    const { type, controlPoints } = curve;\n    assertValidNumberOfControlPoints(type, controlPoints, index > 0);\n  });\n}\n\nexport function assertValidWireframe({ points, edges }: DisplayWireframe) {\n  _console.assertRangeWithError(\"numberOfPoints\", points.length, 2, 255);\n  _console.assertRangeWithError(\"numberOfEdges\", edges.length, 1, 255);\n\n  edges.forEach((edge, index) => {\n    _console.assertRangeWithError(\n      `edgeStartIndex.${index}`,\n      edge.startIndex,\n      0,\n      points.length\n    );\n    _console.assertRangeWithError(\n      `edgeEndIndex.${index}`,\n      edge.endIndex,\n      0,\n      points.length\n    );\n  });\n}\nexport function isWireframePolygon({\n  points,\n  edges,\n}: DisplayWireframe): Vector2[] | undefined {\n  _console.log(\"isWireframePolygon?\", points, edges);\n  if (points.length != edges.length) {\n    return;\n  }\n  const _edges = edges.slice();\n  let pointIndices: number[] = [];\n  for (let i = 0; i < points.length; i++) {\n    if (i == 0) {\n      const { startIndex, endIndex } = _edges.shift()!;\n      pointIndices.push(startIndex);\n      pointIndices.push(endIndex);\n    } else {\n      const startIndex = pointIndices.at(-1);\n      const edge = _edges.find(\n        (edge) => edge.startIndex == startIndex || edge.endIndex == startIndex\n      );\n      _console.log(i, \"edge\", edge);\n      if (edge) {\n        _edges.splice(_edges.indexOf(edge), 1);\n        const endIndex =\n          edge.startIndex == startIndex ? edge.endIndex : edge.startIndex;\n        if (i == points.length - 1) {\n          if (endIndex != pointIndices[0]) {\n            return;\n          }\n        } else if (pointIndices.includes(endIndex)) {\n          _console.log(\"duplicate endIndex\", endIndex);\n          return;\n        }\n        pointIndices.push(endIndex);\n      } else {\n        _console.log(\"no edge found\");\n        return;\n      }\n    }\n    _console.log(\"remaining edges\", _edges);\n  }\n  _console.log(\"pointIndices\", pointIndices);\n  const polygon = pointIndices\n    .map((pointIndex) => points[pointIndex])\n    .filter((point, index, polygon) => polygon.indexOf(point) == index);\n\n  if (polygon.length == points.length) {\n    polygon.push(polygon[0]);\n    _console.log(\"polygon\", polygon);\n    return polygon;\n  }\n}\n\nexport function mergeWireframes(a: DisplayWireframe, b: DisplayWireframe) {\n  const wireframe: DisplayWireframe = structuredClone(a);\n  const pointIndexOffset = a.points.length;\n  b.points.forEach((point) => {\n    wireframe.points.push(point);\n  });\n  b.edges.forEach(({ startIndex, endIndex }) => {\n    wireframe.edges.push({\n      startIndex: startIndex + pointIndexOffset,\n      endIndex: endIndex + pointIndexOffset,\n    });\n  });\n  return trimWireframe(wireframe);\n}\n\nexport function intersectWireframes(\n  a: DisplayWireframe,\n  b: DisplayWireframe,\n  ignoreDirection = true\n) {\n  a = trimWireframe(a);\n  b = trimWireframe(b);\n  //_console.log(\"intersectWireframes\", a, b);\n  const wireframe: DisplayWireframe = { points: [], edges: [] };\n  const pointIndices: { a: number; b: number }[] = [];\n  const aPointIndices: number[] = [];\n  const bPointIndices: number[] = [];\n  a.points.forEach((point, aPointIndex) => {\n    const bPointIndex = b.points.findIndex((_point) => {\n      const distance = getVector2Distance(point, _point);\n      return distance == 0;\n    });\n    if (bPointIndex != -1) {\n      pointIndices.push({ a: aPointIndex, b: bPointIndex });\n      aPointIndices.push(aPointIndex);\n      bPointIndices.push(bPointIndex);\n      wireframe.points.push(structuredClone(point));\n    }\n  });\n  a.edges.forEach((aEdge) => {\n    if (\n      !aPointIndices.includes(aEdge.startIndex) ||\n      !aPointIndices.includes(aEdge.endIndex)\n    ) {\n      return;\n    }\n    const startIndex = aPointIndices.indexOf(aEdge.startIndex);\n    const endIndex = aPointIndices.indexOf(aEdge.endIndex);\n\n    const bEdge = b.edges.find((bEdge) => {\n      if (\n        !bPointIndices.includes(bEdge.startIndex) ||\n        !bPointIndices.includes(bEdge.endIndex)\n      ) {\n        return false;\n      }\n      const bStartIndex = bPointIndices.indexOf(bEdge.startIndex);\n      const bEndIndex = bPointIndices.indexOf(bEdge.endIndex);\n      if (ignoreDirection) {\n        return (\n          (startIndex == bStartIndex && endIndex == bEndIndex) ||\n          (startIndex == bEndIndex && endIndex == bStartIndex)\n        );\n      } else {\n        return startIndex == bStartIndex && endIndex == bEndIndex;\n      }\n    });\n\n    if (!bEdge) {\n      return;\n    }\n\n    wireframe.edges.push({\n      startIndex,\n      endIndex,\n    });\n  });\n  //_console.log(\"intersectedWireframe\", wireframe);\n  return wireframe;\n}\n\nexport function trimWireframe(wireframe: DisplayWireframe): DisplayWireframe {\n  _console.log(\"trimming wireframe\", wireframe);\n  const { points, edges } = wireframe;\n  const trimmedPoints: Vector2[] = [];\n  const trimmedEdges: DisplayWireframeEdge[] = [];\n  edges.forEach((edge) => {\n    const { startIndex, endIndex } = edge;\n    let startPoint = points[startIndex];\n    let endPoint = points[endIndex];\n\n    let trimmedStartIndex = trimmedPoints.findIndex(\n      ({ x, y }) => startPoint.x == x && startPoint.y == y\n    );\n    if (trimmedStartIndex == -1) {\n      //_console.log(\"adding startPoint\", startPoint);\n      trimmedPoints.push(startPoint);\n      trimmedStartIndex = trimmedPoints.length - 1;\n    }\n\n    let trimmedEndIndex = trimmedPoints.findIndex(\n      ({ x, y }) => endPoint.x == x && endPoint.y == y\n    );\n    if (trimmedEndIndex == -1) {\n      //_console.log(\"adding endPoint\", endPoint);\n      trimmedPoints.push(endPoint);\n      trimmedEndIndex = trimmedPoints.length - 1;\n    }\n\n    const trimmedEdge: DisplayWireframeEdge = {\n      startIndex: trimmedStartIndex,\n      endIndex: trimmedEndIndex,\n    };\n    let trimmedEdgeIndex = trimmedEdges.findIndex(\n      ({ startIndex, endIndex }) =>\n        startIndex == trimmedEdge.startIndex && endIndex == trimmedEdge.endIndex\n    );\n    if (trimmedEdgeIndex == -1) {\n      //_console.log(\"adding edge\", trimmedEdge);\n      trimmedEdges.push(trimmedEdge);\n      trimmedEdgeIndex = trimmedEdges.length - 1;\n    }\n  });\n  _console.log(\"trimmedWireframe\", trimmedPoints, trimmedEdges);\n  return { points: trimmedPoints, edges: trimmedEdges };\n}\n\nexport function getPointDataType(points: Vector2[]): DisplayPointDataType {\n  const range = new RangeHelper();\n  points.forEach(({ x, y }) => {\n    range.update(x);\n    range.update(y);\n  });\n  const pointDataType = DisplayPointDataTypes.find((pointDataType) => {\n    const { min, max } = displayPointDataTypeToRange[pointDataType];\n    return range.min >= min && range.max <= max;\n  })!;\n  _console.log(\"pointDataType\", pointDataType, points);\n  return pointDataType!;\n}\nexport function serializePoints(\n  points: Vector2[],\n  pointDataType?: DisplayPointDataType,\n  isPath = false\n) {\n  pointDataType = pointDataType || getPointDataType(points);\n  _console.assertEnumWithError(pointDataType, DisplayPointDataTypes);\n  const pointDataSize = displayPointDataTypeToSize[pointDataType];\n  let dataViewLength = points.length * pointDataSize;\n  if (!isPath) {\n    dataViewLength += 2; // pointDataType + points.length\n  }\n  const dataView = new DataView(new ArrayBuffer(dataViewLength));\n  _console.log(\n    `serializing ${points.length} ${pointDataType} points (${dataView.byteLength} bytes)...`\n  );\n  let offset = 0;\n  if (!isPath) {\n    dataView.setUint8(offset++, DisplayPointDataTypes.indexOf(pointDataType));\n    dataView.setUint8(offset++, points.length);\n  }\n  points.forEach(({ x, y }) => {\n    switch (pointDataType) {\n      case \"int8\":\n        dataView.setInt8(offset, x);\n        offset += 1;\n        dataView.setInt8(offset, y);\n        offset += 1;\n        break;\n      case \"int16\":\n        dataView.setInt16(offset, x, true);\n        offset += 2;\n        dataView.setInt16(offset, y, true);\n        offset += 2;\n        break;\n      case \"float\":\n        dataView.setFloat32(offset, x, true);\n        offset += 4;\n        dataView.setFloat32(offset, y, true);\n        offset += 4;\n        break;\n    }\n  });\n  return dataView;\n}\n","/*\n* Copyright (c) 2015, Leon Sorokin\n* All rights reserved. (MIT Licensed)\n*\n* RgbQuant.js - an image quantization lib\n*/\n\n(function(){\n\tfunction RgbQuant(opts) {\n\t\topts = opts || {};\n\n\t\t// 1 = by global population, 2 = subregion population threshold\n\t\tthis.method = opts.method || 2;\n\t\t// desired final palette size\n\t\tthis.colors = opts.colors || 256;\n\t\t// # of highest-frequency colors to start with for palette reduction\n\t\tthis.initColors = opts.initColors || 4096;\n\t\t// color-distance threshold for initial reduction pass\n\t\tthis.initDist = opts.initDist || 0.01;\n\t\t// subsequent passes threshold\n\t\tthis.distIncr = opts.distIncr || 0.005;\n\t\t// palette grouping\n\t\tthis.hueGroups = opts.hueGroups || 10;\n\t\tthis.satGroups = opts.satGroups || 10;\n\t\tthis.lumGroups = opts.lumGroups || 10;\n\t\t// if > 0, enables hues stats and min-color retention per group\n\t\tthis.minHueCols = opts.minHueCols || 0;\n\t\t// HueStats instance\n\t\tthis.hueStats = this.minHueCols ? new HueStats(this.hueGroups, this.minHueCols) : null;\n\n\t\t// subregion partitioning box size\n\t\tthis.boxSize = opts.boxSize || [64,64];\n\t\t// number of same pixels required within box for histogram inclusion\n\t\tthis.boxPxls = opts.boxPxls || 2;\n\t\t// palette locked indicator\n\t\tthis.palLocked = false;\n\t\t// palette sort order\n//\t\tthis.sortPal = ['hue-','lum-','sat-'];\n\n\t\t// dithering/error diffusion kernel name\n\t\tthis.dithKern = opts.dithKern || null;\n\t\t// dither serpentine pattern\n\t\tthis.dithSerp = opts.dithSerp || false;\n\t\t// minimum color difference (0-1) needed to dither\n\t\tthis.dithDelta = opts.dithDelta || 0;\n\n\t\t// accumulated histogram\n\t\tthis.histogram = {};\n\t\t// palette - rgb triplets\n\t\tthis.idxrgb = opts.palette ? opts.palette.slice(0) : [];\n\t\t// palette - int32 vals\n\t\tthis.idxi32 = [];\n\t\t// reverse lookup {i32:idx}\n\t\tthis.i32idx = {};\n\t\t// {i32:rgb}\n\t\tthis.i32rgb = {};\n\t\t// enable color caching (also incurs overhead of cache misses and cache building)\n\t\tthis.useCache = opts.useCache !== false;\n\t\t// min color occurance count needed to qualify for caching\n\t\tthis.cacheFreq = opts.cacheFreq || 10;\n\t\t// allows pre-defined palettes to be re-indexed (enabling palette compacting and sorting)\n\t\tthis.reIndex = opts.reIndex || this.idxrgb.length == 0;\n\t\t// selection of color-distance equation\n\t\tthis.colorDist = opts.colorDist == \"manhattan\" ? distManhattan : distEuclidean;\n\n\t\t// if pre-defined palette, build lookups\n\t\tif (this.idxrgb.length > 0) {\n\t\t\tvar self = this;\n\t\t\tthis.idxrgb.forEach(function(rgb, i) {\n\t\t\t\tvar i32 = (\n\t\t\t\t\t(255    << 24) |\t// alpha\n\t\t\t\t\t(rgb[2] << 16) |\t// blue\n\t\t\t\t\t(rgb[1] <<  8) |\t// green\n\t\t\t\t\t rgb[0]\t\t\t\t// red\n\t\t\t\t) >>> 0;\n\n\t\t\t\tself.idxi32[i]\t\t= i32;\n\t\t\t\tself.i32idx[i32]\t= i;\n\t\t\t\tself.i32rgb[i32]\t= rgb;\n\t\t\t});\n\t\t}\n\t}\n\n\t// gathers histogram info\n\tRgbQuant.prototype.sample = function sample(img, width) {\n\t\tif (this.palLocked)\n\t\t\tthrow \"Cannot sample additional images, palette already assembled.\";\n\n\t\tvar data = getImageData(img, width);\n\n\t\tswitch (this.method) {\n\t\t\tcase 1: this.colorStats1D(data.buf32); break;\n\t\t\tcase 2: this.colorStats2D(data.buf32, data.width); break;\n\t\t}\n\t};\n\n\t// image quantizer\n\t// todo: memoize colors here also\n\t// @retType: 1 - Uint8Array (default), 2 - Indexed array, 3 - Match @img type (unimplemented, todo)\n\tRgbQuant.prototype.reduce = function reduce(img, retType, dithKern, dithSerp) {\n\t\tif (!this.palLocked)\n\t\t\tthis.buildPal();\n\n\t\tdithKern = dithKern || this.dithKern;\n\t\tdithSerp = typeof dithSerp != \"undefined\" ? dithSerp : this.dithSerp;\n\n\t\tretType = retType || 1;\n\n\t\t// reduce w/dither\n\t\tif (dithKern)\n\t\t\tvar out32 = this.dither(img, dithKern, dithSerp);\n\t\telse {\n\t\t\tvar data = getImageData(img),\n\t\t\t\tbuf32 = data.buf32,\n\t\t\t\tlen = buf32.length,\n\t\t\t\tout32 = new Uint32Array(len);\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tvar i32 = buf32[i];\n\t\t\t\tout32[i] = this.nearestColor(i32);\n\t\t\t}\n\t\t}\n\n\t\tif (retType == 1)\n\t\t\treturn new Uint8Array(out32.buffer);\n\n\t\tif (retType == 2) {\n\t\t\tvar out = [],\n\t\t\t\tlen = out32.length;\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tvar i32 = out32[i];\n\t\t\t\tout[i] = this.i32idx[i32];\n\t\t\t}\n\n\t\t\treturn out;\n\t\t}\n\t};\n\n\t// adapted from http://jsbin.com/iXofIji/2/edit by PAEz\n\tRgbQuant.prototype.dither = function(img, kernel, serpentine) {\n\t\t// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/\n\t\tvar kernels = {\n\t\t\tFloydSteinberg: [\n\t\t\t\t[7 / 16, 1, 0],\n\t\t\t\t[3 / 16, -1, 1],\n\t\t\t\t[5 / 16, 0, 1],\n\t\t\t\t[1 / 16, 1, 1]\n\t\t\t],\n\t\t\tFalseFloydSteinberg: [\n\t\t\t\t[3 / 8, 1, 0],\n\t\t\t\t[3 / 8, 0, 1],\n\t\t\t\t[2 / 8, 1, 1]\n\t\t\t],\n\t\t\tStucki: [\n\t\t\t\t[8 / 42, 1, 0],\n\t\t\t\t[4 / 42, 2, 0],\n\t\t\t\t[2 / 42, -2, 1],\n\t\t\t\t[4 / 42, -1, 1],\n\t\t\t\t[8 / 42, 0, 1],\n\t\t\t\t[4 / 42, 1, 1],\n\t\t\t\t[2 / 42, 2, 1],\n\t\t\t\t[1 / 42, -2, 2],\n\t\t\t\t[2 / 42, -1, 2],\n\t\t\t\t[4 / 42, 0, 2],\n\t\t\t\t[2 / 42, 1, 2],\n\t\t\t\t[1 / 42, 2, 2]\n\t\t\t],\n\t\t\tAtkinson: [\n\t\t\t\t[1 / 8, 1, 0],\n\t\t\t\t[1 / 8, 2, 0],\n\t\t\t\t[1 / 8, -1, 1],\n\t\t\t\t[1 / 8, 0, 1],\n\t\t\t\t[1 / 8, 1, 1],\n\t\t\t\t[1 / 8, 0, 2]\n\t\t\t],\n\t\t\tJarvis: [\t\t\t// Jarvis, Judice, and Ninke / JJN?\n\t\t\t\t[7 / 48, 1, 0],\n\t\t\t\t[5 / 48, 2, 0],\n\t\t\t\t[3 / 48, -2, 1],\n\t\t\t\t[5 / 48, -1, 1],\n\t\t\t\t[7 / 48, 0, 1],\n\t\t\t\t[5 / 48, 1, 1],\n\t\t\t\t[3 / 48, 2, 1],\n\t\t\t\t[1 / 48, -2, 2],\n\t\t\t\t[3 / 48, -1, 2],\n\t\t\t\t[5 / 48, 0, 2],\n\t\t\t\t[3 / 48, 1, 2],\n\t\t\t\t[1 / 48, 2, 2]\n\t\t\t],\n\t\t\tBurkes: [\n\t\t\t\t[8 / 32, 1, 0],\n\t\t\t\t[4 / 32, 2, 0],\n\t\t\t\t[2 / 32, -2, 1],\n\t\t\t\t[4 / 32, -1, 1],\n\t\t\t\t[8 / 32, 0, 1],\n\t\t\t\t[4 / 32, 1, 1],\n\t\t\t\t[2 / 32, 2, 1],\n\t\t\t],\n\t\t\tSierra: [\n\t\t\t\t[5 / 32, 1, 0],\n\t\t\t\t[3 / 32, 2, 0],\n\t\t\t\t[2 / 32, -2, 1],\n\t\t\t\t[4 / 32, -1, 1],\n\t\t\t\t[5 / 32, 0, 1],\n\t\t\t\t[4 / 32, 1, 1],\n\t\t\t\t[2 / 32, 2, 1],\n\t\t\t\t[2 / 32, -1, 2],\n\t\t\t\t[3 / 32, 0, 2],\n\t\t\t\t[2 / 32, 1, 2],\n\t\t\t],\n\t\t\tTwoSierra: [\n\t\t\t\t[4 / 16, 1, 0],\n\t\t\t\t[3 / 16, 2, 0],\n\t\t\t\t[1 / 16, -2, 1],\n\t\t\t\t[2 / 16, -1, 1],\n\t\t\t\t[3 / 16, 0, 1],\n\t\t\t\t[2 / 16, 1, 1],\n\t\t\t\t[1 / 16, 2, 1],\n\t\t\t],\n\t\t\tSierraLite: [\n\t\t\t\t[2 / 4, 1, 0],\n\t\t\t\t[1 / 4, -1, 1],\n\t\t\t\t[1 / 4, 0, 1],\n\t\t\t],\n\t\t};\n\n\t\tif (!kernel || !kernels[kernel]) {\n\t\t\tthrow 'Unknown dithering kernel: ' + kernel;\n\t\t}\n\n\t\tvar ds = kernels[kernel];\n\n\t\tvar data = getImageData(img),\n//\t\t\tbuf8 = data.buf8,\n\t\t\tbuf32 = data.buf32,\n\t\t\twidth = data.width,\n\t\t\theight = data.height,\n\t\t\tlen = buf32.length;\n\n\t\tvar dir = serpentine ? -1 : 1;\n\n\t\tfor (var y = 0; y < height; y++) {\n\t\t\tif (serpentine)\n\t\t\t\tdir = dir * -1;\n\n\t\t\tvar lni = y * width;\n\n\t\t\tfor (var x = (dir == 1 ? 0 : width - 1), xend = (dir == 1 ? width : 0); x !== xend; x += dir) {\n\t\t\t\t// Image pixel\n\t\t\t\tvar idx = lni + x,\n\t\t\t\t\ti32 = buf32[idx],\n\t\t\t\t\tr1 = (i32 & 0xff),\n\t\t\t\t\tg1 = (i32 & 0xff00) >> 8,\n\t\t\t\t\tb1 = (i32 & 0xff0000) >> 16;\n\n\t\t\t\t// Reduced pixel\n\t\t\t\tvar i32x = this.nearestColor(i32),\n\t\t\t\t\tr2 = (i32x & 0xff),\n\t\t\t\t\tg2 = (i32x & 0xff00) >> 8,\n\t\t\t\t\tb2 = (i32x & 0xff0000) >> 16;\n\n\t\t\t\tbuf32[idx] =\n\t\t\t\t\t(255 << 24)\t|\t// alpha\n\t\t\t\t\t(b2  << 16)\t|\t// blue\n\t\t\t\t\t(g2  <<  8)\t|\t// green\n\t\t\t\t\t r2;\n\n\t\t\t\t// dithering strength\n\t\t\t\tif (this.dithDelta) {\n\t\t\t\t\tvar dist = this.colorDist([r1, g1, b1], [r2, g2, b2]);\n\t\t\t\t\tif (dist < this.dithDelta)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Component distance\n\t\t\t\tvar er = r1 - r2,\n\t\t\t\t\teg = g1 - g2,\n\t\t\t\t\teb = b1 - b2;\n\n\t\t\t\tfor (var i = (dir == 1 ? 0 : ds.length - 1), end = (dir == 1 ? ds.length : 0); i !== end; i += dir) {\n\t\t\t\t\tvar x1 = ds[i][1] * dir,\n\t\t\t\t\t\ty1 = ds[i][2];\n\n\t\t\t\t\tvar lni2 = y1 * width;\n\n\t\t\t\t\tif (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n\t\t\t\t\t\tvar d = ds[i][0];\n\t\t\t\t\t\tvar idx2 = idx + (lni2 + x1);\n\n\t\t\t\t\t\tvar r3 = (buf32[idx2] & 0xff),\n\t\t\t\t\t\t\tg3 = (buf32[idx2] & 0xff00) >> 8,\n\t\t\t\t\t\t\tb3 = (buf32[idx2] & 0xff0000) >> 16;\n\n\t\t\t\t\t\tvar r4 = Math.max(0, Math.min(255, r3 + er * d)),\n\t\t\t\t\t\t\tg4 = Math.max(0, Math.min(255, g3 + eg * d)),\n\t\t\t\t\t\t\tb4 = Math.max(0, Math.min(255, b3 + eb * d));\n\n\t\t\t\t\t\tbuf32[idx2] =\n\t\t\t\t\t\t\t(255 << 24)\t|\t// alpha\n\t\t\t\t\t\t\t(b4  << 16)\t|\t// blue\n\t\t\t\t\t\t\t(g4  <<  8)\t|\t// green\n\t\t\t\t\t\t\t r4;\t\t\t// red\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn buf32;\n\t};\n\n\t// reduces histogram to palette, remaps & memoizes reduced colors\n\tRgbQuant.prototype.buildPal = function buildPal(noSort) {\n\t\tif (this.palLocked || this.idxrgb.length > 0 && this.idxrgb.length <= this.colors) return;\n\n\t\tvar histG  = this.histogram,\n\t\t\tsorted = sortedHashKeys(histG, true);\n\n\t\tif (sorted.length == 0)\n\t\t\tthrow \"Nothing has been sampled, palette cannot be built.\";\n\n\t\tswitch (this.method) {\n\t\t\tcase 1:\n\t\t\t\tvar cols = this.initColors,\n\t\t\t\t\tlast = sorted[cols - 1],\n\t\t\t\t\tfreq = histG[last];\n\n\t\t\t\tvar idxi32 = sorted.slice(0, cols);\n\n\t\t\t\t// add any cut off colors with same freq as last\n\t\t\t\tvar pos = cols, len = sorted.length;\n\t\t\t\twhile (pos < len && histG[sorted[pos]] == freq)\n\t\t\t\t\tidxi32.push(sorted[pos++]);\n\n\t\t\t\t// inject min huegroup colors\n\t\t\t\tif (this.hueStats)\n\t\t\t\t\tthis.hueStats.inject(idxi32);\n\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tvar idxi32 = sorted;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// int32-ify values\n\t\tidxi32 = idxi32.map(function(v){return +v;});\n\n\t\tthis.reducePal(idxi32);\n\n\t\tif (!noSort && this.reIndex)\n\t\t\tthis.sortPal();\n\n\t\t// build cache of top histogram colors\n\t\tif (this.useCache)\n\t\t\tthis.cacheHistogram(idxi32);\n\n\t\tthis.palLocked = true;\n\t};\n\n\tRgbQuant.prototype.palette = function palette(tuples, noSort) {\n\t\tthis.buildPal(noSort);\n\t\treturn tuples ? this.idxrgb : new Uint8Array((new Uint32Array(this.idxi32)).buffer);\n\t};\n\n\tRgbQuant.prototype.prunePal = function prunePal(keep) {\n\t\tvar i32;\n\n\t\tfor (var j = 0; j < this.idxrgb.length; j++) {\n\t\t\tif (!keep[j]) {\n\t\t\t\ti32 = this.idxi32[j];\n\t\t\t\tthis.idxrgb[j] = null;\n\t\t\t\tthis.idxi32[j] = null;\n\t\t\t\tdelete this.i32idx[i32];\n\t\t\t}\n\t\t}\n\n\t\t// compact\n\t\tif (this.reIndex) {\n\t\t\tvar idxrgb = [],\n\t\t\t\tidxi32 = [],\n\t\t\t\ti32idx = {};\n\n\t\t\tfor (var j = 0, i = 0; j < this.idxrgb.length; j++) {\n\t\t\t\tif (this.idxrgb[j]) {\n\t\t\t\t\ti32 = this.idxi32[j];\n\t\t\t\t\tidxrgb[i] = this.idxrgb[j];\n\t\t\t\t\ti32idx[i32] = i;\n\t\t\t\t\tidxi32[i] = i32;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.idxrgb = idxrgb;\n\t\t\tthis.idxi32 = idxi32;\n\t\t\tthis.i32idx = i32idx;\n\t\t}\n\t};\n\n\t// reduces similar colors from an importance-sorted Uint32 rgba array\n\tRgbQuant.prototype.reducePal = function reducePal(idxi32) {\n\t\t// if pre-defined palette's length exceeds target\n\t\tif (this.idxrgb.length > this.colors) {\n\t\t\t// quantize histogram to existing palette\n\t\t\tvar len = idxi32.length, keep = {}, uniques = 0, idx, pruned = false;\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\t// palette length reached, unset all remaining colors (sparse palette)\n\t\t\t\tif (uniques == this.colors && !pruned) {\n\t\t\t\t\tthis.prunePal(keep);\n\t\t\t\t\tpruned = true;\n\t\t\t\t}\n\n\t\t\t\tidx = this.nearestIndex(idxi32[i]);\n\n\t\t\t\tif (uniques < this.colors && !keep[idx]) {\n\t\t\t\t\tkeep[idx] = true;\n\t\t\t\t\tuniques++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!pruned) {\n\t\t\t\tthis.prunePal(keep);\n\t\t\t\tpruned = true;\n\t\t\t}\n\t\t}\n\t\t// reduce histogram to create initial palette\n\t\telse {\n\t\t\t// build full rgb palette\n\t\t\tvar idxrgb = idxi32.map(function(i32) {\n\t\t\t\treturn [\n\t\t\t\t\t(i32 & 0xff),\n\t\t\t\t\t(i32 & 0xff00) >> 8,\n\t\t\t\t\t(i32 & 0xff0000) >> 16,\n\t\t\t\t];\n\t\t\t});\n\n\t\t\tvar len = idxrgb.length,\n\t\t\t\tpalLen = len,\n\t\t\t\tthold = this.initDist;\n\n\t\t\t// palette already at or below desired length\n\t\t\tif (palLen > this.colors) {\n\t\t\t\twhile (palLen > this.colors) {\n\t\t\t\t\tvar memDist = [];\n\n\t\t\t\t\t// iterate palette\n\t\t\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\t\t\tvar pxi = idxrgb[i], i32i = idxi32[i];\n\t\t\t\t\t\tif (!pxi) continue;\n\n\t\t\t\t\t\tfor (var j = i + 1; j < len; j++) {\n\t\t\t\t\t\t\tvar pxj = idxrgb[j], i32j = idxi32[j];\n\t\t\t\t\t\t\tif (!pxj) continue;\n\n\t\t\t\t\t\t\tvar dist = this.colorDist(pxi, pxj);\n\n\t\t\t\t\t\t\tif (dist < thold) {\n\t\t\t\t\t\t\t\t// store index,rgb,dist\n\t\t\t\t\t\t\t\tmemDist.push([j, pxj, i32j, dist]);\n\n\t\t\t\t\t\t\t\t// kill squashed value\n\t\t\t\t\t\t\t\tdelete(idxrgb[j]);\n\t\t\t\t\t\t\t\tpalLen--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// palette reduction pass\n\t\t\t\t\t// console.log(\"palette length: \" + palLen);\n\n\t\t\t\t\t// if palette is still much larger than target, increment by larger initDist\n\t\t\t\t\tthold += (palLen > this.colors * 3) ? this.initDist : this.distIncr;\n\t\t\t\t}\n\n\t\t\t\t// if palette is over-reduced, re-add removed colors with largest distances from last round\n\t\t\t\tif (palLen < this.colors) {\n\t\t\t\t\t// sort descending\n\t\t\t\t\tsort.call(memDist, function(a,b) {\n\t\t\t\t\t\treturn b[3] - a[3];\n\t\t\t\t\t});\n\n\t\t\t\t\tvar k = 0;\n\t\t\t\t\twhile (palLen < this.colors) {\n\t\t\t\t\t\t// re-inject rgb into final palette\n\t\t\t\t\t\tidxrgb[memDist[k][0]] = memDist[k][1];\n\n\t\t\t\t\t\tpalLen++;\n\t\t\t\t\t\tk++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar len = idxrgb.length;\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tif (!idxrgb[i]) continue;\n\n\t\t\t\tthis.idxrgb.push(idxrgb[i]);\n\t\t\t\tthis.idxi32.push(idxi32[i]);\n\n\t\t\t\tthis.i32idx[idxi32[i]] = this.idxi32.length - 1;\n\t\t\t\tthis.i32rgb[idxi32[i]] = idxrgb[i];\n\t\t\t}\n\t\t}\n\t};\n\n\t// global top-population\n\tRgbQuant.prototype.colorStats1D = function colorStats1D(buf32) {\n\t\tvar histG = this.histogram,\n\t\t\tnum = 0, col,\n\t\t\tlen = buf32.length;\n\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tcol = buf32[i];\n\n\t\t\t// skip transparent\n\t\t\tif ((col & 0xff000000) >> 24 == 0) continue;\n\n\t\t\t// collect hue stats\n\t\t\tif (this.hueStats)\n\t\t\t\tthis.hueStats.check(col);\n\n\t\t\tif (col in histG)\n\t\t\t\thistG[col]++;\n\t\t\telse\n\t\t\t\thistG[col] = 1;\n\t\t}\n\t};\n\n\t// population threshold within subregions\n\t// FIXME: this can over-reduce (few/no colors same?), need a way to keep\n\t// important colors that dont ever reach local thresholds (gradients?)\n\tRgbQuant.prototype.colorStats2D = function colorStats2D(buf32, width) {\n\t\tvar boxW = this.boxSize[0],\n\t\t\tboxH = this.boxSize[1],\n\t\t\tarea = boxW * boxH,\n\t\t\tboxes = makeBoxes(width, buf32.length / width, boxW, boxH),\n\t\t\thistG = this.histogram,\n\t\t\tself = this;\n\n\t\tboxes.forEach(function(box) {\n\t\t\tvar effc = Math.max(Math.round((box.w * box.h) / area) * self.boxPxls, 2),\n\t\t\t\thistL = {}, col;\n\n\t\t\titerBox(box, width, function(i) {\n\t\t\t\tcol = buf32[i];\n\n\t\t\t\t// skip transparent\n\t\t\t\tif ((col & 0xff000000) >> 24 == 0) return;\n\n\t\t\t\t// collect hue stats\n\t\t\t\tif (self.hueStats)\n\t\t\t\t\tself.hueStats.check(col);\n\n\t\t\t\tif (col in histG)\n\t\t\t\t\thistG[col]++;\n\t\t\t\telse if (col in histL) {\n\t\t\t\t\tif (++histL[col] >= effc)\n\t\t\t\t\t\thistG[col] = histL[col];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\thistL[col] = 1;\n\t\t\t});\n\t\t});\n\n\t\tif (this.hueStats)\n\t\t\tthis.hueStats.inject(histG);\n\t};\n\n\t// TODO: group very low lum and very high lum colors\n\t// TODO: pass custom sort order\n\tRgbQuant.prototype.sortPal = function sortPal() {\n\t\tvar self = this;\n\n\t\tthis.idxi32.sort(function(a,b) {\n\t\t\tvar idxA = self.i32idx[a],\n\t\t\t\tidxB = self.i32idx[b],\n\t\t\t\trgbA = self.idxrgb[idxA],\n\t\t\t\trgbB = self.idxrgb[idxB];\n\n\t\t\tvar hslA = rgb2hsl(rgbA[0],rgbA[1],rgbA[2]),\n\t\t\t\thslB = rgb2hsl(rgbB[0],rgbB[1],rgbB[2]);\n\n\t\t\t// sort all grays + whites together\n\t\t\tvar hueA = (rgbA[0] == rgbA[1] && rgbA[1] == rgbA[2]) ? -1 : hueGroup(hslA.h, self.hueGroups);\n\t\t\tvar hueB = (rgbB[0] == rgbB[1] && rgbB[1] == rgbB[2]) ? -1 : hueGroup(hslB.h, self.hueGroups);\n\n\t\t\tvar hueDiff = hueB - hueA;\n\t\t\tif (hueDiff) return -hueDiff;\n\n\t\t\tvar lumDiff = lumGroup(+hslB.l.toFixed(2)) - lumGroup(+hslA.l.toFixed(2));\n\t\t\tif (lumDiff) return -lumDiff;\n\n\t\t\tvar satDiff = satGroup(+hslB.s.toFixed(2)) - satGroup(+hslA.s.toFixed(2));\n\t\t\tif (satDiff) return -satDiff;\n\t\t});\n\n\t\t// sync idxrgb & i32idx\n\t\tthis.idxi32.forEach(function(i32, i) {\n\t\t\tself.idxrgb[i] = self.i32rgb[i32];\n\t\t\tself.i32idx[i32] = i;\n\t\t});\n\t};\n\n\t// TOTRY: use HUSL - http://boronine.com/husl/\n\tRgbQuant.prototype.nearestColor = function nearestColor(i32) {\n\t\tvar idx = this.nearestIndex(i32);\n\t\treturn idx === null ? 0 : this.idxi32[idx];\n\t};\n\n\t// TOTRY: use HUSL - http://boronine.com/husl/\n\tRgbQuant.prototype.nearestIndex = function nearestIndex(i32) {\n\t\t// alpha 0 returns null index\n\t\tif ((i32 & 0xff000000) >> 24 == 0)\n\t\t\treturn null;\n\n\t\tif (this.useCache && (\"\"+i32) in this.i32idx)\n\t\t\treturn this.i32idx[i32];\n\n\t\tvar min = 1000,\n\t\t\tidx,\n\t\t\trgb = [\n\t\t\t\t(i32 & 0xff),\n\t\t\t\t(i32 & 0xff00) >> 8,\n\t\t\t\t(i32 & 0xff0000) >> 16,\n\t\t\t],\n\t\t\tlen = this.idxrgb.length;\n\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif (!this.idxrgb[i]) continue;\t\t// sparse palettes\n\n\t\t\tvar dist = this.colorDist(rgb, this.idxrgb[i]);\n\n\t\t\tif (dist < min) {\n\t\t\t\tmin = dist;\n\t\t\t\tidx = i;\n\t\t\t}\n\t\t}\n\n\t\treturn idx;\n\t};\n\n\tRgbQuant.prototype.cacheHistogram = function cacheHistogram(idxi32) {\n\t\tfor (var i = 0, i32 = idxi32[i]; i < idxi32.length && this.histogram[i32] >= this.cacheFreq; i32 = idxi32[i++])\n\t\t\tthis.i32idx[i32] = this.nearestIndex(i32);\n\t};\n\n\tfunction HueStats(numGroups, minCols) {\n\t\tthis.numGroups = numGroups;\n\t\tthis.minCols = minCols;\n\t\tthis.stats = {};\n\n\t\tfor (var i = -1; i < numGroups; i++)\n\t\t\tthis.stats[i] = {num: 0, cols: []};\n\n\t\tthis.groupsFull = 0;\n\t}\n\n\tHueStats.prototype.check = function checkHue(i32) {\n\t\tif (this.groupsFull == this.numGroups + 1)\n\t\t\tthis.check = function() {return;};\n\n\t\tvar r = (i32 & 0xff),\n\t\t\tg = (i32 & 0xff00) >> 8,\n\t\t\tb = (i32 & 0xff0000) >> 16,\n\t\t\thg = (r == g && g == b) ? -1 : hueGroup(rgb2hsl(r,g,b).h, this.numGroups),\n\t\t\tgr = this.stats[hg],\n\t\t\tmin = this.minCols;\n\n\t\tgr.num++;\n\n\t\tif (gr.num > min)\n\t\t\treturn;\n\t\tif (gr.num == min)\n\t\t\tthis.groupsFull++;\n\n\t\tif (gr.num <= min)\n\t\t\tthis.stats[hg].cols.push(i32);\n\t};\n\n\tHueStats.prototype.inject = function injectHues(histG) {\n\t\tfor (var i = -1; i < this.numGroups; i++) {\n\t\t\tif (this.stats[i].num <= this.minCols) {\n\t\t\t\tswitch (typeOf(histG)) {\n\t\t\t\t\tcase \"Array\":\n\t\t\t\t\t\tthis.stats[i].cols.forEach(function(col){\n\t\t\t\t\t\t\tif (histG.indexOf(col) == -1)\n\t\t\t\t\t\t\t\thistG.push(col);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Object\":\n\t\t\t\t\t\tthis.stats[i].cols.forEach(function(col){\n\t\t\t\t\t\t\tif (!histG[col])\n\t\t\t\t\t\t\t\thistG[col] = 1;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\thistG[col]++;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Rec. 709 (sRGB) luma coef\n\tvar Pr = .2126,\n\t\tPg = .7152,\n\t\tPb = .0722;\n\n\t// http://alienryderflex.com/hsp.html\n\tfunction rgb2lum(r,g,b) {\n\t\treturn Math.sqrt(\n\t\t\tPr * r*r +\n\t\t\tPg * g*g +\n\t\t\tPb * b*b\n\t\t);\n\t}\n\n\tvar rd = 255,\n\t\tgd = 255,\n\t\tbd = 255;\n\n\tvar euclMax = Math.sqrt(Pr*rd*rd + Pg*gd*gd + Pb*bd*bd);\n\t// perceptual Euclidean color distance\n\tfunction distEuclidean(rgb0, rgb1) {\n\t\tvar rd = rgb1[0]-rgb0[0],\n\t\t\tgd = rgb1[1]-rgb0[1],\n\t\t\tbd = rgb1[2]-rgb0[2];\n\n\t\treturn Math.sqrt(Pr*rd*rd + Pg*gd*gd + Pb*bd*bd) / euclMax;\n\t}\n\n\tvar manhMax = Pr*rd + Pg*gd + Pb*bd;\n\t// perceptual Manhattan color distance\n\tfunction distManhattan(rgb0, rgb1) {\n\t\tvar rd = Math.abs(rgb1[0]-rgb0[0]),\n\t\t\tgd = Math.abs(rgb1[1]-rgb0[1]),\n\t\t\tbd = Math.abs(rgb1[2]-rgb0[2]);\n\n\t\treturn (Pr*rd + Pg*gd + Pb*bd) / manhMax;\n\t}\n\n\t// http://rgb2hsl.nichabi.com/javascript-function.php\n\tfunction rgb2hsl(r, g, b) {\n\t\tvar max, min, h, s, l, d;\n\t\tr /= 255;\n\t\tg /= 255;\n\t\tb /= 255;\n\t\tmax = Math.max(r, g, b);\n\t\tmin = Math.min(r, g, b);\n\t\tl = (max + min) / 2;\n\t\tif (max == min) {\n\t\t\th = s = 0;\n\t\t} else {\n\t\t\td = max - min;\n\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\tswitch (max) {\n\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\t\tcase g:\th = (b - r) / d + 2; break;\n\t\t\t\tcase b:\th = (r - g) / d + 4; break\n\t\t\t}\n\t\t\th /= 6;\n\t\t}\n//\t\th = Math.floor(h * 360)\n//\t\ts = Math.floor(s * 100)\n//\t\tl = Math.floor(l * 100)\n\t\treturn {\n\t\t\th: h,\n\t\t\ts: s,\n\t\t\tl: rgb2lum(r,g,b),\n\t\t};\n\t}\n\n\tfunction hueGroup(hue, segs) {\n\t\tvar seg = 1/segs,\n\t\t\thaf = seg/2;\n\n\t\tif (hue >= 1 - haf || hue <= haf)\n\t\t\treturn 0;\n\n\t\tfor (var i = 1; i < segs; i++) {\n\t\t\tvar mid = i*seg;\n\t\t\tif (hue >= mid - haf && hue <= mid + haf)\n\t\t\t\treturn i;\n\t\t}\n\t}\n\n\tfunction satGroup(sat) {\n\t\treturn sat;\n\t}\n\n\tfunction lumGroup(lum) {\n\t\treturn lum;\n\t}\n\n\tfunction typeOf(val) {\n\t\treturn Object.prototype.toString.call(val).slice(8,-1);\n\t}\n\n\tvar sort = isArrSortStable() ? Array.prototype.sort : stableSort;\n\n\t// must be used via stableSort.call(arr, fn)\n\tfunction stableSort(fn) {\n\t\tvar type = typeOf(this[0]);\n\n\t\tif (type == \"Number\" || type == \"String\") {\n\t\t\tvar ord = {}, len = this.length, val;\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tval = this[i];\n\t\t\t\tif (ord[val] || ord[val] === 0) continue;\n\t\t\t\tord[val] = i;\n\t\t\t}\n\n\t\t\treturn this.sort(function(a,b) {\n\t\t\t\treturn fn(a,b) || ord[a] - ord[b];\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tvar ord = this.map(function(v){return v});\n\n\t\t\treturn this.sort(function(a,b) {\n\t\t\t\treturn fn(a,b) || ord.indexOf(a) - ord.indexOf(b);\n\t\t\t});\n\t\t}\n\t}\n\n\t// test if js engine's Array#sort implementation is stable\n\tfunction isArrSortStable() {\n\t\tvar str = \"abcdefghijklmnopqrstuvwxyz\";\n\n\t\treturn \"xyzvwtursopqmnklhijfgdeabc\" == str.split(\"\").sort(function(a,b) {\n\t\t\treturn ~~(str.indexOf(b)/2.3) - ~~(str.indexOf(a)/2.3);\n\t\t}).join(\"\");\n\t}\n\n\t// returns uniform pixel data from various img\n\t// TODO?: if array is passed, createimagedata, createlement canvas? take a pxlen?\n\tfunction getImageData(img, width) {\n\t\tvar can, ctx, imgd, buf8, buf32, height;\n\n\t\tswitch (typeOf(img)) {\n\t\t\tcase \"HTMLImageElement\":\n\t\t\t\tcan = document.createElement(\"canvas\");\n\t\t\t\tcan.width = img.naturalWidth;\n\t\t\t\tcan.height = img.naturalHeight;\n\t\t\t\tctx = can.getContext(\"2d\");\n\t\t\t\tctx.drawImage(img,0,0);\n\t\t\tcase \"Canvas\":\n\t\t\tcase \"HTMLCanvasElement\":\n\t\t\t\tcan = can || img;\n\t\t\t\tctx = ctx || can.getContext(\"2d\");\n\t\t\tcase \"CanvasRenderingContext2D\":\n\t\t\t\tctx = ctx || img;\n\t\t\t\tcan = can || ctx.canvas;\n\t\t\t\timgd = ctx.getImageData(0, 0, can.width, can.height);\n\t\t\tcase \"ImageData\":\n\t\t\t\timgd = imgd || img;\n\t\t\t\twidth = imgd.width;\n\t\t\t\tif (typeOf(imgd.data) == \"CanvasPixelArray\")\n\t\t\t\t\tbuf8 = new Uint8Array(imgd.data);\n\t\t\t\telse\n\t\t\t\t\tbuf8 = imgd.data;\n\t\t\tcase \"Array\":\n\t\t\tcase \"CanvasPixelArray\":\n\t\t\t\tbuf8 = buf8 || new Uint8Array(img);\n\t\t\tcase \"Uint8Array\":\n\t\t\tcase \"Uint8ClampedArray\":\n\t\t\t\tbuf8 = buf8 || img;\n\t\t\t\tbuf32 = new Uint32Array(buf8.buffer);\n\t\t\tcase \"Uint32Array\":\n\t\t\t\tbuf32 = buf32 || img;\n\t\t\t\tbuf8 = buf8 || new Uint8Array(buf32.buffer);\n\t\t\t\twidth = width || buf32.length;\n\t\t\t\theight = buf32.length / width;\n\t\t}\n\n\t\treturn {\n\t\t\tcan: can,\n\t\t\tctx: ctx,\n\t\t\timgd: imgd,\n\t\t\tbuf8: buf8,\n\t\t\tbuf32: buf32,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t};\n\t}\n\n\t// partitions a rect of wid x hgt into\n\t// array of bboxes of w0 x h0 (or less)\n\tfunction makeBoxes(wid, hgt, w0, h0) {\n\t\tvar wnum = ~~(wid/w0), wrem = wid%w0,\n\t\t\thnum = ~~(hgt/h0), hrem = hgt%h0,\n\t\t\txend = wid-wrem, yend = hgt-hrem;\n\n\t\tvar bxs = [];\n\t\tfor (var y = 0; y < hgt; y += h0)\n\t\t\tfor (var x = 0; x < wid; x += w0)\n\t\t\t\tbxs.push({x:x, y:y, w:(x==xend?wrem:w0), h:(y==yend?hrem:h0)});\n\n\t\treturn bxs;\n\t}\n\n\t// iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent\n\tfunction iterBox(bbox, wid, fn) {\n\t\tvar b = bbox,\n\t\t\ti0 = b.y * wid + b.x,\n\t\t\ti1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1),\n\t\t\tcnt = 0, incr = wid - b.w + 1, i = i0;\n\n\t\tdo {\n\t\t\tfn.call(this, i);\n\t\t\ti += (++cnt % b.w == 0) ? incr : 1;\n\t\t} while (i <= i1);\n\t}\n\n\t// returns array of hash keys sorted by their values\n\tfunction sortedHashKeys(obj, desc) {\n\t\tvar keys = [];\n\n\t\tfor (var key in obj)\n\t\t\tkeys.push(key);\n\n\t\treturn sort.call(keys, function(a,b) {\n\t\t\treturn desc ? obj[b] - obj[a] : obj[a] - obj[b];\n\t\t});\n\t}\n\n\t// expose\n\tthis.RgbQuant = RgbQuant;\n\n\t// expose to commonJS\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = RgbQuant;\n\t}\n\n}).call(this);","import {\n  DisplayBezierCurve,\n  DisplayBezierCurveType,\n  DisplayBezierCurveTypes,\n  DisplayBitmap,\n  DisplayBitmapColorPair,\n  displayCurveTypeBitWidth,\n  DisplayPointDataTypes,\n  displayCurveTypesPerByte,\n  DisplaySpriteColorPair,\n  DisplayWireframe,\n} from \"../DisplayManager.ts\";\nimport {\n  concatenateArrayBuffers,\n  UInt8ByteBuffer,\n} from \"./ArrayBufferUtils.ts\";\nimport { rgbToHex, stringToRGB } from \"./ColorUtils.ts\";\nimport { createConsole } from \"./Console.ts\";\nimport { drawBitmapHeaderLength, getBitmapData } from \"./DisplayBitmapUtils.ts\";\nimport {\n  DisplayAlignment,\n  DisplayAlignments,\n  DisplayDirection,\n  DisplayDirections,\n  DisplaySegmentCap,\n  DisplaySegmentCaps,\n} from \"./DisplayContextState.ts\";\nimport { DisplayManagerInterface } from \"./DisplayManagerInterface.ts\";\nimport { DisplaySpriteSerializedLines } from \"./DisplaySpriteSheetUtils.ts\";\nimport {\n  assertValidAlignment,\n  assertValidColor,\n  assertValidDirection,\n  assertValidPathNumberOfControlPoints,\n  assertValidNumberOfControlPoints,\n  assertValidOpacity,\n  assertValidPath,\n  assertValidSegmentCap,\n  assertValidWireframe,\n  DisplayColorRGB,\n  formatRotation,\n  formatScale,\n  maxDisplayScale,\n  minDisplayScale,\n  roundScale,\n  serializePoints,\n  getPointDataType,\n} from \"./DisplayUtils.ts\";\nimport {\n  clamp,\n  degToRad,\n  Int16Max,\n  Int16Min,\n  normalizeRadians,\n  twoPi,\n  Vector2,\n} from \"./MathUtils.ts\";\n\nconst _console = createConsole(\"DisplayContextCommand\", { log: false });\n\nexport const DisplayContextCommandTypes = [\n  \"show\",\n  \"clear\",\n\n  \"setColor\",\n  \"setColorOpacity\",\n  \"setOpacity\",\n\n  \"saveContext\",\n  \"restoreContext\",\n\n  \"selectBackgroundColor\",\n  \"selectFillColor\",\n  \"selectLineColor\",\n\n  \"setIgnoreFill\",\n  \"setIgnoreLine\",\n  \"setFillBackground\",\n\n  \"setLineWidth\",\n  \"setRotation\",\n  \"clearRotation\",\n\n  \"setHorizontalAlignment\",\n  \"setVerticalAlignment\",\n  \"resetAlignment\",\n\n  \"setSegmentStartCap\",\n  \"setSegmentEndCap\",\n  \"setSegmentCap\",\n\n  \"setSegmentStartRadius\",\n  \"setSegmentEndRadius\",\n  \"setSegmentRadius\",\n\n  \"setCropTop\",\n  \"setCropRight\",\n  \"setCropBottom\",\n  \"setCropLeft\",\n  \"clearCrop\",\n\n  \"setRotationCropTop\",\n  \"setRotationCropRight\",\n  \"setRotationCropBottom\",\n  \"setRotationCropLeft\",\n  \"clearRotationCrop\",\n\n  \"selectBitmapColor\",\n  \"selectBitmapColors\",\n  \"setBitmapScaleX\",\n  \"setBitmapScaleY\",\n  \"setBitmapScale\",\n  \"resetBitmapScale\",\n\n  \"selectSpriteColor\",\n  \"selectSpriteColors\",\n  \"resetSpriteColors\",\n  \"setSpriteScaleX\",\n  \"setSpriteScaleY\",\n  \"setSpriteScale\",\n  \"resetSpriteScale\",\n\n  \"setSpritesLineHeight\",\n  \"setSpritesDirection\",\n  \"setSpritesLineDirection\",\n  \"setSpritesSpacing\",\n  \"setSpritesLineSpacing\",\n  \"setSpritesAlignment\",\n  \"setSpritesLineAlignment\",\n\n  \"clearRect\",\n\n  \"drawRect\",\n  \"drawRoundRect\",\n\n  \"drawCircle\",\n  \"drawArc\",\n\n  \"drawEllipse\",\n  \"drawArcEllipse\",\n\n  \"drawSegment\",\n  \"drawSegments\",\n\n  \"drawRegularPolygon\",\n  \"drawPolygon\",\n\n  \"drawWireframe\",\n\n  \"drawQuadraticBezierCurve\",\n  \"drawQuadraticBezierCurves\",\n  \"drawCubicBezierCurve\",\n  \"drawCubicBezierCurves\",\n\n  \"drawPath\",\n  \"drawClosedPath\",\n\n  \"drawBitmap\",\n\n  \"selectSpriteSheet\",\n  \"drawSprite\",\n  \"drawSprites\",\n\n  \"startSprite\",\n  \"endSprite\",\n] as const;\nexport type DisplayContextCommandType =\n  (typeof DisplayContextCommandTypes)[number];\n\nexport const DisplaySpriteContextCommandTypes = [\n  \"selectFillColor\",\n  \"selectLineColor\",\n  // \"selectBackgroundColor\",\n\n  \"setIgnoreFill\",\n  \"setIgnoreLine\",\n  // \"setFillBackground\",\n\n  \"setLineWidth\",\n  \"setRotation\",\n  \"clearRotation\",\n\n  \"setVerticalAlignment\",\n  \"setHorizontalAlignment\",\n  \"resetAlignment\",\n\n  \"setSegmentStartCap\",\n  \"setSegmentEndCap\",\n  \"setSegmentCap\",\n\n  \"setSegmentStartRadius\",\n  \"setSegmentEndRadius\",\n  \"setSegmentRadius\",\n\n  \"setCropTop\",\n  \"setCropRight\",\n  \"setCropBottom\",\n  \"setCropLeft\",\n  \"clearCrop\",\n\n  \"setRotationCropTop\",\n  \"setRotationCropRight\",\n  \"setRotationCropBottom\",\n  \"setRotationCropLeft\",\n  \"clearRotationCrop\",\n\n  \"selectBitmapColor\",\n  \"selectBitmapColors\",\n  \"setBitmapScaleX\",\n  \"setBitmapScaleY\",\n  \"setBitmapScale\",\n  \"resetBitmapScale\",\n\n  \"selectSpriteColor\",\n  \"selectSpriteColors\",\n  \"resetSpriteColors\",\n  \"setSpriteScaleX\",\n  \"setSpriteScaleY\",\n  \"setSpriteScale\",\n  \"resetSpriteScale\",\n\n  \"clearRect\",\n\n  \"drawRect\",\n  \"drawRoundRect\",\n  \"drawCircle\",\n  \"drawEllipse\",\n\n  \"drawRegularPolygon\",\n  \"drawPolygon\",\n\n  \"drawWireframe\",\n\n  \"drawQuadraticBezierCurve\",\n  \"drawQuadraticBezierCurves\",\n  \"drawCubicBezierCurve\",\n  \"drawCubicBezierCurves\",\n\n  \"drawPath\",\n  \"drawClosedPath\",\n\n  \"drawSegment\",\n  \"drawSegments\",\n\n  \"drawArc\",\n  \"drawArcEllipse\",\n\n  \"drawBitmap\",\n  \"drawSprite\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type DisplaySpriteContextCommandType =\n  (typeof DisplaySpriteContextCommandTypes)[number];\n\nexport interface BaseDisplayContextCommand {\n  type: DisplayContextCommandType | \"runDisplayContextCommands\";\n  hide?: boolean;\n}\n\nexport interface SimpleDisplayCommand extends BaseDisplayContextCommand {\n  type:\n    | \"show\"\n    | \"clear\"\n    | \"saveContext\"\n    | \"restoreContext\"\n    | \"clearRotation\"\n    | \"clearCrop\"\n    | \"clearRotationCrop\"\n    | \"resetBitmapScale\"\n    | \"resetSpriteColors\"\n    | \"resetSpriteScale\"\n    | \"resetAlignment\"\n    | \"endSprite\";\n}\n\nexport interface SetDisplayColorCommand extends BaseDisplayContextCommand {\n  type: \"setColor\";\n  colorIndex: number;\n  color: DisplayColorRGB | string;\n}\nexport interface SetDisplayColorOpacityCommand\n  extends BaseDisplayContextCommand {\n  type: \"setColorOpacity\";\n  colorIndex: number;\n  opacity: number;\n}\nexport interface SetDisplayOpacityCommand extends BaseDisplayContextCommand {\n  type: \"setOpacity\";\n  opacity: number;\n}\n\nexport interface SetDisplayHorizontalAlignmentCommand\n  extends BaseDisplayContextCommand {\n  type: \"setHorizontalAlignment\";\n  horizontalAlignment: DisplayAlignment;\n}\nexport interface SetDisplayVerticalAlignmentCommand\n  extends BaseDisplayContextCommand {\n  type: \"setVerticalAlignment\";\n  verticalAlignment: DisplayAlignment;\n}\n\nexport interface SelectDisplayBackgroundColorCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectBackgroundColor\";\n  backgroundColorIndex: number;\n}\nexport interface SelectDisplayFillColorCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectFillColor\";\n  fillColorIndex: number;\n}\nexport interface SelectDisplayLineColorCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectLineColor\";\n  lineColorIndex: number;\n}\nexport interface SelectDisplayIgnoreFillCommand\n  extends BaseDisplayContextCommand {\n  type: \"setIgnoreFill\";\n  ignoreFill: boolean;\n}\nexport interface SelectDisplayIgnoreLineCommand\n  extends BaseDisplayContextCommand {\n  type: \"setIgnoreLine\";\n  ignoreLine: boolean;\n}\nexport interface SelectDisplayFillBackgroundCommand\n  extends BaseDisplayContextCommand {\n  type: \"setFillBackground\";\n  fillBackground: boolean;\n}\nexport interface SetDisplayLineWidthCommand extends BaseDisplayContextCommand {\n  type: \"setLineWidth\";\n  lineWidth: number;\n}\nexport interface SetDisplayRotationCommand extends BaseDisplayContextCommand {\n  type: \"setRotation\";\n  rotation: number;\n  isRadians?: boolean;\n}\n\nexport interface SetDisplaySegmentStartCapCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSegmentStartCap\";\n  segmentStartCap: DisplaySegmentCap;\n}\nexport interface SetDisplaySegmentEndCapCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSegmentEndCap\";\n  segmentEndCap: DisplaySegmentCap;\n}\nexport interface SetDisplaySegmentCapCommand extends BaseDisplayContextCommand {\n  type: \"setSegmentCap\";\n  segmentCap: DisplaySegmentCap;\n}\n\nexport interface SetDisplaySegmentStartRadiusCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSegmentStartRadius\";\n  segmentStartRadius: number;\n}\nexport interface SetDisplaySegmentEndRadiusCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSegmentEndRadius\";\n  segmentEndRadius: number;\n}\nexport interface SetDisplaySegmentRadiusCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSegmentRadius\";\n  segmentRadius: number;\n}\n\nexport interface SetDisplayCropTopCommand extends BaseDisplayContextCommand {\n  type: \"setCropTop\";\n  cropTop: number;\n}\nexport interface SetDisplayCropRightCommand extends BaseDisplayContextCommand {\n  type: \"setCropRight\";\n  cropRight: number;\n}\nexport interface SetDisplayCropBottomCommand extends BaseDisplayContextCommand {\n  type: \"setCropBottom\";\n  cropBottom: number;\n}\nexport interface SetDisplayCropLeftCommand extends BaseDisplayContextCommand {\n  type: \"setCropLeft\";\n  cropLeft: number;\n}\n\nexport interface SetDisplayRotationCropTopCommand\n  extends BaseDisplayContextCommand {\n  type: \"setRotationCropTop\";\n  rotationCropTop: number;\n}\nexport interface SetDisplayRotationCropRightCommand\n  extends BaseDisplayContextCommand {\n  type: \"setRotationCropRight\";\n  rotationCropRight: number;\n}\nexport interface SetDisplayRotationCropBottomCommand\n  extends BaseDisplayContextCommand {\n  type: \"setRotationCropBottom\";\n  rotationCropBottom: number;\n}\nexport interface SetDisplayRotationCropLeftCommand\n  extends BaseDisplayContextCommand {\n  type: \"setRotationCropLeft\";\n  rotationCropLeft: number;\n}\n\nexport interface SelectDisplayBitmapColorIndexCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectBitmapColor\";\n  bitmapColorIndex: number;\n  colorIndex: number;\n}\nexport interface SelectDisplayBitmapColorIndicesCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectBitmapColors\";\n  bitmapColorPairs: DisplayBitmapColorPair[];\n}\n\nexport interface SetDisplayBitmapScaleXCommand\n  extends BaseDisplayContextCommand {\n  type: \"setBitmapScaleX\";\n  bitmapScaleX: number;\n}\nexport interface SetDisplayBitmapScaleYCommand\n  extends BaseDisplayContextCommand {\n  type: \"setBitmapScaleY\";\n  bitmapScaleY: number;\n}\nexport interface SetDisplayBitmapScaleCommand\n  extends BaseDisplayContextCommand {\n  type: \"setBitmapScale\";\n  bitmapScale: number;\n}\n\nexport interface SelectDisplaySpriteColorIndexCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectSpriteColor\";\n  spriteColorIndex: number;\n  colorIndex: number;\n}\nexport interface SelectDisplaySpriteColorIndicesCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectSpriteColors\";\n  spriteColorPairs: DisplaySpriteColorPair[];\n}\n\nexport interface SetDisplaySpriteScaleXCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpriteScaleX\";\n  spriteScaleX: number;\n}\nexport interface SetDisplaySpriteScaleYCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpriteScaleY\";\n  spriteScaleY: number;\n}\nexport interface SetDisplaySpriteScaleCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpriteScale\";\n  spriteScale: number;\n}\n\nexport interface SetDisplaySpritesLineHeightCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpritesLineHeight\";\n  spritesLineHeight: number;\n}\n\nexport interface SetDisplaySpritesDirectionCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpritesDirection\";\n  spritesDirection: DisplayDirection;\n}\nexport interface SetDisplaySpritesLineDirectionCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpritesLineDirection\";\n  spritesLineDirection: DisplayDirection;\n}\n\nexport interface SetDisplaySpritesSpacingCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpritesSpacing\";\n  spritesSpacing: number;\n}\nexport interface SetDisplaySpritesLineSpacingCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpritesLineSpacing\";\n  spritesLineSpacing: number;\n}\n\nexport interface SetDisplaySpritesAlignmentCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpritesAlignment\";\n  spritesAlignment: DisplayAlignment;\n}\nexport interface SetDisplaySpritesLineAlignmentCommand\n  extends BaseDisplayContextCommand {\n  type: \"setSpritesLineAlignment\";\n  spritesLineAlignment: DisplayAlignment;\n}\n\nexport interface BasePositionDisplayContextCommand\n  extends BaseDisplayContextCommand {\n  x: number;\n  y: number;\n}\nexport interface BaseOffsetPositionDisplayContextCommand\n  extends BaseDisplayContextCommand {\n  offsetX: number;\n  offsetY: number;\n}\nexport interface BaseSizeDisplayContextCommand\n  extends BaseDisplayContextCommand {\n  width: number;\n  height: number;\n}\n\nexport interface BaseDisplayRectCommand\n  extends BasePositionDisplayContextCommand,\n    BaseSizeDisplayContextCommand {}\nexport interface BaseDisplayCenterRectCommand\n  extends BaseOffsetPositionDisplayContextCommand,\n    BaseSizeDisplayContextCommand {}\n\nexport interface ClearDisplayRectCommand extends BaseDisplayRectCommand {\n  type: \"clearRect\";\n}\nexport interface DrawDisplayRectCommand extends BaseDisplayCenterRectCommand {\n  type: \"drawRect\";\n}\n\nexport interface DrawDisplayRoundedRectCommand\n  extends BaseOffsetPositionDisplayContextCommand,\n    BaseSizeDisplayContextCommand {\n  type: \"drawRoundRect\";\n  borderRadius: number;\n}\n\nexport interface DrawDisplayCircleCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawCircle\";\n  radius: number;\n}\nexport interface DrawDisplayEllipseCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawEllipse\";\n  radiusX: number;\n  radiusY: number;\n}\n\nexport interface DrawDisplayRegularPolygonCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawRegularPolygon\";\n  radius: number;\n  numberOfSides: number;\n}\nexport interface DrawDisplayPolygonCommand extends BaseDisplayContextCommand {\n  type: \"drawPolygon\";\n  points: Vector2[];\n}\nexport interface DrawDisplaySegmentCommand extends BaseDisplayContextCommand {\n  type: \"drawSegment\";\n  startX: number;\n  startY: number;\n  endX: number;\n  endY: number;\n}\nexport interface DrawDisplaySegmentsCommand extends BaseDisplayContextCommand {\n  type: \"drawSegments\";\n  points: Vector2[];\n}\n\nexport interface DrawDisplayBezierCurveCommand\n  extends BaseDisplayContextCommand {\n  type:\n    | \"drawQuadraticBezierCurve\"\n    | \"drawQuadraticBezierCurves\"\n    | \"drawCubicBezierCurve\"\n    | \"drawCubicBezierCurves\";\n  controlPoints: Vector2[];\n}\n\nexport interface DrawDisplayPathCommand extends BaseDisplayContextCommand {\n  type: \"drawPath\" | \"drawClosedPath\";\n  curves: DisplayBezierCurve[];\n}\n\nexport interface DrawDisplayWireframeCommand extends BaseDisplayContextCommand {\n  type: \"drawWireframe\";\n  wireframe: DisplayWireframe;\n}\n\nexport interface DrawDisplayArcCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawArc\";\n  radius: number;\n  startAngle: number;\n  angleOffset: number;\n  isRadians?: boolean;\n}\nexport interface DrawDisplayArcEllipseCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawArcEllipse\";\n  radiusX: number;\n  radiusY: number;\n  startAngle: number;\n  angleOffset: number;\n  isRadians?: boolean;\n}\n\nexport interface DrawDisplayBitmapCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawBitmap\";\n  bitmap: DisplayBitmap;\n}\n\nexport interface SelectDisplaySpriteSheetCommand\n  extends BaseDisplayContextCommand {\n  type: \"selectSpriteSheet\";\n  spriteSheetIndex: number;\n}\n\nexport interface DrawDisplaySpriteCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawSprite\";\n  spriteIndex: number;\n  use2Bytes: boolean;\n}\n\nexport interface DrawDisplaySpritesCommand\n  extends BaseOffsetPositionDisplayContextCommand {\n  type: \"drawSprites\";\n  spriteSerializedLines: DisplaySpriteSerializedLines;\n}\n\nexport interface StartDisplaySpriteCommand\n  extends BaseDisplayCenterRectCommand {\n  type: \"startSprite\";\n}\n\nexport type DisplayContextCommand =\n  | SimpleDisplayCommand\n  | SetDisplayColorCommand\n  | SetDisplayColorOpacityCommand\n  | SetDisplayOpacityCommand\n  | SelectDisplayBackgroundColorCommand\n  | SelectDisplayFillColorCommand\n  | SelectDisplayLineColorCommand\n  | SetDisplayLineWidthCommand\n  | SetDisplayRotationCommand\n  | SetDisplaySegmentStartCapCommand\n  | SetDisplaySegmentEndCapCommand\n  | SetDisplaySegmentCapCommand\n  | SetDisplaySegmentStartRadiusCommand\n  | SetDisplaySegmentEndRadiusCommand\n  | SetDisplaySegmentRadiusCommand\n  | SetDisplayCropTopCommand\n  | SetDisplayCropRightCommand\n  | SetDisplayCropBottomCommand\n  | SetDisplayCropLeftCommand\n  | SetDisplayRotationCropTopCommand\n  | SetDisplayRotationCropRightCommand\n  | SetDisplayRotationCropBottomCommand\n  | SetDisplayRotationCropLeftCommand\n  | SelectDisplayBitmapColorIndexCommand\n  | SelectDisplayBitmapColorIndicesCommand\n  | SetDisplayBitmapScaleXCommand\n  | SetDisplayBitmapScaleYCommand\n  | SetDisplayBitmapScaleCommand\n  | SelectDisplaySpriteColorIndexCommand\n  | SelectDisplaySpriteColorIndicesCommand\n  | SetDisplaySpriteScaleXCommand\n  | SetDisplaySpriteScaleYCommand\n  | SetDisplaySpriteScaleCommand\n  | ClearDisplayRectCommand\n  | DrawDisplayRectCommand\n  | DrawDisplayRoundedRectCommand\n  | DrawDisplayCircleCommand\n  | DrawDisplayEllipseCommand\n  | DrawDisplayRegularPolygonCommand\n  | DrawDisplayPolygonCommand\n  | DrawDisplaySegmentCommand\n  | DrawDisplaySegmentsCommand\n  | DrawDisplayArcCommand\n  | DrawDisplayArcEllipseCommand\n  | DrawDisplayBitmapCommand\n  | DrawDisplaySpriteCommand\n  | DrawDisplaySpritesCommand\n  | SelectDisplaySpriteSheetCommand\n  | SetDisplayHorizontalAlignmentCommand\n  | SetDisplayVerticalAlignmentCommand\n  | SetDisplaySpritesDirectionCommand\n  | SetDisplaySpritesLineDirectionCommand\n  | SetDisplaySpritesSpacingCommand\n  | SetDisplaySpritesLineSpacingCommand\n  | SetDisplaySpritesAlignmentCommand\n  | SetDisplaySpritesLineAlignmentCommand\n  | SetDisplaySpritesLineHeightCommand\n  | DrawDisplayWireframeCommand\n  | DrawDisplayBezierCurveCommand\n  | DrawDisplayPathCommand\n  | SelectDisplayIgnoreFillCommand\n  | SelectDisplayIgnoreLineCommand\n  | SelectDisplayFillBackgroundCommand\n  | StartDisplaySpriteCommand;\n\nexport function serializeContextCommand(\n  displayManager: DisplayManagerInterface,\n  command: DisplayContextCommand\n) {\n  let dataView: DataView | undefined;\n\n  switch (command.type) {\n    case \"show\":\n    case \"clear\":\n    case \"saveContext\":\n    case \"restoreContext\":\n    case \"clearRotation\":\n    case \"clearCrop\":\n    case \"clearRotationCrop\":\n    case \"resetBitmapScale\":\n    case \"resetSpriteColors\":\n    case \"resetSpriteScale\":\n    case \"resetAlignment\":\n    case \"endSprite\":\n      break;\n    case \"setColor\":\n      {\n        const { color, colorIndex } = command;\n\n        let colorRGB: DisplayColorRGB;\n        if (typeof color == \"string\") {\n          colorRGB = stringToRGB(color);\n        } else {\n          colorRGB = color;\n        }\n        const colorHex = rgbToHex(colorRGB);\n        if (displayManager.colors[colorIndex] == colorHex) {\n          _console.log(`redundant color #${colorIndex} ${colorHex}`);\n          return;\n        }\n\n        //_console.log(`setting color #${colorIndex}`, colorRGB);\n        displayManager.assertValidColorIndex(colorIndex);\n        assertValidColor(colorRGB);\n        dataView = new DataView(new ArrayBuffer(4));\n        dataView.setUint8(0, colorIndex);\n        dataView.setUint8(1, colorRGB.r);\n        dataView.setUint8(2, colorRGB.g);\n        dataView.setUint8(3, colorRGB.b);\n      }\n      break;\n    case \"setColorOpacity\":\n      {\n        const { colorIndex, opacity } = command;\n        displayManager.assertValidColorIndex(colorIndex);\n        assertValidOpacity(opacity);\n        if (\n          Math.floor(255 * displayManager.opacities[colorIndex]) ==\n          Math.floor(255 * opacity)\n        ) {\n          _console.log(`redundant opacity #${colorIndex} ${opacity}`);\n          return;\n        }\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint8(0, colorIndex);\n        dataView.setUint8(1, opacity * 255);\n      }\n      break;\n    case \"setOpacity\":\n      {\n        const { opacity } = command;\n        assertValidOpacity(opacity);\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, Math.round(opacity * 255));\n      }\n      break;\n    case \"selectFillColor\":\n      {\n        const { fillColorIndex } = command;\n        displayManager.assertValidColorIndex(fillColorIndex);\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, fillColorIndex);\n      }\n      break;\n    case \"selectBackgroundColor\":\n      {\n        const { backgroundColorIndex } = command;\n        displayManager.assertValidColorIndex(backgroundColorIndex);\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, backgroundColorIndex);\n      }\n      break;\n    case \"selectLineColor\":\n      {\n        const { lineColorIndex } = command;\n        displayManager.assertValidColorIndex(lineColorIndex);\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, lineColorIndex);\n      }\n      break;\n    case \"setIgnoreFill\":\n      {\n        const { ignoreFill } = command;\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, ignoreFill ? 1 : 0);\n      }\n      break;\n    case \"setIgnoreLine\":\n      {\n        const { ignoreLine } = command;\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, ignoreLine ? 1 : 0);\n      }\n      break;\n    case \"setFillBackground\":\n      {\n        const { fillBackground } = command;\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, fillBackground ? 1 : 0);\n      }\n      break;\n    case \"setLineWidth\":\n      {\n        const { lineWidth } = command;\n        displayManager.assertValidLineWidth(lineWidth);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, lineWidth, true);\n      }\n      break;\n    case \"setHorizontalAlignment\":\n      {\n        const { horizontalAlignment } = command;\n        assertValidAlignment(horizontalAlignment);\n        _console.log({ horizontalAlignment });\n        dataView = new DataView(new ArrayBuffer(1));\n        const alignmentEnum = DisplayAlignments.indexOf(horizontalAlignment);\n        dataView.setUint8(0, alignmentEnum);\n      }\n      break;\n    case \"setVerticalAlignment\":\n      {\n        const { verticalAlignment } = command;\n        assertValidAlignment(verticalAlignment);\n        _console.log({ verticalAlignment });\n        dataView = new DataView(new ArrayBuffer(1));\n        const alignmentEnum = DisplayAlignments.indexOf(verticalAlignment);\n        dataView.setUint8(0, alignmentEnum);\n      }\n      break;\n    case \"setRotation\":\n      {\n        let { rotation, isRadians } = command;\n        rotation = isRadians ? rotation : degToRad(rotation);\n        rotation = normalizeRadians(rotation);\n        isRadians = true;\n        // _console.log({ rotation, isRadians });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, formatRotation(rotation, isRadians), true);\n      }\n      break;\n    case \"setSegmentStartCap\":\n      {\n        const { segmentStartCap } = command;\n        assertValidSegmentCap(segmentStartCap);\n        _console.log({ segmentStartCap });\n        dataView = new DataView(new ArrayBuffer(1));\n        const segmentCapEnum = DisplaySegmentCaps.indexOf(segmentStartCap);\n        dataView.setUint8(0, segmentCapEnum);\n      }\n      break;\n    case \"setSegmentEndCap\":\n      {\n        const { segmentEndCap } = command;\n        assertValidSegmentCap(segmentEndCap);\n        _console.log({ segmentEndCap });\n        dataView = new DataView(new ArrayBuffer(1));\n        const segmentCapEnum = DisplaySegmentCaps.indexOf(segmentEndCap);\n        dataView.setUint8(0, segmentCapEnum);\n      }\n      break;\n    case \"setSegmentCap\":\n      {\n        const { segmentCap } = command;\n        assertValidSegmentCap(segmentCap);\n        _console.log({ segmentCap });\n        dataView = new DataView(new ArrayBuffer(1));\n        const segmentCapEnum = DisplaySegmentCaps.indexOf(segmentCap);\n        dataView.setUint8(0, segmentCapEnum);\n      }\n      break;\n    case \"setSegmentStartRadius\":\n      {\n        const { segmentStartRadius } = command;\n        _console.log({ segmentStartRadius });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, segmentStartRadius, true);\n      }\n      break;\n    case \"setSegmentEndRadius\":\n      {\n        const { segmentEndRadius } = command;\n        _console.log({ segmentEndRadius });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, segmentEndRadius, true);\n      }\n      break;\n    case \"setSegmentRadius\":\n      {\n        const { segmentRadius } = command;\n        _console.log({ segmentRadius });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, segmentRadius, true);\n      }\n      break;\n    case \"setCropTop\":\n      {\n        const { cropTop } = command;\n        _console.log({ cropTop });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, cropTop, true);\n      }\n      break;\n    case \"setCropRight\":\n      {\n        const { cropRight } = command;\n        _console.log({ cropRight });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, cropRight, true);\n      }\n      break;\n    case \"setCropBottom\":\n      {\n        const { cropBottom } = command;\n        _console.log({ cropBottom });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, cropBottom, true);\n      }\n      break;\n    case \"setCropLeft\":\n      {\n        const { cropLeft } = command;\n        _console.log({ cropLeft });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, cropLeft, true);\n      }\n      break;\n    case \"setRotationCropTop\":\n      {\n        const { rotationCropTop } = command;\n        _console.log({ rotationCropTop });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, rotationCropTop, true);\n      }\n      break;\n    case \"setRotationCropRight\":\n      {\n        const { rotationCropRight } = command;\n        _console.log({ rotationCropRight });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, rotationCropRight, true);\n      }\n      break;\n    case \"setRotationCropBottom\":\n      {\n        const { rotationCropBottom } = command;\n        _console.log({ rotationCropBottom });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, rotationCropBottom, true);\n      }\n      break;\n    case \"setRotationCropLeft\":\n      {\n        const { rotationCropLeft } = command;\n        _console.log({ rotationCropLeft });\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, rotationCropLeft, true);\n      }\n      break;\n    case \"selectBitmapColor\":\n      {\n        const { bitmapColorIndex, colorIndex } = command;\n        displayManager.assertValidColorIndex(bitmapColorIndex);\n        displayManager.assertValidColorIndex(colorIndex);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint8(0, bitmapColorIndex);\n        dataView.setUint8(1, colorIndex);\n      }\n      break;\n    case \"selectBitmapColors\":\n      {\n        const { bitmapColorPairs } = command;\n\n        _console.assertRangeWithError(\n          \"bitmapColors\",\n          bitmapColorPairs.length,\n          1,\n          displayManager.numberOfColors\n        );\n        const bitmapColorIndices =\n          displayManager.contextState.bitmapColorIndices.slice();\n        bitmapColorPairs.forEach(({ bitmapColorIndex, colorIndex }) => {\n          displayManager.assertValidColorIndex(bitmapColorIndex);\n          displayManager.assertValidColorIndex(colorIndex);\n          bitmapColorIndices[bitmapColorIndex] = colorIndex;\n        });\n\n        dataView = new DataView(\n          new ArrayBuffer(bitmapColorPairs.length * 2 + 1)\n        );\n        let offset = 0;\n        dataView.setUint8(offset++, bitmapColorPairs.length);\n        bitmapColorPairs.forEach(({ bitmapColorIndex, colorIndex }) => {\n          dataView!.setUint8(offset, bitmapColorIndex);\n          dataView!.setUint8(offset + 1, colorIndex);\n          offset += 2;\n        });\n      }\n      break;\n    case \"setBitmapScaleX\":\n      {\n        let { bitmapScaleX } = command;\n        bitmapScaleX = clamp(bitmapScaleX, minDisplayScale, maxDisplayScale);\n        bitmapScaleX = roundScale(bitmapScaleX);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, formatScale(bitmapScaleX), true);\n      }\n      break;\n    case \"setBitmapScaleY\":\n      {\n        let { bitmapScaleY } = command;\n        bitmapScaleY = clamp(bitmapScaleY, minDisplayScale, maxDisplayScale);\n        bitmapScaleY = roundScale(bitmapScaleY);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, formatScale(bitmapScaleY), true);\n      }\n      break;\n    case \"setBitmapScale\":\n      {\n        let { bitmapScale } = command;\n        bitmapScale = clamp(bitmapScale, minDisplayScale, maxDisplayScale);\n        bitmapScale = roundScale(bitmapScale);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, formatScale(bitmapScale), true);\n      }\n      break;\n    case \"selectSpriteColor\":\n      {\n        const { spriteColorIndex, colorIndex } = command;\n        displayManager.assertValidColorIndex(spriteColorIndex);\n        displayManager.assertValidColorIndex(colorIndex);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint8(0, spriteColorIndex);\n        dataView.setUint8(1, colorIndex);\n      }\n      break;\n    case \"selectSpriteColors\":\n      {\n        const { spriteColorPairs } = command;\n        _console.assertRangeWithError(\n          \"spriteColors\",\n          spriteColorPairs.length,\n          1,\n          displayManager.numberOfColors\n        );\n        const spriteColorIndices =\n          displayManager.contextState.spriteColorIndices.slice();\n        spriteColorPairs.forEach(({ spriteColorIndex, colorIndex }) => {\n          displayManager.assertValidColorIndex(spriteColorIndex);\n          displayManager.assertValidColorIndex(colorIndex);\n          spriteColorIndices[spriteColorIndex] = colorIndex;\n        });\n\n        dataView = new DataView(\n          new ArrayBuffer(spriteColorPairs.length * 2 + 1)\n        );\n        let offset = 0;\n        dataView.setUint8(offset++, spriteColorPairs.length);\n        spriteColorPairs.forEach(({ spriteColorIndex, colorIndex }) => {\n          dataView!.setUint8(offset, spriteColorIndex);\n          dataView!.setUint8(offset + 1, colorIndex);\n          offset += 2;\n        });\n      }\n      break;\n    case \"setSpriteScaleX\":\n      {\n        let { spriteScaleX } = command;\n        spriteScaleX = clamp(spriteScaleX, minDisplayScale, maxDisplayScale);\n        spriteScaleX = roundScale(spriteScaleX);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, formatScale(spriteScaleX), true);\n      }\n      break;\n    case \"setSpriteScaleY\":\n      {\n        let { spriteScaleY } = command;\n        spriteScaleY = clamp(spriteScaleY, minDisplayScale, maxDisplayScale);\n        spriteScaleY = roundScale(spriteScaleY);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, formatScale(spriteScaleY), true);\n      }\n      break;\n    case \"setSpriteScale\":\n      {\n        let { spriteScale } = command;\n        spriteScale = clamp(spriteScale, minDisplayScale, maxDisplayScale);\n        spriteScale = roundScale(spriteScale);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, formatScale(spriteScale), true);\n      }\n      break;\n    case \"setSpritesLineHeight\":\n      {\n        const { spritesLineHeight } = command;\n        displayManager.assertValidLineWidth(spritesLineHeight);\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setUint16(0, spritesLineHeight, true);\n      }\n      break;\n    case \"setSpritesDirection\":\n      {\n        const { spritesDirection } = command;\n        assertValidDirection(spritesDirection);\n        _console.log({ spritesDirection });\n        dataView = new DataView(new ArrayBuffer(1));\n        const alignmentEnum = DisplayDirections.indexOf(spritesDirection);\n        dataView.setUint8(0, alignmentEnum);\n      }\n      break;\n    case \"setSpritesLineDirection\":\n      {\n        const { spritesLineDirection } = command;\n        assertValidDirection(spritesLineDirection);\n        _console.log({ spritesLineDirection });\n        dataView = new DataView(new ArrayBuffer(1));\n        const alignmentEnum = DisplayDirections.indexOf(spritesLineDirection);\n        dataView.setUint8(0, alignmentEnum);\n      }\n      break;\n    case \"setSpritesSpacing\":\n      {\n        const { spritesSpacing } = command;\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, spritesSpacing, true);\n      }\n      break;\n    case \"setSpritesLineSpacing\":\n      {\n        const { spritesLineSpacing } = command;\n        dataView = new DataView(new ArrayBuffer(2));\n        dataView.setInt16(0, spritesLineSpacing, true);\n      }\n      break;\n    case \"setSpritesAlignment\":\n      {\n        const { spritesAlignment } = command;\n        assertValidAlignment(spritesAlignment);\n        _console.log({ spritesAlignment });\n        dataView = new DataView(new ArrayBuffer(1));\n        const alignmentEnum = DisplayAlignments.indexOf(spritesAlignment);\n        dataView.setUint8(0, alignmentEnum);\n      }\n      break;\n    case \"setSpritesLineAlignment\":\n      {\n        const { spritesLineAlignment } = command;\n        assertValidAlignment(spritesLineAlignment);\n        _console.log({ spritesLineAlignment });\n        dataView = new DataView(new ArrayBuffer(1));\n        const alignmentEnum = DisplayAlignments.indexOf(spritesLineAlignment);\n        dataView.setUint8(0, alignmentEnum);\n      }\n      break;\n    case \"clearRect\":\n      {\n        const { x, y, width, height } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 4));\n        dataView.setInt16(0, x, true);\n        dataView.setInt16(2, y, true);\n        dataView.setInt16(4, width, true);\n        dataView.setInt16(6, height, true);\n      }\n      break;\n    case \"drawRect\":\n      {\n        const { offsetX, offsetY, width, height } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 4));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, width, true);\n        dataView.setUint16(6, height, true);\n      }\n      break;\n    case \"drawRoundRect\":\n      {\n        const { offsetX, offsetY, width, height, borderRadius } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 4 + 1));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, width, true);\n        dataView.setUint16(6, height, true);\n        dataView.setUint8(8, borderRadius);\n      }\n      break;\n    case \"drawCircle\":\n      {\n        const { offsetX, offsetY, radius } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 3));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, radius, true);\n      }\n      break;\n    case \"drawEllipse\":\n      {\n        const { offsetX, offsetY, radiusX, radiusY } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 4));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, radiusX, true);\n        dataView.setUint16(6, radiusY, true);\n      }\n      break;\n    case \"drawRegularPolygon\":\n      {\n        const { offsetX, offsetY, radius, numberOfSides } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 3 + 1));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, radius, true);\n        dataView.setUint8(6, numberOfSides);\n      }\n      break;\n    case \"drawPolygon\":\n      {\n        const { points } = command;\n        _console.assertRangeWithError(\"numberOfPoints\", points.length, 2, 255);\n        dataView = serializePoints(points);\n      }\n      break;\n    case \"drawWireframe\":\n      {\n        const { wireframe } = command;\n        const { points, edges } = wireframe;\n        if (wireframe.points.length == 0) {\n          return;\n        }\n        assertValidWireframe(wireframe);\n        // [pointDataType, numberOfPoints, ...points, numberOfEdges, ...edges]\n        const pointsDataView = serializePoints(points);\n\n        const edgesDataView = new DataView(\n          new ArrayBuffer(1 + 2 * edges.length)\n        );\n        let edgesDataOffset = 0;\n        edgesDataView.setUint8(edgesDataOffset++, edges.length);\n        edges.forEach((edge) => {\n          edgesDataView.setUint8(edgesDataOffset++, edge.startIndex);\n          edgesDataView.setUint8(edgesDataOffset++, edge.endIndex);\n        });\n\n        dataView = new DataView(\n          concatenateArrayBuffers(pointsDataView, edgesDataView)\n        );\n      }\n      break;\n    case \"drawQuadraticBezierCurve\":\n    case \"drawCubicBezierCurve\":\n      {\n        const { controlPoints } = command;\n        const curveType: DisplayBezierCurveType =\n          command.type == \"drawCubicBezierCurve\" ? \"cubic\" : \"quadratic\";\n        assertValidNumberOfControlPoints(curveType, controlPoints);\n        dataView = new DataView(new ArrayBuffer(4 * controlPoints.length));\n        let offset = 0;\n        controlPoints.forEach((controlPoint) => {\n          dataView!.setInt16(offset, controlPoint.x, true);\n          offset += 2;\n          dataView!.setInt16(offset, controlPoint.y, true);\n          offset += 2;\n        });\n      }\n      break;\n    case \"drawQuadraticBezierCurves\":\n    case \"drawCubicBezierCurves\":\n      {\n        const { controlPoints } = command;\n        const curveType: DisplayBezierCurveType =\n          command.type == \"drawCubicBezierCurves\" ? \"cubic\" : \"quadratic\";\n        assertValidPathNumberOfControlPoints(curveType, controlPoints);\n        dataView = serializePoints(controlPoints);\n      }\n      break;\n    case \"drawPath\":\n    case \"drawClosedPath\":\n      {\n        const { curves } = command;\n        // _console.log(\"curves\", curves);\n        assertValidPath(curves);\n        const typesDataView = new DataView(\n          new ArrayBuffer(Math.ceil(curves.length / displayCurveTypesPerByte))\n        );\n        // _console.log({ \"curves.length\": curves.length, typesDataView });\n        const controlPointsDataViews: DataView[] = [];\n\n        // [pointDataType, numberOfCurves, numberOfPoints, ...curveTypes, ...points]\n\n        const allControlPoints: Vector2[] = [];\n        curves.forEach((curve) => {\n          allControlPoints.push(...curve.controlPoints);\n        });\n        const pointDataType = getPointDataType(allControlPoints);\n        const numberOfControlPoints = allControlPoints.length;\n        _console.log({ numberOfControlPoints });\n\n        curves.forEach((curve, index) => {\n          const { type, controlPoints } = curve;\n          const typeByteIndex = Math.floor(index / displayCurveTypesPerByte);\n          const typeBitShift =\n            (index % displayCurveTypesPerByte) * displayCurveTypeBitWidth;\n          // _console.log({ type, typeByteIndex, typeBitShift });\n          let typeValue = typesDataView.getUint8(typeByteIndex) || 0;\n          typeValue |= DisplayBezierCurveTypes.indexOf(type) << typeBitShift;\n          typesDataView.setUint8(typeByteIndex, typeValue);\n\n          const controlPointsDataView = serializePoints(\n            controlPoints,\n            pointDataType,\n            true\n          );\n          controlPointsDataViews.push(controlPointsDataView);\n        });\n\n        const controlPointsBuffer = concatenateArrayBuffers(\n          ...controlPointsDataViews\n        );\n        const headerDataView = new DataView(new ArrayBuffer(3));\n        headerDataView.setUint8(\n          0,\n          DisplayPointDataTypes.indexOf(pointDataType)\n        );\n        headerDataView.setUint8(1, curves.length);\n        headerDataView.setUint8(2, numberOfControlPoints);\n        dataView = new DataView(\n          concatenateArrayBuffers(\n            headerDataView,\n            typesDataView,\n            controlPointsBuffer\n          )\n        );\n      }\n      break;\n    case \"drawSegment\":\n      {\n        const { startX, startY, endX, endY } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 4));\n        dataView.setInt16(0, startX, true);\n        dataView.setInt16(2, startY, true);\n        dataView.setInt16(4, endX, true);\n        dataView.setInt16(6, endY, true);\n      }\n      break;\n    case \"drawSegments\":\n      {\n        const { points } = command;\n        _console.assertRangeWithError(\"numberOfPoints\", points.length, 2, 255);\n        dataView = serializePoints(points);\n      }\n      break;\n    case \"drawArc\":\n      {\n        let { offsetX, offsetY, radius, isRadians, startAngle, angleOffset } =\n          command;\n\n        startAngle = isRadians ? startAngle : degToRad(startAngle);\n        startAngle = normalizeRadians(startAngle);\n\n        angleOffset = isRadians ? angleOffset : degToRad(angleOffset);\n        angleOffset = clamp(angleOffset, -twoPi, twoPi);\n\n        angleOffset /= twoPi;\n        angleOffset *= (angleOffset > 0 ? Int16Max - 1 : -Int16Min) - 1;\n\n        isRadians = true;\n\n        dataView = new DataView(new ArrayBuffer(2 * 5));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, radius, true);\n        dataView.setUint16(6, formatRotation(startAngle, isRadians), true);\n        dataView.setInt16(8, angleOffset, true);\n      }\n      break;\n    case \"drawArcEllipse\":\n      {\n        let {\n          offsetX,\n          offsetY,\n          radiusX,\n          radiusY,\n          isRadians,\n          startAngle,\n          angleOffset,\n        } = command;\n\n        startAngle = isRadians ? startAngle : degToRad(startAngle);\n        startAngle = normalizeRadians(startAngle);\n\n        angleOffset = isRadians ? angleOffset : degToRad(angleOffset);\n        angleOffset = clamp(angleOffset, -twoPi, twoPi);\n\n        angleOffset /= twoPi;\n        angleOffset *= (angleOffset > 0 ? Int16Max : -Int16Min) - 1;\n\n        isRadians = true;\n\n        dataView = new DataView(new ArrayBuffer(2 * 6));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, radiusX, true);\n        dataView.setUint16(6, radiusY, true);\n        dataView.setUint16(8, formatRotation(startAngle, isRadians), true);\n        dataView.setUint16(10, angleOffset, true);\n      }\n      break;\n    case \"drawBitmap\":\n      {\n        const { bitmap, offsetX, offsetY } = command;\n        displayManager.assertValidBitmap(bitmap, false);\n        dataView = new DataView(new ArrayBuffer(drawBitmapHeaderLength));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, bitmap.width, true);\n        dataView.setUint32(6, bitmap.pixels.length, true);\n        dataView.setUint8(10, bitmap.numberOfColors);\n\n        const bitmapData = getBitmapData(bitmap);\n        dataView.setUint16(11, bitmapData.byteLength, true);\n        const buffer = concatenateArrayBuffers(dataView, bitmapData);\n        dataView = new DataView(buffer);\n      }\n      break;\n    case \"selectSpriteSheet\":\n      {\n        const { spriteSheetIndex } = command;\n        dataView = new DataView(new ArrayBuffer(1));\n        dataView.setUint8(0, spriteSheetIndex);\n      }\n      break;\n    case \"drawSprite\":\n      {\n        const { offsetX, offsetY, spriteIndex, use2Bytes } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 2 + (use2Bytes ? 2 : 1)));\n        let offset = 0;\n        dataView.setInt16(offset, offsetX, true);\n        offset += 2;\n        dataView.setInt16(offset, offsetY, true);\n        offset += 2;\n        if (use2Bytes) {\n          dataView.setUint16(offset, spriteIndex, true);\n          offset += 2;\n        } else {\n          dataView.setUint8(offset++, spriteIndex!);\n        }\n      }\n      break;\n    case \"drawSprites\":\n      {\n        const { offsetX, offsetY, spriteSerializedLines } = command;\n        const lineArrayBuffers: ArrayBuffer[] = [];\n        spriteSerializedLines.forEach((spriteLines) => {\n          const subLineArrayBuffers: ArrayBuffer[] = [];\n          spriteLines.forEach((subSpriteLine) => {\n            const { spriteSheetIndex, spriteIndices, use2Bytes } =\n              subSpriteLine;\n            const subLineSpriteIndicesDataView = new DataView(\n              new ArrayBuffer(spriteIndices.length * (use2Bytes ? 2 : 1))\n            );\n            spriteIndices.forEach((spriteIndex, i) => {\n              if (use2Bytes) {\n                subLineSpriteIndicesDataView.setUint16(\n                  i * 2,\n                  spriteIndex,\n                  true\n                );\n              } else {\n                subLineSpriteIndicesDataView.setUint8(i, spriteIndex);\n              }\n            });\n            const subLineHeaderDataView = new DataView(new ArrayBuffer(2));\n            subLineHeaderDataView.setUint8(0, spriteSheetIndex);\n            subLineHeaderDataView.setUint8(1, spriteIndices.length);\n            subLineArrayBuffers.push(\n              concatenateArrayBuffers(\n                subLineHeaderDataView,\n                subLineSpriteIndicesDataView\n              )\n            );\n          });\n          const lineArrayHeaderDataView = new DataView(new ArrayBuffer(2));\n          const concatenatedSubLineArrayBuffers = concatenateArrayBuffers(\n            ...subLineArrayBuffers\n          );\n          lineArrayHeaderDataView.setUint16(\n            0,\n            concatenatedSubLineArrayBuffers.byteLength,\n            true\n          );\n          lineArrayBuffers.push(\n            concatenateArrayBuffers(\n              lineArrayHeaderDataView,\n              concatenatedSubLineArrayBuffers\n            )\n          );\n        });\n\n        const concatenatedLineArrayBuffers = concatenateArrayBuffers(\n          ...lineArrayBuffers\n        );\n\n        dataView = new DataView(new ArrayBuffer(2 * 3));\n        let offset = 0;\n        dataView.setInt16(offset, offsetX, true);\n        offset += 2;\n        dataView.setInt16(offset, offsetY, true);\n        offset += 2;\n        dataView.setUint16(\n          offset,\n          concatenatedLineArrayBuffers.byteLength,\n          true\n        );\n        offset += 2;\n\n        const buffer = concatenateArrayBuffers(\n          dataView,\n          concatenatedLineArrayBuffers\n        );\n        dataView = new DataView(buffer);\n      }\n      break;\n    case \"startSprite\":\n      {\n        const { offsetX, offsetY, width, height } = command;\n        dataView = new DataView(new ArrayBuffer(2 * 4));\n        dataView.setInt16(0, offsetX, true);\n        dataView.setInt16(2, offsetY, true);\n        dataView.setUint16(4, width, true);\n        dataView.setUint16(6, height, true);\n      }\n      break;\n  }\n\n  return dataView;\n}\nexport function serializeContextCommands(\n  displayManager: DisplayManagerInterface,\n  commands: DisplayContextCommand[]\n) {\n  const serializedContextCommandArray = commands\n    .filter((command) => !command.hide)\n    .map((command) => {\n      const displayContextCommandEnum = DisplayContextCommandTypes.indexOf(\n        command.type\n      );\n      const serializedContextCommand = serializeContextCommand(\n        displayManager,\n        command\n      );\n      return concatenateArrayBuffers(\n        UInt8ByteBuffer(displayContextCommandEnum),\n        serializedContextCommand\n      );\n    });\n  const serializedContextCommands = concatenateArrayBuffers(\n    serializedContextCommandArray\n  );\n  _console.log(\n    \"serializedContextCommands\",\n    commands,\n    serializedContextCommandArray,\n    serializedContextCommands\n  );\n  return serializedContextCommands;\n}\n\nconst DrawDisplayContextCommandTypes = [\n  \"drawRect\",\n  \"drawRoundRect\",\n\n  \"drawCircle\",\n  \"drawArc\",\n\n  \"drawEllipse\",\n  \"drawArcEllipse\",\n\n  \"drawSegment\",\n  \"drawSegments\",\n\n  \"drawRegularPolygon\",\n  \"drawPolygon\",\n\n  \"drawWireframe\",\n\n  \"drawQuadraticBezierCurve\",\n  \"drawQuadraticBezierCurves\",\n  \"drawCubicBezierCurve\",\n  \"drawCubicBezierCurves\",\n\n  \"drawPath\",\n  \"drawClosedPath\",\n\n  \"drawBitmap\",\n\n  \"drawSprite\",\n  \"drawSprites\",\n] as const satisfies readonly DisplayContextCommandType[];\ntype DrawDisplayContextCommandType =\n  (typeof DrawDisplayContextCommandTypes)[number];\n\nconst StateDisplayContextCommandTypes = [\n  \"setColor\",\n  \"setColorOpacity\",\n  \"setOpacity\",\n\n  \"saveContext\",\n  \"restoreContext\",\n\n  \"selectBackgroundColor\",\n  \"selectFillColor\",\n  \"selectLineColor\",\n\n  \"setIgnoreFill\",\n  \"setIgnoreLine\",\n  \"setFillBackground\",\n\n  \"setLineWidth\",\n  \"setRotation\",\n  \"clearRotation\",\n\n  \"setHorizontalAlignment\",\n  \"setVerticalAlignment\",\n  \"resetAlignment\",\n\n  \"setSegmentStartCap\",\n  \"setSegmentEndCap\",\n  \"setSegmentCap\",\n\n  \"setSegmentStartRadius\",\n  \"setSegmentEndRadius\",\n  \"setSegmentRadius\",\n\n  \"setCropTop\",\n  \"setCropRight\",\n  \"setCropBottom\",\n  \"setCropLeft\",\n  \"clearCrop\",\n\n  \"setRotationCropTop\",\n  \"setRotationCropRight\",\n  \"setRotationCropBottom\",\n  \"setRotationCropLeft\",\n  \"clearRotationCrop\",\n\n  \"selectBitmapColor\",\n  \"selectBitmapColors\",\n  \"setBitmapScaleX\",\n  \"setBitmapScaleY\",\n  \"setBitmapScale\",\n  \"resetBitmapScale\",\n\n  \"selectSpriteColor\",\n  \"selectSpriteColors\",\n  \"resetSpriteColors\",\n  \"setSpriteScaleX\",\n  \"setSpriteScaleY\",\n  \"setSpriteScale\",\n  \"resetSpriteScale\",\n\n  \"setSpritesLineHeight\",\n  \"setSpritesDirection\",\n  \"setSpritesLineDirection\",\n  \"setSpritesSpacing\",\n  \"setSpritesLineSpacing\",\n  \"setSpritesAlignment\",\n  \"setSpritesLineAlignment\",\n\n  \"selectSpriteSheet\",\n] as const satisfies readonly DisplayContextCommandType[];\ntype StateDisplayContextCommandType =\n  (typeof StateDisplayContextCommandTypes)[number];\n\nconst SpritesDisplayContextCommandTypes = [\n  \"selectSpriteColor\",\n  \"selectSpriteColors\",\n  \"resetSpriteColors\",\n  \"setSpriteScaleX\",\n  \"setSpriteScaleY\",\n  \"setSpriteScale\",\n  \"resetSpriteScale\",\n\n  \"setSpritesLineHeight\",\n  \"setSpritesDirection\",\n  \"setSpritesLineDirection\",\n  \"setSpritesSpacing\",\n  \"setSpritesLineSpacing\",\n  \"setSpritesAlignment\",\n  \"setSpritesLineAlignment\",\n\n  \"selectSpriteSheet\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type SpritesDisplayContextCommandType =\n  (typeof SpritesDisplayContextCommandTypes)[number];\n\nconst PathDrawDisplayContextCommandTypes = [\n  \"drawSegment\",\n  \"drawSegments\",\n  \"drawQuadraticBezierCurve\",\n  \"drawQuadraticBezierCurves\",\n  \"drawCubicBezierCurve\",\n  \"drawCubicBezierCurves\",\n  \"drawPath\",\n  \"drawWireframe\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type PathDrawDisplayContextCommandType =\n  (typeof PathDrawDisplayContextCommandTypes)[number];\n\nconst PathStateDisplayContextCommandTypes = [\n  \"setSegmentRadius\",\n  \"setSegmentEndRadius\",\n  \"setSegmentStartRadius\",\n  \"setSegmentCap\",\n  \"setSegmentStartCap\",\n  \"setSegmentEndCap\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type PathStateDisplayContextCommandType =\n  (typeof PathStateDisplayContextCommandTypes)[number];\n\nconst BitmapDisplayContextCommandTypes = [\n  \"selectBitmapColor\",\n  \"selectBitmapColors\",\n  \"setBitmapScaleX\",\n  \"setBitmapScaleY\",\n  \"setBitmapScale\",\n  \"resetBitmapScale\",\n] as const satisfies readonly DisplayContextCommandType[];\nexport type BitmapDisplayContextCommandType =\n  (typeof BitmapDisplayContextCommandTypes)[number];\n\nconst contextCommandDependencies: Map<\n  Set<DisplayContextCommandType>,\n  Set<DisplayContextCommandType>\n> = new Map();\nfunction appendContextCommandDependencyPair(\n  key: DisplayContextCommandType[],\n  value: DisplayContextCommandType[]\n) {\n  contextCommandDependencies.set(new Set(key), new Set(value));\n}\nappendContextCommandDependencyPair(\n  [...PathStateDisplayContextCommandTypes],\n  [...PathDrawDisplayContextCommandTypes]\n);\nappendContextCommandDependencyPair(\n  [...StateDisplayContextCommandTypes],\n  [...DrawDisplayContextCommandTypes]\n);\nappendContextCommandDependencyPair(\n  [...SpritesDisplayContextCommandTypes],\n  [\"drawSprite\", \"drawSprites\"]\n);\nappendContextCommandDependencyPair(\n  [...BitmapDisplayContextCommandTypes],\n  [\"drawBitmap\"]\n);\n\n// TODO - can refine more (e.g. if ignoreLine, then skip setLineWidth, or skip if a set value is already default, etc)\n\nexport function trimContextCommands(commands: DisplayContextCommand[]) {\n  _console.log(\"trimming commands\", commands);\n  const trimmedCommands: DisplayContextCommand[] = [];\n\n  commands\n    .slice()\n    .reverse()\n    .forEach((command) => {\n      let include = true;\n\n      let dependencies: Set<DisplayContextCommandType> | undefined;\n      for (const [keys, values] of contextCommandDependencies) {\n        if (keys.has(command.type)) {\n          dependencies = values;\n          break;\n        }\n      }\n\n      //_console.log(\"command\", command, \"dependencies\", dependencies);\n\n      if (dependencies) {\n        const similarCommandIndex = trimmedCommands.findIndex(\n          (trimmedCommand) => {\n            return trimmedCommand.type == command.type;\n          }\n        );\n        const dependentCommandIndex = trimmedCommands.findIndex(\n          (trimmedCommand) => dependencies.has(trimmedCommand.type)\n        );\n\n        //_console.log({ similarCommandIndex, dependentCommandIndex });\n\n        if (dependentCommandIndex == -1) {\n          include = false;\n        } else if (similarCommandIndex != -1) {\n          include = similarCommandIndex > dependentCommandIndex;\n        }\n      }\n      if (include) {\n        trimmedCommands.unshift(command);\n      } else {\n        //_console.log(\"skipping command\", command);\n      }\n    });\n\n  _console.log(\"trimmedCommands\", trimmedCommands);\n  return trimmedCommands;\n}\n","// @ts-expect-error\nimport RGBQuant from \"rgbquant\";\nimport { createConsole } from \"./Console.ts\";\nimport { hexToRGB, rgbToHex } from \"./ColorUtils.ts\";\nimport { getVector3Length, Vector3 } from \"./MathUtils.ts\";\nimport {\n  DisplayColorRGB,\n  numberOfColorsToPixelDepth,\n  pixelDepthToNumberOfColors,\n  pixelDepthToPixelBitWidth,\n  pixelDepthToPixelsPerByte,\n} from \"./DisplayUtils.ts\";\nimport { DisplayBitmap, DisplayPixelDepths } from \"../DisplayManager.ts\";\nimport {\n  calculateSpriteSheetHeaderLength,\n  DisplaySprite,\n  DisplaySpriteSheet,\n} from \"./DisplaySpriteSheetUtils.ts\";\n\nconst _console = createConsole(\"DisplayBitmapUtils\", { log: false });\n\nexport const drawBitmapHeaderLength = 2 + 2 + 2 + 4 + 1 + 2; // x, y, width, numberOfPixels, numberOfColors, dataLength\n\nexport function getBitmapData(bitmap: DisplayBitmap) {\n  const pixelDataLength = getBitmapNumberOfBytes(bitmap);\n  const dataView = new DataView(new ArrayBuffer(pixelDataLength));\n  const pixelDepth = numberOfColorsToPixelDepth(bitmap.numberOfColors)!;\n  const pixelsPerByte = pixelDepthToPixelsPerByte(pixelDepth);\n  bitmap.pixels.forEach((bitmapColorIndex, pixelIndex) => {\n    const byteIndex = Math.floor(pixelIndex / pixelsPerByte);\n    const byteSlot = pixelIndex % pixelsPerByte;\n    const pixelBitWidth = pixelDepthToPixelBitWidth(pixelDepth);\n    const bitOffset = pixelBitWidth * byteSlot;\n    const shift = 8 - pixelBitWidth - bitOffset;\n    let value = dataView.getUint8(byteIndex);\n    value |= bitmapColorIndex << shift;\n    dataView.setUint8(byteIndex, value);\n  });\n  _console.log(\"getBitmapData\", bitmap, dataView);\n  return dataView;\n}\n\nexport async function quantizeCanvas(\n  canvas: HTMLCanvasElement,\n  numberOfColors: number,\n  colors?: string[]\n) {\n  _console.assertWithError(\n    numberOfColors > 1,\n    \"numberOfColors must be greater than 1\"\n  );\n\n  const ctx = canvas.getContext(\"2d\", { willReadFrequently: true })!;\n  removeAlphaFromCanvas(canvas);\n\n  const isSmall = canvas.width * canvas.height < 4;\n\n  const quantOptions = {\n    method: isSmall ? 1 : 2,\n    colors: numberOfColors,\n    dithKern: null, // Disable dithering\n    useCache: false, // Disable color caching to force exact matches\n    reIndex: true, // Ensure strict re-indexing to the palette\n    orDist: \"manhattan\",\n  };\n\n  if (colors) {\n    // @ts-ignore\n    quantOptions.palette = colors.map((color) => {\n      const rgb = hexToRGB(color);\n      if (rgb) {\n        const { r, g, b } = rgb;\n        return [r, g, b];\n      } else {\n        _console.error(`invalid rgb hex \"${color}\"`);\n      }\n    });\n  }\n  //_console.log(\"quantizeImage options\", quantOptions);\n  const quantizer = new RGBQuant(quantOptions);\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  quantizer.sample(imageData);\n\n  const quantizedPixels = quantizer.reduce(imageData.data);\n  const quantizedImageData = new ImageData(\n    new Uint8ClampedArray(quantizedPixels.buffer),\n    canvas.width,\n    canvas.height\n  );\n  ctx.putImageData(quantizedImageData, 0, 0);\n\n  const pixels = quantizedImageData.data;\n\n  const quantizedPaletteData: Uint8Array = quantizer.palette();\n  const numberOfQuantizedPaletteColors = quantizedPaletteData.byteLength / 4;\n  //_console.log(\"quantizedPaletteData\", quantizedPaletteData);\n  const quantizedPaletteColors: DisplayColorRGB[] = [];\n  let closestColorIndexToBlack = 0;\n  let closestColorDistanceToBlack = Infinity;\n  const vector3: Vector3 = { x: 0, y: 0, z: 0 };\n  for (\n    let colorIndex = 0;\n    colorIndex < numberOfQuantizedPaletteColors;\n    colorIndex++\n  ) {\n    const rgb: DisplayColorRGB = {\n      r: quantizedPaletteData[colorIndex * 4],\n      g: quantizedPaletteData[colorIndex * 4 + 1],\n      b: quantizedPaletteData[colorIndex * 4 + 2],\n    };\n    quantizedPaletteColors.push(rgb);\n    vector3.x = rgb.r;\n    vector3.y = rgb.g;\n    vector3.z = rgb.b;\n\n    const distanceToBlack = getVector3Length(vector3);\n    if (distanceToBlack < closestColorDistanceToBlack) {\n      closestColorDistanceToBlack = distanceToBlack;\n      closestColorIndexToBlack = colorIndex;\n    }\n  }\n  //_console.log({ closestColorIndexToBlack, closestColorDistanceToBlack });\n  if (closestColorIndexToBlack != 0) {\n    const [currentBlack, newBlack] = [\n      quantizedPaletteColors[0],\n      quantizedPaletteColors[closestColorIndexToBlack],\n    ];\n    quantizedPaletteColors[0] = newBlack;\n    quantizedPaletteColors[closestColorIndexToBlack] = currentBlack;\n  }\n  //_console.log(\"quantizedPaletteColors\", quantizedPaletteColors);\n  const quantizedColors = quantizedPaletteColors.map((rgb, index) => {\n    const hex = rgbToHex(rgb);\n    return hex;\n  });\n  //_console.log(\"quantizedColors\", quantizedColors);\n\n  const quantizedColorIndices: number[] = [];\n  for (let i = 0; i < pixels.length; i += 4) {\n    const r = pixels[i];\n    const g = pixels[i + 1];\n    const b = pixels[i + 2];\n    const a = pixels[i + 3];\n\n    const hex = rgbToHex({ r, g, b });\n    quantizedColorIndices.push(quantizedColors.indexOf(hex));\n  }\n  //_console.log(\"quantizedColorIndices\", quantizedColorIndices);\n\n  const promise = new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, \"image/png\");\n  });\n\n  const blob = await promise;\n  return {\n    blob,\n    colors: quantizedColors,\n    colorIndices: quantizedColorIndices,\n  };\n}\n\nexport async function quantizeImage(\n  image: HTMLImageElement,\n  width: number,\n  height: number,\n  numberOfColors: number,\n  colors?: string[],\n  canvas?: HTMLCanvasElement\n) {\n  canvas = canvas || document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\", { willReadFrequently: true })!;\n\n  let { naturalWidth: imageWidth, naturalHeight: imageHeight } = image;\n  _console.log({ imageWidth, imageHeight });\n\n  canvas.width = width;\n  canvas.height = height;\n\n  ctx.imageSmoothingEnabled = false;\n\n  ctx.drawImage(image, 0, 0, width, height);\n\n  return quantizeCanvas(canvas, numberOfColors, colors);\n}\n\nexport function resizeImage(\n  image: CanvasImageSource,\n  width: number,\n  height: number,\n  canvas?: HTMLCanvasElement\n) {\n  canvas = canvas || document.createElement(\"canvas\");\n\n  const ctx = canvas.getContext(\"2d\", { willReadFrequently: true })!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  ctx.imageSmoothingEnabled = false;\n\n  ctx.drawImage(image, 0, 0, width, height);\n\n  return canvas;\n}\nexport function cropCanvas(\n  canvas: HTMLCanvasElement,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  targetCanvas?: HTMLCanvasElement\n) {\n  targetCanvas = targetCanvas || document.createElement(\"canvas\");\n  const ctx = targetCanvas.getContext(\"2d\", { willReadFrequently: true })!;\n\n  targetCanvas.width = width;\n  targetCanvas.height = height;\n\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(canvas, x, y, width, height, 0, 0, width, height);\n\n  return targetCanvas;\n}\nexport function removeAlphaFromCanvas(canvas: HTMLCanvasElement) {\n  const ctx = canvas.getContext(\"2d\", { willReadFrequently: true })!;\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n\n  // turn any non-opaque pixel to black\n  for (let i = 0; i < data.length; i += 4) {\n    const alpha = data[i + 3];\n\n    if (alpha < 255) {\n      data[i] = 0;\n      data[i + 1] = 0;\n      data[i + 2] = 0;\n      data[i + 3] = 255;\n    }\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n\n  return canvas;\n}\n\nexport async function canvasToBlob(\n  canvas: HTMLCanvasElement,\n  type: \"image/png\" | \"image/jpeg\" = \"image/jpeg\",\n  quality: number = 1\n) {\n  const promise = new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob(\n      (blob) => {\n        if (blob) {\n          resolve(blob);\n        } else {\n          reject();\n        }\n      },\n      type,\n      quality\n    );\n  });\n  const blob = await promise;\n  return blob;\n}\n\nexport async function resizeAndQuantizeImage(\n  image: CanvasImageSource,\n  width: number,\n  height: number,\n  numberOfColors: number,\n  colors?: string[],\n  canvas?: HTMLCanvasElement\n) {\n  canvas = canvas || document.createElement(\"canvas\");\n  resizeImage(image, width, height, canvas);\n  removeAlphaFromCanvas(canvas);\n  return quantizeCanvas(canvas, numberOfColors, colors);\n}\n\nexport async function imageToBitmap(\n  image: CanvasImageSource,\n  width: number,\n  height: number,\n  colors: string[],\n  bitmapColorIndices: number[],\n  numberOfColors?: number\n) {\n  if (numberOfColors == undefined) {\n    numberOfColors = colors.length;\n  }\n  const bitmapColors = bitmapColorIndices\n    .map((bitmapColorIndex) => colors[bitmapColorIndex])\n    .slice(0, numberOfColors);\n  const { blob, colorIndices } = await resizeAndQuantizeImage(\n    image,\n    width,\n    height,\n    numberOfColors,\n    bitmapColors\n  );\n  const bitmap: DisplayBitmap = {\n    numberOfColors,\n    pixels: colorIndices,\n    width,\n    height,\n  };\n  return { blob, bitmap };\n}\n\nconst drawSpriteBitmapCommandHeaderLength = 1 + 2 + 2 + 2 + 2 + 1 + 2; // command, offetXY, width, numberOfPixels, numberOfColors, pixelDataLength\nexport async function canvasToBitmaps(\n  canvas: HTMLCanvasElement,\n  numberOfColors: number,\n  mtu: number\n) {\n  const { blob, colors, colorIndices } = await quantizeCanvas(\n    canvas,\n    numberOfColors\n  );\n  const bitmapRows: DisplayBitmap[][] = [];\n\n  const { width, height } = canvas;\n\n  const numberOfPixels = width * height;\n  const pixelDepth = DisplayPixelDepths.find(\n    (pixelDepth) => pixelDepthToNumberOfColors(pixelDepth) >= numberOfColors\n  )!;\n  _console.assertWithError(\n    pixelDepth,\n    `no pixelDepth found that covers ${numberOfColors} colors`\n  );\n  const pixelsPerByte = pixelDepthToPixelsPerByte(pixelDepth);\n  const numberOfBytes = Math.ceil(numberOfPixels / pixelsPerByte);\n  _console.log({\n    width,\n    height,\n    numberOfPixels,\n    pixelDepth,\n    pixelsPerByte,\n    numberOfBytes,\n    mtu,\n  });\n\n  const maxPixelDataLength = mtu - (drawSpriteBitmapCommandHeaderLength + 5);\n  const maxPixels = Math.floor(maxPixelDataLength / pixelsPerByte);\n  const maxBitmapWidth = Math.min(maxPixels, width);\n  let maxBitmapHeight = 1;\n  if (maxBitmapWidth == width) {\n    const bitmapRowPixelDataLength = Math.ceil(width / pixelsPerByte);\n    maxBitmapHeight = Math.floor(maxPixelDataLength / bitmapRowPixelDataLength);\n  }\n  _console.log({\n    maxPixelDataLength,\n    maxPixels,\n    maxBitmapHeight,\n    maxBitmapWidth,\n  });\n\n  if (maxBitmapHeight >= height) {\n    _console.log(\"image is small enough for a single bitmap\");\n\n    const bitmap: DisplayBitmap = {\n      numberOfColors,\n      pixels: colorIndices,\n      width,\n      height,\n    };\n    bitmapRows.push([bitmap]);\n  } else {\n    let offsetX = 0;\n    let offsetY = 0;\n    const bitmapCanvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    const bitmapColorIndices: number[] = new Array(numberOfColors)\n      .fill(0)\n      .map((_, i) => i);\n    while (offsetY < height) {\n      const bitmapHeight = Math.min(maxBitmapHeight, height - offsetY);\n      offsetX = 0;\n      const bitmapRow: DisplayBitmap[] = [];\n      bitmapRows.push(bitmapRow);\n\n      while (offsetX < width) {\n        const bitmapWidth = Math.min(maxBitmapWidth, width - offsetX);\n        cropCanvas(\n          canvas,\n          offsetX,\n          offsetY,\n          bitmapWidth,\n          bitmapHeight,\n          bitmapCanvas\n        );\n        // _console.log(`cropping bitmap`, {\n        //   bitmapWidth,\n        //   bitmapHeight,\n        //   offsetX,\n        //   offsetY,\n        // });\n        const { bitmap } = await imageToBitmap(\n          bitmapCanvas,\n          bitmapWidth,\n          bitmapHeight,\n          colors,\n          bitmapColorIndices,\n          numberOfColors\n        );\n        // _console.log(\"bitmap\", bitmap);\n        bitmapRow.push(bitmap);\n        offsetX += bitmapWidth;\n      }\n      offsetY += bitmapHeight;\n    }\n  }\n\n  return { bitmapRows, colors };\n}\nexport async function imageToBitmaps(\n  image: HTMLImageElement,\n  width: number,\n  height: number,\n  numberOfColors: number,\n  mtu: number\n) {\n  const canvas = resizeImage(image, width, height);\n  return canvasToBitmaps(canvas, numberOfColors, mtu);\n}\n\nexport function getBitmapNumberOfBytes(bitmap: DisplayBitmap) {\n  const pixelDepth = numberOfColorsToPixelDepth(bitmap.numberOfColors)!;\n  const pixelsPerByte = pixelDepthToPixelsPerByte(pixelDepth);\n  const numberOfPixels = bitmap.pixels.length;\n  const pixelDataLength = Math.ceil(numberOfPixels / pixelsPerByte);\n  _console.log({\n    pixelDepth,\n    pixelsPerByte,\n    numberOfPixels,\n    pixelDataLength,\n  });\n  return pixelDataLength;\n}\nexport function assertValidBitmapPixels(bitmap: DisplayBitmap) {\n  _console.assertRangeWithError(\n    \"bitmap.pixels.length\",\n    bitmap.pixels.length,\n    bitmap.width * (bitmap.height - 1) + 1,\n    bitmap.width * bitmap.height\n  );\n  bitmap.pixels.forEach((pixel, index) => {\n    _console.assertRangeWithError(\n      `bitmap.pixels[${index}]`,\n      pixel,\n      0,\n      bitmap.numberOfColors - 1\n    );\n  });\n}\n\nexport async function canvasToSprite(\n  canvas: HTMLCanvasElement,\n  spriteName: string,\n  numberOfColors: number,\n  paletteName: string,\n  overridePalette: boolean,\n  spriteSheet: DisplaySpriteSheet,\n  paletteOffset = 0\n) {\n  const { width, height } = canvas;\n\n  let palette = spriteSheet.palettes?.find(\n    (palette) => palette.name == paletteName\n  );\n  if (!palette) {\n    palette = {\n      name: paletteName,\n      numberOfColors,\n      colors: new Array(numberOfColors).fill(\"#000000\"),\n    };\n    spriteSheet.palettes = spriteSheet.palettes || [];\n    spriteSheet.palettes?.push(palette);\n  }\n  _console.log(\"pallete\", palette);\n\n  // _console.assertWithError(\n  //   numberOfColors + paletteOffset <= palette.numberOfColors,\n  //   `invalid numberOfColors ${numberOfColors} + offset ${paletteOffset} (max ${palette.numberOfColors})`\n  // );\n\n  const sprite: DisplaySprite = {\n    name: spriteName,\n    width,\n    height,\n    paletteSwaps: [],\n    commands: [],\n  };\n\n  const results = await quantizeCanvas(\n    canvas,\n    numberOfColors,\n    !overridePalette ? palette.colors : undefined\n  );\n  const blob = results.blob;\n  const colorIndices = results.colorIndices;\n  if (overridePalette) {\n    results.colors.forEach((color, index) => {\n      palette.colors[index + paletteOffset] = color;\n    });\n  }\n\n  sprite.commands.push({\n    type: \"selectBitmapColors\",\n    bitmapColorPairs: new Array(numberOfColors).fill(0).map((_, index) => ({\n      bitmapColorIndex: index,\n      colorIndex: index + paletteOffset,\n    })),\n  });\n  const bitmap: DisplayBitmap = {\n    numberOfColors,\n    pixels: colorIndices,\n    width,\n    height,\n  };\n  sprite.commands.push({ type: \"drawBitmap\", offsetX: 0, offsetY: 0, bitmap });\n\n  const spriteIndex = spriteSheet.sprites.findIndex(\n    (sprite) => sprite.name == spriteName\n  );\n  if (spriteIndex == -1) {\n    spriteSheet.sprites.push(sprite);\n  } else {\n    _console.log(`overwriting spriteIndex ${spriteIndex}`);\n    spriteSheet.sprites[spriteIndex] = sprite;\n  }\n\n  return { sprite, blob };\n}\nexport async function imageToSprite(\n  image: HTMLImageElement,\n  spriteName: string,\n  width: number,\n  height: number,\n  numberOfColors: number,\n  paletteName: string,\n  overridePalette: boolean,\n  spriteSheet: DisplaySpriteSheet,\n  paletteOffset = 0\n) {\n  const canvas = resizeImage(image, width, height);\n  return canvasToSprite(\n    canvas,\n    spriteName,\n    numberOfColors,\n    paletteName,\n    overridePalette,\n    spriteSheet,\n    paletteOffset\n  );\n}\n\nconst spriteSheetWithSingleBitmapCommandLength =\n  calculateSpriteSheetHeaderLength(1) + drawSpriteBitmapCommandHeaderLength;\nfunction spriteSheetWithBitmapCommandAndSelectBitmapColorsLength(\n  numberOfColors: number\n) {\n  return (\n    spriteSheetWithSingleBitmapCommandLength + (1 + 1 + numberOfColors * 2)\n  ); // command, numberOfPairs, ...pairs\n}\n\nexport async function canvasToSpriteSheet(\n  canvas: HTMLCanvasElement,\n  spriteSheetName: string,\n  numberOfColors: number,\n  paletteName: string,\n  maxFileLength?: number\n) {\n  const spriteSheet: DisplaySpriteSheet = {\n    name: spriteSheetName,\n    palettes: [],\n    paletteSwaps: [],\n    sprites: [],\n  };\n\n  if (maxFileLength == undefined) {\n    await canvasToSprite(\n      canvas,\n      \"image\",\n      numberOfColors,\n      paletteName,\n      true,\n      spriteSheet\n    );\n  } else {\n    const { width, height } = canvas;\n    const numberOfPixels = width * height;\n    const pixelDepth = DisplayPixelDepths.find(\n      (pixelDepth) => pixelDepthToNumberOfColors(pixelDepth) >= numberOfColors\n    )!;\n    _console.assertWithError(\n      pixelDepth,\n      `no pixelDepth found that covers ${numberOfColors} colors`\n    );\n    const pixelsPerByte = pixelDepthToPixelsPerByte(pixelDepth);\n    const numberOfBytes = Math.ceil(numberOfPixels / pixelsPerByte);\n    _console.log({\n      width,\n      height,\n      numberOfPixels,\n      pixelDepth,\n      pixelsPerByte,\n      numberOfBytes,\n      maxFileLength,\n    });\n\n    const maxPixelDataLength =\n      maxFileLength -\n      (spriteSheetWithBitmapCommandAndSelectBitmapColorsLength(numberOfColors) +\n        5);\n    const imageRowPixelDataLength = Math.ceil(width / pixelsPerByte);\n    const maxSpriteHeight = Math.floor(\n      maxPixelDataLength / imageRowPixelDataLength\n    );\n    // _console.log({\n    //   maxPixelDataLength,\n    //   imageRowPixelDataLength,\n    //   maxSpriteHeight,\n    // });\n\n    if (maxSpriteHeight >= height) {\n      _console.log(\"image is small enough for a single sprite\");\n      await canvasToSprite(\n        canvas,\n        \"image\",\n        numberOfColors,\n        paletteName,\n        true,\n        spriteSheet\n      );\n    } else {\n      const { colors } = await quantizeCanvas(canvas, numberOfColors);\n      spriteSheet.palettes?.push({ name: paletteName, numberOfColors, colors });\n\n      let offsetY = 0;\n      let imageIndex = 0;\n      const spriteCanvas: HTMLCanvasElement = document.createElement(\"canvas\");\n\n      while (offsetY < height) {\n        const spriteHeight = Math.min(maxSpriteHeight, height - offsetY);\n        cropCanvas(canvas, 0, offsetY, width, spriteHeight, spriteCanvas);\n        offsetY += spriteHeight;\n        _console.log(`cropping sprite ${imageIndex}`, {\n          offsetY,\n          width,\n          spriteHeight,\n        });\n        await canvasToSprite(\n          spriteCanvas,\n          `image${imageIndex}`,\n          numberOfColors,\n          paletteName,\n          false,\n          spriteSheet\n        );\n        imageIndex++;\n      }\n    }\n  }\n\n  return spriteSheet;\n}\n\nexport async function imageToSpriteSheet(\n  image: HTMLImageElement,\n  spriteSheetName: string,\n  width: number,\n  height: number,\n  numberOfColors: number,\n  paletteName: string,\n  maxFileLength?: number\n) {\n  const canvas = resizeImage(image, width, height);\n  return canvasToSpriteSheet(\n    canvas,\n    spriteSheetName,\n    numberOfColors,\n    paletteName,\n    maxFileLength\n  );\n}\n","/**\n * https://opentype.js.org v1.3.4 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens\n */\n\n/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? Number(position) : 0;\n\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n\nvar TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) { bits[i] = 0; }\n  for (i = 0; i < 30 - delta; ++i) { bits[i + delta] = i / delta | 0; }\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) { lt.table[i] = 0; }\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) { lt.trans[i] = 256 + i; }\n  for (i = 0; i < 144; ++i) { lt.trans[24 + i] = i; }\n  for (i = 0; i < 8; ++i) { lt.trans[24 + 144 + i] = 280 + i; }\n  for (i = 0; i < 112; ++i) { lt.trans[24 + 144 + 8 + i] = 144 + i; }\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) { dt.table[i] = 0; }\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) { dt.trans[i] = i; }\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) { t.table[i] = 0; }\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) { t.table[lengths[off + i]]++; }\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) { t.trans[offs[lengths[off + i]]++] = i; }\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    { return base; }\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) { lengths[i] = 0; }\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    { return TINF_DATA_ERROR; }\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    { d.dest[d.destLen++] = d.source[d.sourceIndex++]; }\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      { throw new Error('Data error'); }\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      { return d.dest.slice(0, d.destLen); }\n    else\n      { return d.dest.subarray(0, d.destLen); }\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nvar tinyInflate = tinf_uncompress;\n\n// The Bounding Box object\n\nfunction derive(v0, v1, v2, v3, t) {\n    return Math.pow(1 - t, 3) * v0 +\n        3 * Math.pow(1 - t, 2) * t * v1 +\n        3 * (1 - t) * Math.pow(t, 2) * v2 +\n        Math.pow(t, 3) * v3;\n}\n/**\n * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n * It is used to calculate the bounding box of a glyph or text path.\n *\n * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n *\n * @exports opentype.BoundingBox\n * @class\n * @constructor\n */\nfunction BoundingBox() {\n    this.x1 = Number.NaN;\n    this.y1 = Number.NaN;\n    this.x2 = Number.NaN;\n    this.y2 = Number.NaN;\n}\n\n/**\n * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n */\nBoundingBox.prototype.isEmpty = function() {\n    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n};\n\n/**\n * Add the point to the bounding box.\n * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n * @param {number} x - The X coordinate of the point.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addPoint = function(x, y) {\n    if (typeof x === 'number') {\n        if (isNaN(this.x1) || isNaN(this.x2)) {\n            this.x1 = x;\n            this.x2 = x;\n        }\n        if (x < this.x1) {\n            this.x1 = x;\n        }\n        if (x > this.x2) {\n            this.x2 = x;\n        }\n    }\n    if (typeof y === 'number') {\n        if (isNaN(this.y1) || isNaN(this.y2)) {\n            this.y1 = y;\n            this.y2 = y;\n        }\n        if (y < this.y1) {\n            this.y1 = y;\n        }\n        if (y > this.y2) {\n            this.y2 = y;\n        }\n    }\n};\n\n/**\n * Add a X coordinate to the bounding box.\n * This extends the bounding box to include the X coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} x - The X coordinate of the point.\n */\nBoundingBox.prototype.addX = function(x) {\n    this.addPoint(x, null);\n};\n\n/**\n * Add a Y coordinate to the bounding box.\n * This extends the bounding box to include the Y coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addY = function(y) {\n    this.addPoint(null, y);\n};\n\n/**\n * Add a Bézier curve to the bounding box.\n * This extends the bounding box to include the entire Bézier.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the first control point.\n * @param {number} y1 - The Y coordinate of the first control point.\n * @param {number} x2 - The X coordinate of the second control point.\n * @param {number} y2 - The Y coordinate of the second control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // and https://github.com/icons8/svg-path-bounding-box\n\n    var p0 = [x0, y0];\n    var p1 = [x1, y1];\n    var p2 = [x2, y2];\n    var p3 = [x, y];\n\n    this.addPoint(x0, y0);\n    this.addPoint(x, y);\n\n    for (var i = 0; i <= 1; i++) {\n        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n        var c = 3 * p1[i] - 3 * p0[i];\n\n        if (a === 0) {\n            if (b === 0) { continue; }\n            var t = -c / b;\n            if (0 < t && t < 1) {\n                if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t)); }\n                if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t)); }\n            }\n            continue;\n        }\n\n        var b2ac = Math.pow(b, 2) - 4 * c * a;\n        if (b2ac < 0) { continue; }\n        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t1 && t1 < 1) {\n            if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1)); }\n            if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1)); }\n        }\n        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t2 && t2 < 1) {\n            if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2)); }\n            if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2)); }\n        }\n    }\n};\n\n/**\n * Add a quadratic curve to the bounding box.\n * This extends the bounding box to include the entire quadratic curve.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the control point.\n * @param {number} y1 - The Y coordinate of the control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n    var cp1x = x0 + 2 / 3 * (x1 - x0);\n    var cp1y = y0 + 2 / 3 * (y1 - y0);\n    var cp2x = cp1x + 1 / 3 * (x - x0);\n    var cp2y = cp1y + 1 / 3 * (y - y0);\n    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n};\n\n// Geometric objects\n\n/**\n * A bézier path containing a set of path commands similar to a SVG path.\n * Paths can be drawn on a context using `draw`.\n * @exports opentype.Path\n * @class\n * @constructor\n */\nfunction Path() {\n    this.commands = [];\n    this.fill = 'black';\n    this.stroke = null;\n    this.strokeWidth = 1;\n}\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.moveTo = function(x, y) {\n    this.commands.push({\n        type: 'M',\n        x: x,\n        y: y\n    });\n};\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.lineTo = function(x, y) {\n    this.commands.push({\n        type: 'L',\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Draws cubic curve\n * @function\n * curveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws cubic curve\n * @function\n * bezierCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n * @see curveTo\n */\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n    this.commands.push({\n        type: 'C',\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Draws quadratic curve\n * @function\n * quadraticCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws quadratic curve\n * @function\n * quadTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n    this.commands.push({\n        type: 'Q',\n        x1: x1,\n        y1: y1,\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Closes the path\n * @function closePath\n * @memberof opentype.Path.prototype\n */\n\n/**\n * Close the path\n * @function close\n * @memberof opentype.Path.prototype\n */\nPath.prototype.close = Path.prototype.closePath = function() {\n    this.commands.push({\n        type: 'Z'\n    });\n};\n\n/**\n * Add the given path or list of commands to the commands of this path.\n * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n */\nPath.prototype.extend = function(pathOrCommands) {\n    if (pathOrCommands.commands) {\n        pathOrCommands = pathOrCommands.commands;\n    } else if (pathOrCommands instanceof BoundingBox) {\n        var box = pathOrCommands;\n        this.moveTo(box.x1, box.y1);\n        this.lineTo(box.x2, box.y1);\n        this.lineTo(box.x2, box.y2);\n        this.lineTo(box.x1, box.y2);\n        this.close();\n        return;\n    }\n\n    Array.prototype.push.apply(this.commands, pathOrCommands);\n};\n\n/**\n * Calculate the bounding box of the path.\n * @returns {opentype.BoundingBox}\n */\nPath.prototype.getBoundingBox = function() {\n    var box = new BoundingBox();\n\n    var startX = 0;\n    var startY = 0;\n    var prevX = 0;\n    var prevY = 0;\n    for (var i = 0; i < this.commands.length; i++) {\n        var cmd = this.commands[i];\n        switch (cmd.type) {\n            case 'M':\n                box.addPoint(cmd.x, cmd.y);\n                startX = prevX = cmd.x;\n                startY = prevY = cmd.y;\n                break;\n            case 'L':\n                box.addPoint(cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'Q':\n                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'C':\n                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'Z':\n                prevX = startX;\n                prevY = startY;\n                break;\n            default:\n                throw new Error('Unexpected path command ' + cmd.type);\n        }\n    }\n    if (box.isEmpty()) {\n        box.addPoint(0, 0);\n    }\n    return box;\n};\n\n/**\n * Draw the path to a 2D context.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n */\nPath.prototype.draw = function(ctx) {\n    ctx.beginPath();\n    for (var i = 0; i < this.commands.length; i += 1) {\n        var cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            ctx.moveTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            ctx.lineTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            ctx.closePath();\n        }\n    }\n\n    if (this.fill) {\n        ctx.fillStyle = this.fill;\n        ctx.fill();\n    }\n\n    if (this.stroke) {\n        ctx.strokeStyle = this.stroke;\n        ctx.lineWidth = this.strokeWidth;\n        ctx.stroke();\n    }\n};\n\n/**\n * Convert the Path to a string of path data instructions\n * See http://www.w3.org/TR/SVG/paths.html#PathData\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {string}\n */\nPath.prototype.toPathData = function(decimalPlaces) {\n    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n    function floatToString(v) {\n        if (Math.round(v) === v) {\n            return '' + Math.round(v);\n        } else {\n            return v.toFixed(decimalPlaces);\n        }\n    }\n\n    function packValues() {\n        var arguments$1 = arguments;\n\n        var s = '';\n        for (var i = 0; i < arguments.length; i += 1) {\n            var v = arguments$1[i];\n            if (v >= 0 && i > 0) {\n                s += ' ';\n            }\n\n            s += floatToString(v);\n        }\n\n        return s;\n    }\n\n    var d = '';\n    for (var i = 0; i < this.commands.length; i += 1) {\n        var cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            d += 'M' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            d += 'L' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            d += 'Z';\n        }\n    }\n\n    return d;\n};\n\n/**\n * Convert the path to an SVG <path> element, as a string.\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {string}\n */\nPath.prototype.toSVG = function(decimalPlaces) {\n    var svg = '<path d=\"';\n    svg += this.toPathData(decimalPlaces);\n    svg += '\"';\n    if (this.fill && this.fill !== 'black') {\n        if (this.fill === null) {\n            svg += ' fill=\"none\"';\n        } else {\n            svg += ' fill=\"' + this.fill + '\"';\n        }\n    }\n\n    if (this.stroke) {\n        svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n    }\n\n    svg += '/>';\n    return svg;\n};\n\n/**\n * Convert the path to a DOM element.\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {SVGPathElement}\n */\nPath.prototype.toDOMElement = function(decimalPlaces) {\n    var temporaryPath = this.toPathData(decimalPlaces);\n    var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n    newPath.setAttribute('d', temporaryPath);\n\n    return newPath;\n};\n\n// Run-time checking of preconditions.\n\nfunction fail(message) {\n    throw new Error(message);\n}\n\n// Precondition function that checks if the given predicate is true.\n// If not, it will throw an error.\nfunction argument(predicate, message) {\n    if (!predicate) {\n        fail(message);\n    }\n}\nvar check = { fail: fail, argument: argument, assert: argument };\n\n// Data types used in the OpenType font file.\n\nvar LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\nvar LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n/**\n * @exports opentype.decode\n * @class\n */\nvar decode = {};\n/**\n * @exports opentype.encode\n * @class\n */\nvar encode = {};\n/**\n * @exports opentype.sizeOf\n * @class\n */\nvar sizeOf = {};\n\n// Return a function that always returns the same value.\nfunction constant(v) {\n    return function() {\n        return v;\n    };\n}\n\n// OpenType data types //////////////////////////////////////////////////////\n\n/**\n * Convert an 8-bit unsigned integer to a list of 1 byte.\n * @param {number}\n * @returns {Array}\n */\nencode.BYTE = function(v) {\n    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n    return [v];\n};\n/**\n * @constant\n * @type {number}\n */\nsizeOf.BYTE = constant(1);\n\n/**\n * Convert a 8-bit signed integer to a list of 1 byte.\n * @param {string}\n * @returns {Array}\n */\nencode.CHAR = function(v) {\n    return [v.charCodeAt(0)];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.CHAR = constant(1);\n\n/**\n * Convert an ASCII string to a list of bytes.\n * @param {string}\n * @returns {Array}\n */\nencode.CHARARRAY = function(v) {\n    if (typeof v === 'undefined') {\n        v = '';\n        console.warn('Undefined CHARARRAY encountered and treated as an empty string. This is probably caused by a missing glyph name.');\n    }\n    var b = [];\n    for (var i = 0; i < v.length; i += 1) {\n        b[i] = v.charCodeAt(i);\n    }\n\n    return b;\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.CHARARRAY = function(v) {\n    if (typeof v === 'undefined') {\n        return 0;\n    }\n    return v.length;\n};\n\n/**\n * Convert a 16-bit unsigned integer to a list of 2 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.USHORT = function(v) {\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.USHORT = constant(2);\n\n/**\n * Convert a 16-bit signed integer to a list of 2 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.SHORT = function(v) {\n    // Two's complement\n    if (v >= LIMIT16) {\n        v = -(2 * LIMIT16 - v);\n    }\n\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.SHORT = constant(2);\n\n/**\n * Convert a 24-bit unsigned integer to a list of 3 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.UINT24 = function(v) {\n    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.UINT24 = constant(3);\n\n/**\n * Convert a 32-bit unsigned integer to a list of 4 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.ULONG = function(v) {\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.ULONG = constant(4);\n\n/**\n * Convert a 32-bit unsigned integer to a list of 4 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.LONG = function(v) {\n    // Two's complement\n    if (v >= LIMIT32) {\n        v = -(2 * LIMIT32 - v);\n    }\n\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.LONG = constant(4);\n\nencode.FIXED = encode.ULONG;\nsizeOf.FIXED = sizeOf.ULONG;\n\nencode.FWORD = encode.SHORT;\nsizeOf.FWORD = sizeOf.SHORT;\n\nencode.UFWORD = encode.USHORT;\nsizeOf.UFWORD = sizeOf.USHORT;\n\n/**\n * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n * @param {number}\n * @returns {Array}\n */\nencode.LONGDATETIME = function(v) {\n    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.LONGDATETIME = constant(8);\n\n/**\n * Convert a 4-char tag to a list of 4 bytes.\n * @param {string}\n * @returns {Array}\n */\nencode.TAG = function(v) {\n    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n    return [v.charCodeAt(0),\n            v.charCodeAt(1),\n            v.charCodeAt(2),\n            v.charCodeAt(3)];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.TAG = constant(4);\n\n// CFF data types ///////////////////////////////////////////////////////////\n\nencode.Card8 = encode.BYTE;\nsizeOf.Card8 = sizeOf.BYTE;\n\nencode.Card16 = encode.USHORT;\nsizeOf.Card16 = sizeOf.USHORT;\n\nencode.OffSize = encode.BYTE;\nsizeOf.OffSize = sizeOf.BYTE;\n\nencode.SID = encode.USHORT;\nsizeOf.SID = sizeOf.USHORT;\n\n// Convert a numeric operand or charstring number to a variable-size list of bytes.\n/**\n * Convert a numeric operand or charstring number to a variable-size list of bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER = function(v) {\n    if (v >= -107 && v <= 107) {\n        return [v + 139];\n    } else if (v >= 108 && v <= 1131) {\n        v = v - 108;\n        return [(v >> 8) + 247, v & 0xFF];\n    } else if (v >= -1131 && v <= -108) {\n        v = -v - 108;\n        return [(v >> 8) + 251, v & 0xFF];\n    } else if (v >= -32768 && v <= 32767) {\n        return encode.NUMBER16(v);\n    } else {\n        return encode.NUMBER32(v);\n    }\n};\n\n/**\n * @param {number}\n * @returns {number}\n */\nsizeOf.NUMBER = function(v) {\n    return encode.NUMBER(v).length;\n};\n\n/**\n * Convert a signed number between -32768 and +32767 to a three-byte value.\n * This ensures we always use three bytes, but is not the most compact format.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER16 = function(v) {\n    return [28, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.NUMBER16 = constant(3);\n\n/**\n * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n * This is useful if you want to be sure you always use four bytes,\n * at the expense of wasting a few bytes for smaller numbers.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER32 = function(v) {\n    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.NUMBER32 = constant(5);\n\n/**\n * @param {number}\n * @returns {Array}\n */\nencode.REAL = function(v) {\n    var value = v.toString();\n\n    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n    // This code converts it back to a number without the epsilon.\n    var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n    if (m) {\n        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n        value = (Math.round(v * epsilon) / epsilon).toString();\n    }\n\n    var nibbles = '';\n    for (var i = 0, ii = value.length; i < ii; i += 1) {\n        var c = value[i];\n        if (c === 'e') {\n            nibbles += value[++i] === '-' ? 'c' : 'b';\n        } else if (c === '.') {\n            nibbles += 'a';\n        } else if (c === '-') {\n            nibbles += 'e';\n        } else {\n            nibbles += c;\n        }\n    }\n\n    nibbles += (nibbles.length & 1) ? 'f' : 'ff';\n    var out = [30];\n    for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {\n        out.push(parseInt(nibbles.substr(i$1, 2), 16));\n    }\n\n    return out;\n};\n\n/**\n * @param {number}\n * @returns {number}\n */\nsizeOf.REAL = function(v) {\n    return encode.REAL(v).length;\n};\n\nencode.NAME = encode.CHARARRAY;\nsizeOf.NAME = sizeOf.CHARARRAY;\n\nencode.STRING = encode.CHARARRAY;\nsizeOf.STRING = sizeOf.CHARARRAY;\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF8 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes;\n    for (var j = 0; j < numChars; j++, offset += 1) {\n        codePoints[j] = data.getUint8(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF16 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes / 2;\n    for (var j = 0; j < numChars; j++, offset += 2) {\n        codePoints[j] = data.getUint16(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n/**\n * Convert a JavaScript string to UTF16-BE.\n * @param {string}\n * @returns {Array}\n */\nencode.UTF16 = function(v) {\n    var b = [];\n    for (var i = 0; i < v.length; i += 1) {\n        var codepoint = v.charCodeAt(i);\n        b[b.length] = (codepoint >> 8) & 0xFF;\n        b[b.length] = codepoint & 0xFF;\n    }\n\n    return b;\n};\n\n/**\n * @param {string}\n * @returns {number}\n */\nsizeOf.UTF16 = function(v) {\n    return v.length * 2;\n};\n\n// Data for converting old eight-bit Macintosh encodings to Unicode.\n// This representation is optimized for decoding; encoding is slower\n// and needs more memory. The assumption is that all opentype.js users\n// want to open fonts, but saving a font will be comparatively rare\n// so it can be more expensive. Keyed by IANA character set name.\n//\n// Python script for generating these strings:\n//\n//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n//     print(s.encode('utf-8'))\n/**\n * @private\n */\nvar eightBitMacEncodings = {\n    'x-mac-croatian':  // Python: 'mac_croatian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n    'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n    'x-mac-greek':  // Python: 'mac_greek'\n    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n    'x-mac-icelandic':  // Python: 'mac_iceland'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n    'x-mac-ce':  // Python: 'mac_latin2'\n    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n    macintosh:  // Python: 'mac_roman'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-romanian':  // Python: 'mac_romanian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-turkish':  // Python: 'mac_turkish'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n};\n\n/**\n * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n * string, or 'undefined' if the encoding is unsupported. For example, we do\n * not support Chinese, Japanese or Korean because these would need large\n * mapping tables.\n * @param {DataView} dataView\n * @param {number} offset\n * @param {number} dataLength\n * @param {string} encoding\n * @returns {string}\n */\ndecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n    var table = eightBitMacEncodings[encoding];\n    if (table === undefined) {\n        return undefined;\n    }\n\n    var result = '';\n    for (var i = 0; i < dataLength; i++) {\n        var c = dataView.getUint8(offset + i);\n        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n        // mapped to U+0000..U+007F; we only need to look up the others.\n        if (c <= 0x7F) {\n            result += String.fromCharCode(c);\n        } else {\n            result += table[c & 0x7F];\n        }\n    }\n\n    return result;\n};\n\n// Helper function for encode.MACSTRING. Returns a dictionary for mapping\n// Unicode character codes to their 8-bit MacOS equivalent. This table\n// is not exactly a super cheap data structure, but we do not care because\n// encoding Macintosh strings is only rarely needed in typical applications.\nvar macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\nvar macEncodingCacheKeys;\nvar getMacEncodingTable = function (encoding) {\n    // Since we use encoding as a cache key for WeakMap, it has to be\n    // a String object and not a literal. And at least on NodeJS 2.10.1,\n    // WeakMap requires that the same String instance is passed for cache hits.\n    if (!macEncodingCacheKeys) {\n        macEncodingCacheKeys = {};\n        for (var e in eightBitMacEncodings) {\n            /*jshint -W053 */  // Suppress \"Do not use String as a constructor.\"\n            macEncodingCacheKeys[e] = new String(e);\n        }\n    }\n\n    var cacheKey = macEncodingCacheKeys[encoding];\n    if (cacheKey === undefined) {\n        return undefined;\n    }\n\n    // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n    // since garbage collection may run at any time, it could also kick in\n    // between the calls to cache.has() and cache.get(). In that case,\n    // we would return 'undefined' even though we do support the encoding.\n    if (macEncodingTableCache) {\n        var cachedTable = macEncodingTableCache.get(cacheKey);\n        if (cachedTable !== undefined) {\n            return cachedTable;\n        }\n    }\n\n    var decodingTable = eightBitMacEncodings[encoding];\n    if (decodingTable === undefined) {\n        return undefined;\n    }\n\n    var encodingTable = {};\n    for (var i = 0; i < decodingTable.length; i++) {\n        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n    }\n\n    if (macEncodingTableCache) {\n        macEncodingTableCache.set(cacheKey, encodingTable);\n    }\n\n    return encodingTable;\n};\n\n/**\n * Encodes an old-style Macintosh string. Returns a byte array upon success.\n * If the requested encoding is unsupported, or if the input string contains\n * a character that cannot be expressed in the encoding, the function returns\n * 'undefined'.\n * @param {string} str\n * @param {string} encoding\n * @returns {Array}\n */\nencode.MACSTRING = function(str, encoding) {\n    var table = getMacEncodingTable(encoding);\n    if (table === undefined) {\n        return undefined;\n    }\n\n    var result = [];\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n\n        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n        // mapped to U+0000..U+007F; we only need to look up the others.\n        if (c >= 0x80) {\n            c = table[c];\n            if (c === undefined) {\n                // str contains a Unicode character that cannot be encoded\n                // in the requested encoding.\n                return undefined;\n            }\n        }\n        result[i] = c;\n        // result.push(c);\n    }\n\n    return result;\n};\n\n/**\n * @param {string} str\n * @param {string} encoding\n * @returns {number}\n */\nsizeOf.MACSTRING = function(str, encoding) {\n    var b = encode.MACSTRING(str, encoding);\n    if (b !== undefined) {\n        return b.length;\n    } else {\n        return 0;\n    }\n};\n\n// Helper for encode.VARDELTAS\nfunction isByteEncodable(value) {\n    return value >= -128 && value <= 127;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n    var runLength = 0;\n    var numDeltas = deltas.length;\n    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n        ++pos;\n        ++runLength;\n    }\n    result.push(0x80 | (runLength - 1));\n    return pos;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsBytes(deltas, offset, result) {\n    var runLength = 0;\n    var numDeltas = deltas.length;\n    var pos = offset;\n    while (pos < numDeltas && runLength < 64) {\n        var value = deltas[pos];\n        if (!isByteEncodable(value)) {\n            break;\n        }\n\n        // Within a byte-encoded run of deltas, a single zero is best\n        // stored literally as 0x00 value. However, if we have two or\n        // more zeroes in a sequence, it is better to start a new run.\n        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n        // when starting a new run.\n        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n            break;\n        }\n\n        ++pos;\n        ++runLength;\n    }\n    result.push(runLength - 1);\n    for (var i = offset; i < pos; ++i) {\n        result.push((deltas[i] + 256) & 0xff);\n    }\n    return pos;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsWords(deltas, offset, result) {\n    var runLength = 0;\n    var numDeltas = deltas.length;\n    var pos = offset;\n    while (pos < numDeltas && runLength < 64) {\n        var value = deltas[pos];\n\n        // Within a word-encoded run of deltas, it is easiest to start\n        // a new run (with a different encoding) whenever we encounter\n        // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n        // needs 7 bytes when storing the zero inside the current run\n        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n        // new run (40 66 66 80 40 77 77).\n        if (value === 0) {\n            break;\n        }\n\n        // Within a word-encoded run of deltas, a single value in the\n        // range (-128..127) should be encoded within the current run\n        // because it is more compact. For example, the sequence\n        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n        // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n        // a new run (40 66 66 00 02 40 77 77).\n        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {\n            break;\n        }\n\n        ++pos;\n        ++runLength;\n    }\n    result.push(0x40 | (runLength - 1));\n    for (var i = offset; i < pos; ++i) {\n        var val = deltas[i];\n        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);\n    }\n    return pos;\n}\n\n/**\n * Encode a list of variation adjustment deltas.\n *\n * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n * when generating instances of variation fonts.\n *\n * @see https://www.microsoft.com/typography/otspec/gvar.htm\n * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n * @param {Array}\n * @return {Array}\n */\nencode.VARDELTAS = function(deltas) {\n    var pos = 0;\n    var result = [];\n    while (pos < deltas.length) {\n        var value = deltas[pos];\n        if (value === 0) {\n            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n        } else if (value >= -128 && value <= 127) {\n            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n        } else {\n            pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n        }\n    }\n    return result;\n};\n\n// Convert a list of values to a CFF INDEX structure.\n// The values should be objects containing name / type / value.\n/**\n * @param {Array} l\n * @returns {Array}\n */\nencode.INDEX = function(l) {\n    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n    //    i, v;\n    // Because we have to know which data type to use to encode the offsets,\n    // we have to go through the values twice: once to encode the data and\n    // calculate the offsets, then again to encode the offsets using the fitting data type.\n    var offset = 1; // First offset is always 1.\n    var offsets = [offset];\n    var data = [];\n    for (var i = 0; i < l.length; i += 1) {\n        var v = encode.OBJECT(l[i]);\n        Array.prototype.push.apply(data, v);\n        offset += v.length;\n        offsets.push(offset);\n    }\n\n    if (data.length === 0) {\n        return [0, 0];\n    }\n\n    var encodedOffsets = [];\n    var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n    for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {\n        var encodedOffset = offsetEncoder(offsets[i$1]);\n        Array.prototype.push.apply(encodedOffsets, encodedOffset);\n    }\n\n    return Array.prototype.concat(encode.Card16(l.length),\n                           encode.OffSize(offSize),\n                           encodedOffsets,\n                           data);\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.INDEX = function(v) {\n    return encode.INDEX(v).length;\n};\n\n/**\n * Convert an object to a CFF DICT structure.\n * The keys should be numeric.\n * The values should be objects containing name / type / value.\n * @param {Object} m\n * @returns {Array}\n */\nencode.DICT = function(m) {\n    var d = [];\n    var keys = Object.keys(m);\n    var length = keys.length;\n\n    for (var i = 0; i < length; i += 1) {\n        // Object.keys() return string keys, but our keys are always numeric.\n        var k = parseInt(keys[i], 0);\n        var v = m[k];\n        // Value comes before the key.\n        d = d.concat(encode.OPERAND(v.value, v.type));\n        d = d.concat(encode.OPERATOR(k));\n    }\n\n    return d;\n};\n\n/**\n * @param {Object}\n * @returns {number}\n */\nsizeOf.DICT = function(m) {\n    return encode.DICT(m).length;\n};\n\n/**\n * @param {number}\n * @returns {Array}\n */\nencode.OPERATOR = function(v) {\n    if (v < 1200) {\n        return [v];\n    } else {\n        return [12, v - 1200];\n    }\n};\n\n/**\n * @param {Array} v\n * @param {string}\n * @returns {Array}\n */\nencode.OPERAND = function(v, type) {\n    var d = [];\n    if (Array.isArray(type)) {\n        for (var i = 0; i < type.length; i += 1) {\n            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);\n            d = d.concat(encode.OPERAND(v[i], type[i]));\n        }\n    } else {\n        if (type === 'SID') {\n            d = d.concat(encode.NUMBER(v));\n        } else if (type === 'offset') {\n            // We make it easy for ourselves and always encode offsets as\n            // 4 bytes. This makes offset calculation for the top dict easier.\n            d = d.concat(encode.NUMBER32(v));\n        } else if (type === 'number') {\n            d = d.concat(encode.NUMBER(v));\n        } else if (type === 'real') {\n            d = d.concat(encode.REAL(v));\n        } else {\n            throw new Error('Unknown operand type ' + type);\n            // FIXME Add support for booleans\n        }\n    }\n\n    return d;\n};\n\nencode.OP = encode.BYTE;\nsizeOf.OP = sizeOf.BYTE;\n\n// memoize charstring encoding using WeakMap if available\nvar wmm = typeof WeakMap === 'function' && new WeakMap();\n\n/**\n * Convert a list of CharString operations to bytes.\n * @param {Array}\n * @returns {Array}\n */\nencode.CHARSTRING = function(ops) {\n    // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n    if (wmm) {\n        var cachedValue = wmm.get(ops);\n        if (cachedValue !== undefined) {\n            return cachedValue;\n        }\n    }\n\n    var d = [];\n    var length = ops.length;\n\n    for (var i = 0; i < length; i += 1) {\n        var op = ops[i];\n        d = d.concat(encode[op.type](op.value));\n    }\n\n    if (wmm) {\n        wmm.set(ops, d);\n    }\n\n    return d;\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.CHARSTRING = function(ops) {\n    return encode.CHARSTRING(ops).length;\n};\n\n// Utility functions ////////////////////////////////////////////////////////\n\n/**\n * Convert an object containing name / type / value to bytes.\n * @param {Object}\n * @returns {Array}\n */\nencode.OBJECT = function(v) {\n    var encodingFunction = encode[v.type];\n    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n    return encodingFunction(v.value);\n};\n\n/**\n * @param {Object}\n * @returns {number}\n */\nsizeOf.OBJECT = function(v) {\n    var sizeOfFunction = sizeOf[v.type];\n    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);\n    return sizeOfFunction(v.value);\n};\n\n/**\n * Convert a table object to bytes.\n * A table contains a list of fields containing the metadata (name, type and default value).\n * The table itself has the field values set as attributes.\n * @param {opentype.Table}\n * @returns {Array}\n */\nencode.TABLE = function(table) {\n    var d = [];\n    var length = table.fields.length;\n    var subtables = [];\n    var subtableOffsets = [];\n\n    for (var i = 0; i < length; i += 1) {\n        var field = table.fields[i];\n        var encodingFunction = encode[field.type];\n        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');\n        var value = table[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        var bytes = encodingFunction(value);\n\n        if (field.type === 'TABLE') {\n            subtableOffsets.push(d.length);\n            d = d.concat([0, 0]);\n            subtables.push(bytes);\n        } else {\n            d = d.concat(bytes);\n        }\n    }\n\n    for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {\n        var o = subtableOffsets[i$1];\n        var offset = d.length;\n        check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n        d[o] = offset >> 8;\n        d[o + 1] = offset & 0xff;\n        d = d.concat(subtables[i$1]);\n    }\n\n    return d;\n};\n\n/**\n * @param {opentype.Table}\n * @returns {number}\n */\nsizeOf.TABLE = function(table) {\n    var numBytes = 0;\n    var length = table.fields.length;\n\n    for (var i = 0; i < length; i += 1) {\n        var field = table.fields[i];\n        var sizeOfFunction = sizeOf[field.type];\n        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');\n        var value = table[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        numBytes += sizeOfFunction(value);\n\n        // Subtables take 2 more bytes for offsets.\n        if (field.type === 'TABLE') {\n            numBytes += 2;\n        }\n    }\n\n    return numBytes;\n};\n\nencode.RECORD = encode.TABLE;\nsizeOf.RECORD = sizeOf.TABLE;\n\n// Merge in a list of bytes.\nencode.LITERAL = function(v) {\n    return v;\n};\n\nsizeOf.LITERAL = function(v) {\n    return v.length;\n};\n\n// Table metadata\n\n/**\n * @exports opentype.Table\n * @class\n * @param {string} tableName\n * @param {Array} fields\n * @param {Object} options\n * @constructor\n */\nfunction Table(tableName, fields, options) {\n    // For coverage tables with coverage format 2, we do not want to add the coverage data directly to the table object,\n    // as this will result in wrong encoding order of the coverage data on serialization to bytes.\n    // The fallback of using the field values directly when not present on the table is handled in types.encode.TABLE() already.\n    if (fields.length && (fields[0].name !== 'coverageFormat' || fields[0].value === 1)) {\n        for (var i = 0; i < fields.length; i += 1) {\n            var field = fields[i];\n            this[field.name] = field.value;\n        }\n    }\n\n    this.tableName = tableName;\n    this.fields = fields;\n    if (options) {\n        var optionKeys = Object.keys(options);\n        for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {\n            var k = optionKeys[i$1];\n            var v = options[k];\n            if (this[k] !== undefined) {\n                this[k] = v;\n            }\n        }\n    }\n}\n\n/**\n * Encodes the table and returns an array of bytes\n * @return {Array}\n */\nTable.prototype.encode = function() {\n    return encode.TABLE(this);\n};\n\n/**\n * Get the size of the table.\n * @return {number}\n */\nTable.prototype.sizeOf = function() {\n    return sizeOf.TABLE(this);\n};\n\n/**\n * @private\n */\nfunction ushortList(itemName, list, count) {\n    if (count === undefined) {\n        count = list.length;\n    }\n    var fields = new Array(list.length + 1);\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (var i = 0; i < list.length; i++) {\n        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};\n    }\n    return fields;\n}\n\n/**\n * @private\n */\nfunction tableList(itemName, records, itemCallback) {\n    var count = records.length;\n    var fields = new Array(count + 1);\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (var i = 0; i < count; i++) {\n        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};\n    }\n    return fields;\n}\n\n/**\n * @private\n */\nfunction recordList(itemName, records, itemCallback) {\n    var count = records.length;\n    var fields = [];\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (var i = 0; i < count; i++) {\n        fields = fields.concat(itemCallback(records[i], i));\n    }\n    return fields;\n}\n\n// Common Layout Tables\n\n/**\n * @exports opentype.Coverage\n * @class\n * @param {opentype.Table}\n * @constructor\n * @extends opentype.Table\n */\nfunction Coverage(coverageTable) {\n    if (coverageTable.format === 1) {\n        Table.call(this, 'coverageTable',\n            [{name: 'coverageFormat', type: 'USHORT', value: 1}]\n            .concat(ushortList('glyph', coverageTable.glyphs))\n        );\n    } else if (coverageTable.format === 2) {\n        Table.call(this, 'coverageTable',\n            [{name: 'coverageFormat', type: 'USHORT', value: 2}]\n            .concat(recordList('rangeRecord', coverageTable.ranges, function(RangeRecord) {\n                return [\n                    {name: 'startGlyphID', type: 'USHORT', value: RangeRecord.start},\n                    {name: 'endGlyphID', type: 'USHORT', value: RangeRecord.end},\n                    {name: 'startCoverageIndex', type: 'USHORT', value: RangeRecord.index} ];\n            }))\n        );\n    } else {\n        check.assert(false, 'Coverage format must be 1 or 2.');\n    }\n}\nCoverage.prototype = Object.create(Table.prototype);\nCoverage.prototype.constructor = Coverage;\n\nfunction ScriptList(scriptListTable) {\n    Table.call(this, 'scriptListTable',\n        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n            var script = scriptRecord.script;\n            var defaultLangSys = script.defaultLangSys;\n            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');\n            return [\n                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},\n                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [\n                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [\n                        {name: 'lookupOrder', type: 'USHORT', value: 0},\n                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]\n                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}\n                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {\n                        var langSys = langSysRecord.langSys;\n                        return [\n                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},\n                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [\n                                {name: 'lookupOrder', type: 'USHORT', value: 0},\n                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}\n                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}\n                        ];\n                    })))}\n            ];\n        })\n    );\n}\nScriptList.prototype = Object.create(Table.prototype);\nScriptList.prototype.constructor = ScriptList;\n\n/**\n * @exports opentype.FeatureList\n * @class\n * @param {opentype.Table}\n * @constructor\n * @extends opentype.Table\n */\nfunction FeatureList(featureListTable) {\n    Table.call(this, 'featureListTable',\n        recordList('featureRecord', featureListTable, function(featureRecord, i) {\n            var feature = featureRecord.feature;\n            return [\n                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},\n                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [\n                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams} ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}\n            ];\n        })\n    );\n}\nFeatureList.prototype = Object.create(Table.prototype);\nFeatureList.prototype.constructor = FeatureList;\n\n/**\n * @exports opentype.LookupList\n * @class\n * @param {opentype.Table}\n * @param {Object}\n * @constructor\n * @extends opentype.Table\n */\nfunction LookupList(lookupListTable, subtableMakers) {\n    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {\n        var subtableCallback = subtableMakers[lookupTable.lookupType];\n        check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');\n        return new Table('lookupTable', [\n            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},\n            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}\n        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));\n    }));\n}\nLookupList.prototype = Object.create(Table.prototype);\nLookupList.prototype.constructor = LookupList;\n\n// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n// Don't use offsets inside Records (probable bug), only in Tables.\nvar table = {\n    Table: Table,\n    Record: Table,\n    Coverage: Coverage,\n    ScriptList: ScriptList,\n    FeatureList: FeatureList,\n    LookupList: LookupList,\n    ushortList: ushortList,\n    tableList: tableList,\n    recordList: recordList,\n};\n\n// Parsing utility functions\n\n// Retrieve an unsigned byte from the DataView.\nfunction getByte(dataView, offset) {\n    return dataView.getUint8(offset);\n}\n\n// Retrieve an unsigned 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getUShort(dataView, offset) {\n    return dataView.getUint16(offset, false);\n}\n\n// Retrieve a signed 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getShort(dataView, offset) {\n    return dataView.getInt16(offset, false);\n}\n\n// Retrieve an unsigned 32-bit long from the DataView.\n// The value is stored in big endian.\nfunction getULong(dataView, offset) {\n    return dataView.getUint32(offset, false);\n}\n\n// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n// The value is stored in big endian.\nfunction getFixed(dataView, offset) {\n    var decimal = dataView.getInt16(offset, false);\n    var fraction = dataView.getUint16(offset + 2, false);\n    return decimal + fraction / 65535;\n}\n\n// Retrieve a 4-character tag from the DataView.\n// Tags are used to identify tables.\nfunction getTag(dataView, offset) {\n    var tag = '';\n    for (var i = offset; i < offset + 4; i += 1) {\n        tag += String.fromCharCode(dataView.getInt8(i));\n    }\n\n    return tag;\n}\n\n// Retrieve an offset from the DataView.\n// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\nfunction getOffset(dataView, offset, offSize) {\n    var v = 0;\n    for (var i = 0; i < offSize; i += 1) {\n        v <<= 8;\n        v += dataView.getUint8(offset + i);\n    }\n\n    return v;\n}\n\n// Retrieve a number of bytes from start offset to the end offset from the DataView.\nfunction getBytes(dataView, startOffset, endOffset) {\n    var bytes = [];\n    for (var i = startOffset; i < endOffset; i += 1) {\n        bytes.push(dataView.getUint8(i));\n    }\n\n    return bytes;\n}\n\n// Convert the list of bytes to a string.\nfunction bytesToString(bytes) {\n    var s = '';\n    for (var i = 0; i < bytes.length; i += 1) {\n        s += String.fromCharCode(bytes[i]);\n    }\n\n    return s;\n}\n\nvar typeOffsets = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\n\n// A stateful parser that changes the offset whenever a value is retrieved.\n// The data is a DataView.\nfunction Parser(data, offset) {\n    this.data = data;\n    this.offset = offset;\n    this.relativeOffset = 0;\n}\n\nParser.prototype.parseByte = function() {\n    var v = this.data.getUint8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseChar = function() {\n    var v = this.data.getInt8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\nParser.prototype.parseUShort = function() {\n    var v = this.data.getUint16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\nParser.prototype.parseShort = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseF2Dot14 = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseULong = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\nParser.prototype.parseFixed = function() {\n    var v = getFixed(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseString = function(length) {\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    var string = '';\n    this.relativeOffset += length;\n    for (var i = 0; i < length; i++) {\n        string += String.fromCharCode(dataView.getUint8(offset + i));\n    }\n\n    return string;\n};\n\nParser.prototype.parseTag = function() {\n    return this.parseString(4);\n};\n\n// LONGDATETIME is a 64-bit integer.\n// JavaScript and unix timestamps traditionally use 32 bits, so we\n// only take the last 32 bits.\n// + Since until 2038 those bits will be filled by zeros we can ignore them.\nParser.prototype.parseLongDateTime = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n    // Subtract seconds between 01/01/1904 and 01/01/1970\n    // to convert Apple Mac timestamp to Standard Unix timestamp\n    v -= 2082844800;\n    this.relativeOffset += 8;\n    return v;\n};\n\nParser.prototype.parseVersion = function(minorBase) {\n    var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n    // Default returns the correct number if minor = 0xN000 where N is 0-9\n    // Set minorBase to 1 for tables that use minor = N where N is 0-9\n    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n    this.relativeOffset += 4;\n    if (minorBase === undefined) { minorBase = 0x1000; }\n    return major + minor / minorBase / 10;\n};\n\nParser.prototype.skip = function(type, amount) {\n    if (amount === undefined) {\n        amount = 1;\n    }\n\n    this.relativeOffset += typeOffsets[type] * amount;\n};\n\n///// Parsing lists and records ///////////////////////////////\n\n// Parse a list of 32 bit unsigned integers.\nParser.prototype.parseULongList = function(count) {\n    if (count === undefined) { count = this.parseULong(); }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint32(offset);\n        offset += 4;\n    }\n\n    this.relativeOffset += count * 4;\n    return offsets;\n};\n\n// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n// or provided as an argument.\nParser.prototype.parseOffset16List =\nParser.prototype.parseUShortList = function(count) {\n    if (count === undefined) { count = this.parseUShort(); }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return offsets;\n};\n\n// Parses a list of 16 bit signed integers.\nParser.prototype.parseShortList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        list[i] = dataView.getInt16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return list;\n};\n\n// Parses a list of bytes.\nParser.prototype.parseByteList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        list[i] = dataView.getUint8(offset++);\n    }\n\n    this.relativeOffset += count;\n    return list;\n};\n\n/**\n * Parse a list of items.\n * Record count is optional, if omitted it is read from the stream.\n * itemCallback is one of the Parser methods.\n */\nParser.prototype.parseList = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseUShort();\n    }\n    var list = new Array(count);\n    for (var i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\nParser.prototype.parseList32 = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseULong();\n    }\n    var list = new Array(count);\n    for (var i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\n/**\n * Parse a list of records.\n * Record count is optional, if omitted it is read from the stream.\n * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n */\nParser.prototype.parseRecordList = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseUShort();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for (var i = 0; i < count; i++) {\n        var rec = {};\n        for (var j = 0; j < fields.length; j++) {\n            var fieldName = fields[j];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\nParser.prototype.parseRecordList32 = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseULong();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for (var i = 0; i < count; i++) {\n        var rec = {};\n        for (var j = 0; j < fields.length; j++) {\n            var fieldName = fields[j];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\n// Parse a data structure into an object\n// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\nParser.prototype.parseStruct = function(description) {\n    if (typeof description === 'function') {\n        return description.call(this);\n    } else {\n        var fields = Object.keys(description);\n        var struct = {};\n        for (var j = 0; j < fields.length; j++) {\n            var fieldName = fields[j];\n            var fieldType = description[fieldName];\n            struct[fieldName] = fieldType.call(this);\n        }\n        return struct;\n    }\n};\n\n/**\n * Parse a GPOS valueRecord\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat is optional, if omitted it is read from the stream.\n */\nParser.prototype.parseValueRecord = function(valueFormat) {\n    if (valueFormat === undefined) {\n        valueFormat = this.parseUShort();\n    }\n    if (valueFormat === 0) {\n        // valueFormat2 in kerning pairs is most often 0\n        // in this case return undefined instead of an empty object, to save space\n        return;\n    }\n    var valueRecord = {};\n\n    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }\n    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }\n    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }\n    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }\n\n    // Device table (non-variable font) / VariationIndex table (variable font) not supported\n    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }\n\n    return valueRecord;\n};\n\n/**\n * Parse a list of GPOS valueRecords\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat and valueCount are read from the stream.\n */\nParser.prototype.parseValueRecordList = function() {\n    var valueFormat = this.parseUShort();\n    var valueCount = this.parseUShort();\n    var values = new Array(valueCount);\n    for (var i = 0; i < valueCount; i++) {\n        values[i] = this.parseValueRecord(valueFormat);\n    }\n    return values;\n};\n\nParser.prototype.parsePointer = function(description) {\n    var structOffset = this.parseOffset16();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\nParser.prototype.parsePointer32 = function(description) {\n    var structOffset = this.parseOffset32();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\n/**\n * Parse a list of offsets to lists of 16-bit integers,\n * or a list of offsets to lists of offsets to any kind of items.\n * If itemCallback is not provided, a list of list of UShort is assumed.\n * If provided, itemCallback is called on each item and must parse the item.\n * See examples in tables/gsub.js\n */\nParser.prototype.parseListOfLists = function(itemCallback) {\n    var offsets = this.parseOffset16List();\n    var count = offsets.length;\n    var relativeOffset = this.relativeOffset;\n    var list = new Array(count);\n    for (var i = 0; i < count; i++) {\n        var start = offsets[i];\n        if (start === 0) {\n            // NULL offset\n            // Add i as owned property to list. Convenient with assert.\n            list[i] = undefined;\n            continue;\n        }\n        this.relativeOffset = start;\n        if (itemCallback) {\n            var subOffsets = this.parseOffset16List();\n            var subList = new Array(subOffsets.length);\n            for (var j = 0; j < subOffsets.length; j++) {\n                this.relativeOffset = start + subOffsets[j];\n                subList[j] = itemCallback.call(this);\n            }\n            list[i] = subList;\n        } else {\n            list[i] = this.parseUShortList();\n        }\n    }\n    this.relativeOffset = relativeOffset;\n    return list;\n};\n\n///// Complex tables parsing //////////////////////////////////\n\n// Parse a coverage table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n// parser.offset must point to the start of the table containing the coverage.\nParser.prototype.parseCoverage = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    var count = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            glyphs: this.parseUShortList(count)\n        };\n    } else if (format === 2) {\n        var ranges = new Array(count);\n        for (var i = 0; i < count; i++) {\n            ranges[i] = {\n                start: this.parseUShort(),\n                end: this.parseUShort(),\n                index: this.parseUShort()\n            };\n        }\n        return {\n            format: 2,\n            ranges: ranges\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n};\n\n// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\nParser.prototype.parseClassDef = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            startGlyph: this.parseUShort(),\n            classes: this.parseUShortList()\n        };\n    } else if (format === 2) {\n        return {\n            format: 2,\n            ranges: this.parseRecordList({\n                start: Parser.uShort,\n                end: Parser.uShort,\n                classId: Parser.uShort\n            })\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n};\n\n///// Static methods ///////////////////////////////////\n// These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\nParser.list = function(count, itemCallback) {\n    return function() {\n        return this.parseList(count, itemCallback);\n    };\n};\n\nParser.list32 = function(count, itemCallback) {\n    return function() {\n        return this.parseList32(count, itemCallback);\n    };\n};\n\nParser.recordList = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList(count, recordDescription);\n    };\n};\n\nParser.recordList32 = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList32(count, recordDescription);\n    };\n};\n\nParser.pointer = function(description) {\n    return function() {\n        return this.parsePointer(description);\n    };\n};\n\nParser.pointer32 = function(description) {\n    return function() {\n        return this.parsePointer32(description);\n    };\n};\n\nParser.tag = Parser.prototype.parseTag;\nParser.byte = Parser.prototype.parseByte;\nParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\nParser.uShortList = Parser.prototype.parseUShortList;\nParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\nParser.uLongList = Parser.prototype.parseULongList;\nParser.struct = Parser.prototype.parseStruct;\nParser.coverage = Parser.prototype.parseCoverage;\nParser.classDef = Parser.prototype.parseClassDef;\n\n///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\nvar langSysTable = {\n    reserved: Parser.uShort,\n    reqFeatureIndex: Parser.uShort,\n    featureIndexes: Parser.uShortList\n};\n\nParser.prototype.parseScriptList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        script: Parser.pointer({\n            defaultLangSys: Parser.pointer(langSysTable),\n            langSysRecords: Parser.recordList({\n                tag: Parser.tag,\n                langSys: Parser.pointer(langSysTable)\n            })\n        })\n    })) || [];\n};\n\nParser.prototype.parseFeatureList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        feature: Parser.pointer({\n            featureParams: Parser.offset16,\n            lookupListIndexes: Parser.uShortList\n        })\n    })) || [];\n};\n\nParser.prototype.parseLookupList = function(lookupTableParsers) {\n    return this.parsePointer(Parser.list(Parser.pointer(function() {\n        var lookupType = this.parseUShort();\n        check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');\n        var lookupFlag = this.parseUShort();\n        var useMarkFilteringSet = lookupFlag & 0x10;\n        return {\n            lookupType: lookupType,\n            lookupFlag: lookupFlag,\n            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n        };\n    }))) || [];\n};\n\nParser.prototype.parseFeatureVariationsList = function() {\n    return this.parsePointer32(function() {\n        var majorVersion = this.parseUShort();\n        var minorVersion = this.parseUShort();\n        check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');\n        var featureVariations = this.parseRecordList32({\n            conditionSetOffset: Parser.offset32,\n            featureTableSubstitutionOffset: Parser.offset32\n        });\n        return featureVariations;\n    }) || [];\n};\n\nvar parse = {\n    getByte: getByte,\n    getCard8: getByte,\n    getUShort: getUShort,\n    getCard16: getUShort,\n    getShort: getShort,\n    getULong: getULong,\n    getFixed: getFixed,\n    getTag: getTag,\n    getOffset: getOffset,\n    getBytes: getBytes,\n    bytesToString: bytesToString,\n    Parser: Parser,\n};\n\n// The `cmap` table stores the mappings from characters to glyphs.\n\nfunction parseCmapTableFormat12(cmap, p) {\n    //Skip reserved.\n    p.parseUShort();\n\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseULong();\n    cmap.language = p.parseULong();\n\n    var groupCount;\n    cmap.groupCount = groupCount = p.parseULong();\n    cmap.glyphIndexMap = {};\n\n    for (var i = 0; i < groupCount; i += 1) {\n        var startCharCode = p.parseULong();\n        var endCharCode = p.parseULong();\n        var startGlyphId = p.parseULong();\n\n        for (var c = startCharCode; c <= endCharCode; c += 1) {\n            cmap.glyphIndexMap[c] = startGlyphId;\n            startGlyphId++;\n        }\n    }\n}\n\nfunction parseCmapTableFormat4(cmap, p, data, start, offset) {\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseUShort();\n    cmap.language = p.parseUShort();\n\n    // segCount is stored x 2.\n    var segCount;\n    cmap.segCount = segCount = p.parseUShort() >> 1;\n\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n\n    // The \"unrolled\" mapping from character codes to glyph indices.\n    cmap.glyphIndexMap = {};\n    var endCountParser = new parse.Parser(data, start + offset + 14);\n    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n    for (var i = 0; i < segCount - 1; i += 1) {\n        var glyphIndex = (void 0);\n        var endCount = endCountParser.parseUShort();\n        var startCount = startCountParser.parseUShort();\n        var idDelta = idDeltaParser.parseShort();\n        var idRangeOffset = idRangeOffsetParser.parseUShort();\n        for (var c = startCount; c <= endCount; c += 1) {\n            if (idRangeOffset !== 0) {\n                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                // Take the current offset in the idRangeOffset array.\n                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);\n\n                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                glyphIndexOffset += idRangeOffset;\n\n                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                glyphIndexOffset += (c - startCount) * 2;\n                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                if (glyphIndex !== 0) {\n                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;\n                }\n            } else {\n                glyphIndex = (c + idDelta) & 0xFFFF;\n            }\n\n            cmap.glyphIndexMap[c] = glyphIndex;\n        }\n    }\n}\n\n// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n// There are many available formats, but we only support the Windows format 4 and 12.\n// This function returns a `CmapEncoding` object or null if no supported format could be found.\nfunction parseCmapTable(data, start) {\n    var cmap = {};\n    cmap.version = parse.getUShort(data, start);\n    check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n    // The cmap table can contain many sub-tables, each with their own format.\n    // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n    cmap.numTables = parse.getUShort(data, start + 2);\n    var offset = -1;\n    for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n        var platformId = parse.getUShort(data, start + 4 + (i * 8));\n        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);\n        if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n            (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {\n            offset = parse.getULong(data, start + 4 + (i * 8) + 4);\n            break;\n        }\n    }\n\n    if (offset === -1) {\n        // There is no cmap table in the font that we support.\n        throw new Error('No valid cmap sub-tables found.');\n    }\n\n    var p = new parse.Parser(data, start + offset);\n    cmap.format = p.parseUShort();\n\n    if (cmap.format === 12) {\n        parseCmapTableFormat12(cmap, p);\n    } else if (cmap.format === 4) {\n        parseCmapTableFormat4(cmap, p, data, start, offset);\n    } else {\n        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');\n    }\n\n    return cmap;\n}\n\nfunction addSegment(t, code, glyphIndex) {\n    t.segments.push({\n        end: code,\n        start: code,\n        delta: -(code - glyphIndex),\n        offset: 0,\n        glyphIndex: glyphIndex\n    });\n}\n\nfunction addTerminatorSegment(t) {\n    t.segments.push({\n        end: 0xFFFF,\n        start: 0xFFFF,\n        delta: 1,\n        offset: 0\n    });\n}\n\n// Make cmap table, format 4 by default, 12 if needed only\nfunction makeCmapTable(glyphs) {\n    // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)\n    var isPlan0Only = true;\n    var i;\n\n    // Check if we need to add cmap format 12 or if format 4 only is fine\n    for (i = glyphs.length - 1; i > 0; i -= 1) {\n        var g = glyphs.get(i);\n        if (g.unicode > 65535) {\n            console.log('Adding CMAP format 12 (needed!)');\n            isPlan0Only = false;\n            break;\n        }\n    }\n\n    var cmapTable = [\n        {name: 'version', type: 'USHORT', value: 0},\n        {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},\n\n        // CMAP 4 header\n        {name: 'platformID', type: 'USHORT', value: 3},\n        {name: 'encodingID', type: 'USHORT', value: 1},\n        {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}\n    ];\n\n    if (!isPlan0Only)\n        { cmapTable = cmapTable.concat([\n            // CMAP 12 header\n            {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere\n            {name: 'cmap12EncodingID', type: 'USHORT', value: 10},\n            {name: 'cmap12Offset', type: 'ULONG', value: 0}\n        ]); }\n\n    cmapTable = cmapTable.concat([\n        // CMAP 4 Subtable\n        {name: 'format', type: 'USHORT', value: 4},\n        {name: 'cmap4Length', type: 'USHORT', value: 0},\n        {name: 'language', type: 'USHORT', value: 0},\n        {name: 'segCountX2', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n\n    var t = new table.Table('cmap', cmapTable);\n\n    t.segments = [];\n    for (i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs.get(i);\n        for (var j = 0; j < glyph.unicodes.length; j += 1) {\n            addSegment(t, glyph.unicodes[j], i);\n        }\n\n        t.segments = t.segments.sort(function (a, b) {\n            return a.start - b.start;\n        });\n    }\n\n    addTerminatorSegment(t);\n\n    var segCount = t.segments.length;\n    var segCountToRemove = 0;\n\n    // CMAP 4\n    // Set up parallel segment arrays.\n    var endCounts = [];\n    var startCounts = [];\n    var idDeltas = [];\n    var idRangeOffsets = [];\n    var glyphIds = [];\n\n    // CMAP 12\n    var cmap12Groups = [];\n\n    // Reminder this loop is not following the specification at 100%\n    // The specification -> find suites of characters and make a group\n    // Here we're doing one group for each letter\n    // Doing as the spec can save 8 times (or more) space\n    for (i = 0; i < segCount; i += 1) {\n        var segment = t.segments[i];\n\n        // CMAP 4\n        if (segment.end <= 65535 && segment.start <= 65535) {\n            endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});\n            startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});\n            idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});\n            idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});\n            if (segment.glyphId !== undefined) {\n                glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});\n            }\n        } else {\n            // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12\n            segCountToRemove += 1;\n        }\n\n        // CMAP 12\n        // Skip Terminator Segment\n        if (!isPlan0Only && segment.glyphIndex !== undefined) {\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});\n        }\n    }\n\n    // CMAP 4 Subtable\n    t.segCountX2 = (segCount - segCountToRemove) * 2;\n    t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;\n    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n    t.rangeShift = t.segCountX2 - t.searchRange;\n\n    t.fields = t.fields.concat(endCounts);\n    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});\n    t.fields = t.fields.concat(startCounts);\n    t.fields = t.fields.concat(idDeltas);\n    t.fields = t.fields.concat(idRangeOffsets);\n    t.fields = t.fields.concat(glyphIds);\n\n    t.cmap4Length = 14 + // Subtable header\n        endCounts.length * 2 +\n        2 + // reservedPad\n        startCounts.length * 2 +\n        idDeltas.length * 2 +\n        idRangeOffsets.length * 2 +\n        glyphIds.length * 2;\n\n    if (!isPlan0Only) {\n        // CMAP 12 Subtable\n        var cmap12Length = 16 + // Subtable header\n            cmap12Groups.length * 4;\n\n        t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;\n        t.fields = t.fields.concat([\n            {name: 'cmap12Format', type: 'USHORT', value: 12},\n            {name: 'cmap12Reserved', type: 'USHORT', value: 0},\n            {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},\n            {name: 'cmap12Language', type: 'ULONG', value: 0},\n            {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}\n        ]);\n\n        t.fields = t.fields.concat(cmap12Groups);\n    }\n\n    return t;\n}\n\nvar cmap = { parse: parseCmapTable, make: makeCmapTable };\n\n// Glyph encoding\n\nvar cffStandardStrings = [\n    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',\n    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',\n    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',\n    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',\n    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',\n    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',\n    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',\n    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',\n    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',\n    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',\n    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',\n    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',\n    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',\n    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',\n    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',\n    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\nvar cffStandardEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n    'lslash', 'oslash', 'oe', 'germandbls'];\n\nvar cffExpertEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nvar standardNames = [\n    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\n/**\n * This is the encoding used for fonts created from scratch.\n * It loops through all glyphs and finds the appropriate unicode value.\n * Since it's linear time, other encodings will be faster.\n * @exports opentype.DefaultEncoding\n * @class\n * @constructor\n * @param {opentype.Font}\n */\nfunction DefaultEncoding(font) {\n    this.font = font;\n}\n\nDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n    var code = c.codePointAt(0);\n    var glyphs = this.font.glyphs;\n    if (glyphs) {\n        for (var i = 0; i < glyphs.length; i += 1) {\n            var glyph = glyphs.get(i);\n            for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                if (glyph.unicodes[j] === code) {\n                    return i;\n                }\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * @exports opentype.CmapEncoding\n * @class\n * @constructor\n * @param {Object} cmap - a object with the cmap encoded data\n */\nfunction CmapEncoding(cmap) {\n    this.cmap = cmap;\n}\n\n/**\n * @param  {string} c - the character\n * @return {number} The glyph index.\n */\nCmapEncoding.prototype.charToGlyphIndex = function(c) {\n    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n};\n\n/**\n * @exports opentype.CffEncoding\n * @class\n * @constructor\n * @param {string} encoding - The encoding\n * @param {Array} charset - The character set.\n */\nfunction CffEncoding(encoding, charset) {\n    this.encoding = encoding;\n    this.charset = charset;\n}\n\n/**\n * @param  {string} s - The character\n * @return {number} The index.\n */\nCffEncoding.prototype.charToGlyphIndex = function(s) {\n    var code = s.codePointAt(0);\n    var charName = this.encoding[code];\n    return this.charset.indexOf(charName);\n};\n\n/**\n * @exports opentype.GlyphNames\n * @class\n * @constructor\n * @param {Object} post\n */\nfunction GlyphNames(post) {\n    switch (post.version) {\n        case 1:\n            this.names = standardNames.slice();\n            break;\n        case 2:\n            this.names = new Array(post.numberOfGlyphs);\n            for (var i = 0; i < post.numberOfGlyphs; i++) {\n                if (post.glyphNameIndex[i] < standardNames.length) {\n                    this.names[i] = standardNames[post.glyphNameIndex[i]];\n                } else {\n                    this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];\n                }\n            }\n\n            break;\n        case 2.5:\n            this.names = new Array(post.numberOfGlyphs);\n            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                this.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];\n            }\n\n            break;\n        case 3:\n            this.names = [];\n            break;\n        default:\n            this.names = [];\n            break;\n    }\n}\n\n/**\n * Gets the index of a glyph by name.\n * @param  {string} name - The glyph name\n * @return {number} The index\n */\nGlyphNames.prototype.nameToGlyphIndex = function(name) {\n    return this.names.indexOf(name);\n};\n\n/**\n * @param  {number} gid\n * @return {string}\n */\nGlyphNames.prototype.glyphIndexToName = function(gid) {\n    return this.names[gid];\n};\n\nfunction addGlyphNamesAll(font) {\n    var glyph;\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n\n    for (var i = 0; i < charCodes.length; i += 1) {\n        var c = charCodes[i];\n        var glyphIndex = glyphIndexMap[c];\n        glyph = font.glyphs.get(glyphIndex);\n        glyph.addUnicode(parseInt(c));\n    }\n\n    for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {\n        glyph = font.glyphs.get(i$1);\n        if (font.cffEncoding) {\n            if (font.isCIDFont) {\n                glyph.name = 'gid' + i$1;\n            } else {\n                glyph.name = font.cffEncoding.charset[i$1];\n            }\n        } else if (font.glyphNames.names) {\n            glyph.name = font.glyphNames.glyphIndexToName(i$1);\n        }\n    }\n}\n\nfunction addGlyphNamesToUnicodeMap(font) {\n    font._IndexToUnicodeMap = {};\n\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n\n    for (var i = 0; i < charCodes.length; i += 1) {\n        var c = charCodes[i];\n        var glyphIndex = glyphIndexMap[c];\n        if (font._IndexToUnicodeMap[glyphIndex] === undefined) {\n            font._IndexToUnicodeMap[glyphIndex] = {\n                unicodes: [parseInt(c)]\n            };\n        } else {\n            font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));\n        }\n    }\n}\n\n/**\n * @alias opentype.addGlyphNames\n * @param {opentype.Font}\n * @param {Object}\n */\nfunction addGlyphNames(font, opt) {\n    if (opt.lowMemory) {\n        addGlyphNamesToUnicodeMap(font);\n    } else {\n        addGlyphNamesAll(font);\n    }\n}\n\n// Drawing utility functions.\n\n// Draw a line on the given context from point `x1,y1` to point `x2,y2`.\nfunction line(ctx, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\nvar draw = { line: line };\n\n// The Glyph object\n// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\nfunction getPathDefinition(glyph, path) {\n    var _path = path || new Path();\n    return {\n        configurable: true,\n\n        get: function() {\n            if (typeof _path === 'function') {\n                _path = _path();\n            }\n\n            return _path;\n        },\n\n        set: function(p) {\n            _path = p;\n        }\n    };\n}\n/**\n * @typedef GlyphOptions\n * @type Object\n * @property {string} [name] - The glyph name\n * @property {number} [unicode]\n * @property {Array} [unicodes]\n * @property {number} [xMin]\n * @property {number} [yMin]\n * @property {number} [xMax]\n * @property {number} [yMax]\n * @property {number} [advanceWidth]\n */\n\n// A Glyph is an individual mark that often corresponds to a character.\n// Some glyphs, such as ligatures, are a combination of many characters.\n// Glyphs are the basic building blocks of a font.\n//\n// The `Glyph` class contains utility methods for drawing the path and its points.\n/**\n * @exports opentype.Glyph\n * @class\n * @param {GlyphOptions}\n * @constructor\n */\nfunction Glyph(options) {\n    // By putting all the code on a prototype function (which is only declared once)\n    // we reduce the memory requirements for larger fonts by some 2%\n    this.bindConstructorValues(options);\n}\n\n/**\n * @param  {GlyphOptions}\n */\nGlyph.prototype.bindConstructorValues = function(options) {\n    this.index = options.index || 0;\n\n    // These three values cannot be deferred for memory optimization:\n    this.name = options.name || null;\n    this.unicode = options.unicode || undefined;\n    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n    // But by binding these values only when necessary, we reduce can\n    // the memory requirements by almost 3% for larger fonts.\n    if ('xMin' in options) {\n        this.xMin = options.xMin;\n    }\n\n    if ('yMin' in options) {\n        this.yMin = options.yMin;\n    }\n\n    if ('xMax' in options) {\n        this.xMax = options.xMax;\n    }\n\n    if ('yMax' in options) {\n        this.yMax = options.yMax;\n    }\n\n    if ('advanceWidth' in options) {\n        this.advanceWidth = options.advanceWidth;\n    }\n\n    // The path for a glyph is the most memory intensive, and is bound as a value\n    // with a getter/setter to ensure we actually do path parsing only once the\n    // path is actually needed by anything.\n    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n};\n\n/**\n * @param {number}\n */\nGlyph.prototype.addUnicode = function(unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n\n    this.unicodes.push(unicode);\n};\n\n/**\n * Calculate the minimum bounding box for this glyph.\n * @return {opentype.BoundingBox}\n */\nGlyph.prototype.getBoundingBox = function() {\n    return this.path.getBoundingBox();\n};\n\n/**\n * Convert the glyph to a Path we can draw on a drawing context.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n * @param  {opentype.Font} if hinting is to be used, the font\n * @return {opentype.Path}\n */\nGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    var commands;\n    var hPoints;\n    if (!options) { options = { }; }\n    var xScale = options.xScale;\n    var yScale = options.yScale;\n\n    if (options.hinting && font && font.hinting) {\n        // in case of hinting, the hinting engine takes care\n        // of scaling the points (not the path) before hinting.\n        hPoints = this.path && font.hinting.exec(this, fontSize);\n        // in case the hinting engine failed hPoints is undefined\n        // and thus reverts to plain rending\n    }\n\n    if (hPoints) {\n        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n        commands = font.hinting.getCommands(hPoints);\n        x = Math.round(x);\n        y = Math.round(y);\n        // TODO in case of hinting xyScaling is not yet supported\n        xScale = yScale = 1;\n    } else {\n        commands = this.path.commands;\n        var scale = 1 / (this.path.unitsPerEm || 1000) * fontSize;\n        if (xScale === undefined) { xScale = scale; }\n        if (yScale === undefined) { yScale = scale; }\n    }\n\n    var p = new Path();\n    for (var i = 0; i < commands.length; i += 1) {\n        var cmd = commands[i];\n        if (cmd.type === 'M') {\n            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'L') {\n            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Q') {\n            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                               x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'C') {\n            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),\n                      x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Z') {\n            p.closePath();\n        }\n    }\n\n    return p;\n};\n\n/**\n * Split the glyph into contours.\n * This function is here for backwards compatibility, and to\n * provide raw access to the TrueType glyph outlines.\n * @return {Array}\n */\nGlyph.prototype.getContours = function() {\n    if (this.points === undefined) {\n        return [];\n    }\n\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < this.points.length; i += 1) {\n        var pt = this.points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n};\n\n/**\n * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n * @return {Object}\n */\nGlyph.prototype.getMetrics = function() {\n    var commands = this.path.commands;\n    var xCoords = [];\n    var yCoords = [];\n    for (var i = 0; i < commands.length; i += 1) {\n        var cmd = commands[i];\n        if (cmd.type !== 'Z') {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n\n        if (cmd.type === 'Q' || cmd.type === 'C') {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n\n        if (cmd.type === 'C') {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n\n    var metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: this.leftSideBearing\n    };\n\n    if (!isFinite(metrics.xMin)) {\n        metrics.xMin = 0;\n    }\n\n    if (!isFinite(metrics.xMax)) {\n        metrics.xMax = this.advanceWidth;\n    }\n\n    if (!isFinite(metrics.yMin)) {\n        metrics.yMin = 0;\n    }\n\n    if (!isFinite(metrics.yMax)) {\n        metrics.yMax = 0;\n    }\n\n    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n    return metrics;\n};\n\n/**\n * Draw the glyph on the given context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n */\nGlyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n    this.getPath(x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of the glyph.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n    function drawCircles(l, x, y, scale) {\n        ctx.beginPath();\n        for (var j = 0; j < l.length; j += 1) {\n            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, Math.PI * 2, false);\n        }\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    var scale = 1 / this.path.unitsPerEm * fontSize;\n\n    var blueCircles = [];\n    var redCircles = [];\n    var path = this.path;\n    for (var i = 0; i < path.commands.length; i += 1) {\n        var cmd = path.commands[i];\n        if (cmd.x !== undefined) {\n            blueCircles.push({x: cmd.x, y: -cmd.y});\n        }\n\n        if (cmd.x1 !== undefined) {\n            redCircles.push({x: cmd.x1, y: -cmd.y1});\n        }\n\n        if (cmd.x2 !== undefined) {\n            redCircles.push({x: cmd.x2, y: -cmd.y2});\n        }\n    }\n\n    ctx.fillStyle = 'blue';\n    drawCircles(blueCircles, x, y, scale);\n    ctx.fillStyle = 'red';\n    drawCircles(redCircles, x, y, scale);\n};\n\n/**\n * Draw lines indicating important font measurements.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n    var scale;\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    scale = 1 / this.path.unitsPerEm * fontSize;\n    ctx.lineWidth = 1;\n\n    // Draw the origin\n    ctx.strokeStyle = 'black';\n    draw.line(ctx, x, -10000, x, 10000);\n    draw.line(ctx, -10000, y, 10000, y);\n\n    // This code is here due to memory optimization: by not using\n    // defaults in the constructor, we save a notable amount of memory.\n    var xMin = this.xMin || 0;\n    var yMin = this.yMin || 0;\n    var xMax = this.xMax || 0;\n    var yMax = this.yMax || 0;\n    var advanceWidth = this.advanceWidth || 0;\n\n    // Draw the glyph box\n    ctx.strokeStyle = 'blue';\n    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);\n    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);\n    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));\n    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));\n\n    // Draw the advance width\n    ctx.strokeStyle = 'green';\n    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);\n};\n\n// The GlyphSet object\n\n// Define a property on the glyph that depends on the path being loaded.\nfunction defineDependentProperty(glyph, externalName, internalName) {\n    Object.defineProperty(glyph, externalName, {\n        get: function() {\n            // Request the path property to make sure the path is loaded.\n            glyph.path; // jshint ignore:line\n            return glyph[internalName];\n        },\n        set: function(newValue) {\n            glyph[internalName] = newValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n\n/**\n * A GlyphSet represents all glyphs available in the font, but modelled using\n * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n * necessary, to keep the memory footprint down.\n * @exports opentype.GlyphSet\n * @class\n * @param {opentype.Font}\n * @param {Array}\n */\nfunction GlyphSet(font, glyphs) {\n    this.font = font;\n    this.glyphs = {};\n    if (Array.isArray(glyphs)) {\n        for (var i = 0; i < glyphs.length; i++) {\n            var glyph = glyphs[i];\n            glyph.path.unitsPerEm = font.unitsPerEm;\n            this.glyphs[i] = glyph;\n        }\n    }\n\n    this.length = (glyphs && glyphs.length) || 0;\n}\n\n/**\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nGlyphSet.prototype.get = function(index) {\n    // this.glyphs[index] is 'undefined' when low memory mode is on. glyph is pushed on request only.\n    if (this.glyphs[index] === undefined) {\n        this.font._push(index);\n        if (typeof this.glyphs[index] === 'function') {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n\n        var glyph = this.glyphs[index];\n        var unicodeObj = this.font._IndexToUnicodeMap[index];\n\n        if (unicodeObj) {\n            for (var j = 0; j < unicodeObj.unicodes.length; j++)\n                { glyph.addUnicode(unicodeObj.unicodes[j]); }\n        }\n\n        if (this.font.cffEncoding) {\n            if (this.font.isCIDFont) {\n                glyph.name = 'gid' + index;\n            } else {\n                glyph.name = this.font.cffEncoding.charset[index];\n            }\n        } else if (this.font.glyphNames.names) {\n            glyph.name = this.font.glyphNames.glyphIndexToName(index);\n        }\n\n        this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;\n        this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;\n    } else {\n        if (typeof this.glyphs[index] === 'function') {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n    }\n\n    return this.glyphs[index];\n};\n\n/**\n * @param  {number} index\n * @param  {Object}\n */\nGlyphSet.prototype.push = function(index, loader) {\n    this.glyphs[index] = loader;\n    this.length++;\n};\n\n/**\n * @alias opentype.glyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nfunction glyphLoader(font, index) {\n    return new Glyph({index: index, font: font});\n}\n\n/**\n * Generate a stub glyph that can be filled with all metadata *except*\n * the \"points\" and \"path\" properties, which must be loaded only once\n * the glyph's path is actually requested for text shaping.\n * @alias opentype.ttfGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseGlyph\n * @param  {Object} data\n * @param  {number} position\n * @param  {Function} buildPath\n * @return {opentype.Glyph}\n */\nfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n    return function() {\n        var glyph = new Glyph({index: index, font: font});\n\n        glyph.path = function() {\n            parseGlyph(glyph, data, position);\n            var path = buildPath(font.glyphs, glyph);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        defineDependentProperty(glyph, 'xMin', '_xMin');\n        defineDependentProperty(glyph, 'xMax', '_xMax');\n        defineDependentProperty(glyph, 'yMin', '_yMin');\n        defineDependentProperty(glyph, 'yMax', '_yMax');\n\n        return glyph;\n    };\n}\n/**\n * @alias opentype.cffGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseCFFCharstring\n * @param  {string} charstring\n * @return {opentype.Glyph}\n */\nfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n    return function() {\n        var glyph = new Glyph({index: index, font: font});\n\n        glyph.path = function() {\n            var path = parseCFFCharstring(font, glyph, charstring);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        return glyph;\n    };\n}\n\nvar glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };\n\n// The `CFF` table contains the glyph outlines in PostScript format.\n\n// Custom equals function that can also check lists.\nfunction equals(a, b) {\n    if (a === b) {\n        return true;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) {\n            return false;\n        }\n\n        for (var i = 0; i < a.length; i += 1) {\n            if (!equals(a[i], b[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Subroutines are encoded using the negative half of the number space.\n// See type 2 chapter 4.7 \"Subroutine operators\".\nfunction calcCFFSubroutineBias(subrs) {\n    var bias;\n    if (subrs.length < 1240) {\n        bias = 107;\n    } else if (subrs.length < 33900) {\n        bias = 1131;\n    } else {\n        bias = 32768;\n    }\n\n    return bias;\n}\n\n// Parse a `CFF` INDEX array.\n// An index array consists of a list of offsets, then a list of objects at those offsets.\nfunction parseCFFIndex(data, start, conversionFn) {\n    var offsets = [];\n    var objects = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + ((count + 1) * offsetSize) + 2;\n        var pos = start + 3;\n        for (var i = 0; i < count + 1; i += 1) {\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n\n        // The total size of the index array is 4 header bytes + the value of the last offset.\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n\n    for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n        var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);\n        if (conversionFn) {\n            value = conversionFn(value);\n        }\n\n        objects.push(value);\n    }\n\n    return {objects: objects, startOffset: start, endOffset: endOffset};\n}\n\nfunction parseCFFIndexLowMemory(data, start) {\n    var offsets = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + ((count + 1) * offsetSize) + 2;\n        var pos = start + 3;\n        for (var i = 0; i < count + 1; i += 1) {\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n\n        // The total size of the index array is 4 header bytes + the value of the last offset.\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n\n    return {offsets: offsets, startOffset: start, endOffset: endOffset};\n}\nfunction getCffIndexObject(i, offsets, data, start, conversionFn) {\n    var count = parse.getCard16(data, start);\n    var objectOffset = 0;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + ((count + 1) * offsetSize) + 2;\n    }\n\n    var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n    if (conversionFn) {\n        value = conversionFn(value);\n    }\n    return value;\n}\n\n// Parse a `CFF` DICT real value.\nfunction parseFloatOperand(parser) {\n    var s = '';\n    var eof = 15;\n    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n    while (true) {\n        var b = parser.parseByte();\n        var n1 = b >> 4;\n        var n2 = b & 15;\n\n        if (n1 === eof) {\n            break;\n        }\n\n        s += lookup[n1];\n\n        if (n2 === eof) {\n            break;\n        }\n\n        s += lookup[n2];\n    }\n\n    return parseFloat(s);\n}\n\n// Parse a `CFF` DICT operand.\nfunction parseOperand(parser, b0) {\n    var b1;\n    var b2;\n    var b3;\n    var b4;\n    if (b0 === 28) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        return b1 << 8 | b2;\n    }\n\n    if (b0 === 29) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        b3 = parser.parseByte();\n        b4 = parser.parseByte();\n        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n    }\n\n    if (b0 === 30) {\n        return parseFloatOperand(parser);\n    }\n\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    }\n\n    if (b0 >= 247 && b0 <= 250) {\n        b1 = parser.parseByte();\n        return (b0 - 247) * 256 + b1 + 108;\n    }\n\n    if (b0 >= 251 && b0 <= 254) {\n        b1 = parser.parseByte();\n        return -(b0 - 251) * 256 - b1 - 108;\n    }\n\n    throw new Error('Invalid b0 ' + b0);\n}\n\n// Convert the entries returned by `parseDict` to a proper dictionary.\n// If a value is a list of one, it is unpacked.\nfunction entriesToObject(entries) {\n    var o = {};\n    for (var i = 0; i < entries.length; i += 1) {\n        var key = entries[i][0];\n        var values = entries[i][1];\n        var value = (void 0);\n        if (values.length === 1) {\n            value = values[0];\n        } else {\n            value = values;\n        }\n\n        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n            throw new Error('Object ' + o + ' already has key ' + key);\n        }\n\n        o[key] = value;\n    }\n\n    return o;\n}\n\n// Parse a `CFF` DICT object.\n// A dictionary contains key-value pairs in a compact tokenized format.\nfunction parseCFFDict(data, start, size) {\n    start = start !== undefined ? start : 0;\n    var parser = new parse.Parser(data, start);\n    var entries = [];\n    var operands = [];\n    size = size !== undefined ? size : data.length;\n\n    while (parser.relativeOffset < size) {\n        var op = parser.parseByte();\n\n        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n        // Values <= 21 are operators.\n        if (op <= 21) {\n            // Two-byte operators have an initial escape byte of 12.\n            if (op === 12) {\n                op = 1200 + parser.parseByte();\n            }\n\n            entries.push([op, operands]);\n            operands = [];\n        } else {\n            // Since the operands (values) come before the operators (keys), we store all operands in a list\n            // until we encounter an operator.\n            operands.push(parseOperand(parser, op));\n        }\n    }\n\n    return entriesToObject(entries);\n}\n\n// Given a String Index (SID), return the value of the string.\n// Strings below index 392 are standard CFF strings and are not encoded in the font.\nfunction getCFFString(strings, index) {\n    if (index <= 390) {\n        index = cffStandardStrings[index];\n    } else {\n        index = strings[index - 391];\n    }\n\n    return index;\n}\n\n// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\nfunction interpretDict(dict, meta, strings) {\n    var newDict = {};\n    var value;\n\n    // Because we also want to include missing values, we start out from the meta list\n    // and lookup values in the dict.\n    for (var i = 0; i < meta.length; i += 1) {\n        var m = meta[i];\n\n        if (Array.isArray(m.type)) {\n            var values = [];\n            values.length = m.type.length;\n            for (var j = 0; j < m.type.length; j++) {\n                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                if (value === undefined) {\n                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;\n                }\n                if (m.type[j] === 'SID') {\n                    value = getCFFString(strings, value);\n                }\n                values[j] = value;\n            }\n            newDict[m.name] = values;\n        } else {\n            value = dict[m.op];\n            if (value === undefined) {\n                value = m.value !== undefined ? m.value : null;\n            }\n\n            if (m.type === 'SID') {\n                value = getCFFString(strings, value);\n            }\n            newDict[m.name] = value;\n        }\n    }\n\n    return newDict;\n}\n\n// Parse the CFF header.\nfunction parseCFFHeader(data, start) {\n    var header = {};\n    header.formatMajor = parse.getCard8(data, start);\n    header.formatMinor = parse.getCard8(data, start + 1);\n    header.size = parse.getCard8(data, start + 2);\n    header.offsetSize = parse.getCard8(data, start + 3);\n    header.startOffset = start;\n    header.endOffset = start + 4;\n    return header;\n}\n\nvar TOP_DICT_META = [\n    {name: 'version', op: 0, type: 'SID'},\n    {name: 'notice', op: 1, type: 'SID'},\n    {name: 'copyright', op: 1200, type: 'SID'},\n    {name: 'fullName', op: 2, type: 'SID'},\n    {name: 'familyName', op: 3, type: 'SID'},\n    {name: 'weight', op: 4, type: 'SID'},\n    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},\n    {name: 'italicAngle', op: 1202, type: 'number', value: 0},\n    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},\n    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},\n    {name: 'paintType', op: 1205, type: 'number', value: 0},\n    {name: 'charstringType', op: 1206, type: 'number', value: 2},\n    {\n        name: 'fontMatrix',\n        op: 1207,\n        type: ['real', 'real', 'real', 'real', 'real', 'real'],\n        value: [0.001, 0, 0, 0.001, 0, 0]\n    },\n    {name: 'uniqueId', op: 13, type: 'number'},\n    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},\n    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},\n    {name: 'xuid', op: 14, type: [], value: null},\n    {name: 'charset', op: 15, type: 'offset', value: 0},\n    {name: 'encoding', op: 16, type: 'offset', value: 0},\n    {name: 'charStrings', op: 17, type: 'offset', value: 0},\n    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},\n    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},\n    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},\n    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},\n    {name: 'cidFontType', op: 1233, type: 'number', value: 0},\n    {name: 'cidCount', op: 1234, type: 'number', value: 8720},\n    {name: 'uidBase', op: 1235, type: 'number'},\n    {name: 'fdArray', op: 1236, type: 'offset'},\n    {name: 'fdSelect', op: 1237, type: 'offset'},\n    {name: 'fontName', op: 1238, type: 'SID'}\n];\n\nvar PRIVATE_DICT_META = [\n    {name: 'subrs', op: 19, type: 'offset', value: 0},\n    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},\n    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}\n];\n\n// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n// The top dictionary contains the essential metadata for the font, together with the private dictionary.\nfunction parseCFFTopDict(data, strings) {\n    var dict = parseCFFDict(data, 0, data.byteLength);\n    return interpretDict(dict, TOP_DICT_META, strings);\n}\n\n// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\nfunction parseCFFPrivateDict(data, start, size, strings) {\n    var dict = parseCFFDict(data, start, size);\n    return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\n\n// Returns a list of \"Top DICT\"s found using an INDEX list.\n// Used to read both the usual high-level Top DICTs and also the FDArray\n// discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n// a Private DICT that is read and saved into the Top DICT.\n//\n// In addition to the expected/optional values as outlined in TOP_DICT_META\n// the following values might be saved into the Top DICT.\n//\n//    _subrs []        array of local CFF subroutines from Private DICT\n//    _subrsBias       bias value computed from number of subroutines\n//                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n//    _defaultWidthX   default widths for CFF characters\n//    _nominalWidthX   bias added to width embedded within glyph description\n//\n//    _privateDict     saved copy of parsed Private DICT from Top DICT\nfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n    var topDictArray = [];\n    for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n        var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n        var topDict = parseCFFTopDict(topDictData, strings);\n        topDict._subrs = [];\n        topDict._subrsBias = 0;\n        topDict._defaultWidthX = 0;\n        topDict._nominalWidthX = 0;\n        var privateSize = topDict.private[0];\n        var privateOffset = topDict.private[1];\n        if (privateSize !== 0 && privateOffset !== 0) {\n            var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n            topDict._defaultWidthX = privateDict.defaultWidthX;\n            topDict._nominalWidthX = privateDict.nominalWidthX;\n            if (privateDict.subrs !== 0) {\n                var subrOffset = privateOffset + privateDict.subrs;\n                var subrIndex = parseCFFIndex(data, subrOffset + start);\n                topDict._subrs = subrIndex.objects;\n                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n            }\n            topDict._privateDict = privateDict;\n        }\n        topDictArray.push(topDict);\n    }\n    return topDictArray;\n}\n\n// Parse the CFF charset table, which contains internal names for all the glyphs.\n// This function will return a list of glyph names.\n// See Adobe TN #5176 chapter 13, \"Charsets\".\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n    var sid;\n    var count;\n    var parser = new parse.Parser(data, start);\n\n    // The .notdef glyph is not included, so subtract 1.\n    nGlyphs -= 1;\n    var charset = ['.notdef'];\n\n    var format = parser.parseCard8();\n    if (format === 0) {\n        for (var i = 0; i < nGlyphs; i += 1) {\n            sid = parser.parseSID();\n            charset.push(getCFFString(strings, sid));\n        }\n    } else if (format === 1) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard8();\n            for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else if (format === 2) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard16();\n            for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown charset format ' + format);\n    }\n\n    return charset;\n}\n\n// Parse the CFF encoding data. Only one encoding can be specified per font.\n// See Adobe TN #5176 chapter 12, \"Encodings\".\nfunction parseCFFEncoding(data, start, charset) {\n    var code;\n    var enc = {};\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        var nCodes = parser.parseCard8();\n        for (var i = 0; i < nCodes; i += 1) {\n            code = parser.parseCard8();\n            enc[code] = i;\n        }\n    } else if (format === 1) {\n        var nRanges = parser.parseCard8();\n        code = 1;\n        for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n            var first = parser.parseCard8();\n            var nLeft = parser.parseCard8();\n            for (var j = first; j <= first + nLeft; j += 1) {\n                enc[j] = code;\n                code += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown encoding format ' + format);\n    }\n\n    return new CffEncoding(enc, charset);\n}\n\n// Take in charstring code and return a Glyph object.\n// The encoding is described in the Type 2 Charstring Format\n// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\nfunction parseCFFCharstring(font, glyph, code) {\n    var c1x;\n    var c1y;\n    var c2x;\n    var c2y;\n    var p = new Path();\n    var stack = [];\n    var nStems = 0;\n    var haveWidth = false;\n    var open = false;\n    var x = 0;\n    var y = 0;\n    var subrs;\n    var subrsBias;\n    var defaultWidthX;\n    var nominalWidthX;\n    if (font.isCIDFont) {\n        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n        subrs = fdDict._subrs;\n        subrsBias = fdDict._subrsBias;\n        defaultWidthX = fdDict._defaultWidthX;\n        nominalWidthX = fdDict._nominalWidthX;\n    } else {\n        subrs = font.tables.cff.topDict._subrs;\n        subrsBias = font.tables.cff.topDict._subrsBias;\n        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n    }\n    var width = defaultWidthX;\n\n    function newContour(x, y) {\n        if (open) {\n            p.closePath();\n        }\n\n        p.moveTo(x, y);\n        open = true;\n    }\n\n    function parseStems() {\n        var hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n    }\n\n    function parse(code) {\n        var b1;\n        var b2;\n        var b3;\n        var b4;\n        var codeIndex;\n        var subrCode;\n        var jpx;\n        var jpy;\n        var c3x;\n        var c3y;\n        var c4x;\n        var c4y;\n\n        var i = 0;\n        while (i < code.length) {\n            var v = code[i];\n            i += 1;\n            switch (v) {\n                case 1: // hstem\n                    parseStems();\n                    break;\n                case 3: // vstem\n                    parseStems();\n                    break;\n                case 4: // vmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 5: // rlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 6: // hlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 7: // vlineto\n                    while (stack.length > 0) {\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 8: // rrcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 10: // callsubr\n                    codeIndex = stack.pop() + subrsBias;\n                    subrCode = subrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 11: // return\n                    return;\n                case 12: // flex operators\n                    v = code[i];\n                    i += 1;\n                    switch (v) {\n                        case 35: // flex\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y + stack.shift();    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = jpy + stack.shift();    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            x = c4x   + stack.shift();    // dx6\n                            y = c4y   + stack.shift();    // dy6\n                            stack.shift();                // flex depth\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 34: // hflex\n                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y;                      // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y;                    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = c2y;                    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = y;                      // dy5\n                            x = c4x + stack.shift();      // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 36: // hflex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y;                    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = c2y;                    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            x = c4x + stack.shift();      // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 37: // flex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y + stack.shift();    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = jpy + stack.shift();    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                x = c4x + stack.shift();\n                            } else {\n                                y = c4y + stack.shift();\n                            }\n\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        default:\n                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);\n                            stack.length = 0;\n                    }\n                    break;\n                case 14: // endchar\n                    if (stack.length > 0 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    if (open) {\n                        p.closePath();\n                        open = false;\n                    }\n\n                    break;\n                case 18: // hstemhm\n                    parseStems();\n                    break;\n                case 19: // hintmask\n                case 20: // cntrmask\n                    parseStems();\n                    i += (nStems + 7) >> 3;\n                    break;\n                case 21: // rmoveto\n                    if (stack.length > 2 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 22: // hmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 23: // vstemhm\n                    parseStems();\n                    break;\n                case 24: // rcurveline\n                    while (stack.length > 2) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                    break;\n                case 25: // rlinecurve\n                    while (stack.length > 6) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    break;\n                case 26: // vvcurveto\n                    if (stack.length % 2) {\n                        x += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x;\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 27: // hhcurveto\n                    if (stack.length % 2) {\n                        y += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y;\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 28: // shortint\n                    b1 = code[i];\n                    b2 = code[i + 1];\n                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                    i += 2;\n                    break;\n                case 29: // callgsubr\n                    codeIndex = stack.pop() + font.gsubrsBias;\n                    subrCode = font.gsubrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 30: // vhcurveto\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 31: // hvcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                default:\n                    if (v < 32) {\n                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n                    } else if (v < 247) {\n                        stack.push(v - 139);\n                    } else if (v < 251) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push((v - 247) * 256 + b1 + 108);\n                    } else if (v < 255) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push(-(v - 251) * 256 - b1 - 108);\n                    } else {\n                        b1 = code[i];\n                        b2 = code[i + 1];\n                        b3 = code[i + 2];\n                        b4 = code[i + 3];\n                        i += 4;\n                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n                    }\n            }\n        }\n    }\n\n    parse(code);\n\n    glyph.advanceWidth = width;\n    return p;\n}\n\nfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n    var fdSelect = [];\n    var fdIndex;\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        // Simple list of nGlyphs elements\n        for (var iGid = 0; iGid < nGlyphs; iGid++) {\n            fdIndex = parser.parseCard8();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n            }\n            fdSelect.push(fdIndex);\n        }\n    } else if (format === 3) {\n        // Ranges\n        var nRanges = parser.parseCard16();\n        var first = parser.parseCard16();\n        if (first !== 0) {\n            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);\n        }\n        var next;\n        for (var iRange = 0; iRange < nRanges; iRange++) {\n            fdIndex = parser.parseCard8();\n            next = parser.parseCard16();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n            }\n            if (next > nGlyphs) {\n                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);\n            }\n            for (; first < next; first++) {\n                fdSelect.push(fdIndex);\n            }\n            first = next;\n        }\n        if (next !== nGlyphs) {\n            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);\n        }\n    } else {\n        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);\n    }\n    return fdSelect;\n}\n\n// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\nfunction parseCFFTable(data, start, font, opt) {\n    font.tables.cff = {};\n    var header = parseCFFHeader(data, start);\n    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n    font.gsubrs = globalSubrIndex.objects;\n    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n    var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n    if (topDictArray.length !== 1) {\n        throw new Error('CFF table has too many fonts in \\'FontSet\\' - count of fonts NameIndex.length = ' + topDictArray.length);\n    }\n\n    var topDict = topDictArray[0];\n    font.tables.cff.topDict = topDict;\n\n    if (topDict._privateDict) {\n        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n    }\n\n    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n        font.isCIDFont = true;\n    }\n\n    if (font.isCIDFont) {\n        var fdArrayOffset = topDict.fdArray;\n        var fdSelectOffset = topDict.fdSelect;\n        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');\n        }\n        fdArrayOffset += start;\n        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n        var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n        topDict._fdArray = fdArray;\n        fdSelectOffset += start;\n        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n    }\n\n    var privateDictOffset = start + topDict.private[1];\n    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n    font.defaultWidthX = privateDict.defaultWidthX;\n    font.nominalWidthX = privateDict.nominalWidthX;\n\n    if (privateDict.subrs !== 0) {\n        var subrOffset = privateDictOffset + privateDict.subrs;\n        var subrIndex = parseCFFIndex(data, subrOffset);\n        font.subrs = subrIndex.objects;\n        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n    } else {\n        font.subrs = [];\n        font.subrsBias = 0;\n    }\n\n    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n    var charStringsIndex;\n    if (opt.lowMemory) {\n        charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.offsets.length;\n    } else {\n        charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.objects.length;\n    }\n\n    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n    if (topDict.encoding === 0) {\n        // Standard encoding\n        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n    } else if (topDict.encoding === 1) {\n        // Expert encoding\n        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n    } else {\n        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n    }\n\n    // Prefer the CMAP encoding to the CFF encoding.\n    font.encoding = font.encoding || font.cffEncoding;\n\n    font.glyphs = new glyphset.GlyphSet(font);\n    if (opt.lowMemory) {\n        font._push = function(i) {\n            var charString = getCffIndexObject(i, charStringsIndex.offsets, data, start + topDict.charStrings);\n            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n        };\n    } else {\n        for (var i = 0; i < font.nGlyphs; i += 1) {\n            var charString = charStringsIndex.objects[i];\n            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n        }\n    }\n}\n\n// Convert a string to a String ID (SID).\n// The list of strings is modified in place.\nfunction encodeString(s, strings) {\n    var sid;\n\n    // Is the string in the CFF standard strings?\n    var i = cffStandardStrings.indexOf(s);\n    if (i >= 0) {\n        sid = i;\n    }\n\n    // Is the string already in the string index?\n    i = strings.indexOf(s);\n    if (i >= 0) {\n        sid = i + cffStandardStrings.length;\n    } else {\n        sid = cffStandardStrings.length + strings.length;\n        strings.push(s);\n    }\n\n    return sid;\n}\n\nfunction makeHeader() {\n    return new table.Record('Header', [\n        {name: 'major', type: 'Card8', value: 1},\n        {name: 'minor', type: 'Card8', value: 0},\n        {name: 'hdrSize', type: 'Card8', value: 4},\n        {name: 'major', type: 'Card8', value: 1}\n    ]);\n}\n\nfunction makeNameIndex(fontNames) {\n    var t = new table.Record('Name INDEX', [\n        {name: 'names', type: 'INDEX', value: []}\n    ]);\n    t.names = [];\n    for (var i = 0; i < fontNames.length; i += 1) {\n        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});\n    }\n\n    return t;\n}\n\n// Given a dictionary's metadata, create a DICT structure.\nfunction makeDict(meta, attrs, strings) {\n    var m = {};\n    for (var i = 0; i < meta.length; i += 1) {\n        var entry = meta[i];\n        var value = attrs[entry.name];\n        if (value !== undefined && !equals(value, entry.value)) {\n            if (entry.type === 'SID') {\n                value = encodeString(value, strings);\n            }\n\n            m[entry.op] = {name: entry.name, type: entry.type, value: value};\n        }\n    }\n\n    return m;\n}\n\n// The Top DICT houses the global font attributes.\nfunction makeTopDict(attrs, strings) {\n    var t = new table.Record('Top DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(TOP_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makeTopDictIndex(topDict) {\n    var t = new table.Record('Top DICT INDEX', [\n        {name: 'topDicts', type: 'INDEX', value: []}\n    ]);\n    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];\n    return t;\n}\n\nfunction makeStringIndex(strings) {\n    var t = new table.Record('String INDEX', [\n        {name: 'strings', type: 'INDEX', value: []}\n    ]);\n    t.strings = [];\n    for (var i = 0; i < strings.length; i += 1) {\n        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});\n    }\n\n    return t;\n}\n\nfunction makeGlobalSubrIndex() {\n    // Currently we don't use subroutines.\n    return new table.Record('Global Subr INDEX', [\n        {name: 'subrs', type: 'INDEX', value: []}\n    ]);\n}\n\nfunction makeCharsets(glyphNames, strings) {\n    var t = new table.Record('Charsets', [\n        {name: 'format', type: 'Card8', value: 0}\n    ]);\n    for (var i = 0; i < glyphNames.length; i += 1) {\n        var glyphName = glyphNames[i];\n        var glyphSID = encodeString(glyphName, strings);\n        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});\n    }\n\n    return t;\n}\n\nfunction glyphToOps(glyph) {\n    var ops = [];\n    var path = glyph.path;\n    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});\n    var x = 0;\n    var y = 0;\n    for (var i = 0; i < path.commands.length; i += 1) {\n        var dx = (void 0);\n        var dy = (void 0);\n        var cmd = path.commands[i];\n        if (cmd.type === 'Q') {\n            // CFF only supports bézier curves, so convert the quad to a bézier.\n            var _13 = 1 / 3;\n            var _23 = 2 / 3;\n\n            // We're going to create a new command so we don't change the original path.\n            // Since all coordinates are relative, we round() them ASAP to avoid propagating errors.\n            cmd = {\n                type: 'C',\n                x: cmd.x,\n                y: cmd.y,\n                x1: Math.round(_13 * x + _23 * cmd.x1),\n                y1: Math.round(_13 * y + _23 * cmd.y1),\n                x2: Math.round(_13 * cmd.x + _23 * cmd.x1),\n                y2: Math.round(_13 * cmd.y + _23 * cmd.y1)\n            };\n        }\n\n        if (cmd.type === 'M') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rmoveto', type: 'OP', value: 21});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'L') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rlineto', type: 'OP', value: 5});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'C') {\n            var dx1 = Math.round(cmd.x1 - x);\n            var dy1 = Math.round(cmd.y1 - y);\n            var dx2 = Math.round(cmd.x2 - cmd.x1);\n            var dy2 = Math.round(cmd.y2 - cmd.y1);\n            dx = Math.round(cmd.x - cmd.x2);\n            dy = Math.round(cmd.y - cmd.y2);\n            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});\n            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});\n            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});\n            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rrcurveto', type: 'OP', value: 8});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        }\n\n        // Contours are closed automatically.\n    }\n\n    ops.push({name: 'endchar', type: 'OP', value: 14});\n    return ops;\n}\n\nfunction makeCharStringsIndex(glyphs) {\n    var t = new table.Record('CharStrings INDEX', [\n        {name: 'charStrings', type: 'INDEX', value: []}\n    ]);\n\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs.get(i);\n        var ops = glyphToOps(glyph);\n        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});\n    }\n\n    return t;\n}\n\nfunction makePrivateDict(attrs, strings) {\n    var t = new table.Record('Private DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makeCFFTable(glyphs, options) {\n    var t = new table.Table('CFF ', [\n        {name: 'header', type: 'RECORD'},\n        {name: 'nameIndex', type: 'RECORD'},\n        {name: 'topDictIndex', type: 'RECORD'},\n        {name: 'stringIndex', type: 'RECORD'},\n        {name: 'globalSubrIndex', type: 'RECORD'},\n        {name: 'charsets', type: 'RECORD'},\n        {name: 'charStringsIndex', type: 'RECORD'},\n        {name: 'privateDict', type: 'RECORD'}\n    ]);\n\n    var fontScale = 1 / options.unitsPerEm;\n    // We use non-zero values for the offsets so that the DICT encodes them.\n    // This is important because the size of the Top DICT plays a role in offset calculation,\n    // and the size shouldn't change after we've written correct offsets.\n    var attrs = {\n        version: options.version,\n        fullName: options.fullName,\n        familyName: options.familyName,\n        weight: options.weightName,\n        fontBBox: options.fontBBox || [0, 0, 0, 0],\n        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n        charset: 999,\n        encoding: 0,\n        charStrings: 999,\n        private: [0, 999]\n    };\n\n    var privateAttrs = {};\n\n    var glyphNames = [];\n    var glyph;\n\n    // Skip first glyph (.notdef)\n    for (var i = 1; i < glyphs.length; i += 1) {\n        glyph = glyphs.get(i);\n        glyphNames.push(glyph.name);\n    }\n\n    var strings = [];\n\n    t.header = makeHeader();\n    t.nameIndex = makeNameIndex([options.postScriptName]);\n    var topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n    t.globalSubrIndex = makeGlobalSubrIndex();\n    t.charsets = makeCharsets(glyphNames, strings);\n    t.charStringsIndex = makeCharStringsIndex(glyphs);\n    t.privateDict = makePrivateDict(privateAttrs, strings);\n\n    // Needs to come at the end, to encode all custom strings used in the font.\n    t.stringIndex = makeStringIndex(strings);\n\n    var startOffset = t.header.sizeOf() +\n        t.nameIndex.sizeOf() +\n        t.topDictIndex.sizeOf() +\n        t.stringIndex.sizeOf() +\n        t.globalSubrIndex.sizeOf();\n    attrs.charset = startOffset;\n\n    // We use the CFF standard encoding; proper encoding will be handled in cmap.\n    attrs.encoding = 0;\n    attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n    // Recreate the Top DICT INDEX with the correct offsets.\n    topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n\n    return t;\n}\n\nvar cff = { parse: parseCFFTable, make: makeCFFTable };\n\n// The `head` table contains global information about the font.\n\n// Parse the header `head` table\nfunction parseHeadTable(data, start) {\n    var head = {};\n    var p = new parse.Parser(data, start);\n    head.version = p.parseVersion();\n    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n    head.checkSumAdjustment = p.parseULong();\n    head.magicNumber = p.parseULong();\n    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n    head.flags = p.parseUShort();\n    head.unitsPerEm = p.parseUShort();\n    head.created = p.parseLongDateTime();\n    head.modified = p.parseLongDateTime();\n    head.xMin = p.parseShort();\n    head.yMin = p.parseShort();\n    head.xMax = p.parseShort();\n    head.yMax = p.parseShort();\n    head.macStyle = p.parseUShort();\n    head.lowestRecPPEM = p.parseUShort();\n    head.fontDirectionHint = p.parseShort();\n    head.indexToLocFormat = p.parseShort();\n    head.glyphDataFormat = p.parseShort();\n    return head;\n}\n\nfunction makeHeadTable(options) {\n    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n    var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n    var createdTimestamp = timestamp;\n\n    if (options.createdTimestamp) {\n        createdTimestamp = options.createdTimestamp + 2082844800;\n    }\n\n    return new table.Table('head', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},\n        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},\n        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},\n        {name: 'flags', type: 'USHORT', value: 0},\n        {name: 'unitsPerEm', type: 'USHORT', value: 1000},\n        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},\n        {name: 'modified', type: 'LONGDATETIME', value: timestamp},\n        {name: 'xMin', type: 'SHORT', value: 0},\n        {name: 'yMin', type: 'SHORT', value: 0},\n        {name: 'xMax', type: 'SHORT', value: 0},\n        {name: 'yMax', type: 'SHORT', value: 0},\n        {name: 'macStyle', type: 'USHORT', value: 0},\n        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},\n        {name: 'fontDirectionHint', type: 'SHORT', value: 2},\n        {name: 'indexToLocFormat', type: 'SHORT', value: 0},\n        {name: 'glyphDataFormat', type: 'SHORT', value: 0}\n    ], options);\n}\n\nvar head = { parse: parseHeadTable, make: makeHeadTable };\n\n// The `hhea` table contains information for horizontal layout.\n\n// Parse the horizontal header `hhea` table\nfunction parseHheaTable(data, start) {\n    var hhea = {};\n    var p = new parse.Parser(data, start);\n    hhea.version = p.parseVersion();\n    hhea.ascender = p.parseShort();\n    hhea.descender = p.parseShort();\n    hhea.lineGap = p.parseShort();\n    hhea.advanceWidthMax = p.parseUShort();\n    hhea.minLeftSideBearing = p.parseShort();\n    hhea.minRightSideBearing = p.parseShort();\n    hhea.xMaxExtent = p.parseShort();\n    hhea.caretSlopeRise = p.parseShort();\n    hhea.caretSlopeRun = p.parseShort();\n    hhea.caretOffset = p.parseShort();\n    p.relativeOffset += 8;\n    hhea.metricDataFormat = p.parseShort();\n    hhea.numberOfHMetrics = p.parseUShort();\n    return hhea;\n}\n\nfunction makeHheaTable(options) {\n    return new table.Table('hhea', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'ascender', type: 'FWORD', value: 0},\n        {name: 'descender', type: 'FWORD', value: 0},\n        {name: 'lineGap', type: 'FWORD', value: 0},\n        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},\n        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},\n        {name: 'minRightSideBearing', type: 'FWORD', value: 0},\n        {name: 'xMaxExtent', type: 'FWORD', value: 0},\n        {name: 'caretSlopeRise', type: 'SHORT', value: 1},\n        {name: 'caretSlopeRun', type: 'SHORT', value: 0},\n        {name: 'caretOffset', type: 'SHORT', value: 0},\n        {name: 'reserved1', type: 'SHORT', value: 0},\n        {name: 'reserved2', type: 'SHORT', value: 0},\n        {name: 'reserved3', type: 'SHORT', value: 0},\n        {name: 'reserved4', type: 'SHORT', value: 0},\n        {name: 'metricDataFormat', type: 'SHORT', value: 0},\n        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}\n    ], options);\n}\n\nvar hhea = { parse: parseHheaTable, make: makeHheaTable };\n\n// The `hmtx` table contains the horizontal metrics for all glyphs.\n\nfunction parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for (var i = 0; i < numGlyphs; i += 1) {\n        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n\n        var glyph = glyphs.get(i);\n        glyph.advanceWidth = advanceWidth;\n        glyph.leftSideBearing = leftSideBearing;\n    }\n}\n\nfunction parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {\n    font._hmtxTableData = {};\n\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for (var i = 0; i < numGlyphs; i += 1) {\n        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n\n        font._hmtxTableData[i] = {\n            advanceWidth: advanceWidth,\n            leftSideBearing: leftSideBearing\n        };\n    }\n}\n\n// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\nfunction parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {\n    if (opt.lowMemory)\n        { parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs); }\n    else\n        { parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs); }\n}\n\nfunction makeHmtxTable(glyphs) {\n    var t = new table.Table('hmtx', []);\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs.get(i);\n        var advanceWidth = glyph.advanceWidth || 0;\n        var leftSideBearing = glyph.leftSideBearing || 0;\n        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});\n        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});\n    }\n\n    return t;\n}\n\nvar hmtx = { parse: parseHmtxTable, make: makeHmtxTable };\n\n// The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\nfunction makeLtagTable(tags) {\n    var result = new table.Table('ltag', [\n        {name: 'version', type: 'ULONG', value: 1},\n        {name: 'flags', type: 'ULONG', value: 0},\n        {name: 'numTags', type: 'ULONG', value: tags.length}\n    ]);\n\n    var stringPool = '';\n    var stringPoolOffset = 12 + tags.length * 4;\n    for (var i = 0; i < tags.length; ++i) {\n        var pos = stringPool.indexOf(tags[i]);\n        if (pos < 0) {\n            pos = stringPool.length;\n            stringPool += tags[i];\n        }\n\n        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});\n        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});\n    }\n\n    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n    return result;\n}\n\nfunction parseLtagTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n    // The 'ltag' specification does not define any flags; skip the field.\n    p.skip('uLong', 1);\n    var numTags = p.parseULong();\n\n    var tags = [];\n    for (var i = 0; i < numTags; i++) {\n        var tag = '';\n        var offset = start + p.parseUShort();\n        var length = p.parseUShort();\n        for (var j = offset; j < offset + length; ++j) {\n            tag += String.fromCharCode(data.getInt8(j));\n        }\n\n        tags.push(tag);\n    }\n\n    return tags;\n}\n\nvar ltag = { make: makeLtagTable, parse: parseLtagTable };\n\n// The `maxp` table establishes the memory requirements for the font.\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    var maxp = {};\n    var p = new parse.Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nfunction makeMaxpTable(numGlyphs) {\n    return new table.Table('maxp', [\n        {name: 'version', type: 'FIXED', value: 0x00005000},\n        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n    ]);\n}\n\nvar maxp = { parse: parseMaxpTable, make: makeMaxpTable };\n\n// The `name` naming table.\n\n// NameIDs for the name table.\nvar nameTableNames = [\n    'copyright',              // 0\n    'fontFamily',             // 1\n    'fontSubfamily',          // 2\n    'uniqueID',               // 3\n    'fullName',               // 4\n    'version',                // 5\n    'postScriptName',         // 6\n    'trademark',              // 7\n    'manufacturer',           // 8\n    'designer',               // 9\n    'description',            // 10\n    'manufacturerURL',        // 11\n    'designerURL',            // 12\n    'license',                // 13\n    'licenseURL',             // 14\n    'reserved',               // 15\n    'preferredFamily',        // 16\n    'preferredSubfamily',     // 17\n    'compatibleFullName',     // 18\n    'sampleText',             // 19\n    'postScriptFindFontName', // 20\n    'wwsFamily',              // 21\n    'wwsSubfamily'            // 22\n];\n\nvar macLanguages = {\n    0: 'en',\n    1: 'fr',\n    2: 'de',\n    3: 'it',\n    4: 'nl',\n    5: 'sv',\n    6: 'es',\n    7: 'da',\n    8: 'pt',\n    9: 'no',\n    10: 'he',\n    11: 'ja',\n    12: 'ar',\n    13: 'fi',\n    14: 'el',\n    15: 'is',\n    16: 'mt',\n    17: 'tr',\n    18: 'hr',\n    19: 'zh-Hant',\n    20: 'ur',\n    21: 'hi',\n    22: 'th',\n    23: 'ko',\n    24: 'lt',\n    25: 'pl',\n    26: 'hu',\n    27: 'es',\n    28: 'lv',\n    29: 'se',\n    30: 'fo',\n    31: 'fa',\n    32: 'ru',\n    33: 'zh',\n    34: 'nl-BE',\n    35: 'ga',\n    36: 'sq',\n    37: 'ro',\n    38: 'cz',\n    39: 'sk',\n    40: 'si',\n    41: 'yi',\n    42: 'sr',\n    43: 'mk',\n    44: 'bg',\n    45: 'uk',\n    46: 'be',\n    47: 'uz',\n    48: 'kk',\n    49: 'az-Cyrl',\n    50: 'az-Arab',\n    51: 'hy',\n    52: 'ka',\n    53: 'mo',\n    54: 'ky',\n    55: 'tg',\n    56: 'tk',\n    57: 'mn-CN',\n    58: 'mn',\n    59: 'ps',\n    60: 'ks',\n    61: 'ku',\n    62: 'sd',\n    63: 'bo',\n    64: 'ne',\n    65: 'sa',\n    66: 'mr',\n    67: 'bn',\n    68: 'as',\n    69: 'gu',\n    70: 'pa',\n    71: 'or',\n    72: 'ml',\n    73: 'kn',\n    74: 'ta',\n    75: 'te',\n    76: 'si',\n    77: 'my',\n    78: 'km',\n    79: 'lo',\n    80: 'vi',\n    81: 'id',\n    82: 'tl',\n    83: 'ms',\n    84: 'ms-Arab',\n    85: 'am',\n    86: 'ti',\n    87: 'om',\n    88: 'so',\n    89: 'sw',\n    90: 'rw',\n    91: 'rn',\n    92: 'ny',\n    93: 'mg',\n    94: 'eo',\n    128: 'cy',\n    129: 'eu',\n    130: 'ca',\n    131: 'la',\n    132: 'qu',\n    133: 'gn',\n    134: 'ay',\n    135: 'tt',\n    136: 'ug',\n    137: 'dz',\n    138: 'jv',\n    139: 'su',\n    140: 'gl',\n    141: 'af',\n    142: 'br',\n    143: 'iu',\n    144: 'gd',\n    145: 'gv',\n    146: 'ga',\n    147: 'to',\n    148: 'el-polyton',\n    149: 'kl',\n    150: 'az',\n    151: 'nn'\n};\n\n// MacOS language ID → MacOS script ID\n//\n// Note that the script ID is not sufficient to determine what encoding\n// to use in TrueType files. For some languages, MacOS used a modification\n// of a mainstream script. For example, an Icelandic name would be stored\n// with smRoman in the TrueType naming table, but the actual encoding\n// is a special Icelandic version of the normal Macintosh Roman encoding.\n// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n// Syllables but MacOS had run out of available script codes, so this was\n// done as a (pretty radical) \"modification\" of Ethiopic.\n//\n// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nvar macLanguageToScript = {\n    0: 0,  // langEnglish → smRoman\n    1: 0,  // langFrench → smRoman\n    2: 0,  // langGerman → smRoman\n    3: 0,  // langItalian → smRoman\n    4: 0,  // langDutch → smRoman\n    5: 0,  // langSwedish → smRoman\n    6: 0,  // langSpanish → smRoman\n    7: 0,  // langDanish → smRoman\n    8: 0,  // langPortuguese → smRoman\n    9: 0,  // langNorwegian → smRoman\n    10: 5,  // langHebrew → smHebrew\n    11: 1,  // langJapanese → smJapanese\n    12: 4,  // langArabic → smArabic\n    13: 0,  // langFinnish → smRoman\n    14: 6,  // langGreek → smGreek\n    15: 0,  // langIcelandic → smRoman (modified)\n    16: 0,  // langMaltese → smRoman\n    17: 0,  // langTurkish → smRoman (modified)\n    18: 0,  // langCroatian → smRoman (modified)\n    19: 2,  // langTradChinese → smTradChinese\n    20: 4,  // langUrdu → smArabic\n    21: 9,  // langHindi → smDevanagari\n    22: 21,  // langThai → smThai\n    23: 3,  // langKorean → smKorean\n    24: 29,  // langLithuanian → smCentralEuroRoman\n    25: 29,  // langPolish → smCentralEuroRoman\n    26: 29,  // langHungarian → smCentralEuroRoman\n    27: 29,  // langEstonian → smCentralEuroRoman\n    28: 29,  // langLatvian → smCentralEuroRoman\n    29: 0,  // langSami → smRoman\n    30: 0,  // langFaroese → smRoman (modified)\n    31: 4,  // langFarsi → smArabic (modified)\n    32: 7,  // langRussian → smCyrillic\n    33: 25,  // langSimpChinese → smSimpChinese\n    34: 0,  // langFlemish → smRoman\n    35: 0,  // langIrishGaelic → smRoman (modified)\n    36: 0,  // langAlbanian → smRoman\n    37: 0,  // langRomanian → smRoman (modified)\n    38: 29,  // langCzech → smCentralEuroRoman\n    39: 29,  // langSlovak → smCentralEuroRoman\n    40: 0,  // langSlovenian → smRoman (modified)\n    41: 5,  // langYiddish → smHebrew\n    42: 7,  // langSerbian → smCyrillic\n    43: 7,  // langMacedonian → smCyrillic\n    44: 7,  // langBulgarian → smCyrillic\n    45: 7,  // langUkrainian → smCyrillic (modified)\n    46: 7,  // langByelorussian → smCyrillic\n    47: 7,  // langUzbek → smCyrillic\n    48: 7,  // langKazakh → smCyrillic\n    49: 7,  // langAzerbaijani → smCyrillic\n    50: 4,  // langAzerbaijanAr → smArabic\n    51: 24,  // langArmenian → smArmenian\n    52: 23,  // langGeorgian → smGeorgian\n    53: 7,  // langMoldavian → smCyrillic\n    54: 7,  // langKirghiz → smCyrillic\n    55: 7,  // langTajiki → smCyrillic\n    56: 7,  // langTurkmen → smCyrillic\n    57: 27,  // langMongolian → smMongolian\n    58: 7,  // langMongolianCyr → smCyrillic\n    59: 4,  // langPashto → smArabic\n    60: 4,  // langKurdish → smArabic\n    61: 4,  // langKashmiri → smArabic\n    62: 4,  // langSindhi → smArabic\n    63: 26,  // langTibetan → smTibetan\n    64: 9,  // langNepali → smDevanagari\n    65: 9,  // langSanskrit → smDevanagari\n    66: 9,  // langMarathi → smDevanagari\n    67: 13,  // langBengali → smBengali\n    68: 13,  // langAssamese → smBengali\n    69: 11,  // langGujarati → smGujarati\n    70: 10,  // langPunjabi → smGurmukhi\n    71: 12,  // langOriya → smOriya\n    72: 17,  // langMalayalam → smMalayalam\n    73: 16,  // langKannada → smKannada\n    74: 14,  // langTamil → smTamil\n    75: 15,  // langTelugu → smTelugu\n    76: 18,  // langSinhalese → smSinhalese\n    77: 19,  // langBurmese → smBurmese\n    78: 20,  // langKhmer → smKhmer\n    79: 22,  // langLao → smLao\n    80: 30,  // langVietnamese → smVietnamese\n    81: 0,  // langIndonesian → smRoman\n    82: 0,  // langTagalog → smRoman\n    83: 0,  // langMalayRoman → smRoman\n    84: 4,  // langMalayArabic → smArabic\n    85: 28,  // langAmharic → smEthiopic\n    86: 28,  // langTigrinya → smEthiopic\n    87: 28,  // langOromo → smEthiopic\n    88: 0,  // langSomali → smRoman\n    89: 0,  // langSwahili → smRoman\n    90: 0,  // langKinyarwanda → smRoman\n    91: 0,  // langRundi → smRoman\n    92: 0,  // langNyanja → smRoman\n    93: 0,  // langMalagasy → smRoman\n    94: 0,  // langEsperanto → smRoman\n    128: 0,  // langWelsh → smRoman (modified)\n    129: 0,  // langBasque → smRoman\n    130: 0,  // langCatalan → smRoman\n    131: 0,  // langLatin → smRoman\n    132: 0,  // langQuechua → smRoman\n    133: 0,  // langGuarani → smRoman\n    134: 0,  // langAymara → smRoman\n    135: 7,  // langTatar → smCyrillic\n    136: 4,  // langUighur → smArabic\n    137: 26,  // langDzongkha → smTibetan\n    138: 0,  // langJavaneseRom → smRoman\n    139: 0,  // langSundaneseRom → smRoman\n    140: 0,  // langGalician → smRoman\n    141: 0,  // langAfrikaans → smRoman\n    142: 0,  // langBreton → smRoman (modified)\n    143: 28,  // langInuktitut → smEthiopic (modified)\n    144: 0,  // langScottishGaelic → smRoman (modified)\n    145: 0,  // langManxGaelic → smRoman (modified)\n    146: 0,  // langIrishGaelicScript → smRoman (modified)\n    147: 0,  // langTongan → smRoman\n    148: 6,  // langGreekAncient → smRoman\n    149: 0,  // langGreenlandic → smRoman\n    150: 0,  // langAzerbaijanRoman → smRoman\n    151: 0   // langNynorsk → smRoman\n};\n\n// While Microsoft indicates a region/country for all its language\n// IDs, we omit the region code if it's equal to the \"most likely\n// region subtag\" according to Unicode CLDR. For scripts, we omit\n// the subtag if it is equal to the Suppress-Script entry in the\n// IANA language subtag registry for IETF BCP 47.\n//\n// For example, Microsoft states that its language code 0x041A is\n// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n// and not 'hr-HR' because Croatia is the default country for Croatian,\n// according to Unicode CLDR. As another example, Microsoft states\n// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n// for the Croatian language, according to IANA.\n//\n// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\nvar windowsLanguages = {\n    0x0436: 'af',\n    0x041C: 'sq',\n    0x0484: 'gsw',\n    0x045E: 'am',\n    0x1401: 'ar-DZ',\n    0x3C01: 'ar-BH',\n    0x0C01: 'ar',\n    0x0801: 'ar-IQ',\n    0x2C01: 'ar-JO',\n    0x3401: 'ar-KW',\n    0x3001: 'ar-LB',\n    0x1001: 'ar-LY',\n    0x1801: 'ary',\n    0x2001: 'ar-OM',\n    0x4001: 'ar-QA',\n    0x0401: 'ar-SA',\n    0x2801: 'ar-SY',\n    0x1C01: 'aeb',\n    0x3801: 'ar-AE',\n    0x2401: 'ar-YE',\n    0x042B: 'hy',\n    0x044D: 'as',\n    0x082C: 'az-Cyrl',\n    0x042C: 'az',\n    0x046D: 'ba',\n    0x042D: 'eu',\n    0x0423: 'be',\n    0x0845: 'bn',\n    0x0445: 'bn-IN',\n    0x201A: 'bs-Cyrl',\n    0x141A: 'bs',\n    0x047E: 'br',\n    0x0402: 'bg',\n    0x0403: 'ca',\n    0x0C04: 'zh-HK',\n    0x1404: 'zh-MO',\n    0x0804: 'zh',\n    0x1004: 'zh-SG',\n    0x0404: 'zh-TW',\n    0x0483: 'co',\n    0x041A: 'hr',\n    0x101A: 'hr-BA',\n    0x0405: 'cs',\n    0x0406: 'da',\n    0x048C: 'prs',\n    0x0465: 'dv',\n    0x0813: 'nl-BE',\n    0x0413: 'nl',\n    0x0C09: 'en-AU',\n    0x2809: 'en-BZ',\n    0x1009: 'en-CA',\n    0x2409: 'en-029',\n    0x4009: 'en-IN',\n    0x1809: 'en-IE',\n    0x2009: 'en-JM',\n    0x4409: 'en-MY',\n    0x1409: 'en-NZ',\n    0x3409: 'en-PH',\n    0x4809: 'en-SG',\n    0x1C09: 'en-ZA',\n    0x2C09: 'en-TT',\n    0x0809: 'en-GB',\n    0x0409: 'en',\n    0x3009: 'en-ZW',\n    0x0425: 'et',\n    0x0438: 'fo',\n    0x0464: 'fil',\n    0x040B: 'fi',\n    0x080C: 'fr-BE',\n    0x0C0C: 'fr-CA',\n    0x040C: 'fr',\n    0x140C: 'fr-LU',\n    0x180C: 'fr-MC',\n    0x100C: 'fr-CH',\n    0x0462: 'fy',\n    0x0456: 'gl',\n    0x0437: 'ka',\n    0x0C07: 'de-AT',\n    0x0407: 'de',\n    0x1407: 'de-LI',\n    0x1007: 'de-LU',\n    0x0807: 'de-CH',\n    0x0408: 'el',\n    0x046F: 'kl',\n    0x0447: 'gu',\n    0x0468: 'ha',\n    0x040D: 'he',\n    0x0439: 'hi',\n    0x040E: 'hu',\n    0x040F: 'is',\n    0x0470: 'ig',\n    0x0421: 'id',\n    0x045D: 'iu',\n    0x085D: 'iu-Latn',\n    0x083C: 'ga',\n    0x0434: 'xh',\n    0x0435: 'zu',\n    0x0410: 'it',\n    0x0810: 'it-CH',\n    0x0411: 'ja',\n    0x044B: 'kn',\n    0x043F: 'kk',\n    0x0453: 'km',\n    0x0486: 'quc',\n    0x0487: 'rw',\n    0x0441: 'sw',\n    0x0457: 'kok',\n    0x0412: 'ko',\n    0x0440: 'ky',\n    0x0454: 'lo',\n    0x0426: 'lv',\n    0x0427: 'lt',\n    0x082E: 'dsb',\n    0x046E: 'lb',\n    0x042F: 'mk',\n    0x083E: 'ms-BN',\n    0x043E: 'ms',\n    0x044C: 'ml',\n    0x043A: 'mt',\n    0x0481: 'mi',\n    0x047A: 'arn',\n    0x044E: 'mr',\n    0x047C: 'moh',\n    0x0450: 'mn',\n    0x0850: 'mn-CN',\n    0x0461: 'ne',\n    0x0414: 'nb',\n    0x0814: 'nn',\n    0x0482: 'oc',\n    0x0448: 'or',\n    0x0463: 'ps',\n    0x0415: 'pl',\n    0x0416: 'pt',\n    0x0816: 'pt-PT',\n    0x0446: 'pa',\n    0x046B: 'qu-BO',\n    0x086B: 'qu-EC',\n    0x0C6B: 'qu',\n    0x0418: 'ro',\n    0x0417: 'rm',\n    0x0419: 'ru',\n    0x243B: 'smn',\n    0x103B: 'smj-NO',\n    0x143B: 'smj',\n    0x0C3B: 'se-FI',\n    0x043B: 'se',\n    0x083B: 'se-SE',\n    0x203B: 'sms',\n    0x183B: 'sma-NO',\n    0x1C3B: 'sms',\n    0x044F: 'sa',\n    0x1C1A: 'sr-Cyrl-BA',\n    0x0C1A: 'sr',\n    0x181A: 'sr-Latn-BA',\n    0x081A: 'sr-Latn',\n    0x046C: 'nso',\n    0x0432: 'tn',\n    0x045B: 'si',\n    0x041B: 'sk',\n    0x0424: 'sl',\n    0x2C0A: 'es-AR',\n    0x400A: 'es-BO',\n    0x340A: 'es-CL',\n    0x240A: 'es-CO',\n    0x140A: 'es-CR',\n    0x1C0A: 'es-DO',\n    0x300A: 'es-EC',\n    0x440A: 'es-SV',\n    0x100A: 'es-GT',\n    0x480A: 'es-HN',\n    0x080A: 'es-MX',\n    0x4C0A: 'es-NI',\n    0x180A: 'es-PA',\n    0x3C0A: 'es-PY',\n    0x280A: 'es-PE',\n    0x500A: 'es-PR',\n\n    // Microsoft has defined two different language codes for\n    // “Spanish with modern sorting” and “Spanish with traditional\n    // sorting”. This makes sense for collation APIs, and it would be\n    // possible to express this in BCP 47 language tags via Unicode\n    // extensions (eg., es-u-co-trad is Spanish with traditional\n    // sorting). However, for storing names in fonts, the distinction\n    // does not make sense, so we give “es” in both cases.\n    0x0C0A: 'es',\n    0x040A: 'es',\n\n    0x540A: 'es-US',\n    0x380A: 'es-UY',\n    0x200A: 'es-VE',\n    0x081D: 'sv-FI',\n    0x041D: 'sv',\n    0x045A: 'syr',\n    0x0428: 'tg',\n    0x085F: 'tzm',\n    0x0449: 'ta',\n    0x0444: 'tt',\n    0x044A: 'te',\n    0x041E: 'th',\n    0x0451: 'bo',\n    0x041F: 'tr',\n    0x0442: 'tk',\n    0x0480: 'ug',\n    0x0422: 'uk',\n    0x042E: 'hsb',\n    0x0420: 'ur',\n    0x0843: 'uz-Cyrl',\n    0x0443: 'uz',\n    0x042A: 'vi',\n    0x0452: 'cy',\n    0x0488: 'wo',\n    0x0485: 'sah',\n    0x0478: 'ii',\n    0x046A: 'yo'\n};\n\n// Returns a IETF BCP 47 language code, for example 'zh-Hant'\n// for 'Chinese in the traditional script'.\nfunction getLanguageCode(platformID, languageID, ltag) {\n    switch (platformID) {\n        case 0:  // Unicode\n            if (languageID === 0xFFFF) {\n                return 'und';\n            } else if (ltag) {\n                return ltag[languageID];\n            }\n\n            break;\n\n        case 1:  // Macintosh\n            return macLanguages[languageID];\n\n        case 3:  // Windows\n            return windowsLanguages[languageID];\n    }\n\n    return undefined;\n}\n\nvar utf16 = 'utf-16';\n\n// MacOS script ID → encoding. This table stores the default case,\n// which can be overridden by macLanguageEncodings.\nvar macScriptEncodings = {\n    0: 'macintosh',           // smRoman\n    1: 'x-mac-japanese',      // smJapanese\n    2: 'x-mac-chinesetrad',   // smTradChinese\n    3: 'x-mac-korean',        // smKorean\n    6: 'x-mac-greek',         // smGreek\n    7: 'x-mac-cyrillic',      // smCyrillic\n    9: 'x-mac-devanagai',     // smDevanagari\n    10: 'x-mac-gurmukhi',     // smGurmukhi\n    11: 'x-mac-gujarati',     // smGujarati\n    12: 'x-mac-oriya',        // smOriya\n    13: 'x-mac-bengali',      // smBengali\n    14: 'x-mac-tamil',        // smTamil\n    15: 'x-mac-telugu',       // smTelugu\n    16: 'x-mac-kannada',      // smKannada\n    17: 'x-mac-malayalam',    // smMalayalam\n    18: 'x-mac-sinhalese',    // smSinhalese\n    19: 'x-mac-burmese',      // smBurmese\n    20: 'x-mac-khmer',        // smKhmer\n    21: 'x-mac-thai',         // smThai\n    22: 'x-mac-lao',          // smLao\n    23: 'x-mac-georgian',     // smGeorgian\n    24: 'x-mac-armenian',     // smArmenian\n    25: 'x-mac-chinesesimp',  // smSimpChinese\n    26: 'x-mac-tibetan',      // smTibetan\n    27: 'x-mac-mongolian',    // smMongolian\n    28: 'x-mac-ethiopic',     // smEthiopic\n    29: 'x-mac-ce',           // smCentralEuroRoman\n    30: 'x-mac-vietnamese',   // smVietnamese\n    31: 'x-mac-extarabic'     // smExtArabic\n};\n\n// MacOS language ID → encoding. This table stores the exceptional\n// cases, which override macScriptEncodings. For writing MacOS naming\n// tables, we need to emit a MacOS script ID. Therefore, we cannot\n// merge macScriptEncodings into macLanguageEncodings.\n//\n// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nvar macLanguageEncodings = {\n    15: 'x-mac-icelandic',    // langIcelandic\n    17: 'x-mac-turkish',      // langTurkish\n    18: 'x-mac-croatian',     // langCroatian\n    24: 'x-mac-ce',           // langLithuanian\n    25: 'x-mac-ce',           // langPolish\n    26: 'x-mac-ce',           // langHungarian\n    27: 'x-mac-ce',           // langEstonian\n    28: 'x-mac-ce',           // langLatvian\n    30: 'x-mac-icelandic',    // langFaroese\n    37: 'x-mac-romanian',     // langRomanian\n    38: 'x-mac-ce',           // langCzech\n    39: 'x-mac-ce',           // langSlovak\n    40: 'x-mac-ce',           // langSlovenian\n    143: 'x-mac-inuit',       // langInuktitut\n    146: 'x-mac-gaelic'       // langIrishGaelicScript\n};\n\nfunction getEncoding(platformID, encodingID, languageID) {\n    switch (platformID) {\n        case 0:  // Unicode\n            return utf16;\n\n        case 1:  // Apple Macintosh\n            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];\n\n        case 3:  // Microsoft Windows\n            if (encodingID === 1 || encodingID === 10) {\n                return utf16;\n            }\n\n            break;\n    }\n\n    return undefined;\n}\n\n// Parse the naming `name` table.\n// FIXME: Format 1 additional fields are not supported yet.\n// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\nfunction parseNameTable(data, start, ltag) {\n    var name = {};\n    var p = new parse.Parser(data, start);\n    var format = p.parseUShort();\n    var count = p.parseUShort();\n    var stringOffset = p.offset + p.parseUShort();\n    for (var i = 0; i < count; i++) {\n        var platformID = p.parseUShort();\n        var encodingID = p.parseUShort();\n        var languageID = p.parseUShort();\n        var nameID = p.parseUShort();\n        var property = nameTableNames[nameID] || nameID;\n        var byteLength = p.parseUShort();\n        var offset = p.parseUShort();\n        var language = getLanguageCode(platformID, languageID, ltag);\n        var encoding = getEncoding(platformID, encodingID, languageID);\n        if (encoding !== undefined && language !== undefined) {\n            var text = (void 0);\n            if (encoding === utf16) {\n                text = decode.UTF16(data, stringOffset + offset, byteLength);\n            } else {\n                text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);\n            }\n\n            if (text) {\n                var translations = name[property];\n                if (translations === undefined) {\n                    translations = name[property] = {};\n                }\n\n                translations[language] = text;\n            }\n        }\n    }\n\n    var langTagCount = 0;\n    if (format === 1) {\n        // FIXME: Also handle Microsoft's 'name' table 1.\n        langTagCount = p.parseUShort();\n    }\n\n    return name;\n}\n\n// {23: 'foo'} → {'foo': 23}\n// ['bar', 'baz'] → {'bar': 0, 'baz': 1}\nfunction reverseDict(dict) {\n    var result = {};\n    for (var key in dict) {\n        result[dict[key]] = parseInt(key);\n    }\n\n    return result;\n}\n\nfunction makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n    return new table.Record('NameRecord', [\n        {name: 'platformID', type: 'USHORT', value: platformID},\n        {name: 'encodingID', type: 'USHORT', value: encodingID},\n        {name: 'languageID', type: 'USHORT', value: languageID},\n        {name: 'nameID', type: 'USHORT', value: nameID},\n        {name: 'length', type: 'USHORT', value: length},\n        {name: 'offset', type: 'USHORT', value: offset}\n    ]);\n}\n\n// Finds the position of needle in haystack, or -1 if not there.\n// Like String.indexOf(), but for arrays.\nfunction findSubArray(needle, haystack) {\n    var needleLength = needle.length;\n    var limit = haystack.length - needleLength + 1;\n\n    loop:\n    for (var pos = 0; pos < limit; pos++) {\n        for (; pos < limit; pos++) {\n            for (var k = 0; k < needleLength; k++) {\n                if (haystack[pos + k] !== needle[k]) {\n                    continue loop;\n                }\n            }\n\n            return pos;\n        }\n    }\n\n    return -1;\n}\n\nfunction addStringToPool(s, pool) {\n    var offset = findSubArray(s, pool);\n    if (offset < 0) {\n        offset = pool.length;\n        var i = 0;\n        var len = s.length;\n        for (; i < len; ++i) {\n            pool.push(s[i]);\n        }\n\n    }\n\n    return offset;\n}\n\nfunction makeNameTable(names, ltag) {\n    var nameID;\n    var nameIDs = [];\n\n    var namesWithNumericKeys = {};\n    var nameTableIds = reverseDict(nameTableNames);\n    for (var key in names) {\n        var id = nameTableIds[key];\n        if (id === undefined) {\n            id = key;\n        }\n\n        nameID = parseInt(id);\n\n        if (isNaN(nameID)) {\n            throw new Error('Name table entry \"' + key + '\" does not exist, see nameTableNames for complete list.');\n        }\n\n        namesWithNumericKeys[nameID] = names[key];\n        nameIDs.push(nameID);\n    }\n\n    var macLanguageIds = reverseDict(macLanguages);\n    var windowsLanguageIds = reverseDict(windowsLanguages);\n\n    var nameRecords = [];\n    var stringPool = [];\n\n    for (var i = 0; i < nameIDs.length; i++) {\n        nameID = nameIDs[i];\n        var translations = namesWithNumericKeys[nameID];\n        for (var lang in translations) {\n            var text = translations[lang];\n\n            // For MacOS, we try to emit the name in the form that was introduced\n            // in the initial version of the TrueType spec (in the late 1980s).\n            // However, this can fail for various reasons: the requested BCP 47\n            // language code might not have an old-style Mac equivalent;\n            // we might not have a codec for the needed character encoding;\n            // or the name might contain characters that cannot be expressed\n            // in the old-style Macintosh encoding. In case of failure, we emit\n            // the name in a more modern fashion (Unicode encoding with BCP 47\n            // language tags) that is recognized by MacOS 10.5, released in 2009.\n            // If fonts were only read by operating systems, we could simply\n            // emit all names in the modern form; this would be much easier.\n            // However, there are many applications and libraries that read\n            // 'name' tables directly, and these will usually only recognize\n            // the ancient form (silently skipping the unrecognized names).\n            var macPlatform = 1;  // Macintosh\n            var macLanguage = macLanguageIds[lang];\n            var macScript = macLanguageToScript[macLanguage];\n            var macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n            var macName = encode.MACSTRING(text, macEncoding);\n            if (macName === undefined) {\n                macPlatform = 0;  // Unicode\n                macLanguage = ltag.indexOf(lang);\n                if (macLanguage < 0) {\n                    macLanguage = ltag.length;\n                    ltag.push(lang);\n                }\n\n                macScript = 4;  // Unicode 2.0 and later\n                macName = encode.UTF16(text);\n            }\n\n            var macNameOffset = addStringToPool(macName, stringPool);\n            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,\n                                            nameID, macName.length, macNameOffset));\n\n            var winLanguage = windowsLanguageIds[lang];\n            if (winLanguage !== undefined) {\n                var winName = encode.UTF16(text);\n                var winNameOffset = addStringToPool(winName, stringPool);\n                nameRecords.push(makeNameRecord(3, 1, winLanguage,\n                                                nameID, winName.length, winNameOffset));\n            }\n        }\n    }\n\n    nameRecords.sort(function(a, b) {\n        return ((a.platformID - b.platformID) ||\n                (a.encodingID - b.encodingID) ||\n                (a.languageID - b.languageID) ||\n                (a.nameID - b.nameID));\n    });\n\n    var t = new table.Table('name', [\n        {name: 'format', type: 'USHORT', value: 0},\n        {name: 'count', type: 'USHORT', value: nameRecords.length},\n        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}\n    ]);\n\n    for (var r = 0; r < nameRecords.length; r++) {\n        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});\n    }\n\n    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});\n    return t;\n}\n\nvar _name = { parse: parseNameTable, make: makeNameTable };\n\n// The `OS/2` table contains metrics required in OpenType fonts.\n\nvar unicodeRanges = [\n    {begin: 0x0000, end: 0x007F}, // Basic Latin\n    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement\n    {begin: 0x0100, end: 0x017F}, // Latin Extended-A\n    {begin: 0x0180, end: 0x024F}, // Latin Extended-B\n    {begin: 0x0250, end: 0x02AF}, // IPA Extensions\n    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters\n    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks\n    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic\n    {begin: 0x2C80, end: 0x2CFF}, // Coptic\n    {begin: 0x0400, end: 0x04FF}, // Cyrillic\n    {begin: 0x0530, end: 0x058F}, // Armenian\n    {begin: 0x0590, end: 0x05FF}, // Hebrew\n    {begin: 0xA500, end: 0xA63F}, // Vai\n    {begin: 0x0600, end: 0x06FF}, // Arabic\n    {begin: 0x07C0, end: 0x07FF}, // NKo\n    {begin: 0x0900, end: 0x097F}, // Devanagari\n    {begin: 0x0980, end: 0x09FF}, // Bengali\n    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi\n    {begin: 0x0A80, end: 0x0AFF}, // Gujarati\n    {begin: 0x0B00, end: 0x0B7F}, // Oriya\n    {begin: 0x0B80, end: 0x0BFF}, // Tamil\n    {begin: 0x0C00, end: 0x0C7F}, // Telugu\n    {begin: 0x0C80, end: 0x0CFF}, // Kannada\n    {begin: 0x0D00, end: 0x0D7F}, // Malayalam\n    {begin: 0x0E00, end: 0x0E7F}, // Thai\n    {begin: 0x0E80, end: 0x0EFF}, // Lao\n    {begin: 0x10A0, end: 0x10FF}, // Georgian\n    {begin: 0x1B00, end: 0x1B7F}, // Balinese\n    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo\n    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional\n    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended\n    {begin: 0x2000, end: 0x206F}, // General Punctuation\n    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts\n    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol\n    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols\n    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols\n    {begin: 0x2150, end: 0x218F}, // Number Forms\n    {begin: 0x2190, end: 0x21FF}, // Arrows\n    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators\n    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical\n    {begin: 0x2400, end: 0x243F}, // Control Pictures\n    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition\n    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics\n    {begin: 0x2500, end: 0x257F}, // Box Drawing\n    {begin: 0x2580, end: 0x259F}, // Block Elements\n    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes\n    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols\n    {begin: 0x2700, end: 0x27BF}, // Dingbats\n    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation\n    {begin: 0x3040, end: 0x309F}, // Hiragana\n    {begin: 0x30A0, end: 0x30FF}, // Katakana\n    {begin: 0x3100, end: 0x312F}, // Bopomofo\n    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo\n    {begin: 0xA840, end: 0xA87F}, // Phags-pa\n    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months\n    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility\n    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables\n    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *\n    {begin: 0x10900, end: 0x1091F}, // Phoenicia\n    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs\n    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)\n    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes\n    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms\n    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A\n    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks\n    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms\n    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants\n    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B\n    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms\n    {begin: 0xFFF0, end: 0xFFFF}, // Specials\n    {begin: 0x0F00, end: 0x0FFF}, // Tibetan\n    {begin: 0x0700, end: 0x074F}, // Syriac\n    {begin: 0x0780, end: 0x07BF}, // Thaana\n    {begin: 0x0D80, end: 0x0DFF}, // Sinhala\n    {begin: 0x1000, end: 0x109F}, // Myanmar\n    {begin: 0x1200, end: 0x137F}, // Ethiopic\n    {begin: 0x13A0, end: 0x13FF}, // Cherokee\n    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics\n    {begin: 0x1680, end: 0x169F}, // Ogham\n    {begin: 0x16A0, end: 0x16FF}, // Runic\n    {begin: 0x1780, end: 0x17FF}, // Khmer\n    {begin: 0x1800, end: 0x18AF}, // Mongolian\n    {begin: 0x2800, end: 0x28FF}, // Braille Patterns\n    {begin: 0xA000, end: 0xA48F}, // Yi Syllables\n    {begin: 0x1700, end: 0x171F}, // Tagalog\n    {begin: 0x10300, end: 0x1032F}, // Old Italic\n    {begin: 0x10330, end: 0x1034F}, // Gothic\n    {begin: 0x10400, end: 0x1044F}, // Deseret\n    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols\n    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols\n    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)\n    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors\n    {begin: 0xE0000, end: 0xE007F}, // Tags\n    {begin: 0x1900, end: 0x194F}, // Limbu\n    {begin: 0x1950, end: 0x197F}, // Tai Le\n    {begin: 0x1980, end: 0x19DF}, // New Tai Lue\n    {begin: 0x1A00, end: 0x1A1F}, // Buginese\n    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic\n    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh\n    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols\n    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri\n    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary\n    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers\n    {begin: 0x10380, end: 0x1039F}, // Ugaritic\n    {begin: 0x103A0, end: 0x103DF}, // Old Persian\n    {begin: 0x10450, end: 0x1047F}, // Shavian\n    {begin: 0x10480, end: 0x104AF}, // Osmanya\n    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary\n    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi\n    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols\n    {begin: 0x12000, end: 0x123FF}, // Cuneiform\n    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals\n    {begin: 0x1B80, end: 0x1BBF}, // Sundanese\n    {begin: 0x1C00, end: 0x1C4F}, // Lepcha\n    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki\n    {begin: 0xA880, end: 0xA8DF}, // Saurashtra\n    {begin: 0xA900, end: 0xA92F}, // Kayah Li\n    {begin: 0xA930, end: 0xA95F}, // Rejang\n    {begin: 0xAA00, end: 0xAA5F}, // Cham\n    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols\n    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc\n    {begin: 0x102A0, end: 0x102DF}, // Carian\n    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles\n];\n\nfunction getUnicodeRange(unicode) {\n    for (var i = 0; i < unicodeRanges.length; i += 1) {\n        var range = unicodeRanges[i];\n        if (unicode >= range.begin && unicode < range.end) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n// Parse the OS/2 and Windows metrics `OS/2` table\nfunction parseOS2Table(data, start) {\n    var os2 = {};\n    var p = new parse.Parser(data, start);\n    os2.version = p.parseUShort();\n    os2.xAvgCharWidth = p.parseShort();\n    os2.usWeightClass = p.parseUShort();\n    os2.usWidthClass = p.parseUShort();\n    os2.fsType = p.parseUShort();\n    os2.ySubscriptXSize = p.parseShort();\n    os2.ySubscriptYSize = p.parseShort();\n    os2.ySubscriptXOffset = p.parseShort();\n    os2.ySubscriptYOffset = p.parseShort();\n    os2.ySuperscriptXSize = p.parseShort();\n    os2.ySuperscriptYSize = p.parseShort();\n    os2.ySuperscriptXOffset = p.parseShort();\n    os2.ySuperscriptYOffset = p.parseShort();\n    os2.yStrikeoutSize = p.parseShort();\n    os2.yStrikeoutPosition = p.parseShort();\n    os2.sFamilyClass = p.parseShort();\n    os2.panose = [];\n    for (var i = 0; i < 10; i++) {\n        os2.panose[i] = p.parseByte();\n    }\n\n    os2.ulUnicodeRange1 = p.parseULong();\n    os2.ulUnicodeRange2 = p.parseULong();\n    os2.ulUnicodeRange3 = p.parseULong();\n    os2.ulUnicodeRange4 = p.parseULong();\n    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n    os2.fsSelection = p.parseUShort();\n    os2.usFirstCharIndex = p.parseUShort();\n    os2.usLastCharIndex = p.parseUShort();\n    os2.sTypoAscender = p.parseShort();\n    os2.sTypoDescender = p.parseShort();\n    os2.sTypoLineGap = p.parseShort();\n    os2.usWinAscent = p.parseUShort();\n    os2.usWinDescent = p.parseUShort();\n    if (os2.version >= 1) {\n        os2.ulCodePageRange1 = p.parseULong();\n        os2.ulCodePageRange2 = p.parseULong();\n    }\n\n    if (os2.version >= 2) {\n        os2.sxHeight = p.parseShort();\n        os2.sCapHeight = p.parseShort();\n        os2.usDefaultChar = p.parseUShort();\n        os2.usBreakChar = p.parseUShort();\n        os2.usMaxContent = p.parseUShort();\n    }\n\n    return os2;\n}\n\nfunction makeOS2Table(options) {\n    return new table.Table('OS/2', [\n        {name: 'version', type: 'USHORT', value: 0x0003},\n        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},\n        {name: 'usWeightClass', type: 'USHORT', value: 0},\n        {name: 'usWidthClass', type: 'USHORT', value: 0},\n        {name: 'fsType', type: 'USHORT', value: 0},\n        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},\n        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},\n        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},\n        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},\n        {name: 'sFamilyClass', type: 'SHORT', value: 0},\n        {name: 'bFamilyType', type: 'BYTE', value: 0},\n        {name: 'bSerifStyle', type: 'BYTE', value: 0},\n        {name: 'bWeight', type: 'BYTE', value: 0},\n        {name: 'bProportion', type: 'BYTE', value: 0},\n        {name: 'bContrast', type: 'BYTE', value: 0},\n        {name: 'bStrokeVariation', type: 'BYTE', value: 0},\n        {name: 'bArmStyle', type: 'BYTE', value: 0},\n        {name: 'bLetterform', type: 'BYTE', value: 0},\n        {name: 'bMidline', type: 'BYTE', value: 0},\n        {name: 'bXHeight', type: 'BYTE', value: 0},\n        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},\n        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},\n        {name: 'fsSelection', type: 'USHORT', value: 0},\n        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},\n        {name: 'usLastCharIndex', type: 'USHORT', value: 0},\n        {name: 'sTypoAscender', type: 'SHORT', value: 0},\n        {name: 'sTypoDescender', type: 'SHORT', value: 0},\n        {name: 'sTypoLineGap', type: 'SHORT', value: 0},\n        {name: 'usWinAscent', type: 'USHORT', value: 0},\n        {name: 'usWinDescent', type: 'USHORT', value: 0},\n        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},\n        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},\n        {name: 'sxHeight', type: 'SHORT', value: 0},\n        {name: 'sCapHeight', type: 'SHORT', value: 0},\n        {name: 'usDefaultChar', type: 'USHORT', value: 0},\n        {name: 'usBreakChar', type: 'USHORT', value: 0},\n        {name: 'usMaxContext', type: 'USHORT', value: 0}\n    ], options);\n}\n\nvar os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges: unicodeRanges, getUnicodeRange: getUnicodeRange };\n\n// The `post` table stores additional PostScript information, such as glyph names.\n\n// Parse the PostScript `post` table\nfunction parsePostTable(data, start) {\n    var post = {};\n    var p = new parse.Parser(data, start);\n    post.version = p.parseVersion();\n    post.italicAngle = p.parseFixed();\n    post.underlinePosition = p.parseShort();\n    post.underlineThickness = p.parseShort();\n    post.isFixedPitch = p.parseULong();\n    post.minMemType42 = p.parseULong();\n    post.maxMemType42 = p.parseULong();\n    post.minMemType1 = p.parseULong();\n    post.maxMemType1 = p.parseULong();\n    switch (post.version) {\n        case 1:\n            post.names = standardNames.slice();\n            break;\n        case 2:\n            post.numberOfGlyphs = p.parseUShort();\n            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n            for (var i = 0; i < post.numberOfGlyphs; i++) {\n                post.glyphNameIndex[i] = p.parseUShort();\n            }\n\n            post.names = [];\n            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                if (post.glyphNameIndex[i$1] >= standardNames.length) {\n                    var nameLength = p.parseChar();\n                    post.names.push(p.parseString(nameLength));\n                }\n            }\n\n            break;\n        case 2.5:\n            post.numberOfGlyphs = p.parseUShort();\n            post.offset = new Array(post.numberOfGlyphs);\n            for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {\n                post.offset[i$2] = p.parseChar();\n            }\n\n            break;\n    }\n    return post;\n}\n\nfunction makePostTable() {\n    return new table.Table('post', [\n        {name: 'version', type: 'FIXED', value: 0x00030000},\n        {name: 'italicAngle', type: 'FIXED', value: 0},\n        {name: 'underlinePosition', type: 'FWORD', value: 0},\n        {name: 'underlineThickness', type: 'FWORD', value: 0},\n        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n        {name: 'minMemType42', type: 'ULONG', value: 0},\n        {name: 'maxMemType42', type: 'ULONG', value: 0},\n        {name: 'minMemType1', type: 'ULONG', value: 0},\n        {name: 'maxMemType1', type: 'ULONG', value: 0}\n    ]);\n}\n\nvar post = { parse: parsePostTable, make: makePostTable };\n\n// The `GSUB` table contains ligatures, among other things.\n\nvar subtableParsers = new Array(9);         // subtableParsers[0] is unused\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\nsubtableParsers[1] = function parseLookup1() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            deltaGlyphId: this.parseUShort()\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            substitute: this.parseOffset16List()\n        };\n    }\n    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\nsubtableParsers[2] = function parseLookup2() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        sequences: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\nsubtableParsers[3] = function parseLookup3() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        alternateSets: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\nsubtableParsers[4] = function parseLookup4() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        ligatureSets: this.parseListOfLists(function() {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1)\n            };\n        })\n    };\n};\n\nvar lookupRecordDesc = {\n    sequenceIndex: Parser.uShort,\n    lookupListIndex: Parser.uShort\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\nsubtableParsers[5] = function parseLookup5() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n\n    if (substFormat === 1) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            ruleSets: this.parseListOfLists(function() {\n                var glyphCount = this.parseUShort();\n                var substCount = this.parseUShort();\n                return {\n                    input: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            classDef: this.parsePointer(Parser.classDef),\n            classSets: this.parseListOfLists(function() {\n                var glyphCount = this.parseUShort();\n                var substCount = this.parseUShort();\n                return {\n                    classes: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        var glyphCount = this.parseUShort();\n        var substCount = this.parseUShort();\n        return {\n            substFormat: substFormat,\n            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n    }\n    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\nsubtableParsers[6] = function parseLookup6() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            chainRuleSets: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            backtrackClassDef: this.parsePointer(Parser.classDef),\n            inputClassDef: this.parsePointer(Parser.classDef),\n            lookaheadClassDef: this.parsePointer(Parser.classDef),\n            chainClassSet: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        return {\n            substFormat: 3,\n            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n    }\n    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\nsubtableParsers[7] = function parseLookup7() {\n    // Extension Substitution subtable\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n    var extensionLookupType = this.parseUShort();\n    var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n    return {\n        substFormat: 1,\n        lookupType: extensionLookupType,\n        extension: subtableParsers[extensionLookupType].call(extensionParser)\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\nsubtableParsers[8] = function parseLookup8() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        substitutes: this.parseUShortList()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\nfunction parseGsubTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n\n}\n\n// GSUB Writing //////////////////////////////////////////////\nvar subtableMakers = new Array(9);\n\nsubtableMakers[1] = function makeLookup1(subtable) {\n    if (subtable.substFormat === 1) {\n        return new table.Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 1},\n            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},\n            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}\n        ]);\n    } else {\n        return new table.Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 2},\n            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n        ].concat(table.ushortList('substitute', subtable.substitute)));\n    }\n};\n\nsubtableMakers[2] = function makeLookup2(subtable) {\n    check.assert(subtable.substFormat === 1, 'Lookup type 2 substFormat must be 1.');\n    return new table.Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n    ].concat(table.tableList('seqSet', subtable.sequences, function(sequenceSet) {\n        return new table.Table('sequenceSetTable', table.ushortList('sequence', sequenceSet));\n    })));\n};\n\nsubtableMakers[3] = function makeLookup3(subtable) {\n    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n    return new table.Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {\n        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n    })));\n};\n\nsubtableMakers[4] = function makeLookup4(subtable) {\n    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n    return new table.Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {\n            return new table.Table('ligatureTable',\n                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]\n                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))\n            );\n        }));\n    })));\n};\n\nsubtableMakers[6] = function makeLookup6(subtable) {\n    if (subtable.substFormat === 1) {\n        var returnTable = new table.Table('chainContextTable', [\n            {name: 'substFormat', type: 'USHORT', value: subtable.substFormat},\n            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n        ].concat(table.tableList('chainRuleSet', subtable.chainRuleSets, function(chainRuleSet) {\n            return new table.Table('chainRuleSetTable', table.tableList('chainRule', chainRuleSet, function(chainRule) {\n                var tableData = table.ushortList('backtrackGlyph', chainRule.backtrack, chainRule.backtrack.length)\n                    .concat(table.ushortList('inputGlyph', chainRule.input, chainRule.input.length + 1))\n                    .concat(table.ushortList('lookaheadGlyph', chainRule.lookahead, chainRule.lookahead.length))\n                    .concat(table.ushortList('substitution', [], chainRule.lookupRecords.length));\n\n                chainRule.lookupRecords.forEach(function (record, i) {\n                    tableData = tableData\n                        .concat({name: 'sequenceIndex' + i, type: 'USHORT', value: record.sequenceIndex})\n                        .concat({name: 'lookupListIndex' + i, type: 'USHORT', value: record.lookupListIndex});\n                });\n                return new table.Table('chainRuleTable', tableData);\n            }));\n        })));\n        return returnTable;\n    } else if (subtable.substFormat === 2) {\n        check.assert(false, 'lookup type 6 format 2 is not yet supported.');\n    } else if (subtable.substFormat === 3) {\n        var tableData = [\n            {name: 'substFormat', type: 'USHORT', value: subtable.substFormat} ];\n\n        tableData.push({name: 'backtrackGlyphCount', type: 'USHORT', value: subtable.backtrackCoverage.length});\n        subtable.backtrackCoverage.forEach(function (coverage, i) {\n            tableData.push({name: 'backtrackCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});\n        });\n        tableData.push({name: 'inputGlyphCount', type: 'USHORT', value: subtable.inputCoverage.length});\n        subtable.inputCoverage.forEach(function (coverage, i) {\n            tableData.push({name: 'inputCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});\n        });\n        tableData.push({name: 'lookaheadGlyphCount', type: 'USHORT', value: subtable.lookaheadCoverage.length});\n        subtable.lookaheadCoverage.forEach(function (coverage, i) {\n            tableData.push({name: 'lookaheadCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});\n        });\n\n        tableData.push({name: 'substitutionCount', type: 'USHORT', value: subtable.lookupRecords.length});\n        subtable.lookupRecords.forEach(function (record, i) {\n            tableData = tableData\n                .concat({name: 'sequenceIndex' + i, type: 'USHORT', value: record.sequenceIndex})\n                .concat({name: 'lookupListIndex' + i, type: 'USHORT', value: record.lookupListIndex});\n        });\n\n        var returnTable$1 = new table.Table('chainContextTable', tableData);\n\n        return returnTable$1;\n    }\n\n    check.assert(false, 'lookup type 6 format must be 1, 2 or 3.');\n};\n\nfunction makeGsubTable(gsub) {\n    return new table.Table('GSUB', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},\n        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},\n        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}\n    ]);\n}\n\nvar gsub = { parse: parseGsubTable, make: makeGsubTable };\n\n// The `GPOS` table contains kerning pairs, among other things.\n\n// Parse the metadata `meta` table.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\nfunction parseMetaTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, 'Unsupported META table version.');\n    p.parseULong(); // flags - currently unused and set to 0\n    p.parseULong(); // tableOffset\n    var numDataMaps = p.parseULong();\n\n    var tags = {};\n    for (var i = 0; i < numDataMaps; i++) {\n        var tag = p.parseTag();\n        var dataOffset = p.parseULong();\n        var dataLength = p.parseULong();\n        var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n        tags[tag] = text;\n    }\n    return tags;\n}\n\nfunction makeMetaTable(tags) {\n    var numTags = Object.keys(tags).length;\n    var stringPool = '';\n    var stringPoolOffset = 16 + numTags * 12;\n\n    var result = new table.Table('meta', [\n        {name: 'version', type: 'ULONG', value: 1},\n        {name: 'flags', type: 'ULONG', value: 0},\n        {name: 'offset', type: 'ULONG', value: stringPoolOffset},\n        {name: 'numTags', type: 'ULONG', value: numTags}\n    ]);\n\n    for (var tag in tags) {\n        var pos = stringPool.length;\n        stringPool += tags[tag];\n\n        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});\n        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});\n        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});\n    }\n\n    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\n    return result;\n}\n\nvar meta = { parse: parseMetaTable, make: makeMetaTable };\n\n// The `sfnt` wrapper provides organization for the tables in the font.\n\nfunction log2(v) {\n    return Math.log(v) / Math.log(2) | 0;\n}\n\nfunction computeCheckSum(bytes) {\n    while (bytes.length % 4 !== 0) {\n        bytes.push(0);\n    }\n\n    var sum = 0;\n    for (var i = 0; i < bytes.length; i += 4) {\n        sum += (bytes[i] << 24) +\n            (bytes[i + 1] << 16) +\n            (bytes[i + 2] << 8) +\n            (bytes[i + 3]);\n    }\n\n    sum %= Math.pow(2, 32);\n    return sum;\n}\n\nfunction makeTableRecord(tag, checkSum, offset, length) {\n    return new table.Record('Table Record', [\n        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},\n        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},\n        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},\n        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}\n    ]);\n}\n\nfunction makeSfntTable(tables) {\n    var sfnt = new table.Table('sfnt', [\n        {name: 'version', type: 'TAG', value: 'OTTO'},\n        {name: 'numTables', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n    sfnt.tables = tables;\n    sfnt.numTables = tables.length;\n    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n    sfnt.searchRange = 16 * highestPowerOf2;\n    sfnt.entrySelector = log2(highestPowerOf2);\n    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n    var recordFields = [];\n    var tableFields = [];\n\n    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);\n    while (offset % 4 !== 0) {\n        offset += 1;\n        tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n    }\n\n    for (var i = 0; i < tables.length; i += 1) {\n        var t = tables[i];\n        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n        var tableLength = t.sizeOf();\n        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});\n        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});\n        offset += tableLength;\n        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n        while (offset % 4 !== 0) {\n            offset += 1;\n            tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n        }\n    }\n\n    // Table records need to be sorted alphabetically.\n    recordFields.sort(function(r1, r2) {\n        if (r1.value.tag > r2.value.tag) {\n            return 1;\n        } else {\n            return -1;\n        }\n    });\n\n    sfnt.fields = sfnt.fields.concat(recordFields);\n    sfnt.fields = sfnt.fields.concat(tableFields);\n    return sfnt;\n}\n\n// Get the metrics for a character. If the string has more than one character\n// this function returns metrics for the first available character.\n// You can provide optional fallback metrics if no characters are available.\nfunction metricsForChar(font, chars, notFoundMetrics) {\n    for (var i = 0; i < chars.length; i += 1) {\n        var glyphIndex = font.charToGlyphIndex(chars[i]);\n        if (glyphIndex > 0) {\n            var glyph = font.glyphs.get(glyphIndex);\n            return glyph.getMetrics();\n        }\n    }\n\n    return notFoundMetrics;\n}\n\nfunction average(vs) {\n    var sum = 0;\n    for (var i = 0; i < vs.length; i += 1) {\n        sum += vs[i];\n    }\n\n    return sum / vs.length;\n}\n\n// Convert the font object to a SFNT data structure.\n// This structure contains all the necessary tables and metadata to create a binary OTF file.\nfunction fontToSfntTable(font) {\n    var xMins = [];\n    var yMins = [];\n    var xMaxs = [];\n    var yMaxs = [];\n    var advanceWidths = [];\n    var leftSideBearings = [];\n    var rightSideBearings = [];\n    var firstCharIndex;\n    var lastCharIndex = 0;\n    var ulUnicodeRange1 = 0;\n    var ulUnicodeRange2 = 0;\n    var ulUnicodeRange3 = 0;\n    var ulUnicodeRange4 = 0;\n\n    for (var i = 0; i < font.glyphs.length; i += 1) {\n        var glyph = font.glyphs.get(i);\n        var unicode = glyph.unicode | 0;\n\n        if (isNaN(glyph.advanceWidth)) {\n            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n        }\n\n        if (firstCharIndex > unicode || firstCharIndex === undefined) {\n            // ignore .notdef char\n            if (unicode > 0) {\n                firstCharIndex = unicode;\n            }\n        }\n\n        if (lastCharIndex < unicode) {\n            lastCharIndex = unicode;\n        }\n\n        var position = os2.getUnicodeRange(unicode);\n        if (position < 32) {\n            ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n            ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n            ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n            ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n        }\n        // Skip non-important characters.\n        if (glyph.name === '.notdef') { continue; }\n        var metrics = glyph.getMetrics();\n        xMins.push(metrics.xMin);\n        yMins.push(metrics.yMin);\n        xMaxs.push(metrics.xMax);\n        yMaxs.push(metrics.yMax);\n        leftSideBearings.push(metrics.leftSideBearing);\n        rightSideBearings.push(metrics.rightSideBearing);\n        advanceWidths.push(glyph.advanceWidth);\n    }\n\n    var globals = {\n        xMin: Math.min.apply(null, xMins),\n        yMin: Math.min.apply(null, yMins),\n        xMax: Math.max.apply(null, xMaxs),\n        yMax: Math.max.apply(null, yMaxs),\n        advanceWidthMax: Math.max.apply(null, advanceWidths),\n        advanceWidthAvg: average(advanceWidths),\n        minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n        minRightSideBearing: Math.min.apply(null, rightSideBearings)\n    };\n    globals.ascender = font.ascender;\n    globals.descender = font.descender;\n\n    var headTable = head.make({\n        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n        unitsPerEm: font.unitsPerEm,\n        xMin: globals.xMin,\n        yMin: globals.yMin,\n        xMax: globals.xMax,\n        yMax: globals.yMax,\n        lowestRecPPEM: 3,\n        createdTimestamp: font.createdTimestamp\n    });\n\n    var hheaTable = hhea.make({\n        ascender: globals.ascender,\n        descender: globals.descender,\n        advanceWidthMax: globals.advanceWidthMax,\n        minLeftSideBearing: globals.minLeftSideBearing,\n        minRightSideBearing: globals.minRightSideBearing,\n        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n        numberOfHMetrics: font.glyphs.length\n    });\n\n    var maxpTable = maxp.make(font.glyphs.length);\n\n    var os2Table = os2.make(Object.assign({\n        xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n        usFirstCharIndex: firstCharIndex,\n        usLastCharIndex: lastCharIndex,\n        ulUnicodeRange1: ulUnicodeRange1,\n        ulUnicodeRange2: ulUnicodeRange2,\n        ulUnicodeRange3: ulUnicodeRange3,\n        ulUnicodeRange4: ulUnicodeRange4,\n        // See http://typophile.com/node/13081 for more info on vertical metrics.\n        // We get metrics for typical characters (such as \"x\" for xHeight).\n        // We provide some fallback characters if characters are unavailable: their\n        // ordering was chosen experimentally.\n        sTypoAscender: globals.ascender,\n        sTypoDescender: globals.descender,\n        sTypoLineGap: 0,\n        usWinAscent: globals.yMax,\n        usWinDescent: Math.abs(globals.yMin),\n        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,\n        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n        usBreakChar: font.hasChar(' ') ? 32 : 0, // Use space as the break character, if available.\n    }, font.tables.os2));\n\n    var hmtxTable = hmtx.make(font.glyphs);\n    var cmapTable = cmap.make(font.glyphs);\n\n    var englishFamilyName = font.getEnglishName('fontFamily');\n    var englishStyleName = font.getEnglishName('fontSubfamily');\n    var englishFullName = englishFamilyName + ' ' + englishStyleName;\n    var postScriptName = font.getEnglishName('postScriptName');\n    if (!postScriptName) {\n        postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n    }\n\n    var names = {};\n    for (var n in font.names) {\n        names[n] = font.names[n];\n    }\n\n    if (!names.uniqueID) {\n        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};\n    }\n\n    if (!names.postScriptName) {\n        names.postScriptName = {en: postScriptName};\n    }\n\n    if (!names.preferredFamily) {\n        names.preferredFamily = font.names.fontFamily;\n    }\n\n    if (!names.preferredSubfamily) {\n        names.preferredSubfamily = font.names.fontSubfamily;\n    }\n\n    var languageTags = [];\n    var nameTable = _name.make(names, languageTags);\n    var ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);\n\n    var postTable = post.make();\n    var cffTable = cff.make(font.glyphs, {\n        version: font.getEnglishName('version'),\n        fullName: englishFullName,\n        familyName: englishFamilyName,\n        weightName: englishStyleName,\n        postScriptName: postScriptName,\n        unitsPerEm: font.unitsPerEm,\n        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n    });\n\n    var metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;\n\n    // The order does not matter because makeSfntTable() will sort them.\n    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n    if (ltagTable) {\n        tables.push(ltagTable);\n    }\n    // Optional tables\n    if (font.tables.gsub) {\n        tables.push(gsub.make(font.tables.gsub));\n    }\n    if (metaTable) {\n        tables.push(metaTable);\n    }\n\n    var sfntTable = makeSfntTable(tables);\n\n    // Compute the font's checkSum and store it in head.checkSumAdjustment.\n    var bytes = sfntTable.encode();\n    var checkSum = computeCheckSum(bytes);\n    var tableFields = sfntTable.fields;\n    var checkSumAdjusted = false;\n    for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {\n        if (tableFields[i$1].name === 'head table') {\n            tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n            checkSumAdjusted = true;\n            break;\n        }\n    }\n\n    if (!checkSumAdjusted) {\n        throw new Error('Could not find head table with checkSum to adjust.');\n    }\n\n    return sfntTable;\n}\n\nvar sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum: computeCheckSum };\n\n// The Layout object is the prototype of Substitution objects, and provides\n\nfunction searchTag(arr, tag) {\n    /* jshint bitwise: false */\n    var imin = 0;\n    var imax = arr.length - 1;\n    while (imin <= imax) {\n        var imid = (imin + imax) >>> 1;\n        var val = arr[imid].tag;\n        if (val === tag) {\n            return imid;\n        } else if (val < tag) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\nfunction binSearch(arr, value) {\n    /* jshint bitwise: false */\n    var imin = 0;\n    var imax = arr.length - 1;\n    while (imin <= imax) {\n        var imid = (imin + imax) >>> 1;\n        var val = arr[imid];\n        if (val === value) {\n            return imid;\n        } else if (val < value) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\n// binary search in a list of ranges (coverage, class definition)\nfunction searchRange(ranges, value) {\n    // jshint bitwise: false\n    var range;\n    var imin = 0;\n    var imax = ranges.length - 1;\n    while (imin <= imax) {\n        var imid = (imin + imax) >>> 1;\n        range = ranges[imid];\n        var start = range.start;\n        if (start === value) {\n            return range;\n        } else if (start < value) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    if (imin > 0) {\n        range = ranges[imin - 1];\n        if (value > range.end) { return 0; }\n        return range;\n    }\n}\n\n/**\n * @exports opentype.Layout\n * @class\n */\nfunction Layout(font, tableName) {\n    this.font = font;\n    this.tableName = tableName;\n}\n\nLayout.prototype = {\n\n    /**\n     * Binary search an object by \"tag\" property\n     * @instance\n     * @function searchTag\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {string} tag\n     * @return {number}\n     */\n    searchTag: searchTag,\n\n    /**\n     * Binary search in a list of numbers\n     * @instance\n     * @function binSearch\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {number} value\n     * @return {number}\n     */\n    binSearch: binSearch,\n\n    /**\n     * Get or create the Layout table (GSUB, GPOS etc).\n     * @param  {boolean} create - Whether to create a new one.\n     * @return {Object} The GSUB or GPOS table.\n     */\n    getTable: function(create) {\n        var layout = this.font.tables[this.tableName];\n        if (!layout && create) {\n            layout = this.font.tables[this.tableName] = this.createDefaultTable();\n        }\n        return layout;\n    },\n\n    /**\n     * Returns all scripts in the substitution table.\n     * @instance\n     * @return {Array}\n     */\n    getScriptNames: function() {\n        var layout = this.getTable();\n        if (!layout) { return []; }\n        return layout.scripts.map(function(script) {\n            return script.tag;\n        });\n    },\n\n    /**\n     * Returns the best bet for a script name.\n     * Returns 'DFLT' if it exists.\n     * If not, returns 'latn' if it exists.\n     * If neither exist, returns undefined.\n     */\n    getDefaultScriptName: function() {\n        var layout = this.getTable();\n        if (!layout) { return; }\n        var hasLatn = false;\n        for (var i = 0; i < layout.scripts.length; i++) {\n            var name = layout.scripts[i].tag;\n            if (name === 'DFLT') { return name; }\n            if (name === 'latn') { hasLatn = true; }\n        }\n        if (hasLatn) { return 'latn'; }\n    },\n\n    /**\n     * Returns all LangSysRecords in the given script.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n     * @return {Object} An object with tag and script properties.\n     */\n    getScriptTable: function(script, create) {\n        var layout = this.getTable(create);\n        if (layout) {\n            script = script || 'DFLT';\n            var scripts = layout.scripts;\n            var pos = searchTag(layout.scripts, script);\n            if (pos >= 0) {\n                return scripts[pos].script;\n            } else if (create) {\n                var scr = {\n                    tag: script,\n                    script: {\n                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},\n                        langSysRecords: []\n                    }\n                };\n                scripts.splice(-1 - pos, 0, scr);\n                return scr.script;\n            }\n        }\n    },\n\n    /**\n     * Returns a language system table\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n     * @return {Object}\n     */\n    getLangSysTable: function(script, language, create) {\n        var scriptTable = this.getScriptTable(script, create);\n        if (scriptTable) {\n            if (!language || language === 'dflt' || language === 'DFLT') {\n                return scriptTable.defaultLangSys;\n            }\n            var pos = searchTag(scriptTable.langSysRecords, language);\n            if (pos >= 0) {\n                return scriptTable.langSysRecords[pos].langSys;\n            } else if (create) {\n                var langSysRecord = {\n                    tag: language,\n                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}\n                };\n                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                return langSysRecord.langSys;\n            }\n        }\n    },\n\n    /**\n     * Get a specific feature table.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n     * @return {Object}\n     */\n    getFeatureTable: function(script, language, feature, create) {\n        var langSysTable = this.getLangSysTable(script, language, create);\n        if (langSysTable) {\n            var featureRecord;\n            var featIndexes = langSysTable.featureIndexes;\n            var allFeatures = this.font.tables[this.tableName].features;\n            // The FeatureIndex array of indices is in arbitrary order,\n            // even if allFeatures is sorted alphabetically by feature tag.\n            for (var i = 0; i < featIndexes.length; i++) {\n                featureRecord = allFeatures[featIndexes[i]];\n                if (featureRecord.tag === feature) {\n                    return featureRecord.feature;\n                }\n            }\n            if (create) {\n                var index = allFeatures.length;\n                // Automatic ordering of features would require to shift feature indexes in the script list.\n                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');\n                featureRecord = {\n                    tag: feature,\n                    feature: { params: 0, lookupListIndexes: [] }\n                };\n                allFeatures.push(featureRecord);\n                featIndexes.push(index);\n                return featureRecord.feature;\n            }\n        }\n    },\n\n    /**\n     * Get the lookup tables of a given type for a script/language/feature.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - 4-letter feature code\n     * @param {number} lookupType - 1 to 9\n     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n     * @return {Object[]}\n     */\n    getLookupTables: function(script, language, feature, lookupType, create) {\n        var featureTable = this.getFeatureTable(script, language, feature, create);\n        var tables = [];\n        if (featureTable) {\n            var lookupTable;\n            var lookupListIndexes = featureTable.lookupListIndexes;\n            var allLookups = this.font.tables[this.tableName].lookups;\n            // lookupListIndexes are in no particular order, so use naive search.\n            for (var i = 0; i < lookupListIndexes.length; i++) {\n                lookupTable = allLookups[lookupListIndexes[i]];\n                if (lookupTable.lookupType === lookupType) {\n                    tables.push(lookupTable);\n                }\n            }\n            if (tables.length === 0 && create) {\n                lookupTable = {\n                    lookupType: lookupType,\n                    lookupFlag: 0,\n                    subtables: [],\n                    markFilteringSet: undefined\n                };\n                var index = allLookups.length;\n                allLookups.push(lookupTable);\n                lookupListIndexes.push(index);\n                return [lookupTable];\n            }\n        }\n        return tables;\n    },\n\n    /**\n     * Find a glyph in a class definition table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n     * @param {object} classDefTable - an OpenType Layout class definition table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getGlyphClass: function(classDefTable, glyphIndex) {\n        switch (classDefTable.format) {\n            case 1:\n                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n                }\n                return 0;\n            case 2:\n                var range = searchRange(classDefTable.ranges, glyphIndex);\n                return range ? range.classId : 0;\n        }\n    },\n\n    /**\n     * Find a glyph in a coverage table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n     * @param {object} coverageTable - an OpenType Layout coverage table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getCoverageIndex: function(coverageTable, glyphIndex) {\n        switch (coverageTable.format) {\n            case 1:\n                var index = binSearch(coverageTable.glyphs, glyphIndex);\n                return index >= 0 ? index : -1;\n            case 2:\n                var range = searchRange(coverageTable.ranges, glyphIndex);\n                return range ? range.index + glyphIndex - range.start : -1;\n        }\n    },\n\n    /**\n     * Returns the list of glyph indexes of a coverage table.\n     * Format 1: the list is stored raw\n     * Format 2: compact list as range records.\n     * @instance\n     * @param  {Object} coverageTable\n     * @return {Array}\n     */\n    expandCoverage: function(coverageTable) {\n        if (coverageTable.format === 1) {\n            return coverageTable.glyphs;\n        } else {\n            var glyphs = [];\n            var ranges = coverageTable.ranges;\n            for (var i = 0; i < ranges.length; i++) {\n                var range = ranges[i];\n                var start = range.start;\n                var end = range.end;\n                for (var j = start; j <= end; j++) {\n                    glyphs.push(j);\n                }\n            }\n            return glyphs;\n        }\n    }\n\n};\n\n// The Position object provides utility methods to manipulate\n\n/**\n * @exports opentype.Position\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Position(font) {\n    Layout.call(this, font, 'gpos');\n}\n\nPosition.prototype = Layout.prototype;\n\n/**\n * Init some data for faster and easier access later.\n */\nPosition.prototype.init = function() {\n    var script = this.getDefaultScriptName();\n    this.defaultKerningTables = this.getKerningTables(script);\n};\n\n/**\n * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n *\n * @param {integer} leftIndex - left glyph index\n * @param {integer} rightIndex - right glyph index\n * @returns {integer}\n */\nPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n    for (var i = 0; i < kerningLookups.length; i++) {\n        var subtables = kerningLookups[i].subtables;\n        for (var j = 0; j < subtables.length; j++) {\n            var subtable = subtables[j];\n            var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n            if (covIndex < 0) { continue; }\n            switch (subtable.posFormat) {\n                case 1:\n                    // Search Pair Adjustment Positioning Format 1\n                    var pairSet = subtable.pairSets[covIndex];\n                    for (var k = 0; k < pairSet.length; k++) {\n                        var pair = pairSet[k];\n                        if (pair.secondGlyph === rightIndex) {\n                            return pair.value1 && pair.value1.xAdvance || 0;\n                        }\n                    }\n                    break;      // left glyph found, not right glyph - try next subtable\n                case 2:\n                    // Search Pair Adjustment Positioning Format 2\n                    var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n                    var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n                    var pair$1 = subtable.classRecords[class1][class2];\n                    return pair$1.value1 && pair$1.value1.xAdvance || 0;\n            }\n        }\n    }\n    return 0;\n};\n\n/**\n * List all kerning lookup tables.\n *\n * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n * @param {string} [language='dflt']\n * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n */\nPosition.prototype.getKerningTables = function(script, language) {\n    if (this.font.tables.gpos) {\n        return this.getLookupTables(script, language, 'kern', 2);\n    }\n};\n\n// The Substitution object provides utility methods to manipulate\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Substitution(font) {\n    Layout.call(this, font, 'gsub');\n}\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n    var n = ar1.length;\n    if (n !== ar2.length) { return false; }\n    for (var i = 0; i < n; i++) {\n        if (ar1[i] !== ar2[i]) { return false; }\n    }\n    return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    var subtables = lookupTable.subtables;\n    for (var i = 0; i < subtables.length; i++) {\n        var subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n    return undefined;\n}\n\nSubstitution.prototype = Layout.prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function() {\n    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n    return {\n        version: 1,\n        scripts: [{\n            tag: 'DFLT',\n            script: {\n                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                langSysRecords: []\n            }\n        }],\n        features: [],\n        lookups: []\n    };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 1);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j = (void 0);\n            if (subtable.substFormat === 1) {\n                var delta = subtable.deltaGlyphId;\n                for (j = 0; j < glyphs.length; j++) {\n                    var glyph = glyphs[j];\n                    substitutions.push({ sub: glyph, by: glyph + delta });\n                }\n            } else {\n                var substitute = subtable.substitute;\n                for (j = 0; j < glyphs.length; j++) {\n                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all multiple substitutions (lookup type 2) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('ccmp', 'stch')\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getMultiple = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 2);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j = (void 0);\n\n            for (j = 0; j < glyphs.length; j++) {\n                var glyph = glyphs[j];\n                var replacements = subtable.sequences[j];\n                substitutions.push({ sub: glyph, by: replacements });\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    var alternates = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 3);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var alternateSets = subtable.alternateSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n            }\n        }\n    }\n    return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    var ligatures = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 4);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var ligatureSets = subtable.ligatureSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                var startGlyph = glyphs[j];\n                var ligSet = ligatureSets[j];\n                for (var k = 0; k < ligSet.length; k++) {\n                    var lig = ligSet[k];\n                    ligatures.push({\n                        sub: [startGlyph].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: id } (format 1 is not supported)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n        substFormat: 2,\n        coverage: {format: 1, glyphs: []},\n        substitute: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Single: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify a multiple substitution (lookup type 2)\n * @param {string} feature - 4-letter feature name ('ccmp', 'stch')\n * @param {Object} substitution - { sub: id, by: [id] } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addMultiple = function(feature, substitution, script, language) {\n    check.assert(substitution.by instanceof Array && substitution.by.length > 1, 'Multiple: \"by\" must be an array of two or more ids');\n    var lookupTable = this.getLookupTables(script, language, feature, 2, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 2 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: {format: 1, glyphs: []},\n        sequences: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Multiple: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.sequences.splice(pos, 0, 0);\n    }\n    subtable.sequences[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 3)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: {format: 1, glyphs: []},\n        alternateSets: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Alternate: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    var subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    var coverageGlyph = ligature.sub[0];\n    var ligComponents = ligature.sub.slice(1);\n    var ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        // ligatureSet already exists\n        var ligatureSet = subtable.ligatureSets[pos];\n        for (var i = 0; i < ligatureSet.length; i++) {\n            // If ligature already exists, return.\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        // ligature does not exist: add it.\n        ligatureSet.push(ligatureTable);\n    } else {\n        // Create a new ligatureSet and add coverage for the first glyph.\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n    }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.getSingle(feature, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            return this.getSingle(feature, script, language)\n                    .concat(this.getAlternates(feature, script, language));\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.getLigatures(feature, script, language);\n        case 'ccmp':\n            return this.getMultiple(feature, script, language)\n                .concat(this.getLigatures(feature, script, language));\n        case 'stch':\n            return this.getMultiple(feature, script, language);\n    }\n    return undefined;\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            if (typeof sub.by === 'number') {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.addLigature(feature, sub, script, language);\n        case 'ccmp':\n            if (sub.by instanceof Array) {\n                return this.addMultiple(feature, sub, script, language);\n            }\n            return this.addLigature(feature, sub, script, language);\n    }\n    return undefined;\n};\n\nfunction isBrowser() {\n    return typeof window !== 'undefined';\n}\n\nfunction nodeBufferToArrayBuffer(buffer) {\n    var ab = new ArrayBuffer(buffer.length);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buffer.length; ++i) {\n        view[i] = buffer[i];\n    }\n\n    return ab;\n}\n\nfunction arrayBufferToNodeBuffer(ab) {\n    var buffer = new Buffer(ab.byteLength);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n}\n\nfunction checkArgument(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n}\n\n// The `glyf` table describes the glyphs in TrueType outline format.\n\n// Parse the coordinate data for a glyph.\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    var v;\n    if ((flag & shortVectorBitMask) > 0) {\n        // The coordinate is 1 byte long.\n        v = p.parseByte();\n        // The `same` bit is re-used for short values to signify the sign of the value.\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n\n        v = previousValue + v;\n    } else {\n        //  The coordinate is 2 bytes long.\n        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            // Parse the coordinate as a signed 16-bit delta value.\n            v = previousValue + p.parseShort();\n        }\n    }\n\n    return v;\n}\n\n// Parse a TrueType glyph.\nfunction parseGlyph(glyph, data, start) {\n    var p = new parse.Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    var flags;\n    var flag;\n\n    if (glyph.numberOfContours > 0) {\n        // This glyph is not a composite.\n        var endPointIndices = glyph.endPointIndices = [];\n        for (var i = 0; i < glyph.numberOfContours; i += 1) {\n            endPointIndices.push(p.parseUShort());\n        }\n\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n            glyph.instructions.push(p.parseByte());\n        }\n\n        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n            flag = p.parseByte();\n            flags.push(flag);\n            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n            if ((flag & 8) > 0) {\n                var repeatCount = p.parseByte();\n                for (var j = 0; j < repeatCount; j += 1) {\n                    flags.push(flag);\n                    i$2 += 1;\n                }\n            }\n        }\n\n        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n        if (endPointIndices.length > 0) {\n            var points = [];\n            var point;\n            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n            if (numberOfCoordinates > 0) {\n                for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n                    flag = flags[i$3];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                    points.push(point);\n                }\n\n                var px = 0;\n                for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n                    flag = flags[i$4];\n                    point = points[i$4];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n\n                var py = 0;\n                for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n                    flag = flags[i$5];\n                    point = points[i$5];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        var moreComponents = true;\n        while (moreComponents) {\n            flags = p.parseUShort();\n            var component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                // The arguments are words\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                }\n\n            } else {\n                // The arguments are bytes\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n                }\n            }\n\n            if ((flags & 8) > 0) {\n                // We have a scale\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                // We have an X / Y scale\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                // We have a 2x2 transformation\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n        if (flags & 0x100) {\n            // We have instructions\n            glyph.instructionLength = p.parseUShort();\n            glyph.instructions = [];\n            for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n                glyph.instructions.push(p.parseByte());\n            }\n        }\n    }\n}\n\n// Transform an array of points and return a new array.\nfunction transformPoints(points, transform) {\n    var newPoints = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        var newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n\n    return newPoints;\n}\n\nfunction getContours(points) {\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n}\n\n// Convert the TrueType glyph outline to a Path.\nfunction getPath(points) {\n    var p = new Path();\n    if (!points) {\n        return p;\n    }\n\n    var contours = getContours(points);\n\n    for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n        var contour = contours[contourIndex];\n\n        var prev = null;\n        var curr = contour[contour.length - 1];\n        var next = contour[0];\n\n        if (curr.onCurve) {\n            p.moveTo(curr.x, curr.y);\n        } else {\n            if (next.onCurve) {\n                p.moveTo(next.x, next.y);\n            } else {\n                // If both first and last points are off-curve, start at their middle.\n                var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};\n                p.moveTo(start.x, start.y);\n            }\n        }\n\n        for (var i = 0; i < contour.length; ++i) {\n            prev = curr;\n            curr = next;\n            next = contour[(i + 1) % contour.length];\n\n            if (curr.onCurve) {\n                // This is a straight line.\n                p.lineTo(curr.x, curr.y);\n            } else {\n                var prev2 = prev;\n                var next2 = next;\n\n                if (!prev.onCurve) {\n                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                }\n\n                if (!next.onCurve) {\n                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                }\n\n                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n            }\n        }\n\n        p.closePath();\n    }\n    return p;\n}\n\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for (var j = 0; j < glyph.components.length; j += 1) {\n            var component = glyph.components[j];\n            var componentGlyph = glyphs.get(component.glyphIndex);\n            // Force the ttfGlyphLoader to parse the glyph.\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                var transformedPoints = (void 0);\n                if (component.matchedPoints === undefined) {\n                    // component positioned by offset\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    // component positioned by matched points\n                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n                        throw Error('Matched points out of range in ' + glyph.name);\n                    }\n                    var firstPt = glyph.points[component.matchedPoints[0]];\n                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    var transform = {\n                        xScale: component.xScale, scale01: component.scale01,\n                        scale10: component.scale10, yScale: component.yScale,\n                        dx: 0, dy: 0\n                    };\n                    secondPt = transformPoints([secondPt], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n\n    return getPath(glyph.points);\n}\n\nfunction parseGlyfTableAll(data, start, loca, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n\n    // The last element of the loca table is invalid.\n    for (var i = 0; i < loca.length - 1; i += 1) {\n        var offset = loca[i];\n        var nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    }\n\n    return glyphs;\n}\n\nfunction parseGlyfTableOnLowMemory(data, start, loca, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n\n    font._push = function(i) {\n        var offset = loca[i];\n        var nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    };\n\n    return glyphs;\n}\n\n// Parse all the glyphs according to the offsets from the `loca` table.\nfunction parseGlyfTable(data, start, loca, font, opt) {\n    if (opt.lowMemory)\n        { return parseGlyfTableOnLowMemory(data, start, loca, font); }\n    else\n        { return parseGlyfTableAll(data, start, loca, font); }\n}\n\nvar glyf = { getPath: getPath, parse: parseGlyfTable};\n\n/* A TrueType font hinting interpreter.\n*\n* (c) 2017 Axel Kittenberger\n*\n* This interpreter has been implemented according to this documentation:\n* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n*\n* According to the documentation F24DOT6 values are used for pixels.\n* That means calculation is 1/64 pixel accurate and uses integer operations.\n* However, Javascript has floating point operations by default and only\n* those are available. One could make a case to simulate the 1/64 accuracy\n* exactly by truncating after every division operation\n* (for example with << 0) to get pixel exactly results as other TrueType\n* implementations. It may make sense since some fonts are pixel optimized\n* by hand using DELTAP instructions. The current implementation doesn't\n* and rather uses full floating point precision.\n*\n* xScale, yScale and rotation is currently ignored.\n*\n* A few non-trivial instructions are missing as I didn't encounter yet\n* a font that used them to test a possible implementation.\n*\n* Some fonts seem to use undocumented features regarding the twilight zone.\n* Only some of them are implemented as they were encountered.\n*\n* The exports.DEBUG statements are removed on the minified distribution file.\n*/\n\nvar instructionTable;\nvar exec;\nvar execGlyph;\nvar execComponent;\n\n/*\n* Creates a hinting object.\n*\n* There ought to be exactly one\n* for each truetype font that is used for hinting.\n*/\nfunction Hinting(font) {\n    // the font this hinting object is for\n    this.font = font;\n\n    this.getCommands = function (hPoints) {\n        return glyf.getPath(hPoints).commands;\n    };\n\n    // cached states\n    this._fpgmState  =\n    this._prepState  =\n        undefined;\n\n    // errorState\n    // 0 ... all okay\n    // 1 ... had an error in a glyf,\n    //       continue working but stop spamming\n    //       the console\n    // 2 ... error at prep, stop hinting at this ppem\n    // 3 ... error at fpeg, stop hinting for this font at all\n    this._errorState = 0;\n}\n\n/*\n* Not rounding.\n*/\nfunction roundOff(v) {\n    return v;\n}\n\n/*\n* Rounding to grid.\n*/\nfunction roundToGrid(v) {\n    //Rounding in TT is supposed to \"symmetrical around zero\"\n    return Math.sign(v) * Math.round(Math.abs(v));\n}\n\n/*\n* Rounding to double grid.\n*/\nfunction roundToDoubleGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n}\n\n/*\n* Rounding to half grid.\n*/\nfunction roundToHalfGrid(v) {\n    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n}\n\n/*\n* Rounding to up to grid.\n*/\nfunction roundUpToGrid(v) {\n    return Math.sign(v) * Math.ceil(Math.abs(v));\n}\n\n/*\n* Rounding to down to grid.\n*/\nfunction roundDownToGrid(v) {\n    return Math.sign(v) * Math.floor(Math.abs(v));\n}\n\n/*\n* Super rounding.\n*/\nvar roundSuper = function (v) {\n    var period = this.srPeriod;\n    var phase = this.srPhase;\n    var threshold = this.srThreshold;\n    var sign = 1;\n\n    if (v < 0) {\n        v = -v;\n        sign = -1;\n    }\n\n    v += threshold - phase;\n\n    v = Math.trunc(v / period) * period;\n\n    v += phase;\n\n    // according to http://xgridfit.sourceforge.net/round.html\n    if (v < 0) { return phase * sign; }\n\n    return v * sign;\n};\n\n/*\n* Unit vector of x-axis.\n*/\nvar xUnitVector = {\n    x: 1,\n\n    y: 0,\n\n    axis: 'x',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt;\n\n        if (!pv || pv === this) {\n            do1 = p.xo - rp1.xo;\n            do2 = p.xo - rp2.xo;\n            dm1 = rp1.x - rp1.xo;\n            dm2 = rp2.x - rp2.xo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.x = p.xo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this\n    normalSlope: Number.NEGATIVE_INFINITY,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'.\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.x = (org ? rp.xo : rp.x) + d;\n            return;\n        }\n\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n\n        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n    },\n\n    // Slope of vector line.\n    slope: 0,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.xTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.xTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.xTouched = false;\n    }\n};\n\n/*\n* Unit vector of y-axis.\n*/\nvar yUnitVector = {\n    x: 0,\n\n    y: 1,\n\n    axis: 'y',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt;\n\n        if (!pv || pv === this) {\n            do1 = p.yo - rp1.yo;\n            do2 = p.yo - rp2.yo;\n            dm1 = rp1.y - rp1.yo;\n            dm2 = rp2.y - rp2.yo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.y = p.yo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this.\n    normalSlope: 0,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.y = (org ? rp.yo : rp.y) + d;\n            return;\n        }\n\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n\n        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n    },\n\n    // Slope of vector line.\n    slope: Number.POSITIVE_INFINITY,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.yTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.yTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.yTouched = false;\n    }\n};\n\nObject.freeze(xUnitVector);\nObject.freeze(yUnitVector);\n\n/*\n* Creates a unit vector that is not x- or y-axis.\n*/\nfunction UnitVector(x, y) {\n    this.x = x;\n    this.y = y;\n    this.axis = undefined;\n    this.slope = y / x;\n    this.normalSlope = -x / y;\n    Object.freeze(this);\n}\n\n/*\n* Gets the projected distance between two points.\n* o1/o2 ... if true, respective original position is used.\n*/\nUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n    return (\n        this.x * xUnitVector.distance(p1, p2, o1, o2) +\n        this.y * yUnitVector.distance(p1, p2, o1, o2)\n    );\n};\n\n/*\n* Moves point p so the moved position has the same relative\n* position to the moved positions of rp1 and rp2 than the\n* original positions had.\n*\n* See APPENDIX on INTERPOLATE at the bottom of this file.\n*/\nUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n    var dm1;\n    var dm2;\n    var do1;\n    var do2;\n    var doa1;\n    var doa2;\n    var dt;\n\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt = doa1 + doa2;\n\n    if (dt === 0) {\n        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n        return;\n    }\n\n    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n};\n\n/*\n* Sets the point 'p' relative to point 'rp'\n* by the distance 'd'\n*\n* See APPENDIX on SETRELATIVE at the bottom of this file.\n*\n* p   ...  point to set\n* rp  ... reference point\n* d   ... distance on projection vector\n* pv  ... projection vector (undefined = this)\n* org ... if true, uses the original position of rp as reference.\n*/\nUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n    pv = pv || this;\n\n    var rpx = org ? rp.xo : rp.x;\n    var rpy = org ? rp.yo : rp.y;\n    var rpdx = rpx + d * pv.x;\n    var rpdy = rpy + d * pv.y;\n\n    var pvns = pv.normalSlope;\n    var fvs = this.slope;\n\n    var px = p.x;\n    var py = p.y;\n\n    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n    p.y = fvs * (p.x - px) + py;\n};\n\n/*\n* Touches the point p.\n*/\nUnitVector.prototype.touch = function(p) {\n    p.xTouched = true;\n    p.yTouched = true;\n};\n\n/*\n* Returns a unit vector with x/y coordinates.\n*/\nfunction getUnitVector(x, y) {\n    var d = Math.sqrt(x * x + y * y);\n\n    x /= d;\n    y /= d;\n\n    if (x === 1 && y === 0) { return xUnitVector; }\n    else if (x === 0 && y === 1) { return yUnitVector; }\n    else { return new UnitVector(x, y); }\n}\n\n/*\n* Creates a point in the hinting engine.\n*/\nfunction HPoint(\n    x,\n    y,\n    lastPointOfContour,\n    onCurve\n) {\n    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n    this.lastPointOfContour = lastPointOfContour;\n    this.onCurve = onCurve;\n    this.prevPointOnContour = undefined;\n    this.nextPointOnContour = undefined;\n    this.xTouched = false;\n    this.yTouched = false;\n\n    Object.preventExtensions(this);\n}\n\n/*\n* Returns the next touched point on the contour.\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.nextTouched = function(v) {\n    var p = this.nextPointOnContour;\n\n    while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }\n\n    return p;\n};\n\n/*\n* Returns the previous touched point on the contour\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.prevTouched = function(v) {\n    var p = this.prevPointOnContour;\n\n    while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }\n\n    return p;\n};\n\n/*\n* The zero point.\n*/\nvar HPZero = Object.freeze(new HPoint(0, 0));\n\n/*\n* The default state of the interpreter.\n*\n* Note: Freezing the defaultState and then deriving from it\n* makes the V8 Javascript engine going awkward,\n* so this is avoided, albeit the defaultState shouldn't\n* ever change.\n*/\nvar defaultState = {\n    cvCutIn: 17 / 16,    // control value cut in\n    deltaBase: 9,\n    deltaShift: 0.125,\n    loop: 1,             // loops some instructions\n    minDis: 1,           // minimum distance\n    autoFlip: true\n};\n\n/*\n* The current state of the interpreter.\n*\n* env  ... 'fpgm' or 'prep' or 'glyf'\n* prog ... the program\n*/\nfunction State(env, prog) {\n    this.env = env;\n    this.stack = [];\n    this.prog = prog;\n\n    switch (env) {\n        case 'glyf' :\n            this.zp0 = this.zp1 = this.zp2 = 1;\n            this.rp0 = this.rp1 = this.rp2 = 0;\n            /* fall through */\n        case 'prep' :\n            this.fv = this.pv = this.dpv = xUnitVector;\n            this.round = roundToGrid;\n    }\n}\n\n/*\n* Executes a glyph program.\n*\n* This does the hinting for each glyph.\n*\n* Returns an array of moved points.\n*\n* glyph: the glyph to hint\n* ppem: the size the glyph is rendered for\n*/\nHinting.prototype.exec = function(glyph, ppem) {\n    if (typeof ppem !== 'number') {\n        throw new Error('Point size is not a number!');\n    }\n\n    // Received a fatal error, don't do any hinting anymore.\n    if (this._errorState > 2) { return; }\n\n    var font = this.font;\n    var prepState = this._prepState;\n\n    if (!prepState || prepState.ppem !== ppem) {\n        var fpgmState = this._fpgmState;\n\n        if (!fpgmState) {\n            // Executes the fpgm state.\n            // This is used by fonts to define functions.\n            State.prototype = defaultState;\n\n            fpgmState =\n            this._fpgmState =\n                new State('fpgm', font.tables.fpgm);\n\n            fpgmState.funcs = [ ];\n            fpgmState.font = font;\n\n            if (exports.DEBUG) {\n                console.log('---EXEC FPGM---');\n                fpgmState.step = -1;\n            }\n\n            try {\n                exec(fpgmState);\n            } catch (e) {\n                console.log('Hinting error in FPGM:' + e);\n                this._errorState = 3;\n                return;\n            }\n        }\n\n        // Executes the prep program for this ppem setting.\n        // This is used by fonts to set cvt values\n        // depending on to be rendered font size.\n\n        State.prototype = fpgmState;\n        prepState =\n        this._prepState =\n            new State('prep', font.tables.prep);\n\n        prepState.ppem = ppem;\n\n        // Creates a copy of the cvt table\n        // and scales it to the current ppem setting.\n        var oCvt = font.tables.cvt;\n        if (oCvt) {\n            var cvt = prepState.cvt = new Array(oCvt.length);\n            var scale = ppem / font.unitsPerEm;\n            for (var c = 0; c < oCvt.length; c++) {\n                cvt[c] = oCvt[c] * scale;\n            }\n        } else {\n            prepState.cvt = [];\n        }\n\n        if (exports.DEBUG) {\n            console.log('---EXEC PREP---');\n            prepState.step = -1;\n        }\n\n        try {\n            exec(prepState);\n        } catch (e) {\n            if (this._errorState < 2) {\n                console.log('Hinting error in PREP:' + e);\n            }\n            this._errorState = 2;\n        }\n    }\n\n    if (this._errorState > 1) { return; }\n\n    try {\n        return execGlyph(glyph, prepState);\n    } catch (e) {\n        if (this._errorState < 1) {\n            console.log('Hinting error:' + e);\n            console.log('Note: further hinting errors are silenced');\n        }\n        this._errorState = 1;\n        return undefined;\n    }\n};\n\n/*\n* Executes the hinting program for a glyph.\n*/\nexecGlyph = function(glyph, prepState) {\n    // original point positions\n    var xScale = prepState.ppem / prepState.font.unitsPerEm;\n    var yScale = xScale;\n    var components = glyph.components;\n    var contours;\n    var gZone;\n    var state;\n\n    State.prototype = prepState;\n    if (!components) {\n        state = new State('glyf', glyph.instructions);\n        if (exports.DEBUG) {\n            console.log('---EXEC GLYPH---');\n            state.step = -1;\n        }\n        execComponent(glyph, state, xScale, yScale);\n        gZone = state.gZone;\n    } else {\n        var font = prepState.font;\n        gZone = [];\n        contours = [];\n        for (var i = 0; i < components.length; i++) {\n            var c = components[i];\n            var cg = font.glyphs.get(c.glyphIndex);\n\n            state = new State('glyf', cg.instructions);\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMP ' + i + '---');\n                state.step = -1;\n            }\n\n            execComponent(cg, state, xScale, yScale);\n            // appends the computed points to the result array\n            // post processes the component points\n            var dx = Math.round(c.dx * xScale);\n            var dy = Math.round(c.dy * yScale);\n            var gz = state.gZone;\n            var cc = state.contours;\n            for (var pi = 0; pi < gz.length; pi++) {\n                var p = gz[pi];\n                p.xTouched = p.yTouched = false;\n                p.xo = p.x = p.x + dx;\n                p.yo = p.y = p.y + dy;\n            }\n\n            var gLen = gZone.length;\n            gZone.push.apply(gZone, gz);\n            for (var j = 0; j < cc.length; j++) {\n                contours.push(cc[j] + gLen);\n            }\n        }\n\n        if (glyph.instructions && !state.inhibitGridFit) {\n            // the composite has instructions on its own\n            state = new State('glyf', glyph.instructions);\n\n            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n            state.contours = contours;\n\n            // note: HPZero cannot be used here, since\n            //       the point might be modified\n            gZone.push(\n                new HPoint(0, 0),\n                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n            );\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMPOSITE---');\n                state.step = -1;\n            }\n\n            exec(state);\n\n            gZone.length -= 2;\n        }\n    }\n\n    return gZone;\n};\n\n/*\n* Executes the hinting program for a component of a multi-component glyph\n* or of the glyph itself for a non-component glyph.\n*/\nexecComponent = function(glyph, state, xScale, yScale)\n{\n    var points = glyph.points || [];\n    var pLen = points.length;\n    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n    var contours = state.contours = [];\n\n    // Scales the original points and\n    // makes copies for the hinted points.\n    var cp; // current point\n    for (var i = 0; i < pLen; i++) {\n        cp = points[i];\n\n        gZone[i] = new HPoint(\n            cp.x * xScale,\n            cp.y * yScale,\n            cp.lastPointOfContour,\n            cp.onCurve\n        );\n    }\n\n    // Chain links the contours.\n    var sp; // start point\n    var np; // next point\n\n    for (var i$1 = 0; i$1 < pLen; i$1++) {\n        cp = gZone[i$1];\n\n        if (!sp) {\n            sp = cp;\n            contours.push(i$1);\n        }\n\n        if (cp.lastPointOfContour) {\n            cp.nextPointOnContour = sp;\n            sp.prevPointOnContour = cp;\n            sp = undefined;\n        } else {\n            np = gZone[i$1 + 1];\n            cp.nextPointOnContour = np;\n            np.prevPointOnContour = cp;\n        }\n    }\n\n    if (state.inhibitGridFit) { return; }\n\n    if (exports.DEBUG) {\n        console.log('PROCESSING GLYPH', state.stack);\n        for (var i$2 = 0; i$2 < pLen; i$2++) {\n            console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n        }\n    }\n\n    gZone.push(\n        new HPoint(0, 0),\n        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n    );\n\n    exec(state);\n\n    // Removes the extra points.\n    gZone.length -= 2;\n\n    if (exports.DEBUG) {\n        console.log('FINISHED GLYPH', state.stack);\n        for (var i$3 = 0; i$3 < pLen; i$3++) {\n            console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n        }\n    }\n};\n\n/*\n* Executes the program loaded in state.\n*/\nexec = function(state) {\n    var prog = state.prog;\n\n    if (!prog) { return; }\n\n    var pLen = prog.length;\n    var ins;\n\n    for (state.ip = 0; state.ip < pLen; state.ip++) {\n        if (exports.DEBUG) { state.step++; }\n        ins = instructionTable[prog[state.ip]];\n\n        if (!ins) {\n            throw new Error(\n                'unknown instruction: 0x' +\n                Number(prog[state.ip]).toString(16)\n            );\n        }\n\n        ins(state);\n\n        // very extensive debugging for each step\n        /*\n        if (exports.DEBUG) {\n            var da;\n            if (state.gZone) {\n                da = [];\n                for (let i = 0; i < state.gZone.length; i++)\n                {\n                    da.push(i + ' ' +\n                        state.gZone[i].x * 64 + ' ' +\n                        state.gZone[i].y * 64 + ' ' +\n                        (state.gZone[i].xTouched ? 'x' : '') +\n                        (state.gZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('GZ', da);\n            }\n\n            if (state.tZone) {\n                da = [];\n                for (let i = 0; i < state.tZone.length; i++) {\n                    da.push(i + ' ' +\n                        state.tZone[i].x * 64 + ' ' +\n                        state.tZone[i].y * 64 + ' ' +\n                        (state.tZone[i].xTouched ? 'x' : '') +\n                        (state.tZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('TZ', da);\n            }\n\n            if (state.stack.length > 10) {\n                console.log(\n                    state.stack.length,\n                    '...', state.stack.slice(state.stack.length - 10)\n                );\n            } else {\n                console.log(state.stack.length, state.stack);\n            }\n        }\n        */\n    }\n};\n\n/*\n* Initializes the twilight zone.\n*\n* This is only done if a SZPx instruction\n* refers to the twilight zone.\n*/\nfunction initTZone(state)\n{\n    var tZone = state.tZone = new Array(state.gZone.length);\n\n    // no idea if this is actually correct...\n    for (var i = 0; i < tZone.length; i++)\n    {\n        tZone[i] = new HPoint(0, 0);\n    }\n}\n\n/*\n* Skips the instruction pointer ahead over an IF/ELSE block.\n* handleElse .. if true breaks on matching ELSE\n*/\nfunction skip(state, handleElse)\n{\n    var prog = state.prog;\n    var ip = state.ip;\n    var nesting = 1;\n    var ins;\n\n    do {\n        ins = prog[++ip];\n        if (ins === 0x58) // IF\n            { nesting++; }\n        else if (ins === 0x59) // EIF\n            { nesting--; }\n        else if (ins === 0x40) // NPUSHB\n            { ip += prog[ip + 1] + 1; }\n        else if (ins === 0x41) // NPUSHW\n            { ip += 2 * prog[ip + 1] + 1; }\n        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n            { ip += ins - 0xB0 + 1; }\n        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n            { ip += (ins - 0xB8 + 1) * 2; }\n        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n            { break; }\n    } while (nesting > 0);\n\n    state.ip = ip;\n}\n\n/*----------------------------------------------------------*\n*          And then a lot of instructions...                *\n*----------------------------------------------------------*/\n\n// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n// 0x00-0x01\nfunction SVTCA(v, state) {\n    if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }\n\n    state.fv = state.pv = state.dpv = v;\n}\n\n// SPVTCA[a] Set Projection Vector to Coordinate Axis\n// 0x02-0x03\nfunction SPVTCA(v, state) {\n    if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }\n\n    state.pv = state.dpv = v;\n}\n\n// SFVTCA[a] Set Freedom Vector to Coordinate Axis\n// 0x04-0x05\nfunction SFVTCA(v, state) {\n    if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }\n\n    state.fv = v;\n}\n\n// SPVTL[a] Set Projection Vector To Line\n// 0x06-0x07\nfunction SPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n\n    if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }\n\n    var dx;\n    var dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.pv = state.dpv = getUnitVector(dx, dy);\n}\n\n// SFVTL[a] Set Freedom Vector To Line\n// 0x08-0x09\nfunction SFVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n\n    if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }\n\n    var dx;\n    var dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.fv = getUnitVector(dx, dy);\n}\n\n// SPVFS[] Set Projection Vector From Stack\n// 0x0A\nfunction SPVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n    state.pv = state.dpv = getUnitVector(x, y);\n}\n\n// SFVFS[] Set Freedom Vector From Stack\n// 0x0B\nfunction SFVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n    state.fv = getUnitVector(x, y);\n}\n\n// GPV[] Get Projection Vector\n// 0x0C\nfunction GPV(state) {\n    var stack = state.stack;\n    var pv = state.pv;\n\n    if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }\n\n    stack.push(pv.x * 0x4000);\n    stack.push(pv.y * 0x4000);\n}\n\n// GFV[] Get Freedom Vector\n// 0x0C\nfunction GFV(state) {\n    var stack = state.stack;\n    var fv = state.fv;\n\n    if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }\n\n    stack.push(fv.x * 0x4000);\n    stack.push(fv.y * 0x4000);\n}\n\n// SFVTPV[] Set Freedom Vector To Projection Vector\n// 0x0E\nfunction SFVTPV(state) {\n    state.fv = state.pv;\n\n    if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }\n}\n\n// ISECT[] moves point p to the InterSECTion of two lines\n// 0x0F\nfunction ISECT(state)\n{\n    var stack = state.stack;\n    var pa0i = stack.pop();\n    var pa1i = stack.pop();\n    var pb0i = stack.pop();\n    var pb1i = stack.pop();\n    var pi = stack.pop();\n    var z0 = state.z0;\n    var z1 = state.z1;\n    var pa0 = z0[pa0i];\n    var pa1 = z0[pa1i];\n    var pb0 = z1[pb0i];\n    var pb1 = z1[pb1i];\n    var p = state.z2[pi];\n\n    if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }\n\n    // math from\n    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n    var x1 = pa0.x;\n    var y1 = pa0.y;\n    var x2 = pa1.x;\n    var y2 = pa1.y;\n    var x3 = pb0.x;\n    var y3 = pb0.y;\n    var x4 = pb1.x;\n    var y4 = pb1.y;\n\n    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    var f1 = x1 * y2 - y1 * x2;\n    var f2 = x3 * y4 - y3 * x4;\n\n    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n}\n\n// SRP0[] Set Reference Point 0\n// 0x10\nfunction SRP0(state) {\n    state.rp0 = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }\n}\n\n// SRP1[] Set Reference Point 1\n// 0x11\nfunction SRP1(state) {\n    state.rp1 = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }\n}\n\n// SRP1[] Set Reference Point 2\n// 0x12\nfunction SRP2(state) {\n    state.rp2 = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }\n}\n\n// SZP0[] Set Zone Pointer 0\n// 0x13\nfunction SZP0(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }\n\n    state.zp0 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z0 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP1[] Set Zone Pointer 1\n// 0x14\nfunction SZP1(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }\n\n    state.zp1 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z1 = state.tZone;\n            break;\n        case 1 :\n            state.z1 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP2[] Set Zone Pointer 2\n// 0x15\nfunction SZP2(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }\n\n    state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZPS[] Set Zone PointerS\n// 0x16\nfunction SZPS(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }\n\n    state.zp0 = state.zp1 = state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z0 = state.z1 = state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.z1 = state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SLOOP[] Set LOOP variable\n// 0x17\nfunction SLOOP(state) {\n    state.loop = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }\n}\n\n// RTG[] Round To Grid\n// 0x18\nfunction RTG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }\n\n    state.round = roundToGrid;\n}\n\n// RTHG[] Round To Half Grid\n// 0x19\nfunction RTHG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }\n\n    state.round = roundToHalfGrid;\n}\n\n// SMD[] Set Minimum Distance\n// 0x1A\nfunction SMD(state) {\n    var d = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }\n\n    state.minDis = d / 0x40;\n}\n\n// ELSE[] ELSE clause\n// 0x1B\nfunction ELSE(state) {\n    // This instruction has been reached by executing a then branch\n    // so it just skips ahead until matching EIF.\n    //\n    // In case the IF was negative the IF[] instruction already\n    // skipped forward over the ELSE[]\n\n    if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }\n\n    skip(state, false);\n}\n\n// JMPR[] JuMP Relative\n// 0x1C\nfunction JMPR(state) {\n    var o = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }\n\n    // A jump by 1 would do nothing.\n    state.ip += o - 1;\n}\n\n// SCVTCI[] Set Control Value Table Cut-In\n// 0x1D\nfunction SCVTCI(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }\n\n    state.cvCutIn = n / 0x40;\n}\n\n// DUP[] DUPlicate top stack element\n// 0x20\nfunction DUP(state) {\n    var stack = state.stack;\n\n    if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }\n\n    stack.push(stack[stack.length - 1]);\n}\n\n// POP[] POP top stack element\n// 0x21\nfunction POP(state) {\n    if (exports.DEBUG) { console.log(state.step, 'POP[]'); }\n\n    state.stack.pop();\n}\n\n// CLEAR[] CLEAR the stack\n// 0x22\nfunction CLEAR(state) {\n    if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }\n\n    state.stack.length = 0;\n}\n\n// SWAP[] SWAP the top two elements on the stack\n// 0x23\nfunction SWAP(state) {\n    var stack = state.stack;\n\n    var a = stack.pop();\n    var b = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }\n\n    stack.push(a);\n    stack.push(b);\n}\n\n// DEPTH[] DEPTH of the stack\n// 0x24\nfunction DEPTH(state) {\n    var stack = state.stack;\n\n    if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }\n\n    stack.push(stack.length);\n}\n\n// LOOPCALL[] LOOPCALL function\n// 0x2A\nfunction LOOPCALL(state) {\n    var stack = state.stack;\n    var fn = stack.pop();\n    var c = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }\n\n    // saves callers program\n    var cip = state.ip;\n    var cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    for (var i = 0; i < c; i++) {\n        exec(state);\n\n        if (exports.DEBUG) { console.log(\n            ++state.step,\n            i + 1 < c ? 'next loopcall' : 'done loopcall',\n            i\n        ); }\n    }\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n}\n\n// CALL[] CALL function\n// 0x2B\nfunction CALL(state) {\n    var fn = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }\n\n    // saves callers program\n    var cip = state.ip;\n    var cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    exec(state);\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n\n    if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }\n}\n\n// CINDEX[] Copy the INDEXed element to the top of the stack\n// 0x25\nfunction CINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }\n\n    // In case of k == 1, it copies the last element after popping\n    // thus stack.length - k.\n    stack.push(stack[stack.length - k]);\n}\n\n// MINDEX[] Move the INDEXed element to the top of the stack\n// 0x26\nfunction MINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }\n\n    stack.push(stack.splice(stack.length - k, 1)[0]);\n}\n\n// FDEF[] Function DEFinition\n// 0x2C\nfunction FDEF(state) {\n    if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n\n    var fn = stack.pop();\n    var ipBegin = ip;\n\n    if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }\n\n    while (prog[++ip] !== 0x2D){ }\n\n    state.ip = ip;\n    state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n}\n\n// MDAP[a] Move Direct Absolute Point\n// 0x2E-0x2F\nfunction MDAP(round, state) {\n    var pi = state.stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n\n    if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }\n\n    var d = pv.distance(p, HPZero);\n\n    if (round) { d = state.round(d); }\n\n    fv.setRelative(p, HPZero, d, pv);\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// IUP[a] Interpolate Untouched Points through the outline\n// 0x30\nfunction IUP(v, state) {\n    var z2 = state.z2;\n    var pLen = z2.length - 2;\n    var cp;\n    var pp;\n    var np;\n\n    if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }\n\n    for (var i = 0; i < pLen; i++) {\n        cp = z2[i]; // current point\n\n        // if this point has been touched go on\n        if (v.touched(cp)) { continue; }\n\n        pp = cp.prevTouched(v);\n\n        // no point on the contour has been touched?\n        if (pp === cp) { continue; }\n\n        np = cp.nextTouched(v);\n\n        if (pp === np) {\n            // only one point on the contour has been touched\n            // so simply moves the point like that\n\n            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n        }\n\n        v.interpolate(cp, pp, np, v);\n    }\n}\n\n// SHP[] SHift Point using reference point\n// 0x32-0x33\nfunction SHP(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var loop = state.loop;\n    var z2 = state.z2;\n\n    while (loop--)\n    {\n        var pi = stack.pop();\n        var p = z2[pi];\n\n        var d = pv.distance(rp, rp, false, true);\n        fv.setRelative(p, p, d, pv);\n        fv.touch(p);\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ?\n                   'loop ' + (state.loop - loop) + ': ' :\n                   ''\n                ) +\n                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi\n            );\n        }\n    }\n\n    state.loop = 1;\n}\n\n// SHC[] SHift Contour using reference point\n// 0x36-0x37\nfunction SHC(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var ci = stack.pop();\n    var sp = state.z2[state.contours[ci]];\n    var p = sp;\n\n    if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }\n\n    var d = pv.distance(rp, rp, false, true);\n\n    do {\n        if (p !== rp) { fv.setRelative(p, p, d, pv); }\n        p = p.nextPointOnContour;\n    } while (p !== sp);\n}\n\n// SHZ[] SHift Zone using reference point\n// 0x36-0x37\nfunction SHZ(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n\n    var e = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }\n\n    var z;\n    switch (e) {\n        case 0 : z = state.tZone; break;\n        case 1 : z = state.gZone; break;\n        default : throw new Error('Invalid zone');\n    }\n\n    var p;\n    var d = pv.distance(rp, rp, false, true);\n    var pLen = z.length - 2;\n    for (var i = 0; i < pLen; i++)\n    {\n        p = z[i];\n        fv.setRelative(p, p, d, pv);\n        //if (p !== rp) fv.setRelative(p, p, d, pv);\n    }\n}\n\n// SHPIX[] SHift point by a PIXel amount\n// 0x38\nfunction SHPIX(state) {\n    var stack = state.stack;\n    var loop = state.loop;\n    var fv = state.fv;\n    var d = stack.pop() / 0x40;\n    var z2 = state.z2;\n\n    while (loop--) {\n        var pi = stack.pop();\n        var p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'SHPIX[]', pi, d\n            );\n        }\n\n        fv.setRelative(p, p, d);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// IP[] Interpolate Point\n// 0x39\nfunction IP(state) {\n    var stack = state.stack;\n    var rp1i = state.rp1;\n    var rp2i = state.rp2;\n    var loop = state.loop;\n    var rp1 = state.z0[rp1i];\n    var rp2 = state.z1[rp2i];\n    var fv = state.fv;\n    var pv = state.dpv;\n    var z2 = state.z2;\n\n    while (loop--) {\n        var pi = stack.pop();\n        var p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'IP[]', pi, rp1i, '<->', rp2i\n            );\n        }\n\n        fv.interpolate(p, rp1, rp2, pv);\n\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// MSIRP[a] Move Stack Indirect Relative Point\n// 0x3A-0x3B\nfunction MSIRP(a, state) {\n    var stack = state.stack;\n    var d = stack.pop() / 64;\n    var pi = stack.pop();\n    var p = state.z1[pi];\n    var rp0 = state.z0[state.rp0];\n    var fv = state.fv;\n    var pv = state.pv;\n\n    fv.setRelative(p, rp0, d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (a) { state.rp0 = pi; }\n}\n\n// ALIGNRP[] Align to reference point.\n// 0x3C\nfunction ALIGNRP(state) {\n    var stack = state.stack;\n    var rp0i = state.rp0;\n    var rp0 = state.z0[rp0i];\n    var loop = state.loop;\n    var fv = state.fv;\n    var pv = state.pv;\n    var z1 = state.z1;\n\n    while (loop--) {\n        var pi = stack.pop();\n        var p = z1[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'ALIGNRP[]', pi\n            );\n        }\n\n        fv.setRelative(p, rp0, 0, pv);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// RTG[] Round To Double Grid\n// 0x3D\nfunction RTDG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }\n\n    state.round = roundToDoubleGrid;\n}\n\n// MIAP[a] Move Indirect Absolute Point\n// 0x3E-0x3F\nfunction MIAP(round, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var pi = stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var cv = state.cvt[n];\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            'MIAP[' + round + ']',\n            n, '(', cv, ')', pi\n        );\n    }\n\n    var d = pv.distance(p, HPZero);\n\n    if (round) {\n        if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n\n        d = state.round(d);\n    }\n\n    fv.setRelative(p, HPZero, d, pv);\n\n    if (state.zp0 === 0) {\n        p.xo = p.x;\n        p.yo = p.y;\n    }\n\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// NPUSB[] PUSH N Bytes\n// 0x40\nfunction NPUSHB(state) {\n    var prog = state.prog;\n    var ip = state.ip;\n    var stack = state.stack;\n\n    var n = prog[++ip];\n\n    if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }\n\n    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n    state.ip = ip;\n}\n\n// NPUSHW[] PUSH N Words\n// 0x41\nfunction NPUSHW(state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n    var n = prog[++ip];\n\n    if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }\n\n    for (var i = 0; i < n; i++) {\n        var w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// WS[] Write Store\n// 0x42\nfunction WS(state) {\n    var stack = state.stack;\n    var store = state.store;\n\n    if (!store) { store = state.store = []; }\n\n    var v = stack.pop();\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }\n\n    store[l] = v;\n}\n\n// RS[] Read Store\n// 0x43\nfunction RS(state) {\n    var stack = state.stack;\n    var store = state.store;\n\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'RS', l); }\n\n    var v = (store && store[l]) || 0;\n\n    stack.push(v);\n}\n\n// WCVTP[] Write Control Value Table in Pixel units\n// 0x44\nfunction WCVTP(state) {\n    var stack = state.stack;\n\n    var v = stack.pop();\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }\n\n    state.cvt[l] = v / 0x40;\n}\n\n// RCVT[] Read Control Value Table entry\n// 0x45\nfunction RCVT(state) {\n    var stack = state.stack;\n    var cvte = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }\n\n    stack.push(state.cvt[cvte] * 0x40);\n}\n\n// GC[] Get Coordinate projected onto the projection vector\n// 0x46-0x47\nfunction GC(a, state) {\n    var stack = state.stack;\n    var pi = stack.pop();\n    var p = state.z2[pi];\n\n    if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }\n\n    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n}\n\n// MD[a] Measure Distance\n// 0x49-0x4A\nfunction MD(a, state) {\n    var stack = state.stack;\n    var pi2 = stack.pop();\n    var pi1 = stack.pop();\n    var p2 = state.z1[pi2];\n    var p1 = state.z0[pi1];\n    var d = state.dpv.distance(p1, p2, a, a);\n\n    if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }\n\n    state.stack.push(Math.round(d * 64));\n}\n\n// MPPEM[] Measure Pixels Per EM\n// 0x4B\nfunction MPPEM(state) {\n    if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }\n    state.stack.push(state.ppem);\n}\n\n// FLIPON[] set the auto FLIP Boolean to ON\n// 0x4D\nfunction FLIPON(state) {\n    if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }\n    state.autoFlip = true;\n}\n\n// LT[] Less Than\n// 0x50\nfunction LT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }\n\n    stack.push(e1 < e2 ? 1 : 0);\n}\n\n// LTEQ[] Less Than or EQual\n// 0x53\nfunction LTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }\n\n    stack.push(e1 <= e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than\n// 0x52\nfunction GT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }\n\n    stack.push(e1 > e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than or EQual\n// 0x53\nfunction GTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }\n\n    stack.push(e1 >= e2 ? 1 : 0);\n}\n\n// EQ[] EQual\n// 0x54\nfunction EQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }\n\n    stack.push(e2 === e1 ? 1 : 0);\n}\n\n// NEQ[] Not EQual\n// 0x55\nfunction NEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }\n\n    stack.push(e2 !== e1 ? 1 : 0);\n}\n\n// ODD[] ODD\n// 0x56\nfunction ODD(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }\n\n    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n}\n\n// EVEN[] EVEN\n// 0x57\nfunction EVEN(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }\n\n    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n}\n\n// IF[] IF test\n// 0x58\nfunction IF(state) {\n    var test = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }\n\n    // if test is true it just continues\n    // if not the ip is skipped until matching ELSE or EIF\n    if (!test) {\n        skip(state, true);\n\n        if (exports.DEBUG) { console.log(state.step,  'EIF[]'); }\n    }\n}\n\n// EIF[] End IF\n// 0x59\nfunction EIF(state) {\n    // this can be reached normally when\n    // executing an else branch.\n    // -> just ignore it\n\n    if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }\n}\n\n// AND[] logical AND\n// 0x5A\nfunction AND(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }\n\n    stack.push(e2 && e1 ? 1 : 0);\n}\n\n// OR[] logical OR\n// 0x5B\nfunction OR(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }\n\n    stack.push(e2 || e1 ? 1 : 0);\n}\n\n// NOT[] logical NOT\n// 0x5C\nfunction NOT(state) {\n    var stack = state.stack;\n    var e = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }\n\n    stack.push(e ? 0 : 1);\n}\n\n// DELTAP1[] DELTA exception P1\n// DELTAP2[] DELTA exception P2\n// DELTAP3[] DELTA exception P3\n// 0x5D, 0x71, 0x72\nfunction DELTAP123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var fv = state.fv;\n    var pv = state.pv;\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds = state.deltaShift;\n    var z0 = state.z0;\n\n    if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }\n\n    for (var i = 0; i < n; i++) {\n        var pi = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) { continue; }\n\n        var mag = (arg & 0x0F) - 8;\n        if (mag >= 0) { mag++; }\n        if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }\n\n        var p = z0[pi];\n        fv.setRelative(p, p, mag * ds, pv);\n    }\n}\n\n// SDB[] Set Delta Base in the graphics state\n// 0x5E\nfunction SDB(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }\n\n    state.deltaBase = n;\n}\n\n// SDS[] Set Delta Shift in the graphics state\n// 0x5F\nfunction SDS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }\n\n    state.deltaShift = Math.pow(0.5, n);\n}\n\n// ADD[] ADD\n// 0x60\nfunction ADD(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }\n\n    stack.push(n1 + n2);\n}\n\n// SUB[] SUB\n// 0x61\nfunction SUB(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }\n\n    stack.push(n1 - n2);\n}\n\n// DIV[] DIV\n// 0x62\nfunction DIV(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }\n\n    stack.push(n1 * 64 / n2);\n}\n\n// MUL[] MUL\n// 0x63\nfunction MUL(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }\n\n    stack.push(n1 * n2 / 64);\n}\n\n// ABS[] ABSolute value\n// 0x64\nfunction ABS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }\n\n    stack.push(Math.abs(n));\n}\n\n// NEG[] NEGate\n// 0x65\nfunction NEG(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }\n\n    stack.push(-n);\n}\n\n// FLOOR[] FLOOR\n// 0x66\nfunction FLOOR(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }\n\n    stack.push(Math.floor(n / 0x40) * 0x40);\n}\n\n// CEILING[] CEILING\n// 0x67\nfunction CEILING(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }\n\n    stack.push(Math.ceil(n / 0x40) * 0x40);\n}\n\n// ROUND[ab] ROUND value\n// 0x68-0x6B\nfunction ROUND(dt, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }\n\n    stack.push(state.round(n / 0x40) * 0x40);\n}\n\n// WCVTF[] Write Control Value Table in Funits\n// 0x70\nfunction WCVTF(state) {\n    var stack = state.stack;\n    var v = stack.pop();\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }\n\n    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n}\n\n// DELTAC1[] DELTA exception C1\n// DELTAC2[] DELTA exception C2\n// DELTAC3[] DELTA exception C3\n// 0x73, 0x74, 0x75\nfunction DELTAC123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds = state.deltaShift;\n\n    if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }\n\n    for (var i = 0; i < n; i++) {\n        var c = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) { continue; }\n\n        var mag = (arg & 0x0F) - 8;\n        if (mag >= 0) { mag++; }\n\n        var delta = mag * ds;\n\n        if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }\n\n        state.cvt[c] += delta;\n    }\n}\n\n// SROUND[] Super ROUND\n// 0x76\nfunction SROUND(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }\n\n    state.round = roundSuper;\n\n    var period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = 0.5;\n            break;\n        case 0x40:\n            period = 1;\n            break;\n        case 0x80:\n            period = 2;\n            break;\n        default:\n            throw new Error('invalid SROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default: throw new Error('invalid SROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) { state.srThreshold = 0; }\n    else { state.srThreshold = (n / 8 - 0.5) * period; }\n}\n\n// S45ROUND[] Super ROUND 45 degrees\n// 0x77\nfunction S45ROUND(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }\n\n    state.round = roundSuper;\n\n    var period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = Math.sqrt(2) / 2;\n            break;\n        case 0x40:\n            period = Math.sqrt(2);\n            break;\n        case 0x80:\n            period = 2 * Math.sqrt(2);\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) { state.srThreshold = 0; }\n    else { state.srThreshold = (n / 8 - 0.5) * period; }\n}\n\n// ROFF[] Round Off\n// 0x7A\nfunction ROFF(state) {\n    if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }\n\n    state.round = roundOff;\n}\n\n// RUTG[] Round Up To Grid\n// 0x7C\nfunction RUTG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }\n\n    state.round = roundUpToGrid;\n}\n\n// RDTG[] Round Down To Grid\n// 0x7D\nfunction RDTG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }\n\n    state.round = roundDownToGrid;\n}\n\n// SCANCTRL[] SCAN conversion ConTRoL\n// 0x85\nfunction SCANCTRL(state) {\n    var n = state.stack.pop();\n\n    // ignored by opentype.js\n\n    if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }\n}\n\n// SDPVTL[a] Set Dual Projection Vector To Line\n// 0x86-0x87\nfunction SDPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n\n    if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }\n\n    var dx;\n    var dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.dpv = getUnitVector(dx, dy);\n}\n\n// GETINFO[] GET INFOrmation\n// 0x88\nfunction GETINFO(state) {\n    var stack = state.stack;\n    var sel = stack.pop();\n    var r = 0;\n\n    if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }\n\n    // v35 as in no subpixel hinting\n    if (sel & 0x01) { r = 35; }\n\n    // TODO rotation and stretch currently not supported\n    // and thus those GETINFO are always 0.\n\n    // opentype.js is always gray scaling\n    if (sel & 0x20) { r |= 0x1000; }\n\n    stack.push(r);\n}\n\n// ROLL[] ROLL the top three stack elements\n// 0x8A\nfunction ROLL(state) {\n    var stack = state.stack;\n    var a = stack.pop();\n    var b = stack.pop();\n    var c = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }\n\n    stack.push(b);\n    stack.push(a);\n    stack.push(c);\n}\n\n// MAX[] MAXimum of top two stack elements\n// 0x8B\nfunction MAX(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }\n\n    stack.push(Math.max(e1, e2));\n}\n\n// MIN[] MINimum of top two stack elements\n// 0x8C\nfunction MIN(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }\n\n    stack.push(Math.min(e1, e2));\n}\n\n// SCANTYPE[] SCANTYPE\n// 0x8D\nfunction SCANTYPE(state) {\n    var n = state.stack.pop();\n    // ignored by opentype.js\n    if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }\n}\n\n// INSTCTRL[] INSTCTRL\n// 0x8D\nfunction INSTCTRL(state) {\n    var s = state.stack.pop();\n    var v = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }\n\n    switch (s) {\n        case 1 : state.inhibitGridFit = !!v; return;\n        case 2 : state.ignoreCvt = !!v; return;\n        default: throw new Error('invalid INSTCTRL[] selector');\n    }\n}\n\n// PUSHB[abc] PUSH Bytes\n// 0xB0-0xB7\nfunction PUSHB(n, state) {\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n\n    if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }\n\n    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n    state.ip = ip;\n}\n\n// PUSHW[abc] PUSH Words\n// 0xB8-0xBF\nfunction PUSHW(n, state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n\n    if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }\n\n    for (var i = 0; i < n; i++) {\n        var w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// MDRP[abcde] Move Direct Relative Point\n// 0xD0-0xEF\n// (if indirect is 0)\n//\n// and\n//\n// MIRP[abcde] Move Indirect Relative Point\n// 0xE0-0xFF\n// (if indirect is 1)\n\nfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n    var stack = state.stack;\n    var cvte = indirect && stack.pop();\n    var pi = stack.pop();\n    var rp0i = state.rp0;\n    var rp = state.z0[rp0i];\n    var p = state.z1[pi];\n\n    var md = state.minDis;\n    var fv = state.fv;\n    var pv = state.dpv;\n    var od; // original distance\n    var d; // moving distance\n    var sign; // sign of distance\n    var cv;\n\n    d = od = pv.distance(p, rp, true, true);\n    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n    // TODO consider autoFlip\n    d = Math.abs(d);\n\n    if (indirect) {\n        cv = state.cvt[cvte];\n\n        if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n    }\n\n    if (keepD && d < md) { d = md; }\n\n    if (ro) { d = state.round(d); }\n\n    fv.setRelative(p, rp, sign * d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            (indirect ? 'MIRP[' : 'MDRP[') +\n            (setRp0 ? 'M' : 'm') +\n            (keepD ? '>' : '_') +\n            (ro ? 'R' : '_') +\n            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +\n            ']',\n            indirect ?\n                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :\n                '',\n            pi,\n            '(d =', od, '->', sign * d, ')'\n        );\n    }\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (setRp0) { state.rp0 = pi; }\n}\n\n/*\n* The instruction table.\n*/\ninstructionTable = [\n    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n    /* 0x06 */ SPVTL.bind(undefined, 0),\n    /* 0x07 */ SPVTL.bind(undefined, 1),\n    /* 0x08 */ SFVTL.bind(undefined, 0),\n    /* 0x09 */ SFVTL.bind(undefined, 1),\n    /* 0x0A */ SPVFS,\n    /* 0x0B */ SFVFS,\n    /* 0x0C */ GPV,\n    /* 0x0D */ GFV,\n    /* 0x0E */ SFVTPV,\n    /* 0x0F */ ISECT,\n    /* 0x10 */ SRP0,\n    /* 0x11 */ SRP1,\n    /* 0x12 */ SRP2,\n    /* 0x13 */ SZP0,\n    /* 0x14 */ SZP1,\n    /* 0x15 */ SZP2,\n    /* 0x16 */ SZPS,\n    /* 0x17 */ SLOOP,\n    /* 0x18 */ RTG,\n    /* 0x19 */ RTHG,\n    /* 0x1A */ SMD,\n    /* 0x1B */ ELSE,\n    /* 0x1C */ JMPR,\n    /* 0x1D */ SCVTCI,\n    /* 0x1E */ undefined,   // TODO SSWCI\n    /* 0x1F */ undefined,   // TODO SSW\n    /* 0x20 */ DUP,\n    /* 0x21 */ POP,\n    /* 0x22 */ CLEAR,\n    /* 0x23 */ SWAP,\n    /* 0x24 */ DEPTH,\n    /* 0x25 */ CINDEX,\n    /* 0x26 */ MINDEX,\n    /* 0x27 */ undefined,   // TODO ALIGNPTS\n    /* 0x28 */ undefined,\n    /* 0x29 */ undefined,   // TODO UTP\n    /* 0x2A */ LOOPCALL,\n    /* 0x2B */ CALL,\n    /* 0x2C */ FDEF,\n    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)\n    /* 0x2E */ MDAP.bind(undefined, 0),\n    /* 0x2F */ MDAP.bind(undefined, 1),\n    /* 0x30 */ IUP.bind(undefined, yUnitVector),\n    /* 0x31 */ IUP.bind(undefined, xUnitVector),\n    /* 0x32 */ SHP.bind(undefined, 0),\n    /* 0x33 */ SHP.bind(undefined, 1),\n    /* 0x34 */ SHC.bind(undefined, 0),\n    /* 0x35 */ SHC.bind(undefined, 1),\n    /* 0x36 */ SHZ.bind(undefined, 0),\n    /* 0x37 */ SHZ.bind(undefined, 1),\n    /* 0x38 */ SHPIX,\n    /* 0x39 */ IP,\n    /* 0x3A */ MSIRP.bind(undefined, 0),\n    /* 0x3B */ MSIRP.bind(undefined, 1),\n    /* 0x3C */ ALIGNRP,\n    /* 0x3D */ RTDG,\n    /* 0x3E */ MIAP.bind(undefined, 0),\n    /* 0x3F */ MIAP.bind(undefined, 1),\n    /* 0x40 */ NPUSHB,\n    /* 0x41 */ NPUSHW,\n    /* 0x42 */ WS,\n    /* 0x43 */ RS,\n    /* 0x44 */ WCVTP,\n    /* 0x45 */ RCVT,\n    /* 0x46 */ GC.bind(undefined, 0),\n    /* 0x47 */ GC.bind(undefined, 1),\n    /* 0x48 */ undefined,   // TODO SCFS\n    /* 0x49 */ MD.bind(undefined, 0),\n    /* 0x4A */ MD.bind(undefined, 1),\n    /* 0x4B */ MPPEM,\n    /* 0x4C */ undefined,   // TODO MPS\n    /* 0x4D */ FLIPON,\n    /* 0x4E */ undefined,   // TODO FLIPOFF\n    /* 0x4F */ undefined,   // TODO DEBUG\n    /* 0x50 */ LT,\n    /* 0x51 */ LTEQ,\n    /* 0x52 */ GT,\n    /* 0x53 */ GTEQ,\n    /* 0x54 */ EQ,\n    /* 0x55 */ NEQ,\n    /* 0x56 */ ODD,\n    /* 0x57 */ EVEN,\n    /* 0x58 */ IF,\n    /* 0x59 */ EIF,\n    /* 0x5A */ AND,\n    /* 0x5B */ OR,\n    /* 0x5C */ NOT,\n    /* 0x5D */ DELTAP123.bind(undefined, 1),\n    /* 0x5E */ SDB,\n    /* 0x5F */ SDS,\n    /* 0x60 */ ADD,\n    /* 0x61 */ SUB,\n    /* 0x62 */ DIV,\n    /* 0x63 */ MUL,\n    /* 0x64 */ ABS,\n    /* 0x65 */ NEG,\n    /* 0x66 */ FLOOR,\n    /* 0x67 */ CEILING,\n    /* 0x68 */ ROUND.bind(undefined, 0),\n    /* 0x69 */ ROUND.bind(undefined, 1),\n    /* 0x6A */ ROUND.bind(undefined, 2),\n    /* 0x6B */ ROUND.bind(undefined, 3),\n    /* 0x6C */ undefined,   // TODO NROUND[ab]\n    /* 0x6D */ undefined,   // TODO NROUND[ab]\n    /* 0x6E */ undefined,   // TODO NROUND[ab]\n    /* 0x6F */ undefined,   // TODO NROUND[ab]\n    /* 0x70 */ WCVTF,\n    /* 0x71 */ DELTAP123.bind(undefined, 2),\n    /* 0x72 */ DELTAP123.bind(undefined, 3),\n    /* 0x73 */ DELTAC123.bind(undefined, 1),\n    /* 0x74 */ DELTAC123.bind(undefined, 2),\n    /* 0x75 */ DELTAC123.bind(undefined, 3),\n    /* 0x76 */ SROUND,\n    /* 0x77 */ S45ROUND,\n    /* 0x78 */ undefined,   // TODO JROT[]\n    /* 0x79 */ undefined,   // TODO JROF[]\n    /* 0x7A */ ROFF,\n    /* 0x7B */ undefined,\n    /* 0x7C */ RUTG,\n    /* 0x7D */ RDTG,\n    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n    /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n    /* 0x80 */ undefined,   // TODO FLIPPT\n    /* 0x81 */ undefined,   // TODO FLIPRGON\n    /* 0x82 */ undefined,   // TODO FLIPRGOFF\n    /* 0x83 */ undefined,\n    /* 0x84 */ undefined,\n    /* 0x85 */ SCANCTRL,\n    /* 0x86 */ SDPVTL.bind(undefined, 0),\n    /* 0x87 */ SDPVTL.bind(undefined, 1),\n    /* 0x88 */ GETINFO,\n    /* 0x89 */ undefined,   // TODO IDEF\n    /* 0x8A */ ROLL,\n    /* 0x8B */ MAX,\n    /* 0x8C */ MIN,\n    /* 0x8D */ SCANTYPE,\n    /* 0x8E */ INSTCTRL,\n    /* 0x8F */ undefined,\n    /* 0x90 */ undefined,\n    /* 0x91 */ undefined,\n    /* 0x92 */ undefined,\n    /* 0x93 */ undefined,\n    /* 0x94 */ undefined,\n    /* 0x95 */ undefined,\n    /* 0x96 */ undefined,\n    /* 0x97 */ undefined,\n    /* 0x98 */ undefined,\n    /* 0x99 */ undefined,\n    /* 0x9A */ undefined,\n    /* 0x9B */ undefined,\n    /* 0x9C */ undefined,\n    /* 0x9D */ undefined,\n    /* 0x9E */ undefined,\n    /* 0x9F */ undefined,\n    /* 0xA0 */ undefined,\n    /* 0xA1 */ undefined,\n    /* 0xA2 */ undefined,\n    /* 0xA3 */ undefined,\n    /* 0xA4 */ undefined,\n    /* 0xA5 */ undefined,\n    /* 0xA6 */ undefined,\n    /* 0xA7 */ undefined,\n    /* 0xA8 */ undefined,\n    /* 0xA9 */ undefined,\n    /* 0xAA */ undefined,\n    /* 0xAB */ undefined,\n    /* 0xAC */ undefined,\n    /* 0xAD */ undefined,\n    /* 0xAE */ undefined,\n    /* 0xAF */ undefined,\n    /* 0xB0 */ PUSHB.bind(undefined, 1),\n    /* 0xB1 */ PUSHB.bind(undefined, 2),\n    /* 0xB2 */ PUSHB.bind(undefined, 3),\n    /* 0xB3 */ PUSHB.bind(undefined, 4),\n    /* 0xB4 */ PUSHB.bind(undefined, 5),\n    /* 0xB5 */ PUSHB.bind(undefined, 6),\n    /* 0xB6 */ PUSHB.bind(undefined, 7),\n    /* 0xB7 */ PUSHB.bind(undefined, 8),\n    /* 0xB8 */ PUSHW.bind(undefined, 1),\n    /* 0xB9 */ PUSHW.bind(undefined, 2),\n    /* 0xBA */ PUSHW.bind(undefined, 3),\n    /* 0xBB */ PUSHW.bind(undefined, 4),\n    /* 0xBC */ PUSHW.bind(undefined, 5),\n    /* 0xBD */ PUSHW.bind(undefined, 6),\n    /* 0xBE */ PUSHW.bind(undefined, 7),\n    /* 0xBF */ PUSHW.bind(undefined, 8),\n    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n];\n\n/*****************************\n  Mathematical Considerations\n******************************\n\nfv ... refers to freedom vector\npv ... refers to projection vector\nrp ... refers to reference point\np  ... refers to to point being operated on\nd  ... refers to distance\n\nSETRELATIVE:\n============\n\ncase freedom vector == x-axis:\n------------------------------\n\n                        (pv)\n                     .-'\n              rpd .-'\n               .-*\n          d .-'90°'\n         .-'       '\n      .-'           '\n   *-'               ' b\n  rp                  '\n                       '\n                        '\n            p *----------*-------------- (fv)\n                          pm\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b\n\n   y - rpdy = pvns * (x- rpdx)\n\n   y = p.y\n\n   x = rpdx + ( p.y - rpdy ) / pvns\n\n\ncase freedom vector == y-axis:\n------------------------------\n\n    * pm\n    |\\\n    | \\\n    |  \\\n    |   \\\n    |    \\\n    |     \\\n    |      \\\n    |       \\\n    |        \\\n    |         \\ b\n    |          \\\n    |           \\\n    |            \\    .-' (pv)\n    |         90° \\.-'\n    |           .-'* rpd\n    |        .-'\n    *     *-'  d\n    p     rp\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b:\n           pvns ... normal slope to pv\n\n   y - rpdy = pvns * (x - rpdx)\n\n   x = p.x\n\n   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\ngeneric case:\n-------------\n\n\n                              .'(fv)\n                            .'\n                          .* pm\n                        .' !\n                      .'    .\n                    .'      !\n                  .'         . b\n                .'           !\n               *              .\n              p               !\n                         90°   .    ... (pv)\n                           ...-*-'''\n                  ...---'''    rpd\n         ...---'''   d\n   *--'''\n  rp\n\n    rpdx = rpx + d * pv.x\n    rpdy = rpy + d * pv.y\n\n equation of line b:\n    pvns... normal slope to pv\n\n    y - rpdy = pvns * (x - rpdx)\n\n equation of freedom vector line:\n    fvs ... slope of freedom vector (=fy/fx)\n\n    y - py = fvs * (x - px)\n\n\n  on pm both equations are true for same x/y\n\n    y - rpdy = pvns * (x - rpdx)\n\n    y - py = fvs * (x - px)\n\n  form to y and set equal:\n\n    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n  expand:\n\n    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n  switch:\n\n    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n  solve for x:\n\n    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n          fvs * px - pvns * rpdx + rpdy - py\n    x =  -----------------------------------\n                 fvs - pvns\n\n  and:\n\n    y = fvs * (x - px) + py\n\n\n\nINTERPOLATE:\n============\n\nExamples of point interpolation.\n\nThe weight of the movement of the reference point gets bigger\nthe further the other reference point is away, thus the safest\noption (that is avoiding 0/0 divisions) is to weight the\noriginal distance of the other point by the sum of both distances.\n\nIf the sum of both distances is 0, then move the point by the\narithmetic average of the movement of both reference points.\n\n\n\n\n           (+6)\n    rp1o *---->*rp1\n         .     .                          (+12)\n         .     .                  rp2o *---------->* rp2\n         .     .                       .           .\n         .     .                       .           .\n         .    10          20           .           .\n         |.........|...................|           .\n               .   .                               .\n               .   . (+8)                          .\n                po *------>*p                      .\n               .           .                       .\n               .    12     .          24           .\n               |...........|.......................|\n                                  36\n\n\n-------\n\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .                      (-10)\n         .         .              rp2 *<---------* rpo2\n         .         .                   .         .\n         .         .                   .         .\n         .    10   .          30       .         .\n         |.........|.............................|\n                   .                   .\n                   . (+5)              .\n                po *--->* p            .\n                   .    .              .\n                   .    .   20         .\n                   |....|..............|\n                     5        15\n\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .\n    rp2o *-------->*rp2\n\n\n                               (+10)\n                          po *-------->* p\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .(+30)\n    rp2o *---------------------------->*rp2\n\n\n                                        (+25)\n                          po *----------------------->* p\n\n\n\nvim: set ts=4 sw=4 expandtab:\n*****/\n\n/**\n * Converts a string into a list of tokens.\n */\n\n/**\n * Create a new token\n * @param {string} char a single char\n */\nfunction Token(char) {\n    this.char = char;\n    this.state = {};\n    this.activeState = null;\n}\n\n/**\n * Create a new context range\n * @param {number} startIndex range start index\n * @param {number} endOffset range end index offset\n * @param {string} contextName owner context name\n */\nfunction ContextRange(startIndex, endOffset, contextName) {\n    this.contextName = contextName;\n    this.startIndex = startIndex;\n    this.endOffset = endOffset;\n}\n\n/**\n * Check context start and end\n * @param {string} contextName a unique context name\n * @param {function} checkStart a predicate function the indicates a context's start\n * @param {function} checkEnd a predicate function the indicates a context's end\n */\nfunction ContextChecker(contextName, checkStart, checkEnd) {\n    this.contextName = contextName;\n    this.openRange = null;\n    this.ranges = [];\n    this.checkStart = checkStart;\n    this.checkEnd = checkEnd;\n}\n\n/**\n * @typedef ContextParams\n * @type Object\n * @property {array} context context items\n * @property {number} currentIndex current item index\n */\n\n/**\n * Create a context params\n * @param {array} context a list of items\n * @param {number} currentIndex current item index\n */\nfunction ContextParams(context, currentIndex) {\n    this.context = context;\n    this.index = currentIndex;\n    this.length = context.length;\n    this.current = context[currentIndex];\n    this.backtrack = context.slice(0, currentIndex);\n    this.lookahead = context.slice(currentIndex + 1);\n}\n\n/**\n * Create an event instance\n * @param {string} eventId event unique id\n */\nfunction Event(eventId) {\n    this.eventId = eventId;\n    this.subscribers = [];\n}\n\n/**\n * Initialize a core events and auto subscribe required event handlers\n * @param {any} events an object that enlists core events handlers\n */\nfunction initializeCoreEvents(events) {\n    var this$1 = this;\n\n    var coreEvents = [\n        'start', 'end', 'next', 'newToken', 'contextStart',\n        'contextEnd', 'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'\n    ];\n\n    coreEvents.forEach(function (eventId) {\n        Object.defineProperty(this$1.events, eventId, {\n            value: new Event(eventId)\n        });\n    });\n\n    if (!!events) {\n        coreEvents.forEach(function (eventId) {\n            var event = events[eventId];\n            if (typeof event === 'function') {\n                this$1.events[eventId].subscribe(event);\n            }\n        });\n    }\n    var requiresContextUpdate = [\n        'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD'\n    ];\n    requiresContextUpdate.forEach(function (eventId) {\n        this$1.events[eventId].subscribe(\n            this$1.updateContextsRanges\n        );\n    });\n}\n\n/**\n * Converts a string into a list of tokens\n * @param {any} events tokenizer core events\n */\nfunction Tokenizer(events) {\n    this.tokens = [];\n    this.registeredContexts = {};\n    this.contextCheckers = [];\n    this.events = {};\n    this.registeredModifiers = [];\n\n    initializeCoreEvents.call(this, events);\n}\n\n/**\n * Sets the state of a token, usually called by a state modifier.\n * @param {string} key state item key\n * @param {any} value state item value\n */\nToken.prototype.setState = function(key, value) {\n    this.state[key] = value;\n    this.activeState = { key: key, value: this.state[key] };\n    return this.activeState;\n};\n\nToken.prototype.getState = function (stateId) {\n    return this.state[stateId] || null;\n};\n\n/**\n * Checks if an index exists in the tokens list.\n * @param {number} index token index\n */\nTokenizer.prototype.inboundIndex = function(index) {\n    return index >= 0 && index < this.tokens.length;\n};\n\n/**\n * Compose and apply a list of operations (replace, update, delete)\n * @param {array} RUDs replace, update and delete operations\n * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)\n */\nTokenizer.prototype.composeRUD = function (RUDs) {\n    var this$1 = this;\n\n    var silent = true;\n    var state = RUDs.map(function (RUD) { return (\n        this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent))\n    ); });\n    var hasFAILObject = function (obj) { return (\n        typeof obj === 'object' &&\n        obj.hasOwnProperty('FAIL')\n    ); };\n    if (state.every(hasFAILObject)) {\n        return {\n            FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n            report: state.filter(hasFAILObject)\n        };\n    }\n    this.dispatch('composeRUD', [state.filter(function (op) { return !hasFAILObject(op); })]);\n};\n\n/**\n * Replace a range of tokens with a list of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {token} tokens a list of tokens to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {\n    offset = offset !== null ? offset : this.tokens.length;\n    var isTokenType = tokens.every(function (token) { return token instanceof Token; });\n    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n        var replaced = this.tokens.splice.apply(\n            this.tokens, [startIndex, offset].concat(tokens)\n        );\n        if (!silent) { this.dispatch('replaceToken', [startIndex, offset, tokens]); }\n        return [replaced, tokens];\n    } else {\n        return { FAIL: 'replaceRange: invalid tokens or startIndex.' };\n    }\n};\n\n/**\n * Replace a token with another token\n * @param {number} index token index\n * @param {token} token a token to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceToken = function (index, token, silent) {\n    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n        var replaced = this.tokens.splice(index, 1, token);\n        if (!silent) { this.dispatch('replaceToken', [index, token]); }\n        return [replaced[0], token];\n    } else {\n        return { FAIL: 'replaceToken: invalid token or index.' };\n    }\n};\n\n/**\n * Removes a range of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n    offset = !isNaN(offset) ? offset : this.tokens.length;\n    var tokens = this.tokens.splice(startIndex, offset);\n    if (!silent) { this.dispatch('removeRange', [tokens, startIndex, offset]); }\n    return tokens;\n};\n\n/**\n * Remove a token at a certain index\n * @param {number} index token index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeToken = function(index, silent) {\n    if (!isNaN(index) && this.inboundIndex(index)) {\n        var token = this.tokens.splice(index, 1);\n        if (!silent) { this.dispatch('removeToken', [token, index]); }\n        return token;\n    } else {\n        return { FAIL: 'removeToken: invalid token index.' };\n    }\n};\n\n/**\n * Insert a list of tokens at a certain index\n * @param {array} tokens a list of tokens to insert\n * @param {number} index insert the list of tokens at index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.insertToken = function (tokens, index, silent) {\n    var tokenType = tokens.every(\n        function (token) { return token instanceof Token; }\n    );\n    if (tokenType) {\n        this.tokens.splice.apply(\n            this.tokens, [index, 0].concat(tokens)\n        );\n        if (!silent) { this.dispatch('insertToken', [tokens, index]); }\n        return tokens;\n    } else {\n        return { FAIL: 'insertToken: invalid token(s).' };\n    }\n};\n\n/**\n * A state modifier that is called on 'newToken' event\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a function to update token state\n */\nTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.events.newToken.subscribe(function(token, contextParams) {\n        var conditionParams = [token, contextParams];\n        var canApplyModifier = (\n            condition === null ||\n            condition.apply(this, conditionParams) === true\n        );\n        var modifierParams = [token, contextParams];\n        if (canApplyModifier) {\n            var newStateValue = modifier.apply(this, modifierParams);\n            token.setState(modifierId, newStateValue);\n        }\n    });\n    this.registeredModifiers.push(modifierId);\n};\n\n/**\n * Subscribe a handler to an event\n * @param {function} eventHandler an event handler function\n */\nEvent.prototype.subscribe = function (eventHandler) {\n    if (typeof eventHandler === 'function') {\n        return ((this.subscribers.push(eventHandler)) - 1);\n    } else {\n        return { FAIL: (\"invalid '\" + (this.eventId) + \"' event handler\")};\n    }\n};\n\n/**\n * Unsubscribe an event handler\n * @param {string} subsId subscription id\n */\nEvent.prototype.unsubscribe = function (subsId) {\n    this.subscribers.splice(subsId, 1);\n};\n\n/**\n * Sets context params current value index\n * @param {number} index context params current value index\n */\nContextParams.prototype.setCurrentIndex = function(index) {\n    this.index = index;\n    this.current = this.context[index];\n    this.backtrack = this.context.slice(0, index);\n    this.lookahead = this.context.slice(index + 1);\n};\n\n/**\n * Get an item at an offset from the current value\n * example (current value is 3):\n *  1    2   [3]   4    5   |   items values\n * -2   -1    0    1    2   |   offset values\n * @param {number} offset an offset from current value index\n */\nContextParams.prototype.get = function (offset) {\n    switch (true) {\n        case (offset === 0):\n            return this.current;\n        case (offset < 0 && Math.abs(offset) <= this.backtrack.length):\n            return this.backtrack.slice(offset)[0];\n        case (offset > 0 && offset <= this.lookahead.length):\n            return this.lookahead[offset - 1];\n        default:\n            return null;\n    }\n};\n\n/**\n * Converts a context range into a string value\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.rangeToText = function (range) {\n    if (range instanceof ContextRange) {\n        return (\n            this.getRangeTokens(range)\n                .map(function (token) { return token.char; }).join('')\n        );\n    }\n};\n\n/**\n * Converts all tokens into a string\n */\nTokenizer.prototype.getText = function () {\n    return this.tokens.map(function (token) { return token.char; }).join('');\n};\n\n/**\n * Get a context by name\n * @param {string} contextName context name to get\n */\nTokenizer.prototype.getContext = function (contextName) {\n    var context = this.registeredContexts[contextName];\n    return !!context ? context : null;\n};\n\n/**\n * Subscribes a new event handler to an event\n * @param {string} eventName event name to subscribe to\n * @param {function} eventHandler a function to be invoked on event\n */\nTokenizer.prototype.on = function(eventName, eventHandler) {\n    var event = this.events[eventName];\n    if (!!event) {\n        return event.subscribe(eventHandler);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Dispatches an event\n * @param {string} eventName event name\n * @param {any} args event handler arguments\n */\nTokenizer.prototype.dispatch = function(eventName, args) {\n    var this$1 = this;\n\n    var event = this.events[eventName];\n    if (event instanceof Event) {\n        event.subscribers.forEach(function (subscriber) {\n            subscriber.apply(this$1, args || []);\n        });\n    }\n};\n\n/**\n * Register a new context checker\n * @param {string} contextName a unique context name\n * @param {function} contextStartCheck a predicate function that returns true on context start\n * @param {function} contextEndCheck  a predicate function that returns true on context end\n * TODO: call tokenize on registration to update context ranges with the new context.\n */\nTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n    if (!!this.getContext(contextName)) { return {\n        FAIL:\n        (\"context name '\" + contextName + \"' is already registered.\")\n    }; }\n    if (typeof contextStartCheck !== 'function') { return {\n        FAIL:\n        \"missing context start check.\"\n    }; }\n    if (typeof contextEndCheck !== 'function') { return {\n        FAIL:\n        \"missing context end check.\"\n    }; }\n    var contextCheckers = new ContextChecker(\n        contextName, contextStartCheck, contextEndCheck\n    );\n    this.registeredContexts[contextName] = contextCheckers;\n    this.contextCheckers.push(contextCheckers);\n    return contextCheckers;\n};\n\n/**\n * Gets a context range tokens\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.getRangeTokens = function(range) {\n    var endIndex = range.startIndex + range.endOffset;\n    return [].concat(\n        this.tokens\n            .slice(range.startIndex, endIndex)\n    );\n};\n\n/**\n * Gets the ranges of a context\n * @param {string} contextName context name\n */\nTokenizer.prototype.getContextRanges = function(contextName) {\n    var context = this.getContext(contextName);\n    if (!!context) {\n        return context.ranges;\n    } else {\n        return { FAIL: (\"context checker '\" + contextName + \"' is not registered.\") };\n    }\n};\n\n/**\n * Resets context ranges to run context update\n */\nTokenizer.prototype.resetContextsRanges = function () {\n    var registeredContexts = this.registeredContexts;\n    for (var contextName in registeredContexts) {\n        if (registeredContexts.hasOwnProperty(contextName)) {\n            var context = registeredContexts[contextName];\n            context.ranges = [];\n        }\n    }\n};\n\n/**\n * Updates context ranges\n */\nTokenizer.prototype.updateContextsRanges = function () {\n    this.resetContextsRanges();\n    var chars = this.tokens.map(function (token) { return token.char; });\n    for (var i = 0; i < chars.length; i++) {\n        var contextParams = new ContextParams(chars, i);\n        this.runContextCheck(contextParams);\n    }\n    this.dispatch('updateContextsRanges', [this.registeredContexts]);\n};\n\n/**\n * Sets the end offset of an open range\n * @param {number} offset range end offset\n * @param {string} contextName context name\n */\nTokenizer.prototype.setEndOffset = function (offset, contextName) {\n    var startIndex = this.getContext(contextName).openRange.startIndex;\n    var range = new ContextRange(startIndex, offset, contextName);\n    var ranges = this.getContext(contextName).ranges;\n    range.rangeId = contextName + \".\" + (ranges.length);\n    ranges.push(range);\n    this.getContext(contextName).openRange = null;\n    return range;\n};\n\n/**\n * Runs a context check on the current context\n * @param {contextParams} contextParams current context params\n */\nTokenizer.prototype.runContextCheck = function(contextParams) {\n    var this$1 = this;\n\n    var index = contextParams.index;\n    this.contextCheckers.forEach(function (contextChecker) {\n        var contextName = contextChecker.contextName;\n        var openRange = this$1.getContext(contextName).openRange;\n        if (!openRange && contextChecker.checkStart(contextParams)) {\n            openRange = new ContextRange(index, null, contextName);\n            this$1.getContext(contextName).openRange = openRange;\n            this$1.dispatch('contextStart', [contextName, index]);\n        }\n        if (!!openRange && contextChecker.checkEnd(contextParams)) {\n            var offset = (index - openRange.startIndex) + 1;\n            var range = this$1.setEndOffset(offset, contextName);\n            this$1.dispatch('contextEnd', [contextName, range]);\n        }\n    });\n};\n\n/**\n * Converts a text into a list of tokens\n * @param {string} text a text to tokenize\n */\nTokenizer.prototype.tokenize = function (text) {\n    this.tokens = [];\n    this.resetContextsRanges();\n    var chars = Array.from(text);\n    this.dispatch('start');\n    for (var i = 0; i < chars.length; i++) {\n        var char = chars[i];\n        var contextParams = new ContextParams(chars, i);\n        this.dispatch('next', [contextParams]);\n        this.runContextCheck(contextParams);\n        var token = new Token(char);\n        this.tokens.push(token);\n        this.dispatch('newToken', [token, contextParams]);\n    }\n    this.dispatch('end', [this.tokens]);\n    return this.tokens;\n};\n\n// ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮\n// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊\n// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯\n// jscs:disable maximumLineLength\n/**\n * Check if a char is Arabic\n * @param {string} c a single char\n */\nfunction isArabicChar(c) {\n    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c);\n}\n\n/**\n * Check if a char is an isolated arabic char\n * @param {string} c a single char\n */\nfunction isIsolatedArabicChar(char) {\n    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n}\n\n/**\n * Check if a char is an Arabic Tashkeel char\n * @param {string} c a single char\n */\nfunction isTashkeelArabicChar(char) {\n    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n}\n\n/**\n * Check if a char is Latin\n * @param {string} c a single char\n */\nfunction isLatinChar(c) {\n    return /[A-z]/.test(c);\n}\n\n/**\n * Check if a char is whitespace char\n * @param {string} c a single char\n */\nfunction isWhiteSpace(c) {\n    return /\\s/.test(c);\n}\n\n/**\n * Query a feature by some of it's properties to lookup a glyph substitution.\n */\n\n/**\n * Create feature query instance\n * @param {Font} font opentype font instance\n */\nfunction FeatureQuery(font) {\n    this.font = font;\n    this.features = {};\n}\n\n/**\n * @typedef SubstitutionAction\n * @type Object\n * @property {number} id substitution type\n * @property {string} tag feature tag\n * @property {any} substitution substitution value(s)\n */\n\n/**\n * Create a substitution action instance\n * @param {SubstitutionAction} action\n */\nfunction SubstitutionAction(action) {\n    this.id = action.id;\n    this.tag = action.tag;\n    this.substitution = action.substitution;\n}\n\n/**\n * Lookup a coverage table\n * @param {number} glyphIndex glyph index\n * @param {CoverageTable} coverage coverage table\n */\nfunction lookupCoverage(glyphIndex, coverage) {\n    if (!glyphIndex) { return -1; }\n    switch (coverage.format) {\n        case 1:\n            return coverage.glyphs.indexOf(glyphIndex);\n\n        case 2:\n            var ranges = coverage.ranges;\n            for (var i = 0; i < ranges.length; i++) {\n                var range = ranges[i];\n                if (glyphIndex >= range.start && glyphIndex <= range.end) {\n                    var offset = glyphIndex - range.start;\n                    return range.index + offset;\n                }\n            }\n            break;\n        default:\n            return -1; // not found\n    }\n    return -1;\n}\n\n/**\n * Handle a single substitution - format 1\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction singleSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) { return null; }\n    return glyphIndex + subtable.deltaGlyphId;\n}\n\n/**\n * Handle a single substitution - format 2\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction singleSubstitutionFormat2(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) { return null; }\n    return subtable.substitute[substituteIndex];\n}\n\n/**\n * Lookup a list of coverage tables\n * @param {any} coverageList a list of coverage tables\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction lookupCoverageList(coverageList, contextParams) {\n    var lookupList = [];\n    for (var i = 0; i < coverageList.length; i++) {\n        var coverage = coverageList[i];\n        var glyphIndex = contextParams.current;\n        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n        var lookupIndex = lookupCoverage(glyphIndex, coverage);\n        if (lookupIndex !== -1) {\n            lookupList.push(lookupIndex);\n        }\n    }\n    if (lookupList.length !== coverageList.length) { return -1; }\n    return lookupList;\n}\n\n/**\n * Handle chaining context substitution - format 3\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction chainingSubstitutionFormat3(contextParams, subtable) {\n    var lookupsCount = (\n        subtable.inputCoverage.length +\n        subtable.lookaheadCoverage.length +\n        subtable.backtrackCoverage.length\n    );\n    if (contextParams.context.length < lookupsCount) { return []; }\n    // INPUT LOOKUP //\n    var inputLookups = lookupCoverageList(\n        subtable.inputCoverage, contextParams\n    );\n    if (inputLookups === -1) { return []; }\n    // LOOKAHEAD LOOKUP //\n    var lookaheadOffset = subtable.inputCoverage.length - 1;\n    if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) { return []; }\n    var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n    while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {\n        lookaheadContext.shift();\n    }\n    var lookaheadParams = new ContextParams(lookaheadContext, 0);\n    var lookaheadLookups = lookupCoverageList(\n        subtable.lookaheadCoverage, lookaheadParams\n    );\n    // BACKTRACK LOOKUP //\n    var backtrackContext = [].concat(contextParams.backtrack);\n    backtrackContext.reverse();\n    while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {\n        backtrackContext.shift();\n    }\n    if (backtrackContext.length < subtable.backtrackCoverage.length) { return []; }\n    var backtrackParams = new ContextParams(backtrackContext, 0);\n    var backtrackLookups = lookupCoverageList(\n        subtable.backtrackCoverage, backtrackParams\n    );\n    var contextRulesMatch = (\n        inputLookups.length === subtable.inputCoverage.length &&\n        lookaheadLookups.length === subtable.lookaheadCoverage.length &&\n        backtrackLookups.length === subtable.backtrackCoverage.length\n    );\n    var substitutions = [];\n    if (contextRulesMatch) {\n        for (var i = 0; i < subtable.lookupRecords.length; i++) {\n            var lookupRecord = subtable.lookupRecords[i];\n            var lookupListIndex = lookupRecord.lookupListIndex;\n            var lookupTable = this.getLookupByIndex(lookupListIndex);\n            for (var s = 0; s < lookupTable.subtables.length; s++) {\n                var subtable$1 = lookupTable.subtables[s];\n                var lookup = this.getLookupMethod(lookupTable, subtable$1);\n                var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);\n                if (substitutionType === '12') {\n                    for (var n = 0; n < inputLookups.length; n++) {\n                        var glyphIndex = contextParams.get(n);\n                        var substitution = lookup(glyphIndex);\n                        if (substitution) { substitutions.push(substitution); }\n                    }\n                }\n            }\n        }\n    }\n    return substitutions;\n}\n\n/**\n * Handle ligature substitution - format 1\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction ligatureSubstitutionFormat1(contextParams, subtable) {\n    // COVERAGE LOOKUP //\n    var glyphIndex = contextParams.current;\n    var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (ligSetIndex === -1) { return null; }\n    // COMPONENTS LOOKUP\n    // (!) note, components are ordered in the written direction.\n    var ligature;\n    var ligatureSet = subtable.ligatureSets[ligSetIndex];\n    for (var s = 0; s < ligatureSet.length; s++) {\n        ligature = ligatureSet[s];\n        for (var l = 0; l < ligature.components.length; l++) {\n            var lookaheadItem = contextParams.lookahead[l];\n            var component = ligature.components[l];\n            if (lookaheadItem !== component) { break; }\n            if (l === ligature.components.length - 1) { return ligature; }\n        }\n    }\n    return null;\n}\n\n/**\n * Handle decomposition substitution - format 1\n * @param {number} glyphIndex glyph index\n * @param {any} subtable subtable\n */\nfunction decompositionSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) { return null; }\n    return subtable.sequences[substituteIndex];\n}\n\n/**\n * Get default script features indexes\n */\nFeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function () {\n    var scripts = this.font.tables.gsub.scripts;\n    for (var s = 0; s < scripts.length; s++) {\n        var script = scripts[s];\n        if (script.tag === 'DFLT') { return (\n            script.script.defaultLangSys.featureIndexes\n        ); }\n    }\n    return [];\n};\n\n/**\n * Get feature indexes of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n    var tables = this.font.tables;\n    if (!tables.gsub) { return []; }\n    if (!scriptTag) { return this.getDefaultScriptFeaturesIndexes(); }\n    var scripts = this.font.tables.gsub.scripts;\n    for (var i = 0; i < scripts.length; i++) {\n        var script = scripts[i];\n        if (script.tag === scriptTag && script.script.defaultLangSys) {\n            return script.script.defaultLangSys.featureIndexes;\n        } else {\n            var langSysRecords = script.langSysRecords;\n            if (!!langSysRecords) {\n                for (var j = 0; j < langSysRecords.length; j++) {\n                    var langSysRecord = langSysRecords[j];\n                    if (langSysRecord.tag === scriptTag) {\n                        var langSys = langSysRecord.langSys;\n                        return langSys.featureIndexes;\n                    }\n                }\n            }\n        }\n    }\n    return this.getDefaultScriptFeaturesIndexes();\n};\n\n/**\n * Map a feature tag to a gsub feature\n * @param {any} features gsub features\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {\n    var tags = {};\n    for (var i = 0; i < features.length; i++) {\n        var tag = features[i].tag;\n        var feature = features[i].feature;\n        tags[tag] = feature;\n    }\n    this.features[scriptTag].tags = tags;\n};\n\n/**\n * Get features of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeatures = function (scriptTag) {\n    var features = this.features[scriptTag];\n    if (this.features.hasOwnProperty(scriptTag)) { return features; }\n    var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n    if (!featuresIndexes) { return null; }\n    var gsub = this.font.tables.gsub;\n    features = featuresIndexes.map(function (index) { return gsub.features[index]; });\n    this.features[scriptTag] = features;\n    this.mapTagsToFeatures(features, scriptTag);\n    return features;\n};\n\n/**\n * Get substitution type\n * @param {any} lookupTable lookup table\n * @param {any} subtable subtable\n */\nFeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {\n    var lookupType = lookupTable.lookupType.toString();\n    var substFormat = subtable.substFormat.toString();\n    return lookupType + substFormat;\n};\n\n/**\n * Get lookup method\n * @param {any} lookupTable lookup table\n * @param {any} subtable subtable\n */\nFeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {\n    var this$1 = this;\n\n    var substitutionType = this.getSubstitutionType(lookupTable, subtable);\n    switch (substitutionType) {\n        case '11':\n            return function (glyphIndex) { return singleSubstitutionFormat1.apply(\n                this$1, [glyphIndex, subtable]\n            ); };\n        case '12':\n            return function (glyphIndex) { return singleSubstitutionFormat2.apply(\n                this$1, [glyphIndex, subtable]\n            ); };\n        case '63':\n            return function (contextParams) { return chainingSubstitutionFormat3.apply(\n                this$1, [contextParams, subtable]\n            ); };\n        case '41':\n            return function (contextParams) { return ligatureSubstitutionFormat1.apply(\n                this$1, [contextParams, subtable]\n            ); };\n        case '21':\n            return function (glyphIndex) { return decompositionSubstitutionFormat1.apply(\n                this$1, [glyphIndex, subtable]\n            ); };\n        default:\n            throw new Error(\n                \"lookupType: \" + (lookupTable.lookupType) + \" - \" +\n                \"substFormat: \" + (subtable.substFormat) + \" \" +\n                \"is not yet supported\"\n            );\n    }\n};\n\n/**\n * [ LOOKUP TYPES ]\n * -------------------------------\n * Single                        1;\n * Multiple                      2;\n * Alternate                     3;\n * Ligature                      4;\n * Context                       5;\n * ChainingContext               6;\n * ExtensionSubstitution         7;\n * ReverseChainingContext        8;\n * -------------------------------\n *\n */\n\n/**\n * @typedef FQuery\n * @type Object\n * @param {string} tag feature tag\n * @param {string} script feature script\n * @param {ContextParams} contextParams context params\n */\n\n/**\n * Lookup a feature using a query parameters\n * @param {FQuery} query feature query\n */\nFeatureQuery.prototype.lookupFeature = function (query) {\n    var contextParams = query.contextParams;\n    var currentIndex = contextParams.index;\n    var feature = this.getFeature({\n        tag: query.tag, script: query.script\n    });\n    if (!feature) { return new Error(\n        \"font '\" + (this.font.names.fullName.en) + \"' \" +\n        \"doesn't support feature '\" + (query.tag) + \"' \" +\n        \"for script '\" + (query.script) + \"'.\"\n    ); }\n    var lookups = this.getFeatureLookups(feature);\n    var substitutions = [].concat(contextParams.context);\n    for (var l = 0; l < lookups.length; l++) {\n        var lookupTable = lookups[l];\n        var subtables = this.getLookupSubtables(lookupTable);\n        for (var s = 0; s < subtables.length; s++) {\n            var subtable = subtables[s];\n            var substType = this.getSubstitutionType(lookupTable, subtable);\n            var lookup = this.getLookupMethod(lookupTable, subtable);\n            var substitution = (void 0);\n            switch (substType) {\n                case '11':\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 11, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '12':\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 12, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '63':\n                    substitution = lookup(contextParams);\n                    if (Array.isArray(substitution) && substitution.length) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 63, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '41':\n                    substitution = lookup(contextParams);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 41, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '21':\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 21, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n            }\n            contextParams = new ContextParams(substitutions, currentIndex);\n            if (Array.isArray(substitution) && !substitution.length) { continue; }\n            substitution = null;\n        }\n    }\n    return substitutions.length ? substitutions : null;\n};\n\n/**\n * Checks if a font supports a specific features\n * @param {FQuery} query feature query object\n */\nFeatureQuery.prototype.supports = function (query) {\n    if (!query.script) { return false; }\n    this.getScriptFeatures(query.script);\n    var supportedScript = this.features.hasOwnProperty(query.script);\n    if (!query.tag) { return supportedScript; }\n    var supportedFeature = (\n        this.features[query.script].some(function (feature) { return feature.tag === query.tag; })\n    );\n    return supportedScript && supportedFeature;\n};\n\n/**\n * Get lookup table subtables\n * @param {any} lookupTable lookup table\n */\nFeatureQuery.prototype.getLookupSubtables = function (lookupTable) {\n    return lookupTable.subtables || null;\n};\n\n/**\n * Get lookup table by index\n * @param {number} index lookup table index\n */\nFeatureQuery.prototype.getLookupByIndex = function (index) {\n    var lookups = this.font.tables.gsub.lookups;\n    return lookups[index] || null;\n};\n\n/**\n * Get lookup tables for a feature\n * @param {string} feature\n */\nFeatureQuery.prototype.getFeatureLookups = function (feature) {\n    // TODO: memoize\n    return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n};\n\n/**\n * Query a feature by it's properties\n * @param {any} query an object that describes the properties of a query\n */\nFeatureQuery.prototype.getFeature = function getFeature(query) {\n    if (!this.font) { return { FAIL: \"No font was found\"}; }\n    if (!this.features.hasOwnProperty(query.script)) {\n        this.getScriptFeatures(query.script);\n    }\n    var scriptFeatures = this.features[query.script];\n    if (!scriptFeatures) { return (\n        { FAIL: (\"No feature for script \" + (query.script))}\n    ); }\n    if (!scriptFeatures.tags[query.tag]) { return null; }\n    return this.features[query.script].tags[query.tag];\n};\n\n/**\n * Arabic word context checkers\n */\n\nfunction arabicWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (\n        // ? arabic first char\n        (prevChar === null && isArabicChar(char)) ||\n        // ? arabic char preceded with a non arabic char\n        (!isArabicChar(prevChar) && isArabicChar(char))\n    );\n}\n\nfunction arabicWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return (\n        // ? last arabic char\n        (nextChar === null) ||\n        // ? next char is not arabic\n        (!isArabicChar(nextChar))\n    );\n}\n\nvar arabicWordCheck = {\n    startCheck: arabicWordStartCheck,\n    endCheck: arabicWordEndCheck\n};\n\n/**\n * Arabic sentence context checkers\n */\n\nfunction arabicSentenceStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (\n        // ? an arabic char preceded with a non arabic char\n        (isArabicChar(char) || isTashkeelArabicChar(char)) &&\n        !isArabicChar(prevChar)\n    );\n}\n\nfunction arabicSentenceEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    switch (true) {\n        case nextChar === null:\n            return true;\n        case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):\n            var nextIsWhitespace = isWhiteSpace(nextChar);\n            if (!nextIsWhitespace) { return true; }\n            if (nextIsWhitespace) {\n                var arabicCharAhead = false;\n                arabicCharAhead = (\n                    contextParams.lookahead.some(\n                        function (c) { return isArabicChar(c) || isTashkeelArabicChar(c); }\n                    )\n                );\n                if (!arabicCharAhead) { return true; }\n            }\n            break;\n        default:\n            return false;\n    }\n}\n\nvar arabicSentenceCheck = {\n    startCheck: arabicSentenceStartCheck,\n    endCheck: arabicSentenceEndCheck\n};\n\n/**\n * Apply single substitution format 1\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction singleSubstitutionFormat1$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\n\n/**\n * Apply single substitution format 2\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction singleSubstitutionFormat2$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\n\n/**\n * Apply chaining context substitution format 3\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction chainingSubstitutionFormat3$1(action, tokens, index) {\n    action.substitution.forEach(function (subst, offset) {\n        var token = tokens[index + offset];\n        token.setState(action.tag, subst);\n    });\n}\n\n/**\n * Apply ligature substitution format 1\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction ligatureSubstitutionFormat1$1(action, tokens, index) {\n    var token = tokens[index];\n    token.setState(action.tag, action.substitution.ligGlyph);\n    var compsCount = action.substitution.components.length;\n    for (var i = 0; i < compsCount; i++) {\n        token = tokens[index + i + 1];\n        token.setState('deleted', true);\n    }\n}\n\n/**\n * Supported substitutions\n */\nvar SUBSTITUTIONS = {\n    11: singleSubstitutionFormat1$1,\n    12: singleSubstitutionFormat2$1,\n    63: chainingSubstitutionFormat3$1,\n    41: ligatureSubstitutionFormat1$1\n};\n\n/**\n * Apply substitutions to a list of tokens\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction applySubstitution(action, tokens, index) {\n    if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {\n        SUBSTITUTIONS[action.id](action, tokens, index);\n    }\n}\n\n/**\n * Apply Arabic presentation forms to a range of tokens\n */\n\n/**\n * Check if a char can be connected to it's preceding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectPrev(charContextParams) {\n    var backtrack = [].concat(charContextParams.backtrack);\n    for (var i = backtrack.length - 1; i >= 0; i--) {\n        var prevChar = backtrack[i];\n        var isolated = isIsolatedArabicChar(prevChar);\n        var tashkeel = isTashkeelArabicChar(prevChar);\n        if (!isolated && !tashkeel) { return true; }\n        if (isolated) { return false; }\n    }\n    return false;\n}\n\n/**\n * Check if a char can be connected to it's proceeding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectNext(charContextParams) {\n    if (isIsolatedArabicChar(charContextParams.current)) { return false; }\n    for (var i = 0; i < charContextParams.lookahead.length; i++) {\n        var nextChar = charContextParams.lookahead[i];\n        var tashkeel = isTashkeelArabicChar(nextChar);\n        if (!tashkeel) { return true; }\n    }\n    return false;\n}\n\n/**\n * Apply arabic presentation forms to a list of tokens\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicPresentationForms(range) {\n    var this$1 = this;\n\n    var script = 'arab';\n    var tags = this.featuresTags[script];\n    var tokens = this.tokenizer.getRangeTokens(range);\n    if (tokens.length === 1) { return; }\n    var contextParams = new ContextParams(\n        tokens.map(function (token) { return token.getState('glyphIndex'); }\n    ), 0);\n    var charContextParams = new ContextParams(\n        tokens.map(function (token) { return token.char; }\n    ), 0);\n    tokens.forEach(function (token, index) {\n        if (isTashkeelArabicChar(token.char)) { return; }\n        contextParams.setCurrentIndex(index);\n        charContextParams.setCurrentIndex(index);\n        var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)\n        if (willConnectPrev(charContextParams)) { CONNECT |= 1; }\n        if (willConnectNext(charContextParams)) { CONNECT |= 2; }\n        var tag;\n        switch (CONNECT) {\n            case 1: (tag = 'fina'); break;\n            case 2: (tag = 'init'); break;\n            case 3: (tag = 'medi'); break;\n        }\n        if (tags.indexOf(tag) === -1) { return; }\n        var substitutions = this$1.query.lookupFeature({\n            tag: tag, script: script, contextParams: contextParams\n        });\n        if (substitutions instanceof Error) { return console.info(substitutions.message); }\n        substitutions.forEach(function (action, index) {\n            if (action instanceof SubstitutionAction) {\n                applySubstitution(action, tokens, index);\n                contextParams.context[index] = action.substitution;\n            }\n        });\n    });\n}\n\n/**\n * Apply Arabic required ligatures feature to a range of tokens\n */\n\n/**\n * Update context params\n * @param {any} tokens a list of tokens\n * @param {number} index current item index\n */\nfunction getContextParams(tokens, index) {\n    var context = tokens.map(function (token) { return token.activeState.value; });\n    return new ContextParams(context, index || 0);\n}\n\n/**\n * Apply Arabic required ligatures to a context range\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicRequiredLigatures(range) {\n    var this$1 = this;\n\n    var script = 'arab';\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams(tokens);\n    contextParams.context.forEach(function (glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: 'rlig', script: script, contextParams: contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(\n                function (action) { return applySubstitution(action, tokens, index); }\n            );\n            contextParams = getContextParams(tokens);\n        }\n    });\n}\n\n/**\n * Latin word context checkers\n */\n\nfunction latinWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (\n        // ? latin first char\n        (prevChar === null && isLatinChar(char)) ||\n        // ? latin char preceded with a non latin char\n        (!isLatinChar(prevChar) && isLatinChar(char))\n    );\n}\n\nfunction latinWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return (\n        // ? last latin char\n        (nextChar === null) ||\n        // ? next char is not latin\n        (!isLatinChar(nextChar))\n    );\n}\n\nvar latinWordCheck = {\n    startCheck: latinWordStartCheck,\n    endCheck: latinWordEndCheck\n};\n\n/**\n * Apply Latin ligature feature to a range of tokens\n */\n\n/**\n * Update context params\n * @param {any} tokens a list of tokens\n * @param {number} index current item index\n */\nfunction getContextParams$1(tokens, index) {\n    var context = tokens.map(function (token) { return token.activeState.value; });\n    return new ContextParams(context, index || 0);\n}\n\n/**\n * Apply Arabic required ligatures to a context range\n * @param {ContextRange} range a range of tokens\n */\nfunction latinLigature(range) {\n    var this$1 = this;\n\n    var script = 'latn';\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams$1(tokens);\n    contextParams.context.forEach(function (glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: 'liga', script: script, contextParams: contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(\n                function (action) { return applySubstitution(action, tokens, index); }\n            );\n            contextParams = getContextParams$1(tokens);\n        }\n    });\n}\n\n/**\n * Infer bidirectional properties for a given text and apply\n * the corresponding layout rules.\n */\n\n/**\n * Create Bidi. features\n * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'\n */\nfunction Bidi(baseDir) {\n    this.baseDir = baseDir || 'ltr';\n    this.tokenizer = new Tokenizer();\n    this.featuresTags = {};\n}\n\n/**\n * Sets Bidi text\n * @param {string} text a text input\n */\nBidi.prototype.setText = function (text) {\n    this.text = text;\n};\n\n/**\n * Store essential context checks:\n * arabic word check for applying gsub features\n * arabic sentence check for adjusting arabic layout\n */\nBidi.prototype.contextChecks = ({\n    latinWordCheck: latinWordCheck,\n    arabicWordCheck: arabicWordCheck,\n    arabicSentenceCheck: arabicSentenceCheck\n});\n\n/**\n * Register arabic word check\n */\nfunction registerContextChecker(checkId) {\n    var check = this.contextChecks[(checkId + \"Check\")];\n    return this.tokenizer.registerContextChecker(\n        checkId, check.startCheck, check.endCheck\n    );\n}\n\n/**\n * Perform pre tokenization procedure then\n * tokenize text input\n */\nfunction tokenizeText() {\n    registerContextChecker.call(this, 'latinWord');\n    registerContextChecker.call(this, 'arabicWord');\n    registerContextChecker.call(this, 'arabicSentence');\n    return this.tokenizer.tokenize(this.text);\n}\n\n/**\n * Reverse arabic sentence layout\n * TODO: check base dir before applying adjustments - priority low\n */\nfunction reverseArabicSentences() {\n    var this$1 = this;\n\n    var ranges = this.tokenizer.getContextRanges('arabicSentence');\n    ranges.forEach(function (range) {\n        var rangeTokens = this$1.tokenizer.getRangeTokens(range);\n        this$1.tokenizer.replaceRange(\n            range.startIndex,\n            range.endOffset,\n            rangeTokens.reverse()\n        );\n    });\n}\n\n/**\n * Register supported features tags\n * @param {script} script script tag\n * @param {Array} tags features tags list\n */\nBidi.prototype.registerFeatures = function (script, tags) {\n    var this$1 = this;\n\n    var supportedTags = tags.filter(\n        function (tag) { return this$1.query.supports({script: script, tag: tag}); }\n    );\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        this.featuresTags[script] = supportedTags;\n    } else {\n        this.featuresTags[script] =\n        this.featuresTags[script].concat(supportedTags);\n    }\n};\n\n/**\n * Apply GSUB features\n * @param {Array} tagsList a list of features tags\n * @param {string} script a script tag\n * @param {Font} font opentype font instance\n */\nBidi.prototype.applyFeatures = function (font, features) {\n    if (!font) { throw new Error(\n        'No valid font was provided to apply features'\n    ); }\n    if (!this.query) { this.query = new FeatureQuery(font); }\n    for (var f = 0; f < features.length; f++) {\n        var feature = features[f];\n        if (!this.query.supports({script: feature.script})) { continue; }\n        this.registerFeatures(feature.script, feature.tags);\n    }\n};\n\n/**\n * Register a state modifier\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a modifier function to set token state\n */\nBidi.prototype.registerModifier = function (modifierId, condition, modifier) {\n    this.tokenizer.registerModifier(modifierId, condition, modifier);\n};\n\n/**\n * Check if 'glyphIndex' is registered\n */\nfunction checkGlyphIndexStatus() {\n    if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {\n        throw new Error(\n            'glyphIndex modifier is required to apply ' +\n            'arabic presentation features.'\n        );\n    }\n}\n\n/**\n * Apply arabic presentation forms features\n */\nfunction applyArabicPresentationForms() {\n    var this$1 = this;\n\n    var script = 'arab';\n    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(function (range) {\n        arabicPresentationForms.call(this$1, range);\n    });\n}\n\n/**\n * Apply required arabic ligatures\n */\nfunction applyArabicRequireLigatures() {\n    var this$1 = this;\n\n    var script = 'arab';\n    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf('rlig') === -1) { return; }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(function (range) {\n        arabicRequiredLigatures.call(this$1, range);\n    });\n}\n\n/**\n * Apply required arabic ligatures\n */\nfunction applyLatinLigatures() {\n    var this$1 = this;\n\n    var script = 'latn';\n    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf('liga') === -1) { return; }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges('latinWord');\n    ranges.forEach(function (range) {\n        latinLigature.call(this$1, range);\n    });\n}\n\n/**\n * Check if a context is registered\n * @param {string} contextId context id\n */\nBidi.prototype.checkContextReady = function (contextId) {\n    return !!this.tokenizer.getContext(contextId);\n};\n\n/**\n * Apply features to registered contexts\n */\nBidi.prototype.applyFeaturesToContexts = function () {\n    if (this.checkContextReady('arabicWord')) {\n        applyArabicPresentationForms.call(this);\n        applyArabicRequireLigatures.call(this);\n    }\n    if (this.checkContextReady('latinWord')) {\n        applyLatinLigatures.call(this);\n    }\n    if (this.checkContextReady('arabicSentence')) {\n        reverseArabicSentences.call(this);\n    }\n};\n\n/**\n * process text input\n * @param {string} text an input text\n */\nBidi.prototype.processText = function(text) {\n    if (!this.text || this.text !== text) {\n        this.setText(text);\n        tokenizeText.call(this);\n        this.applyFeaturesToContexts();\n    }\n};\n\n/**\n * Process a string of text to identify and adjust\n * bidirectional text entities.\n * @param {string} text input text\n */\nBidi.prototype.getBidiText = function (text) {\n    this.processText(text);\n    return this.tokenizer.getText();\n};\n\n/**\n * Get the current state index of each token\n * @param {text} text an input text\n */\nBidi.prototype.getTextGlyphs = function (text) {\n    this.processText(text);\n    var indexes = [];\n    for (var i = 0; i < this.tokenizer.tokens.length; i++) {\n        var token = this.tokenizer.tokens[i];\n        if (token.state.deleted) { continue; }\n        var index = token.activeState.value;\n        indexes.push(Array.isArray(index) ? index[0] : index);\n    }\n    return indexes;\n};\n\n// The Font object\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n    options = options || {};\n    options.tables = options.tables || {};\n\n    if (!options.empty) {\n        // Check that we've provided the minimum set of names.\n        checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n        checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n        checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n        checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n        checkArgument(options.descender <= 0, 'When creating a new Font object, negative descender value is required.');\n\n        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n        this.names = {\n            fontFamily: {en: options.familyName || ' '},\n            fontSubfamily: {en: options.styleName || ' '},\n            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n            // postScriptName may not contain any whitespace\n            postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\\s/g, '')},\n            designer: {en: options.designer || ' '},\n            designerURL: {en: options.designerURL || ' '},\n            manufacturer: {en: options.manufacturer || ' '},\n            manufacturerURL: {en: options.manufacturerURL || ' '},\n            license: {en: options.license || ' '},\n            licenseURL: {en: options.licenseURL || ' '},\n            version: {en: options.version || 'Version 0.1'},\n            description: {en: options.description || ' '},\n            copyright: {en: options.copyright || ' '},\n            trademark: {en: options.trademark || ' '}\n        };\n        this.unitsPerEm = options.unitsPerEm || 1000;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = Object.assign(options.tables, {\n            os2: Object.assign({\n                usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n                usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n                fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR,\n            }, options.tables.os2)\n        });\n    }\n\n    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n    this.encoding = new DefaultEncoding(this);\n    this.position = new Position(this);\n    this.substitution = new Substitution(this);\n    this.tables = this.tables || {};\n\n    // needed for low memory mode only.\n    this._push = null;\n    this._hmtxTableData = {};\n\n    Object.defineProperty(this, 'hinting', {\n        get: function() {\n            if (this._hinting) { return this._hinting; }\n            if (this.outlinesFormat === 'truetype') {\n                return (this._hinting = new Hinting(this));\n            }\n        }\n    });\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function(c) {\n    var glyphIndex = this.charToGlyphIndex(c);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * Update features\n * @param {any} options features options\n */\nFont.prototype.updateFeatures = function (options) {\n    // TODO: update all features options not only 'latn'.\n    return this.defaultRenderOptions.features.map(function (feature) {\n        if (feature.script === 'latn') {\n            return {\n                script: 'latn',\n                tags: feature.tags.filter(function (tag) { return options[tag]; })\n            };\n        } else {\n            return feature;\n        }\n    });\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function(s, options) {\n    var this$1 = this;\n\n\n    var bidi = new Bidi();\n\n    // Create and register 'glyphIndex' state modifier\n    var charToGlyphIndexMod = function (token) { return this$1.charToGlyphIndex(token.char); };\n    bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);\n\n    // roll-back to default features\n    var features = options ?\n    this.updateFeatures(options.features) :\n    this.defaultRenderOptions.features;\n\n    bidi.applyFeatures(this, features);\n\n    var indexes = bidi.getTextGlyphs(s);\n\n    var length = indexes.length;\n\n    // convert glyph indexes to glyph objects\n    var glyphs = new Array(length);\n    var notdef = this.glyphs.get(0);\n    for (var i = 0; i < length; i += 1) {\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\n\n/**\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.nameToGlyphIndex = function(name) {\n    return this.glyphNames.nameToGlyphIndex(name);\n};\n\n/**\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.nameToGlyph = function(name) {\n    var glyphIndex = this.nameToGlyphIndex(name);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * @param  {Number}\n * @return {String}\n */\nFont.prototype.glyphIndexToName = function(gid) {\n    if (!this.glyphNames.glyphIndexToName) {\n        return '';\n    }\n\n    return this.glyphNames.glyphIndexToName(gid);\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * For GPOS kerning, this method uses the default script and language, which covers\n * most use cases. To have greater control, use font.position.getKerningValue .\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    var gposKerning = this.position.defaultKerningTables;\n    if (gposKerning) {\n        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n    }\n    // \"kern\" table\n    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: [\n        /**\n         * these 4 features are required to render Arabic text properly\n         * and shouldn't be turned off when rendering arabic text.\n         */\n        { script: 'arab', tags: ['init', 'medi', 'fina', 'rlig'] },\n        { script: 'latn', tags: ['liga', 'rlig'] }\n    ]\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = Object.assign({}, this.defaultRenderOptions, options);\n    var fontScale = 1 / this.unitsPerEm * fontSize;\n    var glyphs = this.stringToGlyphs(text, options);\n    var kerningLookups;\n    if (options.kerning) {\n        var script = options.script || this.position.getDefaultScriptName();\n        kerningLookups = this.position.getKerningTables(script, options.language);\n    }\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        callback.call(this, glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (options.kerning && i < glyphs.length - 1) {\n            // We should apply position adjustment lookups in a more generic way.\n            // Here we only use the xAdvance value.\n            var kerningValue = kerningLookups ?\n                  this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :\n                  this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += (options.tracking / 1000) * fontSize;\n        }\n    }\n    return x;\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    var fullPath = new Path();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        fullPath.extend(glyphPath);\n    });\n    return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyphs of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    var glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        glyphPaths.push(glyphPath);\n    });\n\n    return glyphPaths;\n};\n\n/**\n * Returns the advance width of a text.\n *\n * This is something different than Path.getBoundingBox() as for example a\n * suffixed whitespace increases the advanceWidth but not the bounding box\n * or an overhanging letter like a calligraphic 'f' might have a quite larger\n * bounding box than its advance width.\n *\n * This corresponds to canvas2dContext.measureText(text).width\n *\n * @param  {string} text - The text to create.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return advance width\n */\nFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n};\n\n/**\n * Draw the text on the given drawing context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n */\nFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n    this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of all glyphs in the text.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawPoints(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * Draw lines indicating important font measurements for all glyphs in the text.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * @param  {string}\n * @return {string}\n */\nFont.prototype.getEnglishName = function(name) {\n    var translations = this.names[name];\n    if (translations) {\n        return translations.en;\n    }\n};\n\n/**\n * Validate\n */\nFont.prototype.validate = function() {\n    var _this = this;\n\n    function assert(predicate, message) {\n    }\n\n    function assertNamePresent(name) {\n        var englishName = _this.getEnglishName(name);\n        assert(englishName && englishName.trim().length > 0);\n    }\n\n    // Identification information\n    assertNamePresent('fontFamily');\n    assertNamePresent('weightName');\n    assertNamePresent('manufacturer');\n    assertNamePresent('copyright');\n    assertNamePresent('version');\n\n    // Dimension information\n    assert(this.unitsPerEm > 0);\n};\n\n/**\n * Convert the font object to a SFNT data structure.\n * This structure contains all the necessary tables and metadata to create a binary OTF file.\n * @return {opentype.Table}\n */\nFont.prototype.toTables = function() {\n    return sfnt.fontToTable(this);\n};\n/**\n * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n */\nFont.prototype.toBuffer = function() {\n    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n    return this.toArrayBuffer();\n};\n/**\n * Converts a `opentype.Font` into an `ArrayBuffer`\n * @return {ArrayBuffer}\n */\nFont.prototype.toArrayBuffer = function() {\n    var sfntTable = this.toTables();\n    var bytes = sfntTable.encode();\n    var buffer = new ArrayBuffer(bytes.length);\n    var intArray = new Uint8Array(buffer);\n    for (var i = 0; i < bytes.length; i++) {\n        intArray[i] = bytes[i];\n    }\n\n    return buffer;\n};\n\n/**\n * Initiate a download of the OpenType font.\n */\nFont.prototype.download = function(fileName) {\n    var familyName = this.getEnglishName('fontFamily');\n    var styleName = this.getEnglishName('fontSubfamily');\n    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n    var arrayBuffer = this.toArrayBuffer();\n\n    if (isBrowser()) {\n        window.URL = window.URL || window.webkitURL;\n\n        if (window.URL) {\n            var dataView = new DataView(arrayBuffer);\n            var blob = new Blob([dataView], {type: 'font/opentype'});\n\n            var link = document.createElement('a');\n            link.href = window.URL.createObjectURL(blob);\n            link.download = fileName;\n\n            var event = document.createEvent('MouseEvents');\n            event.initEvent('click', true, false);\n            link.dispatchEvent(event);\n        } else {\n            console.warn('Font file could not be downloaded. Try using a different browser.');\n        }\n    } else {\n        var fs = require('fs');\n        var buffer = arrayBufferToNodeBuffer(arrayBuffer);\n        fs.writeFileSync(fileName, buffer);\n    }\n};\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n    ITALIC:              0x001, //1\n    UNDERSCORE:          0x002, //2\n    NEGATIVE:            0x004, //4\n    OUTLINED:            0x008, //8\n    STRIKEOUT:           0x010, //16\n    BOLD:                0x020, //32\n    REGULAR:             0x040, //64\n    USER_TYPO_METRICS:   0x080, //128\n    WWS:                 0x100, //256\n    OBLIQUE:             0x200  //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK:    900\n};\n\n// The `fvar` table stores font variation axes and instances.\n\nfunction addName(name, names) {\n    var nameString = JSON.stringify(name);\n    var nameID = 256;\n    for (var nameKey in names) {\n        var n = parseInt(nameKey);\n        if (!n || n < 256) {\n            continue;\n        }\n\n        if (JSON.stringify(names[nameKey]) === nameString) {\n            return n;\n        }\n\n        if (nameID <= n) {\n            nameID = n + 1;\n        }\n    }\n\n    names[nameID] = name;\n    return nameID;\n}\n\nfunction makeFvarAxis(n, axis, names) {\n    var nameID = addName(axis.name, names);\n    return [\n        {name: 'tag_' + n, type: 'TAG', value: axis.tag},\n        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},\n        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},\n        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},\n        {name: 'flags_' + n, type: 'USHORT', value: 0},\n        {name: 'nameID_' + n, type: 'USHORT', value: nameID}\n    ];\n}\n\nfunction parseFvarAxis(data, start, names) {\n    var axis = {};\n    var p = new parse.Parser(data, start);\n    axis.tag = p.parseTag();\n    axis.minValue = p.parseFixed();\n    axis.defaultValue = p.parseFixed();\n    axis.maxValue = p.parseFixed();\n    p.skip('uShort', 1);  // reserved for flags; no values defined\n    axis.name = names[p.parseUShort()] || {};\n    return axis;\n}\n\nfunction makeFvarInstance(n, inst, axes, names) {\n    var nameID = addName(inst.name, names);\n    var fields = [\n        {name: 'nameID_' + n, type: 'USHORT', value: nameID},\n        {name: 'flags_' + n, type: 'USHORT', value: 0}\n    ];\n\n    for (var i = 0; i < axes.length; ++i) {\n        var axisTag = axes[i].tag;\n        fields.push({\n            name: 'axis_' + n + ' ' + axisTag,\n            type: 'FIXED',\n            value: inst.coordinates[axisTag] << 16\n        });\n    }\n\n    return fields;\n}\n\nfunction parseFvarInstance(data, start, axes, names) {\n    var inst = {};\n    var p = new parse.Parser(data, start);\n    inst.name = names[p.parseUShort()] || {};\n    p.skip('uShort', 1);  // reserved for flags; no values defined\n\n    inst.coordinates = {};\n    for (var i = 0; i < axes.length; ++i) {\n        inst.coordinates[axes[i].tag] = p.parseFixed();\n    }\n\n    return inst;\n}\n\nfunction makeFvarTable(fvar, names) {\n    var result = new table.Table('fvar', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'offsetToData', type: 'USHORT', value: 0},\n        {name: 'countSizePairs', type: 'USHORT', value: 2},\n        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},\n        {name: 'axisSize', type: 'USHORT', value: 20},\n        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},\n        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}\n    ]);\n    result.offsetToData = result.sizeOf();\n\n    for (var i = 0; i < fvar.axes.length; i++) {\n        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n    }\n\n    for (var j = 0; j < fvar.instances.length; j++) {\n        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n    }\n\n    return result;\n}\n\nfunction parseFvarTable(data, start, names) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n    var offsetToData = p.parseOffset16();\n    // Skip countSizePairs.\n    p.skip('uShort', 1);\n    var axisCount = p.parseUShort();\n    var axisSize = p.parseUShort();\n    var instanceCount = p.parseUShort();\n    var instanceSize = p.parseUShort();\n\n    var axes = [];\n    for (var i = 0; i < axisCount; i++) {\n        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n    }\n\n    var instances = [];\n    var instanceStart = start + offsetToData + axisCount * axisSize;\n    for (var j = 0; j < instanceCount; j++) {\n        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n    }\n\n    return {axes: axes, instances: instances};\n}\n\nvar fvar = { make: makeFvarTable, parse: parseFvarTable };\n\n// The `GDEF` table contains various glyph properties\n\nvar attachList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        attachPoints: this.parseList(Parser.pointer(Parser.uShortList))\n    };\n};\n\nvar caretValue = function() {\n    var format = this.parseUShort();\n    check.argument(format === 1 || format === 2 || format === 3,\n        'Unsupported CaretValue table version.');\n    if (format === 1) {\n        return { coordinate: this.parseShort() };\n    } else if (format === 2) {\n        return { pointindex: this.parseShort() };\n    } else if (format === 3) {\n        // Device / Variation Index tables unsupported\n        return { coordinate: this.parseShort() };\n    }\n};\n\nvar ligGlyph = function() {\n    return this.parseList(Parser.pointer(caretValue));\n};\n\nvar ligCaretList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        ligGlyphs: this.parseList(Parser.pointer(ligGlyph))\n    };\n};\n\nvar markGlyphSets = function() {\n    this.parseUShort(); // Version\n    return this.parseList(Parser.pointer(Parser.coverage));\n};\n\nfunction parseGDEFTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3,\n        'Unsupported GDEF table version.');\n    var gdef = {\n        version: tableVersion,\n        classDef: p.parsePointer(Parser.classDef),\n        attachList: p.parsePointer(attachList),\n        ligCaretList: p.parsePointer(ligCaretList),\n        markAttachClassDef: p.parsePointer(Parser.classDef)\n    };\n    if (tableVersion >= 1.2) {\n        gdef.markGlyphSets = p.parsePointer(markGlyphSets);\n    }\n    return gdef;\n}\nvar gdef = { parse: parseGDEFTable };\n\n// The `GPOS` table contains kerning pairs, among other things.\n\nvar subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n// this = Parser instance\nsubtableParsers$1[1] = function parseLookup1() {\n    var start = this.offset + this.relativeOffset;\n    var posformat = this.parseUShort();\n    if (posformat === 1) {\n        return {\n            posFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            value: this.parseValueRecord()\n        };\n    } else if (posformat === 2) {\n        return {\n            posFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            values: this.parseValueRecordList()\n        };\n    }\n    check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');\n};\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\nsubtableParsers$1[2] = function parseLookup2() {\n    var start = this.offset + this.relativeOffset;\n    var posFormat = this.parseUShort();\n    check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');\n    var coverage = this.parsePointer(Parser.coverage);\n    var valueFormat1 = this.parseUShort();\n    var valueFormat2 = this.parseUShort();\n    if (posFormat === 1) {\n        // Adjustments for Glyph Pairs\n        return {\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            pairSets: this.parseList(Parser.pointer(Parser.list(function() {\n                return {        // pairValueRecord\n                    secondGlyph: this.parseUShort(),\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            })))\n        };\n    } else if (posFormat === 2) {\n        var classDef1 = this.parsePointer(Parser.classDef);\n        var classDef2 = this.parsePointer(Parser.classDef);\n        var class1Count = this.parseUShort();\n        var class2Count = this.parseUShort();\n        return {\n            // Class Pair Adjustment\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            classDef1: classDef1,\n            classDef2: classDef2,\n            class1Count: class1Count,\n            class2Count: class2Count,\n            classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {\n                return {\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            }))\n        };\n    }\n};\n\nsubtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };\nsubtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };\nsubtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };\nsubtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };\nsubtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };\nsubtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };\nsubtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\nfunction parseGposTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);\n\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n\n}\n\n// GPOS Writing //////////////////////////////////////////////\n// NOT SUPPORTED\nvar subtableMakers$1 = new Array(10);\n\nfunction makeGposTable(gpos) {\n    return new table.Table('GPOS', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},\n        {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},\n        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}\n    ]);\n}\n\nvar gpos = { parse: parseGposTable, make: makeGposTable };\n\n// The `kern` table contains kerning pairs.\n\nfunction parseWindowsKernTable(p) {\n    var pairs = {};\n    // Skip nTables.\n    p.skip('uShort');\n    var subtableVersion = p.parseUShort();\n    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n    // Skip subtableLength, subtableCoverage\n    p.skip('uShort', 2);\n    var nPairs = p.parseUShort();\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n    for (var i = 0; i < nPairs; i += 1) {\n        var leftIndex = p.parseUShort();\n        var rightIndex = p.parseUShort();\n        var value = p.parseShort();\n        pairs[leftIndex + ',' + rightIndex] = value;\n    }\n    return pairs;\n}\n\nfunction parseMacKernTable(p) {\n    var pairs = {};\n    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n    // Skip the rest.\n    p.skip('uShort');\n    var nTables = p.parseULong();\n    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n    if (nTables > 1) {\n        console.warn('Only the first kern subtable is supported.');\n    }\n    p.skip('uLong');\n    var coverage = p.parseUShort();\n    var subtableVersion = coverage & 0xFF;\n    p.skip('uShort');\n    if (subtableVersion === 0) {\n        var nPairs = p.parseUShort();\n        // Skip searchRange, entrySelector, rangeShift.\n        p.skip('uShort', 3);\n        for (var i = 0; i < nPairs; i += 1) {\n            var leftIndex = p.parseUShort();\n            var rightIndex = p.parseUShort();\n            var value = p.parseShort();\n            pairs[leftIndex + ',' + rightIndex] = value;\n        }\n    }\n    return pairs;\n}\n\n// Parse the `kern` table which contains kerning pairs.\nfunction parseKernTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseUShort();\n    if (tableVersion === 0) {\n        return parseWindowsKernTable(p);\n    } else if (tableVersion === 1) {\n        return parseMacKernTable(p);\n    } else {\n        throw new Error('Unsupported kern table version (' + tableVersion + ').');\n    }\n}\n\nvar kern = { parse: parseKernTable };\n\n// The `loca` table stores the offsets to the locations of the glyphs in the font.\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    var p = new parse.Parser(data, start);\n    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    var glyphOffsets = [];\n    for (var i = 0; i < numGlyphs + 1; i += 1) {\n        var glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\nvar loca = { parse: parseLocaTable };\n\n// opentype.js\n\n/**\n * The opentype library.\n * @namespace opentype\n */\n\n// File loaders /////////////////////////////////////////////////////////\n/**\n * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n * and the font as an ArrayBuffer in the second parameter if it succeeds.\n * @param  {string} path - The path of the file\n * @param  {Function} callback - The function to call when the font load completes\n */\nfunction loadFromFile(path, callback) {\n    var fs = require('fs');\n    fs.readFile(path, function(err, buffer) {\n        if (err) {\n            return callback(err.message);\n        }\n\n        callback(null, nodeBufferToArrayBuffer(buffer));\n    });\n}\n/**\n * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n * and the font as an ArrayBuffer in the second parameter if it succeeds.\n * @param  {string} url - The URL of the font file.\n * @param  {Function} callback - The function to call when the font load completes\n */\nfunction loadFromUrl(url, callback) {\n    var request = new XMLHttpRequest();\n    request.open('get', url, true);\n    request.responseType = 'arraybuffer';\n    request.onload = function() {\n        if (request.response) {\n            return callback(null, request.response);\n        } else {\n            return callback('Font could not be loaded: ' + request.statusText);\n        }\n    };\n\n    request.onerror = function () {\n        callback('Font could not be loaded');\n    };\n\n    request.send();\n}\n\n// Table Directory Entries //////////////////////////////////////////////\n/**\n * Parses OpenType table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseOpenTypeTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 12;\n    for (var i = 0; i < numTables; i += 1) {\n        var tag = parse.getTag(data, p);\n        var checksum = parse.getULong(data, p + 4);\n        var offset = parse.getULong(data, p + 8);\n        var length = parse.getULong(data, p + 12);\n        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});\n        p += 16;\n    }\n\n    return tableEntries;\n}\n\n/**\n * Parses WOFF table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseWOFFTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 44; // offset to the first table directory entry.\n    for (var i = 0; i < numTables; i += 1) {\n        var tag = parse.getTag(data, p);\n        var offset = parse.getULong(data, p + 4);\n        var compLength = parse.getULong(data, p + 8);\n        var origLength = parse.getULong(data, p + 12);\n        var compression = (void 0);\n        if (compLength < origLength) {\n            compression = 'WOFF';\n        } else {\n            compression = false;\n        }\n\n        tableEntries.push({tag: tag, offset: offset, compression: compression,\n            compressedLength: compLength, length: origLength});\n        p += 20;\n    }\n\n    return tableEntries;\n}\n\n/**\n * @typedef TableData\n * @type Object\n * @property {DataView} data - The DataView\n * @property {number} offset - The data offset.\n */\n\n/**\n * @param  {DataView}\n * @param  {Object}\n * @return {TableData}\n */\nfunction uncompressTable(data, tableEntry) {\n    if (tableEntry.compression === 'WOFF') {\n        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n        var outBuffer = new Uint8Array(tableEntry.length);\n        tinyInflate(inBuffer, outBuffer);\n        if (outBuffer.byteLength !== tableEntry.length) {\n            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\\'t match recorded length');\n        }\n\n        var view = new DataView(outBuffer.buffer, 0);\n        return {data: view, offset: 0};\n    } else {\n        return {data: data, offset: tableEntry.offset};\n    }\n}\n\n// Public API ///////////////////////////////////////////////////////////\n\n/**\n * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n * Throws an error if the font could not be parsed.\n * @param  {ArrayBuffer}\n * @param  {Object} opt - options for parsing\n * @return {opentype.Font}\n */\nfunction parseBuffer(buffer, opt) {\n    opt = (opt === undefined || opt === null) ?  {} : opt;\n\n    var indexToLocFormat;\n    var ltagTable;\n\n    // Since the constructor can also be called to create new fonts from scratch, we indicate this\n    // should be an empty font that we'll fill with our own data.\n    var font = new Font({empty: true});\n\n    // OpenType fonts use big endian byte ordering.\n    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n    // Instead we use DataViews where we can specify endianness.\n    var data = new DataView(buffer, 0);\n    var numTables;\n    var tableEntries = [];\n    var signature = parse.getTag(data, 0);\n    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {\n        font.outlinesFormat = 'truetype';\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'OTTO') {\n        font.outlinesFormat = 'cff';\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'wOFF') {\n        var flavor = parse.getTag(data, 4);\n        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n            font.outlinesFormat = 'truetype';\n        } else if (flavor === 'OTTO') {\n            font.outlinesFormat = 'cff';\n        } else {\n            throw new Error('Unsupported OpenType flavor ' + signature);\n        }\n\n        numTables = parse.getUShort(data, 12);\n        tableEntries = parseWOFFTableEntries(data, numTables);\n    } else {\n        throw new Error('Unsupported OpenType signature ' + signature);\n    }\n\n    var cffTableEntry;\n    var fvarTableEntry;\n    var glyfTableEntry;\n    var gdefTableEntry;\n    var gposTableEntry;\n    var gsubTableEntry;\n    var hmtxTableEntry;\n    var kernTableEntry;\n    var locaTableEntry;\n    var nameTableEntry;\n    var metaTableEntry;\n    var p;\n\n    for (var i = 0; i < numTables; i += 1) {\n        var tableEntry = tableEntries[i];\n        var table = (void 0);\n        switch (tableEntry.tag) {\n            case 'cmap':\n                table = uncompressTable(data, tableEntry);\n                font.tables.cmap = cmap.parse(table.data, table.offset);\n                font.encoding = new CmapEncoding(font.tables.cmap);\n                break;\n            case 'cvt ' :\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                break;\n            case 'fvar':\n                fvarTableEntry = tableEntry;\n                break;\n            case 'fpgm' :\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.fpgm = p.parseByteList(tableEntry.length);\n                break;\n            case 'head':\n                table = uncompressTable(data, tableEntry);\n                font.tables.head = head.parse(table.data, table.offset);\n                font.unitsPerEm = font.tables.head.unitsPerEm;\n                indexToLocFormat = font.tables.head.indexToLocFormat;\n                break;\n            case 'hhea':\n                table = uncompressTable(data, tableEntry);\n                font.tables.hhea = hhea.parse(table.data, table.offset);\n                font.ascender = font.tables.hhea.ascender;\n                font.descender = font.tables.hhea.descender;\n                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                break;\n            case 'hmtx':\n                hmtxTableEntry = tableEntry;\n                break;\n            case 'ltag':\n                table = uncompressTable(data, tableEntry);\n                ltagTable = ltag.parse(table.data, table.offset);\n                break;\n            case 'maxp':\n                table = uncompressTable(data, tableEntry);\n                font.tables.maxp = maxp.parse(table.data, table.offset);\n                font.numGlyphs = font.tables.maxp.numGlyphs;\n                break;\n            case 'name':\n                nameTableEntry = tableEntry;\n                break;\n            case 'OS/2':\n                table = uncompressTable(data, tableEntry);\n                font.tables.os2 = os2.parse(table.data, table.offset);\n                break;\n            case 'post':\n                table = uncompressTable(data, tableEntry);\n                font.tables.post = post.parse(table.data, table.offset);\n                font.glyphNames = new GlyphNames(font.tables.post);\n                break;\n            case 'prep' :\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.prep = p.parseByteList(tableEntry.length);\n                break;\n            case 'glyf':\n                glyfTableEntry = tableEntry;\n                break;\n            case 'loca':\n                locaTableEntry = tableEntry;\n                break;\n            case 'CFF ':\n                cffTableEntry = tableEntry;\n                break;\n            case 'kern':\n                kernTableEntry = tableEntry;\n                break;\n            case 'GDEF':\n                gdefTableEntry = tableEntry;\n                break;\n            case 'GPOS':\n                gposTableEntry = tableEntry;\n                break;\n            case 'GSUB':\n                gsubTableEntry = tableEntry;\n                break;\n            case 'meta':\n                metaTableEntry = tableEntry;\n                break;\n        }\n    }\n\n    var nameTable = uncompressTable(data, nameTableEntry);\n    font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);\n    font.names = font.tables.name;\n\n    if (glyfTableEntry && locaTableEntry) {\n        var shortVersion = indexToLocFormat === 0;\n        var locaTable = uncompressTable(data, locaTableEntry);\n        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n        var glyfTable = uncompressTable(data, glyfTableEntry);\n        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);\n    } else if (cffTableEntry) {\n        var cffTable = uncompressTable(data, cffTableEntry);\n        cff.parse(cffTable.data, cffTable.offset, font, opt);\n    } else {\n        throw new Error('Font doesn\\'t contain TrueType or CFF outlines.');\n    }\n\n    var hmtxTable = uncompressTable(data, hmtxTableEntry);\n    hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);\n    addGlyphNames(font, opt);\n\n    if (kernTableEntry) {\n        var kernTable = uncompressTable(data, kernTableEntry);\n        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n    } else {\n        font.kerningPairs = {};\n    }\n\n    if (gdefTableEntry) {\n        var gdefTable = uncompressTable(data, gdefTableEntry);\n        font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);\n    }\n\n    if (gposTableEntry) {\n        var gposTable = uncompressTable(data, gposTableEntry);\n        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n        font.position.init();\n    }\n\n    if (gsubTableEntry) {\n        var gsubTable = uncompressTable(data, gsubTableEntry);\n        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n    }\n\n    if (fvarTableEntry) {\n        var fvarTable = uncompressTable(data, fvarTableEntry);\n        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n    }\n\n    if (metaTableEntry) {\n        var metaTable = uncompressTable(data, metaTableEntry);\n        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n        font.metas = font.tables.meta;\n    }\n\n    return font;\n}\n\n/**\n * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n * with two arguments `(err, font)`. The `err` will be null on success,\n * the `font` is a Font object.\n * We use the node.js callback convention so that\n * opentype.js can integrate with frameworks like async.js.\n * @alias opentype.load\n * @param  {string} url - The URL of the font to load.\n * @param  {Function} callback - The callback.\n */\nfunction load(url, callback, opt) {\n    opt = (opt === undefined || opt === null) ?  {} : opt;\n    var isNode = typeof window === 'undefined';\n    var loadFn = isNode && !opt.isUrl ? loadFromFile : loadFromUrl;\n\n    return new Promise(function (resolve, reject) {\n        loadFn(url, function(err, arrayBuffer) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                } else {\n                    reject(err);\n                }\n            }\n            var font;\n            try {\n                font = parseBuffer(arrayBuffer, opt);\n            } catch (e) {\n                if (callback) {\n                    return callback(e, null);\n                } else {\n                    reject(e);\n                }\n            }\n            if (callback) {\n                return callback(null, font);\n            } else {\n                resolve(font);\n            }\n        });\n    });\n}\n\n/**\n * Synchronously load the font from a URL or file.\n * When done, returns the font object or throws an error.\n * @alias opentype.loadSync\n * @param  {string} url - The URL of the font to load.\n * @param  {Object} opt - opt.lowMemory\n * @return {opentype.Font}\n */\nfunction loadSync(url, opt) {\n    var fs = require('fs');\n    var buffer = fs.readFileSync(url);\n    return parseBuffer(nodeBufferToArrayBuffer(buffer), opt);\n}\n\nvar opentype = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tFont: Font,\n\tGlyph: Glyph,\n\tPath: Path,\n\tBoundingBox: BoundingBox,\n\t_parse: parse,\n\tparse: parseBuffer,\n\tload: load,\n\tloadSync: loadSync\n});\n\nexport default opentype;\nexport { BoundingBox, Font, Glyph, Path, parse as _parse, load, loadSync, parseBuffer as parse };\n//# sourceMappingURL=opentype.module.js.map\n","var A,g=(A=\"file:///build/woff2-wasm.js\",function(g={}){g.ready=new Promise((A,g)=>{C=A,B=g});var C,B,I,Q,E,w,D,G,i,o,L,Y,c,h,F,s,N,K,a,R,H,k,J,Z,M=Object.assign({},g),W=(A,g)=>{throw g},d=\"\";\"undefined\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),A&&(d=A),d=0!==d.indexOf(\"blob:\")?d.substr(0,d.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",g.print||console.log.bind(console);var y=g.printErr||console.error.bind(console);Object.assign(g,M),M=null,g.arguments&&g.arguments,g.thisProgram&&g.thisProgram,g.quit&&(W=g.quit),g.wasmBinary&&(Q=g.wasmBinary);var U=g.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&X(\"no native wasm support detected\");var p=!1;function b(){var A=E.buffer;g.HEAP8=w=new Int8Array(A),g.HEAP16=G=new Int16Array(A),g.HEAPU8=D=new Uint8Array(A),g.HEAPU16=i=new Uint16Array(A),g.HEAP32=o=new Int32Array(A),g.HEAPU32=L=new Uint32Array(A),g.HEAPF32=Y=new Float32Array(A),g.HEAPF64=c=new Float64Array(A)}var l=[],S=[],m=[],q=0,t=null,V=null;function X(A){g.onAbort&&g.onAbort(A),y(A=\"Aborted(\"+A+\")\"),p=!0,A+=\". Build with -sASSERTIONS for more info.\";var C=new WebAssembly.RuntimeError(A);throw B(C),C}var u=\"data:application/octet-stream;base64,\";function n(A){return A.startsWith(u)}function x(A){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${A})`,this.status=A}n(h=\"data:application/octet-stream;base64,\")||(H=h,h=g.locateFile?g.locateFile(H,d):d+H);var j=A=>{for(;A.length>0;)A.shift()(g)};function v(A){this.excPtr=A,this.ptr=A-24,this.set_type=function(A){L[this.ptr+4>>2]=A},this.get_type=function(){return L[this.ptr+4>>2]},this.set_destructor=function(A){L[this.ptr+8>>2]=A},this.get_destructor=function(){return L[this.ptr+8>>2]},this.set_caught=function(A){A=A?1:0,w[this.ptr+12>>0]=A},this.get_caught=function(){return 0!=w[this.ptr+12>>0]},this.set_rethrown=function(A){A=A?1:0,w[this.ptr+13>>0]=A},this.get_rethrown=function(){return 0!=w[this.ptr+13>>0]},this.init=function(A,g){this.set_adjusted_ptr(0),this.set_type(A),this.set_destructor(g)},this.set_adjusted_ptr=function(A){L[this.ptr+16>>2]=A},this.get_adjusted_ptr=function(){return L[this.ptr+16>>2]},this.get_exception_ptr=function(){if(AP(this.get_type()))return L[this.excPtr>>2];var A=this.get_adjusted_ptr();return 0!==A?A:this.excPtr}}var O=0,r=0,P=A=>{for(var g=\"\",C=A;D[C];)g+=F[D[C++]];return g},z={},e={},T={},f=A=>{throw new s(A)},_=A=>{throw new N(A)},$=(A,g,C)=>{function B(g){var B=C(g);B.length!==A.length&&_(\"Mismatched type converter count\");for(var I=0;I<A.length;++I)AA(A[I],B[I])}A.forEach(function(A){T[A]=g});var I=Array(g.length),Q=[],E=0;g.forEach((A,g)=>{e.hasOwnProperty(A)?I[g]=e[A]:(Q.push(A),z.hasOwnProperty(A)||(z[A]=[]),z[A].push(()=>{I[g]=e[A],++E===Q.length&&B(I)}))}),0===Q.length&&B(I)};function AA(A,g,C={}){if(!(\"argPackAdvance\"in g))throw TypeError(\"registerType registeredInstance requires argPackAdvance\");return function(A,g,C={}){var B=g.name;if(A||f(`type \"${B}\" must have a positive integer typeid pointer`),e.hasOwnProperty(A)){if(C.ignoreDuplicateRegistrations)return;f(`Cannot register type '${B}' twice`)}if(e[A]=g,delete T[A],z.hasOwnProperty(A)){var I=z[A];delete z[A],I.forEach(A=>A())}}(A,g,C)}function Ag(){this.allocated=[void 0],this.freelist=[]}var AC=new Ag,AB=A=>{A>=AC.reserved&&0==--AC.get(A).refcount&&AC.free(A)},AI={toValue:A=>(A||f(\"Cannot use deleted val. handle = \"+A),AC.get(A).value),toHandle:A=>{switch(A){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return AC.allocate({refcount:1,value:A})}}};function AQ(A){return this.fromWireType(o[A>>2])}var AE=(A,g)=>{switch(g){case 4:return function(A){return this.fromWireType(Y[A>>2])};case 8:return function(A){return this.fromWireType(c[A>>3])};default:throw TypeError(`invalid float width (${g}): ${A}`)}},Aw=A=>{if(void 0===A)return\"_unknown\";var g=(A=A.replace(/[^a-zA-Z0-9_]/g,\"$\")).charCodeAt(0);return g>=48&&g<=57?`_${A}`:A},AD=A=>{for(;A.length;){var g=A.pop();A.pop()(g)}};function AG(A,g){return({[A=Aw(A)]:function(){return g.apply(this,arguments)}})[A]}var Ai=(A,g,C)=>{if(void 0===A[g].overloadTable){var B=A[g];A[g]=function(){return A[g].overloadTable.hasOwnProperty(arguments.length)||f(`Function '${C}' called with an invalid number of arguments (${arguments.length}) - expects one of (${A[g].overloadTable})!`),A[g].overloadTable[arguments.length].apply(this,arguments)},A[g].overloadTable=[],A[g].overloadTable[B.argCount]=B}},Ao=(A,C,B)=>{g.hasOwnProperty(A)?((void 0===B||void 0!==g[A].overloadTable&&void 0!==g[A].overloadTable[B])&&f(`Cannot register public name '${A}' twice`),Ai(g,A,A),g.hasOwnProperty(B)&&f(`Cannot register multiple overloads of a function with the same number of arguments (${B})!`),g[A].overloadTable[B]=C):(g[A]=C,void 0!==B&&(g[A].numArguments=B))},AL=(A,g)=>{for(var C=[],B=0;B<A;B++)C.push(L[g+4*B>>2]);return C},AY=(A,C,B)=>{g.hasOwnProperty(A)||_(\"Replacing nonexistant public symbol\"),void 0!==g[A].overloadTable&&void 0!==B?g[A].overloadTable[B]=C:(g[A]=C,g[A].argCount=B)},Ac=(A,C,B)=>{var I=g[\"dynCall_\"+A];return B&&B.length?I.apply(null,[C].concat(B)):I.call(null,C)},Ah=[],AF=A=>{var g=Ah[A];return g||(A>=Ah.length&&(Ah.length=A+1),Ah[A]=g=K.get(A)),g},As=(A,g,C)=>A.includes(\"j\")?Ac(A,g,C):AF(g).apply(null,C),AN=(A,g)=>{var C=[];return function(){return C.length=0,Object.assign(C,arguments),As(A,g,C)}},AK=(A,g)=>{var C=(A=P(A)).includes(\"j\")?AN(A,g):AF(g);return\"function\"!=typeof C&&f(`unknown function pointer with signature ${A}: ${g}`),C},Aa=A=>{var g=Ar(A),C=P(g);return AO(g),C},AR=(A,g)=>{var C=[],B={};throw g.forEach(function A(g){if(!B[g]&&!e[g]){if(T[g]){T[g].forEach(A);return}C.push(g),B[g]=!0}}),new a(`${A}: `+C.map(Aa).join([\", \"]))},AH=(A,g,C)=>{switch(g){case 1:return C?A=>w[A>>0]:A=>D[A>>0];case 2:return C?A=>G[A>>1]:A=>i[A>>1];case 4:return C?A=>o[A>>2]:A=>L[A>>2];default:throw TypeError(`invalid integer width (${g}): ${A}`)}};function Ak(A){return this.fromWireType(L[A>>2])}var AJ=(A,g,C,B)=>{if(!(B>0))return 0;for(var I=C,Q=C+B-1,E=0;E<A.length;++E){var w=A.charCodeAt(E);if(w>=55296&&w<=57343&&(w=65536+((1023&w)<<10)|1023&A.charCodeAt(++E)),w<=127){if(C>=Q)break;g[C++]=w}else if(w<=2047){if(C+1>=Q)break;g[C++]=192|w>>6,g[C++]=128|63&w}else if(w<=65535){if(C+2>=Q)break;g[C++]=224|w>>12,g[C++]=128|w>>6&63,g[C++]=128|63&w}else{if(C+3>=Q)break;g[C++]=240|w>>18,g[C++]=128|w>>12&63,g[C++]=128|w>>6&63,g[C++]=128|63&w}}return g[C]=0,C-I},AZ=(A,g,C)=>AJ(A,D,g,C),AM=A=>{for(var g=0,C=0;C<A.length;++C){var B=A.charCodeAt(C);B<=127?g++:B<=2047?g+=2:B>=55296&&B<=57343?(g+=4,++C):g+=3}return g},AW=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Ad=(A,g,C)=>{for(var B=g+C,I=g;A[I]&&!(I>=B);)++I;if(I-g>16&&A.buffer&&AW)return AW.decode(A.subarray(g,I));for(var Q=\"\";g<I;){var E=A[g++];if(!(128&E)){Q+=String.fromCharCode(E);continue}var w=63&A[g++];if((224&E)==192){Q+=String.fromCharCode((31&E)<<6|w);continue}var D=63&A[g++];if((E=(240&E)==224?(15&E)<<12|w<<6|D:(7&E)<<18|w<<12|D<<6|63&A[g++])<65536)Q+=String.fromCharCode(E);else{var G=E-65536;Q+=String.fromCharCode(55296|G>>10,56320|1023&G)}}return Q},Ay=(A,g)=>A?Ad(D,A,g):\"\",AU=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Ap=(A,g)=>{for(var C=A,B=C>>1,I=B+g/2;!(B>=I)&&i[B];)++B;if((C=B<<1)-A>32&&AU)return AU.decode(D.subarray(A,C));for(var Q=\"\",E=0;!(E>=g/2);++E){var w=G[A+2*E>>1];if(0==w)break;Q+=String.fromCharCode(w)}return Q},Ab=(A,g,C)=>{if(void 0===C&&(C=2147483647),C<2)return 0;for(var B=g,I=(C-=2)<2*A.length?C/2:A.length,Q=0;Q<I;++Q){var E=A.charCodeAt(Q);G[g>>1]=E,g+=2}return G[g>>1]=0,g-B},Al=A=>2*A.length,AS=(A,g)=>{for(var C=0,B=\"\";!(C>=g/4);){var I=o[A+4*C>>2];if(0==I)break;if(++C,I>=65536){var Q=I-65536;B+=String.fromCharCode(55296|Q>>10,56320|1023&Q)}else B+=String.fromCharCode(I)}return B},Am=(A,g,C)=>{if(void 0===C&&(C=2147483647),C<4)return 0;for(var B=g,I=B+C-4,Q=0;Q<A.length;++Q){var E=A.charCodeAt(Q);if(E>=55296&&E<=57343&&(E=65536+((1023&E)<<10)|1023&A.charCodeAt(++Q)),o[g>>2]=E,(g+=4)+4>I)break}return o[g>>2]=0,g-B},Aq=A=>{for(var g=0,C=0;C<A.length;++C){var B=A.charCodeAt(C);B>=55296&&B<=57343&&++C,g+=4}return g},At=(A,g)=>{var C=e[A];return void 0===C&&f(g+\" has unknown type \"+Aa(A)),C},AV=()=>2147483648,AX=A=>{var g=(A-E.buffer.byteLength+65535)/65536;try{return E.grow(g),b(),1}catch(A){}},Au={varargs:void 0,get(){var A=o[+Au.varargs>>2];return Au.varargs+=4,A},getp:()=>Au.get(),getStr:A=>Ay(A)},An=A=>{U||(g.onExit&&g.onExit(A),p=!0),W(A,new x(A))};(()=>{for(var A=Array(256),g=0;g<256;++g)A[g]=String.fromCharCode(g);F=A})(),s=g.BindingError=class extends Error{constructor(A){super(A),this.name=\"BindingError\"}},N=g.InternalError=class extends Error{constructor(A){super(A),this.name=\"InternalError\"}},Object.assign(Ag.prototype,{get(A){return this.allocated[A]},has(A){return void 0!==this.allocated[A]},allocate(A){var g=this.freelist.pop()||this.allocated.length;return this.allocated[g]=A,g},free(A){this.allocated[A]=void 0,this.freelist.push(A)}}),AC.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),AC.reserved=AC.allocated.length,g.count_emval_handles=()=>{for(var A=0,g=AC.reserved;g<AC.allocated.length;++g)void 0!==AC.allocated[g]&&++A;return A},a=g.UnboundTypeError=(k=Error,(Z=AG(J=\"UnboundTypeError\",function(A){this.name=J,this.message=A;var g=Error(A).stack;void 0!==g&&(this.stack=this.toString()+\"\\n\"+g.replace(/^Error(:[^\\n]*)?\\n/,\"\"))})).prototype=Object.create(k.prototype),Z.prototype.constructor=Z,Z.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},Z);var Ax={e:(A,g,C)=>{throw new v(A).init(g,C),O=A,r++,O},n:(A,g,C,B,I)=>{},i:(A,g,C,B)=>{AA(A,{name:g=P(g),fromWireType:function(A){return!!A},toWireType:function(A,g){return g?C:B},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(D[A])},destructorFunction:null})},r:(A,g)=>{AA(A,{name:g=P(g),fromWireType:A=>{var g=AI.toValue(A);return AB(A),g},toWireType:(A,g)=>AI.toHandle(g),argPackAdvance:8,readValueFromPointer:AQ,destructorFunction:null})},f:(A,g,C)=>{AA(A,{name:g=P(g),fromWireType:A=>A,toWireType:(A,g)=>g,argPackAdvance:8,readValueFromPointer:AE(g,C),destructorFunction:null})},c:(A,g,C,B,I,Q,E)=>{var w=AL(g,C);A=P(A),I=AK(B,I),Ao(A,function(){AR(`Cannot call ${A} due to unbound types`,w)},g-1),$([],w,function(C){return AY(A,function(A,g,C,B,I,Q){var E=g.length;E<2&&f(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");for(var w=null!==g[1]&&!1,D=!1,G=1;G<g.length;++G)if(null!==g[G]&&void 0===g[G].destructorFunction){D=!0;break}for(var i=\"void\"!==g[0].name,o=\"\",L=\"\",G=0;G<E-2;++G)o+=(0!==G?\", \":\"\")+\"arg\"+G,L+=(0!==G?\", \":\"\")+\"arg\"+G+\"Wired\";var Y=`\n        return function ${Aw(A)}(${o}) {\n        if (arguments.length !== ${E-2}) {\n          throwBindingError('function ${A} called with ' + arguments.length + ' arguments, expected ${E-2}');\n        }`;D&&(Y+=\"var destructors = [];\\n\");var c=D?\"destructors\":\"null\",h=[\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"],F=[f,B,I,AD,g[0],g[1]];w&&(Y+=\"var thisWired = classParam.toWireType(\"+c+\", this);\\n\");for(var G=0;G<E-2;++G)Y+=\"var arg\"+G+\"Wired = argType\"+G+\".toWireType(\"+c+\", arg\"+G+\"); // \"+g[G+2].name+\"\\n\",h.push(\"argType\"+G),F.push(g[G+2]);if(w&&(L=\"thisWired\"+(L.length>0?\", \":\"\")+L),Y+=(i||Q?\"var rv = \":\"\")+\"invoker(fn\"+(L.length>0?\", \":\"\")+L+\");\\n\",D)Y+=\"runDestructors(destructors);\\n\";else for(var G=w?1:2;G<g.length;++G){var s=1===G?\"thisWired\":\"arg\"+(G-2)+\"Wired\";null!==g[G].destructorFunction&&(Y+=s+\"_dtor(\"+s+\"); // \"+g[G].name+\"\\n\",h.push(s+\"_dtor\"),F.push(g[G].destructorFunction))}return i&&(Y+=\"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\"),Y+=\"}\\n\",h.push(Y),(function(A,g){if(!(A instanceof Function))throw TypeError(`new_ called with constructor type ${typeof A} which is not a function`);var C=AG(A.name||\"unknownFunctionName\",function(){});C.prototype=A.prototype;var B=new C,I=A.apply(B,g);return I instanceof Object?I:B})(Function,h).apply(null,F)}(A,[C[0],null].concat(C.slice(1)),0,I,Q,E),g-1),[]})},b:(A,g,C,B,I)=>{g=P(g),-1===I&&(I=4294967295);var Q=A=>A;if(0===B){var E=32-8*C;Q=A=>A<<E>>>E}var w=g.includes(\"unsigned\"),D=(A,g)=>{};AA(A,{name:g,fromWireType:Q,toWireType:w?function(A,g){return D(g,this.name),g>>>0}:function(A,g){return D(g,this.name),g},argPackAdvance:8,readValueFromPointer:AH(g,C,0!==B),destructorFunction:null})},a:(A,g,C)=>{var B=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][g];function I(A){var g=L[A>>2],C=L[A+4>>2];return new B(w.buffer,C,g)}AA(A,{name:C=P(C),fromWireType:I,argPackAdvance:8,readValueFromPointer:I},{ignoreDuplicateRegistrations:!0})},g:(A,g)=>{var C=\"std::string\"===(g=P(g));AA(A,{name:g,fromWireType(A){var g,B=L[A>>2],I=A+4;if(C)for(var Q=I,E=0;E<=B;++E){var w=I+E;if(E==B||0==D[w]){var G=w-Q,i=Ay(Q,G);void 0===g?g=i:g+=\"\\x00\"+i,Q=w+1}}else{for(var o=Array(B),E=0;E<B;++E)o[E]=String.fromCharCode(D[I+E]);g=o.join(\"\")}return AO(A),g},toWireType(A,g){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var B,I=\"string\"==typeof g;I||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array||f(\"Cannot pass non-string to std::string\"),B=C&&I?AM(g):g.length;var Q=Av(4+B+1),E=Q+4;if(L[Q>>2]=B,C&&I)AZ(g,E,B+1);else if(I)for(var w=0;w<B;++w){var G=g.charCodeAt(w);G>255&&(AO(E),f(\"String has UTF-16 code units that do not fit in 8 bits\")),D[E+w]=G}else for(var w=0;w<B;++w)D[E+w]=g[w];return null!==A&&A.push(AO,Q),Q},argPackAdvance:8,readValueFromPointer:Ak,destructorFunction(A){AO(A)}})},d:(A,g,C)=>{var B,I,Q,E,w;C=P(C),2===g?(B=Ap,I=Ab,E=Al,Q=()=>i,w=1):4===g&&(B=AS,I=Am,E=Aq,Q=()=>L,w=2),AA(A,{name:C,fromWireType:A=>{for(var C,I=L[A>>2],E=Q(),D=A+4,G=0;G<=I;++G){var i=A+4+G*g;if(G==I||0==E[i>>w]){var o=i-D,Y=B(D,o);void 0===C?C=Y:C+=\"\\x00\"+Y,D=i+g}}return AO(A),C},toWireType:(A,B)=>{\"string\"!=typeof B&&f(`Cannot pass non-string to C++ string type ${C}`);var Q=E(B),D=Av(4+Q+g);return L[D>>2]=Q>>w,I(B,D+4,Q+g),null!==A&&A.push(AO,D),D},argPackAdvance:8,readValueFromPointer:AQ,destructorFunction(A){AO(A)}})},j:(A,g)=>{AA(A,{isVoid:!0,name:g=P(g),argPackAdvance:0,fromWireType:()=>void 0,toWireType:(A,g)=>void 0})},l:AB,m:A=>{A>4&&(AC.get(A).refcount+=1)},h:(A,g)=>{var C=(A=At(A,\"_emval_take_value\")).readValueFromPointer(g);return AI.toHandle(C)},o:()=>{X(\"\")},q:(A,g,C)=>D.copyWithin(A,g,g+C),p:A=>{var g=D.length;A>>>=0;var C=AV();if(A>C)return!1;for(var B=(A,g)=>A+(g-A%g)%g,I=1;I<=4;I*=2){var Q=g*(1+.2/I);if(Q=Math.min(Q,A+100663296),AX(Math.min(C,B(Math.max(A,Q),65536))))return!0}return!1},k:(A,g)=>{An(A)}},Aj=function(){var A,C={a:Ax};function w(A,C){var B;return E=(Aj=A.exports).s,b(),K=Aj.u,B=Aj.t,S.unshift(B),function(A){if(q--,g.monitorRunDependencies&&g.monitorRunDependencies(q),0==q&&(null!==t&&(clearInterval(t),t=null),V)){var C=V;V=null,C()}}(0),Aj}if(q++,g.monitorRunDependencies&&g.monitorRunDependencies(q),g.instantiateWasm)try{return g.instantiateWasm(C,w)}catch(A){y(`Module.instantiateWasm callback failed with error: ${A}`),B(A)}return(A=h,Promise.resolve().then(()=>(function(A){if(A==h&&Q)return new Uint8Array(Q);var g=function(A){if(n(A))return function(A){try{for(var g=atob(A),C=new Uint8Array(g.length),B=0;B<g.length;++B)C[B]=g.charCodeAt(B);return C}catch(A){throw Error(\"Converting base64 string to bytes failed.\")}}(A.slice(u.length))}(A);if(g)return g;if(I)return I(A);throw\"both async and sync fetching of the wasm failed\"})(A)).then(A=>WebAssembly.instantiate(A,C)).then(A=>A).then(function(A){w(A.instance)},A=>{y(`failed to asynchronously prepare wasm: ${A}`),X(A)})).catch(B),{}}(),Av=A=>(Av=Aj.v)(A),AO=A=>(AO=Aj.w)(A),Ar=A=>(Ar=Aj.x)(A),AP=(g.__embind_initialize_bindings=()=>(g.__embind_initialize_bindings=Aj.y)(),A=>(AP=Aj.z)(A));function Az(){!(q>0)&&(function(){if(g.preRun)for(\"function\"==typeof g.preRun&&(g.preRun=[g.preRun]);g.preRun.length;){var A;A=g.preRun.shift(),l.unshift(A)}j(l)}(),q>0||(g.setStatus?(g.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){g.setStatus(\"\")},1),A()},1)):A()));function A(){!R&&(R=!0,g.calledRun=!0,p||(j(S),C(g),g.onRuntimeInitialized&&g.onRuntimeInitialized(),function(){if(g.postRun)for(\"function\"==typeof g.postRun&&(g.postRun=[g.postRun]);g.postRun.length;){var A;A=g.postRun.shift(),m.unshift(A)}j(m)}()))}}if(V=function A(){R||Az(),R||(V=A)},g.preInit)for(\"function\"==typeof g.preInit&&(g.preInit=[g.preInit]);g.preInit.length>0;)g.preInit.pop()();return Az(),g.ready});let C=new Promise(A=>{g({onRuntimeInitialized(){A(this)}})});/**\n * Asynchronously loads the WOFF2 module.\n *\n * @returns A promise resolving to the WOFF2 module.\n * @internal\n */async function B(){let A=await C;return new Promise(g=>{setTimeout(()=>{g(A)},0)})}async function I(A){let g=await B(),C=await g.compress(A);if(!C)throw Error(\"Failed to compress the font data.\");return Uint8Array.from(C)}async function Q(A){let g=await B(),C=await g.decompress(A);if(!C)throw Error(\"Failed to decompress the font data.\");return Uint8Array.from(C)}export{I as compress,Q as decompress};","/*\n (c) 2017, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n(function () { 'use strict';\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1.x - p2.x,\n        dy = p1.y - p2.y;\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n\n    var x = p1.x,\n        y = p1.y,\n        dx = p2.x - x,\n        dy = p2.y - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2.x;\n            y = p2.y;\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p.x - x;\n    dy = p.y - y;\n\n    return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n\n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n        index;\n\n    for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n            index = i;\n            maxSqDist = sqDist;\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n    var last = points.length - 1;\n\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n\n    return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n\n    if (points.length <= 2) return points;\n\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n\n    return points;\n}\n\n// export as AMD module / Node module / browser or worker variable\nif (typeof define === 'function' && define.amd) define(function() { return simplify; });\nelse if (typeof module !== 'undefined') {\n    module.exports = simplify;\n    module.exports.default = simplify;\n} else if (typeof self !== 'undefined') self.simplify = simplify;\nelse window.simplify = simplify;\n\n})();\n","(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"module\"], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(module);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod);\n        global.fitCurve = mod.exports;\n    }\n})(this, function (module) {\n    \"use strict\";\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    /**\n     *  @preserve  JavaScript implementation of\n     *  Algorithm for Automatically Fitting Digitized Curves\n     *  by Philip J. Schneider\n     *  \"Graphics Gems\", Academic Press, 1990\n     *\n     *  The MIT License (MIT)\n     *\n     *  https://github.com/soswow/fit-curves\n     */\n\n    /**\n     * Fit one or more Bezier curves to a set of points.\n     *\n     * @param {Array<Array<Number>>} points - Array of digitized points, e.g. [[5,5],[5,50],[110,140],[210,160],[320,110]]\n     * @param {Number} maxError - Tolerance, squared error between points and fitted curve\n     * @returns {Array<Array<Array<Number>>>} Array of Bezier curves, where each element is [first-point, control-point-1, control-point-2, second-point] and points are [x, y]\n     */\n    function fitCurve(points, maxError, progressCallback) {\n        if (!Array.isArray(points)) {\n            throw new TypeError(\"First argument should be an array\");\n        }\n        points.forEach(function (point) {\n            if (!Array.isArray(point) || point.some(function (item) {\n                return typeof item !== 'number';\n            }) || point.length !== points[0].length) {\n                throw Error(\"Each point should be an array of numbers. Each point should have the same amount of numbers.\");\n            }\n        });\n\n        // Remove duplicate points\n        points = points.filter(function (point, i) {\n            return i === 0 || !point.every(function (val, j) {\n                return val === points[i - 1][j];\n            });\n        });\n\n        if (points.length < 2) {\n            return [];\n        }\n\n        var len = points.length;\n        var leftTangent = createTangent(points[1], points[0]);\n        var rightTangent = createTangent(points[len - 2], points[len - 1]);\n\n        return fitCubic(points, leftTangent, rightTangent, maxError, progressCallback);\n    }\n\n    /**\n     * Fit a Bezier curve to a (sub)set of digitized points.\n     * Your code should not call this function directly. Use {@link fitCurve} instead.\n     *\n     * @param {Array<Array<Number>>} points - Array of digitized points, e.g. [[5,5],[5,50],[110,140],[210,160],[320,110]]\n     * @param {Array<Number>} leftTangent - Unit tangent vector at start point\n     * @param {Array<Number>} rightTangent - Unit tangent vector at end point\n     * @param {Number} error - Tolerance, squared error between points and fitted curve\n     * @returns {Array<Array<Array<Number>>>} Array of Bezier curves, where each element is [first-point, control-point-1, control-point-2, second-point] and points are [x, y]\n     */\n    function fitCubic(points, leftTangent, rightTangent, error, progressCallback) {\n        var MaxIterations = 20; //Max times to try iterating (to find an acceptable curve)\n\n        var bezCurve, //Control points of fitted Bezier curve\n        u, //Parameter values for point\n        uPrime, //Improved parameter values\n        maxError, prevErr, //Maximum fitting error\n        splitPoint, prevSplit, //Point to split point set at if we need more than one curve\n        centerVector, toCenterTangent, fromCenterTangent, //Unit tangent vector(s) at splitPoint\n        beziers, //Array of fitted Bezier curves if we need more than one curve\n        dist, i;\n\n        //console.log('fitCubic, ', points.length);\n\n        //Use heuristic if region only has two points in it\n        if (points.length === 2) {\n            dist = maths.vectorLen(maths.subtract(points[0], points[1])) / 3.0;\n            bezCurve = [points[0], maths.addArrays(points[0], maths.mulItems(leftTangent, dist)), maths.addArrays(points[1], maths.mulItems(rightTangent, dist)), points[1]];\n            return [bezCurve];\n        }\n\n        //Parameterize points, and attempt to fit curve\n        u = chordLengthParameterize(points);\n\n        var _generateAndReport = generateAndReport(points, u, u, leftTangent, rightTangent, progressCallback);\n\n        bezCurve = _generateAndReport[0];\n        maxError = _generateAndReport[1];\n        splitPoint = _generateAndReport[2];\n\n\n        if (maxError === 0 || maxError < error) {\n            return [bezCurve];\n        }\n        //If error not too large, try some reparameterization and iteration\n        if (maxError < error * error) {\n\n            uPrime = u;\n            prevErr = maxError;\n            prevSplit = splitPoint;\n\n            for (i = 0; i < MaxIterations; i++) {\n\n                uPrime = reparameterize(bezCurve, points, uPrime);\n\n                var _generateAndReport2 = generateAndReport(points, u, uPrime, leftTangent, rightTangent, progressCallback);\n\n                bezCurve = _generateAndReport2[0];\n                maxError = _generateAndReport2[1];\n                splitPoint = _generateAndReport2[2];\n\n\n                if (maxError < error) {\n                    return [bezCurve];\n                }\n                //If the development of the fitted curve grinds to a halt,\n                //we abort this attempt (and try a shorter curve):\n                else if (splitPoint === prevSplit) {\n                        var errChange = maxError / prevErr;\n                        if (errChange > .9999 && errChange < 1.0001) {\n                            break;\n                        }\n                    }\n\n                prevErr = maxError;\n                prevSplit = splitPoint;\n            }\n        }\n\n        //Fitting failed -- split at max error point and fit recursively\n        beziers = [];\n\n        //To create a smooth transition from one curve segment to the next, we\n        //calculate the line between the points directly before and after the\n        //center, and use that as the tangent both to and from the center point.\n        centerVector = maths.subtract(points[splitPoint - 1], points[splitPoint + 1]);\n        //However, this won't work if they're the same point, because the line we\n        //want to use as a tangent would be 0. Instead, we calculate the line from\n        //that \"double-point\" to the center point, and use its tangent.\n        if (centerVector.every(function (val) {\n            return val === 0;\n        })) {\n            //[x,y] -> [-y,x]: http://stackoverflow.com/a/4780141/1869660\n            centerVector = maths.subtract(points[splitPoint - 1], points[splitPoint]);\n            var _ref = [-centerVector[1], centerVector[0]];\n            centerVector[0] = _ref[0];\n            centerVector[1] = _ref[1];\n        }\n        toCenterTangent = maths.normalize(centerVector);\n        //To and from need to point in opposite directions:\n        fromCenterTangent = maths.mulItems(toCenterTangent, -1);\n\n        /*\n        Note: An alternative to this \"divide and conquer\" recursion could be to always\n              let new curve segments start by trying to go all the way to the end,\n              instead of only to the end of the current subdivided polyline.\n              That might let many segments fit a few points more, reducing the number of total segments.\n               However, a few tests have shown that the segment reduction is insignificant\n              (240 pts, 100 err: 25 curves vs 27 curves. 140 pts, 100 err: 17 curves on both),\n              and the results take twice as many steps and milliseconds to finish,\n              without looking any better than what we already have.\n        */\n        beziers = beziers.concat(fitCubic(points.slice(0, splitPoint + 1), leftTangent, toCenterTangent, error, progressCallback));\n        beziers = beziers.concat(fitCubic(points.slice(splitPoint), fromCenterTangent, rightTangent, error, progressCallback));\n        return beziers;\n    };\n\n    function generateAndReport(points, paramsOrig, paramsPrime, leftTangent, rightTangent, progressCallback) {\n        var bezCurve, maxError, splitPoint;\n\n        bezCurve = generateBezier(points, paramsPrime, leftTangent, rightTangent, progressCallback);\n        //Find max deviation of points to fitted curve.\n        //Here we always use the original parameters (from chordLengthParameterize()),\n        //because we need to compare the current curve to the actual source polyline,\n        //and not the currently iterated parameters which reparameterize() & generateBezier() use,\n        //as those have probably drifted far away and may no longer be in ascending order.\n\n        var _computeMaxError = computeMaxError(points, bezCurve, paramsOrig);\n\n        maxError = _computeMaxError[0];\n        splitPoint = _computeMaxError[1];\n\n\n        if (progressCallback) {\n            progressCallback({\n                bez: bezCurve,\n                points: points,\n                params: paramsOrig,\n                maxErr: maxError,\n                maxPoint: splitPoint\n            });\n        }\n\n        return [bezCurve, maxError, splitPoint];\n    }\n\n    /**\n     * Use least-squares method to find Bezier control points for region.\n     *\n     * @param {Array<Array<Number>>} points - Array of digitized points\n     * @param {Array<Number>} parameters - Parameter values for region\n     * @param {Array<Number>} leftTangent - Unit tangent vector at start point\n     * @param {Array<Number>} rightTangent - Unit tangent vector at end point\n     * @returns {Array<Array<Number>>} Approximated Bezier curve: [first-point, control-point-1, control-point-2, second-point] where points are [x, y]\n     */\n    function generateBezier(points, parameters, leftTangent, rightTangent) {\n        var bezCurve,\n            //Bezier curve ctl pts\n        A,\n            a,\n            //Precomputed rhs for eqn\n        C,\n            X,\n            //Matrices C & X\n        det_C0_C1,\n            det_C0_X,\n            det_X_C1,\n            //Determinants of matrices\n        alpha_l,\n            alpha_r,\n            //Alpha values, left and right\n\n        epsilon,\n            segLength,\n            i,\n            len,\n            tmp,\n            u,\n            ux,\n            firstPoint = points[0],\n            lastPoint = points[points.length - 1];\n\n        bezCurve = [firstPoint, null, null, lastPoint];\n        //console.log('gb', parameters.length);\n\n        //Compute the A's\n        A = maths.zeros_Xx2x2(parameters.length);\n        for (i = 0, len = parameters.length; i < len; i++) {\n            u = parameters[i];\n            ux = 1 - u;\n            a = A[i];\n\n            a[0] = maths.mulItems(leftTangent, 3 * u * (ux * ux));\n            a[1] = maths.mulItems(rightTangent, 3 * ux * (u * u));\n        }\n\n        //Create the C and X matrices\n        C = [[0, 0], [0, 0]];\n        X = [0, 0];\n        for (i = 0, len = points.length; i < len; i++) {\n            u = parameters[i];\n            a = A[i];\n\n            C[0][0] += maths.dot(a[0], a[0]);\n            C[0][1] += maths.dot(a[0], a[1]);\n            C[1][0] += maths.dot(a[0], a[1]);\n            C[1][1] += maths.dot(a[1], a[1]);\n\n            tmp = maths.subtract(points[i], bezier.q([firstPoint, firstPoint, lastPoint, lastPoint], u));\n\n            X[0] += maths.dot(a[0], tmp);\n            X[1] += maths.dot(a[1], tmp);\n        }\n\n        //Compute the determinants of C and X\n        det_C0_C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1];\n        det_C0_X = C[0][0] * X[1] - C[1][0] * X[0];\n        det_X_C1 = X[0] * C[1][1] - X[1] * C[0][1];\n\n        //Finally, derive alpha values\n        alpha_l = det_C0_C1 === 0 ? 0 : det_X_C1 / det_C0_C1;\n        alpha_r = det_C0_C1 === 0 ? 0 : det_C0_X / det_C0_C1;\n\n        //If alpha negative, use the Wu/Barsky heuristic (see text).\n        //If alpha is 0, you get coincident control points that lead to\n        //divide by zero in any subsequent NewtonRaphsonRootFind() call.\n        segLength = maths.vectorLen(maths.subtract(firstPoint, lastPoint));\n        epsilon = 1.0e-6 * segLength;\n        if (alpha_l < epsilon || alpha_r < epsilon) {\n            //Fall back on standard (probably inaccurate) formula, and subdivide further if needed.\n            bezCurve[1] = maths.addArrays(firstPoint, maths.mulItems(leftTangent, segLength / 3.0));\n            bezCurve[2] = maths.addArrays(lastPoint, maths.mulItems(rightTangent, segLength / 3.0));\n        } else {\n            //First and last control points of the Bezier curve are\n            //positioned exactly at the first and last data points\n            //Control points 1 and 2 are positioned an alpha distance out\n            //on the tangent vectors, left and right, respectively\n            bezCurve[1] = maths.addArrays(firstPoint, maths.mulItems(leftTangent, alpha_l));\n            bezCurve[2] = maths.addArrays(lastPoint, maths.mulItems(rightTangent, alpha_r));\n        }\n\n        return bezCurve;\n    };\n\n    /**\n     * Given set of points and their parameterization, try to find a better parameterization.\n     *\n     * @param {Array<Array<Number>>} bezier - Current fitted curve\n     * @param {Array<Array<Number>>} points - Array of digitized points\n     * @param {Array<Number>} parameters - Current parameter values\n     * @returns {Array<Number>} New parameter values\n     */\n    function reparameterize(bezier, points, parameters) {\n        /*\n        var j, len, point, results, u;\n        results = [];\n        for (j = 0, len = points.length; j < len; j++) {\n            point = points[j], u = parameters[j];\n             results.push(newtonRaphsonRootFind(bezier, point, u));\n        }\n        return results;\n        //*/\n        return parameters.map(function (p, i) {\n            return newtonRaphsonRootFind(bezier, points[i], p);\n        });\n    };\n\n    /**\n     * Use Newton-Raphson iteration to find better root.\n     *\n     * @param {Array<Array<Number>>} bez - Current fitted curve\n     * @param {Array<Number>} point - Digitized point\n     * @param {Number} u - Parameter value for \"P\"\n     * @returns {Number} New u\n     */\n    function newtonRaphsonRootFind(bez, point, u) {\n        /*\n            Newton's root finding algorithm calculates f(x)=0 by reiterating\n            x_n+1 = x_n - f(x_n)/f'(x_n)\n            We are trying to find curve parameter u for some point p that minimizes\n            the distance from that point to the curve. Distance point to curve is d=q(u)-p.\n            At minimum distance the point is perpendicular to the curve.\n            We are solving\n            f = q(u)-p * q'(u) = 0\n            with\n            f' = q'(u) * q'(u) + q(u)-p * q''(u)\n            gives\n            u_n+1 = u_n - |q(u_n)-p * q'(u_n)| / |q'(u_n)**2 + q(u_n)-p * q''(u_n)|\n        */\n\n        var d = maths.subtract(bezier.q(bez, u), point),\n            qprime = bezier.qprime(bez, u),\n            numerator = maths.mulMatrix(d, qprime),\n            denominator = maths.sum(maths.squareItems(qprime)) + 2 * maths.mulMatrix(d, bezier.qprimeprime(bez, u));\n\n        if (denominator === 0) {\n            return u;\n        } else {\n            return u - numerator / denominator;\n        }\n    };\n\n    /**\n     * Assign parameter values to digitized points using relative distances between points.\n     *\n     * @param {Array<Array<Number>>} points - Array of digitized points\n     * @returns {Array<Number>} Parameter values\n     */\n    function chordLengthParameterize(points) {\n        var u = [],\n            currU,\n            prevU,\n            prevP;\n\n        points.forEach(function (p, i) {\n            currU = i ? prevU + maths.vectorLen(maths.subtract(p, prevP)) : 0;\n            u.push(currU);\n\n            prevU = currU;\n            prevP = p;\n        });\n        u = u.map(function (x) {\n            return x / prevU;\n        });\n\n        return u;\n    };\n\n    /**\n     * Find the maximum squared distance of digitized points to fitted curve.\n     *\n     * @param {Array<Array<Number>>} points - Array of digitized points\n     * @param {Array<Array<Number>>} bez - Fitted curve\n     * @param {Array<Number>} parameters - Parameterization of points\n     * @returns {Array<Number>} Maximum error (squared) and point of max error\n     */\n    function computeMaxError(points, bez, parameters) {\n        var dist, //Current error\n        maxDist, //Maximum error\n        splitPoint, //Point of maximum error\n        v, //Vector from point to curve\n        i, count, point, t;\n\n        maxDist = 0;\n        splitPoint = Math.floor(points.length / 2);\n\n        var t_distMap = mapTtoRelativeDistances(bez, 10);\n\n        for (i = 0, count = points.length; i < count; i++) {\n            point = points[i];\n            //Find 't' for a point on the bez curve that's as close to 'point' as possible:\n            t = find_t(bez, parameters[i], t_distMap, 10);\n\n            v = maths.subtract(bezier.q(bez, t), point);\n            dist = v[0] * v[0] + v[1] * v[1];\n\n            if (dist > maxDist) {\n                maxDist = dist;\n                splitPoint = i;\n            }\n        }\n\n        return [maxDist, splitPoint];\n    };\n\n    //Sample 't's and map them to relative distances along the curve:\n    var mapTtoRelativeDistances = function mapTtoRelativeDistances(bez, B_parts) {\n        var B_t_curr;\n        var B_t_dist = [0];\n        var B_t_prev = bez[0];\n        var sumLen = 0;\n\n        for (var i = 1; i <= B_parts; i++) {\n            B_t_curr = bezier.q(bez, i / B_parts);\n\n            sumLen += maths.vectorLen(maths.subtract(B_t_curr, B_t_prev));\n\n            B_t_dist.push(sumLen);\n            B_t_prev = B_t_curr;\n        }\n\n        //Normalize B_length to the same interval as the parameter distances; 0 to 1:\n        B_t_dist = B_t_dist.map(function (x) {\n            return x / sumLen;\n        });\n        return B_t_dist;\n    };\n\n    function find_t(bez, param, t_distMap, B_parts) {\n        if (param < 0) {\n            return 0;\n        }\n        if (param > 1) {\n            return 1;\n        }\n\n        /*\n            'param' is a value between 0 and 1 telling us the relative position\n            of a point on the source polyline (linearly from the start (0) to the end (1)).\n            To see if a given curve - 'bez' - is a close approximation of the polyline,\n            we compare such a poly-point to the point on the curve that's the same\n            relative distance along the curve's length.\n             But finding that curve-point takes a little work:\n            There is a function \"B(t)\" to find points along a curve from the parametric parameter 't'\n            (also relative from 0 to 1: http://stackoverflow.com/a/32841764/1869660\n                                        http://pomax.github.io/bezierinfo/#explanation),\n            but 't' isn't linear by length (http://gamedev.stackexchange.com/questions/105230).\n             So, we sample some points along the curve using a handful of values for 't'.\n            Then, we calculate the length between those samples via plain euclidean distance;\n            B(t) concentrates the points around sharp turns, so this should give us a good-enough outline of the curve.\n            Thus, for a given relative distance ('param'), we can now find an upper and lower value\n            for the corresponding 't' by searching through those sampled distances.\n            Finally, we just use linear interpolation to find a better value for the exact 't'.\n             More info:\n                http://gamedev.stackexchange.com/questions/105230/points-evenly-spaced-along-a-bezier-curve\n                http://stackoverflow.com/questions/29438398/cheap-way-of-calculating-cubic-bezier-length\n                http://steve.hollasch.net/cgindex/curves/cbezarclen.html\n                https://github.com/retuxx/tinyspline\n        */\n        var lenMax, lenMin, tMax, tMin, t;\n\n        //Find the two t-s that the current param distance lies between,\n        //and then interpolate a somewhat accurate value for the exact t:\n        for (var i = 1; i <= B_parts; i++) {\n\n            if (param <= t_distMap[i]) {\n                tMin = (i - 1) / B_parts;\n                tMax = i / B_parts;\n                lenMin = t_distMap[i - 1];\n                lenMax = t_distMap[i];\n\n                t = (param - lenMin) / (lenMax - lenMin) * (tMax - tMin) + tMin;\n                break;\n            }\n        }\n        return t;\n    }\n\n    /**\n     * Creates a vector of length 1 which shows the direction from B to A\n     */\n    function createTangent(pointA, pointB) {\n        return maths.normalize(maths.subtract(pointA, pointB));\n    }\n\n    /*\n        Simplified versions of what we need from math.js\n        Optimized for our input, which is only numbers and 1x2 arrays (i.e. [x, y] coordinates).\n    */\n\n    var maths = function () {\n        function maths() {\n            _classCallCheck(this, maths);\n        }\n\n        maths.zeros_Xx2x2 = function zeros_Xx2x2(x) {\n            var zs = [];\n            while (x--) {\n                zs.push([0, 0]);\n            }\n            return zs;\n        };\n\n        maths.mulItems = function mulItems(items, multiplier) {\n            return items.map(function (x) {\n                return x * multiplier;\n            });\n        };\n\n        maths.mulMatrix = function mulMatrix(m1, m2) {\n            //https://en.wikipedia.org/wiki/Matrix_multiplication#Matrix_product_.28two_matrices.29\n            //Simplified to only handle 1-dimensional matrices (i.e. arrays) of equal length:\n            return m1.reduce(function (sum, x1, i) {\n                return sum + x1 * m2[i];\n            }, 0);\n        };\n\n        maths.subtract = function subtract(arr1, arr2) {\n            return arr1.map(function (x1, i) {\n                return x1 - arr2[i];\n            });\n        };\n\n        maths.addArrays = function addArrays(arr1, arr2) {\n            return arr1.map(function (x1, i) {\n                return x1 + arr2[i];\n            });\n        };\n\n        maths.addItems = function addItems(items, addition) {\n            return items.map(function (x) {\n                return x + addition;\n            });\n        };\n\n        maths.sum = function sum(items) {\n            return items.reduce(function (sum, x) {\n                return sum + x;\n            });\n        };\n\n        maths.dot = function dot(m1, m2) {\n            return maths.mulMatrix(m1, m2);\n        };\n\n        maths.vectorLen = function vectorLen(v) {\n            return Math.hypot.apply(Math, v);\n        };\n\n        maths.divItems = function divItems(items, divisor) {\n            return items.map(function (x) {\n                return x / divisor;\n            });\n        };\n\n        maths.squareItems = function squareItems(items) {\n            return items.map(function (x) {\n                return x * x;\n            });\n        };\n\n        maths.normalize = function normalize(v) {\n            return this.divItems(v, this.vectorLen(v));\n        };\n\n        return maths;\n    }();\n\n    var bezier = function () {\n        function bezier() {\n            _classCallCheck(this, bezier);\n        }\n\n        bezier.q = function q(ctrlPoly, t) {\n            var tx = 1.0 - t;\n            var pA = maths.mulItems(ctrlPoly[0], tx * tx * tx),\n                pB = maths.mulItems(ctrlPoly[1], 3 * tx * tx * t),\n                pC = maths.mulItems(ctrlPoly[2], 3 * tx * t * t),\n                pD = maths.mulItems(ctrlPoly[3], t * t * t);\n            return maths.addArrays(maths.addArrays(pA, pB), maths.addArrays(pC, pD));\n        };\n\n        bezier.qprime = function qprime(ctrlPoly, t) {\n            var tx = 1.0 - t;\n            var pA = maths.mulItems(maths.subtract(ctrlPoly[1], ctrlPoly[0]), 3 * tx * tx),\n                pB = maths.mulItems(maths.subtract(ctrlPoly[2], ctrlPoly[1]), 6 * tx * t),\n                pC = maths.mulItems(maths.subtract(ctrlPoly[3], ctrlPoly[2]), 3 * t * t);\n            return maths.addArrays(maths.addArrays(pA, pB), pC);\n        };\n\n        bezier.qprimeprime = function qprimeprime(ctrlPoly, t) {\n            return maths.addArrays(maths.mulItems(maths.addArrays(maths.subtract(ctrlPoly[2], maths.mulItems(ctrlPoly[1], 2)), ctrlPoly[0]), 6 * (1.0 - t)), maths.mulItems(maths.addArrays(maths.subtract(ctrlPoly[3], maths.mulItems(ctrlPoly[2], 2)), ctrlPoly[1]), 6 * t));\n        };\n\n        return bezier;\n    }();\n\n    module.exports = fitCurve;\n    module.exports.fitCubic = fitCubic;\n    module.exports.createTangent = createTangent;\n});\n","import { createConsole } from \"./Console.ts\";\nimport { Vector2 } from \"./MathUtils.ts\";\nimport { DisplayBezierCurve } from \"../DisplayManager.ts\";\nimport simplify from \"simplify-js\";\nimport fitCurve from \"fit-curve\";\n\nconst _console = createConsole(\"PathUtils\", { log: false });\n\nfunction perpendicularDistance(p: Vector2, p1: Vector2, p2: Vector2): number {\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  if (dx === 0 && dy === 0) return Math.hypot(p.x - p1.x, p.y - p1.y);\n  const t = ((p.x - p1.x) * dx + (p.y - p1.y) * dy) / (dx * dx + dy * dy);\n  const projX = p1.x + t * dx;\n  const projY = p1.y + t * dy;\n  return Math.hypot(p.x - projX, p.y - projY);\n}\n\nfunction rdp(points: Vector2[], epsilon: number): Vector2[] {\n  if (points.length < 3) return points;\n  let maxDist = 0;\n  let index = 0;\n  for (let i = 1; i < points.length - 1; i++) {\n    const d = perpendicularDistance(\n      points[i],\n      points[0],\n      points[points.length - 1]\n    );\n    if (d > maxDist) {\n      maxDist = d;\n      index = i;\n    }\n  }\n  if (maxDist > epsilon) {\n    const left = rdp(points.slice(0, index + 1), epsilon);\n    const right = rdp(points.slice(index), epsilon);\n    return left.slice(0, -1).concat(right);\n  }\n  return [points[0], points[points.length - 1]];\n}\n\n// Linear interpolation\nfunction lerp(a: number, b: number, t: number) {\n  return a + (b - a) * t;\n}\n\n// Sample quadratic Bezier\nfunction sampleQuadratic(\n  p0: Vector2,\n  p1: Vector2,\n  p2: Vector2,\n  steps: number = 5\n): Vector2[] {\n  const points: Vector2[] = [];\n  for (let i = 0; i <= steps; i++) {\n    const t = i / steps;\n    const x = (1 - t) ** 2 * p0.x + 2 * (1 - t) * t * p1.x + t ** 2 * p2.x;\n    const y = (1 - t) ** 2 * p0.y + 2 * (1 - t) * t * p1.y + t ** 2 * p2.y;\n    points.push({ x, y });\n  }\n  return points;\n}\n\n// Sample cubic Bezier\nfunction sampleCubic(\n  p0: Vector2,\n  p1: Vector2,\n  p2: Vector2,\n  p3: Vector2,\n  steps: number = 5\n): Vector2[] {\n  const points: Vector2[] = [];\n  for (let i = 0; i <= steps; i++) {\n    const t = i / steps;\n    const mt = 1 - t;\n    const x =\n      mt ** 3 * p0.x +\n      3 * mt ** 2 * t * p1.x +\n      3 * mt * t ** 2 * p2.x +\n      t ** 3 * p3.x;\n    const y =\n      mt ** 3 * p0.y +\n      3 * mt ** 2 * t * p1.y +\n      3 * mt * t ** 2 * p2.y +\n      t ** 3 * p3.y;\n    points.push({ x, y });\n  }\n  return points;\n}\n\nfunction areCollinear(\n  p1: Vector2,\n  p2: Vector2,\n  p3: Vector2,\n  epsilon = 1e-6\n): boolean {\n  // Vector p1->p2\n  const dx1 = p2.x - p1.x;\n  const dy1 = p2.y - p1.y;\n\n  // Vector p2->p3\n  const dx2 = p3.x - p2.x;\n  const dy2 = p3.y - p2.y;\n\n  // Cross product\n  const cross = dx1 * dy2 - dy1 * dx2;\n  return Math.abs(cross) < epsilon;\n}\n\nexport function simplifyCurves(curves: DisplayBezierCurve[], epsilon = 1) {\n  const simplified: DisplayBezierCurve[] = [];\n  //_console.log(\"simplifying\", curves, { epsilon });\n  let cursor: Vector2;\n  curves.forEach((curve, index) => {\n    const { controlPoints } = curve;\n    const isFirst = index == 0;\n    if (isFirst) {\n      cursor = controlPoints[0];\n    }\n\n    switch (curve.type) {\n      case \"segment\":\n        {\n          // Merge collinear lines\n          const lastPoint = controlPoints.at(-1)!;\n          const lastCommand = simplified.at(-1);\n          if (lastCommand?.type == \"segment\" && simplified.length >= 2) {\n            const [c1, c2] = [simplified.at(-1)!, simplified.at(-2)!];\n            if (\n              areCollinear(\n                c2.controlPoints.at(-1)!,\n                c1.controlPoints.at(-1)!,\n                lastPoint\n              )\n            ) {\n              // Remove middle collinear point\n              simplified.pop();\n            }\n          }\n          simplified.push({ ...curve });\n          cursor = lastPoint;\n        }\n        break;\n      case \"quadratic\":\n        {\n          const p0 = cursor;\n          const p1 = controlPoints.at(-2)!;\n          const p2 = controlPoints.at(-1)!;\n\n          // Sample points along the curve\n          const sampled = sampleQuadratic(p0, p1, p2, 5);\n          const simplifiedPoints = rdp(sampled, epsilon);\n\n          // If curve is almost straight, convert to a line\n          if (simplifiedPoints.length === 2) {\n            simplified.push({\n              type: \"segment\",\n              controlPoints: [{ x: p2.x, y: p2.y }],\n            });\n            if (isFirst) {\n              simplified.at(-1)!.controlPoints.unshift({ ...p0 });\n            }\n          } else {\n            simplified.push({ ...curve }); // Keep the curve\n          }\n          cursor = p2;\n        }\n        break;\n      case \"cubic\":\n        {\n          const p0 = cursor;\n          const p1 = controlPoints.at(-3)!;\n          const p2 = controlPoints.at(-2)!;\n          const p3 = controlPoints.at(-1)!;\n\n          const sampled = sampleCubic(p0, p1, p2, p3, 5);\n          const simplifiedPoints = rdp(sampled, epsilon);\n\n          if (simplifiedPoints.length === 2) {\n            simplified.push({\n              type: \"segment\",\n              controlPoints: [{ x: p3.x, y: p3.y }],\n            });\n            if (isFirst) {\n              simplified.at(-1)!.controlPoints.unshift({ ...p0 });\n            }\n          } else {\n            simplified.push({ ...curve }); // Keep the curve\n          }\n          cursor = p3;\n        }\n        break;\n    }\n    cursor = curve.controlPoints[curve.controlPoints.length - 1];\n  });\n  //_console.log(\"simplified\", simplified);\n  return simplified;\n}\n\nexport function simplifyPoints(points: Vector2[], tolerance?: number) {\n  points = simplify(points, tolerance, false);\n  return points;\n}\nexport function simplifyPointsAsCubicCurveControlPoints(\n  points: Vector2[],\n  error?: number\n) {\n  const flatPoints = points.map(({ x, y }) => [x, y]);\n  const curves = fitCurve(flatPoints, error ?? 50);\n  const controlPoints: Vector2[] = [];\n  curves.forEach((curve, index) => {\n    const points = curve.map(([x, y]) => ({ x, y }));\n    if (index != 0) {\n      points.shift();\n    }\n    controlPoints.push(...points);\n  });\n  return controlPoints;\n}\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.svgson = factory());\n})(this, (function () { 'use strict';\n\n  /*!\n   * Determine if an object is a Buffer\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   */\n\n  // The _isBuffer check is for Safari 5-7 support, because it's missing\n  // Object.prototype.constructor. Remove this eventually\n  var isBuffer_1 = function (obj) {\n    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n  };\n\n  function isBuffer (obj) {\n    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n  }\n\n  // For Node v0.10 support. Remove this eventually.\n  function isSlowBuffer (obj) {\n    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n  }\n\n  var toString = Object.prototype.toString;\n\n  /**\n   * Get the native `typeof` a value.\n   *\n   * @param  {*} `val`\n   * @return {*} Native javascript type\n   */\n\n  var kindOf = function kindOf(val) {\n    // primitivies\n    if (typeof val === 'undefined') {\n      return 'undefined';\n    }\n    if (val === null) {\n      return 'null';\n    }\n    if (val === true || val === false || val instanceof Boolean) {\n      return 'boolean';\n    }\n    if (typeof val === 'string' || val instanceof String) {\n      return 'string';\n    }\n    if (typeof val === 'number' || val instanceof Number) {\n      return 'number';\n    }\n\n    // functions\n    if (typeof val === 'function' || val instanceof Function) {\n      return 'function';\n    }\n\n    // array\n    if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {\n      return 'array';\n    }\n\n    // check for instances of RegExp and Date before calling `toString`\n    if (val instanceof RegExp) {\n      return 'regexp';\n    }\n    if (val instanceof Date) {\n      return 'date';\n    }\n\n    // other objects\n    var type = toString.call(val);\n\n    if (type === '[object RegExp]') {\n      return 'regexp';\n    }\n    if (type === '[object Date]') {\n      return 'date';\n    }\n    if (type === '[object Arguments]') {\n      return 'arguments';\n    }\n    if (type === '[object Error]') {\n      return 'error';\n    }\n\n    // buffer\n    if (isBuffer_1(val)) {\n      return 'buffer';\n    }\n\n    // es6: Map, WeakMap, Set, WeakSet\n    if (type === '[object Set]') {\n      return 'set';\n    }\n    if (type === '[object WeakSet]') {\n      return 'weakset';\n    }\n    if (type === '[object Map]') {\n      return 'map';\n    }\n    if (type === '[object WeakMap]') {\n      return 'weakmap';\n    }\n    if (type === '[object Symbol]') {\n      return 'symbol';\n    }\n\n    // typed arrays\n    if (type === '[object Int8Array]') {\n      return 'int8array';\n    }\n    if (type === '[object Uint8Array]') {\n      return 'uint8array';\n    }\n    if (type === '[object Uint8ClampedArray]') {\n      return 'uint8clampedarray';\n    }\n    if (type === '[object Int16Array]') {\n      return 'int16array';\n    }\n    if (type === '[object Uint16Array]') {\n      return 'uint16array';\n    }\n    if (type === '[object Int32Array]') {\n      return 'int32array';\n    }\n    if (type === '[object Uint32Array]') {\n      return 'uint32array';\n    }\n    if (type === '[object Float32Array]') {\n      return 'float32array';\n    }\n    if (type === '[object Float64Array]') {\n      return 'float64array';\n    }\n\n    // must be a plain object\n    return 'object';\n  };\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var renameKeys = createCommonjsModule(function (module) {\n  (function() {\n\n    function rename(obj, fn) {\n      if (typeof fn !== 'function') {\n        return obj;\n      }\n\n      var res = {};\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          res[fn(key, obj[key]) || key] = obj[key];\n        }\n      }\n      return res;\n    }\n\n    if (module.exports) {\n      module.exports = rename;\n    } else {\n      {\n        window.rename = rename;\n      }\n    }\n  })();\n  });\n\n  /**\n   * Expose `renameDeep`\n   */\n\n  var deepRenameKeys = function renameDeep(obj, cb) {\n    var type = kindOf(obj);\n\n    if (type !== 'object' && type !== 'array') {\n      throw new Error('expected an object');\n    }\n\n    var res = [];\n    if (type === 'object') {\n      obj = renameKeys(obj, cb);\n      res = {};\n    }\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var val = obj[key];\n        if (kindOf(val) === 'object' || kindOf(val) === 'array') {\n          res[key] = renameDeep(val, cb);\n        } else {\n          res[key] = val;\n        }\n      }\n    }\n    return res;\n  };\n\n  var eventemitter3 = createCommonjsModule(function (module) {\n\n  var has = Object.prototype.hasOwnProperty\n    , prefix = '~';\n\n  /**\n   * Constructor to create a storage for our `EE` objects.\n   * An `Events` instance is a plain object whose properties are event names.\n   *\n   * @constructor\n   * @api private\n   */\n  function Events() {}\n\n  //\n  // We try to not inherit from `Object.prototype`. In some engines creating an\n  // instance in this way is faster than calling `Object.create(null)` directly.\n  // If `Object.create(null)` is not supported we prefix the event names with a\n  // character to make sure that the built-in object properties are not\n  // overridden or used as an attack vector.\n  //\n  if (Object.create) {\n    Events.prototype = Object.create(null);\n\n    //\n    // This hack is needed because the `__proto__` property is still inherited in\n    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n    //\n    if (!new Events().__proto__) prefix = false;\n  }\n\n  /**\n   * Representation of a single event listener.\n   *\n   * @param {Function} fn The listener function.\n   * @param {Mixed} context The context to invoke the listener with.\n   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n   * @constructor\n   * @api private\n   */\n  function EE(fn, context, once) {\n    this.fn = fn;\n    this.context = context;\n    this.once = once || false;\n  }\n\n  /**\n   * Minimal `EventEmitter` interface that is molded against the Node.js\n   * `EventEmitter` interface.\n   *\n   * @constructor\n   * @api public\n   */\n  function EventEmitter() {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  /**\n   * Return an array listing the events for which the emitter has registered\n   * listeners.\n   *\n   * @returns {Array}\n   * @api public\n   */\n  EventEmitter.prototype.eventNames = function eventNames() {\n    var names = []\n      , events\n      , name;\n\n    if (this._eventsCount === 0) return names;\n\n    for (name in (events = this._events)) {\n      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      return names.concat(Object.getOwnPropertySymbols(events));\n    }\n\n    return names;\n  };\n\n  /**\n   * Return the listeners registered for a given event.\n   *\n   * @param {String|Symbol} event The event name.\n   * @param {Boolean} exists Only check if there are listeners.\n   * @returns {Array|Boolean}\n   * @api public\n   */\n  EventEmitter.prototype.listeners = function listeners(event, exists) {\n    var evt = prefix ? prefix + event : event\n      , available = this._events[evt];\n\n    if (exists) return !!available;\n    if (!available) return [];\n    if (available.fn) return [available.fn];\n\n    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n      ee[i] = available[i].fn;\n    }\n\n    return ee;\n  };\n\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * @param {String|Symbol} event The event name.\n   * @returns {Boolean} `true` if the event had listeners, else `false`.\n   * @api public\n   */\n  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n    var evt = prefix ? prefix + event : event;\n\n    if (!this._events[evt]) return false;\n\n    var listeners = this._events[evt]\n      , len = arguments.length\n      , args\n      , i;\n\n    if (listeners.fn) {\n      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n      switch (len) {\n        case 1: return listeners.fn.call(listeners.context), true;\n        case 2: return listeners.fn.call(listeners.context, a1), true;\n        case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n      }\n\n      for (i = 1, args = new Array(len -1); i < len; i++) {\n        args[i - 1] = arguments[i];\n      }\n\n      listeners.fn.apply(listeners.context, args);\n    } else {\n      var length = listeners.length\n        , j;\n\n      for (i = 0; i < length; i++) {\n        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n        switch (len) {\n          case 1: listeners[i].fn.call(listeners[i].context); break;\n          case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n          case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n          default:\n            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n              args[j - 1] = arguments[j];\n            }\n\n            listeners[i].fn.apply(listeners[i].context, args);\n        }\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Add a listener for a given event.\n   *\n   * @param {String|Symbol} event The event name.\n   * @param {Function} fn The listener function.\n   * @param {Mixed} [context=this] The context to invoke the listener with.\n   * @returns {EventEmitter} `this`.\n   * @api public\n   */\n  EventEmitter.prototype.on = function on(event, fn, context) {\n    var listener = new EE(fn, context || this)\n      , evt = prefix ? prefix + event : event;\n\n    if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n    else if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [this._events[evt], listener];\n\n    return this;\n  };\n\n  /**\n   * Add a one-time listener for a given event.\n   *\n   * @param {String|Symbol} event The event name.\n   * @param {Function} fn The listener function.\n   * @param {Mixed} [context=this] The context to invoke the listener with.\n   * @returns {EventEmitter} `this`.\n   * @api public\n   */\n  EventEmitter.prototype.once = function once(event, fn, context) {\n    var listener = new EE(fn, context || this, true)\n      , evt = prefix ? prefix + event : event;\n\n    if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n    else if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [this._events[evt], listener];\n\n    return this;\n  };\n\n  /**\n   * Remove the listeners of a given event.\n   *\n   * @param {String|Symbol} event The event name.\n   * @param {Function} fn Only remove the listeners that match this function.\n   * @param {Mixed} context Only remove the listeners that have this context.\n   * @param {Boolean} once Only remove one-time listeners.\n   * @returns {EventEmitter} `this`.\n   * @api public\n   */\n  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n    var evt = prefix ? prefix + event : event;\n\n    if (!this._events[evt]) return this;\n    if (!fn) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n      return this;\n    }\n\n    var listeners = this._events[evt];\n\n    if (listeners.fn) {\n      if (\n           listeners.fn === fn\n        && (!once || listeners.once)\n        && (!context || listeners.context === context)\n      ) {\n        if (--this._eventsCount === 0) this._events = new Events();\n        else delete this._events[evt];\n      }\n    } else {\n      for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n\n      //\n      // Reset the array, or remove it completely if we have no more listeners.\n      //\n      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n      else if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n\n    return this;\n  };\n\n  /**\n   * Remove all listeners, or those of the specified event.\n   *\n   * @param {String|Symbol} [event] The event name.\n   * @returns {EventEmitter} `this`.\n   * @api public\n   */\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n    var evt;\n\n    if (event) {\n      evt = prefix ? prefix + event : event;\n      if (this._events[evt]) {\n        if (--this._eventsCount === 0) this._events = new Events();\n        else delete this._events[evt];\n      }\n    } else {\n      this._events = new Events();\n      this._eventsCount = 0;\n    }\n\n    return this;\n  };\n\n  //\n  // Alias methods names because people roll like that.\n  //\n  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  //\n  // This function doesn't apply anymore.\n  //\n  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n    return this;\n  };\n\n  //\n  // Expose the prefix.\n  //\n  EventEmitter.prefixed = prefix;\n\n  //\n  // Allow `EventEmitter` to be imported as module namespace.\n  //\n  EventEmitter.EventEmitter = EventEmitter;\n\n  //\n  // Expose the module.\n  //\n  {\n    module.exports = EventEmitter;\n  }\n  });\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n  var noop = function noop() {};\n\n  var State = {\n      data: 'state-data',\n      cdata: 'state-cdata',\n      tagBegin: 'state-tag-begin',\n      tagName: 'state-tag-name',\n      tagEnd: 'state-tag-end',\n      attributeNameStart: 'state-attribute-name-start',\n      attributeName: 'state-attribute-name',\n      attributeNameEnd: 'state-attribute-name-end',\n      attributeValueBegin: 'state-attribute-value-begin',\n      attributeValue: 'state-attribute-value'\n  };\n\n  var Action = {\n      lt: 'action-lt',\n      gt: 'action-gt',\n      space: 'action-space',\n      equal: 'action-equal',\n      quote: 'action-quote',\n      slash: 'action-slash',\n      char: 'action-char',\n      error: 'action-error'\n  };\n\n  var Type$1 = {\n      text: 'text',\n      openTag: 'open-tag',\n      closeTag: 'close-tag',\n      attributeName: 'attribute-name',\n      attributeValue: 'attribute-value'\n  };\n\n  var charToAction = {\n      ' ': Action.space,\n      '\\t': Action.space,\n      '\\n': Action.space,\n      '\\r': Action.space,\n      '<': Action.lt,\n      '>': Action.gt,\n      '\"': Action.quote,\n      \"'\": Action.quote,\n      '=': Action.equal,\n      '/': Action.slash\n  };\n\n  var getAction = function getAction(char) {\n      return charToAction[char] || Action.char;\n  };\n\n  /**\n   * @param  {Object} options\n   * @param  {Boolean} options.debug\n   * @return {Object}\n   */\n  var create$1 = function create(options) {\n      var _State$data, _State$tagBegin, _State$tagName, _State$tagEnd, _State$attributeNameS, _State$attributeName, _State$attributeNameE, _State$attributeValue, _State$attributeValue2, _lexer$stateMachine;\n\n      options = Object.assign({ debug: false }, options);\n      var lexer = new eventemitter3();\n      var state = State.data;\n      var data = '';\n      var tagName = '';\n      var attrName = '';\n      var attrValue = '';\n      var isClosing = '';\n      var openingQuote = '';\n\n      var emit = function emit(type, value) {\n          // for now, ignore tags like: '?xml', '!DOCTYPE' or comments\n          if (tagName[0] === '?' || tagName[0] === '!') {\n              return;\n          }\n          var event = { type: type, value: value };\n          if (options.debug) {\n              console.log('emit:', event);\n          }\n          lexer.emit('data', event);\n      };\n\n      lexer.stateMachine = (_lexer$stateMachine = {}, _defineProperty(_lexer$stateMachine, State.data, (_State$data = {}, _defineProperty(_State$data, Action.lt, function () {\n          if (data.trim()) {\n              emit(Type$1.text, data);\n          }\n          tagName = '';\n          isClosing = false;\n          state = State.tagBegin;\n      }), _defineProperty(_State$data, Action.char, function (char) {\n          data += char;\n      }), _State$data)), _defineProperty(_lexer$stateMachine, State.cdata, _defineProperty({}, Action.char, function (char) {\n          data += char;\n          if (data.substr(-3) === ']]>') {\n              emit(Type$1.text, data.slice(0, -3));\n              data = '';\n              state = State.data;\n          }\n      })), _defineProperty(_lexer$stateMachine, State.tagBegin, (_State$tagBegin = {}, _defineProperty(_State$tagBegin, Action.space, noop), _defineProperty(_State$tagBegin, Action.char, function (char) {\n          tagName = char;\n          state = State.tagName;\n      }), _defineProperty(_State$tagBegin, Action.slash, function () {\n          tagName = '';\n          isClosing = true;\n      }), _State$tagBegin)), _defineProperty(_lexer$stateMachine, State.tagName, (_State$tagName = {}, _defineProperty(_State$tagName, Action.space, function () {\n          if (isClosing) {\n              state = State.tagEnd;\n          } else {\n              state = State.attributeNameStart;\n              emit(Type$1.openTag, tagName);\n          }\n      }), _defineProperty(_State$tagName, Action.gt, function () {\n          if (isClosing) {\n              emit(Type$1.closeTag, tagName);\n          } else {\n              emit(Type$1.openTag, tagName);\n          }\n          data = '';\n          state = State.data;\n      }), _defineProperty(_State$tagName, Action.slash, function () {\n          state = State.tagEnd;\n          emit(Type$1.openTag, tagName);\n      }), _defineProperty(_State$tagName, Action.char, function (char) {\n          tagName += char;\n          if (tagName === '![CDATA[') {\n              state = State.cdata;\n              data = '';\n              tagName = '';\n          }\n      }), _State$tagName)), _defineProperty(_lexer$stateMachine, State.tagEnd, (_State$tagEnd = {}, _defineProperty(_State$tagEnd, Action.gt, function () {\n          emit(Type$1.closeTag, tagName);\n          data = '';\n          state = State.data;\n      }), _defineProperty(_State$tagEnd, Action.char, noop), _State$tagEnd)), _defineProperty(_lexer$stateMachine, State.attributeNameStart, (_State$attributeNameS = {}, _defineProperty(_State$attributeNameS, Action.char, function (char) {\n          attrName = char;\n          state = State.attributeName;\n      }), _defineProperty(_State$attributeNameS, Action.gt, function () {\n          data = '';\n          state = State.data;\n      }), _defineProperty(_State$attributeNameS, Action.space, noop), _defineProperty(_State$attributeNameS, Action.slash, function () {\n          isClosing = true;\n          state = State.tagEnd;\n      }), _State$attributeNameS)), _defineProperty(_lexer$stateMachine, State.attributeName, (_State$attributeName = {}, _defineProperty(_State$attributeName, Action.space, function () {\n          state = State.attributeNameEnd;\n      }), _defineProperty(_State$attributeName, Action.equal, function () {\n          emit(Type$1.attributeName, attrName);\n          state = State.attributeValueBegin;\n      }), _defineProperty(_State$attributeName, Action.gt, function () {\n          attrValue = '';\n          emit(Type$1.attributeName, attrName);\n          emit(Type$1.attributeValue, attrValue);\n          data = '';\n          state = State.data;\n      }), _defineProperty(_State$attributeName, Action.slash, function () {\n          isClosing = true;\n          attrValue = '';\n          emit(Type$1.attributeName, attrName);\n          emit(Type$1.attributeValue, attrValue);\n          state = State.tagEnd;\n      }), _defineProperty(_State$attributeName, Action.char, function (char) {\n          attrName += char;\n      }), _State$attributeName)), _defineProperty(_lexer$stateMachine, State.attributeNameEnd, (_State$attributeNameE = {}, _defineProperty(_State$attributeNameE, Action.space, noop), _defineProperty(_State$attributeNameE, Action.equal, function () {\n          emit(Type$1.attributeName, attrName);\n          state = State.attributeValueBegin;\n      }), _defineProperty(_State$attributeNameE, Action.gt, function () {\n          attrValue = '';\n          emit(Type$1.attributeName, attrName);\n          emit(Type$1.attributeValue, attrValue);\n          data = '';\n          state = State.data;\n      }), _defineProperty(_State$attributeNameE, Action.char, function (char) {\n          attrValue = '';\n          emit(Type$1.attributeName, attrName);\n          emit(Type$1.attributeValue, attrValue);\n          attrName = char;\n          state = State.attributeName;\n      }), _State$attributeNameE)), _defineProperty(_lexer$stateMachine, State.attributeValueBegin, (_State$attributeValue = {}, _defineProperty(_State$attributeValue, Action.space, noop), _defineProperty(_State$attributeValue, Action.quote, function (char) {\n          openingQuote = char;\n          attrValue = '';\n          state = State.attributeValue;\n      }), _defineProperty(_State$attributeValue, Action.gt, function () {\n          attrValue = '';\n          emit(Type$1.attributeValue, attrValue);\n          data = '';\n          state = State.data;\n      }), _defineProperty(_State$attributeValue, Action.char, function (char) {\n          openingQuote = '';\n          attrValue = char;\n          state = State.attributeValue;\n      }), _State$attributeValue)), _defineProperty(_lexer$stateMachine, State.attributeValue, (_State$attributeValue2 = {}, _defineProperty(_State$attributeValue2, Action.space, function (char) {\n          if (openingQuote) {\n              attrValue += char;\n          } else {\n              emit(Type$1.attributeValue, attrValue);\n              state = State.attributeNameStart;\n          }\n      }), _defineProperty(_State$attributeValue2, Action.quote, function (char) {\n          if (openingQuote === char) {\n              emit(Type$1.attributeValue, attrValue);\n              state = State.attributeNameStart;\n          } else {\n              attrValue += char;\n          }\n      }), _defineProperty(_State$attributeValue2, Action.gt, function (char) {\n          if (openingQuote) {\n              attrValue += char;\n          } else {\n              emit(Type$1.attributeValue, attrValue);\n              data = '';\n              state = State.data;\n          }\n      }), _defineProperty(_State$attributeValue2, Action.slash, function (char) {\n          if (openingQuote) {\n              attrValue += char;\n          } else {\n              emit(Type$1.attributeValue, attrValue);\n              isClosing = true;\n              state = State.tagEnd;\n          }\n      }), _defineProperty(_State$attributeValue2, Action.char, function (char) {\n          attrValue += char;\n      }), _State$attributeValue2)), _lexer$stateMachine);\n\n      var step = function step(char) {\n          if (options.debug) {\n              console.log(state, char);\n          }\n          var actions = lexer.stateMachine[state];\n          var action = actions[getAction(char)] || actions[Action.error] || actions[Action.char];\n          action(char);\n      };\n\n      lexer.write = function (str) {\n          var len = str.length;\n          for (var i = 0; i < len; i++) {\n              step(str[i]);\n          }\n      };\n\n      return lexer;\n  };\n\n  var lexer = {\n      State: State,\n      Action: Action,\n      Type: Type$1,\n      create: create$1\n  };\n\n  var Type = lexer.Type;\n\n  var NodeType = {\n      element: 'element',\n      text: 'text'\n  };\n\n  var createNode = function createNode(params) {\n      return Object.assign({\n          name: '',\n          type: NodeType.element,\n          value: '',\n          parent: null,\n          attributes: {},\n          children: []\n      }, params);\n  };\n\n  var create = function create(options) {\n      options = Object.assign({\n          stream: false,\n          parentNodes: true,\n          doneEvent: 'done',\n          tagPrefix: 'tag:',\n          emitTopLevelOnly: false,\n          debug: false\n      }, options);\n\n      var lexer$1 = void 0,\n          rootNode = void 0,\n          current = void 0,\n          attrName = void 0;\n\n      var reader = new eventemitter3();\n\n      var handleLexerData = function handleLexerData(data) {\n          switch (data.type) {\n\n              case Type.openTag:\n                  if (current === null) {\n                      current = rootNode;\n                      current.name = data.value;\n                  } else {\n                      var node = createNode({\n                          name: data.value,\n                          parent: current\n                      });\n                      current.children.push(node);\n                      current = node;\n                  }\n                  break;\n\n              case Type.closeTag:\n                  var parent = current.parent;\n                  if (!options.parentNodes) {\n                      current.parent = null;\n                  }\n                  if (current.name !== data.value) {\n                      // ignore unexpected closing tag\n                      break;\n                  }\n                  if (options.stream && parent === rootNode) {\n                      rootNode.children = [];\n                      // do not expose parent node in top level nodes\n                      current.parent = null;\n                  }\n                  if (!options.emitTopLevelOnly || parent === rootNode) {\n                      reader.emit(options.tagPrefix + current.name, current);\n                      reader.emit('tag', current.name, current);\n                  }\n                  if (current === rootNode) {\n                      // end of document, stop listening\n                      lexer$1.removeAllListeners('data');\n                      reader.emit(options.doneEvent, current);\n                      rootNode = null;\n                  }\n                  current = parent;\n                  break;\n\n              case Type.text:\n                  if (current) {\n                      current.children.push(createNode({\n                          type: NodeType.text,\n                          value: data.value,\n                          parent: options.parentNodes ? current : null\n                      }));\n                  }\n                  break;\n\n              case Type.attributeName:\n                  attrName = data.value;\n                  current.attributes[attrName] = '';\n                  break;\n\n              case Type.attributeValue:\n                  current.attributes[attrName] = data.value;\n                  break;\n          }\n      };\n\n      reader.reset = function () {\n          lexer$1 = lexer.create({ debug: options.debug });\n          lexer$1.on('data', handleLexerData);\n          rootNode = createNode();\n          current = null;\n          attrName = '';\n          reader.parse = lexer$1.write;\n      };\n\n      reader.reset();\n      return reader;\n  };\n\n  var parseSync = function parseSync(xml, options) {\n      options = Object.assign({}, options, { stream: false, tagPrefix: ':' });\n      var reader = create(options);\n      var res = void 0;\n      reader.on('done', function (ast) {\n          res = ast;\n      });\n      reader.parse(xml);\n      return res;\n  };\n\n  var reader = {\n      parseSync: parseSync,\n      create: create,\n      NodeType: NodeType\n  };\n  var reader_1 = reader.parseSync;\n\n  var parseInput = function parseInput(input) {\n    var parsed = reader_1(\"<root>\".concat(input, \"</root>\"), {\n      parentNodes: false\n    });\n    var isValid = parsed.children && parsed.children.length > 0 && parsed.children.every(function (node) {\n      return node.name === 'svg';\n    });\n    if (isValid) {\n      return parsed.children.length === 1 ? parsed.children[0] : parsed.children;\n    } else {\n      throw Error('nothing to parse');\n    }\n  };\n  var camelize = function camelize(node) {\n    return deepRenameKeys(node, function (key) {\n      if (!notCamelcase(key)) {\n        return toCamelCase(key);\n      }\n      return key;\n    });\n  };\n  var toCamelCase = function toCamelCase(prop) {\n    return prop.replace(/[-|:]([a-z])/gi, function (all, letter) {\n      return letter.toUpperCase();\n    });\n  };\n  var notCamelcase = function notCamelcase(prop) {\n    return /^(data|aria)(-\\w+)/.test(prop);\n  };\n  var escapeText = function escapeText(text) {\n    if (text) {\n      var str = String(text);\n      return /[&<>]/.test(str) ? \"<![CDATA[\".concat(str.replace(/]]>/, ']]]]><![CDATA[>'), \"]]>\") : str;\n    }\n    return '';\n  };\n  var escapeAttr = function escapeAttr(attr) {\n    return String(attr).replace(/&/g, '&amp;').replace(/'/g, '&apos;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  };\n\n  var svgsonSync = function svgsonSync(input) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$transformNode = _ref.transformNode,\n      transformNode = _ref$transformNode === void 0 ? function (node) {\n        return node;\n      } : _ref$transformNode,\n      _ref$camelcase = _ref.camelcase,\n      camelcase = _ref$camelcase === void 0 ? false : _ref$camelcase;\n    var applyFilters = function applyFilters(input) {\n      var n;\n      n = transformNode(input);\n      if (camelcase) {\n        n = camelize(n);\n      }\n      return n;\n    };\n    return applyFilters(parseInput(input));\n  };\n  function svgson() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new Promise(function (resolve, reject) {\n      try {\n        var res = svgsonSync.apply(void 0, args);\n        resolve(res);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  var stringify = function stringify(_ast) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$transformAttr = _ref.transformAttr,\n      transformAttr = _ref$transformAttr === void 0 ? function (key, value, escape) {\n        return \"\".concat(key, \"=\\\"\").concat(escape(value), \"\\\"\");\n      } : _ref$transformAttr,\n      _ref$transformNode = _ref.transformNode,\n      transformNode = _ref$transformNode === void 0 ? function (node) {\n        return node;\n      } : _ref$transformNode,\n      _ref$selfClose = _ref.selfClose,\n      selfClose = _ref$selfClose === void 0 ? true : _ref$selfClose;\n    if (Array.isArray(_ast)) {\n      return _ast.map(function (ast) {\n        return stringify(ast, {\n          transformAttr: transformAttr,\n          selfClose: selfClose,\n          transformNode: transformNode\n        });\n      }).join('');\n    }\n    var ast = transformNode(_ast);\n    if (ast.type === 'text') {\n      return escapeText(ast.value);\n    }\n    var attributes = '';\n    for (var attr in ast.attributes) {\n      var attrStr = transformAttr(attr, ast.attributes[attr], escapeAttr, ast.name);\n      attributes += attrStr ? \" \".concat(attrStr) : '';\n    }\n    return ast.children && ast.children.length > 0 || !selfClose ? \"<\".concat(ast.name).concat(attributes, \">\").concat(stringify(ast.children, {\n      transformAttr: transformAttr,\n      transformNode: transformNode,\n      selfClose: selfClose\n    }), \"</\").concat(ast.name, \">\") : \"<\".concat(ast.name).concat(attributes, \"/>\");\n  };\n\n  var indexUmd = Object.assign({}, {\n    parse: svgson,\n    parseSync: svgsonSync,\n    stringify: stringify\n  });\n\n  return indexUmd;\n\n}));\n","import { SVGPathData } from './SVGPathData.js';\n// Encode SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\n// Private consts : Char groups\nconst WSP = ' ';\nexport function encodeSVGPath(commands) {\n    let str = '';\n    if (!Array.isArray(commands)) {\n        commands = [commands];\n    }\n    for (let i = 0; i < commands.length; i++) {\n        const command = commands[i];\n        if (command.type === SVGPathData.CLOSE_PATH) {\n            str += 'z';\n        }\n        else if (command.type === SVGPathData.HORIZ_LINE_TO) {\n            str += (command.relative ? 'h' : 'H') + command.x;\n        }\n        else if (command.type === SVGPathData.VERT_LINE_TO) {\n            str += (command.relative ? 'v' : 'V') + command.y;\n        }\n        else if (command.type === SVGPathData.MOVE_TO) {\n            str += (command.relative ? 'm' : 'M') + command.x + WSP + command.y;\n        }\n        else if (command.type === SVGPathData.LINE_TO) {\n            str += (command.relative ? 'l' : 'L') + command.x + WSP + command.y;\n        }\n        else if (command.type === SVGPathData.CURVE_TO) {\n            str +=\n                (command.relative ? 'c' : 'C') +\n                    command.x1 +\n                    WSP +\n                    command.y1 +\n                    WSP +\n                    command.x2 +\n                    WSP +\n                    command.y2 +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else if (command.type === SVGPathData.SMOOTH_CURVE_TO) {\n            str +=\n                (command.relative ? 's' : 'S') +\n                    command.x2 +\n                    WSP +\n                    command.y2 +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else if (command.type === SVGPathData.QUAD_TO) {\n            str +=\n                (command.relative ? 'q' : 'Q') +\n                    command.x1 +\n                    WSP +\n                    command.y1 +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else if (command.type === SVGPathData.SMOOTH_QUAD_TO) {\n            str += (command.relative ? 't' : 'T') + command.x + WSP + command.y;\n        }\n        else if (command.type === SVGPathData.ARC) {\n            str +=\n                (command.relative ? 'a' : 'A') +\n                    command.rX +\n                    WSP +\n                    command.rY +\n                    WSP +\n                    command.xRot +\n                    WSP +\n                    +command.lArcFlag +\n                    WSP +\n                    +command.sweepFlag +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else {\n            // Unknown command\n            throw new Error(`Unexpected command type \"${command?.type}\" at index ${i}.`);\n        }\n    }\n    return str;\n}\n//# sourceMappingURL=SVGPathDataEncoder.js.map","import { SVGPathData } from './SVGPathData.js';\nexport function rotate([x, y], rad) {\n    return [\n        x * Math.cos(rad) - y * Math.sin(rad),\n        x * Math.sin(rad) + y * Math.cos(rad),\n    ];\n}\nconst DEBUG_CHECK_NUMBERS = true;\nexport function assertNumbers(...numbers) {\n    if (DEBUG_CHECK_NUMBERS) {\n        for (let i = 0; i < numbers.length; i++) {\n            if ('number' !== typeof numbers[i]) {\n                throw new Error(`assertNumbers arguments[${i}] is not a number. ${typeof numbers[i]} == typeof ${numbers[i]}`);\n            }\n        }\n    }\n    return true;\n}\nconst PI = Math.PI;\n/**\n * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n * Fixes rX and rY.\n * Ensures lArcFlag and sweepFlag are 0 or 1\n * Adds center coordinates: command.cX, command.cY (relative or absolute, depending on command.relative)\n * Adds start and end arc parameters (in degrees): command.phi1, command.phi2; phi1 < phi2 iff. c.sweepFlag == true\n */\nexport function annotateArcCommand(c, x1, y1) {\n    c.lArcFlag = 0 === c.lArcFlag ? 0 : 1;\n    c.sweepFlag = 0 === c.sweepFlag ? 0 : 1;\n    // tslint:disable-next-line\n    let { rX, rY } = c;\n    const { x, y } = c;\n    if (Math.abs(rX) < 1e-10 || Math.abs(rY) < 1e-10) {\n        c.rX = 0;\n        c.rY = 0;\n        c.cX = (x1 + x) / 2;\n        c.cY = (y1 + y) / 2;\n        c.phi1 = 0;\n        c.phi2 = 0;\n        return;\n    }\n    rX = Math.abs(c.rX);\n    rY = Math.abs(c.rY);\n    const xRotRad = (c.xRot / 180) * PI;\n    const [x1_, y1_] = rotate([(x1 - x) / 2, (y1 - y) / 2], -xRotRad);\n    const testValue = Math.pow(x1_, 2) / Math.pow(rX, 2) + Math.pow(y1_, 2) / Math.pow(rY, 2);\n    if (1 < testValue) {\n        rX *= Math.sqrt(testValue);\n        rY *= Math.sqrt(testValue);\n    }\n    c.rX = rX;\n    c.rY = rY;\n    const c_ScaleTemp = Math.pow(rX, 2) * Math.pow(y1_, 2) + Math.pow(rY, 2) * Math.pow(x1_, 2);\n    const c_Scale = (c.lArcFlag !== c.sweepFlag ? 1 : -1) *\n        Math.sqrt(Math.max(0, (Math.pow(rX, 2) * Math.pow(rY, 2) - c_ScaleTemp) / c_ScaleTemp));\n    const cx_ = ((rX * y1_) / rY) * c_Scale;\n    const cy_ = ((-rY * x1_) / rX) * c_Scale;\n    const cRot = rotate([cx_, cy_], xRotRad);\n    c.cX = cRot[0] + (x1 + x) / 2;\n    c.cY = cRot[1] + (y1 + y) / 2;\n    c.phi1 = Math.atan2((y1_ - cy_) / rY, (x1_ - cx_) / rX);\n    c.phi2 = Math.atan2((-y1_ - cy_) / rY, (-x1_ - cx_) / rX);\n    if (0 === c.sweepFlag && c.phi2 > c.phi1) {\n        c.phi2 -= 2 * PI;\n    }\n    if (1 === c.sweepFlag && c.phi2 < c.phi1) {\n        c.phi2 += 2 * PI;\n    }\n    c.phi1 *= 180 / PI;\n    c.phi2 *= 180 / PI;\n}\n/**\n * Solves a quadratic system of equations of the form\n *      a * x + b * y = c\n *      x² + y² = 1\n * This can be understood as the intersection of the unit circle with a line.\n *      => y = (c - a x) / b\n *      => x² + (c - a x)² / b² = 1\n *      => x² b² + c² - 2 c a x + a² x² = b²\n *      => (a² + b²) x² - 2 a c x + (c² - b²) = 0\n */\nexport function intersectionUnitCircleLine(a, b, c) {\n    assertNumbers(a, b, c);\n    // cf. pqFormula\n    const termSqr = a * a + b * b - c * c;\n    if (0 > termSqr) {\n        return [];\n    }\n    else if (0 === termSqr) {\n        return [[(a * c) / (a * a + b * b), (b * c) / (a * a + b * b)]];\n    }\n    const term = Math.sqrt(termSqr);\n    return [\n        [\n            (a * c + b * term) / (a * a + b * b),\n            (b * c - a * term) / (a * a + b * b),\n        ],\n        [\n            (a * c - b * term) / (a * a + b * b),\n            (b * c + a * term) / (a * a + b * b),\n        ],\n    ];\n}\nexport const DEG = Math.PI / 180;\nexport function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n}\nexport function arcAt(c, x1, x2, phiDeg) {\n    return (c + Math.cos((phiDeg / 180) * PI) * x1 + Math.sin((phiDeg / 180) * PI) * x2);\n}\nexport function bezierRoot(x0, x1, x2, x3) {\n    const EPS = 1e-6;\n    // Coefficients for the derivative of a cubic Bezier curve\n    // B'(t) = 3(1-t)²(P₁-P₀) + 6(1-t)t(P₂-P₁) + 3t²(P₃-P₂)\n    // When rearranged to at² + bt + c:\n    const x01 = x1 - x0;\n    const x12 = x2 - x1;\n    const x23 = x3 - x2;\n    const a = 3 * x01 + 3 * x23 - 6 * x12;\n    const b = (x12 - x01) * 6;\n    const c = 3 * x01;\n    // solve a * t² + b * t + c = 0\n    if (Math.abs(a) < EPS) {\n        // For near-zero a, it becomes a linear equation: b * t + c = 0\n        return Math.abs(b) < EPS ? [] : [-c / b];\n    }\n    return pqFormula(b / a, c / a, EPS);\n}\nexport function bezierAt(x0, x1, x2, x3, t) {\n    // Calculates a point on a cubic Bezier curve at parameter t.\n    // B(t) = (1-t)³P₀ + 3(1-t)²tP₁ + 3(1-t)t²P₂ + t³P₃\n    // Which is equivalent to:\n    // B(t) = (s³)P₀ + (3s²t)P₁ + (3st²)P₂ + (t³)P₃  where s = 1-t\n    const s = 1 - t;\n    const c0 = s * s * s;\n    const c1 = 3 * s * s * t;\n    const c2 = 3 * s * t * t;\n    const c3 = t * t * t;\n    return x0 * c0 + x1 * c1 + x2 * c2 + x3 * c3;\n}\nfunction pqFormula(p, q, PRECISION = 1e-6) {\n    // 4 times the discriminant:in\n    const discriminantX4 = (p * p) / 4 - q;\n    if (discriminantX4 < -PRECISION) {\n        return [];\n    }\n    else if (discriminantX4 <= PRECISION) {\n        return [-p / 2];\n    }\n    const root = Math.sqrt(discriminantX4);\n    return [-(p / 2) - root, -(p / 2) + root];\n}\nexport function a2c(arc, x0, y0) {\n    if (!arc.cX) {\n        annotateArcCommand(arc, x0, y0);\n    }\n    // Convert xRot to radians\n    const xRotRad = (arc.xRot / 180) * PI;\n    // Handle zero radius case - convert to a straight line represented as a curve\n    if (Math.abs(arc.rX) < 1e-10 || Math.abs(arc.rY) < 1e-10) {\n        return [\n            {\n                relative: arc.relative,\n                type: SVGPathData.CURVE_TO,\n                x1: x0 + (arc.x - x0) / 3,\n                y1: y0 + (arc.y - y0) / 3,\n                x2: x0 + (2 * (arc.x - x0)) / 3,\n                y2: y0 + (2 * (arc.y - y0)) / 3,\n                x: arc.x,\n                y: arc.y,\n            },\n        ];\n    }\n    const phiMin = Math.min(arc.phi1, arc.phi2), phiMax = Math.max(arc.phi1, arc.phi2), deltaPhi = phiMax - phiMin;\n    const partCount = Math.ceil(deltaPhi / 90);\n    const result = new Array(partCount);\n    let prevX = x0;\n    let prevY = y0;\n    const transform = (x, y) => {\n        const [xTemp, yTemp] = rotate([x * arc.rX, y * arc.rY], xRotRad);\n        return [arc.cX + xTemp, arc.cY + yTemp];\n    };\n    for (let i = 0; i < partCount; i++) {\n        const phiStart = lerp(arc.phi1, arc.phi2, i / partCount);\n        const phiEnd = lerp(arc.phi1, arc.phi2, (i + 1) / partCount);\n        const deltaPhi = phiEnd - phiStart;\n        const f = (4 / 3) * Math.tan((deltaPhi * DEG) / 4);\n        // x1/y1, x2/y2 and x/y coordinates on the unit circle for phiStart/phiEnd\n        const x1 = Math.cos(phiStart * DEG) - f * Math.sin(phiStart * DEG);\n        const y1 = Math.sin(phiStart * DEG) + f * Math.cos(phiStart * DEG);\n        const x = Math.cos(phiEnd * DEG);\n        const y = Math.sin(phiEnd * DEG);\n        const x2 = x + f * y;\n        const y2 = y - f * x;\n        const cp1 = transform(x1, y1);\n        const cp2 = transform(x2, y2);\n        const end = transform(x, y);\n        const command = {\n            relative: arc.relative,\n            type: SVGPathData.CURVE_TO,\n            x: end[0],\n            y: end[1],\n            x1: cp1[0],\n            y1: cp1[1],\n            x2: cp2[0],\n            y2: cp2[1],\n        };\n        if (arc.relative) {\n            command.x1 -= prevX;\n            command.y1 -= prevY;\n            command.x2 -= prevX;\n            command.y2 -= prevY;\n            command.x -= prevX;\n            command.y -= prevY;\n        }\n        prevX = end[0];\n        prevY = end[1];\n        result[i] = command;\n    }\n    return result;\n}\n/**\n * Determines if three points are collinear (lie on the same straight line)\n * and the middle point is on the line segment between the first and third points\n *\n * @param p1 First point [x, y]\n * @param p2 Middle point that might be removed\n * @param p3 Last point [x, y]\n * @returns true if the points are collinear and p2 is on the segment p1-p3\n */\nexport function arePointsCollinear(p1, p2, p3) {\n    // Create vectors\n    const v1x = p2[0] - p1[0];\n    const v1y = p2[1] - p1[1];\n    const v2x = p3[0] - p1[0];\n    const v2y = p3[1] - p1[1];\n    // Cross product: v1 × v2 = v1x * v2y - v1y * v2x\n    // If cross product is close to zero, points are collinear\n    const cross = v1x * v2y - v1y * v2x;\n    const isCollinear = Math.abs(cross) < 1e-10;\n    if (!isCollinear)\n        return false;\n    // Now check if p2 is on the segment p1-p3\n    // For this we check if the projection of v1 onto v2 is between 0 and |v2|\n    // Calculate dot product\n    const dot = v1x * v2x + v1y * v2y;\n    // Calculate squared lengths\n    const lenSqV1 = v1x * v1x + v1y * v1y;\n    const lenSqV2 = v2x * v2x + v2y * v2y;\n    // p2 is on segment p1-p3 if:\n    // 1. 0 ≤ dot(v1,v2) ≤ dot(v2,v2) - this checks if projection is within segment\n    // 2. |v1| ≤ |v2| - this checks if p2 is not beyond p3\n    return 0 <= dot && dot <= lenSqV2 && lenSqV1 <= lenSqV2;\n}\n//# sourceMappingURL=mathUtils.js.map","import { SVGPathData } from '../index.js';\nimport { SVGPathDataTransformer } from '../SVGPathDataTransformer.js';\n/**\n * Reverses the order of path commands to go from end to start\n * IMPORTANT: This function expects absolute commands as input.\n * It doesn't convert relative to absolute - use SVGPathDataTransformer.TO_ABS() first if needed.\n * @param commands SVG path commands in absolute form to reverse\n * @param preserveSubpathOrder If true, keeps subpaths in their original order\n * @returns New SVG commands in reverse order with absolute coordinates\n */\nexport function REVERSE_PATH(commands, preserveSubpathOrder = true) {\n    if (commands.length < 2)\n        return commands;\n    // Extract absolute points using the transformer to track current position\n    const normalized = SVGPathDataTransformer.INFO((command, px, py) => ({\n        ...command,\n        x: command.x ?? px,\n        y: command.y ?? py,\n        relative: command.relative ?? false,\n    }));\n    const result = [];\n    let processing = [];\n    for (const original of commands) {\n        const cmd = normalized(original);\n        // Start a new subpath if needed\n        if (cmd.type === SVGPathData.MOVE_TO && processing.length > 0) {\n            if (preserveSubpathOrder) {\n                result.push(...reverseSubpath(processing));\n            }\n            else {\n                result.unshift(...reverseSubpath(processing));\n            }\n            processing = []; // Clear the current subpath\n        }\n        processing.push(cmd);\n    }\n    if (processing.length > 0) {\n        if (preserveSubpathOrder) {\n            result.push(...reverseSubpath(processing));\n        }\n        else {\n            result.unshift(...reverseSubpath(processing));\n        }\n    }\n    // Join the reversed subpaths in original order\n    return result;\n}\nfunction reverseSubpath(commands) {\n    // Check if path is explicitly closed (ends with CLOSE_PATH)\n    const isExplicitlyClosed = commands[commands.length - 1]?.type === SVGPathData.CLOSE_PATH;\n    // Start with a move to the last explicit point\n    // (if path ends with Z, use the point before Z)\n    const startPointIndex = isExplicitlyClosed\n        ? commands.length - 2\n        : commands.length - 1;\n    const reversed = [\n        {\n            type: SVGPathData.MOVE_TO,\n            relative: false,\n            x: commands[startPointIndex].x,\n            y: commands[startPointIndex].y,\n        },\n    ];\n    // Process each segment in reverse order\n    for (let i = startPointIndex; i > 0; i--) {\n        const curCmd = commands[i];\n        const prevPoint = commands[i - 1];\n        if (curCmd.relative) {\n            throw new Error('Relative command are not supported convert first with `toAbs()`');\n        }\n        // Handle the current command type\n        switch (curCmd.type) {\n            case SVGPathData.HORIZ_LINE_TO:\n                reversed.push({\n                    type: SVGPathData.HORIZ_LINE_TO,\n                    relative: false,\n                    x: prevPoint.x,\n                });\n                break;\n            case SVGPathData.VERT_LINE_TO:\n                reversed.push({\n                    type: SVGPathData.VERT_LINE_TO,\n                    relative: false,\n                    y: prevPoint.y,\n                });\n                break;\n            case SVGPathData.LINE_TO:\n            case SVGPathData.MOVE_TO:\n                reversed.push({\n                    type: SVGPathData.LINE_TO,\n                    relative: false,\n                    x: prevPoint.x,\n                    y: prevPoint.y,\n                });\n                break;\n            case SVGPathData.CURVE_TO:\n                reversed.push({\n                    type: SVGPathData.CURVE_TO,\n                    relative: false,\n                    x: prevPoint.x,\n                    y: prevPoint.y,\n                    x1: curCmd.x2,\n                    y1: curCmd.y2,\n                    x2: curCmd.x1,\n                    y2: curCmd.y1,\n                });\n                break;\n            case SVGPathData.SMOOTH_CURVE_TO:\n                throw new Error(`Unsupported command: S (smooth cubic bezier)`);\n            case SVGPathData.SMOOTH_QUAD_TO:\n                throw new Error(`Unsupported command: T (smooth quadratic bezier)`);\n            case SVGPathData.ARC:\n                throw new Error(`Unsupported command: A (arc)`);\n            case SVGPathData.QUAD_TO:\n                throw new Error(`Unsupported command: Q (quadratic bezier)`);\n        }\n    }\n    // If the original path was explicitly closed, preserve the Z command\n    if (isExplicitlyClosed) {\n        reversed.push({ type: SVGPathData.CLOSE_PATH });\n    }\n    return reversed;\n}\n//# sourceMappingURL=reverse_path.js.map","/* eslint @typescript-eslint/no-explicit-any:0 */\n// Transform SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\nimport { a2c, annotateArcCommand, arcAt, assertNumbers, bezierAt, bezierRoot, intersectionUnitCircleLine, arePointsCollinear, } from './mathUtils.js';\nimport { SVGPathData } from './SVGPathData.js';\nimport { REMOVE_COLLINEAR } from './transformers/remove_collinear.js';\nimport { REVERSE_PATH } from './transformers/reverse_path.js';\n// Predefined transforming functions\n// Rounds commands values\nfunction ROUND(roundVal = 1e13) {\n    assertNumbers(roundVal);\n    function rf(val) {\n        return Math.round(val * roundVal) / roundVal;\n    }\n    return function round(command) {\n        if ('x1' in command && 'undefined' !== typeof command.x1) {\n            command.x1 = rf(command.x1);\n        }\n        if ('y1' in command && 'undefined' !== typeof command.y1) {\n            command.y1 = rf(command.y1);\n        }\n        if ('x2' in command && 'undefined' !== typeof command.x2) {\n            command.x2 = rf(command.x2);\n        }\n        if ('y2' in command && 'undefined' !== typeof command.y2) {\n            command.y2 = rf(command.y2);\n        }\n        if ('x' in command && 'undefined' !== typeof command.x) {\n            command.x = rf(command.x);\n        }\n        if ('y' in command && 'undefined' !== typeof command.y) {\n            command.y = rf(command.y);\n        }\n        if ('rX' in command && 'undefined' !== typeof command.rX) {\n            command.rX = rf(command.rX);\n        }\n        if ('rY' in command && 'undefined' !== typeof command.rY) {\n            command.rY = rf(command.rY);\n        }\n        return command;\n    };\n}\n// Relative to absolute commands\nfunction TO_ABS() {\n    return INFO((command, prevX, prevY) => {\n        if (command.relative) {\n            // x1/y1 values\n            if ('undefined' !== typeof command.x1) {\n                command.x1 += prevX;\n            }\n            if ('undefined' !== typeof command.y1) {\n                command.y1 += prevY;\n            }\n            // x2/y2 values\n            if ('undefined' !== typeof command.x2) {\n                command.x2 += prevX;\n            }\n            if ('undefined' !== typeof command.y2) {\n                command.y2 += prevY;\n            }\n            // Finally x/y values\n            if ('undefined' !== typeof command.x) {\n                command.x += prevX;\n            }\n            if ('undefined' !== typeof command.y) {\n                command.y += prevY;\n            }\n            command.relative = false;\n        }\n        return command;\n    });\n}\n// Absolute to relative commands\nfunction TO_REL() {\n    return INFO((command, prevX, prevY) => {\n        if (!command.relative) {\n            // x1/y1 values\n            if ('undefined' !== typeof command.x1) {\n                command.x1 -= prevX;\n            }\n            if ('undefined' !== typeof command.y1) {\n                command.y1 -= prevY;\n            }\n            // x2/y2 values\n            if ('undefined' !== typeof command.x2) {\n                command.x2 -= prevX;\n            }\n            if ('undefined' !== typeof command.y2) {\n                command.y2 -= prevY;\n            }\n            // Finally x/y values\n            if ('undefined' !== typeof command.x) {\n                command.x -= prevX;\n            }\n            if ('undefined' !== typeof command.y) {\n                command.y -= prevY;\n            }\n            command.relative = true;\n        }\n        return command;\n    });\n}\n// Convert H, V, Z, A with rX = 0, and straight Bezier curves to L\nfunction NORMALIZE_HVZ(normalizeZ = true, normalizeH = true, normalizeV = true, normalizeC = true) {\n    return INFO((command, prevX, prevY, pathStartX, pathStartY) => {\n        if (isNaN(pathStartX) && !(command.type & SVGPathData.MOVE_TO)) {\n            throw new Error('path must start with moveto');\n        }\n        if (normalizeH && command.type & SVGPathData.HORIZ_LINE_TO) {\n            command.type = SVGPathData.LINE_TO;\n            command.y = command.relative ? 0 : prevY;\n        }\n        if (normalizeV && command.type & SVGPathData.VERT_LINE_TO) {\n            command.type = SVGPathData.LINE_TO;\n            command.x = command.relative ? 0 : prevX;\n        }\n        if (normalizeZ && command.type & SVGPathData.CLOSE_PATH) {\n            command.type = SVGPathData.LINE_TO;\n            command.x = command.relative ? pathStartX - prevX : pathStartX;\n            command.y = command.relative ? pathStartY - prevY : pathStartY;\n        }\n        // Handle degenerate arcs\n        if (command.type & SVGPathData.ARC &&\n            (0 === command.rX || 0 === command.rY)) {\n            command.type = SVGPathData.LINE_TO;\n            delete command.rX;\n            delete command.rY;\n            delete command.xRot;\n            delete command.lArcFlag;\n            delete command.sweepFlag;\n        }\n        // Check for quad curves that are lines\n        if (normalizeC && command.type & SVGPathData.QUAD_TO) {\n            const startPoint = [prevX, prevY];\n            const controlPoint = command.relative\n                ? [prevX + command.x1, prevY + command.y1]\n                : [command.x1, command.y1];\n            const endPoint = command.relative\n                ? [prevX + command.x, prevY + command.y]\n                : [command.x, command.y];\n            if (arePointsCollinear(startPoint, controlPoint, endPoint)) {\n                command.type = SVGPathData.LINE_TO;\n                // Keep the endpoint\n                delete command.x1;\n                delete command.y1;\n            }\n        }\n        // Check for cubic curves that are lines\n        if (normalizeC && command.type & SVGPathData.CURVE_TO) {\n            const startPoint = [prevX, prevY];\n            const control1 = command.relative\n                ? [prevX + command.x1, prevY + command.y1]\n                : [command.x1, command.y1];\n            const control2 = command.relative\n                ? [prevX + command.x2, prevY + command.y2]\n                : [command.x2, command.y2];\n            const endPoint = command.relative\n                ? [prevX + command.x, prevY + command.y]\n                : [command.x, command.y];\n            // All points need to be collinear\n            if (arePointsCollinear(startPoint, control1, endPoint) &&\n                arePointsCollinear(startPoint, control2, endPoint)) {\n                command.type = SVGPathData.LINE_TO;\n                // Keep the endpoint\n                delete command.x1;\n                delete command.y1;\n                delete command.x2;\n                delete command.y2;\n            }\n        }\n        return command;\n    });\n}\n/*\n * Transforms smooth curves and quads to normal curves and quads (SsTt to CcQq)\n */\nfunction NORMALIZE_ST() {\n    let prevCurveC2X = NaN;\n    let prevCurveC2Y = NaN;\n    let prevQuadCX = NaN;\n    let prevQuadCY = NaN;\n    return INFO((command, prevX, prevY) => {\n        if (command.type & SVGPathData.SMOOTH_CURVE_TO) {\n            command.type = SVGPathData.CURVE_TO;\n            prevCurveC2X = isNaN(prevCurveC2X) ? prevX : prevCurveC2X;\n            prevCurveC2Y = isNaN(prevCurveC2Y) ? prevY : prevCurveC2Y;\n            command.x1 = command.relative\n                ? prevX - prevCurveC2X\n                : 2 * prevX - prevCurveC2X;\n            command.y1 = command.relative\n                ? prevY - prevCurveC2Y\n                : 2 * prevY - prevCurveC2Y;\n        }\n        if (command.type & SVGPathData.CURVE_TO) {\n            prevCurveC2X = command.relative ? prevX + command.x2 : command.x2;\n            prevCurveC2Y = command.relative ? prevY + command.y2 : command.y2;\n        }\n        else {\n            prevCurveC2X = NaN;\n            prevCurveC2Y = NaN;\n        }\n        if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            command.type = SVGPathData.QUAD_TO;\n            prevQuadCX = isNaN(prevQuadCX) ? prevX : prevQuadCX;\n            prevQuadCY = isNaN(prevQuadCY) ? prevY : prevQuadCY;\n            command.x1 = command.relative\n                ? prevX - prevQuadCX\n                : 2 * prevX - prevQuadCX;\n            command.y1 = command.relative\n                ? prevY - prevQuadCY\n                : 2 * prevY - prevQuadCY;\n        }\n        if (command.type & SVGPathData.QUAD_TO) {\n            prevQuadCX = command.relative ? prevX + command.x1 : command.x1;\n            prevQuadCY = command.relative ? prevY + command.y1 : command.y1;\n        }\n        else {\n            prevQuadCX = NaN;\n            prevQuadCY = NaN;\n        }\n        return command;\n    });\n}\n/*\n * A quadratic bézier curve can be represented by a cubic bézier curve which has\n * the same end points as the quadratic and both control points in place of the\n * quadratic\"s one.\n *\n * This transformer replaces QqTt commands with Cc commands respectively.\n * This is useful for reading path data into a system which only has a\n * representation for cubic curves.\n */\nfunction QT_TO_C() {\n    let prevQuadX1 = NaN;\n    let prevQuadY1 = NaN;\n    return INFO((command, prevX, prevY) => {\n        if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            command.type = SVGPathData.QUAD_TO;\n            prevQuadX1 = isNaN(prevQuadX1) ? prevX : prevQuadX1;\n            prevQuadY1 = isNaN(prevQuadY1) ? prevY : prevQuadY1;\n            command.x1 = command.relative\n                ? prevX - prevQuadX1\n                : 2 * prevX - prevQuadX1;\n            command.y1 = command.relative\n                ? prevY - prevQuadY1\n                : 2 * prevY - prevQuadY1;\n        }\n        if (command.type & SVGPathData.QUAD_TO) {\n            prevQuadX1 = command.relative ? prevX + command.x1 : command.x1;\n            prevQuadY1 = command.relative ? prevY + command.y1 : command.y1;\n            const x1 = command.x1;\n            const y1 = command.y1;\n            command.type = SVGPathData.CURVE_TO;\n            command.x1 = ((command.relative ? 0 : prevX) + x1 * 2) / 3;\n            command.y1 = ((command.relative ? 0 : prevY) + y1 * 2) / 3;\n            command.x2 = (command.x + x1 * 2) / 3;\n            command.y2 = (command.y + y1 * 2) / 3;\n        }\n        else {\n            prevQuadX1 = NaN;\n            prevQuadY1 = NaN;\n        }\n        return command;\n    });\n}\nfunction INFO(f) {\n    let prevXAbs = 0;\n    let prevYAbs = 0;\n    let pathStartXAbs = NaN;\n    let pathStartYAbs = NaN;\n    return function transform(command) {\n        if (isNaN(pathStartXAbs) && !(command.type & SVGPathData.MOVE_TO)) {\n            throw new Error('path must start with moveto');\n        }\n        const result = f(command, prevXAbs, prevYAbs, pathStartXAbs, pathStartYAbs);\n        if (command.type & SVGPathData.CLOSE_PATH) {\n            prevXAbs = pathStartXAbs;\n            prevYAbs = pathStartYAbs;\n        }\n        if ('x' in command && 'undefined' !== typeof command.x) {\n            prevXAbs = command.relative ? prevXAbs + command.x : command.x;\n        }\n        if ('y' in command && 'undefined' !== typeof command.y) {\n            prevYAbs = command.relative ? prevYAbs + command.y : command.y;\n        }\n        if (command.type & SVGPathData.MOVE_TO) {\n            pathStartXAbs = prevXAbs;\n            pathStartYAbs = prevYAbs;\n        }\n        return result;\n    };\n}\n/*\n * remove 0-length segments\n */\nfunction SANITIZE(EPS = 0) {\n    assertNumbers(EPS);\n    let prevCurveC2X = NaN;\n    let prevCurveC2Y = NaN;\n    let prevQuadCX = NaN;\n    let prevQuadCY = NaN;\n    return INFO((command, prevX, prevY, pathStartX, pathStartY) => {\n        const abs = Math.abs;\n        let skip = false;\n        let x1Rel = 0;\n        let y1Rel = 0;\n        if (command.type & SVGPathData.SMOOTH_CURVE_TO) {\n            x1Rel = isNaN(prevCurveC2X) ? 0 : prevX - prevCurveC2X;\n            y1Rel = isNaN(prevCurveC2Y) ? 0 : prevY - prevCurveC2Y;\n        }\n        if (command.type & (SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO)) {\n            prevCurveC2X = command.relative ? prevX + command.x2 : command.x2;\n            prevCurveC2Y = command.relative ? prevY + command.y2 : command.y2;\n        }\n        else {\n            prevCurveC2X = NaN;\n            prevCurveC2Y = NaN;\n        }\n        if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            prevQuadCX = isNaN(prevQuadCX) ? prevX : 2 * prevX - prevQuadCX;\n            prevQuadCY = isNaN(prevQuadCY) ? prevY : 2 * prevY - prevQuadCY;\n        }\n        else if (command.type & SVGPathData.QUAD_TO) {\n            prevQuadCX = command.relative ? prevX + command.x1 : command.x1;\n            prevQuadCY = command.relative ? prevY + command.y1 : command.y2;\n        }\n        else {\n            prevQuadCX = NaN;\n            prevQuadCY = NaN;\n        }\n        if (command.type & SVGPathData.LINE_COMMANDS ||\n            (command.type & SVGPathData.ARC &&\n                (0 === command.rX || 0 === command.rY || !command.lArcFlag)) ||\n            command.type & SVGPathData.CURVE_TO ||\n            command.type & SVGPathData.SMOOTH_CURVE_TO ||\n            command.type & SVGPathData.QUAD_TO ||\n            command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            const xRel = 'undefined' === typeof command.x\n                ? 0\n                : command.relative\n                    ? command.x\n                    : command.x - prevX;\n            const yRel = 'undefined' === typeof command.y\n                ? 0\n                : command.relative\n                    ? command.y\n                    : command.y - prevY;\n            x1Rel = !isNaN(prevQuadCX)\n                ? prevQuadCX - prevX\n                : 'undefined' === typeof command.x1\n                    ? x1Rel\n                    : command.relative\n                        ? command.x\n                        : command.x1 - prevX;\n            y1Rel = !isNaN(prevQuadCY)\n                ? prevQuadCY - prevY\n                : 'undefined' === typeof command.y1\n                    ? y1Rel\n                    : command.relative\n                        ? command.y\n                        : command.y1 - prevY;\n            const x2Rel = 'undefined' === typeof command.x2\n                ? 0\n                : command.relative\n                    ? command.x\n                    : command.x2 - prevX;\n            const y2Rel = 'undefined' === typeof command.y2\n                ? 0\n                : command.relative\n                    ? command.y\n                    : command.y2 - prevY;\n            if (abs(xRel) <= EPS &&\n                abs(yRel) <= EPS &&\n                abs(x1Rel) <= EPS &&\n                abs(y1Rel) <= EPS &&\n                abs(x2Rel) <= EPS &&\n                abs(y2Rel) <= EPS) {\n                skip = true;\n            }\n        }\n        if (command.type & SVGPathData.CLOSE_PATH) {\n            if (abs(prevX - pathStartX) <= EPS && abs(prevY - pathStartY) <= EPS) {\n                skip = true;\n            }\n        }\n        return skip ? [] : command;\n    });\n}\n// SVG Transforms : http://www.w3.org/TR/SVGTiny12/coords.html#TransformList\n// Matrix : http://apike.ca/prog_svg_transform.html\n// a c e\n// b d f\nfunction MATRIX(a, b, c, d, e, f) {\n    assertNumbers(a, b, c, d, e, f);\n    return INFO((command, prevX, prevY, pathStartX) => {\n        const origX1 = command.x1;\n        const origX2 = command.x2;\n        // if isNaN(pathStartX), then this is the first command, which is ALWAYS an\n        // absolute MOVE_TO, regardless what the relative flag says\n        const comRel = command.relative && !isNaN(pathStartX);\n        const x = 'undefined' !== typeof command.x ? command.x : comRel ? 0 : prevX;\n        const y = 'undefined' !== typeof command.y ? command.y : comRel ? 0 : prevY;\n        if (command.type & SVGPathData.HORIZ_LINE_TO && 0 !== b) {\n            command.type = SVGPathData.LINE_TO;\n            command.y = command.relative ? 0 : prevY;\n        }\n        if (command.type & SVGPathData.VERT_LINE_TO && 0 !== c) {\n            command.type = SVGPathData.LINE_TO;\n            command.x = command.relative ? 0 : prevX;\n        }\n        if ('undefined' !== typeof command.x) {\n            command.x = command.x * a + y * c + (comRel ? 0 : e);\n        }\n        if ('undefined' !== typeof command.y) {\n            command.y = x * b + command.y * d + (comRel ? 0 : f);\n        }\n        if ('undefined' !== typeof command.x1) {\n            command.x1 = command.x1 * a + command.y1 * c + (comRel ? 0 : e);\n        }\n        if ('undefined' !== typeof command.y1) {\n            command.y1 = origX1 * b + command.y1 * d + (comRel ? 0 : f);\n        }\n        if ('undefined' !== typeof command.x2) {\n            command.x2 = command.x2 * a + command.y2 * c + (comRel ? 0 : e);\n        }\n        if ('undefined' !== typeof command.y2) {\n            command.y2 = origX2 * b + command.y2 * d + (comRel ? 0 : f);\n        }\n        function sqr(x) {\n            return x * x;\n        }\n        const det = a * d - b * c;\n        if ('undefined' !== typeof command.xRot) {\n            // Skip if this is a pure translation\n            if (1 !== a || 0 !== b || 0 !== c || 1 !== d) {\n                // Special case for singular matrix\n                if (0 === det) {\n                    // In the singular case, the arc is compressed to a line. The actual geometric image of the original\n                    // curve under this transform possibly extends beyond the starting and/or ending points of the segment, but\n                    // for simplicity we ignore this detail and just replace this command with a single line segment.\n                    delete command.rX;\n                    delete command.rY;\n                    delete command.xRot;\n                    delete command.lArcFlag;\n                    delete command.sweepFlag;\n                    command.type = SVGPathData.LINE_TO;\n                }\n                else {\n                    // Convert to radians\n                    const xRot = (command.xRot * Math.PI) / 180;\n                    // Convert rotated ellipse to general conic form\n                    // x0^2/rX^2 + y0^2/rY^2 - 1 = 0\n                    // x0 = x*cos(xRot) + y*sin(xRot)\n                    // y0 = -x*sin(xRot) + y*cos(xRot)\n                    // --> A*x^2 + B*x*y + C*y^2 - 1 = 0, where\n                    const sinRot = Math.sin(xRot);\n                    const cosRot = Math.cos(xRot);\n                    const xCurve = 1 / sqr(command.rX);\n                    const yCurve = 1 / sqr(command.rY);\n                    const A = sqr(cosRot) * xCurve + sqr(sinRot) * yCurve;\n                    const B = 2 * sinRot * cosRot * (xCurve - yCurve);\n                    const C = sqr(sinRot) * xCurve + sqr(cosRot) * yCurve;\n                    // Apply matrix to A*x^2 + B*x*y + C*y^2 - 1 = 0\n                    // x1 = a*x + c*y\n                    // y1 = b*x + d*y\n                    //      (we can ignore e and f, since pure translations don\"t affect the shape of the ellipse)\n                    // --> A1*x1^2 + B1*x1*y1 + C1*y1^2 - det^2 = 0, where\n                    const A1 = A * d * d - B * b * d + C * b * b;\n                    const B1 = B * (a * d + b * c) - 2 * (A * c * d + C * a * b);\n                    const C1 = A * c * c - B * a * c + C * a * a;\n                    // Unapply newXRot to get back to axis-aligned ellipse equation\n                    // x1 = x2*cos(newXRot) - y2*sin(newXRot)\n                    // y1 = x2*sin(newXRot) + y2*cos(newXRot)\n                    // A1*x1^2 + B1*x1*y1 + C1*y1^2 - det^2 =\n                    //   x2^2*(A1*cos(newXRot)^2 + B1*sin(newXRot)*cos(newXRot) + C1*sin(newXRot)^2)\n                    //   + x2*y2*(2*(C1 - A1)*sin(newXRot)*cos(newXRot) + B1*(cos(newXRot)^2 - sin(newXRot)^2))\n                    //   + y2^2*(A1*sin(newXRot)^2 - B1*sin(newXRot)*cos(newXRot) + C1*cos(newXRot)^2)\n                    //   (which must have the same zeroes as)\n                    // x2^2/newRX^2 + y2^2/newRY^2 - 1\n                    //   (so we have)\n                    // 2*(C1 - A1)*sin(newXRot)*cos(newXRot) + B1*(cos(newXRot)^2 - sin(newXRot)^2) = 0\n                    // (A1 - C1)*sin(2*newXRot) = B1*cos(2*newXRot)\n                    // 2*newXRot = atan2(B1, A1 - C1)\n                    const newXRot = ((Math.atan2(B1, A1 - C1) + Math.PI) % Math.PI) / 2;\n                    // For any integer n, (atan2(B1, A1 - C1) + n*pi)/2 is a solution to the above; incrementing n just swaps\n                    // the x and y radii computed below (since that\"s what rotating an ellipse by pi/2 does).  Choosing the\n                    // rotation between 0 and pi/2 eliminates the ambiguity and leads to more predictable output.\n                    // Finally, we get newRX and newRY from the same-zeroes relationship that gave us newXRot\n                    const newSinRot = Math.sin(newXRot);\n                    const newCosRot = Math.cos(newXRot);\n                    command.rX =\n                        Math.abs(det) /\n                            Math.sqrt(A1 * sqr(newCosRot) +\n                                B1 * newSinRot * newCosRot +\n                                C1 * sqr(newSinRot));\n                    command.rY =\n                        Math.abs(det) /\n                            Math.sqrt(A1 * sqr(newSinRot) -\n                                B1 * newSinRot * newCosRot +\n                                C1 * sqr(newCosRot));\n                    command.xRot = (newXRot * 180) / Math.PI;\n                }\n            }\n        }\n        // sweepFlag needs to be inverted when mirroring shapes\n        // see http://www.itk.ilstu.edu/faculty/javila/SVG/SVG_drawing1/elliptical_curve.htm\n        // m 65,10 a 50,25 0 1 0 50,25\n        // M 65,60 A 50,25 0 1 1 115,35\n        if ('undefined' !== typeof command.sweepFlag && 0 > det) {\n            command.sweepFlag = +!command.sweepFlag;\n        }\n        return command;\n    });\n}\nfunction ROTATE(a, x = 0, y = 0) {\n    assertNumbers(a, x, y);\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n    return MATRIX(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);\n}\nfunction TRANSLATE(dX, dY = 0) {\n    assertNumbers(dX, dY);\n    return MATRIX(1, 0, 0, 1, dX, dY);\n}\nfunction SCALE(dX, dY = dX) {\n    assertNumbers(dX, dY);\n    return MATRIX(dX, 0, 0, dY, 0, 0);\n}\nfunction SKEW_X(a) {\n    assertNumbers(a);\n    return MATRIX(1, 0, Math.tan(a), 1, 0, 0);\n}\nfunction SKEW_Y(a) {\n    assertNumbers(a);\n    return MATRIX(1, Math.tan(a), 0, 1, 0, 0);\n}\nfunction X_AXIS_SYMMETRY(xOffset = 0) {\n    assertNumbers(xOffset);\n    return MATRIX(-1, 0, 0, 1, xOffset, 0);\n}\nfunction Y_AXIS_SYMMETRY(yOffset = 0) {\n    assertNumbers(yOffset);\n    return MATRIX(1, 0, 0, -1, 0, yOffset);\n}\n// Convert arc commands to curve commands\nfunction A_TO_C() {\n    return INFO((command, prevX, prevY) => {\n        if (SVGPathData.ARC === command.type) {\n            return a2c(command, command.relative ? 0 : prevX, command.relative ? 0 : prevY);\n        }\n        return command;\n    });\n}\n// @see annotateArcCommand\nfunction ANNOTATE_ARCS() {\n    return INFO((c, x1, y1) => {\n        if (c.relative) {\n            x1 = 0;\n            y1 = 0;\n        }\n        if (SVGPathData.ARC === c.type) {\n            annotateArcCommand(c, x1, y1);\n        }\n        return c;\n    });\n}\nfunction CLONE() {\n    return (c) => {\n        return { ...c };\n    };\n}\n// @see annotateArcCommand\nfunction CALCULATE_BOUNDS() {\n    const clone = CLONE();\n    const toAbs = TO_ABS();\n    const qtToC = QT_TO_C();\n    const normST = NORMALIZE_ST();\n    const f = INFO((command, prevXAbs, prevYAbs) => {\n        const c = normST(qtToC(toAbs(clone(command))));\n        function fixX(absX) {\n            if (absX > f.maxX) {\n                f.maxX = absX;\n            }\n            if (absX < f.minX) {\n                f.minX = absX;\n            }\n        }\n        function fixY(absY) {\n            if (absY > f.maxY) {\n                f.maxY = absY;\n            }\n            if (absY < f.minY) {\n                f.minY = absY;\n            }\n        }\n        if (c.type & SVGPathData.DRAWING_COMMANDS) {\n            fixX(prevXAbs);\n            fixY(prevYAbs);\n        }\n        if (c.type & SVGPathData.HORIZ_LINE_TO) {\n            fixX(c.x);\n        }\n        if (c.type & SVGPathData.VERT_LINE_TO) {\n            fixY(c.y);\n        }\n        if (c.type & SVGPathData.LINE_TO) {\n            fixX(c.x);\n            fixY(c.y);\n        }\n        if (c.type & SVGPathData.CURVE_TO) {\n            // add start and end points\n            fixX(c.x);\n            fixY(c.y);\n            const xDerivRoots = bezierRoot(prevXAbs, c.x1, c.x2, c.x);\n            for (const derivRoot of xDerivRoots) {\n                if (0 < derivRoot && 1 > derivRoot) {\n                    fixX(bezierAt(prevXAbs, c.x1, c.x2, c.x, derivRoot));\n                }\n            }\n            const yDerivRoots = bezierRoot(prevYAbs, c.y1, c.y2, c.y);\n            for (const derivRoot of yDerivRoots) {\n                if (0 < derivRoot && 1 > derivRoot) {\n                    fixY(bezierAt(prevYAbs, c.y1, c.y2, c.y, derivRoot));\n                }\n            }\n        }\n        if (c.type & SVGPathData.ARC) {\n            // add start and end points\n            fixX(c.x);\n            fixY(c.y);\n            annotateArcCommand(c, prevXAbs, prevYAbs);\n            // p = cos(phi) * xv + sin(phi) * yv\n            // dp = -sin(phi) * xv + cos(phi) * yv = 0\n            const xRotRad = (c.xRot / 180) * Math.PI;\n            // points on ellipse for phi = 0° and phi = 90°\n            const x0 = Math.cos(xRotRad) * c.rX;\n            const y0 = Math.sin(xRotRad) * c.rX;\n            const x90 = -Math.sin(xRotRad) * c.rY;\n            const y90 = Math.cos(xRotRad) * c.rY;\n            // annotateArcCommand returns phi1 and phi2 such that -180° < phi1 < 180° and phi2 is smaller or greater\n            // depending on the sweep flag. Calculate phiMin, phiMax such that -180° < phiMin < 180° and phiMin < phiMax\n            const [phiMin, phiMax] = c.phi1 < c.phi2\n                ? [c.phi1, c.phi2]\n                : -180 > c.phi2\n                    ? [c.phi2 + 360, c.phi1 + 360]\n                    : [c.phi2, c.phi1];\n            const normalizeXiEta = ([xi, eta]) => {\n                const phiRad = Math.atan2(eta, xi);\n                const phi = (phiRad * 180) / Math.PI;\n                return phi < phiMin ? phi + 360 : phi;\n            };\n            // xi = cos(phi), eta = sin(phi)\n            const xDerivRoots = intersectionUnitCircleLine(x90, -x0, 0).map(normalizeXiEta);\n            for (const derivRoot of xDerivRoots) {\n                if (derivRoot > phiMin && derivRoot < phiMax) {\n                    fixX(arcAt(c.cX, x0, x90, derivRoot));\n                }\n            }\n            const yDerivRoots = intersectionUnitCircleLine(y90, -y0, 0).map(normalizeXiEta);\n            for (const derivRoot of yDerivRoots) {\n                if (derivRoot > phiMin && derivRoot < phiMax) {\n                    fixY(arcAt(c.cY, y0, y90, derivRoot));\n                }\n            }\n        }\n        return command;\n    });\n    f.minX = Infinity;\n    f.maxX = -Infinity;\n    f.minY = Infinity;\n    f.maxY = -Infinity;\n    return f;\n}\nexport const SVGPathDataTransformer = {\n    ROUND,\n    TO_ABS,\n    TO_REL,\n    NORMALIZE_HVZ,\n    NORMALIZE_ST,\n    QT_TO_C,\n    INFO,\n    SANITIZE,\n    MATRIX,\n    ROTATE,\n    TRANSLATE,\n    SCALE,\n    SKEW_X,\n    SKEW_Y,\n    X_AXIS_SYMMETRY,\n    Y_AXIS_SYMMETRY,\n    A_TO_C,\n    ANNOTATE_ARCS,\n    CLONE,\n    CALCULATE_BOUNDS,\n    REVERSE_PATH,\n    REMOVE_COLLINEAR,\n};\n//# sourceMappingURL=SVGPathDataTransformer.js.map","import { SVGPathData } from '../SVGPathData.js';\nimport { SVGPathDataTransformer } from '../index.js';\nimport { arePointsCollinear } from '../mathUtils.js';\n/**\n * Process a path and remove collinear points\n * @param commands Array of SVG path commands to process (must be absolute)\n * @returns New array with collinear points removed\n */\nexport function REMOVE_COLLINEAR(commands) {\n    if (commands.length <= 2)\n        return commands; // exit early if there are less than 3 points\n    const results = [];\n    const points = commands.map(SVGPathDataTransformer.INFO((cmd, pXAbs, pYAbs) => {\n        // Calculate absolute coordinates and normlise HV\n        const isRelatve = 'relative' in cmd && cmd.relative;\n        return [\n            'x' in cmd ? cmd.x + (isRelatve ? pXAbs : 0) : pXAbs,\n            'y' in cmd ? cmd.y + (isRelatve ? pYAbs : 0) : pYAbs,\n        ];\n    }));\n    let prevPoint = points[0];\n    results.push(commands[0]); // always keep the first point\n    for (let i = 1; i < commands.length; i++) {\n        const cmd = commands[i];\n        const nextCmd = commands[i + 1];\n        if (i < commands.length - 1 &&\n            nextCmd &&\n            cmd.type & SVGPathData.LINE_COMMANDS &&\n            nextCmd.type & SVGPathData.LINE_COMMANDS) {\n            const nextPoint = points[i + 1];\n            // Check triplets of points for collinearity\n            if (arePointsCollinear(prevPoint, points[i], nextPoint)) {\n                // update next point if its relative\n                if ('relative' in nextCmd && nextCmd.relative) {\n                    if ('x' in nextCmd)\n                        nextCmd.x = nextPoint[0] - prevPoint[0];\n                    if ('y' in nextCmd)\n                        nextCmd.y = nextPoint[1] - prevPoint[1];\n                }\n                continue;\n            }\n        }\n        results.push(cmd);\n        prevPoint = points[i];\n    }\n    return results;\n}\n//# sourceMappingURL=remove_collinear.js.map","import { SVGPathDataTransformer } from './SVGPathDataTransformer.js';\nexport class TransformableSVG {\n    round(x) {\n        return this.transform(SVGPathDataTransformer.ROUND(x));\n    }\n    toAbs() {\n        return this.transform(SVGPathDataTransformer.TO_ABS());\n    }\n    toRel() {\n        return this.transform(SVGPathDataTransformer.TO_REL());\n    }\n    normalizeHVZ(a, b, c) {\n        return this.transform(SVGPathDataTransformer.NORMALIZE_HVZ(a, b, c));\n    }\n    normalizeST() {\n        return this.transform(SVGPathDataTransformer.NORMALIZE_ST());\n    }\n    qtToC() {\n        return this.transform(SVGPathDataTransformer.QT_TO_C());\n    }\n    aToC() {\n        return this.transform(SVGPathDataTransformer.A_TO_C());\n    }\n    sanitize(eps) {\n        return this.transform(SVGPathDataTransformer.SANITIZE(eps));\n    }\n    translate(x, y) {\n        return this.transform(SVGPathDataTransformer.TRANSLATE(x, y));\n    }\n    scale(x, y) {\n        return this.transform(SVGPathDataTransformer.SCALE(x, y));\n    }\n    rotate(a, x, y) {\n        return this.transform(SVGPathDataTransformer.ROTATE(a, x, y));\n    }\n    matrix(a, b, c, d, e, f) {\n        return this.transform(SVGPathDataTransformer.MATRIX(a, b, c, d, e, f));\n    }\n    skewX(a) {\n        return this.transform(SVGPathDataTransformer.SKEW_X(a));\n    }\n    skewY(a) {\n        return this.transform(SVGPathDataTransformer.SKEW_Y(a));\n    }\n    xSymmetry(xOffset) {\n        return this.transform(SVGPathDataTransformer.X_AXIS_SYMMETRY(xOffset));\n    }\n    ySymmetry(yOffset) {\n        return this.transform(SVGPathDataTransformer.Y_AXIS_SYMMETRY(yOffset));\n    }\n    annotateArcs() {\n        return this.transform(SVGPathDataTransformer.ANNOTATE_ARCS());\n    }\n}\n//# sourceMappingURL=TransformableSVG.js.map","// Parse SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\nimport { COMMAND_ARG_COUNTS, SVGPathData } from './SVGPathData.js';\nimport { TransformableSVG } from './TransformableSVG.js';\n// Private consts : Char groups\nconst isWhiteSpace = (c) => ' ' === c || '\\t' === c || '\\r' === c || '\\n' === c;\nconst isDigit = (c) => '0'.charCodeAt(0) <= c.charCodeAt(0) && c.charCodeAt(0) <= '9'.charCodeAt(0);\nexport class SVGPathDataParser extends TransformableSVG {\n    curNumber = '';\n    curCommandType = -1;\n    curCommandRelative = false;\n    canParseCommandOrComma = true;\n    curNumberHasExp = false;\n    curNumberHasExpDigits = false;\n    curNumberHasDecimal = false;\n    curArgs = [];\n    constructor() {\n        super();\n    }\n    finish(commands = []) {\n        this.parse(' ', commands);\n        // Adding residual command\n        if (0 !== this.curArgs.length || !this.canParseCommandOrComma) {\n            throw new SyntaxError('Unterminated command at the path end.');\n        }\n        return commands;\n    }\n    parse(str, commands = []) {\n        const finishCommand = (command) => {\n            commands.push(command);\n            this.curArgs.length = 0;\n            this.canParseCommandOrComma = true;\n        };\n        for (let i = 0; i < str.length; i++) {\n            const c = str[i];\n            // White spaces parsing\n            const isAArcFlag = this.curCommandType === SVGPathData.ARC &&\n                (this.curArgs.length === 3 || this.curArgs.length === 4) &&\n                this.curNumber.length === 1 &&\n                (this.curNumber === '0' || this.curNumber === '1');\n            const isEndingDigit = isDigit(c) && ((this.curNumber === '0' && c === '0') || isAArcFlag);\n            if (isDigit(c) && !isEndingDigit) {\n                this.curNumber += c;\n                this.curNumberHasExpDigits = this.curNumberHasExp;\n                continue;\n            }\n            if ('e' === c || 'E' === c) {\n                this.curNumber += c;\n                this.curNumberHasExp = true;\n                continue;\n            }\n            if (('-' === c || '+' === c) &&\n                this.curNumberHasExp &&\n                !this.curNumberHasExpDigits) {\n                this.curNumber += c;\n                continue;\n            }\n            // if we already have a \".\", it means we are starting a new number\n            if ('.' === c &&\n                !this.curNumberHasExp &&\n                !this.curNumberHasDecimal &&\n                !isAArcFlag) {\n                this.curNumber += c;\n                this.curNumberHasDecimal = true;\n                continue;\n            }\n            // New number\n            if (this.curNumber && -1 !== this.curCommandType) {\n                const val = Number(this.curNumber);\n                if (isNaN(val)) {\n                    throw new SyntaxError(`Invalid number ending at ${i}`);\n                }\n                if (this.curCommandType === SVGPathData.ARC) {\n                    if (0 === this.curArgs.length || 1 === this.curArgs.length) {\n                        if (0 > val) {\n                            throw new SyntaxError(`Expected positive number, got \"${val}\" at index \"${i}\"`);\n                        }\n                    }\n                    else if (3 === this.curArgs.length || 4 === this.curArgs.length) {\n                        if ('0' !== this.curNumber && '1' !== this.curNumber) {\n                            throw new SyntaxError(`Expected a flag, got \"${this.curNumber}\" at index \"${i}\"`);\n                        }\n                    }\n                }\n                this.curArgs.push(val);\n                if (this.curArgs.length === COMMAND_ARG_COUNTS[this.curCommandType]) {\n                    if (SVGPathData.HORIZ_LINE_TO === this.curCommandType) {\n                        finishCommand({\n                            type: SVGPathData.HORIZ_LINE_TO,\n                            relative: this.curCommandRelative,\n                            x: val,\n                        });\n                    }\n                    else if (SVGPathData.VERT_LINE_TO === this.curCommandType) {\n                        finishCommand({\n                            type: SVGPathData.VERT_LINE_TO,\n                            relative: this.curCommandRelative,\n                            y: val,\n                        });\n                        // Move to / line to / smooth quadratic curve to commands (x, y)\n                    }\n                    else if (this.curCommandType === SVGPathData.MOVE_TO ||\n                        this.curCommandType === SVGPathData.LINE_TO ||\n                        this.curCommandType === SVGPathData.SMOOTH_QUAD_TO) {\n                        finishCommand({\n                            type: this.curCommandType,\n                            relative: this.curCommandRelative,\n                            x: this.curArgs[0],\n                            y: this.curArgs[1],\n                        });\n                        // Switch to line to state\n                        if (SVGPathData.MOVE_TO === this.curCommandType) {\n                            this.curCommandType = SVGPathData.LINE_TO;\n                        }\n                    }\n                    else if (this.curCommandType === SVGPathData.CURVE_TO) {\n                        finishCommand({\n                            type: SVGPathData.CURVE_TO,\n                            relative: this.curCommandRelative,\n                            x1: this.curArgs[0],\n                            y1: this.curArgs[1],\n                            x2: this.curArgs[2],\n                            y2: this.curArgs[3],\n                            x: this.curArgs[4],\n                            y: this.curArgs[5],\n                        });\n                    }\n                    else if (this.curCommandType === SVGPathData.SMOOTH_CURVE_TO) {\n                        finishCommand({\n                            type: SVGPathData.SMOOTH_CURVE_TO,\n                            relative: this.curCommandRelative,\n                            x2: this.curArgs[0],\n                            y2: this.curArgs[1],\n                            x: this.curArgs[2],\n                            y: this.curArgs[3],\n                        });\n                    }\n                    else if (this.curCommandType === SVGPathData.QUAD_TO) {\n                        finishCommand({\n                            type: SVGPathData.QUAD_TO,\n                            relative: this.curCommandRelative,\n                            x1: this.curArgs[0],\n                            y1: this.curArgs[1],\n                            x: this.curArgs[2],\n                            y: this.curArgs[3],\n                        });\n                    }\n                    else if (this.curCommandType === SVGPathData.ARC) {\n                        finishCommand({\n                            type: SVGPathData.ARC,\n                            relative: this.curCommandRelative,\n                            rX: this.curArgs[0],\n                            rY: this.curArgs[1],\n                            xRot: this.curArgs[2],\n                            lArcFlag: this.curArgs[3],\n                            sweepFlag: this.curArgs[4],\n                            x: this.curArgs[5],\n                            y: this.curArgs[6],\n                        });\n                    }\n                }\n                this.curNumber = '';\n                this.curNumberHasExpDigits = false;\n                this.curNumberHasExp = false;\n                this.curNumberHasDecimal = false;\n                this.canParseCommandOrComma = true;\n            }\n            // Continue if a white space or a comma was detected\n            if (isWhiteSpace(c)) {\n                continue;\n            }\n            if (',' === c && this.canParseCommandOrComma) {\n                // L 0,0, H is not valid:\n                this.canParseCommandOrComma = false;\n                continue;\n            }\n            // if a sign is detected, then parse the new number\n            if ('+' === c || '-' === c || '.' === c) {\n                this.curNumber = c;\n                this.curNumberHasDecimal = '.' === c;\n                continue;\n            }\n            // if a 0 is detected, then parse the new number\n            if (isEndingDigit) {\n                this.curNumber = c;\n                this.curNumberHasDecimal = false;\n                continue;\n            }\n            // Adding residual command\n            if (0 !== this.curArgs.length) {\n                throw new SyntaxError(`Unterminated command at index ${i}.`);\n            }\n            if (!this.canParseCommandOrComma) {\n                throw new SyntaxError(`Unexpected character \"${c}\" at index ${i}. Command cannot follow comma`);\n            }\n            this.canParseCommandOrComma = false;\n            // Detecting the next command\n            if ('z' === c || 'Z' === c) {\n                commands.push({\n                    type: SVGPathData.CLOSE_PATH,\n                });\n                this.canParseCommandOrComma = true;\n                this.curCommandType = -1;\n                continue;\n                // Horizontal move to command\n            }\n            else if ('h' === c || 'H' === c) {\n                this.curCommandType = SVGPathData.HORIZ_LINE_TO;\n                this.curCommandRelative = 'h' === c;\n                // Vertical move to command\n            }\n            else if ('v' === c || 'V' === c) {\n                this.curCommandType = SVGPathData.VERT_LINE_TO;\n                this.curCommandRelative = 'v' === c;\n                // Move to command\n            }\n            else if ('m' === c || 'M' === c) {\n                this.curCommandType = SVGPathData.MOVE_TO;\n                this.curCommandRelative = 'm' === c;\n                // Line to command\n            }\n            else if ('l' === c || 'L' === c) {\n                this.curCommandType = SVGPathData.LINE_TO;\n                this.curCommandRelative = 'l' === c;\n                // Curve to command\n            }\n            else if ('c' === c || 'C' === c) {\n                this.curCommandType = SVGPathData.CURVE_TO;\n                this.curCommandRelative = 'c' === c;\n                // Smooth curve to command\n            }\n            else if ('s' === c || 'S' === c) {\n                this.curCommandType = SVGPathData.SMOOTH_CURVE_TO;\n                this.curCommandRelative = 's' === c;\n                // Quadratic bezier curve to command\n            }\n            else if ('q' === c || 'Q' === c) {\n                this.curCommandType = SVGPathData.QUAD_TO;\n                this.curCommandRelative = 'q' === c;\n                // Smooth quadratic bezier curve to command\n            }\n            else if ('t' === c || 'T' === c) {\n                this.curCommandType = SVGPathData.SMOOTH_QUAD_TO;\n                this.curCommandRelative = 't' === c;\n                // Elliptic arc command\n            }\n            else if ('a' === c || 'A' === c) {\n                this.curCommandType = SVGPathData.ARC;\n                this.curCommandRelative = 'a' === c;\n            }\n            else {\n                throw new SyntaxError(`Unexpected character \"${c}\" at index ${i}.`);\n            }\n        }\n        return commands;\n    }\n    /**\n     * Return a wrapper around this parser which applies the transformation on parsed commands.\n     */\n    transform(transform) {\n        const result = Object.create(this, {\n            parse: {\n                value(chunk, commands = []) {\n                    const parsedCommands = Object.getPrototypeOf(this).parse.call(this, chunk);\n                    for (const c of parsedCommands) {\n                        const cT = transform(c);\n                        if (Array.isArray(cT)) {\n                            commands.push(...cT);\n                        }\n                        else {\n                            commands.push(cT);\n                        }\n                    }\n                    return commands;\n                },\n            },\n        });\n        return result;\n    }\n}\n//# sourceMappingURL=SVGPathDataParser.js.map","import { encodeSVGPath } from './SVGPathDataEncoder.js';\nimport { SVGPathDataParser } from './SVGPathDataParser.js';\nimport { SVGPathDataTransformer } from './SVGPathDataTransformer.js';\nimport { TransformableSVG } from './TransformableSVG.js';\nexport class SVGPathData extends TransformableSVG {\n    commands;\n    constructor(content) {\n        super();\n        if ('string' === typeof content) {\n            this.commands = SVGPathData.parse(content);\n        }\n        else {\n            this.commands = content;\n        }\n    }\n    encode() {\n        return SVGPathData.encode(this.commands);\n    }\n    getBounds() {\n        const boundsTransform = SVGPathDataTransformer.CALCULATE_BOUNDS();\n        this.transform(boundsTransform);\n        return boundsTransform;\n    }\n    transform(transformFunction) {\n        const newCommands = [];\n        for (const command of this.commands) {\n            const transformedCommand = transformFunction(command);\n            if (Array.isArray(transformedCommand)) {\n                newCommands.push(...transformedCommand);\n            }\n            else {\n                newCommands.push(transformedCommand);\n            }\n        }\n        this.commands = newCommands;\n        return this;\n    }\n    /**\n     * Reverses the order of path commands to go from end to start\n     * IMPORTANT: This function expects absolute commands as input.\n     * @param preserveSubpathOrder If true, keeps subpaths in their original order\n     */\n    reverse(preserveSubpathOrder = true) {\n        this.commands = SVGPathDataTransformer.REVERSE_PATH(this.commands, preserveSubpathOrder);\n        return this;\n    }\n    removeCollinear() {\n        this.commands = SVGPathDataTransformer.REMOVE_COLLINEAR(this.commands);\n        return this;\n    }\n    static encode(commands) {\n        return encodeSVGPath(commands);\n    }\n    static parse(path) {\n        const parser = new SVGPathDataParser();\n        const commands = [];\n        parser.parse(path, commands);\n        parser.finish(commands);\n        return commands;\n    }\n    static CLOSE_PATH = 1;\n    static MOVE_TO = 2;\n    static HORIZ_LINE_TO = 4;\n    static VERT_LINE_TO = 8;\n    static LINE_TO = 16;\n    static CURVE_TO = 32;\n    static SMOOTH_CURVE_TO = 64;\n    static QUAD_TO = 128;\n    static SMOOTH_QUAD_TO = 256;\n    static ARC = 512;\n    static LINE_COMMANDS = SVGPathData.LINE_TO | SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO;\n    static DRAWING_COMMANDS = SVGPathData.HORIZ_LINE_TO |\n        SVGPathData.VERT_LINE_TO |\n        SVGPathData.LINE_TO |\n        SVGPathData.CURVE_TO |\n        SVGPathData.SMOOTH_CURVE_TO |\n        SVGPathData.QUAD_TO |\n        SVGPathData.SMOOTH_QUAD_TO |\n        SVGPathData.ARC;\n}\nexport const COMMAND_ARG_COUNTS = {\n    [SVGPathData.MOVE_TO]: 2,\n    [SVGPathData.LINE_TO]: 2,\n    [SVGPathData.HORIZ_LINE_TO]: 1,\n    [SVGPathData.VERT_LINE_TO]: 1,\n    [SVGPathData.CLOSE_PATH]: 0,\n    [SVGPathData.QUAD_TO]: 4,\n    [SVGPathData.SMOOTH_QUAD_TO]: 2,\n    [SVGPathData.CURVE_TO]: 6,\n    [SVGPathData.SMOOTH_CURVE_TO]: 4,\n    [SVGPathData.ARC]: 7,\n};\n//# sourceMappingURL=SVGPathData.js.map","import { createConsole } from \"./Console.ts\";\nimport {\n  DisplayContextCommand,\n  trimContextCommands,\n} from \"./DisplayContextCommand.ts\";\nimport { INode, parseSync } from \"svgson\";\nimport { SVGPathData } from \"svg-pathdata\";\nimport { DisplayBezierCurve, DisplaySize } from \"../DisplayManager.ts\";\nimport { pointInPolygon, Vector2 } from \"./MathUtils.ts\";\nimport {\n  contourArea,\n  DisplaySprite,\n  DisplaySpriteSheet,\n} from \"./DisplaySpriteSheetUtils.ts\";\nimport { simplifyCurves } from \"./PathUtils.ts\";\nimport { DisplayBoundingBox } from \"./DisplayCanvasHelper.ts\";\nimport RangeHelper from \"./RangeHelper.ts\";\nimport { kMeansColors, mapToClosestPaletteIndex } from \"./ColorUtils.ts\";\n\nconst _console = createConsole(\"SvgUtils\", { log: false });\n\ntype FillRule = \"nonzero\" | \"evenodd\";\ntype CanvasCommand =\n  | { type: \"lineWidth\"; lineWidth: number }\n  | { type: \"fillStyle\"; fillStyle: string }\n  | { type: \"strokeStyle\"; strokeStyle: string }\n  | { type: \"fillRule\"; fillRule: FillRule }\n  | { type: \"pathStart\" | \"pathEnd\" }\n  | { type: \"moveTo\" | \"lineTo\"; x: number; y: number }\n  | { type: \"line\"; x1: number; y1: number; x2: number; y2: number }\n  | { type: \"quadraticCurveTo\"; cpx: number; cpy: number; x: number; y: number }\n  | {\n      type: \"bezierCurveTo\";\n      cp1x: number;\n      cp1y: number;\n      cp2x: number;\n      cp2y: number;\n      x: number;\n      y: number;\n    }\n  | { type: \"closePath\"; checkIfHole?: boolean }\n  | {\n      type: \"rect\";\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      rotation: number;\n    }\n  | {\n      type: \"roundRect\";\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      r: number;\n      rotation: number;\n    }\n  | { type: \"circle\"; x: number; y: number; r: number }\n  | {\n      type: \"ellipse\";\n      x: number;\n      y: number;\n      rx: number;\n      ry: number;\n      rotation: number;\n    };\n\ninterface Transform {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\ninterface DecomposedTransform {\n  translation: { x: number; y: number };\n  rotation: number; // in radians\n  scale: { x: number; y: number };\n  skew: { x: number; y: number }; // skewX/Y in radians\n  isScaleUniform: boolean; // true if scaleX ≈ scaleY\n}\n\n/** Fully decompose a 2D affine transform */\nfunction decomposeTransform(\n  t: Transform,\n  tolerance = 1e-6\n): DecomposedTransform {\n  // Translation\n  const tx = t.e;\n  const ty = t.f;\n\n  // Compute scale\n  const scaleX = Math.sqrt(t.a * t.a + t.b * t.b);\n  const scaleY = Math.sqrt(t.c * t.c + t.d * t.d);\n\n  // Compute rotation (from X-axis)\n  let rotation = 0;\n  if (scaleX !== 0) {\n    rotation = Math.atan2(t.b / scaleX, t.a / scaleX);\n  }\n\n  // Compute skew (skewX = angle between x and y axes)\n  let skewX = 0;\n  let skewY = 0;\n  if (scaleX !== 0 && scaleY !== 0) {\n    skewX = Math.atan2(t.a * t.c + t.b * t.d, scaleX * scaleX);\n    skewY = 0; // rarely needed, can be calculated similarly if desired\n  }\n\n  // Uniform scale check\n  const isScaleUniform = Math.abs(scaleX - scaleY) < tolerance;\n\n  return {\n    translation: { x: tx, y: ty },\n    rotation,\n    scale: { x: scaleX, y: scaleY },\n    skew: { x: skewX, y: skewY },\n    isScaleUniform,\n  };\n}\n\nconst identity: Transform = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0 };\n\nfunction multiply(t1: Transform, t2: Transform): Transform {\n  //_console.log(\"multiplying matrices\", t1, t2);\n  return {\n    a: t1.a * t2.a + t1.c * t2.b,\n    b: t1.b * t2.a + t1.d * t2.b,\n    c: t1.a * t2.c + t1.c * t2.d,\n    d: t1.b * t2.c + t1.d * t2.d,\n    e: t1.a * t2.e + t1.c * t2.f + t1.e,\n    f: t1.b * t2.e + t1.d * t2.f + t1.f,\n  };\n}\n\nfunction parseTransform(transformStr: string): Transform {\n  // Very basic parser, handles translate, scale, rotate, matrix\n  if (!transformStr) return identity;\n\n  const t = transformStr.match(/(\\w+)\\(([^)]+)\\)/g);\n  if (!t) return identity;\n\n  let matrix = structuredClone(identity);\n\n  for (const part of t) {\n    const [, fn, argsStr] = /(\\w+)\\(([^)]+)\\)/.exec(part)!;\n    const args = argsStr.split(/[\\s,]+/).map(Number);\n    let m: Transform = structuredClone(identity);\n\n    switch (fn) {\n      case \"translate\":\n        //_console.log(\"translate\", { x: args[0], y: args[1] });\n        m.e = args[0];\n        m.f = args[1] || 0;\n        break;\n      case \"scale\":\n        //_console.log(\"scale\", { x: args[0], y: args[1] });\n        m.a = args[0];\n        m.d = args[1] !== undefined ? args[1] : args[0];\n        break;\n      case \"rotate\":\n        const angle = (args[0] * Math.PI) / 180;\n        //_console.log(\"rotate\", { angle });\n        const cos = Math.cos(angle),\n          sin = Math.sin(angle);\n        if (args[1] !== undefined && args[2] !== undefined) {\n          const [cx, cy] = [args[1], args[2]];\n          m = {\n            a: cos,\n            b: sin,\n            c: -sin,\n            d: cos,\n            e: cx - cos * cx + sin * cy,\n            f: cy - sin * cx - cos * cy,\n          };\n        } else {\n          m.a = cos;\n          m.b = sin;\n          m.c = -sin;\n          m.d = cos;\n        }\n        break;\n      case \"matrix\":\n        //_console.log(\"matrix\", args);\n        [m.a, m.b, m.c, m.d, m.e, m.f] = args;\n        break;\n    }\n\n    matrix = multiply(matrix, m);\n  }\n\n  //_console.log(\"parsedTransform\", matrix);\n  return matrix;\n}\n\nfunction applyTransform(x: number, y: number, t: Transform) {\n  //_console.log(\"applying transform\", { x, y, t });\n  const value: Vector2 = {\n    x: t.a * x + t.c * y + t.e,\n    y: t.b * x + t.d * y + t.f,\n  };\n  //_console.log(\"transformed value\", value);\n  return value;\n}\nfunction parseStyle(styleStr: string | undefined): Record<string, string> {\n  const style: Record<string, string> = {};\n  if (!styleStr) return style;\n\n  styleStr.split(\";\").forEach((item) => {\n    const [key, value] = item.split(\":\").map((s) => s.trim());\n    if (key && value) style[key] = value;\n  });\n  return style;\n}\n\nconst circleBezierConstant = 0.5522847498307936;\nfunction svgJsonToCanvasCommands(svgJson: INode): CanvasCommand[] {\n  const commands: CanvasCommand[] = [];\n\n  function traverse(node: any, parentTransform: Transform) {\n    //_console.log(\"traversing node\", node, parentTransform);\n    const transform = parseTransform(node.attributes.transform);\n    //_console.log(\"transform\", transform);\n    const nodeTransform = multiply(parentTransform, transform);\n    //_console.log(\"nodeTransform\", nodeTransform);\n\n    const { scale, translation, rotation, isScaleUniform } =\n      decomposeTransform(nodeTransform);\n    //_console.log({ scale, translation, rotation, isScaleUniform });\n    const uniformScale = scale.x;\n\n    // Handle styles\n    const style = parseStyle(node.attributes.style);\n    // Fill\n    if (style.fill) commands.push({ type: \"fillStyle\", fillStyle: style.fill });\n    if (node.attributes.fill)\n      commands.push({ type: \"fillStyle\", fillStyle: node.attributes.fill });\n\n    // Stroke\n    if (style.stroke)\n      commands.push({ type: \"strokeStyle\", strokeStyle: style.stroke });\n    if (node.attributes.stroke)\n      commands.push({\n        type: \"strokeStyle\",\n        strokeStyle: node.attributes.stroke,\n      });\n\n    // Stroke width\n    let strokeWidth = 0;\n    if (style[\"stroke-width\"])\n      strokeWidth = parseLength(style[\"stroke-width\"]) ?? 0;\n    if (node.attributes[\"stroke-width\"])\n      strokeWidth = parseLength(node.attributes[\"stroke-width\"]) ?? strokeWidth;\n    if (strokeWidth)\n      commands.push({\n        type: \"lineWidth\",\n        lineWidth: strokeWidth * nodeTransform.a, // scale to pixels\n      });\n\n    // Fill rule\n    let fillRule = style[\"fill-rule\"];\n    if (node.attributes[\"fill-rule\"]) fillRule = node.attributes[\"fill-rule\"];\n    if (fillRule)\n      commands.push({ type: \"fillRule\", fillRule: fillRule as FillRule });\n\n    switch (node.name) {\n      case \"path\":\n        const d = node.attributes.d;\n        if (!d) break;\n        const pathData = new SVGPathData(d)\n          .toAbs()\n          .aToC()\n          .normalizeHVZ(false)\n          .normalizeST()\n          .removeCollinear()\n          .sanitize();\n        //_console.log(\"pathData\", d, pathData);\n        commands.push({ type: \"pathStart\" });\n        for (const cmd of pathData.commands) {\n          switch (cmd.type) {\n            case SVGPathData.MOVE_TO:\n              commands.push({ type: \"closePath\" });\n              const m = applyTransform(cmd.x!, cmd.y!, nodeTransform);\n              commands.push({ type: \"moveTo\", x: m.x, y: m.y });\n              break;\n\n            case SVGPathData.LINE_TO:\n              const l = applyTransform(cmd.x!, cmd.y!, nodeTransform);\n              commands.push({ type: \"lineTo\", x: l.x, y: l.y });\n              break;\n            case SVGPathData.CURVE_TO:\n              const c1 = applyTransform(cmd.x1!, cmd.y1!, nodeTransform);\n              const c2 = applyTransform(cmd.x2!, cmd.y2!, nodeTransform);\n              const ce = applyTransform(cmd.x!, cmd.y!, nodeTransform);\n              commands.push({\n                type: \"bezierCurveTo\",\n                cp1x: c1.x,\n                cp1y: c1.y,\n                cp2x: c2.x,\n                cp2y: c2.y,\n                x: ce.x,\n                y: ce.y,\n              });\n              break;\n            case SVGPathData.QUAD_TO:\n              const qcp = applyTransform(cmd.x1!, cmd.y1!, nodeTransform);\n              const qe = applyTransform(cmd.x!, cmd.y!, nodeTransform);\n              commands.push({\n                type: \"quadraticCurveTo\",\n                cpx: qcp.x,\n                cpy: qcp.y,\n                x: qe.x,\n                y: qe.y,\n              });\n              break;\n            case SVGPathData.CLOSE_PATH:\n              commands.push({ type: \"closePath\" });\n              break;\n            default:\n              _console.warn(\"uncaught command\", cmd);\n              break;\n          }\n        }\n        if (commands.at(-1)?.type != \"closePath\") {\n          commands.push({ type: \"closePath\" });\n        }\n        commands.push({ type: \"pathEnd\" });\n\n        break;\n\n      case \"rect\": {\n        const x = parseFloat(node.attributes.x || \"0\");\n        const y = parseFloat(node.attributes.y || \"0\");\n        const width = parseFloat(node.attributes.width || \"0\");\n        const height = parseFloat(node.attributes.height || \"0\");\n\n        let rx = parseFloat(node.attributes.rx || \"0\");\n        let ry = parseFloat(node.attributes.ry || \"0\");\n        if (!node.attributes.ry && rx) ry = rx;\n\n        rx = Math.min(rx, width / 2);\n        ry = Math.min(ry, height / 2);\n\n        if (rx === 0 && ry === 0) {\n          // sharp rect\n          if (isScaleUniform) {\n            const center = applyTransform(\n              x + width / 2,\n              y + height / 2,\n              nodeTransform\n            );\n            commands.push({\n              type: \"rect\",\n              x: center.x,\n              y: center.y,\n              width: width * uniformScale,\n              height: height * uniformScale,\n              rotation,\n            });\n          } else {\n            const tl = applyTransform(x, y, nodeTransform);\n            const tr = applyTransform(x + width, y, nodeTransform);\n            const br = applyTransform(x + width, y + height, nodeTransform);\n            const bl = applyTransform(x, y + height, nodeTransform);\n\n            commands.push({ type: \"moveTo\", x: tl.x, y: tl.y });\n            commands.push({ type: \"lineTo\", x: tr.x, y: tr.y });\n            commands.push({ type: \"lineTo\", x: br.x, y: br.y });\n            commands.push({ type: \"lineTo\", x: bl.x, y: bl.y });\n            commands.push({ type: \"closePath\" });\n          }\n        } else {\n          // rounded rect\n          if (rx == ry && isScaleUniform) {\n            const center = applyTransform(\n              x + width / 2,\n              y + height / 2,\n              nodeTransform\n            );\n            commands.push({\n              type: \"roundRect\",\n              x: center.x,\n              y: center.y,\n              width: width * uniformScale,\n              height: height * uniformScale,\n              rotation,\n              r: rx * uniformScale,\n            });\n          } else {\n            const ox = rx * circleBezierConstant; // x offset for control points\n            const oy = ry * circleBezierConstant; // y offset for control points\n\n            // Corners before transform\n            const p1 = { x: x + rx, y: y };\n            const p2 = { x: x + width - rx, y: y };\n            const p3 = { x: x + width, y: y + ry };\n            const p4 = { x: x + width, y: y + height - ry };\n            const p5 = { x: x + width - rx, y: y + height };\n            const p6 = { x: x + rx, y: y + height };\n            const p7 = { x: x, y: y + height - ry };\n            const p8 = { x: x, y: y + ry };\n\n            // Move to start\n            const start = applyTransform(p1.x, p1.y, nodeTransform);\n            commands.push({ type: \"moveTo\", x: start.x, y: start.y });\n\n            // Top edge + top-right corner\n            let cp1 = applyTransform(p2.x + ox, p2.y, nodeTransform);\n            let cp2 = applyTransform(p3.x, p3.y - oy, nodeTransform);\n            let end = applyTransform(p3.x, p3.y, nodeTransform);\n            commands.push({\n              type: \"lineTo\",\n              x: applyTransform(p2.x, p2.y, nodeTransform).x,\n              y: applyTransform(p2.x, p2.y, nodeTransform).y,\n            });\n            commands.push({\n              type: \"bezierCurveTo\",\n              cp1x: cp1.x,\n              cp1y: cp1.y,\n              cp2x: cp2.x,\n              cp2y: cp2.y,\n              x: end.x,\n              y: end.y,\n            });\n\n            // Right edge + bottom-right corner\n            cp1 = applyTransform(p4.x, p4.y + oy, nodeTransform);\n            cp2 = applyTransform(p5.x + ox, p5.y, nodeTransform);\n            end = applyTransform(p5.x, p5.y, nodeTransform);\n            commands.push({\n              type: \"lineTo\",\n              x: applyTransform(p4.x, p4.y, nodeTransform).x,\n              y: applyTransform(p4.x, p4.y, nodeTransform).y,\n            });\n            commands.push({\n              type: \"bezierCurveTo\",\n              cp1x: cp1.x,\n              cp1y: cp1.y,\n              cp2x: cp2.x,\n              cp2y: cp2.y,\n              x: end.x,\n              y: end.y,\n            });\n\n            // Bottom edge + bottom-left corner\n            cp1 = applyTransform(p6.x - ox, p6.y, nodeTransform);\n            cp2 = applyTransform(p7.x, p7.y + oy, nodeTransform);\n            end = applyTransform(p7.x, p7.y, nodeTransform);\n            commands.push({\n              type: \"lineTo\",\n              x: applyTransform(p6.x, p6.y, nodeTransform).x,\n              y: applyTransform(p6.x, p6.y, nodeTransform).y,\n            });\n            commands.push({\n              type: \"bezierCurveTo\",\n              cp1x: cp1.x,\n              cp1y: cp1.y,\n              cp2x: cp2.x,\n              cp2y: cp2.y,\n              x: end.x,\n              y: end.y,\n            });\n\n            // Left edge + top-left corner\n            cp1 = applyTransform(p8.x, p8.y - oy, nodeTransform);\n            cp2 = applyTransform(p1.x - ox, p1.y, nodeTransform);\n            end = applyTransform(p1.x, p1.y, nodeTransform);\n            commands.push({\n              type: \"lineTo\",\n              x: applyTransform(p8.x, p8.y, nodeTransform).x,\n              y: applyTransform(p8.x, p8.y, nodeTransform).y,\n            });\n            commands.push({\n              type: \"bezierCurveTo\",\n              cp1x: cp1.x,\n              cp1y: cp1.y,\n              cp2x: cp2.x,\n              cp2y: cp2.y,\n              x: end.x,\n              y: end.y,\n            });\n\n            commands.push({ type: \"closePath\" });\n          }\n        }\n        break;\n      }\n\n      case \"circle\": {\n        const cx = parseFloat(node.attributes.cx || \"0\");\n        const cy = parseFloat(node.attributes.cy || \"0\");\n        const r = parseFloat(node.attributes.r || \"0\");\n\n        if (r === 0) break;\n\n        if (isScaleUniform) {\n          //_console.log({ cx, cy, r, uniformScale });\n          const center = applyTransform(cx, cy, nodeTransform);\n          commands.push({\n            type: \"circle\",\n            x: center.x,\n            y: center.y,\n            r: r * uniformScale,\n          });\n        } else {\n          const ox = r * circleBezierConstant; // control point offset\n\n          // Points around the circle\n          const pTop = applyTransform(cx, cy - r, nodeTransform);\n          const pRight = applyTransform(cx + r, cy, nodeTransform);\n          const pBottom = applyTransform(cx, cy + r, nodeTransform);\n          const pLeft = applyTransform(cx - r, cy, nodeTransform);\n          //_console.log({ pTop, pRight, pBottom, pLeft });\n\n          const cpTopRight = applyTransform(cx + ox, cy - r, nodeTransform);\n          const cpRightTop = applyTransform(cx + r, cy - ox, nodeTransform);\n\n          const cpRightBottom = applyTransform(cx + r, cy + ox, nodeTransform);\n          const cpBottomRight = applyTransform(cx + ox, cy + r, nodeTransform);\n\n          const cpBottomLeft = applyTransform(cx - ox, cy + r, nodeTransform);\n          const cpLeftBottom = applyTransform(cx - r, cy + ox, nodeTransform);\n\n          const cpLeftTop = applyTransform(cx - r, cy - ox, nodeTransform);\n          const cpTopLeft = applyTransform(cx - ox, cy - r, nodeTransform);\n\n          commands.push({ type: \"moveTo\", x: pTop.x, y: pTop.y });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpTopRight.x,\n            cp1y: cpTopRight.y,\n            cp2x: cpRightTop.x,\n            cp2y: cpRightTop.y,\n            x: pRight.x,\n            y: pRight.y,\n          });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpRightBottom.x,\n            cp1y: cpRightBottom.y,\n            cp2x: cpBottomRight.x,\n            cp2y: cpBottomRight.y,\n            x: pBottom.x,\n            y: pBottom.y,\n          });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpBottomLeft.x,\n            cp1y: cpBottomLeft.y,\n            cp2x: cpLeftBottom.x,\n            cp2y: cpLeftBottom.y,\n            x: pLeft.x,\n            y: pLeft.y,\n          });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpLeftTop.x,\n            cp1y: cpLeftTop.y,\n            cp2x: cpTopLeft.x,\n            cp2y: cpTopLeft.y,\n            x: pTop.x,\n            y: pTop.y,\n          });\n\n          commands.push({ type: \"closePath\" });\n        }\n        break;\n      }\n\n      case \"ellipse\": {\n        const cx = parseFloat(node.attributes.cx || \"0\");\n        const cy = parseFloat(node.attributes.cy || \"0\");\n        const rx = parseFloat(node.attributes.rx || \"0\");\n        const ry = parseFloat(node.attributes.ry || \"0\");\n\n        if (rx === 0 || ry === 0) break;\n\n        if (isScaleUniform) {\n          const center = applyTransform(cx, cy, nodeTransform);\n          if (rx == ry) {\n            commands.push({\n              type: \"circle\",\n              x: center.x,\n              y: center.y,\n              r: rx * uniformScale,\n            });\n          } else {\n            commands.push({\n              type: \"ellipse\",\n              x: center.x,\n              y: center.y,\n              rx: rx * uniformScale,\n              ry: ry * uniformScale,\n              rotation,\n            });\n          }\n        } else {\n          const ox = rx * circleBezierConstant;\n          const oy = ry * circleBezierConstant;\n\n          // Key points\n          const pTop = applyTransform(cx, cy - ry, nodeTransform);\n          const pRight = applyTransform(cx + rx, cy, nodeTransform);\n          const pBottom = applyTransform(cx, cy + ry, nodeTransform);\n          const pLeft = applyTransform(cx - rx, cy, nodeTransform);\n\n          // Control points\n          const cpTopRight = applyTransform(cx + ox, cy - ry, nodeTransform);\n          const cpRightTop = applyTransform(cx + rx, cy - oy, nodeTransform);\n\n          const cpRightBottom = applyTransform(cx + rx, cy + oy, nodeTransform);\n          const cpBottomRight = applyTransform(cx + ox, cy + ry, nodeTransform);\n\n          const cpBottomLeft = applyTransform(cx - ox, cy + ry, nodeTransform);\n          const cpLeftBottom = applyTransform(cx - rx, cy + oy, nodeTransform);\n\n          const cpLeftTop = applyTransform(cx - rx, cy - oy, nodeTransform);\n          const cpTopLeft = applyTransform(cx - ox, cy - ry, nodeTransform);\n\n          // Draw ellipse using cubic Beziers\n          commands.push({ type: \"moveTo\", x: pTop.x, y: pTop.y });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpTopRight.x,\n            cp1y: cpTopRight.y,\n            cp2x: cpRightTop.x,\n            cp2y: cpRightTop.y,\n            x: pRight.x,\n            y: pRight.y,\n          });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpRightBottom.x,\n            cp1y: cpRightBottom.y,\n            cp2x: cpBottomRight.x,\n            cp2y: cpBottomRight.y,\n            x: pBottom.x,\n            y: pBottom.y,\n          });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpBottomLeft.x,\n            cp1y: cpBottomLeft.y,\n            cp2x: cpLeftBottom.x,\n            cp2y: cpLeftBottom.y,\n            x: pLeft.x,\n            y: pLeft.y,\n          });\n\n          commands.push({\n            type: \"bezierCurveTo\",\n            cp1x: cpLeftTop.x,\n            cp1y: cpLeftTop.y,\n            cp2x: cpTopLeft.x,\n            cp2y: cpTopLeft.y,\n            x: pTop.x,\n            y: pTop.y,\n          });\n\n          commands.push({ type: \"closePath\" });\n        }\n        break;\n      }\n\n      case \"polyline\":\n      case \"polygon\": {\n        const pointsStr: string = node.attributes.points || \"\";\n        const points: { x: number; y: number }[] = pointsStr\n          .trim()\n          .split(/[\\s,]+/)\n          .map(Number)\n          .reduce<{ x?: number; y?: number }[]>((acc, val, idx) => {\n            if (idx % 2 === 0) acc.push({ x: val, y: 0 });\n            else acc[acc.length - 1].y = val;\n            return acc;\n          }, [])\n          .map((p) => ({ x: p.x!, y: p.y! }));\n\n        if (points.length === 0) break;\n\n        // Move to first point\n        const start = applyTransform(points[0].x, points[0].y, nodeTransform);\n        commands.push({ type: \"moveTo\", x: start.x, y: start.y });\n\n        // Draw lines to remaining points\n        for (let i = 1; i < points.length; i++) {\n          const p = applyTransform(points[i].x, points[i].y, nodeTransform);\n          commands.push({ type: \"lineTo\", x: p.x, y: p.y });\n        }\n\n        // close path, even if polyline\n        commands.push({ type: \"closePath\" });\n        break;\n      }\n\n      case \"line\": {\n        const x1 = parseFloat(node.attributes.x1 || \"0\");\n        const y1 = parseFloat(node.attributes.y1 || \"0\");\n        const x2 = parseFloat(node.attributes.x2 || \"0\");\n        const y2 = parseFloat(node.attributes.y2 || \"0\");\n\n        const p1 = applyTransform(x1, y1, nodeTransform);\n        const p2 = applyTransform(x2, y2, nodeTransform);\n\n        commands.push({ type: \"line\", x1: p1.x, y1: p1.y, x2: p2.x, y2: p2.y });\n\n        break;\n      }\n      case \"svg\":\n        break;\n      default:\n        _console.log(\"uncaught node\", node);\n        break;\n    }\n\n    if (node.children) {\n      for (const child of node.children) traverse(child, nodeTransform);\n    }\n  }\n\n  traverse(svgJson, getSvgTransformToPixels(svgJson));\n  return commands;\n}\n\nfunction parseLength(\n  str: string | undefined,\n  relativeTo?: number\n): number | undefined {\n  if (!str) return undefined;\n  const match = /^([0-9.]+)([a-z%]*)$/.exec(str.trim());\n  if (!match) return undefined;\n\n  const value = parseFloat(match[1]);\n  const unit = match[2] || \"px\";\n\n  switch (unit) {\n    case \"px\":\n      return value;\n    case \"pt\":\n      return value * (96 / 72); // 1pt = 1/72in, 96dpi\n    case \"in\":\n      return value * 96; // 1in = 96px\n    case \"cm\":\n      return value * (96 / 2.54); // 1cm = 96/2.54 px\n    case \"mm\":\n      return value * (96 / 25.4); // 1mm = 96/25.4 px\n    case \"%\":\n      if (relativeTo === undefined) return undefined;\n      return (value / 100) * relativeTo;\n    case \"\":\n      return value; // unitless → px\n    default:\n      return value; // unknown unit → assume px\n  }\n}\n\nfunction getSvgJsonSize(svgJson: INode) {\n  const attrs = svgJson.attributes || {};\n  let width = parseLength(attrs.width);\n  let height = parseLength(attrs.height);\n\n  // Fallback to viewBox dimensions\n  if ((width == null || height == null) && attrs.viewBox) {\n    const [, , vbWidth, vbHeight] = attrs.viewBox\n      .split(/[\\s,]+/)\n      .map(parseFloat);\n    width ??= vbWidth;\n    height ??= vbHeight;\n  }\n\n  const size: DisplaySize = {\n    width: width ?? 300,\n    height: height ?? 150,\n  };\n  //_console.log(\"size\", size);\n  return size;\n}\n\nfunction getSvgJsonViewBox(svgJson: INode): DisplayBoundingBox {\n  const attrs = svgJson.attributes || {};\n  let x = 0,\n    y = 0,\n    width: number | undefined,\n    height: number | undefined;\n\n  if (attrs.viewBox) {\n    [x, y, width, height] = attrs.viewBox.split(/[\\s,]+/).map(parseFloat);\n  }\n\n  // Fallback to size if no viewBox\n  if (width == null || height == null) {\n    const size = getSvgJsonSize(svgJson);\n    width ??= size.width;\n    height ??= size.height;\n  }\n\n  const viewBox: DisplayBoundingBox = {\n    x,\n    y,\n    width: width!,\n    height: height!,\n  };\n  //_console.log(\"viewBox\", viewBox);\n  return viewBox;\n}\n\nfunction getSvgJsonBoundingBox(svgJson: INode): DisplayBoundingBox {\n  const { width, height } = getSvgJsonSize(svgJson);\n  const viewBox = getSvgJsonViewBox(svgJson);\n\n  if (width !== undefined && height !== undefined) {\n    return { x: 0, y: 0, width, height };\n  } else if (viewBox.width !== undefined && viewBox.height !== undefined) {\n    return viewBox;\n  } else {\n    return { x: 0, y: 0, width: 300, height: 150 };\n  }\n}\n\nfunction getSvgTransformToPixels(svgJson: INode): Transform {\n  const attrs = svgJson.attributes || {};\n  const { width, height } = getSvgJsonSize(svgJson); // in px\n  const viewBox = getSvgJsonViewBox(svgJson); // { x, y, width, height }\n\n  //_console.log({ width, height, viewBox });\n\n  // Base scales\n  let scaleX = width / viewBox.width;\n  let scaleY = height / viewBox.height;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  // Handle preserveAspectRatio=\"xMidYMid meet\"\n  if (attrs.preserveAspectRatio?.includes(\"meet\")) {\n    const s = Math.min(scaleX, scaleY);\n    offsetX = (width - viewBox.width * s) / 2;\n    offsetY = (height - viewBox.height * s) / 2;\n    scaleX = scaleY = s;\n  }\n\n  // Return the affine transform matrix\n  return {\n    a: scaleX,\n    b: 0,\n    c: 0,\n    d: scaleY,\n    e: -viewBox.x * scaleX + offsetX,\n    f: -viewBox.y * scaleY + offsetY,\n  };\n}\n\nexport type ParseSvgOptions = {\n  fit?: boolean; // removes extra empty space around the shapes\n  width?: number; // scale output to this width\n  height?: number; // scale output to this height\n  aspectRatio?: number; // width / height, used if only one of width/height is provided\n  offsetX?: number;\n  offsetY?: number;\n  centered?: boolean;\n};\nconst defaultParseSvgOptions: ParseSvgOptions = {\n  fit: false,\n  centered: true,\n};\n\nfunction transformCanvasCommands(\n  canvasCommands: CanvasCommand[],\n  xCallback: (x: number) => number,\n  yCallback: (y: number) => number,\n  type: \"offset\" | \"scale\"\n): CanvasCommand[] {\n  return canvasCommands.map((command) => {\n    switch (command.type) {\n      case \"moveTo\":\n      case \"lineTo\": {\n        let { x, y } = command;\n        x = xCallback(x);\n        y = yCallback(y);\n        return { type: command.type, x, y };\n        break;\n      }\n      case \"quadraticCurveTo\": {\n        let { x, y, cpx, cpy } = command;\n        x = xCallback(x);\n        y = yCallback(y);\n        cpx = xCallback(cpx);\n        cpy = yCallback(cpy);\n        return { type: command.type, x, y, cpx, cpy };\n        break;\n      }\n      case \"bezierCurveTo\": {\n        let { x, y, cp1x, cp1y, cp2x, cp2y } = command;\n        x = xCallback(x);\n        y = yCallback(y);\n        cp1x = xCallback(cp1x);\n        cp1y = yCallback(cp1y);\n        cp2x = xCallback(cp2x);\n        cp2y = yCallback(cp2y);\n        return { type: command.type, x, y, cp1x, cp1y, cp2x, cp2y };\n        break;\n      }\n      case \"lineWidth\": {\n        if (type == \"scale\") {\n          let { lineWidth } = command;\n          lineWidth = xCallback(lineWidth);\n          return { type: command.type, lineWidth };\n        }\n        break;\n      }\n      case \"rect\":\n      case \"roundRect\": {\n        let { x, y, width, height, rotation } = command;\n        x = xCallback(x);\n        y = yCallback(y);\n        if (type == \"scale\") {\n          width = xCallback(width);\n          height = yCallback(height);\n        }\n        if (command.type == \"roundRect\") {\n          let { r } = command;\n          if (type == \"scale\") {\n            r = xCallback(r);\n          }\n          return { type: command.type, x, y, width, height, rotation, r };\n        }\n        return { type: command.type, x, y, width, height, rotation };\n        break;\n      }\n      case \"circle\":\n        {\n          let { x, y, r } = command;\n          x = xCallback(x);\n          y = yCallback(y);\n          if (type == \"scale\") {\n            r = xCallback(r);\n          }\n          return { type: command.type, x, y, r };\n        }\n        break;\n      case \"ellipse\":\n        {\n          let { x, y, rx, ry, rotation } = command;\n          x = xCallback(x);\n          y = yCallback(y);\n          if (type == \"scale\") {\n            rx = xCallback(rx);\n            ry = xCallback(ry);\n          }\n          return { type: command.type, x, y, rx, ry, rotation };\n        }\n        break;\n      default:\n        return command;\n    }\n    return command;\n  });\n}\nfunction forEachCanvasCommandVector2(\n  canvasCommands: CanvasCommand[],\n  vectorCallback: (x: number, y: number) => void\n) {\n  canvasCommands.forEach((command) => {\n    switch (command.type) {\n      case \"moveTo\":\n      case \"lineTo\":\n        {\n          let { x, y } = command;\n          vectorCallback(x, y);\n        }\n        break;\n      case \"quadraticCurveTo\":\n        {\n          let { x, y, cpx, cpy } = command;\n          vectorCallback(x, y);\n          vectorCallback(cpx, cpy);\n        }\n        break;\n      case \"bezierCurveTo\": {\n        let { x, y, cp1x, cp1y, cp2x, cp2y } = command;\n        vectorCallback(x, y);\n        vectorCallback(cp1x, cp1y);\n        vectorCallback(cp2x, cp2y);\n      }\n      default:\n        break;\n    }\n  });\n}\nfunction offsetCanvasCommands(\n  canvasCommands: CanvasCommand[],\n  offsetX = 0,\n  offsetY = 0\n) {\n  return transformCanvasCommands(\n    canvasCommands,\n    (x) => x + offsetX,\n    (y) => y + offsetY,\n    \"offset\"\n  );\n}\nfunction scaleCanvasCommands(\n  canvasCommands: CanvasCommand[],\n  scaleX: number,\n  scaleY: number\n) {\n  return transformCanvasCommands(\n    canvasCommands,\n    (x) => x * scaleX,\n    (y) => y * scaleY,\n    \"scale\"\n  );\n}\n\nfunction getBoundingBox(path: Vector2[]) {\n  let minX = Infinity,\n    minY = Infinity,\n    maxX = -Infinity,\n    maxY = -Infinity;\n  for (const p of path) {\n    if (p.x < minX) minX = p.x;\n    if (p.y < minY) minY = p.y;\n    if (p.x > maxX) maxX = p.x;\n    if (p.y > maxY) maxY = p.y;\n  }\n  return { minX, minY, maxX, maxY };\n}\n\nfunction bboxContains(\n  a: ReturnType<typeof getBoundingBox>,\n  b: ReturnType<typeof getBoundingBox>\n) {\n  return (\n    a.minX <= b.minX && a.minY <= b.minY && a.maxX >= b.maxX && a.maxY >= b.maxY\n  );\n}\n\nexport function classifySubpath(\n  subpath: Vector2[],\n  previous: { path: Vector2[]; isHole: boolean }[],\n  fillRule: FillRule\n): boolean {\n  const centroid = subpath.reduce(\n    (acc, p) => ({ x: acc.x + p.x, y: acc.y + p.y }),\n    { x: 0, y: 0 }\n  );\n  centroid.x /= subpath.length;\n  centroid.y /= subpath.length;\n\n  const subBBox = getBoundingBox(subpath);\n\n  let insideCount = 0;\n\n  for (const other of previous) {\n    const otherBBox = getBoundingBox(other.path);\n\n    // must be fully inside bbox\n    if (!bboxContains(otherBBox, subBBox)) continue;\n\n    // require *most* points to be inside\n    const insidePoints = subpath.filter((p) =>\n      pointInPolygon(p, other.path)\n    ).length;\n    const allInside = insidePoints > subpath.length * 0.8;\n    if (!allInside) continue;\n\n    insideCount++;\n  }\n\n  if (fillRule === \"evenodd\") {\n    return insideCount % 2 === 1; // odd count = hole\n  } else {\n    // non-zero winding rule\n    let winding = 0;\n    for (const other of previous) {\n      const otherBBox = getBoundingBox(other.path);\n      if (!bboxContains(otherBBox, subBBox)) continue;\n      if (pointInPolygon(centroid, other.path)) {\n        winding += contourArea(other.path) > 0 ? 1 : -1;\n      }\n    }\n    return winding !== 0; // nonzero = inside → hole\n  }\n}\n\nexport function svgToDisplayContextCommands(\n  svgString: string,\n  numberOfColors: number,\n  paletteOffset: number,\n  colors?: string[],\n  options?: ParseSvgOptions\n) {\n  _console.assertWithError(\n    numberOfColors > 1,\n    \"numberOfColors must be greater than 1\"\n  );\n  options = { ...defaultParseSvgOptions, ...options };\n  _console.log(\"options\", options);\n\n  const svgJson = parseSync(svgString);\n\n  let canvasCommands = svgJsonToCanvasCommands(svgJson);\n  _console.log(\"canvasCommands\", canvasCommands);\n\n  const boundingBox = getSvgJsonBoundingBox(svgJson);\n  //_console.log(\"boundingBox\", boundingBox);\n\n  let intrinsicWidth = boundingBox.width;\n  let intrinsicHeight = boundingBox.height;\n\n  _console.log({ intrinsicWidth, intrinsicHeight });\n\n  let scaleX = 1,\n    scaleY = 1;\n  if (options.width && options.height) {\n    scaleX = options.width / intrinsicWidth;\n    scaleY = options.height / intrinsicHeight;\n  } else if (options.width) {\n    scaleX = scaleY = options.width / intrinsicWidth;\n    if (options.aspectRatio) scaleY = scaleX / options.aspectRatio;\n  } else if (options.height) {\n    scaleX = scaleY = options.height / intrinsicHeight;\n    if (options.aspectRatio) scaleX = scaleY * options.aspectRatio;\n  }\n\n  _console.log({ scaleX, scaleY });\n\n  let width = intrinsicWidth * scaleX;\n  let height = intrinsicWidth * scaleX;\n\n  _console.log({ width, height });\n\n  if (scaleX !== 1 || scaleY !== 1) {\n    canvasCommands = scaleCanvasCommands(canvasCommands, scaleX, scaleY);\n  }\n\n  if (options.fit) {\n    const rangeHelper = {\n      x: new RangeHelper(),\n      y: new RangeHelper(),\n    };\n    forEachCanvasCommandVector2(canvasCommands, (x, y) => {\n      rangeHelper.x.update(x);\n      rangeHelper.y.update(y);\n    });\n\n    // _console.log(\"xRange\", rangeHelper.x.min, rangeHelper.x.max);\n    // _console.log(\"yRange\", rangeHelper.y.min, rangeHelper.y.max);\n\n    width = rangeHelper.x.span;\n    height = rangeHelper.y.span;\n\n    const offsetX = -rangeHelper.x.min;\n    const offsetY = -rangeHelper.y.min;\n\n    canvasCommands = offsetCanvasCommands(canvasCommands, offsetX, offsetY);\n  }\n\n  if (options.offsetX || options.offsetY) {\n    const offsetX = options.offsetX || 0;\n    const offsetY = options.offsetY || 0;\n    canvasCommands = offsetCanvasCommands(canvasCommands, offsetX, offsetY);\n  }\n\n  if (options.centered) {\n    const offsetX = -width / 2;\n    const offsetY = -height / 2;\n    canvasCommands = offsetCanvasCommands(canvasCommands, offsetX, offsetY);\n  }\n\n  let svgColors: string[] = [];\n  canvasCommands.forEach((canvasCommand) => {\n    let color: string | undefined;\n    switch (canvasCommand.type) {\n      case \"fillStyle\":\n        color = canvasCommand.fillStyle;\n        break;\n      case \"strokeStyle\":\n        color = canvasCommand.strokeStyle;\n        break;\n      default:\n        return;\n    }\n    if (color && color != \"none\" && !svgColors.includes(color)) {\n      svgColors.push(color);\n    }\n  });\n  if (svgColors.length == 0) {\n    svgColors.push(\"black\");\n  }\n  if (svgColors.length == 1) {\n    svgColors.push(\"white\");\n  }\n  _console.log(\"colors\", svgColors);\n\n  const colorToIndex: Record<string, number> = {};\n  if (colors) {\n    colors = colors.slice(0, numberOfColors);\n    const mapping = mapToClosestPaletteIndex(svgColors, colors.slice(1));\n    _console.log(\"mapping\", mapping, colors);\n    svgColors.forEach((color) => {\n      colorToIndex[color] = mapping[color] + 1;\n    });\n  } else {\n    // FIX - annoying when an svg has a black fill\n    const { palette, mapping } = kMeansColors(svgColors, numberOfColors);\n    _console.log(\"mapping\", mapping);\n    _console.log(\"palette\", palette);\n\n    svgColors.forEach((color) => {\n      colorToIndex[color] = mapping[color];\n    });\n    colors = palette;\n  }\n  _console.log(\"colorToIndex\", colorToIndex);\n\n  _console.log(\"transformed canvasCommands\", canvasCommands);\n\n  let curves: DisplayBezierCurve[] = [];\n  let startPoint: Vector2 = { x: 0, y: 0 };\n  let fillRule: FillRule = \"nonzero\";\n  let fillStyle: string | undefined;\n  let strokeStyle = \"none\";\n  let lineWidth = 1;\n  let segmentRadius = 1;\n  let wasHole = false;\n  let ignoreFill = false;\n  let ignoreLine = true;\n  let fillColorIndex = 1;\n  let lineColorIndex = 1;\n  const getFillColorIndex = () => fillColorIndex + paletteOffset;\n  const getLineColorIndex = () => lineColorIndex + paletteOffset;\n  let isDrawingPath = false;\n  const parsedPaths: { path: Vector2[]; isHole: boolean }[] = [];\n\n  let displayCommands: DisplayContextCommand[] = [];\n  displayCommands.push({\n    type: \"selectFillColor\",\n    fillColorIndex: getFillColorIndex(),\n  });\n  displayCommands.push({\n    type: \"selectLineColor\",\n    lineColorIndex: getLineColorIndex(),\n  });\n  displayCommands.push({ type: \"setIgnoreLine\", ignoreLine: true });\n  displayCommands.push({ type: \"setLineWidth\", lineWidth });\n  displayCommands.push({\n    type: \"setSegmentRadius\",\n    segmentRadius,\n  });\n\n  canvasCommands.forEach((canvasCommand) => {\n    switch (canvasCommand.type) {\n      case \"moveTo\":\n        {\n          const { x, y } = canvasCommand;\n          startPoint.x = x;\n          startPoint.y = y;\n        }\n        break;\n      case \"lineTo\":\n        {\n          const { x, y } = canvasCommand;\n          const controlPoints: Vector2[] = [{ x, y }];\n          if (curves.length === 0) {\n            controlPoints.unshift({ ...startPoint });\n          }\n          curves.push({ type: \"segment\", controlPoints });\n        }\n        break;\n      case \"quadraticCurveTo\":\n        {\n          const { x, y, cpx, cpy } = canvasCommand;\n          const controlPoints: Vector2[] = [\n            { x: cpx, y: cpy },\n            { x, y },\n          ];\n          if (curves.length === 0) {\n            controlPoints.unshift({ ...startPoint });\n          }\n          curves.push({ type: \"quadratic\", controlPoints });\n        }\n        break;\n      case \"bezierCurveTo\":\n        {\n          const { x, y, cp1x, cp1y, cp2x, cp2y } = canvasCommand;\n          const controlPoints: Vector2[] = [\n            { x: cp1x, y: cp1y },\n            { x: cp2x, y: cp2y },\n            { x, y },\n          ];\n          if (curves.length === 0) {\n            controlPoints.unshift({ ...startPoint });\n          }\n          curves.push({ type: \"cubic\", controlPoints });\n        }\n        break;\n      case \"closePath\":\n        if (curves.length === 0) break;\n\n        curves = simplifyCurves(curves);\n\n        // Flatten all control points\n        const controlPoints = curves.flatMap((c) => c.controlPoints);\n\n        if (isDrawingPath) {\n          const isHole = classifySubpath(controlPoints, parsedPaths, fillRule);\n          parsedPaths.push({ path: controlPoints, isHole });\n\n          // _console.log({\n          //   pathIndex: parsedPaths.length - 1,\n          //   isHole,\n          //   fillStyle,\n          //   strokeStyle,\n          //   fillRule,\n          //   lineWidth,\n          // });\n\n          if (isHole != wasHole) {\n            wasHole = isHole;\n            if (isHole) {\n              displayCommands.push({\n                type: \"selectFillColor\",\n                fillColorIndex: 0,\n              });\n            } else {\n              displayCommands.push({\n                type: \"selectFillColor\",\n                fillColorIndex: getFillColorIndex(),\n              });\n            }\n          }\n        }\n\n        if (ignoreFill) {\n          displayCommands.push({\n            type: \"setLineWidth\",\n            lineWidth: 0,\n          });\n          displayCommands.push({\n            type: \"selectFillColor\",\n            fillColorIndex: getLineColorIndex(),\n          });\n          displayCommands.push({\n            type: \"setIgnoreFill\",\n            ignoreFill: false,\n          });\n        }\n\n        const isSegments = curves.every((c) => c.type === \"segment\");\n        if (isSegments) {\n          if (ignoreFill) {\n            displayCommands.push({\n              type: \"drawSegments\",\n              points: controlPoints,\n            });\n          } else {\n            displayCommands.push({\n              type: \"drawPolygon\",\n              points: controlPoints,\n            });\n          }\n        } else {\n          if (ignoreFill) {\n            displayCommands.push({ type: \"drawPath\", curves });\n          } else {\n            displayCommands.push({ type: \"drawClosedPath\", curves });\n          }\n        }\n\n        if (ignoreFill) {\n          displayCommands.push({\n            type: \"setLineWidth\",\n            lineWidth,\n          });\n          displayCommands.push({\n            type: \"selectFillColor\",\n            fillColorIndex: getFillColorIndex(),\n          });\n          displayCommands.push({\n            type: \"setIgnoreFill\",\n            ignoreFill,\n          });\n        }\n\n        // Reset curves\n        curves = [];\n        break;\n      case \"pathStart\":\n        parsedPaths.length = 0;\n        if (wasHole) {\n          displayCommands.push({ type: \"selectFillColor\", fillColorIndex });\n        }\n        wasHole = false;\n        isDrawingPath = true;\n        break;\n      case \"pathEnd\":\n        isDrawingPath = false;\n        break;\n      case \"line\":\n        if (strokeStyle != \"none\") {\n          displayCommands.push({\n            type: \"setLineWidth\",\n            lineWidth: 0,\n          });\n          displayCommands.push({\n            type: \"selectFillColor\",\n            fillColorIndex: getLineColorIndex(),\n          });\n          displayCommands.push({\n            type: \"setIgnoreFill\",\n            ignoreFill: false,\n          });\n\n          const { x1, y1, x2, y2 } = canvasCommand;\n          displayCommands.push({\n            type: \"drawSegment\",\n            startX: x1,\n            startY: y1,\n            endX: x2,\n            endY: y2,\n          });\n\n          displayCommands.push({\n            type: \"setLineWidth\",\n            lineWidth,\n          });\n          displayCommands.push({\n            type: \"selectFillColor\",\n            fillColorIndex: getFillColorIndex(),\n          });\n          displayCommands.push({\n            type: \"setIgnoreFill\",\n            ignoreFill,\n          });\n        }\n\n        break;\n      case \"fillStyle\":\n        _console.log(\"fillStyle\", canvasCommand.fillStyle);\n        if (fillStyle != canvasCommand.fillStyle) {\n          const newIgnoreFill = canvasCommand.fillStyle == \"none\";\n          if (ignoreFill != newIgnoreFill) {\n            ignoreFill = newIgnoreFill;\n            _console.log({ ignoreFill });\n            displayCommands.push({ type: \"setIgnoreFill\", ignoreFill });\n          }\n          if (!ignoreFill) {\n            if (fillStyle != canvasCommand.fillStyle) {\n              fillStyle = canvasCommand.fillStyle;\n              if (fillColorIndex != colorToIndex[fillStyle]) {\n                _console.log({ fillColorIndex });\n                fillColorIndex = colorToIndex[fillStyle];\n                displayCommands.push({\n                  type: \"selectFillColor\",\n                  fillColorIndex: getFillColorIndex(),\n                });\n              }\n            }\n          }\n        }\n        break;\n      case \"strokeStyle\":\n        _console.log(\"strokeStyle\", canvasCommand.strokeStyle);\n        if (strokeStyle != canvasCommand.strokeStyle) {\n          const newIgnoreLine = canvasCommand.strokeStyle == \"none\";\n          if (ignoreLine != newIgnoreLine) {\n            ignoreLine = newIgnoreLine;\n            _console.log({ ignoreLine });\n            displayCommands.push({ type: \"setIgnoreLine\", ignoreLine });\n          }\n          if (!ignoreLine) {\n            if (strokeStyle != canvasCommand.strokeStyle) {\n              strokeStyle = canvasCommand.strokeStyle;\n              if (lineColorIndex != colorToIndex[strokeStyle]) {\n                _console.log({ lineColorIndex });\n                lineColorIndex = colorToIndex[strokeStyle];\n                displayCommands.push({\n                  type: \"selectLineColor\",\n                  lineColorIndex: getLineColorIndex(),\n                });\n              }\n            }\n          }\n        }\n        break;\n      case \"lineWidth\":\n        if (lineWidth != canvasCommand.lineWidth) {\n          lineWidth = canvasCommand.lineWidth;\n          displayCommands.push({ type: \"setLineWidth\", lineWidth });\n          segmentRadius = lineWidth / 2;\n          displayCommands.push({\n            type: \"setSegmentRadius\",\n            segmentRadius,\n          });\n        }\n        break;\n      case \"fillRule\":\n        fillRule = canvasCommand.fillRule;\n        break;\n      case \"rect\":\n        {\n          const { x, y, width, height, rotation } = canvasCommand;\n          displayCommands.push({\n            type: \"setRotation\",\n            rotation,\n            isRadians: true,\n          });\n          displayCommands.push({\n            type: \"drawRect\",\n            offsetX: x,\n            offsetY: y,\n            width: width,\n            height: height,\n          });\n        }\n        break;\n      case \"roundRect\":\n        {\n          const { x, y, width, height, rotation, r } = canvasCommand;\n          displayCommands.push({\n            type: \"setRotation\",\n            rotation,\n            isRadians: true,\n          });\n          displayCommands.push({\n            type: \"drawRoundRect\",\n            offsetX: x,\n            offsetY: y,\n            width: width,\n            height: height,\n            borderRadius: r,\n          });\n        }\n        break;\n      case \"circle\":\n        {\n          const { x, y, r } = canvasCommand;\n          displayCommands.push({\n            type: \"drawCircle\",\n            offsetX: x,\n            offsetY: y,\n            radius: r,\n          });\n        }\n        break;\n      case \"ellipse\":\n        {\n          const { x, y, rx, ry, rotation } = canvasCommand;\n          displayCommands.push({\n            type: \"setRotation\",\n            rotation,\n            isRadians: true,\n          });\n          displayCommands.push({\n            type: \"drawEllipse\",\n            offsetX: x,\n            offsetY: y,\n            radiusX: rx,\n            radiusY: ry,\n          });\n        }\n        break;\n      default:\n        _console.warn(\"uncaught canvasCommand\", canvasCommand);\n        break;\n    }\n  });\n\n  displayCommands = trimContextCommands(displayCommands);\n\n  _console.log(\"displayCommands\", displayCommands);\n  _console.log(\"colors\", colors);\n  return { commands: displayCommands, colors, width, height };\n}\n\nexport function svgToSprite(\n  svgString: string,\n  spriteName: string,\n  numberOfColors: number,\n  paletteName: string,\n  overridePalette: boolean,\n  spriteSheet: DisplaySpriteSheet,\n  paletteOffset = 0,\n  options?: ParseSvgOptions\n) {\n  options = { ...defaultParseSvgOptions, ...options };\n  _console.log(\"options\", options, { overridePalette });\n\n  let palette = spriteSheet.palettes?.find(\n    (palette) => palette.name == paletteName\n  );\n  if (!palette) {\n    palette = {\n      name: paletteName,\n      numberOfColors,\n      colors: new Array(numberOfColors).fill(\"#000000\"),\n    };\n    spriteSheet.palettes = spriteSheet.palettes || [];\n    spriteSheet.palettes?.push(palette);\n  }\n  _console.log(\"pallete\", palette);\n\n  const { commands, colors, width, height } = svgToDisplayContextCommands(\n    svgString,\n    numberOfColors,\n    paletteOffset,\n    !overridePalette ? palette.colors : undefined,\n    options\n  );\n\n  const sprite: DisplaySprite = {\n    name: spriteName,\n    width,\n    height,\n    paletteSwaps: [],\n    commands,\n  };\n  if (overridePalette) {\n    _console.log(\"overriding palette\", colors);\n    colors.forEach((color, index) => {\n      palette.colors[index + paletteOffset] = color;\n    });\n  }\n\n  const spriteIndex = spriteSheet.sprites.findIndex(\n    (sprite) => sprite.name == spriteName\n  );\n  if (spriteIndex == -1) {\n    spriteSheet.sprites.push(sprite);\n  } else {\n    _console.log(`overwriting spriteInde ${spriteIndex}`);\n    spriteSheet.sprites[spriteIndex] = sprite;\n  }\n\n  return sprite;\n}\n\nexport function svgToSpriteSheet(\n  svgString: string,\n  spriteSheetName: string,\n  numberOfColors: number,\n  paletteName: string,\n  options?: ParseSvgOptions\n) {\n  const spriteSheet: DisplaySpriteSheet = {\n    name: spriteSheetName,\n    palettes: [],\n    paletteSwaps: [],\n    sprites: [],\n  };\n\n  svgToSprite(\n    svgString,\n    \"svg\",\n    numberOfColors,\n    paletteName,\n    true,\n    spriteSheet,\n    0,\n    options\n  );\n\n  return spriteSheet;\n}\n\nexport function getSvgStringFromDataUrl(string: string) {\n  if (!string.startsWith(\"data:image/svg+xml\"))\n    throw new Error(\"Not a data URL\");\n\n  // Data URL might be base64 or URI encoded\n  const data = string.split(\",\")[1];\n  if (string.includes(\"base64\")) {\n    return atob(data);\n  } else {\n    return decodeURIComponent(data);\n  }\n}\n\nexport function isValidSVG(svgString: string) {\n  if (typeof svgString !== \"string\") return false;\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(svgString, \"image/svg+xml\");\n\n  // Different browsers may put parser errors in different places; check several ways:\n  if (\n    doc.querySelector(\"parsererror\") ||\n    doc.getElementsByTagName(\"parsererror\").length > 0\n  ) {\n    return false;\n  }\n\n  const root = doc.documentElement;\n  return (\n    !!root &&\n    root.nodeName.toLowerCase() === \"svg\" &&\n    root.namespaceURI === \"http://www.w3.org/2000/svg\"\n  );\n}\n","import { removeRedundancies } from \"./ObjectUtils.ts\";\n\nexport function spacesToPascalCase(string: string) {\n  return string\n    .replace(/(?:^\\w|\\b\\w)/g, function (match) {\n      return match.toUpperCase();\n    })\n    .replace(/\\s+/g, \"\");\n}\n\nexport function capitalizeFirstCharacter(string: string) {\n  return string[0].toUpperCase() + string.slice(1);\n}\n\nexport function removeRedundantCharacters(string: string) {\n  return removeRedundancies(Array.from(string)).join(\"\");\n}\n\nexport function removeSubstrings(string: string, substrings: string[]): string {\n  let result = string;\n  for (const sub of substrings) {\n    result = result.split(sub).join(\"\");\n  }\n  return result;\n}\n","import {\n  DisplayBezierCurve,\n  DisplayBitmap,\n  DisplaySize,\n} from \"../DisplayManager.ts\";\nimport { concatenateArrayBuffers } from \"./ArrayBufferUtils.ts\";\nimport { createConsole } from \"./Console.ts\";\nimport { quantizeCanvas } from \"./DisplayBitmapUtils.ts\";\nimport {\n  DisplayContextCommand,\n  serializeContextCommands,\n} from \"./DisplayContextCommand.ts\";\nimport { DisplayManagerInterface } from \"./DisplayManagerInterface.ts\";\nimport opentype, { Glyph, Font } from \"opentype.js\";\nimport { decompress } from \"woff2-encoder\";\nimport RangeHelper from \"./RangeHelper.ts\";\nimport { Vector2 } from \"./MathUtils.ts\";\nimport { simplifyCurves } from \"./PathUtils.ts\";\nimport {\n  DisplayContextState,\n  isDirectionHorizontal,\n} from \"./DisplayContextState.ts\";\nimport { classifySubpath } from \"./SvgUtils.ts\";\nimport { removeRedundantCharacters, removeSubstrings } from \"./stringUtils.ts\";\n\nconst _console = createConsole(\"DisplaySpriteSheetUtils\", { log: false });\n\nexport type DisplaySpriteSubLine = {\n  spriteSheetName: string;\n  spriteNames: string[];\n};\nexport type DisplaySpriteLine = DisplaySpriteSubLine[];\nexport type DisplaySpriteLines = DisplaySpriteLine[];\n\nexport type DisplaySpriteSerializedSubLine = {\n  spriteSheetIndex: number;\n  spriteIndices: number[];\n  use2Bytes: boolean;\n};\nexport type DisplaySpriteSerializedLine = DisplaySpriteSerializedSubLine[];\nexport type DisplaySpriteSerializedLines = DisplaySpriteSerializedLine[];\n\nexport type DisplaySpritePaletteSwap = {\n  name: string;\n  numberOfColors: number;\n  spriteColorIndices: number[];\n};\nexport type DisplaySprite = {\n  name: string;\n  width: number;\n  height: number;\n  paletteSwaps?: DisplaySpritePaletteSwap[];\n  commands: DisplayContextCommand[];\n};\nexport type DisplaySpriteSheetPaletteSwap = {\n  name: string;\n  numberOfColors: number;\n  spriteColorIndices: number[];\n};\nexport type DisplaySpriteSheetPalette = {\n  name: string;\n  numberOfColors: number;\n  colors: string[];\n  opacities?: number[];\n};\nexport type DisplaySpriteSheet = {\n  name: string;\n  palettes?: DisplaySpriteSheetPalette[];\n  paletteSwaps?: DisplaySpriteSheetPaletteSwap[];\n  sprites: DisplaySprite[];\n};\n\nexport const spriteHeaderLength = 3 * 2; // width, height, commandsLength\nexport function calculateSpriteSheetHeaderLength(numberOfSprites: number) {\n  // numberOfSprites, spriteOffsets, spriteHeader\n  return 2 + numberOfSprites * 2 + numberOfSprites * spriteHeaderLength;\n}\nexport function getCurvesPoints(curves: DisplayBezierCurve[]) {\n  const curvePoints: Vector2[] = [];\n  curves.forEach((curve, index) => {\n    if (index == 0) {\n      curvePoints.push(curve.controlPoints[0]);\n    }\n    curvePoints.push(curve.controlPoints.at(-1)!);\n  });\n  return curvePoints;\n}\nexport function serializeSpriteSheet(\n  displayManager: DisplayManagerInterface,\n  spriteSheet: DisplaySpriteSheet\n) {\n  const { name, sprites } = spriteSheet;\n  _console.log(`serializing ${name} spriteSheet`, spriteSheet);\n\n  const numberOfSprites = sprites.length;\n  const numberOfSpritesDataView = new DataView(new ArrayBuffer(2));\n  numberOfSpritesDataView.setUint16(0, numberOfSprites, true);\n\n  const spritePayloads = sprites.map((sprite, index) => {\n    const commandsData = serializeContextCommands(\n      displayManager,\n      sprite.commands\n    );\n    const dataView = new DataView(new ArrayBuffer(spriteHeaderLength));\n    dataView.setUint16(0, sprite.width, true);\n    dataView.setUint16(2, sprite.height, true);\n    dataView.setUint16(4, commandsData.byteLength, true);\n    const serializedSprite = concatenateArrayBuffers(dataView, commandsData);\n    _console.log(\"serializedSprite\", sprite, serializedSprite);\n    return serializedSprite;\n  });\n  const spriteOffsetsDataView = new DataView(\n    new ArrayBuffer(sprites.length * 2)\n  );\n  let offset =\n    numberOfSpritesDataView.byteLength + spriteOffsetsDataView.byteLength;\n  spritePayloads.forEach((spritePayload, index) => {\n    //_console.log(\"spritePayloads\", index, offset, spritePayload);\n    spriteOffsetsDataView.setUint16(index * 2, offset, true);\n    offset += spritePayload.byteLength;\n  });\n\n  // [numberOfSprites, ...spriteOffsets, ...[width, height, commands]]\n  const serializedSpriteSheet = concatenateArrayBuffers(\n    numberOfSpritesDataView,\n    spriteOffsetsDataView,\n    spritePayloads\n  );\n  _console.log(\"serializedSpriteSheet\", serializedSpriteSheet);\n\n  return serializedSpriteSheet;\n}\n\nexport function parseSpriteSheet(dataView: DataView) {\n  // FILL\n}\n\nexport type FontToSpriteSheetOptions = {\n  stroke?: boolean;\n  strokeWidth?: number;\n  unicodeOnly?: boolean;\n  englishOnly?: boolean;\n  usePath?: boolean;\n  script?: string;\n  string?: string;\n  minSpriteY?: number;\n  maxSpriteY?: number;\n  maxSpriteheight?: number;\n};\nexport const defaultFontToSpriteSheetOptions: FontToSpriteSheetOptions = {\n  stroke: false,\n  strokeWidth: 1,\n  unicodeOnly: true,\n  englishOnly: true,\n  usePath: false,\n};\n\nfunction isWoff2(arrayBuffer: ArrayBuffer) {\n  if (arrayBuffer.byteLength < 4) return false;\n\n  const header = new Uint8Array(arrayBuffer, 0, 4);\n  return (\n    header[0] === 0x77 && // 'w'\n    header[1] === 0x4f && // 'O'\n    header[2] === 0x46 && // 'F'\n    header[3] === 0x32 // '2'\n  );\n}\nexport async function parseFont(arrayBuffer: ArrayBuffer) {\n  if (isWoff2(arrayBuffer)) {\n    const result = await decompress(arrayBuffer);\n    // @ts-expect-error\n    arrayBuffer = result.buffer;\n  }\n  const font = opentype.parse(arrayBuffer);\n  //_console.log(\"font\", font);\n  return font;\n}\n\nexport function getFontUnicodeRange(font: Font) {\n  const rangeHelper = new RangeHelper();\n\n  for (let i = 0; i < font.glyphs.length; i++) {\n    const glyph = font.glyphs.get(i);\n    if (!glyph.unicodes || glyph.unicodes.length === 0) continue;\n\n    glyph.unicodes\n      .filter((unicode) => {\n        const char = String.fromCodePoint(unicode);\n        // Keep only letters (any language)\n        return /\\p{Letter}/u.test(char);\n      })\n      .forEach((unicode) => rangeHelper.update(unicode));\n  }\n\n  //_console.log(\"range\", rangeHelper.range);\n  return rangeHelper.span > 0 ? rangeHelper.range : undefined;\n}\n\nexport const englishRegex = /^[A-Za-z0-9 !\"#$%&'()*+,\\-./:;?@[\\]^_`{|}~\\\\]+$/;\n\nexport function contourArea(points: Vector2[]) {\n  let area = 0;\n  for (let i = 0, j = points.length - 1; i < points.length; j = i++) {\n    area += (points[j].x - points[i].x) * (points[j].y + points[i].y);\n  }\n  return area;\n}\n\nexport function getFontMetrics(\n  font: Font | Font[],\n  fontSize: number,\n  options?: FontToSpriteSheetOptions\n) {\n  _console.assertTypeWithError(fontSize, \"number\");\n\n  options = options\n    ? { ...defaultFontToSpriteSheetOptions, ...options }\n    : defaultFontToSpriteSheetOptions;\n\n  const fonts = Array.isArray(font) ? font : [font];\n\n  let minSpriteY = Infinity;\n  let maxSpriteY = -Infinity;\n\n  const strokeWidth = options.stroke ? options.strokeWidth || 1 : 0;\n\n  let string = options.string;\n  if (string) {\n    string = removeRedundantCharacters(string);\n    console.log(\"filtered string\", string);\n  }\n\n  for (let font of fonts) {\n    const fontScale = (1 / font.unitsPerEm) * fontSize;\n\n    const glyphs: Glyph[] = [];\n    let filteredGlyphs: Glyph[] | undefined;\n    if (string != undefined) {\n      filteredGlyphs = font\n        .stringToGlyphs(string)\n        .filter((glyph) => glyph.unicode != undefined);\n      string = removeSubstrings(\n        string,\n        filteredGlyphs.map((glyph) => String.fromCharCode(glyph.unicode!))\n      );\n    }\n\n    for (let index = 0; index < font.glyphs.length; index++) {\n      const glyph = font.glyphs.get(index);\n      const hasUnicode = glyph.unicode != undefined;\n      if (hasUnicode) {\n        //_console.log(String.fromCharCode(glyph.unicode!), glyph);\n      } else {\n        //_console.log(\"no unicode\", glyph);\n      }\n\n      if (filteredGlyphs) {\n        if (!filteredGlyphs.includes(glyph)) {\n          continue;\n        }\n      }\n\n      if (options.unicodeOnly || options.englishOnly) {\n        if (!hasUnicode) {\n          continue;\n        }\n      }\n      if (options.script && hasUnicode) {\n        const regex = new RegExp(`\\\\p{Script=${options.script}}`, \"u\");\n        if (!regex.test(String.fromCharCode(glyph.unicode!))) {\n          continue;\n        }\n      }\n      if (options.englishOnly) {\n        if (!englishRegex.test(String.fromCharCode(glyph.unicode!))) {\n          continue;\n        }\n      }\n\n      const bbox = glyph.getBoundingBox();\n      minSpriteY = Math.min(minSpriteY, bbox.y1 * fontScale);\n      maxSpriteY = Math.max(maxSpriteY, bbox.y2 * fontScale);\n\n      glyphs.push(glyph);\n    }\n\n    // _console.log({\n    //   fontName: font.getEnglishName(\"fullName\"),\n    //   minSpriteY,\n    //   maxSpriteY,\n    // });\n  }\n\n  minSpriteY = options.minSpriteY ?? minSpriteY;\n  maxSpriteY = options.maxSpriteY ?? maxSpriteY;\n\n  const maxSpriteHeight =\n    options.maxSpriteheight ?? maxSpriteY - minSpriteY + strokeWidth;\n  return { maxSpriteHeight, maxSpriteY, minSpriteY };\n}\n\nexport async function fontToSpriteSheet(\n  font: Font | Font[],\n  fontSize: number,\n  spriteSheetName?: string,\n  options?: FontToSpriteSheetOptions\n) {\n  _console.assertTypeWithError(fontSize, \"number\");\n\n  options = options\n    ? { ...defaultFontToSpriteSheetOptions, ...options }\n    : defaultFontToSpriteSheetOptions;\n\n  const fonts = Array.isArray(font) ? font : [font];\n  font = fonts[0];\n  spriteSheetName = spriteSheetName || font.getEnglishName(\"fullName\");\n  const spriteSheet: DisplaySpriteSheet = {\n    name: spriteSheetName,\n    sprites: [],\n  };\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\")!;\n\n  const { maxSpriteHeight, maxSpriteY, minSpriteY } = getFontMetrics(\n    fonts,\n    fontSize,\n    options\n  );\n  const strokeWidth = options.stroke ? options.strokeWidth || 1 : 0;\n\n  let string = options.string;\n  if (string) {\n    string = removeRedundantCharacters(string);\n    _console.log(\"filtered string\", string);\n  }\n\n  for (let font of fonts) {\n    const fontScale = (1 / font.unitsPerEm) * fontSize;\n\n    const glyphs: Glyph[] = [];\n    let filteredGlyphs: Glyph[] | undefined;\n    if (string != undefined) {\n      filteredGlyphs = font\n        .stringToGlyphs(string)\n        .filter((glyph) => glyph.unicode != undefined);\n      string = removeSubstrings(\n        string,\n        filteredGlyphs.map((glyph) => String.fromCharCode(glyph.unicode!))\n      );\n      //_console.log(\"filteredString\", string);\n      //_console.log(\"filteredGlyphs\", filteredGlyphs);\n    }\n\n    for (let index = 0; index < font.glyphs.length; index++) {\n      const glyph = font.glyphs.get(index);\n      const hasUnicode = glyph.unicode != undefined;\n      if (hasUnicode) {\n        //_console.log(String.fromCharCode(glyph.unicode!), glyph);\n      } else {\n        //_console.log(\"no unicode\", glyph);\n      }\n\n      if (filteredGlyphs) {\n        if (!filteredGlyphs.includes(glyph)) {\n          continue;\n        }\n      }\n\n      if (options.unicodeOnly || options.englishOnly) {\n        if (!hasUnicode) {\n          continue;\n        }\n      }\n      if (options.script && hasUnicode) {\n        const regex = new RegExp(`\\\\p{Script=${options.script}}`, \"u\");\n        if (!regex.test(String.fromCharCode(glyph.unicode!))) {\n          continue;\n        }\n      }\n      if (options.englishOnly) {\n        if (!englishRegex.test(String.fromCharCode(glyph.unicode!))) {\n          continue;\n        }\n      }\n\n      glyphs.push(glyph);\n    }\n\n    for (let i = 0; i < glyphs.length; i++) {\n      const glyph = glyphs[i];\n\n      let name = glyph.name;\n      if (glyph.unicode != undefined) {\n        name = String.fromCharCode(glyph.unicode);\n      }\n      //_console.log(name, glyph);\n      if (typeof name != \"string\") {\n        continue;\n      }\n\n      const bbox = glyph.getBoundingBox();\n\n      const spriteWidth =\n        Math.max(\n          Math.max(bbox.x2, bbox.x2 - bbox.x1),\n          glyph.advanceWidth || 0\n        ) *\n          fontScale +\n        strokeWidth;\n      const spriteHeight = maxSpriteHeight;\n\n      const commands: DisplayContextCommand[] = [];\n\n      const path = glyph.getPath(\n        -bbox.x1 * fontScale,\n        bbox.y2 * fontScale,\n        fontSize\n      );\n      if (options.stroke) {\n        path.stroke = \"white\";\n        path.strokeWidth = strokeWidth;\n        commands.push({ type: \"setLineWidth\", lineWidth: strokeWidth });\n        commands.push({ type: \"setIgnoreFill\", ignoreFill: true });\n      } else {\n        path.fill = \"white\";\n      }\n\n      const bitmapWidth = (bbox.x2 - bbox.x1) * fontScale + strokeWidth;\n      const bitmapHeight = (bbox.y2 - bbox.y1) * fontScale + strokeWidth;\n\n      const bitmapX = (spriteWidth - bitmapWidth) / 2;\n      const bitmapY =\n        (spriteHeight - bitmapHeight) / 2 - (bbox.y1 * fontScale - minSpriteY);\n      if (options.usePath) {\n        const pathOffset: Vector2 = {\n          x: -bitmapWidth / 2 + bitmapX,\n          y: -bitmapHeight / 2 + bitmapY,\n        };\n        //_console.log(`${name} path.commands`, path.commands);\n        let curves: DisplayBezierCurve[] = [];\n        let startPoint: Vector2 = { x: 0, y: 0 };\n\n        const allCurves: DisplayBezierCurve[][] = [];\n        const parsedPaths: { path: Vector2[]; isHole: boolean }[] = [];\n        let wasHole = false;\n\n        let pathCommands = path.commands;\n        pathCommands.forEach((cmd) => {\n          switch (cmd.type) {\n            case \"M\": // moveTo\n              {\n                startPoint.x = cmd.x;\n                startPoint.y = cmd.y;\n              }\n              break;\n\n            case \"L\": // lineTo\n              {\n                const controlPoints: Vector2[] = [{ x: cmd.x, y: cmd.y }];\n                if (curves.length === 0) {\n                  controlPoints.unshift({ ...startPoint });\n                }\n                curves.push({ type: \"segment\", controlPoints });\n              }\n              break;\n\n            case \"Q\": // quadratic Bezier\n              {\n                const controlPoints: Vector2[] = [\n                  { x: cmd.x1, y: cmd.y1 },\n                  { x: cmd.x, y: cmd.y },\n                ];\n                if (curves.length === 0) {\n                  controlPoints.unshift({ ...startPoint });\n                }\n                curves.push({ type: \"quadratic\", controlPoints });\n              }\n              break;\n\n            case \"C\": // cubic Bezier\n              {\n                const controlPoints: Vector2[] = [\n                  { x: cmd.x1, y: cmd.y1 },\n                  { x: cmd.x2, y: cmd.y2 },\n                  { x: cmd.x, y: cmd.y },\n                ];\n                if (curves.length === 0) {\n                  controlPoints.unshift({ ...startPoint });\n                }\n                curves.push({ type: \"cubic\", controlPoints });\n              }\n              break;\n\n            case \"Z\": // closePath\n              {\n                if (curves.length === 0) {\n                  break;\n                }\n\n                curves = simplifyCurves(curves);\n\n                // Flatten all control points\n                const controlPoints = curves.flatMap((c) => c.controlPoints);\n\n                // Apply path offset\n                controlPoints.forEach((pt) => {\n                  pt.x = pt.x + pathOffset.x;\n                  pt.y = pt.y + pathOffset.y;\n                });\n\n                allCurves.push(curves);\n\n                // Reset curves\n                curves = [];\n              }\n              break;\n          }\n        });\n\n        allCurves.sort((a, b) => {\n          const aPoints = getCurvesPoints(a);\n          const bPoints = getCurvesPoints(b);\n          return contourArea(bPoints) - contourArea(aPoints);\n        });\n\n        allCurves.forEach((curve) => {\n          const controlPoints = curve.flatMap((c) => c.controlPoints);\n          const isHole = classifySubpath(controlPoints, parsedPaths, \"nonzero\");\n          parsedPaths.push({ path: controlPoints, isHole });\n          if (isHole != wasHole) {\n            wasHole = isHole;\n            if (isHole) {\n              commands.push({\n                type: \"selectFillColor\",\n                fillColorIndex: 0,\n              });\n            } else {\n              commands.push({\n                type: \"selectFillColor\",\n                fillColorIndex: 1,\n              });\n            }\n          }\n\n          const isSegments = curves.every((c) => c.type === \"segment\");\n          if (isSegments) {\n            commands.push({\n              type: \"drawPolygon\",\n              points: controlPoints,\n            });\n          } else {\n            commands.push({ type: \"drawClosedPath\", curves });\n          }\n        });\n      } else {\n        if (bitmapWidth > 0 && bitmapHeight > 0) {\n          canvas.width = bitmapWidth;\n          canvas.height = bitmapHeight;\n          ctx.imageSmoothingEnabled = false;\n\n          ctx.fillStyle = \"black\";\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          path.draw(ctx);\n          const { colorIndices } = await quantizeCanvas(canvas, 2, [\n            \"#000000\",\n            \"#ffffff\",\n          ]);\n          const bitmap: DisplayBitmap = {\n            width: bitmapWidth,\n            height: bitmapHeight,\n            numberOfColors: 2,\n            pixels: colorIndices,\n          };\n\n          commands.push({\n            type: \"selectBitmapColor\",\n            bitmapColorIndex: 1,\n            colorIndex: 1,\n          });\n          if (false) {\n            // debugging\n            commands.push({\n              type: \"selectFillColor\",\n              fillColorIndex: 2,\n            });\n            commands.push({\n              type: \"drawRect\",\n              offsetX: 0,\n              offsetY: 0,\n              width: spriteWidth,\n              height: spriteHeight,\n            });\n          }\n\n          commands.push({\n            type: \"drawBitmap\",\n            offsetX: bitmapX,\n            offsetY: bitmapY,\n            bitmap,\n          });\n        }\n      }\n\n      const sprite: DisplaySprite = {\n        name,\n        commands,\n        width: spriteWidth,\n        height: spriteHeight,\n      };\n\n      spriteSheet.sprites.push(sprite);\n    }\n\n    if (string != undefined && string.length == 0) {\n      break;\n    }\n  }\n\n  return spriteSheet;\n}\n\nexport function stringToSprites(\n  string: string,\n  spriteSheet: DisplaySpriteSheet,\n  requireAll = false\n) {\n  const sprites: DisplaySprite[] = [];\n  let substring = string;\n  while (substring.length > 0) {\n    let longestSprite: DisplaySprite | undefined;\n\n    spriteSheet.sprites.forEach((sprite) => {\n      if (substring.startsWith(sprite.name)) {\n        if (!longestSprite || sprite.name.length > longestSprite.name.length) {\n          longestSprite = sprite;\n        }\n      }\n    });\n\n    // _console.log(\"longestSprite\", longestSprite);\n    if (requireAll) {\n      _console.assertWithError(\n        longestSprite,\n        `couldn't find sprite with name prefixing \"${substring}\"`\n      );\n    }\n\n    if (longestSprite) {\n      sprites.push(longestSprite);\n      substring = substring.substring(longestSprite!.name.length);\n    } else {\n      substring = substring.substring(1);\n    }\n    //_console.log(\"new substring\", substring);\n  }\n\n  //_console.log(`string \"${string}\" to sprites`, sprites);\n  return sprites;\n}\n\nexport function getReferencedSprites(\n  sprite: DisplaySprite,\n  spriteSheet: DisplaySpriteSheet\n) {\n  const sprites: DisplaySprite[] = [];\n  sprite.commands\n    .filter((command) => command.type == \"drawSprite\")\n    .map((command) => command.spriteIndex)\n    .map((spriteIndex) => spriteSheet.sprites[spriteIndex])\n    .forEach((_sprite) => {\n      if (!sprites.includes(_sprite)) {\n        sprites.push(_sprite);\n        sprites.push(...getReferencedSprites(_sprite, spriteSheet));\n      }\n    });\n  _console.log(\"referencedSprites\", sprite, sprites);\n  return sprites;\n}\nexport function reduceSpriteSheet(\n  spriteSheet: DisplaySpriteSheet,\n  spriteNames: string | string[],\n  requireAll = false\n) {\n  const reducedSpriteSheet = Object.assign({}, spriteSheet);\n  if (!(spriteNames instanceof Array)) {\n    spriteNames = stringToSprites(spriteNames, spriteSheet, requireAll).map(\n      (sprite) => sprite.name\n    );\n  }\n  _console.log(\"reducingSpriteSheet\", spriteSheet, spriteNames);\n  reducedSpriteSheet.sprites = [];\n  spriteSheet.sprites.forEach((sprite) => {\n    if (spriteNames.includes(sprite.name)) {\n      reducedSpriteSheet.sprites.push(sprite);\n      reducedSpriteSheet.sprites.push(\n        ...getReferencedSprites(sprite, spriteSheet)\n      );\n    }\n  });\n  _console.log(\"reducedSpriteSheet\", reducedSpriteSheet);\n  return reducedSpriteSheet;\n}\n\nexport function stringToSpriteLines(\n  string: string,\n  spriteSheets: Record<string, DisplaySpriteSheet>,\n  contextState: DisplayContextState,\n  requireAll = false,\n  maxLineBreadth = Infinity,\n  separators = [\" \"]\n): DisplaySpriteLines {\n  _console.log(\"stringToSpriteLines\", string);\n  const isSpritesDirectionHorizontal = isDirectionHorizontal(\n    contextState.spritesDirection\n  );\n  const isSpritesLineDirectionHorizontal = isDirectionHorizontal(\n    contextState.spritesLineDirection\n  );\n  const areSpritesDirectionsOrthogonal =\n    isSpritesDirectionHorizontal != isSpritesLineDirectionHorizontal;\n\n  const lineStrings = string.split(\"\\n\");\n  let lineBreadth = 0;\n\n  if (isSpritesLineDirectionHorizontal) {\n    maxLineBreadth /= contextState.spriteScaleX;\n  } else {\n    maxLineBreadth /= contextState.spriteScaleY;\n  }\n\n  const sprites: {\n    sprite: DisplaySprite;\n    spriteSheet: DisplaySpriteSheet;\n  }[][] = [];\n  let latestSeparatorIndex = -1;\n  let latestSeparator: string | undefined;\n  let latestSeparatorLineBreadth: number | undefined;\n  let latestSeparatorBreadth: number | undefined;\n  const spritesLineIndices: number[][] = [];\n\n  lineStrings.forEach((lineString) => {\n    sprites.push([]);\n    spritesLineIndices.push([]);\n    const i = sprites.length - 1;\n    if (areSpritesDirectionsOrthogonal) {\n      lineBreadth = 0;\n    } else {\n      lineBreadth += contextState.spritesLineSpacing;\n    }\n\n    let lineSubstring = lineString;\n    while (lineSubstring.length > 0) {\n      let longestSprite: DisplaySprite | undefined;\n      let longestSpriteSheet: DisplaySpriteSheet | undefined;\n      for (let spriteSheetName in spriteSheets) {\n        const spriteSheet = spriteSheets[spriteSheetName];\n        spriteSheet.sprites.forEach((sprite) => {\n          if (lineSubstring.startsWith(sprite.name)) {\n            if (\n              !longestSprite ||\n              sprite.name.length > longestSprite.name.length\n            ) {\n              longestSprite = sprite;\n              longestSpriteSheet = spriteSheet;\n            }\n          }\n        });\n      }\n      //_console.log(\"longestSprite\", longestSprite);\n      if (requireAll) {\n        _console.assertWithError(\n          longestSprite,\n          `couldn't find sprite with name prefixing \"${lineSubstring}\"`\n        );\n      }\n\n      if (longestSprite && longestSpriteSheet) {\n        const isSeparator =\n          separators.length > 0\n            ? separators.includes(longestSprite.name)\n            : true;\n\n        sprites[i].push({\n          sprite: longestSprite,\n          spriteSheet: longestSpriteSheet,\n        });\n\n        // _console.log({\n        //   name: longestSprite!.name,\n        //   isSeparator,\n        //   lineBreadth,\n        //   latestSeparatorIndex,\n        //   latestSeparatorLineBreadth,\n        //   latestSeparator,\n        //   index: sprites[i].length - 1,\n        // });\n\n        let newLineBreadth = lineBreadth;\n        const longestSpriteBreadth = isSpritesDirectionHorizontal\n          ? longestSprite.width\n          : longestSprite.height;\n        newLineBreadth += longestSpriteBreadth;\n        newLineBreadth += contextState.spritesSpacing;\n        if (newLineBreadth >= maxLineBreadth) {\n          if (isSeparator) {\n            if (longestSprite.name.trim().length == 0) {\n              sprites[i].pop();\n            }\n            spritesLineIndices[i].push(sprites[i].length);\n            lineBreadth = 0;\n          } else {\n            if (latestSeparatorIndex != -1) {\n              if (latestSeparator!.trim().length == 0) {\n                sprites[i].splice(latestSeparatorIndex, 1);\n                lineBreadth -= latestSeparatorBreadth!;\n                latestSeparatorIndex;\n              }\n              spritesLineIndices[i].push(latestSeparatorIndex);\n              lineBreadth = newLineBreadth - latestSeparatorLineBreadth!;\n            } else {\n              spritesLineIndices[i].push(sprites[i].length - 1);\n              lineBreadth = 0;\n            }\n          }\n          latestSeparatorIndex = -1;\n          latestSeparator = undefined;\n        } else {\n          lineBreadth = newLineBreadth;\n\n          if (isSeparator) {\n            latestSeparator = longestSprite.name;\n            latestSeparatorIndex = sprites[i].length - 1;\n            //_console.log({ latestSeparatorIndex });\n            latestSeparatorLineBreadth = lineBreadth;\n            latestSeparatorBreadth = longestSpriteBreadth;\n          }\n        }\n\n        lineSubstring = lineSubstring.substring(longestSprite!.name.length);\n      } else {\n        lineSubstring = lineSubstring.substring(1);\n      }\n    }\n  });\n\n  const spriteLines: DisplaySpriteLine[] = [];\n  sprites.forEach((_sprites, i) => {\n    let spriteLine: DisplaySpriteLine = [];\n    spriteLines.push(spriteLine);\n\n    let spriteSubLine: DisplaySpriteSubLine | undefined;\n\n    _sprites.forEach(({ sprite, spriteSheet }, index) => {\n      if (spritesLineIndices[i].includes(index)) {\n        spriteLine = [];\n        spriteLines.push(spriteLine);\n        spriteSubLine = undefined;\n      }\n\n      if (!spriteSubLine || spriteSubLine.spriteSheetName != spriteSheet.name) {\n        spriteSubLine = {\n          spriteSheetName: spriteSheet.name,\n          spriteNames: [],\n        };\n        spriteLine.push(spriteSubLine);\n      }\n      spriteSubLine.spriteNames.push(sprite.name);\n    });\n  });\n  _console.log(`spriteLines for \"${string}\"`, spriteLines);\n  return spriteLines;\n}\n\nexport function getFontMaxHeight(font: Font, fontSize: number) {\n  const scale = (1 / font.unitsPerEm) * fontSize;\n  const maxHeight = (font.ascender - font.descender) * scale;\n  return maxHeight;\n}\nexport function getMaxSpriteSheetSize(spriteSheet: DisplaySpriteSheet) {\n  const size: DisplaySize = { width: 0, height: 0 };\n  spriteSheet.sprites.forEach((sprite) => {\n    size.width = Math.max(size.width, sprite.width);\n    size.height = Math.max(size.height, sprite.height);\n  });\n  return size;\n}\n\nexport function assertValidSpriteLines(\n  displayManager: DisplayManagerInterface,\n  spriteLines: DisplaySpriteLines\n) {\n  spriteLines.forEach((spriteLine) => {\n    spriteLine.forEach((spriteSubLine) => {\n      const { spriteSheetName, spriteNames } = spriteSubLine;\n      displayManager.assertLoadedSpriteSheet(spriteSheetName);\n      const spriteSheet = displayManager.spriteSheets[spriteSheetName];\n      spriteNames.forEach((spriteName) => {\n        const sprite = spriteSheet.sprites.find(\n          (sprite) => sprite.name == spriteName\n        );\n        _console.assertWithError(\n          sprite,\n          `no sprite with name \"${spriteName}\" found in spriteSheet \"${spriteSheetName}\"`\n        );\n      });\n    });\n  });\n}\n\nexport function getExpandedSpriteLines(\n  spriteLines: DisplaySpriteLines,\n  spriteSheets: Record<string, DisplaySpriteSheet>\n) {\n  const expandedSpritesLines: DisplaySprite[][] = [];\n\n  spriteLines.forEach((spriteLine) => {\n    const _spritesLine: DisplaySprite[] = [];\n\n    spriteLine.forEach(({ spriteSheetName, spriteNames }) => {\n      const spriteSheet = spriteSheets[spriteSheetName];\n      _console.assertWithError(\n        spriteSheet,\n        `no spriteSheet found with name \"${spriteSheetName}\"`\n      );\n\n      spriteNames.forEach((spriteName) => {\n        const sprite = spriteSheet.sprites.find(\n          (sprite) => sprite.name == spriteName\n        )!;\n        _console.assertWithError(\n          sprite,\n          `no sprite found with name \"${spriteName} in \"${spriteSheetName}\" spriteSheet`\n        );\n        _spritesLine.push(sprite);\n      });\n    });\n    expandedSpritesLines.push(_spritesLine);\n  });\n  return expandedSpritesLines;\n}\n\nexport function getExpandedSpriteLinesSize(\n  expandedSpritesLines: DisplaySprite[][],\n  contextState: DisplayContextState\n) {\n  const localSize = { width: 0, height: 0 };\n\n  const isSpritesDirectionHorizontal = isDirectionHorizontal(\n    contextState.spritesDirection\n  );\n  const isSpritesLineDirectionHorizontal = isDirectionHorizontal(\n    contextState.spritesLineDirection\n  );\n\n  const areSpritesDirectionsOrthogonal =\n    isSpritesDirectionHorizontal != isSpritesLineDirectionHorizontal;\n\n  const breadthSizeKey = isSpritesDirectionHorizontal ? \"width\" : \"height\";\n  const depthSizeKey = isSpritesLineDirectionHorizontal ? \"width\" : \"height\";\n\n  if (!areSpritesDirectionsOrthogonal) {\n    if (isSpritesDirectionHorizontal) {\n      localSize.height += contextState.spritesLineHeight;\n    } else {\n      localSize.width += contextState.spritesLineHeight;\n    }\n  }\n\n  const lineBreadths: number[] = [];\n\n  expandedSpritesLines.forEach((expandedSpriteLine, lineIndex) => {\n    let spritesLineBreadth = 0;\n\n    expandedSpriteLine.forEach((sprite) => {\n      spritesLineBreadth += isSpritesDirectionHorizontal\n        ? sprite.width\n        : sprite.height;\n      spritesLineBreadth += contextState.spritesSpacing;\n    });\n    spritesLineBreadth -= contextState.spritesSpacing;\n\n    if (areSpritesDirectionsOrthogonal) {\n      localSize[breadthSizeKey] = Math.max(\n        localSize[breadthSizeKey],\n        spritesLineBreadth\n      );\n\n      localSize[depthSizeKey] += contextState.spritesLineHeight;\n    } else {\n      localSize[breadthSizeKey] += spritesLineBreadth;\n    }\n\n    localSize[depthSizeKey] += contextState.spritesLineSpacing;\n\n    // _console.log({\n    //   lineIndex,\n    //   spritesBreadth: spritesSize[breadthSizeKey],\n    //   spritesDepth: spritesSize[depthSizeKey],\n    // });\n\n    lineBreadths.push(spritesLineBreadth);\n  });\n  localSize[depthSizeKey] -= contextState.spritesLineSpacing;\n\n  // _console.log({\n  //   spritesWidth: spritesSize.width,\n  //   spritesHeight: spritesSize.height,\n  // });\n\n  const spritesScaledWidth =\n    localSize.width * Math.abs(contextState.spriteScaleX);\n  const spritesScaledHeight =\n    localSize.height * Math.abs(contextState.spriteScaleY);\n\n  const size: DisplaySize = {\n    width: spritesScaledWidth,\n    height: spritesScaledHeight,\n  };\n\n  return { localSize, size, lineBreadths };\n}\n\nexport function getSpriteLinesMetrics(\n  spriteLines: DisplaySpriteLines,\n  spriteSheets: Record<string, DisplaySpriteSheet>,\n  contextState: DisplayContextState\n) {\n  const expandedSpritesLines = getExpandedSpriteLines(\n    spriteLines,\n    spriteSheets\n  );\n  return {\n    expandedSpritesLines,\n    numberOfLines: expandedSpritesLines.length,\n    ...getExpandedSpriteLinesSize(expandedSpritesLines, contextState),\n  };\n}\n\nexport type DisplaySpriteLinesMetrics = {\n  localSize: {\n    width: number;\n    height: number;\n  };\n  size: DisplaySize;\n  lineBreadths: number[];\n  expandedSpritesLines: DisplaySprite[][];\n  numberOfLines: number;\n};\nexport function stringToSpriteLinesMetrics(\n  string: string,\n  spriteSheets: Record<string, DisplaySpriteSheet>,\n  contextState: DisplayContextState,\n  requireAll?: boolean,\n  maxLineBreadth?: number,\n  separators?: string[]\n): DisplaySpriteLinesMetrics {\n  return getSpriteLinesMetrics(\n    stringToSpriteLines(\n      string,\n      spriteSheets,\n      contextState,\n      requireAll,\n      maxLineBreadth,\n      separators\n    ),\n    spriteSheets,\n    contextState\n  );\n}\n","import {\n  DisplayBitmapColorPair,\n  DisplayBrightness,\n  DisplaySpriteColorPair,\n  DisplayBitmap,\n  DisplayBezierCurve,\n  DisplayBezierCurveType,\n  DisplayWireframe,\n  DisplaySize,\n} from \"../DisplayManager.ts\";\nimport { createConsole } from \"./Console.ts\";\nimport { DisplayContextCommand } from \"./DisplayContextCommand.ts\";\nimport {\n  DisplayAlignment,\n  DisplayAlignmentDirection,\n  DisplayContextState,\n  DisplayDirection,\n  DisplaySegmentCap,\n} from \"./DisplayContextState.ts\";\nimport {\n  DisplaySprite,\n  DisplaySpriteLines,\n  DisplaySpriteLinesMetrics,\n  DisplaySpritePaletteSwap,\n  DisplaySpriteSheet,\n  DisplaySpriteSheetPalette,\n  DisplaySpriteSheetPaletteSwap,\n  reduceSpriteSheet,\n} from \"./DisplaySpriteSheetUtils.ts\";\nimport {\n  DisplayScaleDirection,\n  DisplayColorRGB,\n  DisplayCropDirection,\n} from \"./DisplayUtils.ts\";\nimport { degToRad, Vector2 } from \"./MathUtils.ts\";\n\nconst _console = createConsole(\"DisplayManagerInterface\", { log: false });\n\nexport interface DisplayManagerInterface {\n  get isReady(): boolean;\n\n  get contextState(): DisplayContextState;\n\n  flushContextCommands(): Promise<void>;\n\n  get brightness(): DisplayBrightness;\n  setBrightness(\n    newDisplayBrightness: DisplayBrightness,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  show(sendImmediately?: boolean): Promise<void>;\n  clear(sendImmediately?: boolean): Promise<void>;\n\n  get colors(): string[];\n  get numberOfColors(): number;\n  setColor(\n    colorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  assertValidColorIndex(colorIndex: number): void;\n  assertValidLineWidth(lineWidth: number): void;\n  assertValidNumberOfColors(numberOfColors: number): void;\n  assertValidBitmap(bitmap: DisplayBitmap, checkSize?: boolean): void;\n\n  get opacities(): number[];\n  setColorOpacity(\n    colorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setOpacity(opacity: number, sendImmediately?: boolean): Promise<void>;\n\n  saveContext(sendImmediately?: boolean): Promise<void>;\n  restoreContext(sendImmediately?: boolean): Promise<void>;\n\n  selectFillColor(\n    fillColorIndex: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  selectBackgroundColor(\n    backgroundColorIndex: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  selectLineColor(\n    lineColorIndex: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setLineWidth(lineWidth: number, sendImmediately?: boolean): Promise<void>;\n\n  setIgnoreFill(ignoreFill: boolean, sendImmediately?: boolean): Promise<void>;\n  setIgnoreLine(ignoreLine: boolean, sendImmediately?: boolean): Promise<void>;\n  setFillBackground(\n    fillBackground: boolean,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setAlignment(\n    alignmentDirection: DisplayAlignmentDirection,\n    alignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setHorizontalAlignment(\n    horizontalAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setVerticalAlignment(\n    verticalAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  resetAlignment(sendImmediately?: boolean): Promise<void>;\n\n  setRotation(\n    rotation: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  clearRotation(sendImmediately?: boolean): Promise<void>;\n\n  setSegmentStartCap(\n    segmentStartCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSegmentEndCap(\n    segmentEndCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSegmentCap(\n    segmentCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setSegmentStartRadius(\n    segmentStartRadius: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSegmentEndRadius(\n    segmentEndRadius: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSegmentRadius(\n    segmentRadius: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setCrop(\n    cropDirection: DisplayCropDirection,\n    crop: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setCropTop(cropTop: number, sendImmediately?: boolean): Promise<void>;\n  setCropRight(cropRight: number, sendImmediately?: boolean): Promise<void>;\n  setCropBottom(cropBottom: number, sendImmediately?: boolean): Promise<void>;\n  setCropLeft(cropLeft: number, sendImmediately?: boolean): Promise<void>;\n  clearCrop(sendImmediately?: boolean): Promise<void>;\n\n  setRotationCrop(\n    cropDirection: DisplayCropDirection,\n    crop: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setRotationCropTop(\n    rotationCropTop: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setRotationCropRight(\n    rotationCropRight: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setRotationCropBottom(\n    rotationCropBottom: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setRotationCropLeft(\n    rotationCropLeft: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  clearRotationCrop(sendImmediately?: boolean): Promise<void>;\n\n  selectBitmapColor(\n    bitmapColorIndex: number,\n    colorIndex: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  get bitmapColorIndices(): number[];\n  get bitmapColors(): string[];\n  selectBitmapColors(\n    bitmapColorPairs: DisplayBitmapColorPair[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setBitmapColor(\n    bitmapColorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setBitmapColorOpacity(\n    bitmapColorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setBitmapScaleDirection(\n    direction: DisplayScaleDirection,\n    bitmapScale: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setBitmapScaleX(\n    bitmapScaleX: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setBitmapScaleY(\n    bitmapScaleY: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setBitmapScale(bitmapScale: number, sendImmediately?: boolean): Promise<void>;\n  resetBitmapScale(sendImmediately?: boolean): Promise<void>;\n\n  selectSpriteColor(\n    spriteColorIndex: number,\n    colorIndex: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  get spriteColorIndices(): number[];\n  get spriteColors(): string[];\n  selectSpriteColors(\n    spriteColorPairs: DisplaySpriteColorPair[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n  resetSpriteColors(sendImmediately?: boolean): Promise<void>;\n\n  setSpriteColor(\n    spriteColorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpriteColorOpacity(\n    spriteColorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setSpriteScaleDirection(\n    direction: DisplayScaleDirection,\n    spriteScale: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpriteScaleX(\n    spriteScaleX: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpriteScaleY(\n    spriteScaleY: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpriteScale(spriteScale: number, sendImmediately?: boolean): Promise<void>;\n  resetSpriteScale(sendImmediately?: boolean): Promise<void>;\n\n  setSpritesLineHeight(\n    spritesLineHeight: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setSpritesDirectionGeneric(\n    direction: DisplayDirection,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpritesDirection(\n    spritesDirection: DisplayDirection,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpritesLineDirection(\n    spritesLineDirection: DisplayDirection,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setSpritesSpacingGeneric(\n    spacing: number,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpritesSpacing(\n    spritesSpacing: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpritesLineSpacing(\n    spritesSpacing: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  setSpritesAlignmentGeneric(\n    alignment: DisplayAlignment,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpritesAlignment(\n    spritesAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  setSpritesLineAlignment(\n    spritesLineAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  clearRect(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawRect(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawRoundRect(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    borderRadius: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawCircle(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawEllipse(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawRegularPolygon(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    numberOfSides: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawPolygon(points: Vector2[], sendImmediately?: boolean): Promise<void>;\n\n  drawWireframe(\n    wireframe: DisplayWireframe,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  drawCurve(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawCurves(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  drawQuadraticBezierCurve(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawQuadraticBezierCurves(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  drawCubicBezierCurve(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawCubicBezierCurves(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  _drawPath(\n    isClosed: boolean,\n    curves: DisplayBezierCurve[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawPath(\n    curves: DisplayBezierCurve[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawClosedPath(\n    curves: DisplayBezierCurve[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  drawSegment(\n    startX: number,\n    startY: number,\n    endX: number,\n    endY: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawSegments(points: Vector2[], sendImmediately?: boolean): Promise<void>;\n\n  drawArc(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawArcEllipse(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  drawBitmap(\n    offsetX: number,\n    offsetY: number,\n    bitmap: DisplayBitmap,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  runContextCommand(\n    command: DisplayContextCommand,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  runContextCommands(\n    commands: DisplayContextCommand[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  imageToBitmap(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors?: number\n  ): Promise<{\n    blob: Blob;\n    bitmap: DisplayBitmap;\n  }>;\n  quantizeImage(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors: number,\n    colors?: string[],\n    canvas?: HTMLCanvasElement\n  ): Promise<{\n    blob: Blob;\n    colors: string[];\n    colorIndices: number[];\n  }>;\n  resizeAndQuantizeImage(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors: number,\n    colors?: string[],\n    canvas?: HTMLCanvasElement\n  ): Promise<{\n    blob: Blob;\n    colors: string[];\n    colorIndices: number[];\n  }>;\n\n  uploadSpriteSheet(spriteSheet: DisplaySpriteSheet): Promise<void>;\n  uploadSpriteSheets(spriteSheets: DisplaySpriteSheet[]): Promise<void>;\n  selectSpriteSheet(\n    spriteSheetName: string,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawSprite(\n    offsetX: number,\n    offsetY: number,\n    spriteName: string,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  stringToSpriteLines(\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[]\n  ): DisplaySpriteLines;\n  stringToSpriteLinesMetrics(\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[]\n  ): DisplaySpriteLinesMetrics;\n  drawSprites(\n    offsetX: number,\n    offsetY: number,\n    spriteLines: DisplaySpriteLines,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  drawSpritesString(\n    offsetX: number,\n    offsetY: number,\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[],\n    sendImmediately?: boolean\n  ): Promise<void>;\n  assertLoadedSpriteSheet(spriteSheetName: string): void;\n  assertSelectedSpriteSheet(spriteSheetName: string): void;\n  assertAnySelectedSpriteSheet(): void;\n  assertSprite(spriteName: string): void;\n  getSprite(spriteName: string): DisplaySprite | undefined;\n  getSpriteSheetPalette(\n    paletteName: string\n  ): DisplaySpriteSheetPalette | undefined;\n  getSpriteSheetPaletteSwap(\n    paletteSwapName: string\n  ): DisplaySpriteSheetPaletteSwap | undefined;\n  getSpritePaletteSwap(\n    spriteName: string,\n    paletteSwapName: string\n  ): DisplaySpritePaletteSwap | undefined;\n\n  drawSpriteFromSpriteSheet(\n    offsetX: number,\n    offsetY: number,\n    spriteName: string,\n    spriteSheet: DisplaySpriteSheet,\n    paletteName?: string,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  get selectedSpriteSheet(): DisplaySpriteSheet | undefined;\n  get selectedSpriteSheetName(): string | undefined;\n\n  spriteSheets: Record<string, DisplaySpriteSheet>;\n  spriteSheetIndices: Record<string, number>;\n\n  assertSpriteSheetPalette(paletteName: string): void;\n  assertSpriteSheetPaletteSwap(paletteSwapName: string): void;\n  assertSpritePaletteSwap(spriteName: string, paletteSwapName: string): void;\n  selectSpriteSheetPalette(\n    paletteName: string,\n    offset?: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  selectSpriteSheetPaletteSwap(\n    paletteSwapName: string,\n    offset?: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  selectSpritePaletteSwap(\n    spriteName: string,\n    paletteSwapName: string,\n    offset?: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n\n  serializeSpriteSheet(spriteSheet: DisplaySpriteSheet): ArrayBuffer;\n\n  startSprite(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ): Promise<void>;\n  endSprite(sendImmediately?: boolean): Promise<void>;\n}\n\nexport async function runDisplayContextCommand(\n  displayManager: DisplayManagerInterface,\n  command: DisplayContextCommand,\n  sendImmediately?: boolean\n) {\n  if (command.hide) {\n    return;\n  }\n  switch (command.type) {\n    case \"show\":\n      await displayManager.show(sendImmediately);\n      break;\n    case \"clear\":\n      await displayManager.clear(sendImmediately);\n      break;\n    case \"saveContext\":\n      //await displayManager.saveContext(sendImmediately);\n      break;\n    case \"restoreContext\":\n      //await displayManager.restoreContext(sendImmediately);\n      break;\n    case \"clearRotation\":\n      await displayManager.clearRotation(sendImmediately);\n      break;\n    case \"clearCrop\":\n      await displayManager.clearCrop(sendImmediately);\n      break;\n    case \"clearRotationCrop\":\n      await displayManager.clearRotationCrop(sendImmediately);\n      break;\n    case \"resetBitmapScale\":\n      await displayManager.resetBitmapScale(sendImmediately);\n      break;\n    case \"resetSpriteScale\":\n      await displayManager.resetSpriteScale(sendImmediately);\n      break;\n    case \"setColor\":\n      {\n        const { colorIndex, color } = command;\n        await displayManager.setColor(colorIndex, color, sendImmediately);\n      }\n      break;\n    case \"setColorOpacity\":\n      {\n        const { colorIndex, opacity } = command;\n        await displayManager.setColorOpacity(\n          colorIndex,\n          opacity,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setOpacity\":\n      {\n        const { opacity } = command;\n        await displayManager.setOpacity(opacity, sendImmediately);\n      }\n      break;\n    case \"selectBackgroundColor\":\n      {\n        const { backgroundColorIndex } = command;\n        await displayManager.selectBackgroundColor(\n          backgroundColorIndex,\n          sendImmediately\n        );\n      }\n      break;\n    case \"selectFillColor\":\n      {\n        const { fillColorIndex } = command;\n        await displayManager.selectFillColor(fillColorIndex, sendImmediately);\n      }\n      break;\n    case \"selectLineColor\":\n      {\n        const { lineColorIndex } = command;\n        await displayManager.selectLineColor(lineColorIndex, sendImmediately);\n      }\n      break;\n    case \"setIgnoreFill\":\n      {\n        const { ignoreFill } = command;\n        await displayManager.setIgnoreFill(ignoreFill, sendImmediately);\n      }\n      break;\n    case \"setIgnoreLine\":\n      {\n        const { ignoreLine } = command;\n        await displayManager.setIgnoreLine(ignoreLine, sendImmediately);\n      }\n      break;\n    case \"setFillBackground\":\n      {\n        const { fillBackground } = command;\n        await displayManager.setFillBackground(fillBackground, sendImmediately);\n      }\n      break;\n    case \"setLineWidth\":\n      {\n        const { lineWidth } = command;\n        await displayManager.setLineWidth(lineWidth, sendImmediately);\n      }\n      break;\n    case \"setRotation\":\n      {\n        let { rotation, isRadians } = command;\n        rotation = isRadians ? rotation : degToRad(rotation);\n        rotation;\n        await displayManager.setRotation(rotation, true, sendImmediately);\n      }\n      break;\n    case \"setSegmentStartCap\":\n      {\n        const { segmentStartCap } = command;\n        await displayManager.setSegmentStartCap(\n          segmentStartCap,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setSegmentEndCap\":\n      {\n        const { segmentEndCap } = command;\n        await displayManager.setSegmentEndCap(segmentEndCap, sendImmediately);\n      }\n      break;\n    case \"setSegmentCap\":\n      {\n        const { segmentCap } = command;\n        await displayManager.setSegmentCap(segmentCap, sendImmediately);\n      }\n      break;\n    case \"setSegmentStartRadius\":\n      {\n        const { segmentStartRadius } = command;\n        await displayManager.setSegmentStartRadius(\n          segmentStartRadius,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setSegmentEndRadius\":\n      {\n        const { segmentEndRadius } = command;\n        await displayManager.setSegmentEndRadius(\n          segmentEndRadius,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setSegmentRadius\":\n      {\n        const { segmentRadius } = command;\n        await displayManager.setSegmentRadius(segmentRadius, sendImmediately);\n      }\n      break;\n    case \"setHorizontalAlignment\":\n      {\n        const { horizontalAlignment } = command;\n        await displayManager.setHorizontalAlignment(\n          horizontalAlignment,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setVerticalAlignment\":\n      {\n        const { verticalAlignment } = command;\n        await displayManager.setVerticalAlignment(\n          verticalAlignment,\n          sendImmediately\n        );\n      }\n      break;\n    case \"resetAlignment\":\n      {\n        await displayManager.resetAlignment(sendImmediately);\n      }\n      break;\n    case \"setCropTop\":\n      {\n        const { cropTop } = command;\n        await displayManager.setCropTop(cropTop, sendImmediately);\n      }\n      break;\n    case \"setCropRight\":\n      {\n        const { cropRight } = command;\n        await displayManager.setCropRight(cropRight, sendImmediately);\n      }\n      break;\n    case \"setCropBottom\":\n      {\n        const { cropBottom } = command;\n        await displayManager.setCropBottom(cropBottom, sendImmediately);\n      }\n      break;\n    case \"setCropLeft\":\n      {\n        const { cropLeft } = command;\n        await displayManager.setCropLeft(cropLeft, sendImmediately);\n      }\n      break;\n    case \"setRotationCropTop\":\n      {\n        const { rotationCropTop } = command;\n        await displayManager.setRotationCropTop(\n          rotationCropTop,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setRotationCropRight\":\n      {\n        const { rotationCropRight } = command;\n        await displayManager.setRotationCropRight(\n          rotationCropRight,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setRotationCropBottom\":\n      {\n        const { rotationCropBottom } = command;\n        await displayManager.setRotationCropBottom(\n          rotationCropBottom,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setRotationCropLeft\":\n      {\n        const { rotationCropLeft } = command;\n        await displayManager.setRotationCropLeft(\n          rotationCropLeft,\n          sendImmediately\n        );\n      }\n      break;\n    case \"selectBitmapColor\":\n      {\n        const { bitmapColorIndex, colorIndex } = command;\n        await displayManager.selectBitmapColor(\n          bitmapColorIndex,\n          colorIndex,\n          sendImmediately\n        );\n      }\n      break;\n    case \"selectBitmapColors\":\n      {\n        const { bitmapColorPairs } = command;\n        await displayManager.selectBitmapColors(\n          bitmapColorPairs,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setBitmapScaleX\":\n      {\n        const { bitmapScaleX } = command;\n        await displayManager.setBitmapScaleX(bitmapScaleX, sendImmediately);\n      }\n      break;\n    case \"setBitmapScaleY\":\n      {\n        const { bitmapScaleY } = command;\n        await displayManager.setBitmapScaleY(bitmapScaleY, sendImmediately);\n      }\n      break;\n    case \"setBitmapScale\":\n      {\n        const { bitmapScale } = command;\n        await displayManager.setBitmapScale(bitmapScale, sendImmediately);\n      }\n      break;\n    case \"selectSpriteColor\":\n      {\n        const { spriteColorIndex, colorIndex } = command;\n        await displayManager.selectSpriteColor(\n          spriteColorIndex,\n          colorIndex,\n          sendImmediately\n        );\n      }\n      break;\n    case \"selectSpriteColors\":\n      {\n        const { spriteColorPairs } = command;\n        await displayManager.selectSpriteColors(\n          spriteColorPairs,\n          sendImmediately\n        );\n      }\n      break;\n    case \"setSpriteScaleX\":\n      {\n        const { spriteScaleX } = command;\n        await displayManager.setSpriteScaleX(spriteScaleX, sendImmediately);\n      }\n      break;\n    case \"setSpriteScaleY\":\n      {\n        const { spriteScaleY } = command;\n        await displayManager.setSpriteScaleY(spriteScaleY, sendImmediately);\n      }\n      break;\n    case \"setSpriteScale\":\n      {\n        const { spriteScale } = command;\n        await displayManager.setSpriteScale(spriteScale, sendImmediately);\n      }\n      break;\n\n    case \"clearRect\":\n      {\n        const { x, y, width, height } = command;\n        await displayManager.clearRect(x, y, width, height, sendImmediately);\n      }\n      break;\n    case \"drawRect\":\n      {\n        const { offsetX, offsetY, width, height } = command;\n        await displayManager.drawRect(\n          offsetX,\n          offsetY,\n          width,\n          height,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawRoundRect\":\n      {\n        const { offsetX, offsetY, width, height, borderRadius } = command;\n        await displayManager.drawRoundRect(\n          offsetX,\n          offsetY,\n          width,\n          height,\n          borderRadius,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawCircle\":\n      {\n        const { offsetX, offsetY, radius } = command;\n        await displayManager.drawCircle(\n          offsetX,\n          offsetY,\n          radius,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawEllipse\":\n      {\n        const { offsetX, offsetY, radiusX, radiusY } = command;\n        await displayManager.drawEllipse(\n          offsetX,\n          offsetY,\n          radiusX,\n          radiusY,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawPolygon\":\n      {\n        const { points } = command;\n        await displayManager.drawPolygon(points, sendImmediately);\n      }\n      break;\n    case \"drawRegularPolygon\":\n      {\n        const { offsetX, offsetY, radius, numberOfSides } = command;\n        await displayManager.drawRegularPolygon(\n          offsetX,\n          offsetY,\n          radius,\n          numberOfSides,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawWireframe\":\n      {\n        const { wireframe } = command;\n        await displayManager.drawWireframe(wireframe, sendImmediately);\n      }\n      break;\n    case \"drawSegment\":\n      {\n        const { startX, startY, endX, endY } = command;\n        await displayManager.drawSegment(\n          startX,\n          startY,\n          endX,\n          endY,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawSegments\":\n      {\n        const { points } = command;\n        await displayManager.drawSegments(\n          points.map(({ x, y }) => ({ x: x, y: y })),\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawArc\":\n      {\n        let { offsetX, offsetY, radius, startAngle, angleOffset, isRadians } =\n          command;\n        startAngle = isRadians ? startAngle : degToRad(startAngle);\n        angleOffset = isRadians ? angleOffset : degToRad(angleOffset);\n\n        await displayManager.drawArc(\n          offsetX,\n          offsetY,\n          radius,\n          startAngle,\n          angleOffset,\n          true,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawArcEllipse\":\n      {\n        let {\n          offsetX,\n          offsetY,\n          radiusX,\n          radiusY,\n          startAngle,\n          angleOffset,\n          isRadians,\n        } = command;\n        startAngle = isRadians ? startAngle : degToRad(startAngle);\n        angleOffset = isRadians ? angleOffset : degToRad(angleOffset);\n\n        await displayManager.drawArcEllipse(\n          offsetX,\n          offsetY,\n          radiusX,\n          radiusY,\n          startAngle,\n          angleOffset,\n          true,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawBitmap\":\n      {\n        const { offsetX, offsetY, bitmap } = command;\n        await displayManager.drawBitmap(\n          offsetX,\n          offsetY,\n          bitmap,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawSprite\":\n      {\n        const { offsetX, offsetY, spriteIndex } = command;\n        const spriteName =\n          displayManager.selectedSpriteSheet?.sprites[spriteIndex].name!;\n        await displayManager.drawSprite(\n          offsetX,\n          offsetY,\n          spriteName,\n          sendImmediately\n        );\n      }\n      break;\n    case \"selectSpriteSheet\":\n      {\n        const { spriteSheetIndex } = command;\n        const spriteSheetName = Object.entries(\n          displayManager.spriteSheetIndices\n        ).find((entry) => entry[1] == spriteSheetIndex)?.[0];\n        await displayManager.selectSpriteSheet(\n          spriteSheetName!,\n          sendImmediately\n        );\n      }\n      break;\n    case \"resetSpriteColors\":\n      await displayManager.resetSpriteColors(sendImmediately);\n      break;\n\n    case \"drawQuadraticBezierCurve\":\n      {\n        const { controlPoints } = command;\n        await displayManager.drawQuadraticBezierCurve(\n          controlPoints,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawQuadraticBezierCurves\":\n      {\n        const { controlPoints } = command;\n        await displayManager.drawQuadraticBezierCurves(\n          controlPoints,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawCubicBezierCurve\":\n      {\n        const { controlPoints } = command;\n        await displayManager.drawCubicBezierCurve(\n          controlPoints,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawCubicBezierCurves\":\n      {\n        const { controlPoints } = command;\n        await displayManager.drawCubicBezierCurves(\n          controlPoints,\n          sendImmediately\n        );\n      }\n      break;\n    case \"drawClosedPath\":\n      {\n        const { curves } = command;\n        await displayManager.drawClosedPath(curves, sendImmediately);\n      }\n      break;\n    case \"drawPath\":\n      {\n        const { curves } = command;\n        await displayManager.drawPath(curves, sendImmediately);\n      }\n      break;\n    case \"startSprite\":\n      {\n        const { offsetX, offsetY, width, height } = command;\n        await displayManager.startSprite(\n          offsetX,\n          offsetY,\n          width,\n          height,\n          sendImmediately\n        );\n      }\n      break;\n    case \"endSprite\":\n      await displayManager.endSprite(sendImmediately);\n      break;\n  }\n}\n\nexport async function runDisplayContextCommands(\n  displayManager: DisplayManagerInterface,\n  commands: DisplayContextCommand[],\n  sendImmediately?: boolean\n) {\n  _console.log(\"runDisplayContextCommands\", commands);\n  commands\n    .filter((command) => !command.hide)\n    .forEach((command) => {\n      runDisplayContextCommand(displayManager, command, false);\n    });\n  if (sendImmediately) {\n    displayManager.flushContextCommands();\n  }\n}\n\nexport function assertLoadedSpriteSheet(\n  displayManager: DisplayManagerInterface,\n  spriteSheetName: string\n) {\n  _console.assertWithError(\n    displayManager.spriteSheets[spriteSheetName],\n    `spriteSheet \"${spriteSheetName}\" not loaded`\n  );\n}\nexport function assertSelectedSpriteSheet(\n  displayManager: DisplayManagerInterface,\n  spriteSheetName: string\n) {\n  displayManager.assertLoadedSpriteSheet(spriteSheetName);\n  _console.assertWithError(\n    displayManager.selectedSpriteSheetName == spriteSheetName,\n    `spriteSheet \"${spriteSheetName}\" not selected`\n  );\n}\nexport function assertAnySelectedSpriteSheet(\n  displayManager: DisplayManagerInterface\n) {\n  _console.assertWithError(\n    displayManager.selectedSpriteSheet,\n    \"no spriteSheet selected\"\n  );\n}\nexport function getSprite(\n  displayManager: DisplayManagerInterface,\n  spriteName: string\n): DisplaySprite | undefined {\n  displayManager.assertAnySelectedSpriteSheet();\n  return displayManager.selectedSpriteSheet!.sprites.find(\n    (sprite) => sprite.name == spriteName\n  );\n}\nexport function assertSprite(\n  displayManager: DisplayManagerInterface,\n  spriteName: string\n) {\n  displayManager.assertAnySelectedSpriteSheet();\n  const sprite = displayManager.getSprite(spriteName);\n  _console.assertWithError(sprite, `no sprite found with name \"${spriteName}\"`);\n}\nexport function getSpriteSheetPalette(\n  displayManager: DisplayManagerInterface,\n  paletteName: string\n): DisplaySpriteSheetPalette | undefined {\n  return displayManager.selectedSpriteSheet?.palettes?.find(\n    (palette) => palette.name == paletteName\n  );\n}\nexport function getSpriteSheetPaletteSwap(\n  displayManager: DisplayManagerInterface,\n  paletteSwapName: string\n): DisplaySpriteSheetPaletteSwap | undefined {\n  return displayManager.selectedSpriteSheet?.paletteSwaps?.find(\n    (paletteSwap) => paletteSwap.name == paletteSwapName\n  );\n}\nexport function getSpritePaletteSwap(\n  displayManager: DisplayManagerInterface,\n  spriteName: string,\n  paletteSwapName: string\n): DisplaySpritePaletteSwap | undefined {\n  return displayManager\n    .getSprite(spriteName)\n    ?.paletteSwaps?.find((paletteSwap) => paletteSwap.name == paletteSwapName);\n}\n\nexport function assertSpriteSheetPalette(\n  displayManagerInterface: DisplayManagerInterface,\n  paletteName: string\n) {\n  const spriteSheetPalette =\n    displayManagerInterface.getSpriteSheetPalette(paletteName);\n  _console.assertWithError(\n    spriteSheetPalette,\n    `no spriteSheetPalette found with name \"${paletteName}\"`\n  );\n}\nexport function assertSpriteSheetPaletteSwap(\n  displayManagerInterface: DisplayManagerInterface,\n  paletteSwapName: string\n) {\n  const spriteSheetPaletteSwap =\n    displayManagerInterface.getSpriteSheetPaletteSwap(paletteSwapName);\n  _console.assertWithError(\n    spriteSheetPaletteSwap,\n    `no paletteSwapName found with name \"${paletteSwapName}\"`\n  );\n}\nexport function assertSpritePaletteSwap(\n  displayManagerInterface: DisplayManagerInterface,\n  spriteName: string,\n  paletteSwapName: string\n) {\n  const spritePaletteSwap = displayManagerInterface.getSpritePaletteSwap(\n    spriteName,\n    paletteSwapName\n  );\n  _console.assertWithError(\n    spritePaletteSwap,\n    `no spritePaletteSwap found for sprite \"${spriteName}\" name \"${paletteSwapName}\"`\n  );\n}\nexport async function selectSpriteSheetPalette(\n  displayManagerInterface: DisplayManagerInterface,\n  paletteName: string,\n  offset?: number,\n  indicesOnly?: boolean,\n  sendImmediately?: boolean\n) {\n  offset = offset || 0;\n\n  displayManagerInterface.assertAnySelectedSpriteSheet();\n  displayManagerInterface.assertSpriteSheetPalette(paletteName);\n  const palette = displayManagerInterface.getSpriteSheetPalette(paletteName)!;\n\n  _console.assertWithError(\n    palette.numberOfColors + offset <= displayManagerInterface.numberOfColors,\n    `invalid offset ${offset} and palette.numberOfColors ${palette.numberOfColors} (max ${displayManagerInterface.numberOfColors})`\n  );\n\n  //_console.log({ indicesOnly });\n  for (let index = 0; index < palette.numberOfColors; index++) {\n    if (!indicesOnly) {\n      const color = palette.colors[index];\n      let opacity = palette.opacities?.[index];\n      if (opacity == undefined) {\n        opacity = 1;\n      }\n      //_console.log({ index, offset, color });\n      displayManagerInterface.setColor(index + offset, color, false);\n      displayManagerInterface.setColorOpacity(index + offset, opacity, false);\n    }\n    displayManagerInterface.selectSpriteColor(index, index + offset);\n  }\n\n  if (sendImmediately) {\n    displayManagerInterface.flushContextCommands();\n  }\n}\nexport async function selectSpriteSheetPaletteSwap(\n  displayManagerInterface: DisplayManagerInterface,\n  paletteSwapName: string,\n  offset?: number,\n  sendImmediately?: boolean\n) {\n  offset = offset || 0;\n  displayManagerInterface.assertAnySelectedSpriteSheet();\n  displayManagerInterface.assertSpriteSheetPaletteSwap(paletteSwapName);\n\n  const paletteSwap =\n    displayManagerInterface.getSpriteSheetPaletteSwap(paletteSwapName)!;\n\n  const spriteColorPairs: DisplaySpriteColorPair[] = [];\n  for (\n    let spriteColorIndex = 0;\n    spriteColorIndex < paletteSwap.numberOfColors;\n    spriteColorIndex++\n  ) {\n    const colorIndex = paletteSwap.spriteColorIndices[spriteColorIndex];\n    spriteColorPairs.push({\n      spriteColorIndex: spriteColorIndex + offset,\n      colorIndex,\n    });\n  }\n  displayManagerInterface.selectSpriteColors(spriteColorPairs, false);\n\n  if (sendImmediately) {\n    displayManagerInterface.flushContextCommands();\n  }\n}\nexport async function selectSpritePaletteSwap(\n  displayManagerInterface: DisplayManagerInterface,\n  spriteName: string,\n  paletteSwapName: string,\n  offset?: number,\n  sendImmediately?: boolean\n) {\n  offset = offset || 0;\n  displayManagerInterface.assertAnySelectedSpriteSheet();\n\n  const paletteSwap = displayManagerInterface.getSpritePaletteSwap(\n    spriteName,\n    paletteSwapName\n  )!;\n\n  const spriteColorPairs: DisplaySpriteColorPair[] = [];\n  for (\n    let spriteColorIndex = 0;\n    spriteColorIndex < paletteSwap.numberOfColors;\n    spriteColorIndex++\n  ) {\n    const colorIndex = paletteSwap.spriteColorIndices[spriteColorIndex];\n    spriteColorPairs.push({\n      spriteColorIndex: spriteColorIndex + offset,\n      colorIndex,\n    });\n  }\n  displayManagerInterface.selectSpriteColors(spriteColorPairs, false);\n\n  if (sendImmediately) {\n    displayManagerInterface.flushContextCommands();\n  }\n}\n\nexport async function drawSpriteFromSpriteSheet(\n  displayManagerInterface: DisplayManagerInterface,\n  offsetX: number,\n  offsetY: number,\n  spriteName: string,\n  spriteSheet: DisplaySpriteSheet,\n  paletteName?: string,\n  sendImmediately?: boolean\n) {\n  const reducedSpriteSheet = reduceSpriteSheet(spriteSheet, [spriteName]);\n  await displayManagerInterface.uploadSpriteSheet(reducedSpriteSheet);\n  await displayManagerInterface.selectSpriteSheet(spriteSheet.name);\n  await displayManagerInterface.drawSprite(\n    offsetX,\n    offsetY,\n    spriteName,\n    sendImmediately\n  );\n  if (paletteName != undefined) {\n    await displayManagerInterface.selectSpriteSheetPalette(paletteName);\n  }\n}\n","import Device, { SendMessageCallback } from \"./Device.ts\";\nimport {\n  concatenateArrayBuffers,\n  UInt8ByteBuffer,\n} from \"./utils/ArrayBufferUtils.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport autoBind from \"auto-bind\";\nimport {\n  clamp,\n  degToRad,\n  normalizeRadians,\n  Vector2,\n} from \"./utils/MathUtils.ts\";\nimport { rgbToHex, stringToRGB } from \"./utils/ColorUtils.ts\";\nimport DisplayContextStateHelper from \"./utils/DisplayContextStateHelper.ts\";\nimport {\n  assertValidColor,\n  assertValidDisplayBrightness,\n  assertValidSegmentCap,\n  DisplayScaleDirection,\n  DisplayBitmapScaleDirectionToCommandType,\n  DisplayColorRGB,\n  DisplayCropDirection,\n  DisplayCropDirections,\n  DisplayCropDirectionToCommandType,\n  DisplayCropDirectionToStateKey,\n  DisplayRotationCropDirectionToCommandType,\n  DisplayRotationCropDirectionToStateKey,\n  maxDisplayScale,\n  roundScale,\n  DisplaySpriteScaleDirectionToCommandType,\n  minDisplayScale,\n  assertValidAlignment,\n  DisplayAlignmentDirectionToCommandType,\n  DisplayAlignmentDirectionToStateKey,\n  assertValidDirection,\n  assertValidAlignmentDirection,\n  assertValidWireframe,\n  trimWireframe,\n  assertValidNumberOfControlPoints,\n  assertValidPathNumberOfControlPoints,\n  assertValidPath,\n  isWireframePolygon,\n} from \"./utils/DisplayUtils.ts\";\nimport {\n  assertValidBitmapPixels,\n  drawBitmapHeaderLength,\n  getBitmapNumberOfBytes,\n  imageToBitmap,\n  quantizeImage,\n  resizeAndQuantizeImage,\n} from \"./utils/DisplayBitmapUtils.ts\";\nimport {\n  DefaultDisplayContextState,\n  DisplayAlignment,\n  DisplayAlignmentDirection,\n  DisplayContextState,\n  DisplayContextStateKey,\n  DisplayDirection,\n  DisplaySegmentCap,\n  PartialDisplayContextState,\n} from \"./utils/DisplayContextState.ts\";\nimport {\n  DisplayContextCommand,\n  DisplayContextCommandType,\n  DisplayContextCommandTypes,\n  serializeContextCommand,\n} from \"./utils/DisplayContextCommand.ts\";\nimport {\n  assertAnySelectedSpriteSheet,\n  assertLoadedSpriteSheet,\n  assertSelectedSpriteSheet,\n  assertSprite,\n  assertSpritePaletteSwap,\n  assertSpriteSheetPalette,\n  assertSpriteSheetPaletteSwap,\n  DisplayManagerInterface,\n  drawSpriteFromSpriteSheet,\n  getSprite,\n  getSpritePaletteSwap,\n  getSpriteSheetPalette,\n  getSpriteSheetPaletteSwap,\n  runDisplayContextCommand,\n  runDisplayContextCommands,\n  selectSpritePaletteSwap,\n  selectSpriteSheetPalette,\n  selectSpriteSheetPaletteSwap,\n} from \"./utils/DisplayManagerInterface.ts\";\nimport { SendFileCallback } from \"./FileTransferManager.ts\";\nimport { textDecoder, textEncoder } from \"./utils/Text.ts\";\nimport {\n  DisplaySprite,\n  DisplaySpritePaletteSwap,\n  DisplaySpriteSheetPalette,\n  DisplaySpriteSheetPaletteSwap,\n  serializeSpriteSheet,\n  DisplaySpriteSheet,\n  DisplaySpriteLines,\n  stringToSpriteLines,\n  DisplaySpriteSerializedSubLine,\n  DisplaySpriteSerializedLine,\n  DisplaySpriteSerializedLines,\n  stringToSpriteLinesMetrics,\n} from \"./utils/DisplaySpriteSheetUtils.ts\";\nimport { wait } from \"./utils/Timer.ts\";\n\nconst _console = createConsole(\"DisplayManager\", { log: false });\n\nexport const DefaultNumberOfDisplayColors = 16;\n\nexport const DisplayCommands = [\"sleep\", \"wake\"] as const;\nexport type DisplayCommand = (typeof DisplayCommands)[number];\n\nexport const DisplayStatuses = [\"awake\", \"asleep\"] as const;\nexport type DisplayStatus = (typeof DisplayStatuses)[number];\n\nexport const DisplayInformationTypes = [\n  \"type\",\n  \"width\",\n  \"height\",\n  \"pixelDepth\",\n] as const;\nexport type DisplayInformationType = (typeof DisplayInformationTypes)[number];\n\nexport const DisplayTypes = [\n  \"none\",\n  \"generic\",\n  \"monocularLeft\",\n  \"monocularRight\",\n  \"binocular\",\n] as const;\nexport type DisplayType = (typeof DisplayTypes)[number];\n\nexport const DisplayPixelDepths = [\"1\", \"2\", \"4\"] as const;\nexport type DisplayPixelDepth = (typeof DisplayPixelDepths)[number];\n\nexport const DisplayBrightnesses = [\n  \"veryLow\",\n  \"low\",\n  \"medium\",\n  \"high\",\n  \"veryHigh\",\n] as const;\nexport type DisplayBrightness = (typeof DisplayBrightnesses)[number];\n\nexport const DisplayMessageTypes = [\n  \"isDisplayAvailable\",\n  \"displayStatus\",\n  \"displayInformation\",\n  \"displayCommand\",\n  \"getDisplayBrightness\",\n  \"setDisplayBrightness\",\n  \"displayContextCommands\",\n  \"displayReady\",\n  \"getSpriteSheetName\",\n  \"setSpriteSheetName\",\n  \"spriteSheetIndex\",\n] as const;\nexport type DisplayMessageType = (typeof DisplayMessageTypes)[number];\n\nexport type DisplaySize = {\n  width: number;\n  height: number;\n};\nexport type DisplayInformation = {\n  type: DisplayType;\n  width: number;\n  height: number;\n  pixelDepth: DisplayPixelDepth;\n};\n\nexport type DisplayBitmapColorPair = {\n  bitmapColorIndex: number;\n  colorIndex: number;\n};\n\nexport type DisplaySpriteColorPair = {\n  spriteColorIndex: number;\n  colorIndex: number;\n};\n\nexport type DisplayWireframeEdge = {\n  startIndex: number;\n  endIndex: number;\n};\nexport type DisplaySegment = {\n  start: Vector2;\n  end: Vector2;\n};\nexport type DisplayWireframe = {\n  points: Vector2[];\n  edges: DisplayWireframeEdge[];\n};\n\nexport const DisplayBezierCurveTypes = [\n  \"segment\",\n  \"quadratic\",\n  \"cubic\",\n] as const;\nexport type DisplayBezierCurveType = (typeof DisplayBezierCurveTypes)[number];\nexport type DisplayBezierCurve = {\n  type: DisplayBezierCurveType;\n  controlPoints: Vector2[];\n};\n\nexport const displayCurveTypeBitWidth = 2;\nexport const displayCurveTypesPerByte = 8 / displayCurveTypeBitWidth;\n\nexport const DisplayPointDataTypes = [\"int8\", \"int16\", \"float\"] as const;\nexport type DisplayPointDataType = (typeof DisplayPointDataTypes)[number];\nexport const displayPointDataTypeToSize: Record<DisplayPointDataType, number> =\n  {\n    int8: 1 * 2,\n    int16: 2 * 2,\n    float: 4 * 2,\n  };\nexport const displayPointDataTypeToRange: Record<\n  DisplayPointDataType,\n  { min: number; max: number }\n> = {\n  int8: { min: -(2 ** 7), max: 2 ** 7 - 1 },\n  int16: { min: -(2 ** 15), max: 2 ** 15 - 1 },\n  float: { min: -Infinity, max: Infinity },\n};\n\nexport const DisplayInformationValues = {\n  type: DisplayTypes,\n  pixelDepth: DisplayPixelDepths,\n};\n\nexport const RequiredDisplayMessageTypes: DisplayMessageType[] = [\n  \"isDisplayAvailable\",\n  \"displayInformation\",\n  \"displayStatus\",\n  \"getDisplayBrightness\",\n] as const;\n\nexport const DisplayEventTypes = [\n  ...DisplayMessageTypes,\n  \"displayContextState\",\n  \"displayColor\",\n  \"displayColorOpacity\",\n  \"displayOpacity\",\n  \"displaySpriteSheetUploadStart\",\n  \"displaySpriteSheetUploadProgress\",\n  \"displaySpriteSheetUploadComplete\",\n] as const;\nexport type DisplayEventType = (typeof DisplayEventTypes)[number];\n\nexport interface DisplayEventMessages {\n  isDisplayAvailable: { isDisplayAvailable: boolean };\n  displayStatus: {\n    displayStatus: DisplayStatus;\n    previousDisplayStatus: DisplayStatus;\n  };\n  displayInformation: {\n    displayInformation: DisplayInformation;\n  };\n  getDisplayBrightness: {\n    displayBrightness: DisplayBrightness;\n  };\n  displayContextState: {\n    displayContextState: DisplayContextState;\n    differences: DisplayContextStateKey[];\n  };\n  displayColor: {\n    colorIndex: number;\n    colorRGB: DisplayColorRGB;\n    colorHex: string;\n  };\n  displayColorOpacity: {\n    opacity: number;\n    colorIndex: number;\n  };\n  displayOpacity: {\n    opacity: number;\n  };\n  displayReady: {};\n  getSpriteSheetName: {\n    spriteSheetName: string;\n  };\n\n  displaySpriteSheetUploadStart: {\n    spriteSheetName: string;\n    spriteSheet: DisplaySpriteSheet;\n  };\n  displaySpriteSheetUploadProgress: {\n    spriteSheetName: string;\n    spriteSheet: DisplaySpriteSheet;\n    progress: number;\n  };\n  displaySpriteSheetUploadComplete: {\n    spriteSheetName: string;\n    spriteSheet: DisplaySpriteSheet;\n  };\n  displayContextCommands: {};\n}\n\nexport type DisplayEventDispatcher = EventDispatcher<\n  Device,\n  DisplayEventType,\n  DisplayEventMessages\n>;\nexport type SendDisplayMessageCallback =\n  SendMessageCallback<DisplayMessageType>;\n\nexport const MinSpriteSheetNameLength = 1;\nexport const MaxSpriteSheetNameLength = 30;\n\nexport type DisplayBitmap = {\n  width: number;\n  height: number;\n  numberOfColors: number;\n  pixels: number[];\n};\n\nclass DisplayManager implements DisplayManagerInterface {\n  constructor() {\n    autoBind(this);\n  }\n\n  sendMessage!: SendDisplayMessageCallback;\n\n  eventDispatcher!: DisplayEventDispatcher;\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  requestRequiredInformation() {\n    _console.log(\"requesting required display information\");\n    const messages = RequiredDisplayMessageTypes.map((messageType) => ({\n      type: messageType,\n    }));\n    this.sendMessage(messages, false);\n  }\n\n  // IS DISPLAY AVAILABLE\n  #isAvailable = false;\n  get isAvailable() {\n    return this.#isAvailable;\n  }\n\n  #assertDisplayIsAvailable() {\n    _console.assertWithError(this.#isAvailable, \"display is not available\");\n  }\n\n  #parseIsDisplayAvailable(dataView: DataView) {\n    const newIsDisplayAvailable = dataView.getUint8(0) == 1;\n    this.#isAvailable = newIsDisplayAvailable;\n    _console.log({ isDisplayAvailable: this.#isAvailable });\n    this.#dispatchEvent(\"isDisplayAvailable\", {\n      isDisplayAvailable: this.#isAvailable,\n    });\n  }\n\n  // DISPLAY CONTEXT STATE\n  #contextStateHelper = new DisplayContextStateHelper();\n  get contextState() {\n    return this.#contextStateHelper.state;\n  }\n  #onContextStateUpdate(differences: DisplayContextStateKey[]) {\n    this.#dispatchEvent(\"displayContextState\", {\n      displayContextState: structuredClone(this.contextState),\n      differences,\n    });\n  }\n  async setContextState(\n    newState: PartialDisplayContextState,\n    sendImmediately?: boolean\n  ) {\n    const differences = this.#contextStateHelper.diff(newState);\n    if (differences.length == 0) {\n      return;\n    }\n    differences.forEach((difference) => {\n      switch (difference) {\n        case \"backgroundColorIndex\":\n          this.selectBackgroundColor(newState.backgroundColorIndex!);\n          break;\n        case \"fillBackground\":\n          this.setFillBackground(newState.fillBackground!);\n          break;\n        case \"ignoreFill\":\n          this.setIgnoreFill(newState.ignoreFill!);\n          break;\n        case \"ignoreLine\":\n          this.setIgnoreLine(newState.ignoreLine!);\n          break;\n        case \"fillColorIndex\":\n          this.selectFillColor(newState.fillColorIndex!);\n          break;\n        case \"lineColorIndex\":\n          this.selectLineColor(newState.lineColorIndex!);\n          break;\n        case \"lineWidth\":\n          this.setLineWidth(newState.lineWidth!);\n          break;\n        case \"horizontalAlignment\":\n          this.setHorizontalAlignment(newState.horizontalAlignment!);\n          break;\n        case \"verticalAlignment\":\n          this.setVerticalAlignment(newState.verticalAlignment!);\n          break;\n        case \"rotation\":\n          this.setRotation(newState.rotation!, true);\n          break;\n        case \"segmentStartCap\":\n          this.setSegmentStartCap(newState.segmentStartCap!);\n          break;\n        case \"segmentEndCap\":\n          this.setSegmentEndCap(newState.segmentEndCap!);\n          break;\n        case \"segmentStartRadius\":\n          this.setSegmentStartRadius(newState.segmentStartRadius!);\n          break;\n        case \"segmentEndRadius\":\n          this.setSegmentEndRadius(newState.segmentEndRadius!);\n          break;\n        case \"cropTop\":\n          this.setCropTop(newState.cropTop!);\n          break;\n        case \"cropRight\":\n          this.setCropRight(newState.cropRight!);\n          break;\n        case \"cropBottom\":\n          this.setCropBottom(newState.cropBottom!);\n          break;\n        case \"cropLeft\":\n          this.setCropLeft(newState.cropLeft!);\n          break;\n        case \"rotationCropTop\":\n          this.setRotationCropTop(newState.rotationCropTop!);\n          break;\n        case \"rotationCropRight\":\n          this.setRotationCropRight(newState.rotationCropRight!);\n          break;\n        case \"rotationCropBottom\":\n          this.setRotationCropBottom(newState.rotationCropBottom!);\n          break;\n        case \"rotationCropLeft\":\n          this.setRotationCropLeft(newState.rotationCropLeft!);\n          break;\n        case \"bitmapColorIndices\":\n          const bitmapColors: DisplayBitmapColorPair[] = [];\n          newState.bitmapColorIndices!.forEach(\n            (colorIndex, bitmapColorIndex) => {\n              bitmapColors.push({ bitmapColorIndex, colorIndex });\n            }\n          );\n          this.selectBitmapColors(bitmapColors);\n          break;\n        case \"bitmapScaleX\":\n          this.setBitmapScaleX(newState.bitmapScaleX!);\n          break;\n        case \"bitmapScaleY\":\n          this.setBitmapScaleY(newState.bitmapScaleY!);\n          break;\n        case \"spriteColorIndices\":\n          const spriteColors: DisplaySpriteColorPair[] = [];\n          newState.spriteColorIndices!.forEach(\n            (colorIndex, spriteColorIndex) => {\n              spriteColors.push({ spriteColorIndex, colorIndex });\n            }\n          );\n          this.selectSpriteColors(spriteColors);\n          break;\n        case \"spriteScaleX\":\n          this.setSpriteScaleX(newState.spriteScaleX!);\n          break;\n        case \"spriteScaleY\":\n          this.setSpriteScaleY(newState.spriteScaleY!);\n          break;\n        case \"spritesLineHeight\":\n          this.setSpritesLineHeight(newState.spritesLineHeight!);\n          break;\n        case \"spritesDirection\":\n          this.setSpritesDirection(newState.spritesDirection!);\n          break;\n        case \"spritesLineDirection\":\n          this.setSpritesLineDirection(newState.spritesLineDirection!);\n          break;\n        case \"spritesSpacing\":\n          this.setSpritesSpacing(newState.spritesSpacing!);\n          break;\n        case \"spritesLineSpacing\":\n          this.setSpritesLineSpacing(newState.spritesLineSpacing!);\n          break;\n        case \"spritesAlignment\":\n          this.setSpritesAlignment(newState.spritesAlignment!);\n          break;\n        case \"spritesLineAlignment\":\n          this.setSpritesLineAlignment(newState.spritesLineAlignment!);\n          break;\n      }\n    });\n    if (sendImmediately) {\n      await this.#sendContextCommands();\n    }\n  }\n\n  // DISPLAY STATUS\n  #displayStatus!: DisplayStatus;\n  get displayStatus() {\n    return this.#displayStatus;\n  }\n  get isDisplayAwake() {\n    return this.#displayStatus == \"awake\";\n  }\n  #parseDisplayStatus(dataView: DataView) {\n    const displayStatusIndex = dataView.getUint8(0);\n    const newDisplayStatus = DisplayStatuses[displayStatusIndex];\n    this.#updateDisplayStatus(newDisplayStatus);\n  }\n  #updateDisplayStatus(newDisplayStatus: DisplayStatus) {\n    _console.assertEnumWithError(newDisplayStatus, DisplayStatuses);\n    if (newDisplayStatus == this.#displayStatus) {\n      _console.log(`redundant displayStatus ${newDisplayStatus}`);\n      return;\n    }\n    const previousDisplayStatus = this.#displayStatus;\n    this.#displayStatus = newDisplayStatus;\n    _console.log(`updated displayStatus to \"${this.displayStatus}\"`);\n    this.#dispatchEvent(\"displayStatus\", {\n      displayStatus: this.displayStatus,\n      previousDisplayStatus,\n    });\n  }\n\n  // DISPLAY COMMAND\n  async #sendDisplayCommand(\n    command: DisplayCommand,\n    sendImmediately?: boolean\n  ) {\n    _console.assertEnumWithError(command, DisplayCommands);\n    _console.log(`sending display command \"${command}\"`);\n\n    const promise = this.waitForEvent(\"displayStatus\");\n    _console.log(`setting command \"${command}\"`);\n    const commandEnum = DisplayCommands.indexOf(command);\n\n    this.sendMessage(\n      [\n        {\n          type: \"displayCommand\",\n          data: UInt8ByteBuffer(commandEnum),\n        },\n      ],\n      sendImmediately\n    );\n\n    await promise;\n  }\n  #assertIsAwake() {\n    _console.assertWithError(\n      this.#displayStatus == \"awake\",\n      `display is not awake - currently ${this.#displayStatus}`\n    );\n  }\n  #assertIsNotAwake() {\n    _console.assertWithError(\n      this.#displayStatus != \"awake\",\n      `display is awake`\n    );\n  }\n\n  async wake() {\n    this.#assertIsNotAwake();\n    await this.#sendDisplayCommand(\"wake\");\n  }\n  async sleep() {\n    this.#assertIsAwake();\n    await this.#sendDisplayCommand(\"sleep\");\n  }\n  async toggle() {\n    switch (this.displayStatus) {\n      case \"asleep\":\n        this.wake();\n        break;\n      case \"awake\":\n        this.sleep();\n        break;\n    }\n  }\n\n  get numberOfColors() {\n    return 2 ** Number(this.pixelDepth!);\n  }\n\n  // INFORMATION\n  #displayInformation?: DisplayInformation;\n  get displayInformation() {\n    return this.#displayInformation!;\n  }\n\n  get pixelDepth() {\n    return this.#displayInformation?.pixelDepth!;\n  }\n  get width() {\n    return this.#displayInformation?.width!;\n  }\n  get height() {\n    return this.#displayInformation?.width!;\n  }\n  get size() {\n    return {\n      width: this.width!,\n      height: this.height!,\n    };\n  }\n  get type() {\n    return this.#displayInformation?.type!;\n  }\n\n  #parseDisplayInformation(dataView: DataView) {\n    // @ts-expect-error\n    const parsedDisplayInformation: DisplayInformation = {};\n\n    let byteOffset = 0;\n    while (byteOffset < dataView.byteLength) {\n      const displayInformationTypeIndex = dataView.getUint8(byteOffset++);\n      const displayInformationType =\n        DisplayInformationTypes[displayInformationTypeIndex];\n      _console.assertWithError(\n        displayInformationType,\n        `invalid displayInformationTypeIndex ${displayInformationType}`\n      );\n      _console.log({ displayInformationType });\n\n      switch (displayInformationType) {\n        case \"width\":\n        case \"height\":\n          {\n            const value = dataView.getUint16(byteOffset, true);\n            parsedDisplayInformation[displayInformationType] = value;\n            byteOffset += 2;\n          }\n          break;\n        case \"pixelDepth\":\n        case \"type\":\n          {\n            const values = DisplayInformationValues[displayInformationType];\n            let rawValue = dataView.getUint8(byteOffset++);\n            const value = values[rawValue];\n            _console.assertEnumWithError(value, values);\n            // @ts-expect-error\n            parsedDisplayInformation[displayInformationType] = value;\n          }\n          break;\n      }\n    }\n\n    _console.log({ parsedDisplayInformation });\n    const missingDisplayInformationType = DisplayInformationTypes.find(\n      (type) => !(type in parsedDisplayInformation)\n    );\n    _console.assertWithError(\n      !missingDisplayInformationType,\n      `missingDisplayInformationType ${missingDisplayInformationType}`\n    );\n    this.#displayInformation = parsedDisplayInformation;\n    this.#colors = new Array(this.numberOfColors).fill(\"#000000\");\n    this.#opacities = new Array(this.numberOfColors).fill(1);\n    this.contextState.bitmapColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n    this.contextState.spriteColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n    this.#dispatchEvent(\"displayInformation\", {\n      displayInformation: this.#displayInformation,\n    });\n  }\n\n  // DISPLAY BRIGHTNESS\n  #brightness!: DisplayBrightness;\n  get brightness() {\n    return this.#brightness;\n  }\n\n  #parseDisplayBrightness(dataView: DataView) {\n    const newDisplayBrightnessEnum = dataView.getUint8(0);\n    const newDisplayBrightness = DisplayBrightnesses[newDisplayBrightnessEnum];\n    assertValidDisplayBrightness(newDisplayBrightness);\n\n    this.#brightness = newDisplayBrightness;\n    _console.log({ displayBrightness: this.#brightness });\n    this.#dispatchEvent(\"getDisplayBrightness\", {\n      displayBrightness: this.#brightness,\n    });\n  }\n\n  async setBrightness(\n    newDisplayBrightness: DisplayBrightness,\n    sendImmediately?: boolean\n  ) {\n    this.#assertDisplayIsAvailable();\n    assertValidDisplayBrightness(newDisplayBrightness);\n    if (this.brightness == newDisplayBrightness) {\n      _console.log(`redundant displayBrightness ${newDisplayBrightness}`);\n      return;\n    }\n    const newDisplayBrightnessEnum =\n      DisplayBrightnesses.indexOf(newDisplayBrightness);\n    const newDisplayBrightnessData = UInt8ByteBuffer(newDisplayBrightnessEnum);\n\n    const promise = this.waitForEvent(\"getDisplayBrightness\");\n    this.sendMessage(\n      [{ type: \"setDisplayBrightness\", data: newDisplayBrightnessData }],\n      sendImmediately\n    );\n    await promise;\n  }\n\n  // DISPLAY CONTEXT\n  #assertValidDisplayContextCommandType(\n    displayContextCommand: DisplayContextCommandType\n  ) {\n    _console.assertEnumWithError(\n      displayContextCommand,\n      DisplayContextCommandTypes\n    );\n  }\n\n  get #maxCommandDataLength() {\n    return this.mtu - 7;\n  }\n  #contextCommandBuffers: ArrayBuffer[] = [];\n  async #sendContextCommand(\n    contextCommandType: DisplayContextCommandType,\n    arrayBuffer?: ArrayBufferLike,\n    sendImmediately?: boolean\n  ) {\n    this.#assertValidDisplayContextCommandType(contextCommandType);\n    _console.log(\n      \"sendContextCommand\",\n      { displayContextCommand: contextCommandType, sendImmediately },\n      arrayBuffer\n    );\n    const displayContextCommandEnum =\n      DisplayContextCommandTypes.indexOf(contextCommandType);\n    const _arrayBuffer = concatenateArrayBuffers(\n      UInt8ByteBuffer(displayContextCommandEnum),\n      arrayBuffer\n    );\n    const newLength = this.#contextCommandBuffers.reduce(\n      (sum, buffer) => sum + buffer.byteLength,\n      _arrayBuffer.byteLength\n    );\n    if (newLength > this.#maxCommandDataLength) {\n      _console.log(\"displayContextCommandBuffers too full - sending now\");\n      await this.#sendContextCommands();\n    }\n    this.#contextCommandBuffers.push(_arrayBuffer);\n    if (sendImmediately) {\n      await this.#sendContextCommands();\n    }\n  }\n  async #sendContextCommands() {\n    if (this.#contextCommandBuffers.length == 0) {\n      return;\n    }\n    const data = concatenateArrayBuffers(this.#contextCommandBuffers);\n    _console.log(\n      `sending displayContextCommands`,\n      this.#contextCommandBuffers.slice(),\n      data\n    );\n    this.#contextCommandBuffers.length = 0;\n    await this.sendMessage([{ type: \"displayContextCommands\", data }], true);\n    this.#dispatchEvent(\"displayContextCommands\", {});\n  }\n  async flushContextCommands() {\n    await this.#sendContextCommands();\n  }\n  async show(sendImmediately = true) {\n    _console.log(\"showDisplay\");\n    this.#isReady = false;\n    this.#lastShowRequestTime = Date.now();\n    await this.#sendContextCommand(\"show\", undefined, sendImmediately);\n  }\n  async clear(sendImmediately = true) {\n    _console.log(\"clearDisplay\");\n    this.#isReady = false;\n    this.#lastShowRequestTime = Date.now();\n    await this.#sendContextCommand(\"clear\", undefined, sendImmediately);\n  }\n\n  assertValidColorIndex(colorIndex: number) {\n    _console.assertRangeWithError(\n      \"colorIndex\",\n      colorIndex,\n      0,\n      this.numberOfColors\n    );\n  }\n  #colors: string[] = [];\n  get colors() {\n    return this.#colors;\n  }\n  async setColor(\n    colorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ) {\n    let colorRGB: DisplayColorRGB;\n    if (typeof color == \"string\") {\n      colorRGB = stringToRGB(color);\n    } else {\n      colorRGB = color;\n    }\n    const colorHex = rgbToHex(colorRGB);\n    if (this.colors[colorIndex] == colorHex) {\n      _console.log(`redundant color #${colorIndex} ${colorHex}`);\n      return;\n    }\n\n    //_console.log(`setting color #${colorIndex}`, colorRGB);\n    this.assertValidColorIndex(colorIndex);\n    assertValidColor(colorRGB);\n    const dataView = new DataView(new ArrayBuffer(4));\n    dataView.setUint8(0, colorIndex);\n    dataView.setUint8(1, colorRGB.r);\n    dataView.setUint8(2, colorRGB.g);\n    dataView.setUint8(3, colorRGB.b);\n    await this.#sendContextCommand(\n      \"setColor\",\n      dataView.buffer,\n      sendImmediately\n    );\n    this.colors[colorIndex] = colorHex;\n    this.#dispatchEvent(\"displayColor\", {\n      colorIndex,\n      colorRGB,\n      colorHex,\n    });\n  }\n  #opacities: number[] = [];\n  get opacities() {\n    return this.#opacities;\n  }\n  async setColorOpacity(\n    colorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"setColorOpacity\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      colorIndex,\n      opacity,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#opacities[colorIndex] = opacity;\n    this.#dispatchEvent(\"displayColorOpacity\", { colorIndex, opacity });\n  }\n  async setOpacity(opacity: number, sendImmediately?: boolean) {\n    const commandType: DisplayContextCommandType = \"setOpacity\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      opacity,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#opacities.fill(opacity);\n    this.#dispatchEvent(\"displayOpacity\", { opacity });\n  }\n\n  #contextStack: DisplayContextState[] = [];\n  #saveContext(sendImmediately?: boolean) {\n    this.#contextStack.push(structuredClone(this.contextState));\n  }\n  #restoreContext(sendImmediately?: boolean) {\n    const contextState = this.#contextStack.pop();\n    if (!contextState) {\n      _console.warn(\"#contextStack empty\");\n      return;\n    }\n    this.setContextState(contextState, sendImmediately);\n  }\n  async saveContext(sendImmediately?: boolean) {\n    if (true) {\n      this.#saveContext(sendImmediately);\n    } else {\n      // const commandType: DisplayContextCommandType = \"saveContext\";\n      // const dataView = serializeContextCommand(this, { type: commandType });\n      // await this.#sendDisplayContextCommand(\n      //   commandType,\n      //   dataView?.buffer,\n      //   sendImmediately\n      // );\n    }\n  }\n  async restoreContext(sendImmediately?: boolean) {\n    if (true) {\n      this.#restoreContext(sendImmediately);\n    } else {\n      // const commandType: DisplayContextCommandType = \"restoreContext\";\n      // const dataView = serializeContextCommand(this, { type: commandType });\n      // await this.#sendDisplayContextCommand(\n      //   commandType,\n      //   dataView?.buffer,\n      //   sendImmediately\n      // );\n    }\n  }\n\n  async selectFillColor(fillColorIndex: number, sendImmediately?: boolean) {\n    this.assertValidColorIndex(fillColorIndex);\n    const differences = this.#contextStateHelper.update({\n      fillColorIndex,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"selectFillColor\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      fillColorIndex,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async selectBackgroundColor(\n    backgroundColorIndex: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidColorIndex(backgroundColorIndex);\n    const differences = this.#contextStateHelper.update({\n      backgroundColorIndex,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"selectBackgroundColor\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      backgroundColorIndex,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async selectLineColor(lineColorIndex: number, sendImmediately?: boolean) {\n    this.assertValidColorIndex(lineColorIndex);\n    const differences = this.#contextStateHelper.update({\n      lineColorIndex,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"selectLineColor\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      lineColorIndex,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setIgnoreFill(ignoreFill: boolean, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      ignoreFill,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setIgnoreFill\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      ignoreFill,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setIgnoreLine(ignoreLine: boolean, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      ignoreLine,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setIgnoreLine\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      ignoreLine,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setFillBackground(fillBackground: boolean, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      fillBackground,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setFillBackground\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      fillBackground,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  assertValidLineWidth(lineWidth: number) {\n    _console.assertRangeWithError(\n      \"lineWidth\",\n      lineWidth,\n      0,\n      Math.max(this.width, this.height)\n    );\n  }\n  async setLineWidth(lineWidth: number, sendImmediately?: boolean) {\n    this.assertValidLineWidth(lineWidth);\n    const differences = this.#contextStateHelper.update({\n      lineWidth,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setLineWidth\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      lineWidth,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setAlignment(\n    alignmentDirection: DisplayAlignmentDirection,\n    alignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    assertValidAlignmentDirection(alignmentDirection);\n    const alignmentCommand =\n      DisplayAlignmentDirectionToCommandType[alignmentDirection];\n    const alignmentKey =\n      DisplayAlignmentDirectionToStateKey[alignmentDirection];\n    const differences = this.#contextStateHelper.update({\n      [alignmentKey]: alignment,\n    });\n    _console.log({ alignmentKey, alignment, differences });\n    if (differences.length == 0) {\n      return;\n    }\n    // @ts-ignore\n    const dataView = serializeContextCommand(this, {\n      type: alignmentCommand,\n      [alignmentKey]: alignment,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      alignmentCommand,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setHorizontalAlignment(\n    horizontalAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setAlignment(\"horizontal\", horizontalAlignment, sendImmediately);\n  }\n  async setVerticalAlignment(\n    verticalAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setAlignment(\"vertical\", verticalAlignment, sendImmediately);\n  }\n  async resetAlignment(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      verticalAlignment: DefaultDisplayContextState.verticalAlignment,\n      horizontalAlignment: DefaultDisplayContextState.horizontalAlignment,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"resetAlignment\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView?.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setRotation(\n    rotation: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ) {\n    rotation = isRadians ? rotation : degToRad(rotation);\n    rotation = normalizeRadians(rotation);\n    isRadians = true;\n    const differences = this.#contextStateHelper.update({\n      rotation,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setRotation\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      rotation,\n      isRadians,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n\n    this.#onContextStateUpdate(differences);\n  }\n  async clearRotation(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      rotation: 0,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"clearRotation\";\n    const dataView = serializeContextCommand(this, { type: commandType });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSegmentStartCap(\n    segmentStartCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ) {\n    assertValidSegmentCap(segmentStartCap);\n    const differences = this.#contextStateHelper.update({\n      segmentStartCap,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setSegmentStartCap\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      segmentStartCap,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentEndCap(\n    segmentEndCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ) {\n    assertValidSegmentCap(segmentEndCap);\n    const differences = this.#contextStateHelper.update({\n      segmentEndCap,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setSegmentEndCap\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      segmentEndCap,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentCap(\n    segmentCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ) {\n    assertValidSegmentCap(segmentCap);\n    const differences = this.#contextStateHelper.update({\n      segmentStartCap: segmentCap,\n      segmentEndCap: segmentCap,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setSegmentCap\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      segmentCap,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSegmentStartRadius(\n    segmentStartRadius: number,\n    sendImmediately?: boolean\n  ) {\n    const differences = this.#contextStateHelper.update({\n      segmentStartRadius,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setSegmentStartRadius\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      segmentStartRadius,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentEndRadius(\n    segmentEndRadius: number,\n    sendImmediately?: boolean\n  ) {\n    const differences = this.#contextStateHelper.update({\n      segmentEndRadius,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setSegmentEndRadius\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      segmentEndRadius,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentRadius(segmentRadius: number, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      segmentStartRadius: segmentRadius,\n      segmentEndRadius: segmentRadius,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setSegmentRadius\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      segmentRadius,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setCrop(\n    cropDirection: DisplayCropDirection,\n    crop: number,\n    sendImmediately?: boolean\n  ) {\n    _console.assertEnumWithError(cropDirection, DisplayCropDirections);\n    crop = Math.max(0, crop);\n    const cropCommand = DisplayCropDirectionToCommandType[cropDirection];\n    const cropKey = DisplayCropDirectionToStateKey[cropDirection];\n    const differences = this.#contextStateHelper.update({\n      [cropKey]: crop,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    // @ts-ignore\n    const dataView = serializeContextCommand(this, {\n      type: cropCommand,\n      [cropKey]: crop,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      cropCommand,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setCropTop(cropTop: number, sendImmediately?: boolean) {\n    await this.setCrop(\"top\", cropTop, sendImmediately);\n  }\n  async setCropRight(cropRight: number, sendImmediately?: boolean) {\n    await this.setCrop(\"right\", cropRight, sendImmediately);\n  }\n  async setCropBottom(cropBottom: number, sendImmediately?: boolean) {\n    await this.setCrop(\"bottom\", cropBottom, sendImmediately);\n  }\n  async setCropLeft(cropLeft: number, sendImmediately?: boolean) {\n    await this.setCrop(\"left\", cropLeft, sendImmediately);\n  }\n  async clearCrop(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      cropTop: 0,\n      cropRight: 0,\n      cropBottom: 0,\n      cropLeft: 0,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"clearCrop\";\n    const dataView = serializeContextCommand(this, { type: commandType });\n    await this.#sendContextCommand(\n      commandType,\n      dataView?.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setRotationCrop(\n    cropDirection: DisplayCropDirection,\n    crop: number,\n    sendImmediately?: boolean\n  ) {\n    _console.assertEnumWithError(cropDirection, DisplayCropDirections);\n    const cropCommand =\n      DisplayRotationCropDirectionToCommandType[cropDirection];\n    const cropKey = DisplayRotationCropDirectionToStateKey[cropDirection];\n    const differences = this.#contextStateHelper.update({\n      [cropKey]: crop,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    // @ts-ignore\n    const dataView = serializeContextCommand(this, {\n      type: cropCommand,\n      [cropKey]: crop,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      cropCommand,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setRotationCropTop(rotationCropTop: number, sendImmediately?: boolean) {\n    await this.setRotationCrop(\"top\", rotationCropTop, sendImmediately);\n  }\n  async setRotationCropRight(\n    rotationCropRight: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setRotationCrop(\"right\", rotationCropRight, sendImmediately);\n  }\n  async setRotationCropBottom(\n    rotationCropBottom: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setRotationCrop(\"bottom\", rotationCropBottom, sendImmediately);\n  }\n  async setRotationCropLeft(\n    rotationCropLeft: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setRotationCrop(\"left\", rotationCropLeft, sendImmediately);\n  }\n  async clearRotationCrop(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      rotationCropTop: 0,\n      rotationCropRight: 0,\n      rotationCropBottom: 0,\n      rotationCropLeft: 0,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"clearRotationCrop\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n    });\n    await this.#sendContextCommand(\n      commandType,\n      dataView?.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async selectBitmapColor(\n    bitmapColorIndex: number,\n    colorIndex: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidColorIndex(bitmapColorIndex);\n    this.assertValidColorIndex(colorIndex);\n    const bitmapColorIndices = this.contextState.bitmapColorIndices.slice();\n    bitmapColorIndices[bitmapColorIndex] = colorIndex;\n    const differences = this.#contextStateHelper.update({\n      bitmapColorIndices,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"selectBitmapColor\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      bitmapColorIndex,\n      colorIndex,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  get bitmapColorIndices() {\n    return this.contextState.bitmapColorIndices;\n  }\n  get bitmapColors() {\n    return this.bitmapColorIndices.map((colorIndex) => this.colors[colorIndex]);\n  }\n  async selectBitmapColors(\n    bitmapColorPairs: DisplayBitmapColorPair[],\n    sendImmediately?: boolean\n  ) {\n    _console.assertRangeWithError(\n      \"bitmapColors\",\n      bitmapColorPairs.length,\n      1,\n      this.numberOfColors\n    );\n    const bitmapColorIndices = this.contextState.bitmapColorIndices.slice();\n    bitmapColorPairs.forEach(({ bitmapColorIndex, colorIndex }) => {\n      this.assertValidColorIndex(bitmapColorIndex);\n      this.assertValidColorIndex(colorIndex);\n      bitmapColorIndices[bitmapColorIndex] = colorIndex;\n    });\n\n    const differences = this.#contextStateHelper.update({\n      bitmapColorIndices,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"selectBitmapColors\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      bitmapColorPairs,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setBitmapColor(\n    bitmapColorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ) {\n    return this.setColor(\n      this.bitmapColorIndices[bitmapColorIndex],\n      color,\n      sendImmediately\n    );\n  }\n  async setBitmapColorOpacity(\n    bitmapColorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ) {\n    return this.setColorOpacity(\n      this.bitmapColorIndices[bitmapColorIndex],\n      opacity,\n      sendImmediately\n    );\n  }\n  async setBitmapScaleDirection(\n    direction: DisplayScaleDirection,\n    bitmapScale: number,\n    sendImmediately?: boolean\n  ) {\n    bitmapScale = clamp(bitmapScale, minDisplayScale, maxDisplayScale);\n    bitmapScale = roundScale(bitmapScale);\n    const commandType = DisplayBitmapScaleDirectionToCommandType[direction];\n    _console.log({ [commandType]: bitmapScale });\n    const newState: PartialDisplayContextState = {};\n    let command: DisplayContextCommand;\n    switch (direction) {\n      case \"all\":\n        newState.bitmapScaleX = bitmapScale;\n        newState.bitmapScaleY = bitmapScale;\n        command = { type: \"setBitmapScale\", bitmapScale };\n        break;\n      case \"x\":\n        newState.bitmapScaleX = bitmapScale;\n        command = { type: \"setBitmapScaleX\", bitmapScaleX: bitmapScale };\n        break;\n      case \"y\":\n        newState.bitmapScaleY = bitmapScale;\n        command = { type: \"setBitmapScaleY\", bitmapScaleY: bitmapScale };\n        break;\n    }\n    const differences = this.#contextStateHelper.update(newState);\n    if (differences.length == 0) {\n      return;\n    }\n    const dataView = serializeContextCommand(this, command);\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n\n    this.#onContextStateUpdate(differences);\n  }\n  async setBitmapScaleX(bitmapScaleX: number, sendImmediately?: boolean) {\n    return this.setBitmapScaleDirection(\"x\", bitmapScaleX, sendImmediately);\n  }\n  async setBitmapScaleY(bitmapScaleY: number, sendImmediately?: boolean) {\n    return this.setBitmapScaleDirection(\"y\", bitmapScaleY, sendImmediately);\n  }\n  async setBitmapScale(bitmapScale: number, sendImmediately?: boolean) {\n    return this.setBitmapScaleDirection(\"all\", bitmapScale, sendImmediately);\n  }\n  async resetBitmapScale(sendImmediately?: boolean) {\n    //return this.setBitmapScaleDirection(\"all\", 1, sendImmediately);\n\n    const differences = this.#contextStateHelper.update({\n      bitmapScaleX: 1,\n      bitmapScaleY: 1,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"resetBitmapScale\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n    });\n    await this.#sendContextCommand(\n      commandType,\n      dataView?.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async selectSpriteColor(\n    spriteColorIndex: number,\n    colorIndex: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidColorIndex(spriteColorIndex);\n    this.assertValidColorIndex(colorIndex);\n    const spriteColorIndices = this.contextState.spriteColorIndices.slice();\n    spriteColorIndices[spriteColorIndex] = colorIndex;\n    const differences = this.#contextStateHelper.update({\n      spriteColorIndices,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"selectSpriteColor\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      spriteColorIndex,\n      colorIndex,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  get spriteColorIndices() {\n    return this.contextState.spriteColorIndices;\n  }\n  get spriteColors() {\n    return this.spriteColorIndices.map((colorIndex) => this.colors[colorIndex]);\n  }\n  async selectSpriteColors(\n    spriteColorPairs: DisplaySpriteColorPair[],\n    sendImmediately?: boolean\n  ) {\n    _console.assertRangeWithError(\n      \"spriteColors\",\n      spriteColorPairs.length,\n      1,\n      this.numberOfColors\n    );\n    const spriteColorIndices = this.contextState.spriteColorIndices.slice();\n    spriteColorPairs.forEach(({ spriteColorIndex, colorIndex }) => {\n      this.assertValidColorIndex(spriteColorIndex);\n      this.assertValidColorIndex(colorIndex);\n      spriteColorIndices[spriteColorIndex] = colorIndex;\n    });\n\n    const differences = this.#contextStateHelper.update({\n      spriteColorIndices,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"selectSpriteColors\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      spriteColorPairs,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpriteColor(\n    spriteColorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ) {\n    return this.setColor(\n      this.spriteColorIndices[spriteColorIndex],\n      color,\n      sendImmediately\n    );\n  }\n  async setSpriteColorOpacity(\n    spriteColorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ) {\n    return this.setColorOpacity(\n      this.spriteColorIndices[spriteColorIndex],\n      opacity,\n      sendImmediately\n    );\n  }\n\n  async resetSpriteColors(sendImmediately?: boolean) {\n    const spriteColorIndices = new Array(this.numberOfColors).fill(0);\n    const differences = this.#contextStateHelper.update({\n      spriteColorIndices,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"resetSpriteColors\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n    });\n    await this.#sendContextCommand(\n      commandType,\n      dataView?.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpriteScaleDirection(\n    direction: DisplayScaleDirection,\n    spriteScale: number,\n    sendImmediately?: boolean\n  ) {\n    spriteScale = clamp(spriteScale, minDisplayScale, maxDisplayScale);\n    spriteScale = roundScale(spriteScale);\n    const commandType = DisplaySpriteScaleDirectionToCommandType[direction];\n    _console.log({ [commandType]: spriteScale });\n    const newState: PartialDisplayContextState = {};\n    let command: DisplayContextCommand;\n    switch (direction) {\n      case \"all\":\n        newState.spriteScaleX = spriteScale;\n        newState.spriteScaleY = spriteScale;\n        command = { type: \"setSpriteScale\", spriteScale };\n        break;\n      case \"x\":\n        newState.spriteScaleX = spriteScale;\n        command = { type: \"setSpriteScaleX\", spriteScaleX: spriteScale };\n        break;\n      case \"y\":\n        newState.spriteScaleY = spriteScale;\n        command = { type: \"setSpriteScaleY\", spriteScaleY: spriteScale };\n        break;\n    }\n    const differences = this.#contextStateHelper.update(newState);\n    if (differences.length == 0) {\n      return;\n    }\n    const dataView = serializeContextCommand(this, command);\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpriteScaleX(spriteScaleX: number, sendImmediately?: boolean) {\n    return this.setSpriteScaleDirection(\"x\", spriteScaleX, sendImmediately);\n  }\n  async setSpriteScaleY(spriteScaleY: number, sendImmediately?: boolean) {\n    return this.setSpriteScaleDirection(\"y\", spriteScaleY, sendImmediately);\n  }\n  async setSpriteScale(spriteScale: number, sendImmediately?: boolean) {\n    return this.setSpriteScaleDirection(\"all\", spriteScale, sendImmediately);\n  }\n  async resetSpriteScale(sendImmediately?: boolean) {\n    //return this.setSpriteScaleDirection(\"all\", 1, sendImmediately);\n\n    const differences = this.#contextStateHelper.update({\n      spriteScaleX: 1,\n      spriteScaleY: 1,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"resetSpriteScale\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n    });\n    await this.#sendContextCommand(\n      commandType,\n      dataView?.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpritesLineHeight(\n    spritesLineHeight: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidLineWidth(spritesLineHeight);\n    const differences = this.#contextStateHelper.update({\n      spritesLineHeight,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const commandType: DisplayContextCommandType = \"setSpritesLineHeight\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      spritesLineHeight,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpritesDirectionGeneric(\n    direction: DisplayDirection,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ) {\n    assertValidDirection(direction);\n    const stateKey: DisplayContextStateKey = isOrthogonal\n      ? \"spritesLineDirection\"\n      : \"spritesDirection\";\n    const commandType: DisplayContextCommandType = isOrthogonal\n      ? \"setSpritesLineDirection\"\n      : \"setSpritesDirection\";\n\n    const differences = this.#contextStateHelper.update({\n      [stateKey]: direction,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    // @ts-expect-error\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      [stateKey]: direction,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpritesDirection(\n    spritesDirection: DisplayDirection,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesDirectionGeneric(\n      spritesDirection,\n      false,\n      sendImmediately\n    );\n  }\n  async setSpritesLineDirection(\n    spritesLineDirection: DisplayDirection,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesDirectionGeneric(\n      spritesLineDirection,\n      true,\n      sendImmediately\n    );\n  }\n\n  async setSpritesSpacingGeneric(\n    spacing: number,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ) {\n    const stateKey: DisplayContextStateKey = isOrthogonal\n      ? \"spritesLineSpacing\"\n      : \"spritesSpacing\";\n    const commandType: DisplayContextCommandType = isOrthogonal\n      ? \"setSpritesLineSpacing\"\n      : \"setSpritesSpacing\";\n\n    const differences = this.#contextStateHelper.update({\n      [stateKey]: spacing,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    // @ts-expect-error\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      [stateKey]: spacing,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpritesSpacing(spritesSpacing: number, sendImmediately?: boolean) {\n    await this.setSpritesSpacingGeneric(spritesSpacing, false, sendImmediately);\n  }\n  async setSpritesLineSpacing(\n    spritesSpacing: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesSpacingGeneric(spritesSpacing, true, sendImmediately);\n  }\n\n  async setSpritesAlignmentGeneric(\n    alignment: DisplayAlignment,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ) {\n    assertValidAlignment(alignment);\n    const stateKey: DisplayContextStateKey = isOrthogonal\n      ? \"spritesLineAlignment\"\n      : \"spritesAlignment\";\n    const commandType: DisplayContextCommandType = isOrthogonal\n      ? \"setSpritesLineAlignment\"\n      : \"setSpritesAlignment\";\n    const differences = this.#contextStateHelper.update({\n      [stateKey]: alignment,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    // @ts-expect-error\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      [stateKey]: alignment,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpritesAlignment(\n    spritesAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesAlignmentGeneric(\n      spritesAlignment,\n      false,\n      sendImmediately\n    );\n  }\n  async setSpritesLineAlignment(\n    spritesLineAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesAlignmentGeneric(\n      spritesLineAlignment,\n      true,\n      sendImmediately\n    );\n  }\n\n  async clearRect(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"clearRect\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      x,\n      y,\n      width,\n      height,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawRect(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawRect\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      width,\n      height,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawRoundRect(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    borderRadius: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawRoundRect\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      width,\n      height,\n      borderRadius,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawCircle(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawCircle\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      radius,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawEllipse(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawEllipse\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      radiusX,\n      radiusY,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawRegularPolygon(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    numberOfSides: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawRegularPolygon\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      radius,\n      numberOfSides,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawPolygon(points: Vector2[], sendImmediately?: boolean) {\n    _console.assertRangeWithError(\"numberOfPoints\", points.length, 2, 255);\n    const commandType: DisplayContextCommandType = \"drawPolygon\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      points,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  async drawWireframe(wireframe: DisplayWireframe, sendImmediately?: boolean) {\n    wireframe = trimWireframe(wireframe);\n    if (wireframe.points.length == 0) {\n      return;\n    }\n    assertValidWireframe(wireframe);\n    if (this.#contextStateHelper.isSegmentUniform) {\n      const polygon = isWireframePolygon(wireframe);\n      if (polygon) {\n        return this.drawSegments(polygon, sendImmediately);\n      }\n    }\n    const commandType: DisplayContextCommandType = \"drawWireframe\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      wireframe,\n    });\n    if (!dataView) {\n      return;\n    }\n    if (dataView.byteLength > this.#maxCommandDataLength) {\n      _console.error(\n        `wireframe data ${dataView.byteLength} too large (max ${\n          this.#maxCommandDataLength\n        })`\n      );\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  async drawCurve(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    assertValidNumberOfControlPoints(curveType, controlPoints);\n    const commandType: DisplayContextCommandType =\n      curveType == \"cubic\"\n        ? \"drawCubicBezierCurve\"\n        : \"drawQuadraticBezierCurve\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      controlPoints,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawCurves(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    assertValidPathNumberOfControlPoints(curveType, controlPoints);\n    const commandType: DisplayContextCommandType =\n      curveType == \"cubic\"\n        ? \"drawCubicBezierCurves\"\n        : \"drawQuadraticBezierCurves\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      controlPoints,\n    });\n    if (!dataView) {\n      return;\n    }\n    if (dataView.byteLength > this.#maxCommandDataLength) {\n      _console.error(\n        `curve data ${dataView.byteLength} too large (max ${\n          this.#maxCommandDataLength\n        })`\n      );\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  async drawQuadraticBezierCurve(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurve(\"quadratic\", controlPoints, sendImmediately);\n  }\n  async drawQuadraticBezierCurves(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurves(\"quadratic\", controlPoints, sendImmediately);\n  }\n\n  async drawCubicBezierCurve(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurve(\"cubic\", controlPoints, sendImmediately);\n  }\n  async drawCubicBezierCurves(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurves(\"cubic\", controlPoints, sendImmediately);\n  }\n\n  async _drawPath(\n    isClosed: boolean,\n    curves: DisplayBezierCurve[],\n    sendImmediately?: boolean\n  ) {\n    assertValidPath(curves);\n\n    const commandType: DisplayContextCommandType = isClosed\n      ? \"drawClosedPath\"\n      : \"drawPath\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      curves,\n    });\n    if (!dataView) {\n      return;\n    }\n    if (dataView.byteLength > this.#maxCommandDataLength) {\n      _console.error(\n        `path data ${dataView.byteLength} too large (max ${\n          this.#maxCommandDataLength\n        })`\n      );\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawPath(curves: DisplayBezierCurve[], sendImmediately?: boolean) {\n    await this._drawPath(false, curves, sendImmediately);\n  }\n  async drawClosedPath(\n    curves: DisplayBezierCurve[],\n    sendImmediately?: boolean\n  ) {\n    await this._drawPath(true, curves, sendImmediately);\n  }\n\n  async drawSegment(\n    startX: number,\n    startY: number,\n    endX: number,\n    endY: number,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawSegment\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      startX,\n      startY,\n      endX,\n      endY,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawSegments(points: Vector2[], sendImmediately?: boolean) {\n    _console.assertRangeWithError(\"numberOfPoints\", points.length, 2, 255);\n    const commandType: DisplayContextCommandType = \"drawSegments\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      points,\n    });\n    if (!dataView) {\n      return;\n    }\n    if (dataView.byteLength > this.#maxCommandDataLength) {\n      const mid = Math.floor(points.length / 2);\n      const firstHalf = points.slice(0, mid + 1);\n      const secondHalf = points.slice(mid);\n      _console.log({ firstHalf, secondHalf });\n      _console.log(\"sending first half\", firstHalf);\n      await this.drawSegments(firstHalf, false);\n      _console.log(\"sending second half\", secondHalf);\n      await this.drawSegments(secondHalf, sendImmediately);\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  async drawArc(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawArc\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      radius,\n      startAngle,\n      angleOffset,\n      isRadians,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async drawArcEllipse(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ) {\n    const commandType: DisplayContextCommandType = \"drawArcEllipse\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      radiusX,\n      radiusY,\n      startAngle,\n      angleOffset,\n      isRadians,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  assertValidNumberOfColors(numberOfColors: number) {\n    _console.assertRangeWithError(\n      \"numberOfColors\",\n      numberOfColors,\n      2,\n      this.numberOfColors\n    );\n  }\n\n  assertValidBitmap(bitmap: DisplayBitmap, checkSize?: boolean) {\n    this.assertValidNumberOfColors(bitmap.numberOfColors);\n    assertValidBitmapPixels(bitmap);\n    if (checkSize) {\n      this.#assertValidBitmapSize(bitmap);\n    }\n  }\n  #assertValidBitmapSize(bitmap: DisplayBitmap) {\n    const pixelDataLength = getBitmapNumberOfBytes(bitmap);\n    _console.assertRangeWithError(\n      \"bitmap.pixels.length\",\n      pixelDataLength,\n      1,\n      this.#maxCommandDataLength - drawBitmapHeaderLength\n    );\n  }\n  async drawBitmap(\n    offsetX: number,\n    offsetY: number,\n    bitmap: DisplayBitmap,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidBitmap(bitmap, true);\n    const commandType: DisplayContextCommandType = \"drawBitmap\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      bitmap,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  async imageToBitmap(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors?: number\n  ) {\n    return imageToBitmap(\n      image,\n      width,\n      height,\n      this.colors,\n      this.bitmapColorIndices,\n      numberOfColors\n    );\n  }\n  async quantizeImage(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors: number\n  ) {\n    return quantizeImage(image, width, height, numberOfColors);\n  }\n  async resizeAndQuantizeImage(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors: number,\n    colors?: string[]\n  ) {\n    return resizeAndQuantizeImage(image, width, height, numberOfColors, colors);\n  }\n\n  // CONTEXT COMMANDS\n\n  async runContextCommand(\n    command: DisplayContextCommand,\n    sendImmediately?: boolean\n  ) {\n    return runDisplayContextCommand(this, command, sendImmediately);\n  }\n  async runContextCommands(\n    commands: DisplayContextCommand[],\n    sendImmediately?: boolean\n  ) {\n    return runDisplayContextCommands(this, commands, sendImmediately);\n  }\n\n  #isReady = true;\n  get isReady() {\n    return this.isAvailable && this.#isReady;\n  }\n  #lastReadyTime = 0;\n  #lastShowRequestTime = 0;\n  #minReadyInterval = 60; // Forced delay due to Frame's fpga timing...\n  #waitBeforeReady = true;\n  async #parseDisplayReady(dataView: DataView) {\n    const now = Date.now();\n    const timeSinceLastDraw = now - this.#lastShowRequestTime;\n    const timeSinceLastReady = now - this.#lastReadyTime;\n    //_console.log(`${timeSinceLastReady}ms since last render`);\n    _console.log(`${timeSinceLastDraw}ms draw time`);\n    if (this.#waitBeforeReady && timeSinceLastReady < this.#minReadyInterval) {\n      const timeToWait = this.#minReadyInterval - timeSinceLastReady;\n      _console.log(`waiting ${timeToWait}ms`);\n      await wait(timeToWait);\n    }\n    this.#isReady = true;\n    this.#lastReadyTime = Date.now();\n    this.#dispatchEvent(\"displayReady\", {});\n  }\n\n  // SPRITE SHEET\n  #spriteSheets: Record<string, DisplaySpriteSheet> = {};\n  #spriteSheetIndices: Record<string, number> = {};\n  get spriteSheets() {\n    return this.#spriteSheets;\n  }\n  get spriteSheetIndices() {\n    return this.#spriteSheetIndices;\n  }\n  async #setSpriteSheetName(\n    spriteSheetName: string,\n    sendImmediately?: boolean\n  ) {\n    if (typeof spriteSheetName == \"number\") {\n      // @ts-expect-error\n      spriteSheetName = spriteSheetName.toString();\n    }\n    _console.assertTypeWithError(spriteSheetName, \"string\");\n    _console.assertRangeWithError(\n      \"newName\",\n      spriteSheetName.length,\n      MinSpriteSheetNameLength,\n      MaxSpriteSheetNameLength\n    );\n    const setSpriteSheetNameData = textEncoder.encode(spriteSheetName);\n    _console.log({ setSpriteSheetNameData });\n\n    const promise = this.waitForEvent(\"getSpriteSheetName\");\n    this.sendMessage(\n      [{ type: \"setSpriteSheetName\", data: setSpriteSheetNameData.buffer }],\n      sendImmediately\n    );\n    await promise;\n  }\n  #pendingSpriteSheet?: DisplaySpriteSheet;\n  get pendingSpriteSheet() {\n    return this.#pendingSpriteSheet;\n  }\n  #pendingSpriteSheetName?: string;\n  get pendingSpriteSheetName() {\n    return this.#pendingSpriteSheetName;\n  }\n  #updateSpriteSheetName(updatedSpriteSheetName: string) {\n    _console.assertTypeWithError(updatedSpriteSheetName, \"string\");\n    this.#pendingSpriteSheetName = updatedSpriteSheetName;\n    _console.log({ updatedSpriteSheetName: this.#pendingSpriteSheetName });\n    this.#dispatchEvent(\"getSpriteSheetName\", {\n      spriteSheetName: this.#pendingSpriteSheetName,\n    });\n  }\n  sendFile!: SendFileCallback;\n  serializeSpriteSheet(spriteSheet: DisplaySpriteSheet): ArrayBuffer {\n    return serializeSpriteSheet(this, spriteSheet);\n  }\n  async uploadSpriteSheet(spriteSheet: DisplaySpriteSheet) {\n    if (spriteSheet.sprites.length == 0) {\n      _console.log(\"no sprites in spriteSheet\");\n      return;\n    }\n    if (this.#pendingSpriteSheet) {\n      await this.waitForEvent(\"displaySpriteSheetUploadComplete\");\n      await this.uploadSpriteSheet(spriteSheet);\n      return;\n    }\n    spriteSheet = structuredClone(spriteSheet);\n    this.#pendingSpriteSheet = spriteSheet;\n    const buffer = this.serializeSpriteSheet(this.#pendingSpriteSheet);\n    await this.#setSpriteSheetName(this.#pendingSpriteSheet.name);\n    const promise = this.waitForEvent(\"displaySpriteSheetUploadComplete\");\n    this.sendFile(\"spriteSheet\", buffer, true);\n    await promise;\n  }\n  async uploadSpriteSheets(spriteSheets: DisplaySpriteSheet[]) {\n    for (const spriteSheet of spriteSheets) {\n      await this.uploadSpriteSheet(spriteSheet);\n    }\n  }\n  assertLoadedSpriteSheet(spriteSheetName: string) {\n    assertLoadedSpriteSheet(this, spriteSheetName);\n  }\n  assertSelectedSpriteSheet(spriteSheetName: string) {\n    assertSelectedSpriteSheet(this, spriteSheetName);\n  }\n  assertAnySelectedSpriteSheet() {\n    assertAnySelectedSpriteSheet(this);\n  }\n  assertSprite(spriteName: string) {\n    return assertSprite(this, spriteName);\n  }\n  getSprite(spriteName: string): DisplaySprite | undefined {\n    return getSprite(this, spriteName);\n  }\n  getSpriteSheetPalette(\n    paletteName: string\n  ): DisplaySpriteSheetPalette | undefined {\n    return getSpriteSheetPalette(this, paletteName);\n  }\n  getSpriteSheetPaletteSwap(\n    paletteSwapName: string\n  ): DisplaySpriteSheetPaletteSwap | undefined {\n    return getSpriteSheetPaletteSwap(this, paletteSwapName);\n  }\n  getSpritePaletteSwap(\n    spriteName: string,\n    paletteSwapName: string\n  ): DisplaySpritePaletteSwap | undefined {\n    return getSpritePaletteSwap(this, spriteName, paletteSwapName);\n  }\n\n  get selectedSpriteSheet() {\n    if (this.contextState.spriteSheetName) {\n      return this.#spriteSheets[this.contextState.spriteSheetName];\n    }\n  }\n  get selectedSpriteSheetName() {\n    return this.selectedSpriteSheet?.name;\n  }\n  async selectSpriteSheet(spriteSheetName: string, sendImmediately?: boolean) {\n    this.assertLoadedSpriteSheet(spriteSheetName);\n    const differences = this.#contextStateHelper.update({\n      spriteSheetName,\n    });\n    if (differences.length == 0) {\n      return;\n    }\n    const spriteSheetIndex = this.spriteSheetIndices[spriteSheetName];\n    //_console.log(\"selecting\", { spriteSheetIndex, spriteSheetName });\n    const commandType: DisplayContextCommandType = \"selectSpriteSheet\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      spriteSheetIndex,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n    this.#onContextStateUpdate(differences);\n  }\n  async drawSprite(\n    offsetX: number,\n    offsetY: number,\n    spriteName: string,\n    sendImmediately?: boolean\n  ) {\n    _console.assertWithError(\n      this.selectedSpriteSheet,\n      \"no spriteSheet selected\"\n    );\n    _console.log(\n      `drawing sprite \"${spriteName}\" in selectedSpriteSheet`,\n      this.selectedSpriteSheet\n    );\n    let spriteIndex = this.selectedSpriteSheet!.sprites.findIndex(\n      (sprite) => sprite.name == spriteName\n    );\n    _console.assertWithError(\n      spriteIndex != -1,\n      `sprite \"${spriteName}\" not found in spriteSheet`\n    );\n    spriteIndex = spriteIndex!;\n    const commandType: DisplayContextCommandType = \"drawSprite\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      spriteIndex,\n      use2Bytes: this.selectedSpriteSheet!.sprites.length > 255,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  async drawSprites(\n    offsetX: number,\n    offsetY: number,\n    spriteLines: DisplaySpriteLines,\n    sendImmediately?: boolean\n  ) {\n    _console.assertWithError(\n      this.contextState.spritesLineHeight > 0,\n      `spritesLineHeight must be >0`\n    );\n    const spriteSerializedLines: DisplaySpriteSerializedLines = [];\n    spriteLines.forEach((spriteLine) => {\n      const serializedLine: DisplaySpriteSerializedLine = [];\n      spriteLine.forEach((spriteSubLine) => {\n        this.assertLoadedSpriteSheet(spriteSubLine.spriteSheetName);\n        const spriteSheet = this.spriteSheets[spriteSubLine.spriteSheetName];\n        const spriteSheetIndex = this.spriteSheetIndices[spriteSheet.name];\n        const serializedSubLine: DisplaySpriteSerializedSubLine = {\n          spriteSheetIndex,\n          spriteIndices: [],\n          use2Bytes: spriteSheet.sprites.length > 255,\n        };\n        spriteSubLine.spriteNames.forEach((spriteName) => {\n          let spriteIndex = spriteSheet.sprites.findIndex(\n            (sprite) => sprite.name == spriteName\n          );\n          _console.assertWithError(\n            spriteIndex != -1,\n            `sprite \"${spriteName}\" not found`\n          );\n          spriteIndex = spriteIndex!;\n          serializedSubLine.spriteIndices.push(spriteIndex);\n        });\n        serializedLine.push(serializedSubLine);\n      });\n      spriteSerializedLines.push(serializedLine);\n    });\n    _console.log(\"spriteSerializedLines\", spriteSerializedLines);\n    const commandType: DisplayContextCommandType = \"drawSprites\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      spriteSerializedLines: spriteSerializedLines,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n\n  async drawSpritesString(\n    offsetX: number,\n    offsetY: number,\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[],\n    sendImmediately?: boolean\n  ) {\n    const spriteLines = this.stringToSpriteLines(\n      string,\n      requireAll,\n      maxLineBreadth,\n      separators\n    );\n    await this.drawSprites(offsetX, offsetY, spriteLines, sendImmediately);\n  }\n  stringToSpriteLines(\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[]\n  ): DisplaySpriteLines {\n    return stringToSpriteLines(\n      string,\n      this.spriteSheets,\n      this.contextState,\n      requireAll,\n      maxLineBreadth,\n      separators\n    );\n  }\n  stringToSpriteLinesMetrics(\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[]\n  ) {\n    return stringToSpriteLinesMetrics(\n      string,\n      this.spriteSheets,\n      this.contextState,\n      requireAll,\n      maxLineBreadth,\n      separators\n    );\n  }\n\n  async drawSpriteFromSpriteSheet(\n    offsetX: number,\n    offsetY: number,\n    spriteName: string,\n    spriteSheet: DisplaySpriteSheet,\n    paletteName?: string,\n    sendImmediately?: boolean\n  ) {\n    return drawSpriteFromSpriteSheet(\n      this,\n      offsetX,\n      offsetY,\n      spriteName,\n      spriteSheet,\n      paletteName,\n      sendImmediately\n    );\n  }\n\n  #parseSpriteSheetIndex(dataView: DataView) {\n    const spriteSheetIndex = dataView.getUint8(0);\n    _console.log({\n      pendingSpriteSheet: this.#pendingSpriteSheet,\n      spriteSheetName: this.#pendingSpriteSheetName,\n      spriteSheetIndex,\n    });\n    if (this.isServerSide) {\n      return;\n    }\n    _console.assertWithError(\n      this.#pendingSpriteSheetName != undefined,\n      \"expected spriteSheetName when receiving spriteSheetIndex\"\n    );\n    _console.assertWithError(\n      this.#pendingSpriteSheet != undefined,\n      \"expected pendingSpriteSheet when receiving spriteSheetIndex\"\n    );\n    this.#spriteSheets[this.#pendingSpriteSheetName!] =\n      this.#pendingSpriteSheet!;\n    this.#spriteSheetIndices[this.#pendingSpriteSheetName!] = spriteSheetIndex;\n    _console.log(\n      `finished uploading \"${this.#pendingSpriteSheetName!}\" spriteSheet`\n    );\n    this.#dispatchEvent(\"displaySpriteSheetUploadComplete\", {\n      spriteSheetName: this.#pendingSpriteSheetName!,\n      spriteSheet: this.#pendingSpriteSheet!,\n    });\n    this.#pendingSpriteSheet = undefined;\n  }\n\n  // MESSAGE\n  parseMessage(messageType: DisplayMessageType, dataView: DataView) {\n    _console.log({ messageType, dataView });\n\n    switch (messageType) {\n      case \"isDisplayAvailable\":\n        this.#parseIsDisplayAvailable(dataView);\n        break;\n      case \"displayStatus\":\n        this.#parseDisplayStatus(dataView);\n        break;\n      case \"displayInformation\":\n        this.#parseDisplayInformation(dataView);\n        break;\n      case \"getDisplayBrightness\":\n      case \"setDisplayBrightness\":\n        this.#parseDisplayBrightness(dataView);\n        break;\n      case \"displayReady\":\n        this.#parseDisplayReady(dataView);\n        break;\n      case \"getSpriteSheetName\":\n      case \"setSpriteSheetName\":\n        const spriteSheetName = textDecoder.decode(\n          dataView.buffer as ArrayBuffer\n        );\n        _console.log({ spriteSheetName });\n        this.#updateSpriteSheetName(spriteSheetName);\n        break;\n      case \"spriteSheetIndex\":\n        this.#parseSpriteSheetIndex(dataView);\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  // SPRITE SHEET PALETTES\n\n  assertSpriteSheetPalette(paletteName: string) {\n    assertSpriteSheetPalette(this, paletteName);\n  }\n  assertSpriteSheetPaletteSwap(paletteSwapName: string) {\n    assertSpriteSheetPaletteSwap(this, paletteSwapName);\n  }\n  assertSpritePaletteSwap(spriteName: string, paletteSwapName: string) {\n    assertSpritePaletteSwap(this, spriteName, paletteSwapName);\n  }\n  async selectSpriteSheetPalette(\n    paletteName: string,\n    offset?: number,\n    indicesOnly?: boolean,\n    sendImmediately?: boolean\n  ) {\n    await selectSpriteSheetPalette(\n      this,\n      paletteName,\n      offset,\n      indicesOnly,\n      sendImmediately\n    );\n  }\n  async selectSpriteSheetPaletteSwap(\n    paletteSwapName: string,\n    offset?: number,\n    sendImmediately?: boolean\n  ) {\n    await selectSpriteSheetPaletteSwap(\n      this,\n      paletteSwapName,\n      offset,\n      sendImmediately\n    );\n  }\n  async selectSpritePaletteSwap(\n    spriteName: string,\n    paletteSwapName: string,\n    offset?: number,\n    sendImmediately?: boolean\n  ) {\n    await selectSpritePaletteSwap(\n      this,\n      spriteName,\n      paletteSwapName,\n      offset,\n      sendImmediately\n    );\n  }\n\n  #isDrawingBlankSprite = false;\n  async startSprite(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ) {\n    _console.assertWithError(\n      !this.#isDrawingBlankSprite,\n      `already drawing blank sprite`\n    );\n    this.#isDrawingBlankSprite = true;\n    this.#saveContext(sendImmediately);\n    this.#contextStateHelper.reset();\n    this.contextState.bitmapColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n    this.contextState.spriteColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n\n    const commandType: DisplayContextCommandType = \"startSprite\";\n    const dataView = serializeContextCommand(this, {\n      type: commandType,\n      offsetX,\n      offsetY,\n      width,\n      height,\n    });\n    if (!dataView) {\n      return;\n    }\n    await this.#sendContextCommand(\n      commandType,\n      dataView.buffer,\n      sendImmediately\n    );\n  }\n  async endSprite(sendImmediately?: boolean) {\n    this.#restoreContext(sendImmediately);\n\n    _console.assertWithError(\n      this.#isDrawingBlankSprite,\n      `not drawing blank sprite`\n    );\n    this.#isDrawingBlankSprite = false;\n\n    // _console.log(\"endSprite\");\n    await this.#sendContextCommand(\"endSprite\", undefined, sendImmediately);\n  }\n\n  reset() {\n    _console.log(\"clearing displayManager\");\n    // @ts-ignore\n    this.#displayStatus = undefined;\n    this.#isAvailable = false;\n    this.#displayInformation = undefined;\n    // @ts-ignore\n    this.#brightness = undefined;\n    this.#contextCommandBuffers = [];\n    this.#isAvailable = false;\n\n    this.#contextStateHelper.reset();\n    this.#colors.length = 0;\n    this.#opacities.length = 0;\n\n    this.#isReady = true;\n    this.#pendingSpriteSheet = undefined;\n    this.#pendingSpriteSheetName = undefined;\n\n    this.isServerSide = false;\n\n    this.#isDrawingBlankSprite = false;\n\n    Object.keys(this.#spriteSheetIndices).forEach(\n      (spriteSheetName) => delete this.#spriteSheetIndices[spriteSheetName]\n    );\n    Object.keys(this.#spriteSheets).forEach(\n      (spriteSheetName) => delete this.#spriteSheets[spriteSheetName]\n    );\n  }\n\n  // MTU\n  #mtu!: number;\n  get mtu() {\n    return this.#mtu;\n  }\n  set mtu(newMtu: number) {\n    this.#mtu = newMtu;\n  }\n\n  // SERVER SIDE\n  #isServerSide = false;\n  get isServerSide() {\n    return this.#isServerSide;\n  }\n  set isServerSide(newIsServerSide) {\n    if (this.#isServerSide == newIsServerSide) {\n      //_console.log(\"redundant isServerSide assignment\");\n      return;\n    }\n    this.#isServerSide = newIsServerSide;\n    _console.log({ isServerSide: this.isServerSide });\n  }\n}\n\nexport default DisplayManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport { Timer } from \"../utils/Timer.ts\";\nimport { FileTransferMessageTypes } from \"../FileTransferManager.ts\";\nimport { TfliteMessageTypes } from \"../TfliteManager.ts\";\nimport { concatenateArrayBuffers } from \"../utils/ArrayBufferUtils.ts\";\nimport { parseMessage } from \"../utils/ParseUtils.ts\";\nimport { DeviceInformationTypes } from \"../DeviceInformationManager.ts\";\nimport { InformationMessageTypes } from \"../InformationManager.ts\";\nimport { VibrationMessageTypes } from \"../vibration/VibrationManager.ts\";\nimport { SensorConfigurationMessageTypes } from \"../sensor/SensorConfigurationManager.ts\";\nimport { SensorDataMessageTypes } from \"../sensor/SensorDataManager.ts\";\nimport { WifiMessageTypes } from \"../WifiManager.ts\";\nimport { CameraMessageTypes } from \"../CameraManager.ts\";\nimport { MicrophoneMessageTypes } from \"../MicrophoneManager.ts\";\nimport { DisplayMessageTypes } from \"../DisplayManager.ts\";\n\nconst _console = createConsole(\"BaseConnectionManager\", { log: false });\n\nexport const ConnectionTypes = [\n  \"webBluetooth\",\n  \"noble\",\n  \"client\",\n  \"webSocket\",\n  \"udp\",\n] as const;\nexport type ConnectionType = (typeof ConnectionTypes)[number];\n\nexport const ClientConnectionTypes = [\"noble\", \"webSocket\", \"udp\"] as const;\nexport type ClientConnectionType = (typeof ClientConnectionTypes)[number];\n\ninterface BaseConnectOptions {\n  type: \"client\" | \"webBluetooth\" | \"webSocket\" | \"udp\";\n}\nexport interface WebBluetoothConnectOptions extends BaseConnectOptions {\n  type: \"webBluetooth\";\n}\ninterface BaseWifiConnectOptions extends BaseConnectOptions {\n  ipAddress: string;\n}\nexport interface ClientConnectOptions extends BaseConnectOptions {\n  type: \"client\";\n  subType?: \"noble\" | \"webSocket\" | \"udp\";\n}\nexport interface WebSocketConnectOptions extends BaseWifiConnectOptions {\n  type: \"webSocket\";\n  isWifiSecure?: boolean;\n}\nexport interface UDPConnectOptions extends BaseWifiConnectOptions {\n  type: \"udp\";\n  //sendPort: number;\n  receivePort?: number;\n}\nexport type ConnectOptions =\n  | WebBluetoothConnectOptions\n  | WebSocketConnectOptions\n  | UDPConnectOptions\n  | ClientConnectOptions;\n\nexport const ConnectionStatuses = [\n  \"notConnected\",\n  \"connecting\",\n  \"connected\",\n  \"disconnecting\",\n] as const;\nexport type ConnectionStatus = (typeof ConnectionStatuses)[number];\n\nexport const ConnectionEventTypes = [\n  ...ConnectionStatuses,\n  \"connectionStatus\",\n  \"isConnected\",\n] as const;\nexport type ConnectionEventType = (typeof ConnectionEventTypes)[number];\n\nexport interface ConnectionStatusEventMessages {\n  notConnected: any;\n  connecting: any;\n  connected: any;\n  disconnecting: any;\n  connectionStatus: { connectionStatus: ConnectionStatus };\n  isConnected: { isConnected: boolean };\n}\n\nexport interface TxMessage {\n  type: TxRxMessageType;\n  data?: ArrayBuffer;\n}\n\nexport const TxRxMessageTypes = [\n  ...InformationMessageTypes,\n  ...SensorConfigurationMessageTypes,\n  ...SensorDataMessageTypes,\n  ...VibrationMessageTypes,\n  ...FileTransferMessageTypes,\n  ...TfliteMessageTypes,\n  ...WifiMessageTypes,\n  ...CameraMessageTypes,\n  ...MicrophoneMessageTypes,\n  ...DisplayMessageTypes,\n] as const;\nexport type TxRxMessageType = (typeof TxRxMessageTypes)[number];\n\nexport const SMPMessageTypes = [\"smp\"] as const;\nexport type SMPMessageType = (typeof SMPMessageTypes)[number];\n\nexport const BatteryLevelMessageTypes = [\"batteryLevel\"] as const;\nexport type BatteryLevelMessageType = (typeof BatteryLevelMessageTypes)[number];\n\nexport const MetaConnectionMessageTypes = [\"rx\", \"tx\"] as const;\nexport type MetaConnectionMessageType =\n  (typeof MetaConnectionMessageTypes)[number];\n\nexport const ConnectionMessageTypes = [\n  ...BatteryLevelMessageTypes,\n  ...DeviceInformationTypes,\n  ...MetaConnectionMessageTypes,\n  ...TxRxMessageTypes,\n  ...SMPMessageTypes,\n] as const;\nexport type ConnectionMessageType = (typeof ConnectionMessageTypes)[number];\n\nexport type ConnectionStatusCallback = (status: ConnectionStatus) => void;\nexport type MessageReceivedCallback = (\n  messageType: ConnectionMessageType,\n  dataView: DataView\n) => void;\nexport type MessagesReceivedCallback = () => void;\n\nabstract class BaseConnectionManager {\n  static #AssertValidTxRxMessageType(messageType: TxRxMessageType) {\n    _console.assertEnumWithError(messageType, TxRxMessageTypes);\n  }\n\n  abstract get bluetoothId(): string;\n\n  // CALLBACKS\n  onStatusUpdated?: ConnectionStatusCallback;\n  onMessageReceived?: MessageReceivedCallback;\n  onMessagesReceived?: MessagesReceivedCallback;\n\n  protected get baseConstructor() {\n    return this.constructor as typeof BaseConnectionManager;\n  }\n  static get isSupported() {\n    return false;\n  }\n  get isSupported() {\n    return this.baseConstructor.isSupported;\n  }\n\n  get canUpdateFirmware() {\n    return false;\n  }\n\n  static type: ConnectionType;\n  get type(): ConnectionType {\n    return this.baseConstructor.type;\n  }\n\n  /** @throws {Error} if not supported */\n  #assertIsSupported() {\n    _console.assertWithError(\n      this.isSupported,\n      `${this.constructor.name} is not supported`\n    );\n  }\n\n  constructor() {\n    this.#assertIsSupported();\n  }\n\n  #status: ConnectionStatus = \"notConnected\";\n  get status() {\n    return this.#status;\n  }\n  protected set status(newConnectionStatus) {\n    _console.assertEnumWithError(newConnectionStatus, ConnectionStatuses);\n    if (this.#status == newConnectionStatus) {\n      _console.log(\n        `tried to assign same connection status \"${newConnectionStatus}\"`\n      );\n      return;\n    }\n    _console.log(`new connection status \"${newConnectionStatus}\"`);\n    this.#status = newConnectionStatus;\n    this.onStatusUpdated!(this.status);\n\n    if (this.isConnected) {\n      this.#timer.start();\n    } else {\n      this.#timer.stop();\n    }\n\n    if (this.#status == \"notConnected\") {\n      this.mtu = this.defaultMtu;\n    }\n  }\n\n  get isConnected() {\n    return this.status == \"connected\";\n  }\n\n  get isAvailable() {\n    return false;\n  }\n\n  /** @throws {Error} if connected */\n  protected assertIsNotConnected() {\n    _console.assertWithError(!this.isConnected, \"device is already connected\");\n  }\n  /** @throws {Error} if connecting */\n  #assertIsNotConnecting() {\n    _console.assertWithError(\n      this.status != \"connecting\",\n      \"device is already connecting\"\n    );\n  }\n  /** @throws {Error} if not connected */\n  protected assertIsConnected() {\n    _console.assertWithError(this.isConnected, \"device is not connected\");\n  }\n  /** @throws {Error} if disconnecting */\n  #assertIsNotDisconnecting() {\n    _console.assertWithError(\n      this.status != \"disconnecting\",\n      \"device is already disconnecting\"\n    );\n  }\n  /** @throws {Error} if not connected or is disconnecting */\n  assertIsConnectedAndNotDisconnecting() {\n    this.assertIsConnected();\n    this.#assertIsNotDisconnecting();\n  }\n\n  async connect() {\n    this.assertIsNotConnected();\n    this.#assertIsNotConnecting();\n    this.status = \"connecting\";\n  }\n  get canReconnect() {\n    return false;\n  }\n  async reconnect() {\n    this.assertIsNotConnected();\n    this.#assertIsNotConnecting();\n    _console.assertWithError(this.canReconnect, \"unable to reconnect\");\n    this.status = \"connecting\";\n    _console.log(\"attempting to reconnect...\");\n  }\n  async disconnect() {\n    this.assertIsConnected();\n    this.#assertIsNotDisconnecting();\n    this.status = \"disconnecting\";\n    _console.log(\"disconnecting from device...\");\n  }\n\n  async sendSmpMessage(data: ArrayBuffer) {\n    this.assertIsConnectedAndNotDisconnecting();\n    _console.log(\"sending smp message\", data);\n  }\n\n  #pendingMessages: TxMessage[] = [];\n  #isSendingMessages = false;\n  async sendTxMessages(\n    messages: TxMessage[] | undefined,\n    sendImmediately: boolean = true\n  ) {\n    this.assertIsConnectedAndNotDisconnecting();\n\n    if (messages) {\n      this.#pendingMessages.push(...messages);\n      _console.log(`appended ${messages.length} messages`);\n    }\n\n    if (!sendImmediately) {\n      _console.log(\"not sending immediately - waiting until later\");\n      return;\n    }\n\n    if (this.#isSendingMessages) {\n      _console.log(\"already sending messages - waiting until later\");\n      return;\n    }\n    if (this.#pendingMessages.length == 0) {\n      _console.log(\"no pendingMessages\");\n      return;\n    }\n    this.#isSendingMessages = true;\n\n    _console.log(\"sendTxMessages\", this.#pendingMessages.slice());\n\n    const arrayBuffers = this.#pendingMessages.map((message) => {\n      BaseConnectionManager.#AssertValidTxRxMessageType(message.type);\n      const messageTypeEnum = TxRxMessageTypes.indexOf(message.type);\n      const dataLength = new DataView(new ArrayBuffer(2));\n      dataLength.setUint16(0, message.data?.byteLength || 0, true);\n      return concatenateArrayBuffers(messageTypeEnum, dataLength, message.data);\n    });\n    this.#pendingMessages.length = 0;\n\n    if (this.mtu) {\n      while (arrayBuffers.length > 0) {\n        if (\n          arrayBuffers.every(\n            (arrayBuffer) => arrayBuffer.byteLength > this.mtu! - 3\n          )\n        ) {\n          _console.log(\"every arrayBuffer is too big to send\");\n          break;\n        }\n        _console.log(\"remaining arrayBuffers.length\", arrayBuffers.length);\n        let arrayBufferByteLength = 0;\n        let arrayBufferCount = 0;\n        arrayBuffers.some((arrayBuffer) => {\n          if (arrayBufferByteLength + arrayBuffer.byteLength > this.mtu! - 3) {\n            _console.log(\n              `stopping appending arrayBuffers ( length ${arrayBuffer.byteLength} too much)`\n            );\n            return true;\n          }\n          _console.log(\n            `allowing arrayBuffer with length ${arrayBuffer.byteLength}`\n          );\n          arrayBufferCount++;\n          arrayBufferByteLength += arrayBuffer.byteLength;\n        });\n        const arrayBuffersToSend = arrayBuffers.splice(0, arrayBufferCount);\n        _console.log({ arrayBufferCount, arrayBuffersToSend });\n\n        const arrayBuffer = concatenateArrayBuffers(...arrayBuffersToSend);\n        _console.log(\"sending arrayBuffer (partitioned)\", arrayBuffer);\n        await this.sendTxData(arrayBuffer);\n      }\n    } else {\n      const arrayBuffer = concatenateArrayBuffers(...arrayBuffers);\n      _console.log(\"sending arrayBuffer (all)\", arrayBuffer);\n      await this.sendTxData(arrayBuffer);\n    }\n\n    this.#isSendingMessages = false;\n\n    this.sendTxMessages(undefined, true);\n  }\n\n  protected defaultMtu = 23;\n  //mtu?: number;\n  mtu?: number = this.defaultMtu;\n\n  async sendTxData(data: ArrayBuffer) {\n    _console.log(\"sendTxData\", data);\n  }\n\n  parseRxMessage(dataView: DataView) {\n    parseMessage(\n      dataView,\n      TxRxMessageTypes,\n      this.#onRxMessage.bind(this),\n      null,\n      true\n    );\n    this.onMessagesReceived!();\n  }\n\n  #onRxMessage(messageType: TxRxMessageType, dataView: DataView) {\n    _console.log({ messageType, dataView });\n    this.onMessageReceived!(messageType, dataView);\n  }\n\n  #timer = new Timer(this.#checkConnection.bind(this), 5000);\n  #checkConnection() {\n    //console.log(\"checking connection...\");\n    if (!this.isConnected) {\n      _console.log(\"timer detected disconnection\");\n      this.status = \"notConnected\";\n    }\n  }\n\n  clear() {\n    this.#isSendingMessages = false;\n    this.#pendingMessages.length = 0;\n  }\n\n  remove() {\n    this.clear();\n\n    this.onStatusUpdated = undefined;\n    this.onMessageReceived = undefined;\n    this.onMessagesReceived = undefined;\n  }\n}\n\nexport default BaseConnectionManager;\n","import { createConsole } from \"./Console.ts\";\nimport { spacesToPascalCase } from \"./stringUtils.ts\";\n\nconst _console = createConsole(\"EventUtils\", { log: false });\n\ntype BoundEventListeners = { [eventType: string]: EventListener };\nexport type BoundGenericEventListeners = { [eventType: string]: Function };\n\nexport function bindEventListeners(\n  eventTypes: readonly string[],\n  boundEventListeners: BoundGenericEventListeners,\n  target: any\n) {\n  _console.log(\"bindEventListeners\", { eventTypes, boundEventListeners, target });\n  eventTypes.forEach((eventType) => {\n    const _eventType = `_on${spacesToPascalCase(eventType)}`;\n    _console.assertWithError(target[_eventType], `no event \"${_eventType}\" found in target`);\n    _console.log(`binding eventType \"${eventType}\" as ${_eventType} from target`, target);\n    const boundEvent = target[_eventType].bind(target);\n    target[_eventType] = boundEvent;\n    boundEventListeners[eventType] = boundEvent;\n  });\n}\n\nexport function addEventListeners(target: any, boundEventListeners: BoundGenericEventListeners) {\n  let addEventListener = target.addEventListener || target.addListener || target.on || target.AddEventListener;\n  _console.assertWithError(addEventListener, \"no add listener function found for target\");\n  addEventListener = addEventListener.bind(target);\n  Object.entries(boundEventListeners).forEach(([eventType, eventListener]) => {\n    addEventListener(eventType, eventListener);\n  });\n}\n\nexport function removeEventListeners(target: any, boundEventListeners: BoundGenericEventListeners) {\n  let removeEventListener = target.removeEventListener || target.removeListener || target.RemoveEventListener;\n  _console.assertWithError(removeEventListener, \"no remove listener function found for target\");\n  removeEventListener = removeEventListener.bind(target);\n  Object.entries(boundEventListeners).forEach(([eventType, eventListener]) => {\n    removeEventListener(eventType, eventListener);\n  });\n}\n","import {\n  isInBrowser,\n  isInLensStudio,\n  isInNode,\n} from \"../../utils/environment.ts\";\nimport { createConsole } from \"../../utils/Console.ts\";\n\nconst _console = createConsole(\"bluetoothUUIDs\", { log: false });\n\n/** NODE_START */\nimport * as webbluetooth from \"webbluetooth\";\nvar BluetoothUUID = webbluetooth.BluetoothUUID;\n/** NODE_END */\n\n/** BROWSER_START */\nif (isInBrowser) {\n  var BluetoothUUID = window.BluetoothUUID;\n}\n/** BROWSER_END */\n\n/** LS_START */\n\nvar BluetoothUUID = {\n  getService: (uuid: number | string): string => toUUID(uuid),\n\n  getCharacteristic: (uuid: number | string): string => toUUID(uuid),\n\n  getDescriptor: (uuid: number | string): string => toUUID(uuid),\n\n  getCharacteristicName: (uuid: number | string): string | null => null,\n\n  getServiceName: (uuid: number | string): string | null => null,\n\n  getDescriptorName: (uuid: number | string): string | null => null,\n};\n\nfunction toUUID(uuid: number | string): string {\n  if (typeof uuid === \"number\") {\n    uuid = uuid.toString(16).padStart(4, \"0\");\n  }\n\n  if (/^[0-9a-fA-F]{4,8}$/.test(uuid)) {\n    return `0000${uuid.padStart(8, \"0\")}-0000-1000-8000-00805f9b34fb`;\n  }\n\n  return uuid.toLowerCase();\n}\n\n/** LS_END */\n\nfunction generateBluetoothUUID(value: string): BluetoothServiceUUID {\n  _console.assertTypeWithError(value, \"string\");\n  _console.assertWithError(\n    value.length == 4,\n    \"value must be 4 characters long\"\n  );\n  return `ea6d${value}-a725-4f9b-893d-c3913e33b39f`;\n}\n\nfunction stringToCharacteristicUUID(\n  identifier: string\n): BluetoothCharacteristicUUID {\n  return BluetoothUUID?.getCharacteristic?.(identifier);\n}\n\nfunction stringToServiceUUID(identifier: string): BluetoothServiceUUID {\n  return BluetoothUUID?.getService?.(identifier);\n}\n\nexport type BluetoothServiceName =\n  | \"deviceInformation\"\n  | \"battery\"\n  | \"main\"\n  | \"smp\";\nimport { DeviceInformationType } from \"../../DeviceInformationManager.ts\";\nexport type BluetoothCharacteristicName =\n  | DeviceInformationType\n  | \"batteryLevel\"\n  | \"rx\"\n  | \"tx\"\n  | \"smp\";\n\ninterface BluetoothCharacteristicInformation {\n  uuid: BluetoothCharacteristicUUID;\n}\ninterface BluetoothServiceInformation {\n  uuid: BluetoothServiceUUID;\n  characteristics: {\n    [characteristicName in BluetoothCharacteristicName]?: BluetoothCharacteristicInformation;\n  };\n}\ninterface BluetoothServicesInformation {\n  services: {\n    [serviceName in BluetoothServiceName]: BluetoothServiceInformation;\n  };\n}\nconst bluetoothUUIDs: BluetoothServicesInformation = Object.freeze({\n  services: {\n    deviceInformation: {\n      uuid: stringToServiceUUID(\"device_information\"),\n      characteristics: {\n        manufacturerName: {\n          uuid: stringToCharacteristicUUID(\"manufacturer_name_string\"),\n        },\n        modelNumber: {\n          uuid: stringToCharacteristicUUID(\"model_number_string\"),\n        },\n        hardwareRevision: {\n          uuid: stringToCharacteristicUUID(\"hardware_revision_string\"),\n        },\n        firmwareRevision: {\n          uuid: stringToCharacteristicUUID(\"firmware_revision_string\"),\n        },\n        softwareRevision: {\n          uuid: stringToCharacteristicUUID(\"software_revision_string\"),\n        },\n        pnpId: {\n          uuid: stringToCharacteristicUUID(\"pnp_id\"),\n        },\n        serialNumber: {\n          uuid: stringToCharacteristicUUID(\"serial_number_string\"),\n        },\n      },\n    },\n    battery: {\n      uuid: stringToServiceUUID(\"battery_service\"),\n      characteristics: {\n        batteryLevel: {\n          uuid: stringToCharacteristicUUID(\"battery_level\"),\n        },\n      },\n    },\n    main: {\n      uuid: generateBluetoothUUID(\"0000\"),\n      characteristics: {\n        rx: { uuid: generateBluetoothUUID(\"1000\") },\n        tx: { uuid: generateBluetoothUUID(\"1001\") },\n      },\n    },\n    smp: {\n      uuid: \"8d53dc1d-1db7-4cd3-868b-8a527460aa84\",\n      characteristics: {\n        smp: { uuid: \"da2e7828-fbce-4e01-ae9e-261174997c48\" },\n      },\n    },\n  },\n});\n\nexport const serviceUUIDs = [bluetoothUUIDs.services.main.uuid];\nexport const optionalServiceUUIDs = [\n  bluetoothUUIDs.services.deviceInformation.uuid,\n  bluetoothUUIDs.services.battery.uuid,\n  bluetoothUUIDs.services.smp.uuid,\n];\nexport const allServiceUUIDs = [...serviceUUIDs, ...optionalServiceUUIDs];\n\nexport function getServiceNameFromUUID(\n  serviceUUID: BluetoothServiceUUID\n): BluetoothServiceName | undefined {\n  serviceUUID = serviceUUID.toString().toLowerCase();\n  const serviceNames = Object.keys(\n    bluetoothUUIDs.services\n  ) as BluetoothServiceName[];\n  return serviceNames.find((serviceName) => {\n    const serviceInfo = bluetoothUUIDs.services[serviceName];\n    let serviceInfoUUID = serviceInfo.uuid.toString();\n    if (serviceUUID.length == 4) {\n      serviceInfoUUID = serviceInfoUUID.slice(4, 8);\n    }\n    if (!serviceUUID.includes(\"-\")) {\n      serviceInfoUUID = serviceInfoUUID.replaceAll(\"-\", \"\");\n    }\n    return serviceUUID == serviceInfoUUID;\n  });\n}\n\nexport const characteristicUUIDs: BluetoothCharacteristicUUID[] = [];\nexport const allCharacteristicUUIDs: BluetoothCharacteristicUUID[] = [];\n\nexport const characteristicNames: BluetoothCharacteristicName[] = [];\nexport const allCharacteristicNames: BluetoothCharacteristicName[] = [];\n\nObject.values(bluetoothUUIDs.services).forEach((serviceInfo) => {\n  if (!serviceInfo.characteristics) {\n    return;\n  }\n  const characteristicNames = Object.keys(\n    serviceInfo.characteristics\n  ) as BluetoothCharacteristicName[];\n  characteristicNames.forEach((characteristicName) => {\n    const characteristicInfo = serviceInfo.characteristics[characteristicName]!;\n    if (serviceUUIDs.includes(serviceInfo.uuid)) {\n      characteristicUUIDs.push(characteristicInfo.uuid);\n      characteristicNames.push(characteristicName);\n    }\n    allCharacteristicUUIDs.push(characteristicInfo.uuid);\n    allCharacteristicNames.push(characteristicName);\n  });\n}, []);\n\n//_console.log({ characteristicUUIDs, allCharacteristicUUIDs });\n\nexport function getCharacteristicNameFromUUID(\n  characteristicUUID: BluetoothCharacteristicUUID\n): BluetoothCharacteristicName | undefined {\n  //_console.log({ characteristicUUID });\n  characteristicUUID = characteristicUUID.toString().toLowerCase();\n  var characteristicName: BluetoothCharacteristicName | undefined;\n  Object.values(bluetoothUUIDs.services).some((serviceInfo) => {\n    const characteristicNames = Object.keys(\n      serviceInfo.characteristics\n    ) as BluetoothCharacteristicName[];\n    characteristicName = characteristicNames.find((_characteristicName) => {\n      const characteristicInfo =\n        serviceInfo.characteristics[_characteristicName]!;\n      let characteristicInfoUUID = characteristicInfo.uuid.toString();\n      if (characteristicUUID.length == 4) {\n        characteristicInfoUUID = characteristicInfoUUID.slice(4, 8);\n      }\n      if (!characteristicUUID.includes(\"-\")) {\n        characteristicInfoUUID = characteristicInfoUUID.replaceAll(\"-\", \"\");\n      }\n      return characteristicUUID == characteristicInfoUUID;\n    });\n    return characteristicName;\n  });\n  return characteristicName;\n}\n\nexport function getCharacteristicProperties(\n  characteristicName: BluetoothCharacteristicName\n): BluetoothCharacteristicProperties {\n  const properties = {\n    broadcast: false,\n    read: true,\n    writeWithoutResponse: false,\n    write: false,\n    notify: false,\n    indicate: false,\n    authenticatedSignedWrites: false,\n    reliableWrite: false,\n    writableAuxiliaries: false,\n  };\n\n  // read\n  switch (characteristicName) {\n    case \"rx\":\n    case \"tx\":\n    case \"smp\":\n      properties.read = false;\n      break;\n  }\n\n  // notify\n  switch (characteristicName) {\n    case \"batteryLevel\":\n    case \"rx\":\n    case \"smp\":\n      properties.notify = true;\n      break;\n  }\n\n  // write without response\n  switch (characteristicName) {\n    case \"smp\":\n      properties.writeWithoutResponse = true;\n      break;\n  }\n\n  // write\n  switch (characteristicName) {\n    case \"tx\":\n      properties.write = true;\n      break;\n  }\n\n  return properties;\n}\n\nexport const serviceDataUUID = \"0000\";\n","import { createConsole } from \"../../utils/Console.ts\";\nimport BaseConnectionManager from \"../BaseConnectionManager.ts\";\n\nconst _console = createConsole(\"BluetoothConnectionManager\", { log: false });\n\nimport { BluetoothCharacteristicName } from \"./bluetoothUUIDs.ts\";\n\nabstract class BluetoothConnectionManager extends BaseConnectionManager {\n  get isAvailable() {\n    // no way to tell if the user has turned bluetooth on or off\n    return true;\n  }\n\n  isInRange = true;\n\n  protected onCharacteristicValueChanged(\n    characteristicName: BluetoothCharacteristicName,\n    dataView: DataView\n  ) {\n    if (characteristicName == \"rx\") {\n      this.parseRxMessage(dataView);\n    } else {\n      this.onMessageReceived?.(characteristicName, dataView);\n    }\n  }\n\n  protected async writeCharacteristic(\n    characteristicName: BluetoothCharacteristicName,\n    data: ArrayBuffer\n  ) {\n    _console.log(\"writeCharacteristic\", ...arguments);\n  }\n\n  async sendSmpMessage(data: ArrayBuffer) {\n    super.sendSmpMessage(data);\n    await this.writeCharacteristic(\"smp\", data);\n  }\n\n  async sendTxData(data: ArrayBuffer) {\n    super.sendTxData(data);\n    if (data.byteLength == 0) {\n      return;\n    }\n    await this.writeCharacteristic(\"tx\", data);\n  }\n}\n\nexport default BluetoothConnectionManager;\n","import { createConsole } from \"../../utils/Console.ts\";\nimport {\n  isInNode,\n  isInBrowser,\n  isInBluefy,\n  isInWebBLE,\n} from \"../../utils/environment.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../../utils/EventUtils.ts\";\nimport {\n  serviceUUIDs,\n  optionalServiceUUIDs,\n  getServiceNameFromUUID,\n  getCharacteristicNameFromUUID,\n  getCharacteristicProperties,\n} from \"./bluetoothUUIDs.ts\";\nimport BluetoothConnectionManager from \"./BluetoothConnectionManager.ts\";\nimport {\n  BluetoothCharacteristicName,\n  BluetoothServiceName,\n} from \"./bluetoothUUIDs.ts\";\nimport { ConnectionType } from \"../BaseConnectionManager.ts\";\n\nconst _console = createConsole(\"WebBluetoothConnectionManager\", { log: false });\n\ntype WebBluetoothInterface = webbluetooth.Bluetooth | Bluetooth;\n\ninterface BluetoothService extends BluetoothRemoteGATTService {\n  name?: BluetoothServiceName;\n}\ninterface BluetoothCharacteristic extends BluetoothRemoteGATTCharacteristic {\n  name?: BluetoothCharacteristicName;\n}\n\nvar bluetooth: WebBluetoothInterface | undefined;\n/** NODE_START */\nimport * as webbluetooth from \"webbluetooth\";\nif (isInNode) {\n  bluetooth = webbluetooth.bluetooth;\n}\n/** NODE_END */\n\n/** BROWSER_START */\nif (isInBrowser) {\n  bluetooth = window.navigator.bluetooth;\n}\n/** BROWSER_END */\n\nclass WebBluetoothConnectionManager extends BluetoothConnectionManager {\n  get bluetoothId() {\n    return this.device!.id;\n  }\n\n  get canUpdateFirmware() {\n    return this.#characteristics.has(\"smp\");\n  }\n\n  #boundBluetoothCharacteristicEventListeners: {\n    [eventType: string]: EventListener;\n  } = {\n    characteristicvaluechanged: this.#onCharacteristicvaluechanged.bind(this),\n  };\n  #boundBluetoothDeviceEventListeners: { [eventType: string]: EventListener } =\n    {\n      gattserverdisconnected: this.#onGattserverdisconnected.bind(this),\n    };\n\n  static get isSupported() {\n    return Boolean(bluetooth);\n  }\n  static get type(): ConnectionType {\n    return \"webBluetooth\";\n  }\n\n  #device?: BluetoothDevice;\n  get device() {\n    return this.#device;\n  }\n  set device(newDevice) {\n    if (this.#device == newDevice) {\n      _console.log(\"tried to assign the same BluetoothDevice\");\n      return;\n    }\n    if (this.#device) {\n      removeEventListeners(\n        this.#device,\n        this.#boundBluetoothDeviceEventListeners\n      );\n    }\n    if (newDevice) {\n      addEventListeners(newDevice, this.#boundBluetoothDeviceEventListeners);\n    }\n    this.#device = newDevice;\n  }\n\n  get server(): BluetoothRemoteGATTServer | undefined {\n    return this.#device?.gatt;\n  }\n  get isConnected() {\n    return this.server?.connected || false;\n  }\n\n  #services: Map<BluetoothServiceName, BluetoothService> = new Map();\n  #characteristics: Map<BluetoothCharacteristicName, BluetoothCharacteristic> =\n    new Map();\n\n  async connect() {\n    await super.connect();\n\n    try {\n      const device = await bluetooth!.requestDevice({\n        filters: [{ services: serviceUUIDs }],\n        optionalServices: isInBrowser ? optionalServiceUUIDs : [],\n      });\n\n      _console.log(\"got BluetoothDevice\");\n      this.device = device;\n\n      _console.log(\"connecting to device...\");\n      const server = await this.server!.connect();\n      _console.log(`connected to device? ${server.connected}`);\n\n      await this.#getServicesAndCharacteristics();\n\n      _console.log(\"fully connected\");\n\n      this.status = \"connected\";\n    } catch (error) {\n      _console.error(error);\n      this.status = \"notConnected\";\n      this.server?.disconnect();\n      this.#removeEventListeners();\n    }\n  }\n  async #getServicesAndCharacteristics() {\n    this.#removeEventListeners();\n\n    _console.log(\"getting services...\");\n    const services = await this.server!.getPrimaryServices();\n    _console.log(\"got services\", services.length);\n    //const service = await this.server!.getPrimaryService(\"8d53dc1d-1db7-4cd3-868b-8a527460aa84\");\n\n    _console.log(\"getting characteristics...\");\n    for (const serviceIndex in services) {\n      const service = services[serviceIndex] as BluetoothService;\n      _console.log({ service });\n      const serviceName = getServiceNameFromUUID(service.uuid)!;\n      _console.assertWithError(\n        serviceName,\n        `no name found for service uuid \"${service.uuid}\"`\n      );\n      _console.log(`got \"${serviceName}\" service`);\n      service.name = serviceName;\n      this.#services.set(serviceName, service);\n      _console.log(`getting characteristics for \"${serviceName}\" service`);\n      const characteristics = await service.getCharacteristics();\n      _console.log(`got characteristics for \"${serviceName}\" service`);\n      for (const characteristicIndex in characteristics) {\n        const characteristic = characteristics[\n          characteristicIndex\n        ] as BluetoothCharacteristic;\n        _console.log({ characteristic });\n        const characteristicName = getCharacteristicNameFromUUID(\n          characteristic.uuid\n        )!;\n        _console.assertWithError(\n          Boolean(characteristicName),\n          `no name found for characteristic uuid \"${characteristic.uuid}\" in \"${serviceName}\" service`\n        );\n        _console.log(\n          `got \"${characteristicName}\" characteristic in \"${serviceName}\" service`\n        );\n        characteristic.name = characteristicName;\n        this.#characteristics.set(characteristicName, characteristic);\n        addEventListeners(\n          characteristic,\n          this.#boundBluetoothCharacteristicEventListeners\n        );\n        const characteristicProperties =\n          characteristic.properties ||\n          getCharacteristicProperties(characteristicName);\n        if (characteristicProperties.notify) {\n          _console.log(\n            `starting notifications for \"${characteristicName}\" characteristic`\n          );\n          await characteristic.startNotifications();\n        }\n        if (characteristicProperties.read) {\n          _console.log(`reading \"${characteristicName}\" characteristic...`);\n          await characteristic.readValue();\n          if (isInBluefy || isInWebBLE) {\n            this.#onCharacteristicValueChanged(characteristic);\n          }\n        }\n      }\n    }\n  }\n  async #removeEventListeners() {\n    if (this.device) {\n      removeEventListeners(\n        this.device,\n        this.#boundBluetoothDeviceEventListeners\n      );\n    }\n\n    const promises = Array.from(this.#characteristics.keys()).map(\n      (characteristicName) => {\n        const characteristic = this.#characteristics.get(characteristicName)!;\n        removeEventListeners(\n          characteristic,\n          this.#boundBluetoothCharacteristicEventListeners\n        );\n        const characteristicProperties =\n          characteristic.properties ||\n          getCharacteristicProperties(characteristicName);\n        if (characteristicProperties.notify) {\n          _console.log(\n            `stopping notifications for \"${characteristicName}\" characteristic`\n          );\n          return characteristic.stopNotifications();\n        }\n      }\n    );\n\n    return Promise.allSettled(promises);\n  }\n  async disconnect() {\n    await this.#removeEventListeners();\n    await super.disconnect();\n    this.server?.disconnect();\n    this.status = \"notConnected\";\n  }\n\n  #onCharacteristicvaluechanged(event: Event) {\n    _console.log(\"oncharacteristicvaluechanged\");\n\n    const characteristic = event.target as BluetoothCharacteristic;\n    this.#onCharacteristicValueChanged(characteristic);\n  }\n\n  #onCharacteristicValueChanged(characteristic: BluetoothCharacteristic) {\n    _console.log(\"onCharacteristicValue\");\n\n    const characteristicName = characteristic.name!;\n    _console.assertWithError(\n      Boolean(characteristicName),\n      `no name found for characteristic with uuid \"${characteristic.uuid}\"`\n    );\n\n    _console.log(\n      `oncharacteristicvaluechanged for \"${characteristicName}\" characteristic`\n    );\n    const dataView = characteristic.value!;\n    _console.assertWithError(\n      dataView,\n      `no data found for \"${characteristicName}\" characteristic`\n    );\n    _console.log(\n      `data for \"${characteristicName}\" characteristic`,\n      Array.from(new Uint8Array(dataView.buffer))\n    );\n\n    try {\n      this.onCharacteristicValueChanged(characteristicName, dataView);\n    } catch (error) {\n      _console.error(error);\n    }\n  }\n\n  async writeCharacteristic(\n    characteristicName: BluetoothCharacteristicName,\n    data: ArrayBuffer\n  ) {\n    super.writeCharacteristic(characteristicName, data);\n\n    const characteristic = this.#characteristics.get(characteristicName)!;\n    _console.assertWithError(\n      characteristic,\n      `${characteristicName} characteristic not found`\n    );\n    _console.log(\"writing characteristic\", characteristic, data);\n    const characteristicProperties =\n      characteristic.properties ||\n      getCharacteristicProperties(characteristicName);\n    if (characteristicProperties.writeWithoutResponse) {\n      _console.log(\"writing without response\");\n      await characteristic.writeValueWithoutResponse(data);\n    } else {\n      _console.log(\"writing with response\");\n      await characteristic.writeValueWithResponse(data);\n    }\n    _console.log(\"wrote characteristic\");\n\n    if (characteristicProperties.read && !characteristicProperties.notify) {\n      _console.log(\"reading value after write...\");\n      await characteristic.readValue();\n      if (isInBluefy || isInWebBLE) {\n        this.#onCharacteristicValueChanged(characteristic);\n      }\n    }\n  }\n\n  #onGattserverdisconnected() {\n    _console.log(\"gattserverdisconnected\");\n    this.status = \"notConnected\";\n  }\n\n  get canReconnect() {\n    return Boolean(this.server && !this.server.connected && this.isInRange);\n  }\n  async reconnect() {\n    await super.reconnect();\n    try {\n      await this.server!.connect();\n    } catch (error) {\n      _console.error(error);\n      this.isInRange = false;\n    }\n\n    if (this.isConnected) {\n      _console.log(\"successfully reconnected!\");\n      await this.#getServicesAndCharacteristics();\n      this.status = \"connected\";\n    } else {\n      _console.log(\"unable to reconnect\");\n      this.status = \"notConnected\";\n    }\n  }\n\n  remove() {\n    super.remove();\n    this.device = undefined;\n  }\n}\n\nexport default WebBluetoothConnectionManager;\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst POW_2_24 = 5.960464477539063e-8;\nconst POW_2_32 = 4294967296;\nconst POW_2_53 = 9007199254740992;\n\nexport function encode(value) {\n  let data = new ArrayBuffer(256);\n  let dataView = new DataView(data);\n  let lastLength;\n  let offset = 0;\n\n  function prepareWrite(length) {\n    let newByteLength = data.byteLength;\n    const requiredLength = offset + length;\n    while (newByteLength < requiredLength) {\n      newByteLength <<= 1;\n    }\n    if (newByteLength !== data.byteLength) {\n      const oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      const uint32count = (offset + 3) >> 2;\n      for (let i = 0; i < uint32count; ++i) {\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n      }\n    }\n\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite() {\n    offset += lastLength;\n  }\n  function writeFloat64(value) {\n    commitWrite(prepareWrite(8).setFloat64(offset, value));\n  }\n  function writeUint8(value) {\n    commitWrite(prepareWrite(1).setUint8(offset, value));\n  }\n  function writeUint8Array(value) {\n    const dataView = prepareWrite(value.length);\n    for (let i = 0; i < value.length; ++i) {\n      dataView.setUint8(offset + i, value[i]);\n    }\n    commitWrite();\n  }\n  function writeUint16(value) {\n    commitWrite(prepareWrite(2).setUint16(offset, value));\n  }\n  function writeUint32(value) {\n    commitWrite(prepareWrite(4).setUint32(offset, value));\n  }\n  function writeUint64(value) {\n    const low = value % POW_2_32;\n    const high = (value - low) / POW_2_32;\n    const dataView = prepareWrite(8);\n    dataView.setUint32(offset, high);\n    dataView.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeTypeAndLength(type, length) {\n    if (length < 24) {\n      writeUint8((type << 5) | length);\n    } else if (length < 0x100) {\n      writeUint8((type << 5) | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8((type << 5) | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8((type << 5) | 26);\n      writeUint32(length);\n    } else {\n      writeUint8((type << 5) | 27);\n      writeUint64(length);\n    }\n  }\n\n  function encodeItem(value) {\n    let i;\n    const utf8data = [];\n    let length;\n\n    if (value === false) {\n      return writeUint8(0xf4);\n    }\n    if (value === true) {\n      return writeUint8(0xf5);\n    }\n    if (value === null) {\n      return writeUint8(0xf6);\n    }\n    if (value === undefined) {\n      return writeUint8(0xf7);\n    }\n\n    switch (typeof value) {\n      case \"number\":\n        if (Math.floor(value) === value) {\n          if (value >= 0 && value <= POW_2_53) {\n            return writeTypeAndLength(0, value);\n          }\n          if (-POW_2_53 <= value && value < 0) {\n            return writeTypeAndLength(1, -(value + 1));\n          }\n        }\n        writeUint8(0xfb);\n        return writeFloat64(value);\n\n      case \"string\":\n        for (i = 0; i < value.length; ++i) {\n          let charCode = value.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | (charCode >> 6));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else if (charCode < 0xd800) {\n            utf8data.push(0xe0 | (charCode >> 12));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= value.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n\n            utf8data.push(0xf0 | (charCode >> 18));\n            utf8data.push(0x80 | ((charCode >> 12) & 0x3f));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n\n      default:\n        if (Array.isArray(value)) {\n          length = value.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; ++i) {\n            encodeItem(value[i]);\n          }\n        } else if (value instanceof Uint8Array) {\n          writeTypeAndLength(2, value.length);\n          writeUint8Array(value);\n        } else {\n          const keys = Object.keys(value);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; ++i) {\n            const key = keys[i];\n            encodeItem(key);\n            encodeItem(value[key]);\n          }\n        }\n    }\n  }\n\n  encodeItem(value);\n\n  if (\"slice\" in data) {\n    return data.slice(0, offset);\n  }\n\n  const ret = new ArrayBuffer(offset);\n  const retView = new DataView(ret);\n  for (let i = 0; i < offset; ++i) {\n    retView.setUint8(i, dataView.getUint8(i));\n  }\n  return ret;\n}\n\nexport function decode(data, tagger, simpleValue) {\n  const dataView = new DataView(data);\n  let offset = 0;\n\n  if (typeof tagger !== \"function\") {\n    tagger = function (value) {\n      return value;\n    };\n  }\n  if (typeof simpleValue !== \"function\") {\n    simpleValue = function () {\n      return undefined;\n    };\n  }\n\n  function commitRead(length, value) {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    const tempArrayBuffer = new ArrayBuffer(4);\n    const tempDataView = new DataView(tempArrayBuffer);\n    const value = readUint16();\n\n    const sign = value & 0x8000;\n    let exponent = value & 0x7c00;\n    const fraction = value & 0x03ff;\n\n    if (exponent === 0x7c00) {\n      exponent = 0xff << 10;\n    } else if (exponent !== 0) {\n      exponent += (127 - 15) << 10;\n    } else if (fraction !== 0) {\n      return (sign ? -1 : 1) * fraction * POW_2_24;\n    }\n\n    tempDataView.setUint32(0, (sign << 16) | (exponent << 13) | (fraction << 13));\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32() {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64() {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8() {\n    return commitRead(1, dataView.getUint8(offset));\n  }\n  function readUint16() {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32() {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64() {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak() {\n    if (dataView.getUint8(offset) !== 0xff) {\n      return false;\n    }\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation) {\n    if (additionalInformation < 24) {\n      return additionalInformation;\n    }\n    if (additionalInformation === 24) {\n      return readUint8();\n    }\n    if (additionalInformation === 25) {\n      return readUint16();\n    }\n    if (additionalInformation === 26) {\n      return readUint32();\n    }\n    if (additionalInformation === 27) {\n      return readUint64();\n    }\n    if (additionalInformation === 31) {\n      return -1;\n    }\n    throw new Error(\"Invalid length encoding\");\n  }\n  function readIndefiniteStringLength(majorType) {\n    const initialByte = readUint8();\n    if (initialByte === 0xff) {\n      return -1;\n    }\n    const length = readLength(initialByte & 0x1f);\n    if (length < 0 || initialByte >> 5 !== majorType) {\n      throw new Error(\"Invalid indefinite length element\");\n    }\n    return length;\n  }\n\n  function appendUtf16Data(utf16data, length) {\n    for (let i = 0; i < length; ++i) {\n      let value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = ((value & 0x1f) << 6) | (readUint8() & 0x3f);\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = ((value & 0x0f) << 12) | ((readUint8() & 0x3f) << 6) | (readUint8() & 0x3f);\n          length -= 2;\n        } else {\n          value =\n            ((value & 0x0f) << 18) | ((readUint8() & 0x3f) << 12) | ((readUint8() & 0x3f) << 6) | (readUint8() & 0x3f);\n          length -= 3;\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | (value >> 10));\n        utf16data.push(0xdc00 | (value & 0x3ff));\n      }\n    }\n  }\n\n  function decodeItem() {\n    const initialByte = readUint8();\n    const majorType = initialByte >> 5;\n    const additionalInformation = initialByte & 0x1f;\n    let i;\n    let length;\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || majorType > 6)) {\n      throw new Error(\"Invalid length\");\n    }\n\n    const utf16data = [];\n    let retArray;\n    const retObject = {};\n\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          const elements = [];\n          let fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          const fullArray = new Uint8Array(fullArrayLength);\n          let fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            appendUtf16Data(utf16data, length);\n          }\n        } else {\n          appendUtf16Data(utf16data, length);\n        }\n        return String.fromCharCode.apply(null, utf16data);\n      case 4:\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak()) {\n            retArray.push(decodeItem());\n          }\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i) {\n            retArray[i] = decodeItem();\n          }\n        }\n        return retArray;\n      case 5:\n        for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n          const key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagger(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValue(length);\n        }\n    }\n  }\n\n  const ret = decodeItem();\n  if (offset !== data.byteLength) {\n    throw new Error(\"Remaining bytes\");\n  }\n  return ret;\n}\n\nexport const CBOR = {\n  encode,\n  decode,\n};\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Laird Connectivity\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @file mcumgr\n * @brief Provides MCU manager operation functions for the Xbit USB Shell.\n * This file is inspired by the MIT licensed mcumgr file originally\n * authored by Andras Barthazi (https://github.com/boogie/mcumgr-web),\n * updated to also support file upload/download over SMP.\n */\n\nimport { CBOR } from \"./cbor.js\";\nimport { createConsole } from \"./Console.ts\";\n\nconst _console = createConsole(\"mcumgr\", { log: false });\n\nexport const constants = {\n  // Opcodes\n  MGMT_OP_READ: 0,\n  MGMT_OP_READ_RSP: 1,\n  MGMT_OP_WRITE: 2,\n  MGMT_OP_WRITE_RSP: 3,\n\n  // Groups\n  MGMT_GROUP_ID_OS: 0,\n  MGMT_GROUP_ID_IMAGE: 1,\n  MGMT_GROUP_ID_STAT: 2,\n  MGMT_GROUP_ID_CONFIG: 3,\n  MGMT_GROUP_ID_LOG: 4,\n  MGMT_GROUP_ID_CRASH: 5,\n  MGMT_GROUP_ID_SPLIT: 6,\n  MGMT_GROUP_ID_RUN: 7,\n  MGMT_GROUP_ID_FS: 8,\n  MGMT_GROUP_ID_SHELL: 9,\n\n  // OS group\n  OS_MGMT_ID_ECHO: 0,\n  OS_MGMT_ID_CONS_ECHO_CTRL: 1,\n  OS_MGMT_ID_TASKSTAT: 2,\n  OS_MGMT_ID_MPSTAT: 3,\n  OS_MGMT_ID_DATETIME_STR: 4,\n  OS_MGMT_ID_RESET: 5,\n\n  // Image group\n  IMG_MGMT_ID_STATE: 0,\n  IMG_MGMT_ID_UPLOAD: 1,\n  IMG_MGMT_ID_FILE: 2,\n  IMG_MGMT_ID_CORELIST: 3,\n  IMG_MGMT_ID_CORELOAD: 4,\n  IMG_MGMT_ID_ERASE: 5,\n\n  // Filesystem group\n  FS_MGMT_ID_FILE: 0,\n};\n\nexport class MCUManager {\n  constructor() {\n    this._mtu = 256;\n    this._messageCallback = null;\n    this._imageUploadProgressCallback = null;\n    this._imageUploadNextCallback = null;\n    this._fileUploadProgressCallback = null;\n    this._fileUploadNextCallback = null;\n    this._uploadIsInProgress = false;\n    this._downloadIsInProgress = false;\n    this._buffer = new Uint8Array();\n    this._seq = 0;\n  }\n\n  onMessage(callback) {\n    this._messageCallback = callback;\n    return this;\n  }\n\n  onImageUploadNext(callback) {\n    this._imageUploadNextCallback = callback;\n    return this;\n  }\n\n  onImageUploadProgress(callback) {\n    this._imageUploadProgressCallback = callback;\n    return this;\n  }\n\n  onImageUploadFinished(callback) {\n    this._imageUploadFinishedCallback = callback;\n    return this;\n  }\n\n  onFileUploadNext(callback) {\n    this._fileUploadNextCallback = callback;\n    return this;\n  }\n\n  onFileUploadProgress(callback) {\n    this._fileUploadProgressCallback = callback;\n    return this;\n  }\n\n  onFileUploadFinished(callback) {\n    this._fileUploadFinishedCallback = callback;\n    return this;\n  }\n\n  onFileDownloadNext(callback) {\n    this._fileDownloadNextCallback = callback;\n    return this;\n  }\n\n  onFileDownloadProgress(callback) {\n    this._fileDownloadProgressCallback = callback;\n    return this;\n  }\n\n  onFileDownloadFinished(callback) {\n    this._fileDownloadFinishedCallback = callback;\n    return this;\n  }\n\n  _getMessage(op, group, id, data) {\n    const _flags = 0;\n    let encodedData = [];\n    if (typeof data !== \"undefined\") {\n      encodedData = [...new Uint8Array(CBOR.encode(data))];\n    }\n    const lengthLo = encodedData.length & 255;\n    const lengthHi = encodedData.length >> 8;\n    const groupLo = group & 255;\n    const groupHi = group >> 8;\n    const message = [op, _flags, lengthHi, lengthLo, groupHi, groupLo, this._seq, id, ...encodedData];\n    this._seq = (this._seq + 1) % 256;\n\n    return message;\n  }\n\n  _notification(buffer) {\n    _console.log(\"mcumgr - message received\");\n    const message = new Uint8Array(buffer);\n    this._buffer = new Uint8Array([...this._buffer, ...message]);\n    const messageLength = this._buffer[2] * 256 + this._buffer[3];\n    if (this._buffer.length < messageLength + 8) return;\n    this._processMessage(this._buffer.slice(0, messageLength + 8));\n    this._buffer = this._buffer.slice(messageLength + 8);\n  }\n\n  _processMessage(message) {\n    const [op, , lengthHi, lengthLo, groupHi, groupLo, , id] = message;\n    const data = CBOR.decode(message.slice(8).buffer);\n    const length = lengthHi * 256 + lengthLo;\n    const group = groupHi * 256 + groupLo;\n\n    _console.log(\"mcumgr - Process Message - Group: \" + group + \", Id: \" + id + \", Off: \" + data.off);\n    if (group === constants.MGMT_GROUP_ID_IMAGE && id === constants.IMG_MGMT_ID_UPLOAD && data.off) {\n      this._uploadOffset = data.off;\n      this._uploadNext();\n      return;\n    }\n    if (\n      op === constants.MGMT_OP_WRITE_RSP &&\n      group === constants.MGMT_GROUP_ID_FS &&\n      id === constants.FS_MGMT_ID_FILE &&\n      data.off\n    ) {\n      this._uploadFileOffset = data.off;\n      this._uploadFileNext();\n      return;\n    }\n    if (op === constants.MGMT_OP_READ_RSP && group === constants.MGMT_GROUP_ID_FS && id === constants.FS_MGMT_ID_FILE) {\n      this._downloadFileOffset += data.data.length;\n      if (data.len != undefined) {\n        this._downloadFileLength = data.len;\n      }\n      _console.log(\"downloaded \" + this._downloadFileOffset + \" bytes of \" + this._downloadFileLength);\n      if (this._downloadFileLength > 0) {\n        this._fileDownloadProgressCallback({\n          percentage: Math.floor((this._downloadFileOffset / this._downloadFileLength) * 100),\n        });\n      }\n      if (this._messageCallback) this._messageCallback({ op, group, id, data, length });\n      this._downloadFileNext();\n      return;\n    }\n\n    if (this._messageCallback) this._messageCallback({ op, group, id, data, length });\n  }\n\n  cmdReset() {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_OS, constants.OS_MGMT_ID_RESET);\n  }\n\n  smpEcho(message) {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_OS, constants.OS_MGMT_ID_ECHO, {\n      d: message,\n    });\n  }\n\n  cmdImageState() {\n    return this._getMessage(constants.MGMT_OP_READ, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_STATE);\n  }\n\n  cmdImageErase() {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_ERASE, {});\n  }\n\n  cmdImageTest(hash) {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_STATE, {\n      hash,\n      confirm: false,\n    });\n  }\n\n  cmdImageConfirm(hash) {\n    return this._getMessage(constants.MGMT_OP_WRITE, constants.MGMT_GROUP_ID_IMAGE, constants.IMG_MGMT_ID_STATE, {\n      hash,\n      confirm: true,\n    });\n  }\n\n  _hash(image) {\n    return crypto.subtle.digest(\"SHA-256\", image);\n  }\n\n  async _uploadNext() {\n    if (!this._uploadImage) {\n      return;\n    }\n\n    if (this._uploadOffset >= this._uploadImage.byteLength) {\n      this._uploadIsInProgress = false;\n      this._imageUploadFinishedCallback();\n      return;\n    }\n\n    const nmpOverhead = 8;\n    const message = { data: new Uint8Array(), off: this._uploadOffset };\n    if (this._uploadOffset === 0) {\n      message.len = this._uploadImage.byteLength;\n      message.sha = new Uint8Array(await this._hash(this._uploadImage));\n    }\n    this._imageUploadProgressCallback({\n      percentage: Math.floor((this._uploadOffset / this._uploadImage.byteLength) * 100),\n    });\n\n    const length = this._mtu - CBOR.encode(message).byteLength - nmpOverhead - 3 - 5;\n\n    message.data = new Uint8Array(this._uploadImage.slice(this._uploadOffset, this._uploadOffset + length));\n\n    this._uploadOffset += length;\n\n    const packet = this._getMessage(\n      constants.MGMT_OP_WRITE,\n      constants.MGMT_GROUP_ID_IMAGE,\n      constants.IMG_MGMT_ID_UPLOAD,\n      message\n    );\n\n    _console.log(\"mcumgr - _uploadNext: Message Length: \" + packet.length);\n\n    this._imageUploadNextCallback({ packet });\n  }\n  async reset() {\n    this._messageCallback = null;\n    this._imageUploadProgressCallback = null;\n    this._imageUploadNextCallback = null;\n    this._fileUploadProgressCallback = null;\n    this._fileUploadNextCallback = null;\n    this._uploadIsInProgress = false;\n    this._downloadIsInProgress = false;\n    this._buffer = new Uint8Array();\n    this._seq = 0;\n  }\n\n  async cmdUpload(image, slot = 0) {\n    if (this._uploadIsInProgress) {\n      _console.error(\"Upload is already in progress.\");\n      return;\n    }\n    this._uploadIsInProgress = true;\n\n    this._uploadOffset = 0;\n    this._uploadImage = image;\n    this._uploadSlot = slot;\n\n    this._uploadNext();\n  }\n\n  async cmdUploadFile(filebuf, destFilename) {\n    if (this._uploadIsInProgress) {\n      _console.error(\"Upload is already in progress.\");\n      return;\n    }\n    this._uploadIsInProgress = true;\n    this._uploadFileOffset = 0;\n    this._uploadFile = filebuf;\n    this._uploadFilename = destFilename;\n\n    this._uploadFileNext();\n  }\n\n  async _uploadFileNext() {\n    _console.log(\"uploadFileNext - offset: \" + this._uploadFileOffset + \", length: \" + this._uploadFile.byteLength);\n\n    if (this._uploadFileOffset >= this._uploadFile.byteLength) {\n      this._uploadIsInProgress = false;\n      this._fileUploadFinishedCallback();\n      return;\n    }\n\n    const nmpOverhead = 8;\n    const message = { data: new Uint8Array(), off: this._uploadFileOffset };\n    if (this._uploadFileOffset === 0) {\n      message.len = this._uploadFile.byteLength;\n    }\n    message.name = this._uploadFilename;\n    this._fileUploadProgressCallback({\n      percentage: Math.floor((this._uploadFileOffset / this._uploadFile.byteLength) * 100),\n    });\n\n    const length = this._mtu - CBOR.encode(message).byteLength - nmpOverhead;\n\n    message.data = new Uint8Array(this._uploadFile.slice(this._uploadFileOffset, this._uploadFileOffset + length));\n\n    this._uploadFileOffset += length;\n\n    const packet = this._getMessage(\n      constants.MGMT_OP_WRITE,\n      constants.MGMT_GROUP_ID_FS,\n      constants.FS_MGMT_ID_FILE,\n      message\n    );\n\n    _console.log(\"mcumgr - _uploadNext: Message Length: \" + packet.length);\n\n    this._fileUploadNextCallback({ packet });\n  }\n\n  async cmdDownloadFile(filename, destFilename) {\n    if (this._downloadIsInProgress) {\n      _console.error(\"Download is already in progress.\");\n      return;\n    }\n    this._downloadIsInProgress = true;\n    this._downloadFileOffset = 0;\n    this._downloadFileLength = 0;\n    this._downloadRemoteFilename = filename;\n    this._downloadLocalFilename = destFilename;\n\n    this._downloadFileNext();\n  }\n\n  async _downloadFileNext() {\n    if (this._downloadFileLength > 0) {\n      if (this._downloadFileOffset >= this._downloadFileLength) {\n        this._downloadIsInProgress = false;\n        this._fileDownloadFinishedCallback();\n        return;\n      }\n    }\n\n    const message = { off: this._downloadFileOffset };\n    if (this._downloadFileOffset === 0) {\n      message.name = this._downloadRemoteFilename;\n    }\n\n    const packet = this._getMessage(\n      constants.MGMT_OP_READ,\n      constants.MGMT_GROUP_ID_FS,\n      constants.FS_MGMT_ID_FILE,\n      message\n    );\n    _console.log(\"mcumgr - _downloadNext: Message Length: \" + packet.length);\n    this._fileDownloadNextCallback({ packet });\n  }\n\n  async imageInfo(image) {\n    const info = {};\n    const view = new Uint8Array(image);\n\n    // check header length\n    if (view.length < 32) {\n      throw new Error(\"Invalid image (too short file)\");\n    }\n\n    // check MAGIC bytes 0x96f3b83d\n    if (view[0] !== 0x3d || view[1] !== 0xb8 || view[2] !== 0xf3 || view[3] !== 0x96) {\n      throw new Error(\"Invalid image (wrong magic bytes)\");\n    }\n\n    // check load address is 0x00000000\n    if (view[4] !== 0x00 || view[5] !== 0x00 || view[6] !== 0x00 || view[7] !== 0x00) {\n      throw new Error(\"Invalid image (wrong load address)\");\n    }\n\n    const headerSize = view[8] + view[9] * 2 ** 8;\n\n    // check protected TLV area size is 0\n    if (view[10] !== 0x00 || view[11] !== 0x00) {\n      throw new Error(\"Invalid image (wrong protected TLV area size)\");\n    }\n\n    const imageSize = view[12] + view[13] * 2 ** 8 + view[14] * 2 ** 16 + view[15] * 2 ** 24;\n    info.imageSize = imageSize;\n\n    // check image size is correct\n    if (view.length < imageSize + headerSize) {\n      throw new Error(\"Invalid image (wrong image size)\");\n    }\n\n    // check flags is 0x00000000\n    if (view[16] !== 0x00 || view[17] !== 0x00 || view[18] !== 0x00 || view[19] !== 0x00) {\n      throw new Error(\"Invalid image (wrong flags)\");\n    }\n\n    const version = `${view[20]}.${view[21]}.${view[22] + view[23] * 2 ** 8}`;\n    info.version = version;\n\n    info.hash = [...new Uint8Array(await this._hash(image.slice(0, imageSize + 32)))]\n      .map((b) => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n\n    return info;\n  }\n}\n","import Device, { SendSmpMessageCallback } from \"./Device.ts\";\nimport { getFileBuffer } from \"./utils/ArrayBufferUtils.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher from \"./utils/EventDispatcher.ts\";\nimport { MCUManager, constants } from \"./utils/mcumgr.js\";\nimport { FileLike } from \"./utils/ArrayBufferUtils.ts\";\nimport autoBind from \"auto-bind\";\n\nconst _console = createConsole(\"FirmwareManager\", { log: false });\n\nexport const FirmwareMessageTypes = [\"smp\"] as const;\nexport type FirmwareMessageType = (typeof FirmwareMessageTypes)[number];\n\nexport const FirmwareEventTypes = [\n  ...FirmwareMessageTypes,\n  \"firmwareImages\",\n  \"firmwareUploadProgress\",\n  \"firmwareStatus\",\n  \"firmwareUploadComplete\",\n] as const;\nexport type FirmwareEventType = (typeof FirmwareEventTypes)[number];\n\nexport const FirmwareStatuses = [\"idle\", \"uploading\", \"uploaded\", \"pending\", \"testing\", \"erasing\"] as const;\nexport type FirmwareStatus = (typeof FirmwareStatuses)[number];\n\nexport interface FirmwareImage {\n  slot: number;\n  active: boolean;\n  confirmed: boolean;\n  pending: boolean;\n  permanent: boolean;\n  bootable: boolean;\n  version: string;\n  hash?: Uint8Array;\n  empty?: boolean;\n}\n\nexport interface FirmwareEventMessages {\n  smp: { dataView: DataView };\n  firmwareImages: { firmwareImages: FirmwareImage[] };\n  firmwareUploadProgress: { progress: number };\n  firmwareStatus: { firmwareStatus: FirmwareStatus };\n  //firmwareUploadComplete: {};\n}\n\nexport type FirmwareEventDispatcher = EventDispatcher<Device, FirmwareEventType, FirmwareEventMessages>;\n\nclass FirmwareManager {\n  sendMessage!: SendSmpMessageCallback;\n\n  constructor() {\n    this.#assignMcuManagerCallbacks();\n    autoBind(this);\n  }\n\n  eventDispatcher!: FirmwareEventDispatcher;\n  get addEventListenter() {\n    return this.eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.eventDispatcher.waitForEvent;\n  }\n\n  parseMessage(messageType: FirmwareMessageType, dataView: DataView) {\n    _console.log({ messageType });\n\n    switch (messageType) {\n      case \"smp\":\n        this.#mcuManager._notification(Array.from(new Uint8Array(dataView.buffer)));\n        this.#dispatchEvent(\"smp\", { dataView });\n        break;\n      default:\n        throw Error(`uncaught messageType ${messageType}`);\n    }\n  }\n\n  async uploadFirmware(file: FileLike) {\n    _console.log(\"uploadFirmware\", file);\n\n    const promise = this.waitForEvent(\"firmwareUploadComplete\");\n\n    await this.getImages();\n\n    const arrayBuffer = await getFileBuffer(file);\n    const imageInfo = await this.#mcuManager.imageInfo(arrayBuffer);\n    _console.log({ imageInfo });\n\n    this.#mcuManager.cmdUpload(arrayBuffer, 1);\n\n    this.#updateStatus(\"uploading\");\n\n    await promise;\n  }\n\n  #status: FirmwareStatus = \"idle\";\n  get status() {\n    return this.#status;\n  }\n  #updateStatus(newStatus: FirmwareStatus) {\n    _console.assertEnumWithError(newStatus, FirmwareStatuses);\n    if (this.#status == newStatus) {\n      _console.log(`redundant firmwareStatus assignment \"${newStatus}\"`);\n      return;\n    }\n\n    this.#status = newStatus;\n    _console.log({ firmwareStatus: this.#status });\n    this.#dispatchEvent(\"firmwareStatus\", { firmwareStatus: this.#status });\n  }\n\n  // COMMANDS\n\n  #images!: FirmwareImage[];\n  get images() {\n    return this.#images;\n  }\n  #assertImages() {\n    _console.assertWithError(this.#images, \"didn't get imageState\");\n  }\n  #assertValidImageIndex(imageIndex: number) {\n    _console.assertTypeWithError(imageIndex, \"number\");\n    _console.assertWithError(imageIndex == 0 || imageIndex == 1, \"imageIndex must be 0 or 1\");\n  }\n  async getImages() {\n    const promise = this.waitForEvent(\"firmwareImages\");\n\n    _console.log(\"getting firmware image state...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageState()).buffer);\n\n    await promise;\n  }\n\n  async testImage(imageIndex: number = 1) {\n    this.#assertValidImageIndex(imageIndex);\n    this.#assertImages();\n    if (!this.#images[imageIndex]) {\n      _console.log(`image ${imageIndex} not found`);\n      return;\n    }\n    if (this.#images[imageIndex].pending == true) {\n      _console.log(`image ${imageIndex} is already pending`);\n      return;\n    }\n    if (this.#images[imageIndex].empty) {\n      _console.log(`image ${imageIndex} is empty`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"testing firmware image...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageTest(this.#images[imageIndex].hash)).buffer);\n\n    await promise;\n  }\n\n  async eraseImage() {\n    this.#assertImages();\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"erasing image...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageErase()).buffer);\n\n    this.#updateStatus(\"erasing\");\n\n    await promise;\n    await this.getImages();\n  }\n\n  async confirmImage(imageIndex: number = 0) {\n    this.#assertValidImageIndex(imageIndex);\n    this.#assertImages();\n    if (this.#images[imageIndex].confirmed === true) {\n      _console.log(`image ${imageIndex} is already confirmed`);\n      return;\n    }\n\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"confirming image...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdImageConfirm(this.#images[imageIndex].hash)).buffer);\n\n    await promise;\n  }\n\n  async echo(string: string) {\n    _console.assertTypeWithError(string, \"string\");\n\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"sending echo...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.smpEcho(string)).buffer);\n\n    await promise;\n  }\n\n  async reset() {\n    const promise = this.waitForEvent(\"smp\");\n\n    _console.log(\"resetting...\");\n    this.sendMessage(Uint8Array.from(this.#mcuManager.cmdReset()).buffer);\n\n    await promise;\n  }\n\n  // MTU\n  #mtu!: number;\n  get mtu() {\n    return this.#mtu;\n  }\n  set mtu(newMtu: number) {\n    this.#mtu = newMtu;\n    this.#mcuManager._mtu = newMtu;\n  }\n\n  // MCUManager\n  #mcuManager = new MCUManager();\n\n  #assignMcuManagerCallbacks() {\n    this.#mcuManager.onMessage(this.#onMcuMessage.bind(this));\n\n    this.#mcuManager.onFileDownloadNext(this.#onMcuFileDownloadNext);\n    this.#mcuManager.onFileDownloadProgress(this.#onMcuFileDownloadProgress.bind(this));\n    this.#mcuManager.onFileDownloadFinished(this.#onMcuFileDownloadFinished.bind(this));\n\n    this.#mcuManager.onFileUploadNext(this.#onMcuFileUploadNext.bind(this));\n    this.#mcuManager.onFileUploadProgress(this.#onMcuFileUploadProgress.bind(this));\n    this.#mcuManager.onFileUploadFinished(this.#onMcuFileUploadFinished.bind(this));\n\n    this.#mcuManager.onImageUploadNext(this.#onMcuImageUploadNext.bind(this));\n    this.#mcuManager.onImageUploadProgress(this.#onMcuImageUploadProgress.bind(this));\n    this.#mcuManager.onImageUploadFinished(this.#onMcuImageUploadFinished.bind(this));\n  }\n\n  #onMcuMessage({ op, group, id, data, length }: { op: number; group: number; id: number; data: any; length: number }) {\n    _console.log(\"onMcuMessage\", ...arguments);\n\n    switch (group) {\n      case constants.MGMT_GROUP_ID_OS:\n        switch (id) {\n          case constants.OS_MGMT_ID_ECHO:\n            _console.log(`echo \"${data.r}\"`);\n            break;\n          case constants.OS_MGMT_ID_TASKSTAT:\n            _console.table(data.tasks);\n            break;\n          case constants.OS_MGMT_ID_MPSTAT:\n            _console.log(data);\n            break;\n        }\n        break;\n      case constants.MGMT_GROUP_ID_IMAGE:\n        switch (id) {\n          case constants.IMG_MGMT_ID_STATE:\n            this.#onMcuImageState(data);\n        }\n        break;\n      default:\n        throw Error(`uncaught mcuMessage group ${group}`);\n    }\n  }\n\n  #onMcuFileDownloadNext() {\n    _console.log(\"onMcuFileDownloadNext\", ...arguments);\n  }\n  #onMcuFileDownloadProgress() {\n    _console.log(\"onMcuFileDownloadProgress\", ...arguments);\n  }\n  #onMcuFileDownloadFinished() {\n    _console.log(\"onMcuFileDownloadFinished\", ...arguments);\n  }\n\n  #onMcuFileUploadNext() {\n    _console.log(\"onMcuFileUploadNext\");\n  }\n  #onMcuFileUploadProgress() {\n    _console.log(\"onMcuFileUploadProgress\");\n  }\n  #onMcuFileUploadFinished() {\n    _console.log(\"onMcuFileUploadFinished\");\n  }\n\n  #onMcuImageUploadNext({ packet }: { packet: number[] }) {\n    _console.log(\"onMcuImageUploadNext\");\n    this.sendMessage(Uint8Array.from(packet).buffer);\n  }\n  #onMcuImageUploadProgress({ percentage }: { percentage: number }) {\n    const progress = percentage / 100;\n    _console.log(\"onMcuImageUploadProgress\", ...arguments);\n    this.#dispatchEvent(\"firmwareUploadProgress\", { progress });\n  }\n  async #onMcuImageUploadFinished() {\n    _console.log(\"onMcuImageUploadFinished\", ...arguments);\n\n    await this.getImages();\n\n    this.#dispatchEvent(\"firmwareUploadProgress\", { progress: 100 });\n    this.#dispatchEvent(\"firmwareUploadComplete\", {});\n  }\n\n  #onMcuImageState({ images }: { images?: FirmwareImage[] }) {\n    if (images) {\n      this.#images = images;\n      _console.log(\"images\", this.#images);\n    } else {\n      _console.log(\"no images found\");\n      return;\n    }\n\n    let newStatus: FirmwareStatus = \"idle\";\n\n    if (this.#images.length == 2) {\n      if (!this.#images[1].bootable) {\n        _console.warn('Slot 1 has a invalid image. Click \"Erase Image\" to erase it or upload a different image');\n      } else if (!this.#images[0].confirmed) {\n        _console.log(\n          'Slot 0 has a valid image. Click \"Confirm Image\" to confirm it or wait and the device will swap images back.'\n        );\n        newStatus = \"testing\";\n      } else {\n        if (this.#images[1].pending) {\n          _console.log(\"reset to upload to the new firmware image\");\n          newStatus = \"pending\";\n        } else {\n          _console.log(\"Slot 1 has a valid image. run testImage() to test it or upload a different image.\");\n          newStatus = \"uploaded\";\n        }\n      }\n    }\n\n    if (this.#images.length == 1) {\n      this.#images.push({\n        slot: 1,\n        empty: true,\n        version: \"Empty\",\n        pending: false,\n        confirmed: false,\n        bootable: false,\n        active: false,\n        permanent: false,\n      });\n\n      _console.log(\"Select a firmware upload image to upload to slot 1.\");\n    }\n\n    this.#updateStatus(newStatus);\n    this.#dispatchEvent(\"firmwareImages\", { firmwareImages: this.#images });\n  }\n}\n\nexport default FirmwareManager;\n","import { ConnectionStatus } from \"./connection/BaseConnectionManager.ts\";\nimport WebBluetoothConnectionManager from \"./connection/bluetooth/WebBluetoothConnectionManager.ts\";\nimport Device, { BoundDeviceEventListeners, DeviceEventMap } from \"./Device.ts\";\nimport { DeviceType } from \"./InformationManager.ts\";\nimport { createConsole } from \"./utils/Console.ts\";\nimport { isInBluefy, isInBrowser } from \"./utils/environment.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n  EventListenerMap,\n  EventMap,\n} from \"./utils/EventDispatcher.ts\";\nimport { addEventListeners } from \"./utils/EventUtils.ts\";\n\nconst _console = createConsole(\"DeviceManager\", { log: false });\n\nexport interface LocalStorageDeviceInformation {\n  type: DeviceType;\n  bluetoothId: string;\n  ipAddress?: string;\n  isWifiSecure?: boolean;\n}\n\nexport interface LocalStorageConfiguration {\n  devices: LocalStorageDeviceInformation[];\n}\n\nexport const DeviceManagerEventTypes = [\n  \"deviceConnected\",\n  \"deviceDisconnected\",\n  \"deviceIsConnected\",\n  \"availableDevices\",\n  \"connectedDevices\",\n] as const;\nexport type DeviceManagerEventType = (typeof DeviceManagerEventTypes)[number];\n\ninterface DeviceManagerEventMessage {\n  device: Device;\n}\nexport interface DeviceManagerEventMessages {\n  deviceConnected: DeviceManagerEventMessage;\n  deviceDisconnected: DeviceManagerEventMessage;\n  deviceIsConnected: DeviceManagerEventMessage;\n  availableDevices: { availableDevices: Device[] };\n  connectedDevices: { connectedDevices: Device[] };\n}\n\nexport type DeviceManagerEventDispatcher = EventDispatcher<\n  DeviceManager,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type DeviceManagerEventMap = EventMap<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type DeviceManagerEventListenerMap = EventListenerMap<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type DeviceManagerEvent = Event<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\nexport type BoundDeviceManagerEventListeners = BoundEventListeners<\n  typeof Device,\n  DeviceManagerEventType,\n  DeviceManagerEventMessages\n>;\n\nclass DeviceManager {\n  static readonly shared = new DeviceManager();\n\n  constructor() {\n    if (DeviceManager.shared && this != DeviceManager.shared) {\n      throw Error(\"DeviceManager is a singleton - use DeviceManager.shared\");\n    }\n\n    if (this.CanUseLocalStorage) {\n      this.UseLocalStorage = true;\n    }\n  }\n\n  // DEVICE LISTENERS\n  #boundDeviceEventListeners: BoundDeviceEventListeners = {\n    getType: this.#onDeviceType.bind(this),\n    isConnected: this.#OnDeviceIsConnected.bind(this),\n  };\n  /** @private */\n  onDevice(device: Device) {\n    addEventListeners(device, this.#boundDeviceEventListeners);\n  }\n\n  #onDeviceType(event: DeviceEventMap[\"getType\"]) {\n    if (this.#UseLocalStorage) {\n      this.#UpdateLocalStorageConfigurationForDevice(event.target);\n    }\n  }\n\n  // CONNECTION STATUS\n  /** @private */\n  OnDeviceConnectionStatusUpdated(\n    device: Device,\n    connectionStatus: ConnectionStatus\n  ) {\n    if (\n      connectionStatus == \"notConnected\" &&\n      !device.canReconnect &&\n      this.#AvailableDevices.includes(device)\n    ) {\n      const deviceIndex = this.#AvailableDevices.indexOf(device);\n      this.AvailableDevices.splice(deviceIndex, 1);\n      this.#DispatchAvailableDevices();\n    }\n  }\n\n  // CONNECTED DEVICES\n\n  #ConnectedDevices: Device[] = [];\n  get ConnectedDevices() {\n    return this.#ConnectedDevices;\n  }\n\n  #UseLocalStorage = false;\n  get UseLocalStorage() {\n    return this.#UseLocalStorage;\n  }\n  set UseLocalStorage(newUseLocalStorage) {\n    this.#AssertLocalStorage();\n    _console.assertTypeWithError(newUseLocalStorage, \"boolean\");\n    this.#UseLocalStorage = newUseLocalStorage;\n    if (this.#UseLocalStorage && !this.#LocalStorageConfiguration) {\n      this.#LoadFromLocalStorage();\n    }\n  }\n\n  #DefaultLocalStorageConfiguration: LocalStorageConfiguration = {\n    devices: [],\n  };\n  #LocalStorageConfiguration?: LocalStorageConfiguration;\n\n  get CanUseLocalStorage() {\n    return isInBrowser && window.localStorage;\n  }\n\n  #AssertLocalStorage() {\n    _console.assertWithError(\n      isInBrowser,\n      \"localStorage is only available in the browser\"\n    );\n    _console.assertWithError(window.localStorage, \"localStorage not found\");\n  }\n  #LocalStorageKey = \"BS.Device\";\n  #SaveToLocalStorage() {\n    this.#AssertLocalStorage();\n    localStorage.setItem(\n      this.#LocalStorageKey,\n      JSON.stringify(this.#LocalStorageConfiguration)\n    );\n  }\n  async #LoadFromLocalStorage() {\n    this.#AssertLocalStorage();\n    let localStorageString = localStorage.getItem(this.#LocalStorageKey);\n    if (typeof localStorageString != \"string\") {\n      _console.log(\"no info found in localStorage\");\n      this.#LocalStorageConfiguration = Object.assign(\n        {},\n        this.#DefaultLocalStorageConfiguration\n      );\n      this.#SaveToLocalStorage();\n      return;\n    }\n    try {\n      const configuration = JSON.parse(localStorageString);\n      _console.log({ configuration });\n      this.#LocalStorageConfiguration = configuration;\n      if (this.CanGetDevices) {\n        await this.GetDevices(); // redundant?\n      }\n    } catch (error) {\n      _console.error(error);\n    }\n  }\n\n  #UpdateLocalStorageConfigurationForDevice(device: Device) {\n    if (device.connectionType != \"webBluetooth\") {\n      _console.log(\"localStorage is only for webBluetooth devices\");\n      return;\n    }\n    this.#AssertLocalStorage();\n    const deviceInformationIndex =\n      this.#LocalStorageConfiguration!.devices.findIndex(\n        (deviceInformation) => {\n          return deviceInformation.bluetoothId == device.bluetoothId;\n        }\n      );\n    if (deviceInformationIndex == -1) {\n      return;\n    }\n    this.#LocalStorageConfiguration!.devices[deviceInformationIndex].type =\n      device.type;\n    this.#SaveToLocalStorage();\n  }\n\n  // AVAILABLE DEVICES\n  #AvailableDevices: Device[] = [];\n  get AvailableDevices() {\n    return this.#AvailableDevices;\n  }\n\n  get CanGetDevices() {\n    return isInBrowser && navigator.bluetooth?.getDevices;\n  }\n  /**\n   * retrieves devices already connected via web bluetooth in other tabs/windows\n   *\n   * _only available on web-bluetooth enabled browsers_\n   */\n  async GetDevices(): Promise<Device[] | undefined> {\n    if (!isInBrowser) {\n      _console.warn(\"GetDevices is only available in the browser\");\n      return;\n    }\n\n    if (!navigator.bluetooth) {\n      _console.warn(\"bluetooth is not available in this browser\");\n      return;\n    }\n\n    if (isInBluefy) {\n      _console.warn(\"bluefy lists too many devices...\");\n      return;\n    }\n\n    if (!navigator.bluetooth.getDevices) {\n      _console.warn(\"bluetooth.getDevices() is not available in this browser\");\n      return;\n    }\n\n    if (!this.CanGetDevices) {\n      _console.log(\"CanGetDevices is false\");\n      return;\n    }\n\n    if (!this.#LocalStorageConfiguration) {\n      this.#LoadFromLocalStorage();\n    }\n\n    const configuration = this.#LocalStorageConfiguration!;\n    if (!configuration.devices || configuration.devices.length == 0) {\n      _console.log(\"no devices found in configuration\");\n      return;\n    }\n\n    const bluetoothDevices = await navigator.bluetooth.getDevices();\n\n    _console.log({ bluetoothDevices });\n\n    bluetoothDevices.forEach((bluetoothDevice) => {\n      if (!bluetoothDevice.gatt) {\n        return;\n      }\n      let deviceInformation = configuration.devices.find(\n        (deviceInformation) =>\n          bluetoothDevice.id == deviceInformation.bluetoothId\n      );\n      if (!deviceInformation) {\n        return;\n      }\n\n      let existingConnectedDevice = this.ConnectedDevices.filter(\n        (device) => device.connectionType == \"webBluetooth\"\n      ).find((device) => device.bluetoothId == bluetoothDevice.id);\n\n      const existingAvailableDevice = this.AvailableDevices.filter(\n        (device) => device.connectionType == \"webBluetooth\"\n      ).find((device) => device.bluetoothId == bluetoothDevice.id);\n      if (existingAvailableDevice) {\n        if (\n          existingConnectedDevice &&\n          existingConnectedDevice?.bluetoothId ==\n            existingAvailableDevice.bluetoothId &&\n          existingConnectedDevice != existingAvailableDevice\n        ) {\n          this.AvailableDevices[\n            this.#AvailableDevices.indexOf(existingAvailableDevice)\n          ] = existingConnectedDevice;\n        }\n        return;\n      }\n\n      if (existingConnectedDevice) {\n        this.AvailableDevices.push(existingConnectedDevice);\n        return;\n      }\n\n      const device = new Device();\n      const connectionManager = new WebBluetoothConnectionManager();\n      connectionManager.device = bluetoothDevice;\n      if (bluetoothDevice.name) {\n        device._informationManager.updateName(bluetoothDevice.name);\n      }\n      device._informationManager.updateType(deviceInformation.type);\n      device.connectionManager = connectionManager;\n      this.AvailableDevices.push(device);\n    });\n    this.#DispatchAvailableDevices();\n    return this.AvailableDevices;\n  }\n\n  // STATIC EVENTLISTENERS\n\n  #EventDispatcher: DeviceManagerEventDispatcher = new EventDispatcher(\n    this as DeviceManager,\n    DeviceManagerEventTypes\n  );\n\n  get AddEventListener() {\n    return this.#EventDispatcher.addEventListener;\n  }\n  get #DispatchEvent() {\n    return this.#EventDispatcher.dispatchEvent;\n  }\n  get RemoveEventListener() {\n    return this.#EventDispatcher.removeEventListener;\n  }\n  get RemoveEventListeners() {\n    return this.#EventDispatcher.removeEventListeners;\n  }\n  get RemoveAllEventListeners() {\n    return this.#EventDispatcher.removeAllEventListeners;\n  }\n\n  #OnDeviceIsConnected(event: DeviceEventMap[\"isConnected\"]) {\n    const { target: device } = event;\n    if (device.isConnected) {\n      if (!this.#ConnectedDevices.includes(device)) {\n        _console.log(\"adding device\", device);\n        this.#ConnectedDevices.push(device);\n        if (this.UseLocalStorage && device.connectionType == \"webBluetooth\") {\n          const deviceInformation: LocalStorageDeviceInformation = {\n            type: device.type,\n            bluetoothId: device.bluetoothId!,\n            ipAddress: device.ipAddress,\n            isWifiSecure: device.isWifiSecure,\n          };\n          const deviceInformationIndex =\n            this.#LocalStorageConfiguration!.devices.findIndex(\n              (_deviceInformation) =>\n                _deviceInformation.bluetoothId == deviceInformation.bluetoothId\n            );\n          if (deviceInformationIndex == -1) {\n            this.#LocalStorageConfiguration!.devices.push(deviceInformation);\n          } else {\n            this.#LocalStorageConfiguration!.devices[deviceInformationIndex] =\n              deviceInformation;\n          }\n          this.#SaveToLocalStorage();\n        }\n        this.#DispatchEvent(\"deviceConnected\", { device });\n        this.#DispatchEvent(\"deviceIsConnected\", { device });\n        this.#DispatchConnectedDevices();\n      } else {\n        _console.log(\"device already included\");\n      }\n    } else {\n      if (this.#ConnectedDevices.includes(device)) {\n        _console.log(\"removing device\", device);\n        this.#ConnectedDevices.splice(\n          this.#ConnectedDevices.indexOf(device),\n          1\n        );\n        this.#DispatchEvent(\"deviceDisconnected\", { device });\n        this.#DispatchEvent(\"deviceIsConnected\", { device });\n        this.#DispatchConnectedDevices();\n      } else {\n        _console.log(\"device already not included\");\n      }\n    }\n    if (this.CanGetDevices) {\n      this.GetDevices();\n    }\n    if (device.isConnected && !this.AvailableDevices.includes(device)) {\n      const existingAvailableDevice = this.AvailableDevices.find(\n        (_device) => _device.bluetoothId == device.bluetoothId\n      );\n      _console.log({ existingAvailableDevice });\n      if (existingAvailableDevice) {\n        this.AvailableDevices[\n          this.AvailableDevices.indexOf(existingAvailableDevice)\n        ] = device;\n      } else {\n        this.AvailableDevices.push(device);\n      }\n      this.#DispatchAvailableDevices();\n    }\n    this._CheckDeviceAvailability(device);\n  }\n\n  _CheckDeviceAvailability(device: Device) {\n    if (\n      !device.isConnected &&\n      !device.isAvailable &&\n      this.#AvailableDevices.includes(device)\n    ) {\n      _console.log(\"removing device from availableDevices...\");\n      this.#AvailableDevices.splice(this.#AvailableDevices.indexOf(device), 1);\n      this.#DispatchAvailableDevices();\n    }\n  }\n\n  #DispatchAvailableDevices() {\n    _console.log({ AvailableDevices: this.AvailableDevices });\n    this.#DispatchEvent(\"availableDevices\", {\n      availableDevices: this.AvailableDevices,\n    });\n  }\n  #DispatchConnectedDevices() {\n    _console.log({ ConnectedDevices: this.ConnectedDevices });\n    this.#DispatchEvent(\"connectedDevices\", {\n      connectedDevices: this.ConnectedDevices,\n    });\n  }\n}\n\nexport default DeviceManager.shared;\n","import { DeviceEventTypes } from \"../Device.ts\";\nimport {\n  ConnectionMessageType,\n  ConnectionMessageTypes,\n} from \"../connection/BaseConnectionManager.ts\";\nimport { concatenateArrayBuffers } from \"../utils/ArrayBufferUtils.ts\";\nimport { createConsole } from \"../utils/Console.ts\";\nimport { DeviceEventType } from \"../Device.ts\";\n\nconst _console = createConsole(\"ServerUtils\", { log: false });\n\nexport const ServerMessageTypes = [\n  \"isScanningAvailable\",\n  \"isScanning\",\n  \"startScan\",\n  \"stopScan\",\n  \"discoveredDevice\",\n  \"discoveredDevices\",\n  \"expiredDiscoveredDevice\",\n  \"connectToDevice\",\n  \"disconnectFromDevice\",\n  \"connectedDevices\",\n  \"deviceMessage\",\n  \"requiredDeviceInformation\",\n] as const;\nexport type ServerMessageType = (typeof ServerMessageTypes)[number];\n\nexport const DeviceMessageTypes = [\n  \"connectionStatus\",\n  \"batteryLevel\",\n  \"deviceInformation\",\n  \"rx\",\n  \"smp\",\n] as const;\nexport type DeviceMessageType = (typeof DeviceMessageTypes)[number];\n\n// MESSAGING\n\nexport type MessageLike =\n  | number\n  | number[]\n  | ArrayBufferLike\n  | DataView\n  | boolean\n  | string\n  | any;\n\nexport interface Message<MessageType extends string> {\n  type: MessageType;\n  data?: MessageLike | MessageLike[];\n}\n\nexport function createMessage<MessageType extends string>(\n  enumeration: readonly MessageType[],\n  ...messages: (Message<MessageType> | MessageType)[]\n) {\n  _console.log(\"createMessage\", ...messages);\n\n  const messageBuffers = messages.map((message) => {\n    if (typeof message == \"string\") {\n      message = { type: message };\n    }\n\n    if (message.data != undefined) {\n      if (!Array.isArray(message.data)) {\n        message.data = [message.data];\n      }\n    } else {\n      message.data = [];\n    }\n\n    const messageDataArrayBuffer = concatenateArrayBuffers(...message.data);\n    const messageDataArrayBufferByteLength = messageDataArrayBuffer.byteLength;\n\n    _console.assertEnumWithError(message.type, enumeration);\n    const messageTypeEnum = enumeration.indexOf(message.type);\n\n    const messageDataLengthDataView = new DataView(new ArrayBuffer(2));\n    messageDataLengthDataView.setUint16(\n      0,\n      messageDataArrayBufferByteLength,\n      true\n    );\n\n    return concatenateArrayBuffers(\n      messageTypeEnum,\n      messageDataLengthDataView,\n      messageDataArrayBuffer\n    );\n  });\n  _console.log(\"messageBuffers\", ...messageBuffers);\n  return concatenateArrayBuffers(...messageBuffers);\n}\n\nexport type ServerMessage = ServerMessageType | Message<ServerMessageType>;\nexport function createServerMessage(...messages: ServerMessage[]) {\n  _console.log(\"createServerMessage\", ...messages);\n  return createMessage(ServerMessageTypes, ...messages);\n}\n\nexport type DeviceMessage = DeviceEventType | Message<DeviceEventType>;\nexport function createDeviceMessage(...messages: DeviceMessage[]) {\n  _console.log(\"createDeviceMessage\", ...messages);\n  return createMessage(DeviceEventTypes, ...messages);\n}\n\nexport type ClientDeviceMessage =\n  | ConnectionMessageType\n  | Message<ConnectionMessageType>;\nexport function createClientDeviceMessage(...messages: ClientDeviceMessage[]) {\n  _console.log(\"createClientDeviceMessage\", ...messages);\n  return createMessage(ConnectionMessageTypes, ...messages);\n}\n\n// STATIC MESSAGES\nexport const isScanningAvailableRequestMessage = createServerMessage(\n  \"isScanningAvailable\"\n);\nexport const isScanningRequestMessage = createServerMessage(\"isScanning\");\nexport const startScanRequestMessage = createServerMessage(\"startScan\");\nexport const stopScanRequestMessage = createServerMessage(\"stopScan\");\nexport const discoveredDevicesMessage =\n  createServerMessage(\"discoveredDevices\");\n","import { createConsole } from \"../../utils/Console.ts\";\nimport { createMessage, Message } from \"../ServerUtils.ts\";\n\nconst _console = createConsole(\"WebSocketUtils\", { log: false });\n\nexport const webSocketPingTimeout = 30_000;\nexport const webSocketReconnectTimeout = 3_000;\n\nexport const WebSocketMessageTypes = [\"ping\", \"pong\", \"serverMessage\"] as const;\nexport type WebSocketMessageType = (typeof WebSocketMessageTypes)[number];\n\nexport type WebSocketMessage =\n  | WebSocketMessageType\n  | Message<WebSocketMessageType>;\nexport function createWebSocketMessage(...messages: WebSocketMessage[]) {\n  _console.log(\"createWebSocketMessage\", ...messages);\n  return createMessage(WebSocketMessageTypes, ...messages);\n}\n\n// STATIC MESSAGES\nexport const webSocketPingMessage = createWebSocketMessage(\"ping\");\nexport const webSocketPongMessage = createWebSocketMessage(\"pong\");\n","import { DeviceInformationTypes } from \"../../DeviceInformationManager.ts\";\nimport {\n  createMessage,\n  Message,\n  MessageLike,\n} from \"../../server/ServerUtils.ts\";\nimport { webSocketPingTimeout } from \"../../server/websocket/WebSocketUtils.ts\";\nimport { createConsole } from \"../../utils/Console.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../../utils/EventUtils.ts\";\nimport { parseMessage } from \"../../utils/ParseUtils.ts\";\nimport { Timer } from \"../../utils/Timer.ts\";\nimport BaseConnectionManager, {\n  ConnectionType,\n} from \"../BaseConnectionManager.ts\";\nimport type * as ws from \"ws\";\n\nconst _console = createConsole(\"WebSocketConnectionManager\", { log: false });\n\nconst WebSocketMessageTypes = [\n  \"ping\",\n  \"pong\",\n  \"batteryLevel\",\n  \"deviceInformation\",\n  \"message\",\n] as const;\ntype WebSocketMessageType = (typeof WebSocketMessageTypes)[number];\n\ntype WebSocketMessage = WebSocketMessageType | Message<WebSocketMessageType>;\nfunction createWebSocketMessage(...messages: WebSocketMessage[]) {\n  _console.log(\"createWebSocketMessage\", ...messages);\n  return createMessage(WebSocketMessageTypes, ...messages);\n}\n\nconst WebSocketDeviceInformationMessageTypes: WebSocketMessageType[] = [\n  \"deviceInformation\",\n  \"batteryLevel\",\n];\n\nclass WebSocketConnectionManager extends BaseConnectionManager {\n  #bluetoothId?: string;\n  get bluetoothId() {\n    return this.#bluetoothId ?? \"\";\n  }\n\n  defaultMtu = 2 ** 10;\n\n  constructor(\n    ipAddress: string,\n    isSecure: boolean = false,\n    bluetoothId?: string\n  ) {\n    super();\n    this.ipAddress = ipAddress;\n    this.isSecure = isSecure;\n    this.mtu = this.defaultMtu;\n    this.#bluetoothId = bluetoothId;\n  }\n\n  get isAvailable() {\n    return true;\n  }\n\n  static get isSupported() {\n    return true;\n  }\n  static get type(): ConnectionType {\n    return \"webSocket\";\n  }\n\n  // WEBSOCKET\n  #webSocket?: WebSocket;\n  get webSocket() {\n    return this.#webSocket;\n  }\n  set webSocket(newWebSocket) {\n    if (this.#webSocket == newWebSocket) {\n      _console.log(\"redundant webSocket assignment\");\n      return;\n    }\n\n    _console.log(\"assigning webSocket\", newWebSocket);\n\n    if (this.#webSocket) {\n      removeEventListeners(this.#webSocket, this.#boundWebSocketEventListeners);\n      if (this.#webSocket.readyState == this.#webSocket.OPEN) {\n        this.#webSocket.close();\n      }\n    }\n\n    if (newWebSocket) {\n      addEventListeners(newWebSocket, this.#boundWebSocketEventListeners);\n    }\n    this.#webSocket = newWebSocket;\n\n    _console.log(\"assigned webSocket\");\n  }\n\n  // IP ADDRESS\n  #ipAddress!: string;\n  get ipAddress() {\n    return this.#ipAddress;\n  }\n  set ipAddress(newIpAddress) {\n    this.assertIsNotConnected();\n    if (this.#ipAddress == newIpAddress) {\n      _console.log(`redundnant ipAddress assignment \"${newIpAddress}\"`);\n      return;\n    }\n    this.#ipAddress = newIpAddress;\n    _console.log(`updated ipAddress to \"${this.ipAddress}\"`);\n  }\n\n  // IS SECURE\n  #isSecure = false;\n  get isSecure() {\n    return this.#isSecure;\n  }\n  set isSecure(newIsSecure) {\n    this.assertIsNotConnected();\n    if (this.#isSecure == newIsSecure) {\n      _console.log(`redundant isSecure assignment ${newIsSecure}`);\n      return;\n    }\n    this.#isSecure = newIsSecure;\n    _console.log(`updated isSecure to \"${this.isSecure}\"`);\n  }\n\n  // URL\n  get url() {\n    return `${this.isSecure ? \"wss\" : \"ws\"}://${this.ipAddress}/ws`;\n  }\n\n  // CONNECTION\n  async connect() {\n    await super.connect();\n    try {\n      this.webSocket = new WebSocket(this.url);\n    } catch (error) {\n      _console.error(\"error connecting to webSocket\", error);\n      this.status = \"notConnected\";\n    }\n  }\n  async disconnect() {\n    await super.disconnect();\n    _console.log(\"closing websocket\");\n    this.#pingTimer.stop();\n    this.#webSocket?.close();\n  }\n\n  get canReconnect() {\n    return Boolean(this.webSocket);\n  }\n  async reconnect() {\n    await super.reconnect();\n    this.webSocket = new WebSocket(this.url);\n  }\n\n  // BASE CONNECTION MANAGER\n  async sendSmpMessage(data: ArrayBuffer) {\n    super.sendSmpMessage(data);\n    _console.error(\"smp not supported on webSockets\");\n  }\n\n  async sendTxData(data: ArrayBuffer) {\n    await super.sendTxData(data);\n    if (data.byteLength == 0) {\n      return;\n    }\n    this.#sendWebSocketMessage({ type: \"message\", data });\n  }\n\n  // WEBSOCKET MESSAGING\n  #sendMessage(message: MessageLike) {\n    this.assertIsConnected();\n    _console.log(\"sending webSocket message\", message);\n    this.#webSocket!.send(message);\n    this.#pingTimer.restart();\n  }\n\n  #sendWebSocketMessage(...messages: WebSocketMessage[]) {\n    this.#sendMessage(createWebSocketMessage(...messages));\n  }\n\n  // WEBSOCKET EVENTS\n  #boundWebSocketEventListeners: { [eventType: string]: Function } = {\n    open: this.#onWebSocketOpen.bind(this),\n    message: this.#onWebSocketMessage.bind(this),\n    close: this.#onWebSocketClose.bind(this),\n    error: this.#onWebSocketError.bind(this),\n  };\n\n  #onWebSocketOpen(event: ws.Event) {\n    _console.log(\"webSocket.open\", event);\n    this.#pingTimer.start();\n    this.status = \"connected\";\n    this.#requestDeviceInformation();\n  }\n  async #onWebSocketMessage(event: ws.MessageEvent) {\n    // this.#pingTimer.restart();\n    //@ts-expect-error\n    const arrayBuffer = await event.data.arrayBuffer();\n    const dataView = new DataView(arrayBuffer);\n    _console.log(`webSocket.message (${dataView.byteLength} bytes)`);\n    this.#parseWebSocketMessage(dataView);\n  }\n  #onWebSocketClose(event: ws.CloseEvent) {\n    _console.log(\"webSocket.close\", event);\n    this.status = \"notConnected\";\n    this.#pingTimer.stop();\n  }\n  #onWebSocketError(event: ws.ErrorEvent) {\n    _console.error(\"webSocket.error\", event);\n  }\n\n  // PARSING\n  #parseWebSocketMessage(dataView: DataView) {\n    parseMessage(\n      dataView,\n      WebSocketMessageTypes,\n      this.#onMessage.bind(this),\n      null,\n      true\n    );\n  }\n\n  #onMessage(messageType: WebSocketMessageType, dataView: DataView) {\n    _console.log(\n      `received \"${messageType}\" message (${dataView.byteLength} bytes)`\n    );\n    switch (messageType) {\n      case \"ping\":\n        this.#pong();\n        break;\n      case \"pong\":\n        break;\n      case \"batteryLevel\":\n        this.onMessageReceived?.(\"batteryLevel\", dataView);\n        break;\n      case \"deviceInformation\":\n        parseMessage(\n          dataView,\n          DeviceInformationTypes,\n          (deviceInformationType, dataView) => {\n            this.onMessageReceived!(deviceInformationType, dataView);\n          }\n        );\n        break;\n      case \"message\":\n        this.parseRxMessage(dataView);\n        break;\n      default:\n        _console.error(`uncaught messageType \"${messageType}\"`);\n        break;\n    }\n  }\n\n  // PING\n  #pingTimer = new Timer(this.#ping.bind(this), webSocketPingTimeout - 1_000);\n  #ping() {\n    _console.log(\"pinging\");\n    this.#sendWebSocketMessage(\"ping\");\n  }\n  #pong() {\n    _console.log(\"ponging\");\n    this.#sendWebSocketMessage(\"pong\");\n  }\n\n  // DEVICE INFORMATION\n  #requestDeviceInformation() {\n    this.#sendWebSocketMessage(...WebSocketDeviceInformationMessageTypes);\n  }\n\n  remove() {\n    super.remove();\n    this.webSocket = undefined;\n  }\n}\n\nexport default WebSocketConnectionManager;\n","import { createConsole } from \"./utils/Console.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n  EventListenerMap,\n  EventMap,\n} from \"./utils/EventDispatcher.ts\";\nimport BaseConnectionManager, {\n  TxMessage,\n  TxRxMessageType,\n  ConnectionStatus,\n  ConnectionMessageType,\n  MetaConnectionMessageTypes,\n  BatteryLevelMessageTypes,\n  ConnectionEventTypes,\n  ConnectionStatusEventMessages,\n  ConnectionTypes,\n  ConnectionType,\n  ConnectOptions,\n} from \"./connection/BaseConnectionManager.ts\";\nimport { isInBrowser, isInNode } from \"./utils/environment.ts\";\nimport WebBluetoothConnectionManager from \"./connection/bluetooth/WebBluetoothConnectionManager.ts\";\nimport SensorConfigurationManager, {\n  SendSensorConfigurationMessageCallback,\n  SensorConfiguration,\n  SensorConfigurationEventDispatcher,\n  SensorConfigurationEventMessages,\n  SensorConfigurationEventTypes,\n  SensorConfigurationMessageType,\n  SensorConfigurationMessageTypes,\n} from \"./sensor/SensorConfigurationManager.ts\";\nimport SensorDataManager, {\n  SensorDataEventMessages,\n  SensorDataEventTypes,\n  SensorDataMessageType,\n  SensorDataMessageTypes,\n  SensorType,\n  ContinuousSensorTypes,\n  SensorDataEventDispatcher,\n  RequiredPressureMessageTypes,\n} from \"./sensor/SensorDataManager.ts\";\nimport VibrationManager, {\n  SendVibrationMessageCallback,\n  VibrationConfiguration,\n  VibrationEventDispatcher,\n  VibrationEventTypes,\n  VibrationMessageType,\n  VibrationMessageTypes,\n} from \"./vibration/VibrationManager.ts\";\nimport FileTransferManager, {\n  FileTransferEventTypes,\n  FileTransferEventMessages,\n  FileTransferEventDispatcher,\n  SendFileTransferMessageCallback,\n  FileTransferMessageTypes,\n  FileTransferMessageType,\n  FileType,\n  FileTypes,\n  RequiredFileTransferMessageTypes,\n  SendFileCallback,\n} from \"./FileTransferManager.ts\";\nimport TfliteManager, {\n  TfliteEventTypes,\n  TfliteEventMessages,\n  TfliteEventDispatcher,\n  SendTfliteMessageCallback,\n  TfliteMessageTypes,\n  TfliteMessageType,\n  TfliteSensorTypes,\n  TfliteFileConfiguration,\n  TfliteSensorType,\n  RequiredTfliteMessageTypes,\n} from \"./TfliteManager.ts\";\nimport FirmwareManager, {\n  FirmwareEventDispatcher,\n  FirmwareEventMessages,\n  FirmwareEventTypes,\n  FirmwareMessageType,\n  FirmwareMessageTypes,\n} from \"./FirmwareManager.ts\";\nimport DeviceInformationManager, {\n  DeviceInformationEventDispatcher,\n  DeviceInformationEventTypes,\n  DeviceInformationType,\n  DeviceInformationTypes,\n  DeviceInformationEventMessages,\n} from \"./DeviceInformationManager.ts\";\nimport InformationManager, {\n  DeviceType,\n  InformationEventDispatcher,\n  InformationEventTypes,\n  InformationMessageType,\n  InformationMessageTypes,\n  InformationEventMessages,\n  SendInformationMessageCallback,\n} from \"./InformationManager.ts\";\nimport { FileLike } from \"./utils/ArrayBufferUtils.ts\";\nimport DeviceManager from \"./DeviceManager.ts\";\nimport CameraManager, {\n  CameraEventDispatcher,\n  CameraEventMessages,\n  CameraEventTypes,\n  CameraMessageType,\n  CameraMessageTypes,\n  RequiredCameraMessageTypes,\n  SendCameraMessageCallback,\n} from \"./CameraManager.ts\";\nimport MicrophoneManager, {\n  MicrophoneEventDispatcher,\n  MicrophoneEventMessages,\n  MicrophoneEventTypes,\n  MicrophoneMessageType,\n  MicrophoneMessageTypes,\n  RequiredMicrophoneMessageTypes,\n  SendMicrophoneMessageCallback,\n} from \"./MicrophoneManager.ts\";\nimport DisplayManager, {\n  DisplayEventDispatcher,\n  DisplayEventMessages,\n  DisplayEventTypes,\n  DisplayMessageType,\n  DisplayMessageTypes,\n  RequiredDisplayMessageTypes,\n  SendDisplayMessageCallback,\n} from \"./DisplayManager.ts\";\nimport WifiManager, {\n  RequiredWifiMessageTypes,\n  SendWifiMessageCallback,\n  WifiEventDispatcher,\n  WifiEventMessages,\n  WifiEventTypes,\n  WifiMessageType,\n  WifiMessageTypes,\n} from \"./WifiManager.ts\";\nimport WebSocketConnectionManager from \"./connection/websocket/WebSocketConnectionManager.ts\";\nimport ClientConnectionManager from \"./connection/ClientConnectionManager.ts\";\n\n/** NODE_START */\nimport UDPConnectionManager from \"./connection/udp/UDPConnectionManager.ts\";\nimport { DisplayManagerInterface } from \"./utils/DisplayManagerInterface.ts\";\n/** NODE_END */\n\nconst _console = createConsole(\"Device\", { log: false });\n\nexport const DeviceEventTypes = [\n  \"connectionMessage\",\n  ...ConnectionEventTypes,\n  ...MetaConnectionMessageTypes,\n  ...BatteryLevelMessageTypes,\n  ...InformationEventTypes,\n  ...DeviceInformationEventTypes,\n  ...SensorConfigurationEventTypes,\n  ...SensorDataEventTypes,\n  ...VibrationEventTypes,\n  ...FileTransferEventTypes,\n  ...TfliteEventTypes,\n  ...WifiEventTypes,\n  ...CameraEventTypes,\n  ...MicrophoneEventTypes,\n  ...DisplayEventTypes,\n  ...FirmwareEventTypes,\n] as const;\nexport type DeviceEventType = (typeof DeviceEventTypes)[number];\n\nexport interface DeviceEventMessages\n  extends ConnectionStatusEventMessages,\n    DeviceInformationEventMessages,\n    InformationEventMessages,\n    SensorDataEventMessages,\n    SensorConfigurationEventMessages,\n    TfliteEventMessages,\n    FileTransferEventMessages,\n    WifiEventMessages,\n    CameraEventMessages,\n    MicrophoneEventMessages,\n    DisplayEventMessages,\n    FirmwareEventMessages {\n  batteryLevel: { batteryLevel: number };\n  connectionMessage: { messageType: ConnectionMessageType; dataView: DataView };\n}\n\nexport type SendMessageCallback<MessageType extends string> = (\n  messages?: { type: MessageType; data?: ArrayBuffer }[],\n  sendImmediately?: boolean\n) => Promise<void>;\n\nexport type SendSmpMessageCallback = (data: ArrayBuffer) => Promise<void>;\n\nexport type DeviceEventDispatcher = EventDispatcher<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\nexport type DeviceEvent = Event<Device, DeviceEventType, DeviceEventMessages>;\nexport type DeviceEventMap = EventMap<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\nexport type DeviceEventListenerMap = EventListenerMap<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\nexport type BoundDeviceEventListeners = BoundEventListeners<\n  Device,\n  DeviceEventType,\n  DeviceEventMessages\n>;\n\nexport const RequiredInformationConnectionMessages: TxRxMessageType[] = [\n  \"isCharging\",\n  \"getBatteryCurrent\",\n  \"getId\",\n  \"getMtu\",\n\n  \"getName\",\n  \"getType\",\n  \"getCurrentTime\",\n  \"getSensorConfiguration\",\n  \"getSensorScalars\",\n\n  \"getVibrationLocations\",\n\n  \"getFileTypes\",\n\n  \"isWifiAvailable\",\n];\n\nclass Device {\n  get bluetoothId() {\n    return this.#connectionManager?.bluetoothId;\n  }\n\n  get isAvailable() {\n    return this.#connectionManager?.isAvailable;\n  }\n\n  constructor() {\n    this.#deviceInformationManager.eventDispatcher = this\n      .#eventDispatcher as DeviceInformationEventDispatcher;\n\n    this._informationManager.sendMessage = this\n      .sendTxMessages as SendInformationMessageCallback;\n    this._informationManager.eventDispatcher = this\n      .#eventDispatcher as InformationEventDispatcher;\n\n    this.#sensorConfigurationManager.sendMessage = this\n      .sendTxMessages as SendSensorConfigurationMessageCallback;\n    this.#sensorConfigurationManager.eventDispatcher = this\n      .#eventDispatcher as SensorConfigurationEventDispatcher;\n\n    this.#sensorDataManager.eventDispatcher = this\n      .#eventDispatcher as SensorDataEventDispatcher;\n\n    this.#vibrationManager.sendMessage = this\n      .sendTxMessages as SendVibrationMessageCallback;\n    this.#vibrationManager.eventDispatcher = this\n      .#eventDispatcher as VibrationEventDispatcher;\n\n    this.#tfliteManager.sendMessage = this\n      .sendTxMessages as SendTfliteMessageCallback;\n    this.#tfliteManager.eventDispatcher = this\n      .#eventDispatcher as TfliteEventDispatcher;\n\n    this.#fileTransferManager.sendMessage = this\n      .sendTxMessages as SendFileTransferMessageCallback;\n    this.#fileTransferManager.eventDispatcher = this\n      .#eventDispatcher as FileTransferEventDispatcher;\n\n    this.#wifiManager.sendMessage = this\n      .sendTxMessages as SendWifiMessageCallback;\n    this.#wifiManager.eventDispatcher = this\n      .#eventDispatcher as WifiEventDispatcher;\n\n    this.#cameraManager.sendMessage = this\n      .sendTxMessages as SendCameraMessageCallback;\n    this.#cameraManager.eventDispatcher = this\n      .#eventDispatcher as CameraEventDispatcher;\n\n    this.#microphoneManager.sendMessage = this\n      .sendTxMessages as SendMicrophoneMessageCallback;\n    this.#microphoneManager.eventDispatcher = this\n      .#eventDispatcher as MicrophoneEventDispatcher;\n\n    this.#displayManager.sendMessage = this\n      .sendTxMessages as SendDisplayMessageCallback;\n    this.#displayManager.eventDispatcher = this\n      .#eventDispatcher as DisplayEventDispatcher;\n    this.#displayManager.sendFile = this.#fileTransferManager\n      .send as SendFileCallback;\n\n    this.#firmwareManager.sendMessage = this\n      .sendSmpMessage as SendSmpMessageCallback;\n    this.#firmwareManager.eventDispatcher = this\n      .#eventDispatcher as FirmwareEventDispatcher;\n\n    this.addEventListener(\"getMtu\", () => {\n      this.#firmwareManager.mtu = this.mtu;\n      this.#fileTransferManager.mtu = this.mtu;\n      this.connectionManager!.mtu = this.mtu;\n      this.#displayManager.mtu = this.mtu;\n    });\n    this.addEventListener(\"getSensorConfiguration\", () => {\n      if (this.connectionStatus != \"connecting\") {\n        return;\n      }\n      if (this.sensorTypes.includes(\"pressure\")) {\n        _console.log(\"requesting required pressure information\");\n        const messages = RequiredPressureMessageTypes.map((messageType) => ({\n          type: messageType,\n        }));\n        this.sendTxMessages(messages, false);\n      } else {\n        _console.log(\"don't need to request pressure infomration\");\n      }\n\n      if (this.sensorTypes.includes(\"camera\")) {\n        _console.log(\"requesting required camera information\");\n        const messages = RequiredCameraMessageTypes.map((messageType) => ({\n          type: messageType,\n        }));\n        this.sendTxMessages(messages, false);\n      } else {\n        _console.log(\"don't need to request camera infomration\");\n      }\n\n      if (this.sensorTypes.includes(\"microphone\")) {\n        _console.log(\"requesting required microphone information\");\n        const messages = RequiredMicrophoneMessageTypes.map((messageType) => ({\n          type: messageType,\n        }));\n        this.sendTxMessages(messages, false);\n      } else {\n        _console.log(\"don't need to request microphone infomration\");\n      }\n    });\n    this.addEventListener(\"getFileTypes\", () => {\n      if (this.connectionStatus != \"connecting\") {\n        return;\n      }\n      if (this.fileTypes.length > 0) {\n        this.#fileTransferManager.requestRequiredInformation();\n      }\n      if (this.fileTypes.includes(\"tflite\")) {\n        this.#tfliteManager.requestRequiredInformation();\n      }\n    });\n    this.addEventListener(\"isWifiAvailable\", () => {\n      if (this.connectionStatus != \"connecting\") {\n        return;\n      }\n      if (this.connectionType == \"client\" && !isInNode) {\n        return;\n      }\n      if (this.isWifiAvailable) {\n        if (this.connectionType != \"client\") {\n          this.#wifiManager.requestRequiredInformation();\n        }\n      }\n    });\n    this.addEventListener(\"getType\", () => {\n      if (this.connectionStatus != \"connecting\") {\n        return;\n      }\n      if (this.type == \"glasses\") {\n        this.#displayManager.requestRequiredInformation();\n      }\n    });\n    this.addEventListener(\"fileTransferProgress\", (event) => {\n      const { fileType, progress } = event.message;\n      switch (fileType) {\n        case \"spriteSheet\":\n          this.#dispatchEvent(\"displaySpriteSheetUploadProgress\", {\n            spriteSheet: this.#displayManager.pendingSpriteSheet!,\n            spriteSheetName: this.#displayManager.pendingSpriteSheetName!,\n            progress,\n          });\n          break;\n        default:\n          break;\n      }\n    });\n    this.addEventListener(\"fileTransferStatus\", (event) => {\n      const { fileType, fileTransferStatus } = event.message;\n      switch (fileType) {\n        case \"spriteSheet\":\n          if (fileTransferStatus == \"sending\") {\n            this.#dispatchEvent(\"displaySpriteSheetUploadStart\", {\n              spriteSheet: this.#displayManager.pendingSpriteSheet!,\n              spriteSheetName: this.#displayManager.pendingSpriteSheetName!,\n            });\n          }\n          break;\n        default:\n          break;\n      }\n    });\n    DeviceManager.onDevice(this);\n    if (isInBrowser) {\n      window.addEventListener(\"beforeunload\", () => {\n        if (this.isConnected && this.clearSensorConfigurationOnLeave) {\n          this.clearSensorConfiguration();\n        }\n      });\n    }\n    if (isInNode) {\n      /** can add more node leave handlers https://gist.github.com/hyrious/30a878f6e6a057f09db87638567cb11a */\n      process.on(\"exit\", () => {\n        if (this.isConnected && this.clearSensorConfigurationOnLeave) {\n          this.clearSensorConfiguration();\n        }\n      });\n    }\n  }\n\n  static #DefaultConnectionManager(): BaseConnectionManager {\n    return new WebBluetoothConnectionManager();\n  }\n\n  #eventDispatcher: DeviceEventDispatcher = new EventDispatcher(\n    this as Device,\n    DeviceEventTypes\n  );\n  get addEventListener() {\n    return this.#eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.#eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.#eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.#eventDispatcher.waitForEvent;\n  }\n  get removeEventListeners() {\n    return this.#eventDispatcher.removeEventListeners;\n  }\n  get removeAllEventListeners() {\n    return this.#eventDispatcher.removeAllEventListeners;\n  }\n\n  // CONNECTION MANAGER\n\n  #connectionManager?: BaseConnectionManager;\n  get connectionManager() {\n    return this.#connectionManager;\n  }\n  set connectionManager(newConnectionManager) {\n    if (this.connectionManager == newConnectionManager) {\n      _console.log(\"same connectionManager is already assigned\");\n      return;\n    }\n\n    if (this.connectionManager) {\n      this.connectionManager.remove();\n    }\n    if (newConnectionManager) {\n      newConnectionManager.onStatusUpdated =\n        this.#onConnectionStatusUpdated.bind(this);\n      newConnectionManager.onMessageReceived =\n        this.#onConnectionMessageReceived.bind(this);\n      newConnectionManager.onMessagesReceived =\n        this.#onConnectionMessagesReceived.bind(this);\n    }\n\n    this.#connectionManager = newConnectionManager;\n    _console.log(\"assigned new connectionManager\", this.#connectionManager);\n\n    this._informationManager.connectionType = this.connectionType;\n  }\n  async #sendTxMessages(messages?: TxMessage[], sendImmediately?: boolean) {\n    await this.#connectionManager?.sendTxMessages(messages, sendImmediately);\n  }\n  private sendTxMessages = this.#sendTxMessages.bind(this);\n\n  async connect(options?: ConnectOptions) {\n    _console.log(\"connect options\", options);\n    if (options) {\n      switch (options.type) {\n        case \"webBluetooth\":\n          if (this.connectionType != \"webBluetooth\") {\n            this.connectionManager = new WebBluetoothConnectionManager();\n          }\n          break;\n        case \"webSocket\":\n          {\n            let createConnectionManager = false;\n            if (this.connectionType == \"webSocket\") {\n              const connectionManager = this\n                .connectionManager as WebSocketConnectionManager;\n              if (\n                connectionManager.ipAddress != options.ipAddress ||\n                connectionManager.isSecure != options.isWifiSecure\n              ) {\n                createConnectionManager = true;\n              }\n            } else {\n              createConnectionManager = true;\n            }\n            if (createConnectionManager) {\n              this.connectionManager = new WebSocketConnectionManager(\n                options.ipAddress,\n                options.isWifiSecure,\n                this.bluetoothId\n              );\n            }\n          }\n\n          break;\n        case \"udp\":\n          {\n            let createConnectionManager = false;\n            if (this.connectionType == \"udp\") {\n              const connectionManager = this\n                .connectionManager as UDPConnectionManager;\n              if (connectionManager.ipAddress != options.ipAddress) {\n                createConnectionManager = true;\n              }\n              this.reconnectOnDisconnection = true;\n            } else {\n              createConnectionManager = true;\n            }\n            if (createConnectionManager) {\n              this.connectionManager = new UDPConnectionManager(\n                options.ipAddress,\n                this.bluetoothId\n              );\n            }\n          }\n          break;\n      }\n    }\n    if (!this.connectionManager) {\n      this.connectionManager = Device.#DefaultConnectionManager();\n    }\n    this.#clear();\n\n    if (options?.type == \"client\") {\n      _console.assertWithError(\n        this.connectionType == \"client\",\n        \"expected clientConnectionManager\"\n      );\n      const clientConnectionManager = this\n        .connectionManager as ClientConnectionManager;\n      clientConnectionManager.subType = options.subType;\n      return clientConnectionManager.connect();\n    }\n    _console.log(\"connectionManager type\", this.connectionManager.type);\n    return this.connectionManager.connect();\n  }\n  #isConnected = false;\n  get isConnected() {\n    return this.#isConnected;\n  }\n  /** @throws {Error} if not connected */\n  #assertIsConnected() {\n    _console.assertWithError(this.isConnected, \"notConnected\");\n  }\n\n  #didReceiveMessageTypes(messageTypes: ConnectionMessageType[]) {\n    return messageTypes.every((messageType) => {\n      const hasConnectionMessage =\n        this.latestConnectionMessages.has(messageType);\n      if (!hasConnectionMessage) {\n        _console.log(`didn't receive \"${messageType}\" message`);\n      }\n      return hasConnectionMessage;\n    });\n  }\n  get #hasRequiredInformation() {\n    let hasRequiredInformation = this.#didReceiveMessageTypes(\n      RequiredInformationConnectionMessages\n    );\n    if (hasRequiredInformation && this.sensorTypes.includes(\"pressure\")) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredPressureMessageTypes\n      );\n    }\n    if (hasRequiredInformation && this.isWifiAvailable) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredWifiMessageTypes\n      );\n    }\n    if (hasRequiredInformation && this.fileTypes.length > 0) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredFileTransferMessageTypes\n      );\n    }\n    if (hasRequiredInformation && this.fileTypes.includes(\"tflite\")) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredTfliteMessageTypes\n      );\n    }\n    if (hasRequiredInformation && this.hasCamera) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredCameraMessageTypes\n      );\n    }\n    if (hasRequiredInformation && this.hasMicrophone) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredMicrophoneMessageTypes\n      );\n    }\n    if (hasRequiredInformation && this.isDisplayAvailable) {\n      hasRequiredInformation = this.#didReceiveMessageTypes(\n        RequiredDisplayMessageTypes\n      );\n    }\n    return hasRequiredInformation;\n  }\n  #requestRequiredInformation() {\n    _console.log(\"requesting required information\");\n    const messages: TxMessage[] = RequiredInformationConnectionMessages.map(\n      (messageType) => ({\n        type: messageType,\n      })\n    );\n    this.#sendTxMessages(messages);\n  }\n\n  get canReconnect() {\n    return this.connectionManager?.canReconnect;\n  }\n  #assertCanReconnect() {\n    _console.assertWithError(this.canReconnect, \"cannot reconnect to device\");\n  }\n  async reconnect() {\n    this.#assertCanReconnect();\n    this.#clear();\n    return this.connectionManager?.reconnect();\n  }\n\n  static async Connect() {\n    const device = new Device();\n    await device.connect();\n    return device;\n  }\n\n  static #ReconnectOnDisconnection = false;\n  static get ReconnectOnDisconnection() {\n    return this.#ReconnectOnDisconnection;\n  }\n  static set ReconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this.#ReconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n\n  #reconnectOnDisconnection = Device.ReconnectOnDisconnection;\n  get reconnectOnDisconnection() {\n    return this.#reconnectOnDisconnection;\n  }\n  set reconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this.#reconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n  #reconnectIntervalId?: NodeJS.Timeout | number;\n\n  get connectionType() {\n    return this.connectionManager?.type;\n  }\n  async disconnect() {\n    this.#assertIsConnected();\n    if (this.reconnectOnDisconnection) {\n      this.reconnectOnDisconnection = false;\n      this.addEventListener(\n        \"isConnected\",\n        () => {\n          this.reconnectOnDisconnection = true;\n        },\n        { once: true }\n      );\n    }\n\n    return this.connectionManager!.disconnect();\n  }\n\n  toggleConnection() {\n    if (this.isConnected) {\n      this.disconnect();\n    } else if (this.canReconnect) {\n      try {\n        this.reconnect();\n      } catch (error) {\n        _console.error(\"error trying to reconnect\", error);\n        this.connect();\n      }\n    } else {\n      this.connect();\n    }\n  }\n\n  get connectionStatus(): ConnectionStatus {\n    switch (this.#connectionManager?.status) {\n      case \"connected\":\n        return this.isConnected ? \"connected\" : \"connecting\";\n      case \"notConnected\":\n      case \"connecting\":\n      case \"disconnecting\":\n        return this.#connectionManager.status;\n      default:\n        return \"notConnected\";\n    }\n  }\n  get isConnectionBusy() {\n    return (\n      this.connectionStatus == \"connecting\" ||\n      this.connectionStatus == \"disconnecting\"\n    );\n  }\n\n  #onConnectionStatusUpdated(connectionStatus: ConnectionStatus) {\n    _console.log({ connectionStatus });\n\n    if (connectionStatus == \"notConnected\") {\n      this.#clearConnection();\n\n      if (this.canReconnect && this.reconnectOnDisconnection) {\n        _console.log(\"starting reconnect interval...\");\n        this.#reconnectIntervalId = setInterval(() => {\n          _console.log(\"attempting reconnect...\");\n          this.reconnect();\n        }, 1000);\n      }\n    } else {\n      if (this.#reconnectIntervalId != undefined) {\n        _console.log(\"clearing reconnect interval\");\n        clearInterval(this.#reconnectIntervalId);\n        this.#reconnectIntervalId = undefined;\n      }\n    }\n\n    this.#checkConnection();\n\n    if (connectionStatus == \"connected\" && !this.#isConnected) {\n      if (this.connectionType != \"client\") {\n        this.#requestRequiredInformation();\n      }\n    }\n\n    DeviceManager.OnDeviceConnectionStatusUpdated(this, connectionStatus);\n  }\n\n  #dispatchConnectionEvents(includeIsConnected: boolean = false) {\n    this.#dispatchEvent(\"connectionStatus\", {\n      connectionStatus: this.connectionStatus,\n    });\n    this.#dispatchEvent(this.connectionStatus, {});\n    if (includeIsConnected) {\n      this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n    }\n  }\n  #checkConnection() {\n    this.#isConnected =\n      Boolean(this.connectionManager?.isConnected) &&\n      this.#hasRequiredInformation &&\n      this._informationManager.isCurrentTimeSet;\n\n    switch (this.connectionStatus) {\n      case \"connected\":\n        if (this.#isConnected) {\n          this.#dispatchConnectionEvents(true);\n        }\n        break;\n      case \"notConnected\":\n        this.#dispatchConnectionEvents(true);\n        break;\n      default:\n        this.#dispatchConnectionEvents(false);\n        break;\n    }\n  }\n\n  #clear() {\n    this.#clearConnection();\n    this._informationManager.clear();\n    this.#deviceInformationManager.clear();\n    this.#tfliteManager.clear();\n    this.#fileTransferManager.clear();\n    this.#wifiManager.clear();\n    this.#cameraManager.clear();\n    this.#microphoneManager.clear();\n    this.#sensorConfigurationManager.clear();\n    this.#displayManager.reset();\n  }\n  #clearConnection() {\n    this.connectionManager?.clear();\n    this.latestConnectionMessages.clear();\n  }\n\n  #onConnectionMessageReceived(\n    messageType: ConnectionMessageType,\n    dataView: DataView\n  ) {\n    _console.log({ messageType, dataView });\n    switch (messageType) {\n      case \"batteryLevel\":\n        const batteryLevel = dataView.getUint8(0);\n        _console.log(\"received battery level\", { batteryLevel });\n        this.#updateBatteryLevel(batteryLevel);\n        break;\n\n      default:\n        if (\n          FileTransferMessageTypes.includes(\n            messageType as FileTransferMessageType\n          )\n        ) {\n          this.#fileTransferManager.parseMessage(\n            messageType as FileTransferMessageType,\n            dataView\n          );\n        } else if (\n          TfliteMessageTypes.includes(messageType as TfliteMessageType)\n        ) {\n          this.#tfliteManager.parseMessage(\n            messageType as TfliteMessageType,\n            dataView\n          );\n        } else if (\n          SensorDataMessageTypes.includes(messageType as SensorDataMessageType)\n        ) {\n          this.#sensorDataManager.parseMessage(\n            messageType as SensorDataMessageType,\n            dataView\n          );\n        } else if (\n          FirmwareMessageTypes.includes(messageType as FirmwareMessageType)\n        ) {\n          this.#firmwareManager.parseMessage(\n            messageType as FirmwareMessageType,\n            dataView\n          );\n        } else if (\n          DeviceInformationTypes.includes(messageType as DeviceInformationType)\n        ) {\n          this.#deviceInformationManager.parseMessage(\n            messageType as DeviceInformationType,\n            dataView\n          );\n        } else if (\n          InformationMessageTypes.includes(\n            messageType as InformationMessageType\n          )\n        ) {\n          this._informationManager.parseMessage(\n            messageType as InformationMessageType,\n            dataView\n          );\n        } else if (\n          SensorConfigurationMessageTypes.includes(\n            messageType as SensorConfigurationMessageType\n          )\n        ) {\n          this.#sensorConfigurationManager.parseMessage(\n            messageType as SensorConfigurationMessageType,\n            dataView\n          );\n        } else if (\n          VibrationMessageTypes.includes(messageType as VibrationMessageType)\n        ) {\n          this.#vibrationManager.parseMessage(\n            messageType as VibrationMessageType,\n            dataView\n          );\n        } else if (WifiMessageTypes.includes(messageType as WifiMessageType)) {\n          this.#wifiManager.parseMessage(\n            messageType as WifiMessageType,\n            dataView\n          );\n        } else if (\n          CameraMessageTypes.includes(messageType as CameraMessageType)\n        ) {\n          this.#cameraManager.parseMessage(\n            messageType as CameraMessageType,\n            dataView\n          );\n        } else if (\n          MicrophoneMessageTypes.includes(messageType as MicrophoneMessageType)\n        ) {\n          this.#microphoneManager.parseMessage(\n            messageType as MicrophoneMessageType,\n            dataView\n          );\n        } else if (\n          DisplayMessageTypes.includes(messageType as DisplayMessageType)\n        ) {\n          this.#displayManager.parseMessage(\n            messageType as DisplayMessageType,\n            dataView\n          );\n        } else {\n          throw Error(`uncaught messageType ${messageType}`);\n        }\n    }\n\n    this.latestConnectionMessages.set(messageType, dataView);\n    if (messageType.startsWith(\"set\")) {\n      this.latestConnectionMessages.set(\n        // @ts-expect-error\n        messageType.replace(\"set\", \"get\"),\n        dataView\n      );\n    }\n    this.#dispatchEvent(\"connectionMessage\", { messageType, dataView });\n  }\n  #onConnectionMessagesReceived() {\n    if (!this.isConnected && this.#hasRequiredInformation) {\n      this.#checkConnection();\n    }\n    if (\n      this.connectionStatus == \"notConnected\" ||\n      this.connectionStatus == \"disconnecting\"\n    ) {\n      return;\n    }\n    this.#sendTxMessages();\n  }\n\n  latestConnectionMessages: Map<ConnectionMessageType, DataView> = new Map();\n\n  // DEVICE INFORMATION\n  #deviceInformationManager = new DeviceInformationManager();\n  get deviceInformation() {\n    return this.#deviceInformationManager.information;\n  }\n\n  // BATTERY LEVEL\n  #batteryLevel = 0;\n  get batteryLevel() {\n    return this.#batteryLevel;\n  }\n  #updateBatteryLevel(updatedBatteryLevel: number) {\n    _console.assertTypeWithError(updatedBatteryLevel, \"number\");\n    if (this.#batteryLevel == updatedBatteryLevel) {\n      _console.log(`duplicate batteryLevel assignment ${updatedBatteryLevel}`);\n      return;\n    }\n    this.#batteryLevel = updatedBatteryLevel;\n    _console.log({ updatedBatteryLevel: this.#batteryLevel });\n    this.#dispatchEvent(\"batteryLevel\", { batteryLevel: this.#batteryLevel });\n  }\n\n  // INFORMATION\n  /** @private */\n  _informationManager = new InformationManager();\n\n  get id() {\n    return this._informationManager.id;\n  }\n\n  get isCharging() {\n    return this._informationManager.isCharging;\n  }\n  get batteryCurrent() {\n    return this._informationManager.batteryCurrent;\n  }\n  get getBatteryCurrent() {\n    return this._informationManager.getBatteryCurrent;\n  }\n\n  get name() {\n    return this._informationManager.name;\n  }\n  get setName() {\n    return this._informationManager.setName;\n  }\n\n  get type() {\n    return this._informationManager.type;\n  }\n  get setType() {\n    return this._informationManager.setType;\n  }\n\n  get isInsole() {\n    return this._informationManager.isInsole;\n  }\n  get isGlove() {\n    return this._informationManager.isGlove;\n  }\n  get side() {\n    return this._informationManager.side;\n  }\n\n  get mtu() {\n    return this._informationManager.mtu;\n  }\n\n  // SENSOR TYPES\n  get sensorTypes() {\n    return Object.keys(this.sensorConfiguration) as SensorType[];\n  }\n  get continuousSensorTypes() {\n    return ContinuousSensorTypes.filter((sensorType) =>\n      this.sensorTypes.includes(sensorType)\n    );\n  }\n\n  // SENSOR CONFIGURATION\n\n  #sensorConfigurationManager = new SensorConfigurationManager();\n\n  get sensorConfiguration() {\n    return this.#sensorConfigurationManager.configuration;\n  }\n\n  get setSensorConfiguration() {\n    return this.#sensorConfigurationManager.setConfiguration;\n  }\n\n  async clearSensorConfiguration() {\n    return this.#sensorConfigurationManager.clearSensorConfiguration();\n  }\n\n  static #ClearSensorConfigurationOnLeave = true;\n  static get ClearSensorConfigurationOnLeave() {\n    return this.#ClearSensorConfigurationOnLeave;\n  }\n  static set ClearSensorConfigurationOnLeave(\n    newClearSensorConfigurationOnLeave\n  ) {\n    _console.assertTypeWithError(newClearSensorConfigurationOnLeave, \"boolean\");\n    this.#ClearSensorConfigurationOnLeave = newClearSensorConfigurationOnLeave;\n  }\n\n  #clearSensorConfigurationOnLeave = Device.ClearSensorConfigurationOnLeave;\n  get clearSensorConfigurationOnLeave() {\n    return this.#clearSensorConfigurationOnLeave;\n  }\n  set clearSensorConfigurationOnLeave(newClearSensorConfigurationOnLeave) {\n    _console.assertTypeWithError(newClearSensorConfigurationOnLeave, \"boolean\");\n    this.#clearSensorConfigurationOnLeave = newClearSensorConfigurationOnLeave;\n  }\n\n  // PRESSURE\n  get numberOfPressureSensors() {\n    return this.#sensorDataManager.pressureSensorDataManager.numberOfSensors;\n  }\n\n  // SENSOR DATA\n  #sensorDataManager = new SensorDataManager();\n  resetPressureRange() {\n    this.#sensorDataManager.pressureSensorDataManager.resetRange();\n  }\n\n  // VIBRATION\n  get vibrationLocations() {\n    return this.#vibrationManager.vibrationLocations;\n  }\n\n  #vibrationManager = new VibrationManager();\n  async triggerVibration(\n    vibrationConfigurations: VibrationConfiguration[],\n    sendImmediately?: boolean\n  ) {\n    this.#vibrationManager.triggerVibration(\n      vibrationConfigurations,\n      sendImmediately\n    );\n  }\n\n  // FILE TRANSFER\n  #fileTransferManager = new FileTransferManager();\n\n  get fileTypes() {\n    return this.#fileTransferManager.fileTypes;\n  }\n  get maxFileLength() {\n    return this.#fileTransferManager.maxLength;\n  }\n  get validFileTypes() {\n    return FileTypes.filter((fileType) => {\n      if (fileType.includes(\"wifi\") && !this.isWifiAvailable) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  async sendFile(fileType: FileType, file: FileLike) {\n    _console.assertWithError(\n      this.validFileTypes.includes(fileType),\n      `invalid fileType ${fileType}`\n    );\n    const promise = this.waitForEvent(\"fileTransferComplete\");\n    this.#fileTransferManager.send(fileType, file);\n    await promise;\n  }\n  async receiveFile(fileType: FileType) {\n    const promise = this.waitForEvent(\"fileTransferComplete\");\n    this.#fileTransferManager.receive(fileType);\n    await promise;\n  }\n\n  get fileTransferStatus() {\n    return this.#fileTransferManager.status;\n  }\n\n  cancelFileTransfer() {\n    this.#fileTransferManager.cancel();\n  }\n\n  // TFLITE\n  #tfliteManager = new TfliteManager();\n\n  get tfliteName() {\n    return this.#tfliteManager.name;\n  }\n  get setTfliteName() {\n    return this.#tfliteManager.setName;\n  }\n\n  async sendTfliteConfiguration(configuration: TfliteFileConfiguration) {\n    configuration.type = \"tflite\";\n    this.#tfliteManager.sendConfiguration(configuration, false);\n    const didSendFile = await this.#fileTransferManager.send(\n      configuration.type,\n      configuration.file\n    );\n    if (!didSendFile) {\n      this.#sendTxMessages();\n    }\n  }\n\n  // TFLITE MODEL CONFIG\n  get tfliteTask() {\n    return this.#tfliteManager.task;\n  }\n  get setTfliteTask() {\n    return this.#tfliteManager.setTask;\n  }\n  get tfliteSampleRate() {\n    return this.#tfliteManager.sampleRate;\n  }\n  get setTfliteSampleRate() {\n    return this.#tfliteManager.setSampleRate;\n  }\n  get tfliteSensorTypes() {\n    return this.#tfliteManager.sensorTypes;\n  }\n  get allowedTfliteSensorTypes() {\n    return this.sensorTypes.filter((sensorType) =>\n      TfliteSensorTypes.includes(sensorType as TfliteSensorType)\n    );\n  }\n  get setTfliteSensorTypes() {\n    return this.#tfliteManager.setSensorTypes;\n  }\n  get tfliteIsReady() {\n    return this.#tfliteManager.isReady;\n  }\n\n  // TFLITE INFERENCING\n\n  get tfliteInferencingEnabled() {\n    return this.#tfliteManager.inferencingEnabled;\n  }\n  get setTfliteInferencingEnabled() {\n    return this.#tfliteManager.setInferencingEnabled;\n  }\n  async enableTfliteInferencing() {\n    return this.setTfliteInferencingEnabled(true);\n  }\n  async disableTfliteInferencing() {\n    return this.setTfliteInferencingEnabled(false);\n  }\n  get toggleTfliteInferencing() {\n    return this.#tfliteManager.toggleInferencingEnabled;\n  }\n\n  // TFLITE INFERENCE CONFIG\n\n  get tfliteCaptureDelay() {\n    return this.#tfliteManager.captureDelay;\n  }\n  get setTfliteCaptureDelay() {\n    return this.#tfliteManager.setCaptureDelay;\n  }\n  get tfliteThreshold() {\n    return this.#tfliteManager.threshold;\n  }\n  get setTfliteThreshold() {\n    return this.#tfliteManager.setThreshold;\n  }\n\n  // FIRMWARE MANAGER\n\n  #firmwareManager = new FirmwareManager();\n\n  get canUpdateFirmware() {\n    return this.#connectionManager?.canUpdateFirmware;\n  }\n  #assertCanUpdateFirmware() {\n    _console.assertWithError(this.canUpdateFirmware, \"can't update firmware\");\n  }\n\n  #sendSmpMessage(data: ArrayBuffer) {\n    this.#assertCanUpdateFirmware();\n    return this.#connectionManager!.sendSmpMessage(data);\n  }\n  private sendSmpMessage = this.#sendSmpMessage.bind(this);\n\n  get uploadFirmware() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.uploadFirmware;\n  }\n  get canReset() {\n    return this.canUpdateFirmware;\n  }\n  async reset() {\n    _console.assertWithError(\n      this.canReset,\n      \"reset is not enabled for this device\"\n    );\n    await this.#firmwareManager.reset();\n    return this.#connectionManager!.disconnect();\n  }\n  get firmwareStatus() {\n    return this.#firmwareManager.status;\n  }\n  get getFirmwareImages() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.getImages;\n  }\n  get firmwareImages() {\n    return this.#firmwareManager.images;\n  }\n  get eraseFirmwareImage() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.eraseImage;\n  }\n  get confirmFirmwareImage() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.confirmImage;\n  }\n  get testFirmwareImage() {\n    this.#assertCanUpdateFirmware();\n    return this.#firmwareManager.testImage;\n  }\n\n  // SERVER SIDE\n  #isServerSide = false;\n  get isServerSide() {\n    return this.#isServerSide;\n  }\n  set isServerSide(newIsServerSide) {\n    if (this.#isServerSide == newIsServerSide) {\n      _console.log(\"redundant isServerSide assignment\");\n      return;\n    }\n    _console.log({ newIsServerSide });\n    this.#isServerSide = newIsServerSide;\n\n    this.#fileTransferManager.isServerSide = this.isServerSide;\n    this.#displayManager.isServerSide = this.isServerSide;\n  }\n\n  // UKATON\n  get isUkaton() {\n    return this.deviceInformation.modelNumber.includes(\"Ukaton\");\n  }\n\n  // WIFI MANAGER\n  #wifiManager = new WifiManager();\n  get isWifiAvailable() {\n    return this.#wifiManager.isWifiAvailable;\n  }\n  get wifiSSID() {\n    return this.#wifiManager.wifiSSID;\n  }\n  async setWifiSSID(newWifiSSID: string) {\n    return this.#wifiManager.setWifiSSID(newWifiSSID);\n  }\n  get wifiPassword() {\n    return this.#wifiManager.wifiPassword;\n  }\n  async setWifiPassword(newWifiPassword: string) {\n    return this.#wifiManager.setWifiPassword(newWifiPassword);\n  }\n  get isWifiConnected() {\n    return this.#wifiManager.isWifiConnected;\n  }\n  get ipAddress() {\n    return this.#wifiManager.ipAddress;\n  }\n  get wifiConnectionEnabled() {\n    return this.#wifiManager.wifiConnectionEnabled;\n  }\n  get enableWifiConnection() {\n    return this.#wifiManager.enableWifiConnection;\n  }\n  get setWifiConnectionEnabled() {\n    return this.#wifiManager.setWifiConnectionEnabled;\n  }\n  get disableWifiConnection() {\n    return this.#wifiManager.disableWifiConnection;\n  }\n  get toggleWifiConnection() {\n    return this.#wifiManager.toggleWifiConnection;\n  }\n  get isWifiSecure() {\n    return this.#wifiManager.isWifiSecure;\n  }\n\n  async reconnectViaWebSockets() {\n    _console.assertWithError(this.isWifiConnected, \"wifi is not connected\");\n    _console.assertWithError(\n      this.connectionType != \"webSocket\",\n      \"already connected via webSockets\"\n    );\n    _console.assertTypeWithError(this.ipAddress, \"string\");\n    _console.log(\"reconnecting via websockets...\");\n    await this.disconnect();\n    await this.connect({\n      type: \"webSocket\",\n      ipAddress: this.ipAddress!,\n      isWifiSecure: this.isWifiSecure,\n    });\n  }\n\n  async reconnectViaUDP() {\n    _console.assertWithError(isInNode, \"udp is only available in node\");\n    _console.assertWithError(this.isWifiConnected, \"wifi is not connected\");\n    _console.assertWithError(\n      this.connectionType != \"udp\",\n      \"already connected via udp\"\n    );\n    _console.assertTypeWithError(this.ipAddress, \"string\");\n    _console.log(\"reconnecting via udp...\");\n    await this.disconnect();\n    await this.connect({\n      type: \"udp\",\n      ipAddress: this.ipAddress!,\n    });\n  }\n\n  // CAMERA MANAGER\n  #cameraManager = new CameraManager();\n  get hasCamera() {\n    return this.sensorTypes.includes(\"camera\");\n  }\n  get cameraStatus() {\n    return this.#cameraManager.cameraStatus;\n  }\n  #assertHasCamera() {\n    _console.assertWithError(this.hasCamera, \"camera not available\");\n  }\n  async takePicture(sensorRate: number = 10) {\n    this.#assertHasCamera();\n    if (this.sensorConfiguration.camera == 0) {\n      this.setSensorConfiguration({ camera: sensorRate }, false, false);\n    }\n    await this.#cameraManager.takePicture();\n  }\n  async focusCamera(sensorRate: number = 10) {\n    this.#assertHasCamera();\n    if (this.sensorConfiguration.camera == 0) {\n      this.setSensorConfiguration({ camera: sensorRate }, false, false);\n    }\n    await this.#cameraManager.focus();\n  }\n  async stopCamera() {\n    this.#assertHasCamera();\n    await this.#cameraManager.stop();\n  }\n  async wakeCamera() {\n    this.#assertHasCamera();\n    await this.#cameraManager.wake();\n  }\n  async sleepCamera() {\n    this.#assertHasCamera();\n    await this.#cameraManager.sleep();\n  }\n\n  get cameraConfiguration() {\n    return this.#cameraManager.cameraConfiguration;\n  }\n  get availableCameraConfigurationTypes() {\n    return this.#cameraManager.availableCameraConfigurationTypes;\n  }\n  get cameraConfigurationRanges() {\n    return this.#cameraManager.cameraConfigurationRanges;\n  }\n\n  get setCameraConfiguration() {\n    return this.#cameraManager.setCameraConfiguration;\n  }\n\n  // MICROPHONE\n  #microphoneManager = new MicrophoneManager();\n  get hasMicrophone() {\n    return this.sensorTypes.includes(\"microphone\");\n  }\n  get microphoneStatus() {\n    return this.#microphoneManager.microphoneStatus;\n  }\n  #assertHasMicrophone() {\n    _console.assertWithError(this.hasMicrophone, \"microphone not available\");\n  }\n\n  async startMicrophone(sensorRate: number = 10) {\n    this.#assertHasMicrophone();\n    if (this.sensorConfiguration.microphone == 0) {\n      this.setSensorConfiguration({ microphone: sensorRate }, false, false);\n    }\n    await this.#microphoneManager.start();\n  }\n  async stopMicrophone() {\n    this.#assertHasMicrophone();\n    await this.#microphoneManager.stop();\n  }\n  async enableMicrophoneVad() {\n    this.#assertHasMicrophone();\n    await this.#microphoneManager.vad();\n  }\n  async toggleMicrophone(sensorRate: number = 10) {\n    this.#assertHasMicrophone();\n    if (this.sensorConfiguration.microphone == 0) {\n      this.setSensorConfiguration({ microphone: sensorRate }, false, false);\n    }\n    await this.#microphoneManager.toggle();\n  }\n\n  get microphoneConfiguration() {\n    return this.#microphoneManager.microphoneConfiguration;\n  }\n  get availableMicrophoneConfigurationTypes() {\n    return this.#microphoneManager.availableMicrophoneConfigurationTypes;\n  }\n  get setMicrophoneConfiguration() {\n    return this.#microphoneManager.setMicrophoneConfiguration;\n  }\n\n  #assertWebAudioSupport() {\n    _console.assertWithError(AudioContext, \"WebAudio is not supported\");\n  }\n\n  get audioContext() {\n    this.#assertWebAudioSupport();\n    return this.#microphoneManager.audioContext;\n  }\n  set audioContext(newAudioContext) {\n    this.#assertWebAudioSupport();\n    this.#microphoneManager.audioContext = newAudioContext;\n  }\n  get microphoneMediaStreamDestination() {\n    this.#assertWebAudioSupport();\n    return this.#microphoneManager.mediaStreamDestination;\n  }\n  get microphoneGainNode() {\n    this.#assertWebAudioSupport();\n    return this.#microphoneManager.gainNode;\n  }\n\n  get isRecordingMicrophone() {\n    return this.#microphoneManager.isRecording;\n  }\n  startRecordingMicrophone() {\n    this.#assertWebAudioSupport();\n    this.#microphoneManager.startRecording();\n  }\n  stopRecordingMicrophone() {\n    this.#assertWebAudioSupport();\n    this.#microphoneManager.stopRecording();\n  }\n  toggleMicrophoneRecording() {\n    this.#assertWebAudioSupport();\n    this.#microphoneManager.toggleRecording();\n  }\n\n  // DISPLAY\n  #displayManager = new DisplayManager();\n\n  get isDisplayAvailable() {\n    return this.#displayManager.isAvailable;\n  }\n  get isDisplayReady() {\n    return this.#displayManager.isReady;\n  }\n  get displayContextState() {\n    return this.#displayManager.contextState;\n  }\n  get displayColors() {\n    return this.#displayManager.colors;\n  }\n  get displayBitmapColors() {\n    return this.#displayManager.bitmapColors;\n  }\n  get displayBitmapColorIndices() {\n    return this.#displayManager.bitmapColorIndices;\n  }\n  get displayColorOpacities() {\n    return this.#displayManager.opacities;\n  }\n  #assertDisplayIsAvailable() {\n    _console.assertWithError(this.isDisplayAvailable, \"display not available\");\n  }\n  get displayStatus() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.displayStatus;\n  }\n  get displayBrightness() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.brightness;\n  }\n  get setDisplayBrightness() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setBrightness;\n  }\n\n  get displayInformation() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.displayInformation;\n  }\n  get numberOfDisplayColors() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.numberOfColors;\n  }\n\n  get wakeDisplay() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.wake;\n  }\n  get sleepDisplay() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.sleep;\n  }\n  get toggleDisplay() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.toggle;\n  }\n  get isDisplayAwake() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.isDisplayAwake;\n  }\n\n  get showDisplay() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.show;\n  }\n  get clearDisplay() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.clear;\n  }\n\n  get setDisplayColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setColor;\n  }\n  get setDisplayColorOpacity() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setColorOpacity;\n  }\n  get setDisplayOpacity() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setOpacity;\n  }\n\n  get saveDisplayContext() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.saveContext;\n  }\n  get restoreDisplayContext() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.restoreContext;\n  }\n\n  get clearDisplayRect() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.clearRect;\n  }\n\n  get selectDisplayBackgroundColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectBackgroundColor;\n  }\n  get selectDisplayFillColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectFillColor;\n  }\n  get selectDisplayLineColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectLineColor;\n  }\n  get setDisplayIgnoreFill() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setIgnoreFill;\n  }\n  get setDisplayIgnoreLine() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setIgnoreLine;\n  }\n  get setDisplayFillBackground() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setFillBackground;\n  }\n  get setDisplayLineWidth() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setLineWidth;\n  }\n  get setDisplayRotation() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setRotation;\n  }\n  get clearDisplayRotation() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.clearRotation;\n  }\n\n  get setDisplaySegmentStartCap() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSegmentStartCap;\n  }\n  get setDisplaySegmentEndCap() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSegmentEndCap;\n  }\n  get setDisplaySegmentCap() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSegmentCap;\n  }\n\n  get setDisplaySegmentStartRadius() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSegmentStartRadius;\n  }\n  get setDisplaySegmentEndRadius() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSegmentEndRadius;\n  }\n  get setDisplaySegmentRadius() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSegmentRadius;\n  }\n\n  get setDisplayCropTop() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setCropTop;\n  }\n  get setDisplayCropRight() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setCropRight;\n  }\n  get setDisplayCropBottom() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setCropBottom;\n  }\n  get setDisplayCropLeft() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setCropLeft;\n  }\n  get setDisplayCrop() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setCrop;\n  }\n  get clearDisplayCrop() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.clearCrop;\n  }\n\n  get setDisplayRotationCropTop() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setRotationCropTop;\n  }\n  get setDisplayRotationCropRight() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setRotationCropRight;\n  }\n  get setDisplayRotationCropBottom() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setRotationCropBottom;\n  }\n  get setDisplayRotationCropLeft() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setRotationCropLeft;\n  }\n  get setDisplayRotationCrop() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setRotationCrop;\n  }\n  get clearDisplayRotationCrop() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.clearRotationCrop;\n  }\n  get flushDisplayContextCommands() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.flushContextCommands;\n  }\n\n  get drawDisplayRect() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawRect;\n  }\n  get drawDisplayCircle() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawCircle;\n  }\n  get drawDisplayEllipse() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawEllipse;\n  }\n  get drawDisplayRoundRect() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawRoundRect;\n  }\n  get drawDisplayRegularPolygon() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawRegularPolygon;\n  }\n  get drawDisplayPolygon() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawPolygon;\n  }\n  get drawDisplayWireframe() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawWireframe;\n  }\n  get drawDisplaySegment() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawSegment;\n  }\n  get drawDisplaySegments() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawSegments;\n  }\n  get drawDisplayArc() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawArc;\n  }\n  get drawDisplayArcEllipse() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawArcEllipse;\n  }\n  get drawDisplayBitmap() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawBitmap;\n  }\n  get imageToDisplayBitmap() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.imageToBitmap;\n  }\n  get quantizeDisplayImage() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.quantizeImage;\n  }\n  get resizeAndQuantizeDisplayImage() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.resizeAndQuantizeImage;\n  }\n\n  get setDisplayContextState() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setContextState;\n  }\n\n  get selectDisplayBitmapColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectBitmapColor;\n  }\n  get selectDisplayBitmapColors() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectBitmapColors;\n  }\n  get setDisplayBitmapColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setBitmapColor;\n  }\n  get setDisplayBitmapColorOpacity() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setBitmapColorOpacity;\n  }\n\n  get setDisplayBitmapScaleDirection() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setBitmapScaleDirection;\n  }\n  get setDisplayBitmapScaleX() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setBitmapScaleX;\n  }\n  get setDisplayBitmapScaleY() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setBitmapScaleY;\n  }\n  get setDisplayBitmapScale() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setBitmapScale;\n  }\n  get resetDisplayBitmapScale() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.resetBitmapScale;\n  }\n\n  get selectDisplaySpriteColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectSpriteColor;\n  }\n  get selectDisplaySpriteColors() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectSpriteColors;\n  }\n  get setDisplaySpriteColor() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSpriteColor;\n  }\n  get setDisplaySpriteColorOpacity() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSpriteColorOpacity;\n  }\n  get resetDisplaySpriteColors() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.resetSpriteColors;\n  }\n\n  get setDisplaySpriteScaleDirection() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSpriteScaleDirection;\n  }\n  get setDisplaySpriteScaleX() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSpriteScaleX;\n  }\n  get setDisplaySpriteScaleY() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSpriteScaleY;\n  }\n  get setDisplaySpriteScale() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.setSpriteScale;\n  }\n  get resetDisplaySpriteScale() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.resetSpriteScale;\n  }\n\n  get displayManager() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager as DisplayManagerInterface;\n  }\n\n  get uploadDisplaySpriteSheet() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.uploadSpriteSheet;\n  }\n  get uploadDisplaySpriteSheets() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.uploadSpriteSheets;\n  }\n  get selectDisplaySpriteSheet() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.selectSpriteSheet;\n  }\n  get drawDisplaySprite() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.drawSprite;\n  }\n\n  get startDisplaySprite() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.startSprite;\n  }\n  get endDisplaySprite() {\n    this.#assertDisplayIsAvailable();\n    return this.#displayManager.endSprite;\n  }\n\n  get displaySpriteSheets() {\n    return this.#displayManager.spriteSheets;\n  }\n\n  get serializeDisplaySpriteSheet() {\n    return this.#displayManager.serializeSpriteSheet;\n  }\n\n  get setDisplayAlignment() {\n    return this.#displayManager.setAlignment;\n  }\n  get setDisplayVerticalAlignment() {\n    return this.#displayManager.setVerticalAlignment;\n  }\n  get setDisplayHorizontalAlignment() {\n    return this.#displayManager.setHorizontalAlignment;\n  }\n  get resetDisplayAlignment() {\n    return this.#displayManager.resetAlignment;\n  }\n\n  get setDisplaySpritesDirection() {\n    return this.#displayManager.setSpritesDirection;\n  }\n  get setDisplaySpritesLineDirection() {\n    return this.#displayManager.setSpritesLineDirection;\n  }\n  get setDisplaySpritesSpacing() {\n    return this.#displayManager.setSpritesSpacing;\n  }\n  get setDisplaySpritesLineSpacing() {\n    return this.#displayManager.setSpritesLineSpacing;\n  }\n  get setDisplaySpritesAlignment() {\n    return this.#displayManager.setSpritesAlignment;\n  }\n\n  get drawDisplayQuadraticBezierCurve() {\n    return this.#displayManager.drawQuadraticBezierCurve;\n  }\n  get drawDisplayQuadraticBezierCurves() {\n    return this.#displayManager.drawQuadraticBezierCurves;\n  }\n  get drawDisplayCubicBezierCurve() {\n    return this.#displayManager.drawCubicBezierCurve;\n  }\n  get drawDisplayCubicBezierCurves() {\n    return this.#displayManager.drawCubicBezierCurves;\n  }\n  get drawDisplayPath() {\n    return this.#displayManager.drawPath;\n  }\n  get drawDisplayClosedPath() {\n    return this.#displayManager.drawClosedPath;\n  }\n}\n\nexport default Device;\n","import Device, {\n  BoundDeviceEventListeners,\n  DeviceEventMap,\n} from \"../Device.ts\";\nimport {\n  DisplayBitmapColorPair,\n  DisplayBrightness,\n  DisplaySpriteColorPair,\n  DisplayBitmap,\n  DisplaySegment,\n  DisplayBezierCurve,\n  DisplayBezierCurveType,\n  DisplayWireframe,\n  DisplaySize,\n} from \"../DisplayManager.ts\";\nimport {\n  assertValidBitmapPixels,\n  imageToBitmap,\n  quantizeImage,\n  resizeAndQuantizeImage,\n} from \"./DisplayBitmapUtils.ts\";\nimport { hexToRGB, rgbToHex, stringToRGB } from \"./ColorUtils.ts\";\nimport { createConsole } from \"./Console.ts\";\nimport {\n  DefaultDisplayContextState,\n  DisplayAlignment,\n  DisplayAlignmentDirection,\n  DisplayAlignmentDirections,\n  DisplayContextState,\n  DisplayContextStateKey,\n  DisplayDirection,\n  DisplaySegmentCap,\n  isDirectionHorizontal,\n  isDirectionPositive,\n  PartialDisplayContextState,\n} from \"./DisplayContextState.ts\";\nimport DisplayContextStateHelper from \"./DisplayContextStateHelper.ts\";\nimport {\n  assertAnySelectedSpriteSheet,\n  assertLoadedSpriteSheet,\n  assertSelectedSpriteSheet,\n  assertSprite,\n  assertSpritePaletteSwap,\n  assertSpriteSheetPalette,\n  assertSpriteSheetPaletteSwap,\n  DisplayManagerInterface,\n  drawSpriteFromSpriteSheet,\n  getSprite,\n  getSpritePaletteSwap,\n  getSpriteSheetPalette,\n  getSpriteSheetPaletteSwap,\n  runDisplayContextCommand,\n  runDisplayContextCommands,\n  selectSpritePaletteSwap,\n  selectSpriteSheetPalette,\n  selectSpriteSheetPaletteSwap,\n} from \"./DisplayManagerInterface.ts\";\nimport {\n  assertValidColor,\n  assertValidOpacity,\n  assertValidSegmentCap,\n  DisplayScaleDirection,\n  DisplayColorRGB,\n  DisplayCropDirection,\n  DisplayCropDirections,\n  DisplayCropDirectionToStateKey,\n  DisplayRotationCropDirectionToCommandType,\n  DisplayRotationCropDirectionToStateKey,\n  maxDisplayScale,\n  roundScale,\n  minDisplayScale,\n  DisplayAlignmentDirectionToCommandType,\n  DisplayAlignmentDirectionToStateKey,\n  assertValidAlignment,\n  assertValidDirection,\n  trimWireframe,\n  assertValidNumberOfControlPoints,\n  assertValidPathNumberOfControlPoints,\n  assertValidPath,\n  displayCurveTypeToNumberOfControlPoints,\n  maxNumberOfDisplayCurvePoints,\n  displayCurveToleranceSquared,\n  assertValidWireframe,\n  isWireframePolygon,\n} from \"./DisplayUtils.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n  EventListenerMap,\n  EventMap,\n} from \"./EventDispatcher.ts\";\nimport { addEventListeners, removeEventListeners } from \"./EventUtils.ts\";\nimport {\n  clamp,\n  degToRad,\n  getVector2DistanceSquared,\n  getVector2Midpoint,\n  normalizeRadians,\n  Vector2,\n} from \"./MathUtils.ts\";\nimport { wait } from \"./Timer.ts\";\nimport { DisplayContextCommand } from \"./DisplayContextCommand.ts\";\nimport {\n  assertValidSpriteLines,\n  DisplaySprite,\n  DisplaySpriteLines,\n  DisplaySpriteLinesMetrics,\n  DisplaySpritePaletteSwap,\n  DisplaySpriteSheet,\n  DisplaySpriteSheetPalette,\n  DisplaySpriteSheetPaletteSwap,\n  getSpriteLinesMetrics,\n  serializeSpriteSheet,\n  stringToSpriteLines,\n  stringToSpriteLinesMetrics,\n} from \"./DisplaySpriteSheetUtils.ts\";\n\nconst _console = createConsole(\"DisplayCanvasHelper\", { log: false });\n\nexport const DisplayCanvasHelperEventTypes = [\n  \"contextState\",\n  \"numberOfColors\",\n  \"brightness\",\n  \"color\",\n  \"colorOpacity\",\n  \"resize\",\n  \"update\",\n  \"ready\",\n  \"device\",\n  \"deviceIsConnected\",\n  \"deviceConnected\",\n  \"deviceNotConnected\",\n  \"deviceSpriteSheetUploadStart\",\n  \"deviceSpriteSheetUploadProgress\",\n  \"deviceSpriteSheetUploadComplete\",\n  \"deviceUpdated\",\n] as const;\nexport type DisplayCanvasHelperEventType =\n  (typeof DisplayCanvasHelperEventTypes)[number];\n\nexport interface DisplayCanvasHelperEventMessages {\n  contextState: {\n    contextState: DisplayContextState;\n    differences: DisplayContextStateKey[];\n  };\n  numberOfColors: {\n    numberOfColors: number;\n  };\n  brightness: {\n    brightness: DisplayBrightness;\n  };\n  color: {\n    colorIndex: number;\n    colorRGB: DisplayColorRGB;\n    colorHex: string;\n  };\n  colorOpacity: {\n    opacity: number;\n    colorIndex: number;\n  };\n  opacity: {\n    opacity: number;\n  };\n  resize: {\n    width: number;\n    height: number;\n  };\n  update: {};\n  ready: {};\n\n  device: {\n    device?: Device;\n  };\n  deviceIsConnected: {\n    device: Device;\n    isConnected: boolean;\n  };\n  deviceConnected: {\n    device: Device;\n  };\n  deviceNotConnected: {\n    device: Device;\n  };\n\n  deviceSpriteSheetUploadStart: {\n    device: Device;\n    spriteSheet: DisplaySpriteSheet;\n    spriteSheetName: string;\n  };\n  deviceSpriteSheetUploadProgress: {\n    device: Device;\n    spriteSheet: DisplaySpriteSheet;\n    spriteSheetName: string;\n    progress: number;\n  };\n  deviceSpriteSheetUploadComplete: {\n    device: Device;\n    spriteSheet: DisplaySpriteSheet;\n    spriteSheetName: string;\n  };\n\n  deviceUpdated: {\n    device: Device;\n  };\n}\n\nexport type DisplayCanvasHelperEventDispatcher = EventDispatcher<\n  DisplayCanvasHelper,\n  DisplayCanvasHelperEventType,\n  DisplayCanvasHelperEventMessages\n>;\nexport type DisplayCanvasHelperEvent = Event<\n  DisplayCanvasHelper,\n  DisplayCanvasHelperEventType,\n  DisplayCanvasHelperEventMessages\n>;\nexport type DisplayCanvasHelperEventMap = EventMap<\n  DisplayCanvasHelper,\n  DisplayCanvasHelperEventType,\n  DisplayCanvasHelperEventMessages\n>;\nexport type DisplayCanvasHelperEventListenerMap = EventListenerMap<\n  DisplayCanvasHelper,\n  DisplayCanvasHelperEventType,\n  DisplayCanvasHelperEventMessages\n>;\nexport type BoundDisplayCanvasHelperEventListeners = BoundEventListeners<\n  DisplayCanvasHelper,\n  DisplayCanvasHelperEventType,\n  DisplayCanvasHelperEventMessages\n>;\n\nexport type DisplayBoundingBox = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nclass DisplayCanvasHelper implements DisplayManagerInterface {\n  constructor() {\n    this.numberOfColors = 16;\n    this.#bitmapContext = this.#bitmapCanvas.getContext(\"2d\")!;\n    this.#bitmapContext.imageSmoothingEnabled = false;\n    this.addEventListener(\"ready\", () => {\n      this.#isReady = true;\n      this.#onSentContextCommands();\n      this.#drawFrontDrawStack();\n    });\n  }\n\n  // EVENT DISPATCHER\n  #eventDispatcher: DisplayCanvasHelperEventDispatcher = new EventDispatcher(\n    this as DisplayCanvasHelper,\n    DisplayCanvasHelperEventTypes\n  );\n  get addEventListener() {\n    return this.#eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.#eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.#eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.#eventDispatcher.waitForEvent;\n  }\n  get removeEventListeners() {\n    return this.#eventDispatcher.removeEventListeners;\n  }\n  get removeAllEventListeners() {\n    return this.#eventDispatcher.removeAllEventListeners;\n  }\n\n  // CANVAS\n  #canvas?: HTMLCanvasElement;\n  get canvas() {\n    return this.#canvas;\n  }\n  set canvas(newCanvas) {\n    _console.assertWithError(\n      newCanvas?.nodeName == \"CANVAS\",\n      `assigned non-canvas type ${newCanvas?.nodeName}`\n    );\n    if (this.#canvas == newCanvas) {\n      // _console.log(\"redundant canvas assignment\", newCanvas);\n      return;\n    }\n    this.#canvas = newCanvas;\n    // _console.log(\"assigned canvas\", this.canvas);\n\n    this.#context = this.#canvas?.getContext(\"2d\", {\n      willReadFrequently: true,\n    })!;\n    this.#updateCanvas();\n  }\n  #context!: CanvasRenderingContext2D;\n  get context() {\n    return this.#context;\n  }\n\n  get width() {\n    return this.canvas?.width || 0;\n  }\n  get height() {\n    return this.canvas?.height || 0;\n  }\n  get aspectRatio() {\n    return this.width / this.height;\n  }\n\n  #updateCanvas() {\n    if (!this.canvas) {\n      return;\n    }\n    this.canvas!.style.aspectRatio = `${this.aspectRatio}`;\n    if (!this.device?.isConnected) {\n      return;\n    }\n\n    // _console.log(\"updateCanvas\");\n\n    const { width, height } = this.device.displayInformation!;\n    // _console.log({ width, height });\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.canvas.style.aspectRatio = `${width / height}`;\n\n    this.#dispatchEvent(\"resize\", { width: this.width, height: this.height });\n\n    this.clear();\n  }\n\n  // CONTEXT STACK\n  #frontDrawStack: Function[] = [];\n  #rearDrawStack: Function[] = [];\n  #drawFrontDrawStack() {\n    if (!this.context) {\n      return;\n    }\n    //_console.log(\"drawFrontDrawStack\");\n    this.#context.imageSmoothingEnabled = false;\n\n    this.#save();\n    this.#context.resetTransform();\n    this.#context.clearRect(0, 0, this.width, this.height);\n    this.#restore();\n\n    this.#drawBackground();\n\n    this.#frontDrawStack.forEach((callback) => callback());\n    if (this.#applyTransparency) {\n      this.#applyTransparencyToCanvas();\n    }\n    this.#dispatchEvent(\"update\", {});\n  }\n  #applyTransparencyToCanvas() {\n    const ctx = this.context;\n    const imageData = ctx.getImageData(\n      0,\n      0,\n      this.canvas!.width,\n      this.canvas!.height\n    );\n    const data = imageData.data;\n\n    const alphaBoost = 1.0; // >1 = more opaque, try 1.1–1.5 for subtlety\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      // Perceived brightness\n      const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n      const alpha = Math.min(255, brightness * alphaBoost);\n\n      // Unpremultiply for clarity\n      const scale = alpha > 0 ? 255 / alpha : 0;\n      data[i] = Math.min(255, r * scale);\n      data[i + 1] = Math.min(255, g * scale);\n      data[i + 2] = Math.min(255, b * scale);\n      data[i + 3] = alpha;\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  #drawBackground() {\n    // _console.log(\"drawBackground\");\n    this.#save();\n    this.#context.resetTransform();\n    this.#context.fillStyle = this.#colorIndexToRgbString(0);\n    this.#context.fillRect(0, 0, this.width, this.height);\n    this.#restore();\n  }\n  #applyTransparency = false;\n  get applyTransparency() {\n    return this.#applyTransparency;\n  }\n  set applyTransparency(newValue) {\n    this.#applyTransparency = newValue;\n    // _console.log({ applyTransparency: this.applyTransparency });\n    this.#drawFrontDrawStack();\n  }\n\n  // DEVICE\n  #device?: Device;\n  get device() {\n    return this.#device;\n  }\n  get deviceDisplayManager() {\n    return this.#device?.displayManager;\n  }\n  set device(newDevice) {\n    if (this.#device == newDevice) {\n      // _console.log(\"redundant device assignment\", newDevice);\n      return;\n    }\n    if (newDevice) {\n      _console.assertWithError(\n        newDevice.isConnected,\n        \"device must be connected\"\n      );\n      _console.assertWithError(\n        newDevice.isDisplayAvailable,\n        \"display must have a display\"\n      );\n    }\n    if (this.#device) {\n      removeEventListeners(this.device, this.#boundDeviceEventListeners);\n      this.#isReady = true;\n    }\n    this.#device = newDevice;\n    addEventListeners(this.#device, this.#boundDeviceEventListeners);\n    _console.log(\"assigned device\", this.device);\n    if (this.device) {\n      this.numberOfColors = this.device.numberOfDisplayColors!;\n      this.#updateCanvas();\n      this.#updateDevice();\n      this.#isReady = this.device.isDisplayReady;\n\n      this.#dispatchEvent(\"deviceIsConnected\", {\n        device: this.device,\n        isConnected: this.device!.isConnected,\n      });\n      this.#dispatchEvent(\n        this.device.isConnected ? \"deviceConnected\" : \"deviceNotConnected\",\n        {\n          device: this.device,\n        }\n      );\n    }\n    this.#dispatchEvent(\"device\", {\n      device: this.device,\n    });\n  }\n\n  async flushContextCommands() {\n    if (this.#device?.isConnected) {\n      await this.#device.flushDisplayContextCommands();\n    }\n    this.#onSentContextCommands();\n  }\n\n  // DEVICE EVENTLISTENERS\n  #boundDeviceEventListeners: BoundDeviceEventListeners = {\n    isConnected: this.#onDeviceIsConnected.bind(this),\n    connected: this.#onDeviceConnected.bind(this),\n    notConnected: this.#onDeviceNotConnected.bind(this),\n    displayReady: this.#onDeviceDisplayReady.bind(this),\n    displaySpriteSheetUploadStart:\n      this.#onDeviceDisplaySpriteSheetUploadStart.bind(this),\n    displaySpriteSheetUploadProgress:\n      this.#onDeviceDisplaySpriteSheetUploadProgress.bind(this),\n    displaySpriteSheetUploadComplete:\n      this.#onDeviceDisplaySpriteSheetUploadComplete.bind(this),\n    displayContextCommands: this.#onDeviceDisplayContextCommands.bind(this),\n  };\n  #onDeviceIsConnected(event: DeviceEventMap[\"isConnected\"]) {\n    const { isConnected } = event.message;\n    this.#dispatchEvent(\"deviceIsConnected\", {\n      device: this.device!,\n      isConnected,\n    });\n  }\n  #onDeviceConnected(event: DeviceEventMap[\"connected\"]) {\n    // _console.log(\"device connected\");\n    this.#updateCanvas();\n    this.#updateDevice();\n    this.#dispatchEvent(\"deviceConnected\", { device: this.device! });\n    // FIX - messages flushed properly?\n  }\n  #onDeviceNotConnected(event: DeviceEventMap[\"notConnected\"]) {\n    // _console.log(\"device not connected\");\n    this.#dispatchEvent(\"deviceNotConnected\", { device: this.device! });\n  }\n  async #onDeviceDisplayReady(event: DeviceEventMap[\"displayReady\"]) {\n    // _console.log(\"device display ready\");\n    // this.#isReady = true;\n    // await wait(5); // we need to wait for some reason\n    this.#dispatchEvent(\"ready\", {});\n  }\n\n  #onDeviceDisplaySpriteSheetUploadStart(\n    event: DeviceEventMap[\"displaySpriteSheetUploadStart\"]\n  ) {\n    const device = event.target;\n    const { spriteSheet, spriteSheetName } = event.message;\n    this.#dispatchEvent(\"deviceSpriteSheetUploadStart\", {\n      device,\n      spriteSheet,\n      spriteSheetName,\n    });\n  }\n  #onDeviceDisplaySpriteSheetUploadProgress(\n    event: DeviceEventMap[\"displaySpriteSheetUploadProgress\"]\n  ) {\n    const device = event.target;\n    const { spriteSheet, spriteSheetName, progress } = event.message;\n    this.#dispatchEvent(\"deviceSpriteSheetUploadProgress\", {\n      device,\n      spriteSheet,\n      spriteSheetName,\n      progress,\n    });\n  }\n  #onDeviceDisplaySpriteSheetUploadComplete(\n    event: DeviceEventMap[\"displaySpriteSheetUploadComplete\"]\n  ) {\n    const device = event.target;\n    const { spriteSheet, spriteSheetName } = event.message;\n    this.#dispatchEvent(\"deviceSpriteSheetUploadComplete\", {\n      device,\n      spriteSheet,\n      spriteSheetName,\n    });\n  }\n  #onDeviceDisplayContextCommands(\n    event: DeviceEventMap[\"displayContextCommands\"]\n  ) {\n    this.#onSentContextCommands();\n  }\n\n  #onSentContextCommands() {\n    let redraw = false;\n    redraw ||= this.#flushColors();\n    redraw ||= this.#flushOpacities();\n    redraw ||= this.#flushBrightness();\n    _console.log(\"onSentContextCommands\", { redraw });\n    if (redraw) {\n      this.#drawFrontDrawStack();\n    }\n  }\n\n  async #updateDevice() {\n    await this.#updateDeviceColors(true);\n    await this.#updateDeviceOpacity(true);\n    await this.#updateDeviceContextState(true);\n    await this.#updateDeviceBrightness(true);\n    await this.#updateDeviceSpriteSheets();\n    await this.#updateDeviceSelectedSpriteSheet(true);\n    //_console.log(\"deviceUpdated\");\n    this.#dispatchEvent(\"deviceUpdated\", { device: this.device! });\n  }\n\n  // NUMBER OF COLORS\n  #numberOfColors: number = 0;\n  get numberOfColors() {\n    return this.#numberOfColors;\n  }\n  set numberOfColors(newNumberOfColors) {\n    if (this.#numberOfColors == newNumberOfColors) {\n      return;\n    }\n\n    this.#numberOfColors = newNumberOfColors;\n    // _console.log({ numberOfColors: this.numberOfColors });\n\n    this.#colors = new Array(this.numberOfColors).fill(\"#000000\");\n    this.#opacities = new Array(this.numberOfColors).fill(1);\n    this.contextState.bitmapColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n    this.contextState.spriteColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n\n    this.#dispatchEvent(\"numberOfColors\", {\n      numberOfColors: this.numberOfColors,\n    });\n  }\n\n  // COLORS\n  assertValidColorIndex(colorIndex: number) {\n    _console.assertRangeWithError(\n      \"colorIndex\",\n      colorIndex,\n      0,\n      this.numberOfColors\n    );\n  }\n  #pendingColors: string[] = [];\n  #setColor(colorIndex: number, colorHex: string) {\n    this.#pendingColors[colorIndex] = colorHex;\n  }\n  #colors: string[] = [];\n  get colors() {\n    return this.#colors;\n  }\n  #flushColors() {\n    if (this.#pendingColors.length == 0) {\n      return false;\n    }\n    this.#pendingColors.forEach((colorHex, colorIndex) => {\n      this.#colors[colorIndex] = colorHex;\n      const colorRGB = hexToRGB(colorHex);\n      this.#dispatchEvent(\"color\", { colorIndex, colorHex, colorRGB });\n    });\n    this.#pendingColors.length = 0;\n    _console.log(\"flushColors\");\n    return true;\n  }\n  #resetColors() {\n    this.#colors.length = 0;\n    this.#pendingColors.length = 0;\n  }\n  async #updateDeviceColors(sendImmediately?: boolean) {\n    if (!this.device?.isConnected) {\n      return;\n    }\n    for (const [index, color] of this.colors.entries()) {\n      await this.device?.setDisplayColor(index, color, false);\n    }\n    if (sendImmediately) {\n      await this.flushContextCommands();\n    }\n  }\n\n  // OPACITIES\n  #opacities: number[] = [];\n  get opacities() {\n    return this.#opacities;\n  }\n  #pendingOpacities: number[] = [];\n  #setColorOpacity(colorIndex: number, opacity: number) {\n    this.#pendingOpacities[colorIndex] = opacity;\n  }\n  #flushOpacities() {\n    if (this.#pendingOpacities.length == 0) {\n      return false;\n    }\n    this.#pendingOpacities.forEach((opacity, colorIndex) => {\n      this.#opacities[colorIndex] = opacity;\n      this.#dispatchEvent(\"colorOpacity\", { colorIndex, opacity });\n    });\n    this.#pendingOpacities.length = 0;\n    _console.log(\"flushOpacities\");\n    return true;\n  }\n  #resetOpacities() {\n    this.#opacities.length = 0;\n    this.#pendingOpacities.length = 0;\n  }\n\n  async #updateDeviceOpacity(sendImmediately?: boolean) {\n    if (!this.device?.isConnected) {\n      return;\n    }\n    for (const [index, opacity] of this.#opacities.entries()) {\n      await this.device?.setDisplayColorOpacity(index, opacity, false);\n    }\n    if (sendImmediately) {\n      await this.flushContextCommands();\n    }\n  }\n\n  // CONEXT STATE\n  #contextStateHelper = new DisplayContextStateHelper();\n  get contextState() {\n    return this.#contextStateHelper.state;\n  }\n  #onContextStateUpdate(differences: DisplayContextStateKey[]) {\n    this.#dispatchEvent(\"contextState\", {\n      contextState: structuredClone(this.contextState),\n      differences,\n    });\n  }\n  #resetContextState() {\n    this.#contextStateHelper.reset();\n    this.contextState.bitmapColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n    this.contextState.spriteColorIndices = new Array(this.numberOfColors).fill(\n      0\n    );\n  }\n  async #updateDeviceContextState(sendImmediately?: boolean) {\n    if (!this.device?.isConnected) {\n      return;\n    }\n    // _console.log(\"updateDeviceContextState\");\n    await this.device?.setDisplayContextState(\n      this.contextState,\n      sendImmediately\n    );\n  }\n\n  async show(sendImmediately = true) {\n    // _console.log(\"showDisplay\");\n\n    this.#frontDrawStack = this.#rearDrawStack.slice();\n    this.#rearDrawStack.length = 0;\n\n    this.#isReady = false;\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.show(sendImmediately);\n    } else {\n      await wait(this.#interval);\n      if (this.device) {\n        return;\n      }\n      this.#dispatchEvent(\"ready\", {});\n    }\n  }\n  #interval = 50;\n  get interval() {\n    return this.#interval;\n  }\n  set interval(newInterval) {\n    this.#interval = newInterval;\n    // _console.log({ interval: this.#interval });\n  }\n\n  #isReady = true;\n  get isReady() {\n    return this.#isReady;\n  }\n\n  async clear(sendImmediately = true) {\n    // _console.log(\"clearDisplay\");\n\n    this.#frontDrawStack.length = 0;\n    this.#rearDrawStack.length = 0;\n\n    this.#isReady = false;\n    this.#save();\n    this.#context.resetTransform();\n    this.#context.clearRect(0, 0, this.width, this.height);\n    this.#restore();\n    this.#drawBackground();\n\n    this.#isDrawingBlankSprite = false;\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.clear(sendImmediately);\n    } else {\n      await wait(this.#interval);\n      if (this.device) {\n        return;\n      }\n      this.#dispatchEvent(\"ready\", {});\n    }\n  }\n\n  async setColor(\n    colorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ) {\n    let colorRGB: DisplayColorRGB;\n    if (typeof color == \"string\") {\n      colorRGB = stringToRGB(color);\n    } else {\n      colorRGB = color;\n    }\n    const colorHex = rgbToHex(colorRGB);\n    if (this.colors[colorIndex] == colorHex) {\n      // _console.log(`redundant color #${colorIndex} ${colorHex}`);\n      return;\n    }\n\n    // _console.log(`setting color #${colorIndex}`, color);\n    this.assertValidColorIndex(colorIndex);\n    assertValidColor(colorRGB);\n\n    this.#setColor(colorIndex, colorHex);\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setColor(\n        colorIndex,\n        color,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n\n  async setColorOpacity(\n    colorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidColorIndex(colorIndex);\n    assertValidOpacity(opacity);\n    if (\n      Math.floor(255 * this.#opacities[colorIndex]) == Math.floor(255 * opacity)\n    ) {\n      // _console.log(`redundant opacity #${colorIndex} ${opacity}`);\n      return;\n    }\n    this.#setColorOpacity(colorIndex, opacity);\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setColorOpacity(\n        colorIndex,\n        opacity,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  async setOpacity(opacity: number, sendImmediately?: boolean) {\n    assertValidOpacity(opacity);\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setOpacity(opacity, sendImmediately);\n    }\n    this.#opacities.forEach((_, colorIndex) => {\n      this.#setColorOpacity(colorIndex, opacity);\n    });\n  }\n\n  // CONTEXT COMMANDS\n  #contextStack: DisplayContextState[] = [];\n  async #saveContext(sendImmediately?: boolean) {\n    //_console.log(\"saveContext\");\n    this.#contextStack.push(structuredClone(this.contextState));\n  }\n  async #restoreContext(sendImmediately?: boolean) {\n    //_console.log(\"restoreContext\");\n    const contextState = this.#contextStack.pop();\n    if (!contextState) {\n      _console.warn(\"#contextStack empty\");\n      return;\n    }\n    this.#contextStateHelper.update(contextState);\n    if (!this.#ignoreDevice) {\n      await this.#updateDeviceContextState(sendImmediately);\n    }\n  }\n  async saveContext(sendImmediately?: boolean) {\n    await this.#saveContext(sendImmediately);\n    // if (this.device?.isConnected && !this.#ignoreDevice) {\n    //   await this.deviceDisplayManager!.saveContext(sendImmediately);\n    // }\n  }\n  async restoreContext(sendImmediately?: boolean) {\n    await this.#restoreContext(sendImmediately);\n    // if (this.device?.isConnected && !this.#ignoreDevice) {\n    //   await this.deviceDisplayManager!.restoreContext(sendImmediately);\n    // }\n  }\n  async selectBackgroundColor(\n    backgroundColorIndex: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidColorIndex(backgroundColorIndex);\n    const differences = this.#contextStateHelper.update({\n      backgroundColorIndex,\n    });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.selectBackgroundColor(\n        backgroundColorIndex,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async selectFillColor(fillColorIndex: number, sendImmediately?: boolean) {\n    this.assertValidColorIndex(fillColorIndex);\n    const differences = this.#contextStateHelper.update({\n      fillColorIndex,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.selectFillColor(\n        fillColorIndex,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async selectLineColor(lineColorIndex: number, sendImmediately?: boolean) {\n    this.assertValidColorIndex(lineColorIndex);\n    const differences = this.#contextStateHelper.update({\n      lineColorIndex,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.selectLineColor(\n        lineColorIndex,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setIgnoreFill(ignoreFill: boolean, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      ignoreFill,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setIgnoreFill(\n        ignoreFill,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setIgnoreLine(ignoreLine: boolean, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      ignoreLine,\n    });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setIgnoreLine(\n        ignoreLine,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setFillBackground(fillBackground: boolean, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      fillBackground,\n    });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setFillBackground(\n        fillBackground,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  assertValidLineWidth(lineWidth: number) {\n    _console.assertRangeWithError(\n      \"lineWidth\",\n      lineWidth,\n      0,\n      Math.max(this.width, this.height)\n    );\n  }\n  async setLineWidth(lineWidth: number, sendImmediately?: boolean) {\n    this.assertValidLineWidth(lineWidth);\n    const differences = this.#contextStateHelper.update({\n      lineWidth,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setLineWidth(lineWidth, sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setAlignment(\n    alignmentDirection: DisplayAlignmentDirection,\n    alignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    _console.assertEnumWithError(\n      alignmentDirection,\n      DisplayAlignmentDirections\n    );\n    const alignmentCommand =\n      DisplayAlignmentDirectionToCommandType[alignmentDirection];\n    const alignmentKey =\n      DisplayAlignmentDirectionToStateKey[alignmentDirection];\n    const differences = this.#contextStateHelper.update({\n      [alignmentKey]: alignment,\n    });\n    // console.log({\n    //   alignmentKey,\n    //   alignment,\n    //   differences,\n    // });\n\n    // _console.log({ [cropCommand]: crop });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setAlignment(\n        alignmentDirection,\n        alignment,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setHorizontalAlignment(\n    horizontalAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setAlignment(\"horizontal\", horizontalAlignment, sendImmediately);\n  }\n  async setVerticalAlignment(\n    verticalAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setAlignment(\"vertical\", verticalAlignment, sendImmediately);\n  }\n  async resetAlignment(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      verticalAlignment: DefaultDisplayContextState.verticalAlignment,\n      horizontalAlignment: DefaultDisplayContextState.horizontalAlignment,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.resetAlignment(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setRotation(\n    rotation: number,\n    isRadians: boolean,\n    sendImmediately?: boolean\n  ) {\n    rotation = isRadians ? rotation : degToRad(rotation);\n    rotation = normalizeRadians(rotation);\n    // _console.log({ rotation });\n\n    const differences = this.#contextStateHelper.update({\n      rotation,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setRotation(\n        rotation,\n        true,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async clearRotation(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      rotation: 0,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.clearRotation(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentStartCap(\n    segmentStartCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ) {\n    assertValidSegmentCap(segmentStartCap);\n    const differences = this.#contextStateHelper.update({\n      segmentStartCap,\n    });\n\n    // _console.log({ segmentStartCap });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSegmentStartCap(\n        segmentStartCap,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentEndCap(\n    segmentEndCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ) {\n    assertValidSegmentCap(segmentEndCap);\n    const differences = this.#contextStateHelper.update({\n      segmentEndCap,\n    });\n\n    // _console.log({ segmentEndCap });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSegmentEndCap(\n        segmentEndCap,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentCap(\n    segmentCap: DisplaySegmentCap,\n    sendImmediately?: boolean\n  ) {\n    assertValidSegmentCap(segmentCap);\n    const differences = this.#contextStateHelper.update({\n      segmentStartCap: segmentCap,\n      segmentEndCap: segmentCap,\n    });\n\n    // _console.log({ segmentCap });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSegmentCap(\n        segmentCap,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentStartRadius(\n    segmentStartRadius: number,\n    sendImmediately?: boolean\n  ) {\n    const differences = this.#contextStateHelper.update({\n      segmentStartRadius,\n    });\n\n    // _console.log({ segmentStartRadius });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSegmentStartRadius(\n        segmentStartRadius,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSegmentEndRadius(\n    segmentEndRadius: number,\n    sendImmediately?: boolean\n  ) {\n    const differences = this.#contextStateHelper.update({\n      segmentEndRadius,\n    });\n\n    // _console.log({ segmentEndRadius });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSegmentEndRadius(\n        segmentEndRadius,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  // START\n  async setSegmentRadius(segmentRadius: number, sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      segmentStartRadius: segmentRadius,\n      segmentEndRadius: segmentRadius,\n    });\n\n    // _console.log({ segmentRadius });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSegmentRadius(\n        segmentRadius,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setCrop(\n    cropDirection: DisplayCropDirection,\n    crop: number,\n    sendImmediately?: boolean\n  ) {\n    _console.assertEnumWithError(cropDirection, DisplayCropDirections);\n    crop = Math.max(0, crop);\n    const cropKey = DisplayCropDirectionToStateKey[cropDirection];\n    const differences = this.#contextStateHelper.update({\n      [cropKey]: crop,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setCrop(\n        cropDirection,\n        crop,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setCropTop(cropTop: number, sendImmediately?: boolean) {\n    await this.setCrop(\"top\", cropTop, sendImmediately);\n  }\n  async setCropRight(cropRight: number, sendImmediately?: boolean) {\n    await this.setCrop(\"right\", cropRight, sendImmediately);\n  }\n  async setCropBottom(cropBottom: number, sendImmediately?: boolean) {\n    await this.setCrop(\"bottom\", cropBottom, sendImmediately);\n  }\n  async setCropLeft(cropLeft: number, sendImmediately?: boolean) {\n    await this.setCrop(\"left\", cropLeft, sendImmediately);\n  }\n  async clearCrop(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      cropTop: 0,\n      cropRight: 0,\n      cropBottom: 0,\n      cropLeft: 0,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.clearCrop(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setRotationCrop(\n    cropDirection: DisplayCropDirection,\n    crop: number,\n    sendImmediately?: boolean\n  ) {\n    _console.assertEnumWithError(cropDirection, DisplayCropDirections);\n    const cropCommand =\n      DisplayRotationCropDirectionToCommandType[cropDirection];\n    const cropKey = DisplayRotationCropDirectionToStateKey[cropDirection];\n    const differences = this.#contextStateHelper.update({\n      [cropKey]: crop,\n    });\n\n    // _console.log({ [cropCommand]: crop });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setRotationCrop(\n        cropDirection,\n        crop,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setRotationCropTop(rotationCropTop: number, sendImmediately?: boolean) {\n    await this.setRotationCrop(\"top\", rotationCropTop, sendImmediately);\n  }\n  async setRotationCropRight(\n    rotationCropRight: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setRotationCrop(\"right\", rotationCropRight, sendImmediately);\n  }\n  async setRotationCropBottom(\n    rotationCropBottom: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setRotationCrop(\"bottom\", rotationCropBottom, sendImmediately);\n  }\n  async setRotationCropLeft(\n    rotationCropLeft: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setRotationCrop(\"left\", rotationCropLeft, sendImmediately);\n  }\n  async clearRotationCrop(sendImmediately?: boolean) {\n    const differences = this.#contextStateHelper.update({\n      rotationCropTop: 0,\n      rotationCropRight: 0,\n      rotationCropBottom: 0,\n      rotationCropLeft: 0,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.clearRotationCrop(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  get bitmapColorIndices() {\n    return this.contextState.bitmapColorIndices;\n  }\n  get bitmapColors() {\n    return this.bitmapColorIndices.map((colorIndex) => this.colors[colorIndex]);\n  }\n  async selectBitmapColor(\n    bitmapColorIndex: number,\n    colorIndex: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidColorIndex(bitmapColorIndex);\n    const bitmapColorIndices = this.contextState.bitmapColorIndices.slice();\n    bitmapColorIndices[bitmapColorIndex] = colorIndex;\n    const differences = this.#contextStateHelper.update({\n      bitmapColorIndices,\n    });\n\n    // _console.log({ bitmapColorIndex, colorIndex });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.selectBitmapColor(\n        bitmapColorIndex,\n        colorIndex,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async selectBitmapColors(\n    bitmapColorPairs: DisplayBitmapColorPair[],\n    sendImmediately?: boolean\n  ) {\n    _console.assertRangeWithError(\n      \"bitmapColors\",\n      bitmapColorPairs.length,\n      1,\n      this.numberOfColors\n    );\n    const bitmapColorIndices = this.contextState.bitmapColorIndices.slice();\n    bitmapColorPairs.forEach(({ bitmapColorIndex, colorIndex }) => {\n      this.assertValidColorIndex(bitmapColorIndex);\n      this.assertValidColorIndex(colorIndex);\n      bitmapColorIndices[bitmapColorIndex] = colorIndex;\n    });\n\n    const differences = this.#contextStateHelper.update({\n      bitmapColorIndices,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.selectBitmapColors(\n        bitmapColorPairs,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setBitmapColor(\n    bitmapColorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ) {\n    return this.setColor(\n      this.bitmapColorIndices[bitmapColorIndex],\n      color,\n      sendImmediately\n    );\n  }\n  async setBitmapColorOpacity(\n    bitmapColorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ) {\n    return this.setColorOpacity(\n      this.bitmapColorIndices[bitmapColorIndex],\n      opacity,\n      sendImmediately\n    );\n  }\n\n  async setBitmapScaleDirection(\n    direction: DisplayScaleDirection,\n    bitmapScale: number,\n    sendImmediately?: boolean\n  ) {\n    bitmapScale = clamp(bitmapScale, minDisplayScale, maxDisplayScale);\n    bitmapScale = roundScale(bitmapScale);\n    //_console.log({ bitmapScale });\n    const newState: PartialDisplayContextState = {};\n    switch (direction) {\n      case \"all\":\n        newState.bitmapScaleX = bitmapScale;\n        newState.bitmapScaleY = bitmapScale;\n        break;\n      case \"x\":\n        newState.bitmapScaleX = bitmapScale;\n        break;\n      case \"y\":\n        newState.bitmapScaleY = bitmapScale;\n        break;\n    }\n    const differences = this.#contextStateHelper.update(newState);\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setBitmapScaleDirection(\n        direction,\n        bitmapScale,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setBitmapScaleX(bitmapScaleX: number, sendImmediately?: boolean) {\n    return this.setBitmapScaleDirection(\"x\", bitmapScaleX, sendImmediately);\n  }\n  async setBitmapScaleY(bitmapScaleY: number, sendImmediately?: boolean) {\n    return this.setBitmapScaleDirection(\"y\", bitmapScaleY, sendImmediately);\n  }\n  async setBitmapScale(bitmapScale: number, sendImmediately?: boolean) {\n    return this.setBitmapScaleDirection(\"all\", bitmapScale, sendImmediately);\n  }\n  async resetBitmapScale(sendImmediately?: boolean) {\n    //return this.setBitmapScaleDirection(\"all\", 1, sendImmediately);\n\n    const differences = this.#contextStateHelper.update({\n      bitmapScaleX: 1,\n      bitmapScaleY: 1,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.resetBitmapScale(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  get spriteColorIndices() {\n    return this.contextState.spriteColorIndices;\n  }\n  get spriteColors() {\n    return this.spriteColorIndices.map((colorIndex) => this.colors[colorIndex]);\n  }\n  get spriteBitmapColorIndices() {\n    return this.bitmapColorIndices.map(\n      (colorIndex) => this.spriteColorIndices[colorIndex]\n    );\n  }\n  get spriteBitmapColors() {\n    return this.spriteBitmapColorIndices.map(\n      (colorIndex) => this.colors[colorIndex]\n    );\n  }\n  async selectSpriteColor(\n    spriteColorIndex: number,\n    colorIndex: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidColorIndex(spriteColorIndex);\n    const spriteColorIndices = this.contextState.spriteColorIndices.slice();\n    spriteColorIndices[spriteColorIndex] = colorIndex;\n    const differences = this.#contextStateHelper.update({\n      spriteColorIndices,\n    });\n\n    // _console.log({ spriteColorIndex, colorIndex });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.selectSpriteColor(\n        spriteColorIndex,\n        colorIndex,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async selectSpriteColors(\n    spriteColorPairs: DisplaySpriteColorPair[],\n    sendImmediately?: boolean\n  ) {\n    _console.assertRangeWithError(\n      \"spriteColors\",\n      spriteColorPairs.length,\n      1,\n      this.numberOfColors\n    );\n    const spriteColorIndices = this.contextState.spriteColorIndices.slice();\n    spriteColorPairs.forEach(({ spriteColorIndex, colorIndex }) => {\n      this.assertValidColorIndex(spriteColorIndex);\n      this.assertValidColorIndex(colorIndex);\n      spriteColorIndices[spriteColorIndex] = colorIndex;\n    });\n\n    const differences = this.#contextStateHelper.update({\n      spriteColorIndices,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.selectSpriteColors(\n        spriteColorPairs,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpriteColor(\n    spriteColorIndex: number,\n    color: DisplayColorRGB | string,\n    sendImmediately?: boolean\n  ) {\n    return this.setColor(\n      this.spriteColorIndices[spriteColorIndex],\n      color,\n      sendImmediately\n    );\n  }\n  async setSpriteColorOpacity(\n    spriteColorIndex: number,\n    opacity: number,\n    sendImmediately?: boolean\n  ) {\n    return this.setColorOpacity(\n      this.spriteColorIndices[spriteColorIndex],\n      opacity,\n      sendImmediately\n    );\n  }\n\n  async resetSpriteColors(sendImmediately?: boolean) {\n    const spriteColorIndices = new Array(this.numberOfColors).fill(0);\n    const differences = this.#contextStateHelper.update({\n      spriteColorIndices,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.resetSpriteColors(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpriteScaleDirection(\n    direction: DisplayScaleDirection,\n    spriteScale: number,\n    sendImmediately?: boolean\n  ) {\n    spriteScale = clamp(spriteScale, minDisplayScale, maxDisplayScale);\n    spriteScale = roundScale(spriteScale);\n    const newState: PartialDisplayContextState = {};\n    switch (direction) {\n      case \"all\":\n        newState.spriteScaleX = spriteScale;\n        newState.spriteScaleY = spriteScale;\n        break;\n      case \"x\":\n        newState.spriteScaleX = spriteScale;\n        break;\n      case \"y\":\n        newState.spriteScaleY = spriteScale;\n        break;\n    }\n    const differences = this.#contextStateHelper.update(newState);\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSpriteScaleDirection(\n        direction,\n        spriteScale,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpriteScaleX(spriteScaleX: number, sendImmediately?: boolean) {\n    return this.setSpriteScaleDirection(\"x\", spriteScaleX, sendImmediately);\n  }\n  async setSpriteScaleY(spriteScaleY: number, sendImmediately?: boolean) {\n    return this.setSpriteScaleDirection(\"y\", spriteScaleY, sendImmediately);\n  }\n  async setSpriteScale(spriteScale: number, sendImmediately?: boolean) {\n    return this.setSpriteScaleDirection(\"all\", spriteScale, sendImmediately);\n  }\n  async resetSpriteScale(sendImmediately?: boolean) {\n    //return this.setSpriteScaleDirection(\"all\", 1, sendImmediately);\n\n    const differences = this.#contextStateHelper.update({\n      spriteScaleX: 1,\n      spriteScaleY: 1,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.resetSpriteScale(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpritesLineHeight(\n    spritesLineHeight: number,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidLineWidth(spritesLineHeight);\n    const differences = this.#contextStateHelper.update({\n      spritesLineHeight,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setSpritesLineHeight(\n        spritesLineHeight,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n\n  async setSpritesDirectionGeneric(\n    direction: DisplayDirection,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ) {\n    assertValidDirection(direction);\n    const stateKey: DisplayContextStateKey = isOrthogonal\n      ? \"spritesLineDirection\"\n      : \"spritesDirection\";\n    const differences = this.#contextStateHelper.update({\n      [stateKey]: direction,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      this.deviceDisplayManager!.setSpritesDirectionGeneric(\n        direction,\n        isOrthogonal,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpritesDirection(\n    spritesDirection: DisplayDirection,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesDirectionGeneric(\n      spritesDirection,\n      false,\n      sendImmediately\n    );\n  }\n  async setSpritesLineDirection(\n    spritesLineDirection: DisplayDirection,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesDirectionGeneric(\n      spritesLineDirection,\n      true,\n      sendImmediately\n    );\n  }\n\n  async setSpritesSpacingGeneric(\n    spacing: number,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ) {\n    const stateKey: DisplayContextStateKey = isOrthogonal\n      ? \"spritesLineSpacing\"\n      : \"spritesSpacing\";\n    const differences = this.#contextStateHelper.update({\n      [stateKey]: spacing,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      this.deviceDisplayManager!.setSpritesSpacingGeneric(\n        spacing,\n        isOrthogonal,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpritesSpacing(spritesSpacing: number, sendImmediately?: boolean) {\n    await this.setSpritesSpacingGeneric(spritesSpacing, false, sendImmediately);\n  }\n  async setSpritesLineSpacing(\n    spritesSpacing: number,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesSpacingGeneric(spritesSpacing, true, sendImmediately);\n  }\n\n  async setSpritesAlignmentGeneric(\n    alignment: DisplayAlignment,\n    isOrthogonal: boolean,\n    sendImmediately?: boolean\n  ) {\n    assertValidAlignment(alignment);\n    const stateKey: DisplayContextStateKey = isOrthogonal\n      ? \"spritesLineAlignment\"\n      : \"spritesAlignment\";\n    const differences = this.#contextStateHelper.update({\n      [stateKey]: alignment,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      this.deviceDisplayManager!.setSpritesAlignmentGeneric(\n        alignment,\n        isOrthogonal,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  async setSpritesAlignment(\n    spritesAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesAlignmentGeneric(\n      spritesAlignment,\n      false,\n      sendImmediately\n    );\n  }\n  async setSpritesLineAlignment(\n    spritesLineAlignment: DisplayAlignment,\n    sendImmediately?: boolean\n  ) {\n    await this.setSpritesAlignmentGeneric(\n      spritesLineAlignment,\n      true,\n      sendImmediately\n    );\n  }\n\n  #clearRectToCanvas(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    {\n      backgroundColorIndex,\n      spriteColorIndices,\n      fillBackground,\n    }: DisplayContextState\n  ) {\n    this.#save();\n    if (this.#useSpriteColorIndices) {\n      backgroundColorIndex = spriteColorIndices[backgroundColorIndex];\n    }\n    //this.context.resetTransform();\n    this.context.fillStyle = this.#colorIndexToRgbString(\n      fillBackground ? backgroundColorIndex : 0\n    );\n    // _console.log({\n    //   useSpriteColorIndices: this.#useSpriteColorIndices,\n    //   backgroundColorIndex,\n    //   fillBackground,\n    //   fillStyle: this.context.fillStyle,\n    // });\n    //this.context.fillStyle = \"red\"; // remove when done debugigng\n    this.context.fillRect(x, y, width, height);\n    this.#restore();\n  }\n  async clearRect(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ) {\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#clearRectToCanvas(x, y, width, height, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.clearRect(\n        x,\n        y,\n        width,\n        height,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #save() {\n    //console.trace(\"save\", window.s);\n    const ctx = this.#context;\n    ctx.save();\n  }\n  #restore() {\n    //console.trace(\"restore\");\n    const ctx = this.#context;\n    ctx.restore();\n  }\n  #transformContext(offsetX: number, offsetY: number, rotation: number) {\n    this.#translateContext(offsetX, offsetY);\n    this.#rotateContext(rotation);\n  }\n  #translateContext(offsetX: number, offsetY: number) {\n    const ctx = this.context;\n    ctx.translate(offsetX, offsetY);\n  }\n  #rotateContext(rotation: number) {\n    const ctx = this.context;\n    ctx.rotate(rotation);\n  }\n  #scaleContext(scaleX: number, scaleY: number) {\n    const ctx = this.context;\n    ctx.scale(scaleX, scaleY);\n  }\n  #correctAlignmentTranslation(\n    { width, height }: DisplayBoundingBox,\n    { verticalAlignment, horizontalAlignment }: DisplayContextState\n  ) {\n    switch (horizontalAlignment) {\n      case \"start\":\n        this.#translateContext(width / 2, 0);\n        break;\n      case \"center\":\n        break;\n      case \"end\":\n        this.#translateContext(-width / 2, 0);\n        break;\n    }\n    switch (verticalAlignment) {\n      case \"start\":\n        this.#translateContext(0, height / 2);\n        break;\n      case \"center\":\n        break;\n      case \"end\":\n        this.#translateContext(0, -height / 2);\n        break;\n    }\n  }\n  #rotateBoundingBox(\n    box: DisplayBoundingBox,\n    rotation: number\n  ): DisplayBoundingBox {\n    const cos = Math.cos(rotation);\n    const sin = Math.sin(rotation);\n\n    const corners = [\n      { x: box.x, y: box.y },\n      { x: box.x, y: box.height + box.y },\n      { x: box.x + box.width, y: box.y },\n      { x: box.x + box.width, y: box.height + box.y },\n    ];\n\n    const rotated = corners.map(({ x, y }) => ({\n      x: x * cos - y * sin,\n      y: x * sin + y * cos,\n    }));\n\n    const xs = rotated.map((p) => p.x);\n    const ys = rotated.map((p) => p.y);\n\n    const minX = Math.min(...xs);\n    const maxX = Math.max(...xs);\n    const minY = Math.min(...ys);\n    const maxY = Math.max(...ys);\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY,\n    };\n  }\n  #offsetBoundingBox(\n    box: DisplayBoundingBox,\n    offsetX: number,\n    offsetY: number\n  ): DisplayBoundingBox {\n    const offsetBoundingBox = structuredClone(box);\n    offsetBoundingBox.x += offsetX;\n    offsetBoundingBox.y += offsetY;\n    return offsetBoundingBox;\n  }\n  #clearBoundingBoxOnDraw = true;\n  #clearBoundingBox(\n    { x, y, width, height }: DisplayBoundingBox,\n    contextState: DisplayContextState\n  ) {\n    this.#clearRectToCanvas(x, y, width, height, contextState);\n  }\n  #getOuterPadding(lineWidth: number) {\n    return Math.ceil(lineWidth / 2);\n  }\n  #getRectBoundingBox(\n    width: number,\n    height: number,\n    { lineWidth, verticalAlignment, horizontalAlignment }: DisplayContextState,\n    applyLineWidth = true\n  ): DisplayBoundingBox {\n    const outerPadding = applyLineWidth ? this.#getOuterPadding(lineWidth) : 0;\n    const boundingBox = {\n      x: 0,\n      y: 0,\n      width: width + outerPadding * 2,\n      height: height + outerPadding * 2,\n    };\n    assertValidAlignment(horizontalAlignment);\n    assertValidAlignment(verticalAlignment);\n    switch (horizontalAlignment) {\n      case \"start\":\n        break;\n      case \"center\":\n        boundingBox.x -= boundingBox.width / 2;\n        break;\n      case \"end\":\n        boundingBox.x -= boundingBox.width;\n        break;\n    }\n    switch (verticalAlignment) {\n      case \"start\":\n        break;\n      case \"center\":\n        boundingBox.y -= boundingBox.height / 2;\n        break;\n      case \"end\":\n        boundingBox.y -= boundingBox.height;\n        break;\n    }\n    return boundingBox;\n  }\n  #applyClip(\n    { x, y, height, width }: DisplayBoundingBox,\n    { cropTop, cropRight, cropBottom, cropLeft }: DisplayContextState\n  ) {\n    const ctx = this.context;\n    ctx.beginPath();\n    ctx.rect(x + cropLeft, y + cropTop, width - cropRight, height - cropBottom);\n    ctx.clip();\n  }\n  #applyRotationClip(\n    { x, y, height, width }: DisplayBoundingBox,\n    {\n      rotationCropTop,\n      rotationCropRight,\n      rotationCropBottom,\n      rotationCropLeft,\n    }: DisplayContextState\n  ) {\n    const ctx = this.context;\n    ctx.beginPath();\n    ctx.rect(\n      x + rotationCropLeft,\n      y + rotationCropTop,\n      width - rotationCropRight,\n      height - rotationCropBottom\n    );\n\n    ctx.clip();\n  }\n\n  #hexToRgbWithOpacity(hex: string, opacity: number): DisplayColorRGB {\n    // Expand shorthand hex (#f00 → #ff0000)\n    if (hex.length === 4) {\n      hex = \"#\" + [...hex.slice(1)].map((c) => c + c).join(\"\");\n    }\n\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n\n    // Darken color by blending toward black\n    const darken = (c: number) => Math.round(c * opacity);\n\n    const dr = darken(r);\n    const dg = darken(g);\n    const db = darken(b);\n\n    return { r: dr, g: dg, b: db };\n  }\n  #hexToRgbStringWithOpacity(hex: string, opacity: number) {\n    const { r, g, b } = this.#hexToRgbWithOpacity(hex, opacity);\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n  #getColorOpacity(colorIndex: number, includeBrightness = false) {\n    return (\n      this.opacities[colorIndex] *\n      (includeBrightness ? this.#brightnessOpacity : 1)\n    );\n  }\n  #colorIndexToRgbString(colorIndex: number) {\n    return this.#hexToRgbStringWithOpacity(\n      this.colors[colorIndex],\n      this.#getColorOpacity(colorIndex)\n    );\n  }\n  #colorIndexToRgb(colorIndex: number) {\n    return this.#hexToRgbWithOpacity(\n      this.colors[colorIndex],\n      this.#getColorOpacity(colorIndex)\n    );\n  }\n  #ignoreCanvasContextStyle = \"rgba(0,0,0,0)\";\n  #updateContext({\n    lineWidth,\n    fillColorIndex,\n    lineColorIndex,\n    spriteColorIndices,\n    ignoreFill,\n    ignoreLine,\n  }: DisplayContextState) {\n    if (this.#useSpriteColorIndices) {\n      fillColorIndex = spriteColorIndices[fillColorIndex];\n      lineColorIndex = spriteColorIndices[lineColorIndex];\n    }\n    this.context.fillStyle = ignoreFill\n      ? this.#ignoreCanvasContextStyle\n      : this.#colorIndexToRgbString(fillColorIndex);\n    this.context.strokeStyle = ignoreLine\n      ? this.#ignoreCanvasContextStyle\n      : this.#colorIndexToRgbString(lineColorIndex);\n    this.context.lineWidth = lineWidth;\n    // _console.log({ fillColorIndex, lineColorIndex, lineWidth });\n    // _console.log({fillStyle: this.context.fillStyle, strokeStyle: this.context.strokeStyle})\n  }\n  #drawRectToCanvas(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    contextState: DisplayContextState\n  ) {\n    this.#updateContext(contextState);\n\n    this.#save();\n    const localBox = this.#getRectBoundingBox(width, height, contextState);\n    const rotatedLocalBox = this.#rotateBoundingBox(\n      localBox,\n      contextState.rotation\n    );\n    const rotatedBox = this.#offsetBoundingBox(\n      rotatedLocalBox,\n      offsetX,\n      offsetY\n    );\n    this.#applyClip(rotatedBox, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(rotatedBox, contextState);\n    }\n    this.#transformContext(offsetX, offsetY, contextState.rotation);\n    this.#applyRotationClip(localBox, contextState);\n\n    const outerPadding = this.#getOuterPadding(contextState.lineWidth);\n    const startX = localBox.x + outerPadding;\n    const startY = localBox.y + outerPadding;\n    this.context.fillRect(startX, startY, width, height);\n    if (contextState.lineWidth > 0) {\n      this.context.strokeRect(startX, startY, width, height);\n    }\n    this.#restore();\n  }\n  async drawRect(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ) {\n    const contextState = structuredClone(this.contextState);\n    //console.log(\"drawRect contextState\", contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawRectToCanvas(offsetX, offsetY, width, height, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawRect(\n        offsetX,\n        offsetY,\n        width,\n        height,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #drawRoundRectToCanvas(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    borderRadius: number,\n    contextState: DisplayContextState\n  ) {\n    this.#updateContext(contextState);\n\n    const maxBorderRadius = Math.min(width, height) / 2;\n    borderRadius = Math.min(borderRadius, maxBorderRadius);\n\n    this.#save();\n    const localBox = this.#getRectBoundingBox(width, height, contextState);\n    const rotatedLocalBox = this.#rotateBoundingBox(\n      localBox,\n      contextState.rotation\n    );\n    const rotatedBox = this.#offsetBoundingBox(\n      rotatedLocalBox,\n      offsetX,\n      offsetY\n    );\n    this.#applyClip(rotatedBox, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(rotatedBox, contextState);\n    }\n    this.#transformContext(offsetX, offsetY, contextState.rotation);\n    this.#applyRotationClip(localBox, contextState);\n\n    const outerPadding = this.#getOuterPadding(contextState.lineWidth);\n    const startX = localBox.x + outerPadding;\n    const startY = localBox.y + outerPadding;\n\n    this.context.beginPath();\n    this.context.roundRect(startX, startY, width, height, borderRadius);\n    this.context.fill();\n    if (contextState.lineWidth > 0) {\n      this.context.stroke();\n    }\n    this.#restore();\n  }\n  async drawRoundRect(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    borderRadius: number,\n    sendImmediately?: boolean\n  ) {\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawRoundRectToCanvas(\n        offsetX,\n        offsetY,\n        width,\n        height,\n        borderRadius,\n        contextState\n      )\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawRoundRect(\n        offsetX,\n        offsetY,\n        width,\n        height,\n        borderRadius,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #getCircleBoundingBox(\n    radius: number,\n    contextState: DisplayContextState\n  ): DisplayBoundingBox {\n    const diameter = radius * 2;\n    return this.#getRectBoundingBox(diameter, diameter, contextState);\n  }\n  #drawCircleToCanvas(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    contextState: DisplayContextState\n  ) {\n    this.#drawArcEllipseToCanvas(\n      offsetX,\n      offsetY,\n      radius,\n      radius,\n      0,\n      360,\n      false,\n      contextState\n    );\n  }\n  async drawCircle(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    sendImmediately?: boolean\n  ) {\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawCircleToCanvas(offsetX, offsetY, radius, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawCircle(\n        offsetX,\n        offsetY,\n        radius,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #drawEllipseToCanvas(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    contextState: DisplayContextState\n  ) {\n    this.#drawArcEllipseToCanvas(\n      offsetX,\n      offsetY,\n      radiusX,\n      radiusY,\n      0,\n      360,\n      false,\n      contextState\n    );\n  }\n  async drawEllipse(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    sendImmediately?: boolean\n  ) {\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawEllipseToCanvas(\n        offsetX,\n        offsetY,\n        radiusX,\n        radiusY,\n        contextState\n      )\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawEllipse(\n        offsetX,\n        offsetY,\n        radiusX,\n        radiusY,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #getRegularPolygonBoundingBox(\n    radius: number,\n    numberOfSides: number,\n    { lineWidth }: DisplayContextState\n  ): DisplayBoundingBox {\n    let outerPadding = Math.ceil(lineWidth / 2);\n    const shapeFactor = 1 / Math.cos(Math.PI / numberOfSides);\n    outerPadding = Math.ceil(outerPadding * shapeFactor);\n\n    const diameter = radius * 2;\n    const regularPolygonBoundingBox = {\n      x: -radius - outerPadding,\n      y: -radius - outerPadding,\n      width: diameter + outerPadding * 2,\n      height: diameter + outerPadding * 2,\n    };\n    //_console.log(\"regularPolygonBoundingBox\", regularPolygonBoundingBox);\n    return regularPolygonBoundingBox;\n  }\n  #drawRegularPolygonToCanvas(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    numberOfSides: number,\n    contextState: DisplayContextState\n  ) {\n    this.#updateContext(contextState);\n\n    this.#save();\n    const localBox = this.#getRegularPolygonBoundingBox(\n      radius,\n      numberOfSides,\n      contextState\n    );\n    const rotatedLocalBox = this.#rotateBoundingBox(\n      localBox,\n      contextState.rotation\n    );\n    const rotatedBox = this.#offsetBoundingBox(\n      rotatedLocalBox,\n      offsetX,\n      offsetY\n    );\n    this.#applyClip(rotatedBox, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(rotatedBox, contextState);\n    }\n    this.#transformContext(offsetX, offsetY, contextState.rotation);\n    this.#applyRotationClip(localBox, contextState);\n\n    this.context.beginPath();\n    const angleStep = (Math.PI * 2) / numberOfSides;\n    for (let i = 0; i < numberOfSides; i++) {\n      const angle = i * angleStep;\n      const x = radius * Math.cos(angle);\n      const y = radius * Math.sin(angle);\n      if (i === 0) {\n        this.context.moveTo(x, y);\n      } else {\n        this.context.lineTo(x, y);\n      }\n    }\n    this.context.closePath();\n\n    this.context.fill();\n    if (contextState.lineWidth > 0) {\n      this.context.stroke();\n    }\n    this.#restore();\n  }\n  async drawRegularPolygon(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    numberOfSides: number,\n    sendImmediately?: boolean\n  ) {\n    if (numberOfSides < 3) {\n      _console.error(`invalid numberOfSides ${numberOfSides}`);\n      return;\n    }\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawRegularPolygonToCanvas(\n        offsetX,\n        offsetY,\n        radius,\n        numberOfSides,\n        contextState\n      )\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawRegularPolygon(\n        offsetX,\n        offsetY,\n        radius,\n        numberOfSides,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #getPointsBoundingBox(\n    points: Vector2[],\n    { lineWidth, verticalAlignment, horizontalAlignment }: DisplayContextState,\n    applyLineWidth = true,\n    applyAlignment = false\n  ): DisplayBoundingBox {\n    const outerPadding = applyLineWidth ? this.#getOuterPadding(lineWidth) : 0;\n\n    let minX = 0;\n    let maxX = 0;\n    let minY = 0;\n    let maxY = 0;\n    points.forEach((point, index) => {\n      if (index == 0) {\n        minX = maxX = point.x;\n        minY = maxY = point.y;\n      } else {\n        minX = Math.min(minX, point.x);\n        maxX = Math.max(maxX, point.x);\n\n        minY = Math.min(minY, point.y);\n        maxY = Math.max(maxY, point.y);\n      }\n    });\n\n    const pointsBoundingBox = {\n      x: minX - outerPadding,\n      y: minY - outerPadding,\n      width: maxX - minX + outerPadding * 2,\n      height: maxY - minY + outerPadding * 2,\n    };\n    if (applyAlignment) {\n      assertValidAlignment(horizontalAlignment);\n      assertValidAlignment(verticalAlignment);\n      switch (horizontalAlignment) {\n        case \"start\":\n          pointsBoundingBox.x = 0;\n          break;\n        case \"center\":\n          break;\n        case \"end\":\n          pointsBoundingBox.x = -pointsBoundingBox.width;\n          break;\n      }\n      switch (verticalAlignment) {\n        case \"start\":\n          pointsBoundingBox.y = 0;\n          break;\n        case \"center\":\n          break;\n        case \"end\":\n          pointsBoundingBox.y = -pointsBoundingBox.height;\n          break;\n      }\n    }\n    //_console.log(\"pointsBoundingBox\", pointsBoundingBox);\n    return pointsBoundingBox;\n  }\n  #alignBoundingBox(\n    boundingBox: DisplayBoundingBox,\n    { verticalAlignment, horizontalAlignment }: DisplayContextState\n  ): DisplayBoundingBox {\n    const alignedBoundingBox = structuredClone(boundingBox);\n    assertValidAlignment(horizontalAlignment);\n    assertValidAlignment(verticalAlignment);\n    switch (horizontalAlignment) {\n      case \"start\":\n        alignedBoundingBox.x = 0;\n        break;\n      case \"center\":\n        break;\n      case \"end\":\n        alignedBoundingBox.x = -alignedBoundingBox.width;\n        break;\n    }\n    switch (verticalAlignment) {\n      case \"start\":\n        alignedBoundingBox.y = 0;\n        break;\n      case \"center\":\n        break;\n      case \"end\":\n        alignedBoundingBox.y = -alignedBoundingBox.height;\n        break;\n    }\n    //_console.log(\"alignedBoundingBox\", alignedBoundingBox);\n    return alignedBoundingBox;\n  }\n  #drawPolygonToCanvas(\n    offsetX: number,\n    offsetY: number,\n    points: Vector2[],\n    contextState: DisplayContextState\n  ) {\n    //_console.log(\"drawPolygonToCanvas\", { offsetX, offsetY, points });\n    this.#updateContext(contextState);\n\n    this.#save();\n    const centeredLocalBox = this.#getPointsBoundingBox(\n      points,\n      contextState,\n      true,\n      false\n    );\n    const localBox = this.#alignBoundingBox(centeredLocalBox, contextState);\n    const rotatedLocalBox = this.#rotateBoundingBox(\n      localBox,\n      contextState.rotation\n    );\n    const rotatedBox = this.#offsetBoundingBox(\n      rotatedLocalBox,\n      offsetX,\n      offsetY\n    );\n    this.#applyClip(rotatedBox, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(rotatedBox, contextState);\n    }\n    this.#transformContext(offsetX, offsetY, contextState.rotation);\n    this.#applyRotationClip(localBox, contextState);\n    this.context.translate(\n      localBox.x - centeredLocalBox.x,\n      localBox.y - centeredLocalBox.y\n    );\n\n    this.context.beginPath();\n    points.forEach((point, index) => {\n      //_console.log(index, point);\n      if (index == 0) {\n        this.context.moveTo(point.x, point.y);\n      } else {\n        this.context.lineTo(point.x, point.y);\n      }\n    });\n    this.context.closePath();\n\n    this.context.fill();\n    if (contextState.lineWidth > 0) {\n      this.context.stroke();\n    }\n    this.#restore();\n  }\n  async drawPolygon(points: Vector2[], sendImmediately?: boolean) {\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawPolygonToCanvas(0, 0, points, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawPolygon(points, sendImmediately);\n    }\n  }\n  #getWireframeBoundingBox(\n    { edges, points }: DisplayWireframe,\n    contextState: DisplayContextState\n  ): DisplayBoundingBox {\n    const segments: DisplaySegment[] = [];\n    edges.forEach((edge) => {\n      const { startIndex, endIndex } = edge;\n      const point = points[startIndex];\n      const nextPoint = points[endIndex];\n      segments.push({ start: point, end: nextPoint });\n    });\n    return this.#_getSegmentsBoundingBox(segments, contextState);\n  }\n  #drawWireframeToCanvas(\n    wireframe: DisplayWireframe,\n    contextState: DisplayContextState\n  ) {\n    _console.log(\"drawWireframeToCanvas\", wireframe);\n    this.#updateContext(contextState);\n\n    this.#save();\n    const box = this.#getWireframeBoundingBox(wireframe, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(box, contextState);\n    }\n\n    const { points, edges } = wireframe;\n    this.#clearBoundingBoxOnDraw = false;\n    edges.forEach((edge) => {\n      const { startIndex, endIndex } = edge;\n      const startPoint = points[startIndex];\n      const endPoint = points[endIndex];\n\n      this.#drawSegmentToCanvas(\n        startPoint.x,\n        startPoint.y,\n        endPoint.x,\n        endPoint.y,\n        contextState,\n        false\n      );\n    });\n    this.#clearBoundingBoxOnDraw = true;\n\n    this.#restore();\n  }\n  async drawWireframe(wireframe: DisplayWireframe, sendImmediately?: boolean) {\n    wireframe = trimWireframe(wireframe);\n    if (wireframe.points.length == 0) {\n      return;\n    }\n    assertValidWireframe(wireframe);\n    if (this.#contextStateHelper.isSegmentUniform) {\n      const polygon = isWireframePolygon(wireframe);\n      if (polygon) {\n        return this.drawSegments(polygon, sendImmediately);\n      }\n    }\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawWireframeToCanvas(wireframe, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawWireframe(\n        wireframe,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n\n  #appendCurvePoint(curvePoints: Vector2[], curvePoint: Vector2) {\n    if (curvePoints.length >= maxNumberOfDisplayCurvePoints) {\n      _console.warn(\n        `numberOfDisplayCurvePoints ${curvePoints.length} exceeded (max ${maxNumberOfDisplayCurvePoints})`\n      );\n    } else {\n      curvePoints.push(curvePoint);\n      //_console.log(`appendCurvePoint curvePoints.length ${curvePoints.length}`);\n    }\n  }\n  #appendCurvePoints(curvePoints: Vector2[], _curvePoints: Vector2[]) {\n    _curvePoints.forEach((curvePoint) => {\n      this.#appendCurvePoint(curvePoints, curvePoint);\n    });\n  }\n\n  #generateQuadraticCurvePoints(controlPoints: Vector2[]) {\n    assertValidNumberOfControlPoints(\"quadratic\", controlPoints);\n    const [p0, p1, p2] = controlPoints;\n    if (false) {\n      const c1: Vector2 = {\n        x: p0.x + (2 / 3) * (p1.x - p0.x),\n        y: p0.y + (2 / 3) * (p1.y - p0.y),\n      };\n      const c2: Vector2 = {\n        x: p2.x + (2 / 3) * (p1.x - p2.x),\n        y: p2.y + (2 / 3) * (p1.y - p2.y),\n      };\n      return this.#generateCubicCurvePoints([p0, c1, c2, p2]);\n    } else {\n      const curvePoints: Vector2[] = [];\n\n      const p01 = getVector2Midpoint(p0, p1);\n      const p12 = getVector2Midpoint(p1, p2);\n      const mid = getVector2Midpoint(p01, p12);\n\n      const d2 = getVector2DistanceSquared(p1, mid);\n\n      if (d2 <= displayCurveToleranceSquared) {\n        curvePoints.push(p2);\n      } else {\n        curvePoints.push(...this.#generateQuadraticCurvePoints([p0, p01, mid]));\n        curvePoints.push(...this.#generateQuadraticCurvePoints([mid, p12, p2]));\n      }\n\n      return curvePoints;\n    }\n  }\n  #appendQuadraticCurvePoints(\n    curvePoints: Vector2[],\n    controlPoints: Vector2[]\n  ) {\n    this.#appendCurvePoints(\n      curvePoints,\n      this.#generateQuadraticCurvePoints(controlPoints)\n    );\n  }\n\n  #generateCubicCurvePoints(controlPoints: Vector2[]): Vector2[] {\n    assertValidNumberOfControlPoints(\"cubic\", controlPoints);\n    const [p0, p1, p2, p3] = controlPoints;\n    const curvePoints: Vector2[] = [];\n\n    const p01 = getVector2Midpoint(p0, p1);\n    const p12 = getVector2Midpoint(p1, p2);\n    const p23 = getVector2Midpoint(p2, p3);\n    const p012 = getVector2Midpoint(p01, p12);\n    const p123 = getVector2Midpoint(p12, p23);\n    const mid = getVector2Midpoint(p012, p123);\n\n    const d2a = getVector2DistanceSquared(p1, mid);\n    const d2b = getVector2DistanceSquared(p2, mid);\n\n    if (\n      d2a <= displayCurveToleranceSquared &&\n      d2b <= displayCurveToleranceSquared\n    ) {\n      curvePoints.push(p3);\n    } else {\n      curvePoints.push(...this.#generateCubicCurvePoints([p0, p01, p012, mid]));\n      curvePoints.push(...this.#generateCubicCurvePoints([mid, p123, p23, p3]));\n    }\n\n    return curvePoints;\n  }\n  #appendCubicCurvePoints(curvePoints: Vector2[], controlPoints: Vector2[]) {\n    this.#appendCurvePoints(\n      curvePoints,\n      this.#generateCubicCurvePoints(controlPoints)\n    );\n  }\n\n  #generateGenericCurvePoints(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    isStart: boolean\n  ) {\n    assertValidNumberOfControlPoints(curveType, controlPoints);\n    let curvePoints: Vector2[] = [];\n    if (isStart) {\n      this.#appendCurvePoint(curvePoints, controlPoints[0]);\n    }\n    switch (curveType) {\n      case \"segment\":\n        this.#appendCurvePoint(curvePoints, controlPoints[1]);\n        break;\n      case \"quadratic\":\n        this.#appendQuadraticCurvePoints(curvePoints, controlPoints);\n        break;\n      case \"cubic\":\n        this.#appendCubicCurvePoints(curvePoints, controlPoints);\n        break;\n    }\n    return curvePoints;\n  }\n  #appendGenericCurvePoints(\n    curvePoints: Vector2[],\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    isStart: boolean\n  ) {\n    const _curvePoints = this.#generateGenericCurvePoints(\n      curveType,\n      controlPoints,\n      isStart\n    );\n    this.#appendCurvePoints(curvePoints, _curvePoints);\n  }\n  #drawCurveToCanvas(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    contextState: DisplayContextState\n  ) {\n    const curvePoints = this.#generateGenericCurvePoints(\n      curveType,\n      controlPoints,\n      true\n    );\n    this.#drawSegmentsToCanvas(curvePoints, contextState);\n  }\n  async drawCurve(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    assertValidNumberOfControlPoints(curveType, controlPoints);\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawCurveToCanvas(curveType, controlPoints, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawCurve(\n        curveType,\n        controlPoints,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #drawCurvesToCanvas(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    contextState: DisplayContextState\n  ) {\n    assertValidPathNumberOfControlPoints(curveType, controlPoints);\n    const numberOfControlPoints =\n      displayCurveTypeToNumberOfControlPoints[curveType];\n    const curvePointsJump = numberOfControlPoints - 1;\n    const numberOfCurves =\n      (controlPoints.length - 1) / (numberOfControlPoints - 1);\n    //_console.log({ numberOfControlPoints, curvePointsJump, numberOfCurves });\n\n    const curvePoints: Vector2[] = [];\n    let curvePointOffset = 0;\n    for (let i = 0; i < numberOfCurves; i++) {\n      const isStart = i == 0;\n      this.#appendGenericCurvePoints(\n        curvePoints,\n        curveType,\n        controlPoints.slice(\n          curvePointOffset,\n          curvePointOffset + numberOfControlPoints\n        ),\n        isStart\n      );\n      curvePointOffset += curvePointsJump;\n    }\n    // _console.log({ curveType, controlPoints, curvePoints });\n    this.#drawSegmentsToCanvas(curvePoints, contextState);\n  }\n  async drawCurves(\n    curveType: DisplayBezierCurveType,\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    assertValidPathNumberOfControlPoints(curveType, controlPoints);\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawCurvesToCanvas(curveType, controlPoints, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawCurves(\n        curveType,\n        controlPoints,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n\n  async drawQuadraticBezierCurve(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurve(\"quadratic\", controlPoints, sendImmediately);\n  }\n  async drawQuadraticBezierCurves(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurves(\"quadratic\", controlPoints, sendImmediately);\n  }\n\n  async drawCubicBezierCurve(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurve(\"cubic\", controlPoints, sendImmediately);\n  }\n  async drawCubicBezierCurves(\n    controlPoints: Vector2[],\n    sendImmediately?: boolean\n  ) {\n    await this.drawCurves(\"cubic\", controlPoints, sendImmediately);\n  }\n\n  #drawPathToCanvas(\n    isClosed: boolean,\n    curves: DisplayBezierCurve[],\n    contextState: DisplayContextState\n  ) {\n    const curvePoints: Vector2[] = [];\n    let _controlPoints: Vector2[];\n    curves.forEach((curve, index) => {\n      const isStart = index == 0;\n      const { type, controlPoints } = curve;\n      //_console.log({ type, controlPoints });\n      if (isStart) {\n        _controlPoints = controlPoints;\n      } else {\n        _controlPoints = [_controlPoints.at(-1)!, ...controlPoints];\n      }\n      this.#appendGenericCurvePoints(\n        curvePoints,\n        type,\n        _controlPoints,\n        isStart\n      );\n    });\n\n    contextState.verticalAlignment = \"center\";\n    contextState.horizontalAlignment = \"center\";\n    if (isClosed) {\n      this.#drawPolygonToCanvas(0, 0, curvePoints, contextState);\n    } else {\n      this.#drawSegmentsToCanvas(curvePoints, contextState);\n    }\n  }\n  async _drawPath(\n    isClosed: boolean,\n    curves: DisplayBezierCurve[],\n    sendImmediately?: boolean\n  ) {\n    assertValidPath(curves);\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawPathToCanvas(isClosed, curves, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!._drawPath(\n        isClosed,\n        curves,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  async drawPath(curves: DisplayBezierCurve[], sendImmediately?: boolean) {\n    await this._drawPath(false, curves, sendImmediately);\n  }\n  async drawClosedPath(\n    curves: DisplayBezierCurve[],\n    sendImmediately?: boolean\n  ) {\n    await this._drawPath(true, curves, sendImmediately);\n  }\n\n  #getLocalSegmentBoundingBox(\n    startX: number,\n    startY: number,\n    endX: number,\n    endY: number,\n    {\n      lineWidth,\n      segmentStartRadius,\n      segmentEndRadius,\n      segmentStartCap,\n      segmentEndCap,\n    }: DisplayContextState\n  ): DisplayBoundingBox {\n    const outerPadding = this.#getOuterPadding(lineWidth);\n    const dx = endX - startX;\n    const dy = endY - startY;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const maxRadius =\n      Math.max(segmentStartRadius, segmentEndRadius) + outerPadding;\n    const width = maxRadius * 2;\n    let height = length;\n    height += outerPadding * 2;\n    if (segmentStartCap == \"round\") {\n      height += segmentStartRadius;\n    }\n    if (segmentEndCap == \"round\") {\n      height += segmentEndRadius;\n    }\n\n    let y = -outerPadding;\n    if (segmentStartCap == \"round\") {\n      y -= segmentStartRadius;\n    }\n\n    const box: DisplayBoundingBox = {\n      x: -maxRadius,\n      y,\n      height,\n      width,\n    };\n    return box;\n  }\n  #getSegmentBoundingBox(\n    startX: number,\n    startY: number,\n    endX: number,\n    endY: number,\n    contextState: DisplayContextState\n  ): DisplayBoundingBox {\n    const localBox = this.#getLocalSegmentBoundingBox(\n      startX,\n      startY,\n      endX,\n      endY,\n      contextState\n    );\n    const dx = endX - startX;\n    const dy = endY - startY;\n    const angle = Math.atan2(dy, dx) - Math.PI / 2;\n    const rotatedBox = this.#rotateBoundingBox(localBox, angle);\n    const offsetBox = this.#offsetBoundingBox(rotatedBox, startX, startY);\n    return offsetBox;\n  }\n  #drawSegmentToCanvas(\n    startX: number,\n    startY: number,\n    endX: number,\n    endY: number,\n    contextState: DisplayContextState,\n    clearBoundingBox = true\n  ) {\n    // _console.log(\"drawSegmentToCanvas\", { startX, startY, endX, endY });\n\n    this.#updateContext(contextState);\n\n    const dx = endX - startX;\n    const dy = endY - startY;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const rotation = Math.atan2(dy, dx) - Math.PI / 2;\n\n    if (length == 0) {\n      return;\n    }\n\n    this.#save();\n    const localBox = this.#getLocalSegmentBoundingBox(\n      startX,\n      startY,\n      endX,\n      endY,\n      contextState\n    );\n    const rotatedLocalBox = this.#rotateBoundingBox(localBox, rotation);\n    const rotatedBox = this.#offsetBoundingBox(rotatedLocalBox, startX, startY);\n    this.#applyClip(rotatedBox, contextState);\n    if (this.#clearBoundingBoxOnDraw && clearBoundingBox) {\n      this.#clearBoundingBox(rotatedBox, contextState);\n    }\n    this.#translateContext(startX, startY);\n    this.#rotateContext(rotation);\n    this.#applyRotationClip(localBox, contextState);\n\n    const x0 = 0;\n    const x1 = 0;\n    const y0 = 0;\n    const y1 = length;\n\n    const r0 = contextState.segmentStartRadius;\n    const r1 = contextState.segmentEndRadius;\n\n    if (contextState.segmentStartCap == \"round\") {\n      this.context.beginPath();\n      this.context.arc(x0, y0, r0, 0, Math.PI * 2);\n      this.context.closePath();\n      this.context.fill();\n      if (contextState.lineWidth > 0) {\n        this.context.stroke();\n      }\n    }\n    if (contextState.segmentEndCap == \"round\") {\n      this.context.beginPath();\n      this.context.arc(x1, y1, r1, 0, Math.PI * 2);\n      this.context.closePath();\n      this.context.fill();\n      if (contextState.lineWidth > 0) {\n        this.context.stroke();\n      }\n    }\n\n    // full trapezoid (top right, clockwise)\n    this.context.beginPath();\n    this.context.moveTo(r0, 0);\n    this.context.lineTo(-r0, 0);\n    this.context.lineTo(-r1, length);\n    this.context.lineTo(r1, length);\n    this.context.closePath();\n    this.context.fill();\n\n    // Stroke only the side edges (top right, clockwise)\n    if (contextState.lineWidth > 0) {\n      this.context.beginPath();\n\n      this.context.moveTo(r0, 0);\n      if (contextState.segmentStartCap === \"flat\") {\n        this.context.lineTo(-r0, 0);\n      } else {\n        this.context.moveTo(-r0, 0);\n      }\n\n      this.context.lineTo(-r1, length);\n\n      if (contextState.segmentEndCap === \"flat\") {\n        this.context.lineTo(r1, length);\n      } else {\n        this.context.moveTo(r1, length);\n      }\n\n      this.context.lineTo(r0, 0);\n      if (contextState.segmentStartCap === \"flat\") {\n        this.context.closePath();\n      }\n      this.context.stroke();\n    }\n\n    this.#restore();\n  }\n  async drawSegment(\n    startX: number,\n    startY: number,\n    endX: number,\n    endY: number,\n    sendImmediately?: boolean\n  ) {\n    if (startX == endX && startY == endY) {\n      _console.error(`cannot draw segment of length 0`);\n      return;\n    }\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawSegmentToCanvas(startX, startY, endX, endY, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawSegment(\n        startX,\n        startY,\n        endX,\n        endY,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #getSegmentsBoundingBox(\n    points: Vector2[],\n    contextState: DisplayContextState\n  ): DisplayBoundingBox {\n    const segments: DisplaySegment[] = [];\n    points.forEach((point, index) => {\n      if (index == points.length - 1) {\n        return;\n      }\n      const nextPoint = points[index + 1];\n      segments.push({ start: point, end: nextPoint });\n    });\n    return this.#_getSegmentsBoundingBox(segments, contextState);\n  }\n  #_getSegmentsBoundingBox(\n    segments: DisplaySegment[],\n    { lineWidth, segmentStartRadius, segmentEndRadius }: DisplayContextState\n  ): DisplayBoundingBox {\n    const outerPadding = Math.ceil(lineWidth / 2);\n\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    segments.forEach((segment, index) => {\n      const startX = segment.start.x;\n      const startY = segment.start.y;\n      const endX = segment.end.x;\n      const endY = segment.end.y;\n\n      if (index == 0) {\n        minX = Math.min(startX - segmentStartRadius, endX - segmentEndRadius);\n        maxX = Math.max(startX + segmentStartRadius, endX + segmentEndRadius);\n        minY = Math.min(startY - segmentStartRadius, endY - segmentEndRadius);\n        maxY = Math.max(endY + segmentStartRadius, endY + segmentEndRadius);\n      } else {\n        minX = Math.min(\n          minX,\n          Math.min(startX - segmentStartRadius, endX - segmentEndRadius)\n        );\n        maxX = Math.max(\n          maxX,\n          Math.max(startX + segmentStartRadius, endX + segmentEndRadius)\n        );\n        minY = Math.min(\n          minY,\n          Math.min(startY - segmentStartRadius, endY - segmentEndRadius)\n        );\n        maxY = Math.max(\n          maxY,\n          Math.max(endY + segmentStartRadius, endY + segmentEndRadius)\n        );\n      }\n    });\n\n    const segmentsBoundingBox = {\n      x: minX - outerPadding,\n      y: minY - outerPadding,\n      width: maxX - minX + outerPadding * 2,\n      height: maxY - minY + outerPadding * 2,\n    };\n    //_console.log(\"segmentsBoundingBox\", segmentsBoundingBox);\n    return segmentsBoundingBox;\n  }\n  #drawSegmentsToCanvas(points: Vector2[], contextState: DisplayContextState) {\n    this.#updateContext(contextState);\n\n    this.#save();\n    const box = this.#getSegmentsBoundingBox(points, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(box, contextState);\n    }\n\n    const clearBoundingBoxOnDraw = this.#clearBoundingBoxOnDraw;\n    this.#clearBoundingBoxOnDraw = false;\n    points.forEach((point, index) => {\n      if (index > 0) {\n        const previousPoint = points[index - 1];\n\n        const startX = previousPoint.x;\n        const startY = previousPoint.y;\n        const endX = point.x;\n        const endY = point.y;\n\n        this.#drawSegmentToCanvas(\n          startX,\n          startY,\n          endX,\n          endY,\n          contextState,\n          false\n        );\n      }\n    });\n    this.#clearBoundingBoxOnDraw = clearBoundingBoxOnDraw;\n\n    this.#restore();\n  }\n  async drawSegments(points: Vector2[], sendImmediately?: boolean) {\n    _console.assertRangeWithError(\"numberOfPoints\", points.length, 2, 255);\n    // _console.log({ points });\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawSegmentsToCanvas(points, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawSegments(points, sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #drawArcToCanvas(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians: boolean,\n    contextState: DisplayContextState\n  ) {\n    this.#drawArcEllipseToCanvas(\n      offsetX,\n      offsetY,\n      radius,\n      radius,\n      startAngle,\n      angleOffset,\n      isRadians,\n      contextState\n    );\n  }\n\n  async drawArc(\n    offsetX: number,\n    offsetY: number,\n    radius: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ) {\n    startAngle = isRadians ? startAngle : degToRad(startAngle);\n    angleOffset = isRadians ? angleOffset : degToRad(angleOffset);\n\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawArcToCanvas(\n        offsetX,\n        offsetY,\n        radius,\n        startAngle,\n        angleOffset,\n        true,\n        contextState\n      )\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawArc(\n        offsetX,\n        offsetY,\n        radius,\n        startAngle,\n        angleOffset,\n        true,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #drawArcEllipseToCanvas(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians: boolean,\n    contextState: DisplayContextState\n  ) {\n    startAngle = isRadians ? startAngle : degToRad(startAngle);\n    angleOffset = isRadians ? angleOffset : degToRad(angleOffset);\n    isRadians = true;\n\n    this.#updateContext(contextState);\n\n    this.#save();\n    const localBox = this.#getRectBoundingBox(\n      radiusX * 2,\n      radiusY * 2,\n      contextState\n    );\n    const rotatedLocalBox = this.#rotateBoundingBox(\n      localBox,\n      contextState.rotation\n    );\n    const rotatedBox = this.#offsetBoundingBox(\n      rotatedLocalBox,\n      offsetX,\n      offsetY\n    );\n    this.#applyClip(rotatedBox, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(rotatedBox, contextState);\n    }\n    this.#transformContext(offsetX, offsetY, contextState.rotation);\n    this.#applyRotationClip(localBox, contextState);\n\n    const outerPadding = this.#getOuterPadding(contextState.lineWidth);\n    const startX = localBox.x + outerPadding;\n    const startY = localBox.y + outerPadding;\n    const centerX = startX + radiusX;\n    const centerY = startY + radiusY;\n\n    // draw elliptical pie slice (includes radial lines)\n    this.context.beginPath();\n    this.context.moveTo(centerX, centerY);\n    const clockwise = angleOffset > 0;\n    const endAngle = startAngle + angleOffset;\n\n    this.context.ellipse(\n      centerX,\n      centerY,\n      radiusX,\n      radiusY,\n      0,\n      startAngle,\n      endAngle,\n      !clockwise\n    );\n    this.context.closePath();\n    this.context.fill();\n\n    // Stroke only the elliptical arc\n    if (contextState.lineWidth > 0) {\n      this.context.beginPath();\n      this.context.ellipse(\n        centerX,\n        centerY,\n        radiusX,\n        radiusY,\n        0,\n        startAngle,\n        endAngle,\n        !clockwise\n      );\n      this.context.stroke();\n    }\n\n    this.#restore();\n  }\n  async drawArcEllipse(\n    offsetX: number,\n    offsetY: number,\n    radiusX: number,\n    radiusY: number,\n    startAngle: number,\n    angleOffset: number,\n    isRadians?: boolean,\n    sendImmediately?: boolean\n  ) {\n    startAngle = isRadians ? startAngle : degToRad(startAngle);\n    angleOffset = isRadians ? angleOffset : degToRad(angleOffset);\n    isRadians = true;\n\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawArcEllipseToCanvas(\n        offsetX,\n        offsetY,\n        radiusX,\n        radiusY,\n        startAngle,\n        angleOffset,\n        true,\n        contextState\n      )\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawArcEllipse(\n        offsetX,\n        offsetY,\n        radiusX,\n        radiusY,\n        startAngle,\n        angleOffset,\n        true,\n        sendImmediately\n      );\n    }\n  }\n\n  #bitmapCanvas = document.createElement(\"canvas\");\n  #bitmapContext!: CanvasRenderingContext2D;\n  async #drawBitmapToCanvas(\n    offsetX: number,\n    offsetY: number,\n    bitmap: DisplayBitmap,\n    contextState: DisplayContextState\n  ) {\n    this.#updateContext(contextState);\n\n    const { bitmapScaleX, bitmapScaleY } = contextState;\n    const width = bitmap.width * Math.abs(bitmapScaleX);\n    const height = bitmap.height * Math.abs(bitmapScaleY);\n\n    this.#save();\n    const localBox = this.#getRectBoundingBox(\n      width,\n      height,\n      contextState,\n      false\n    );\n    const rotatedLocalBox = this.#rotateBoundingBox(\n      localBox,\n      contextState.rotation\n    );\n    const rotatedBox = this.#offsetBoundingBox(\n      rotatedLocalBox,\n      offsetX,\n      offsetY\n    );\n    this.#applyClip(rotatedBox, contextState);\n    if (this.#clearBoundingBoxOnDraw) {\n      this.#clearBoundingBox(rotatedBox, contextState);\n    }\n    this.#transformContext(offsetX, offsetY, contextState.rotation);\n    this.#applyRotationClip(localBox, contextState);\n\n    this.#bitmapCanvas.width = bitmap.width;\n    this.#bitmapCanvas.height = bitmap.height;\n\n    const bitmapImageData = this.#bitmapContext.createImageData(\n      bitmap.width,\n      bitmap.height\n    );\n    const rawBitmapImageData = bitmapImageData.data;\n\n    const startX = localBox.x;\n    const startY = localBox.y;\n    bitmap.pixels.forEach((pixel, pixelIndex) => {\n      let colorIndex = contextState.bitmapColorIndices[pixel];\n      if (this.#useSpriteColorIndices) {\n        colorIndex = contextState.spriteColorIndices[colorIndex];\n      }\n      const color = hexToRGB(this.colors[colorIndex]);\n      const opacity = this.#getColorOpacity(colorIndex);\n\n      const imageDataOffset = pixelIndex * 4;\n\n      rawBitmapImageData[imageDataOffset + 0] = color.r;\n      rawBitmapImageData[imageDataOffset + 1] = color.g;\n      rawBitmapImageData[imageDataOffset + 2] = color.b;\n      rawBitmapImageData[imageDataOffset + 3] = Math.floor(opacity * 255);\n    });\n\n    // _console.log(\"rawBitmapImageData\", rawBitmapImageData);\n\n    this.#bitmapContext.putImageData(bitmapImageData, 0, 0);\n    this.#context.scale(Math.sign(bitmapScaleX), Math.sign(bitmapScaleY));\n    this.#context.drawImage(this.#bitmapCanvas, startX, startY, width, height);\n\n    this.#restore();\n  }\n\n  assertValidNumberOfColors(numberOfColors: number) {\n    _console.assertRangeWithError(\n      \"numberOfColors\",\n      numberOfColors,\n      2,\n      this.numberOfColors\n    );\n  }\n  assertValidBitmap(bitmap: DisplayBitmap) {\n    this.assertValidNumberOfColors(bitmap.numberOfColors);\n    assertValidBitmapPixels(bitmap);\n  }\n  async drawBitmap(\n    offsetX: number,\n    offsetY: number,\n    bitmap: DisplayBitmap,\n    sendImmediately?: boolean\n  ) {\n    this.assertValidBitmap(bitmap);\n    // _console.log(\"drawBitmap\", { offsetX, offsetY, bitmap, sendImmediately });\n    const contextState = structuredClone(this.contextState);\n    this.#rearDrawStack.push(() =>\n      this.#drawBitmapToCanvas(offsetX, offsetY, bitmap, contextState)\n    );\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawBitmap(\n        offsetX,\n        offsetY,\n        bitmap,\n        sendImmediately\n      );\n    }\n  }\n\n  // SPRITES\n  #spriteSheets: Record<string, DisplaySpriteSheet> = {};\n  #spriteSheetIndices: Record<string, number> = {};\n  get spriteSheets() {\n    return this.#spriteSheets;\n  }\n  get spriteSheetIndices() {\n    return this.#spriteSheetIndices;\n  }\n  async uploadSpriteSheet(spriteSheet: DisplaySpriteSheet) {\n    spriteSheet = structuredClone(spriteSheet);\n    if (!this.#spriteSheets[spriteSheet.name]) {\n      this.#spriteSheetIndices[spriteSheet.name] = Object.keys(\n        this.#spriteSheets\n      ).length;\n    }\n    this.#spriteSheets[spriteSheet.name] = spriteSheet;\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.uploadSpriteSheet(spriteSheet);\n    }\n  }\n  async uploadSpriteSheets(spriteSheets: DisplaySpriteSheet[]) {\n    for (const spriteSheet of spriteSheets) {\n      _console.log(`uploading spriteSheet \"${spriteSheet.name}\"...`);\n      await this.uploadSpriteSheet(spriteSheet);\n    }\n  }\n  assertLoadedSpriteSheet(spriteSheetName: string) {\n    assertLoadedSpriteSheet(this, spriteSheetName);\n  }\n  assertSelectedSpriteSheet(spriteSheetName: string) {\n    assertSelectedSpriteSheet(this, spriteSheetName);\n  }\n  assertAnySelectedSpriteSheet() {\n    assertAnySelectedSpriteSheet(this);\n  }\n  assertSprite(spriteName: string) {\n    return assertSprite(this, spriteName);\n  }\n  getSprite(spriteName: string): DisplaySprite | undefined {\n    return getSprite(this, spriteName);\n  }\n  getSpriteSheetPalette(\n    paletteName: string\n  ): DisplaySpriteSheetPalette | undefined {\n    return getSpriteSheetPalette(this, paletteName);\n  }\n  getSpriteSheetPaletteSwap(\n    paletteSwapName: string\n  ): DisplaySpriteSheetPaletteSwap | undefined {\n    return getSpriteSheetPaletteSwap(this, paletteSwapName);\n  }\n  getSpritePaletteSwap(\n    spriteName: string,\n    paletteSwapName: string\n  ): DisplaySpritePaletteSwap | undefined {\n    return getSpritePaletteSwap(this, spriteName, paletteSwapName);\n  }\n  get selectedSpriteSheet() {\n    if (this.contextState.spriteSheetName) {\n      return this.#spriteSheets[this.contextState.spriteSheetName];\n    }\n  }\n  get selectedSpriteSheetName() {\n    return this.selectedSpriteSheet?.name;\n  }\n  async selectSpriteSheet(spriteSheetName: string, sendImmediately?: boolean) {\n    this.assertLoadedSpriteSheet(spriteSheetName);\n    const differences = this.#contextStateHelper.update({\n      spriteSheetName,\n    });\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      this.deviceDisplayManager!.selectSpriteSheet(\n        spriteSheetName,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#onContextStateUpdate(differences);\n  }\n  #runSpriteCommand(\n    command: DisplayContextCommand,\n    contextState: DisplayContextState\n  ) {\n    //_console.log(\"runSpriteCommand\", command);\n    if (command.type == \"drawSprite\") {\n      const spriteSheet = this.spriteSheets[contextState.spriteSheetName!];\n      const sprite = spriteSheet.sprites[command.spriteIndex];\n      if (sprite) {\n        _console.log(\"drawing sub sprite\", sprite);\n        const _contextState = structuredClone(this.contextState);\n        this.#saveContextForSprite(\n          command.offsetX,\n          command.offsetY,\n          sprite,\n          _contextState\n        );\n        sprite.commands.forEach((command) => {\n          this.#runSpriteCommand(command, _contextState);\n        });\n        this.#restoreContextForSprite();\n      } else {\n        _console.error(\n          `sprite index ${command.spriteIndex} not found in spriteSheet`\n        );\n      }\n    } else {\n      this.runContextCommand(command);\n    }\n  }\n  #drawSpriteToCanvas(\n    offsetX: number,\n    offsetY: number,\n    sprite: DisplaySprite,\n    contextState: DisplayContextState\n  ) {\n    this.#setIgnoreDevice(true);\n    this.#saveContextForSprite(offsetX, offsetY, sprite, contextState);\n    this.#setUseSpriteColorIndices(true);\n    this.#setClearCanvasBoundingBoxOnDraw(false);\n\n    sprite.commands.forEach((command) => {\n      this.#runSpriteCommand(command, contextState);\n    });\n\n    this.#setIgnoreDevice(false);\n    this.#restoreContextForSprite();\n    this.#setUseSpriteColorIndices(false);\n    this.#setClearCanvasBoundingBoxOnDraw(true);\n  }\n  async drawSprite(\n    offsetX: number,\n    offsetY: number,\n    spriteName: string,\n    sendImmediately?: boolean\n  ) {\n    _console.assertWithError(\n      this.selectedSpriteSheet,\n      \"no spriteSheet selected\"\n    );\n    let sprite = this.selectedSpriteSheet?.sprites.find(\n      (sprite) => sprite.name == spriteName\n    );\n    _console.assertWithError(sprite, `sprite \"${spriteName}\" not found`);\n    _console.assertWithError(\"width\" in sprite!, \"sprite has no width\");\n    _console.assertWithError(\"height\" in sprite!, \"sprite has no height\");\n\n    const contextState = structuredClone(this.contextState);\n    this.#drawSpriteToCanvas(offsetX, offsetY, sprite!, contextState);\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawSprite(\n        offsetX,\n        offsetY,\n        spriteName,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #drawSpritesToCanvas(\n    offsetX: number,\n    offsetY: number,\n    spriteLines: DisplaySpriteLines,\n    contextState: DisplayContextState\n  ) {\n    const { expandedSpritesLines, lineBreadths, localSize, size } =\n      getSpriteLinesMetrics(spriteLines, this.#spriteSheets, contextState);\n\n    const isSpritesDirectionPositive = isDirectionPositive(\n      contextState.spritesDirection\n    );\n    const isSpritesLineDirectionPositive = isDirectionPositive(\n      contextState.spritesLineDirection\n    );\n\n    const isSpritesDirectionHorizontal = isDirectionHorizontal(\n      contextState.spritesDirection\n    );\n    const isSpritesLineDirectionHorizontal = isDirectionHorizontal(\n      contextState.spritesLineDirection\n    );\n\n    const areSpritesDirectionsOrthogonal =\n      isSpritesDirectionHorizontal != isSpritesLineDirectionHorizontal;\n\n    const breadthSizeKey = isSpritesDirectionHorizontal ? \"width\" : \"height\";\n\n    const spritesBreadthSign = isSpritesDirectionPositive ? 1 : -1;\n    const spritesDepthSign = isSpritesLineDirectionPositive ? 1 : -1;\n\n    this.#setIgnoreDevice(true);\n    this.#setCanvasContextTransform(\n      offsetX,\n      offsetY,\n      localSize.width,\n      localSize.height,\n      contextState\n    );\n    this.#setUseSpriteColorIndices(true);\n    this.#setClearCanvasBoundingBoxOnDraw(false);\n\n    this.#saveContext();\n    this.clearCrop();\n    this.clearRotation();\n    this.clearRotationCrop();\n    this.resetSpriteScale();\n\n    if (isSpritesDirectionHorizontal) {\n      if (isSpritesDirectionPositive) {\n        this.setHorizontalAlignment(\"start\");\n      } else {\n        this.setHorizontalAlignment(\"end\");\n      }\n    } else {\n      if (isSpritesDirectionPositive) {\n        this.setVerticalAlignment(\"start\");\n      } else {\n        this.setVerticalAlignment(\"end\");\n      }\n    }\n\n    if (areSpritesDirectionsOrthogonal) {\n      if (isSpritesLineDirectionHorizontal) {\n        if (isSpritesLineDirectionPositive) {\n          this.setHorizontalAlignment(\"start\");\n        } else {\n          this.setHorizontalAlignment(\"end\");\n        }\n      } else {\n        if (isSpritesLineDirectionPositive) {\n          this.setVerticalAlignment(\"start\");\n        } else {\n          this.setVerticalAlignment(\"end\");\n        }\n      }\n    } else {\n      if (isSpritesDirectionHorizontal) {\n        this.setVerticalAlignment(\"start\");\n      } else {\n        this.setHorizontalAlignment(\"start\");\n      }\n    }\n\n    let spritesBreadthStart = 0;\n    switch (contextState.spritesDirection) {\n      case \"right\":\n        spritesBreadthStart = -localSize.width / 2;\n        break;\n      case \"left\":\n        spritesBreadthStart = localSize.width / 2;\n        break;\n      case \"up\":\n        spritesBreadthStart = localSize.height / 2;\n        break;\n      case \"down\":\n        spritesBreadthStart = -localSize.height / 2;\n        break;\n    }\n\n    const spriteOffset = {\n      x: 0,\n      y: 0,\n    };\n\n    const breadthOffsetKey = isSpritesDirectionHorizontal ? \"x\" : \"y\";\n    const depthOffsetKey = isSpritesLineDirectionHorizontal ? \"x\" : \"y\";\n\n    const signedSpritesSpacing =\n      spritesBreadthSign * contextState.spritesSpacing;\n    const signedSpriteLineSpacing =\n      spritesDepthSign * contextState.spritesLineSpacing;\n    const signedSpriteLineHeight =\n      spritesDepthSign * contextState.spritesLineHeight;\n\n    if (!areSpritesDirectionsOrthogonal) {\n      spriteOffset[breadthOffsetKey] = spritesBreadthStart;\n    }\n\n    if (areSpritesDirectionsOrthogonal) {\n      switch (contextState.spritesLineDirection) {\n        case \"right\":\n          spriteOffset[depthOffsetKey] = -localSize.width / 2;\n          break;\n        case \"left\":\n          spriteOffset[depthOffsetKey] = localSize.width / 2;\n          break;\n        case \"up\":\n          spriteOffset[depthOffsetKey] = localSize.height / 2;\n          break;\n        case \"down\":\n          spriteOffset[depthOffsetKey] = -localSize.height / 2;\n          break;\n      }\n    } else {\n      switch (contextState.spritesDirection) {\n        case \"right\":\n        case \"left\":\n          spriteOffset.y = -localSize.height / 2;\n          break;\n        case \"up\":\n        case \"down\":\n          spriteOffset.x = -localSize.width / 2;\n          break;\n      }\n    }\n\n    expandedSpritesLines.forEach((_spritesLine, lineIndex) => {\n      const spritesLineBreadth = lineBreadths[lineIndex];\n      if (areSpritesDirectionsOrthogonal) {\n        switch (contextState.spritesLineAlignment) {\n          case \"start\":\n            spriteOffset[breadthOffsetKey] = spritesBreadthStart;\n            break;\n          case \"center\":\n            spriteOffset[breadthOffsetKey] =\n              spritesBreadthStart +\n              spritesBreadthSign *\n                ((localSize[breadthSizeKey] - spritesLineBreadth) / 2);\n            break;\n          case \"end\":\n            spriteOffset[breadthOffsetKey] =\n              spritesBreadthStart +\n              spritesBreadthSign *\n                (localSize[breadthSizeKey] - spritesLineBreadth);\n            break;\n        }\n      }\n      _spritesLine.forEach((sprite) => {\n        const _spriteOffset = {\n          x: spriteOffset.x,\n          y: spriteOffset.y,\n        };\n\n        const spriteAlignmentOffsetKey = isSpritesDirectionHorizontal\n          ? \"y\"\n          : \"x\";\n        const spriteDepth = isSpritesDirectionHorizontal\n          ? sprite.height\n          : sprite.width;\n\n        switch (contextState.spritesAlignment) {\n          case \"start\":\n            break;\n          case \"center\":\n            _spriteOffset[spriteAlignmentOffsetKey] +=\n              spritesDepthSign *\n              ((contextState.spritesLineHeight - spriteDepth) / 2);\n            break;\n          case \"end\":\n            _spriteOffset[spriteAlignmentOffsetKey] +=\n              spritesDepthSign * (contextState.spritesLineHeight - spriteDepth);\n            break;\n        }\n\n        const spriteContextState = structuredClone(this.contextState);\n        this.#saveContextForSprite(\n          _spriteOffset.x,\n          _spriteOffset.y,\n          sprite,\n          spriteContextState\n        );\n        sprite.commands.forEach((command) => {\n          this.#runSpriteCommand(command, spriteContextState);\n        });\n        this.#restoreContextForSprite();\n\n        spriteOffset[breadthOffsetKey] +=\n          spritesBreadthSign *\n          (isSpritesDirectionHorizontal ? sprite.width : sprite.height);\n        spriteOffset[breadthOffsetKey] += signedSpritesSpacing;\n      });\n\n      spriteOffset[breadthOffsetKey] -= signedSpritesSpacing;\n      if (areSpritesDirectionsOrthogonal) {\n        spriteOffset[depthOffsetKey] += signedSpriteLineHeight;\n      }\n      spriteOffset[depthOffsetKey] += signedSpriteLineSpacing;\n    });\n\n    this.#resetCanvasContextTransform();\n    this.#restoreContext();\n\n    this.#setIgnoreDevice(false);\n    this.#setUseSpriteColorIndices(false);\n    this.#setClearCanvasBoundingBoxOnDraw(true);\n  }\n  async drawSprites(\n    offsetX: number,\n    offsetY: number,\n    spriteLines: DisplaySpriteLines,\n    sendImmediately?: boolean\n  ) {\n    _console.assertWithError(\n      this.contextState.spritesLineHeight > 0,\n      `spritesLineHeight must be >0`\n    );\n    assertValidSpriteLines(this, spriteLines);\n\n    const contextState = structuredClone(this.contextState);\n    this.#drawSpritesToCanvas(offsetX, offsetY, spriteLines, contextState);\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.drawSprites(\n        offsetX,\n        offsetY,\n        spriteLines,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  async drawSpriteFromSpriteSheet(\n    offsetX: number,\n    offsetY: number,\n    spriteName: string,\n    spriteSheet: DisplaySpriteSheet,\n    paletteName?: string,\n    sendImmediately?: boolean\n  ) {\n    return drawSpriteFromSpriteSheet(\n      this,\n      offsetX,\n      offsetY,\n      spriteName,\n      spriteSheet,\n      paletteName,\n      sendImmediately\n    );\n  }\n  async drawSpritesString(\n    offsetX: number,\n    offsetY: number,\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[],\n    sendImmediately?: boolean\n  ) {\n    const spriteLines = this.stringToSpriteLines(\n      string,\n      requireAll,\n      maxLineBreadth,\n      separators\n    );\n    await this.drawSprites(offsetX, offsetY, spriteLines, sendImmediately);\n  }\n  stringToSpriteLines(\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[]\n  ): DisplaySpriteLines {\n    return stringToSpriteLines(\n      string,\n      this.spriteSheets,\n      this.contextState,\n      requireAll,\n      maxLineBreadth,\n      separators\n    );\n  }\n  stringToSpriteLinesMetrics(\n    string: string,\n    requireAll?: boolean,\n    maxLineBreadth?: number,\n    separators?: string[]\n  ) {\n    return stringToSpriteLinesMetrics(\n      string,\n      this.spriteSheets,\n      this.contextState,\n      requireAll,\n      maxLineBreadth,\n      separators\n    );\n  }\n\n  // BRIGHTNESS\n  #brightness: DisplayBrightness = \"medium\";\n  get brightness() {\n    return this.#brightness;\n  }\n  #brightnessOpacities: Record<DisplayBrightness, number> = {\n    veryLow: 0.5,\n    low: 0.7,\n    medium: 0.9,\n    high: 0.95,\n    veryHigh: 1,\n  };\n  get #brightnessOpacity() {\n    return this.#brightnessOpacities[this.brightness];\n  }\n  #didSetBrightness = false;\n  #flushBrightness() {\n    if (!this.#didSetBrightness) {\n      return false;\n    }\n    _console.log(\"flushBrightness\");\n    this.#didSetBrightness = false;\n    return true;\n  }\n  async setBrightness(\n    newBrightness: DisplayBrightness,\n    sendImmediately?: boolean\n  ) {\n    if (this.#brightness == newBrightness) {\n      // _console.log(`redundant brightness ${newBrightness}`);\n      return;\n    }\n    this.#brightness = newBrightness;\n    // _console.log({ brightness: this.brightness });\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.setBrightness(\n        newBrightness,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n    this.#didSetBrightness = true;\n    this.#dispatchEvent(\"brightness\", { brightness: this.brightness });\n  }\n  async #resetBrightness() {\n    await this.setBrightness(\"medium\");\n  }\n  async #updateDeviceBrightness(sendImmediately?: boolean) {\n    if (!this.device?.isConnected) {\n      return;\n    }\n    // _console.log(\"updateDeviceBrightness\");\n    await this.device?.setDisplayBrightness(this.brightness, sendImmediately);\n  }\n  async #updateDeviceSpriteSheets() {\n    if (!this.device?.isConnected) {\n      return;\n    }\n    await this.uploadSpriteSheets(Object.values(this.spriteSheets));\n  }\n  async #updateDeviceSelectedSpriteSheet(sendImmediately?: boolean) {\n    if (!this.device?.isConnected) {\n      return;\n    }\n    if (!this.selectedSpriteSheetName) {\n      return;\n    }\n    _console.log(\"updateDeviceSelectedSpriteSheet\");\n    await this.device?.selectDisplaySpriteSheet(\n      this.selectedSpriteSheetName,\n      sendImmediately\n    );\n  }\n\n  async runContextCommand(\n    command: DisplayContextCommand,\n    sendImmediately?: boolean\n  ) {\n    return runDisplayContextCommand(this, command, sendImmediately);\n  }\n  async runContextCommands(\n    commands: DisplayContextCommand[],\n    sendImmediately?: boolean\n  ) {\n    return runDisplayContextCommands(this, commands, sendImmediately);\n  }\n\n  get #contextScale() {\n    const transform = this.#context.getTransform();\n    const scaleX = transform.a;\n    const scaleY = transform.d;\n    return { x: scaleX, y: scaleY };\n  }\n  #setCanvasContextTransform(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    contextState: DisplayContextState\n  ) {\n    this.#rearDrawStack.push(() => {\n      const scaledWidth = width * Math.abs(contextState.spriteScaleX);\n      const scaledHeight = height * Math.abs(contextState.spriteScaleY);\n\n      this.#save();\n      const localBox = this.#getRectBoundingBox(\n        scaledWidth,\n        scaledHeight,\n        contextState,\n        false\n      );\n      const rotatedLocalBox = this.#rotateBoundingBox(\n        localBox,\n        contextState.rotation\n      );\n      const rotatedBox = this.#offsetBoundingBox(\n        rotatedLocalBox,\n        offsetX,\n        offsetY\n      );\n      this.#applyClip(rotatedBox, contextState);\n      if (this.#clearBoundingBoxOnDraw) {\n        this.#clearBoundingBox(rotatedBox, contextState);\n      }\n      this.#transformContext(offsetX, offsetY, contextState.rotation);\n      this.#applyRotationClip(localBox, contextState);\n\n      this.#correctAlignmentTranslation(localBox, contextState);\n      this.#scaleContext(contextState.spriteScaleX, contextState.spriteScaleY);\n    });\n  }\n  #resetCanvasContextTransform() {\n    this.#rearDrawStack.push(() => {\n      //_console.log(\"reset transform\");\n      this.#restore();\n    });\n  }\n\n  #setClearCanvasBoundingBoxOnDraw(\n    clearBoundingBoxOnDraw: boolean,\n    override = false\n  ) {\n    if (!override && this.#isDrawingBlankSprite) {\n      return;\n    }\n    this.#clearBoundingBoxOnDraw = clearBoundingBoxOnDraw;\n    this.#rearDrawStack.push(() => {\n      //_console.log({ clearBoundingBoxOnDraw });\n      this.#clearBoundingBoxOnDraw = clearBoundingBoxOnDraw;\n    });\n  }\n  #ignoreDevice = false;\n  #setIgnoreDevice(ignoreDevice: boolean) {\n    this.#ignoreDevice = ignoreDevice;\n    this.#rearDrawStack.push(() => {\n      //_console.log({ ignoreDevice });\n      this.#ignoreDevice = ignoreDevice;\n    });\n  }\n\n  #useSpriteColorIndices = false;\n  #setUseSpriteColorIndices(useSpriteColorIndices: boolean, override = false) {\n    if (!override && this.#useSpriteColorIndices) {\n      return;\n    }\n    //this.#useSpriteColorIndices = useSpriteColorIndices;\n    this.#rearDrawStack.push(() => {\n      //_console.log({ useSpriteColorIndices });\n      this.#useSpriteColorIndices = useSpriteColorIndices;\n    });\n  }\n  #spriteContextStack: DisplayContextState[] = [];\n  #spriteStack: DisplaySprite[] = [];\n  #saveContextForSprite(\n    offsetX: number,\n    offsetY: number,\n    sprite: DisplaySprite | DisplaySize,\n    contextState: DisplayContextState\n  ) {\n    this.#setCanvasContextTransform(\n      offsetX,\n      offsetY,\n      sprite.width,\n      sprite.height,\n      contextState\n    );\n\n    if (\"name\" in sprite) {\n      _console.assertWithError(\n        !this.#spriteStack.includes(sprite),\n        `cyclical sprite ${sprite.name} found in stack`\n      );\n    }\n\n    const spriteColorIndices = contextState.spriteColorIndices.slice();\n    this.#spriteContextStack.push(contextState);\n    this.#resetContextState();\n    this.contextState.spriteColorIndices = spriteColorIndices;\n    //_console.log(\"_saveContextForSprite\", this.contextState);\n  }\n  #restoreContextForSprite() {\n    this.#resetCanvasContextTransform();\n\n    const contextState = this.#spriteContextStack.pop();\n    if (!contextState) {\n      _console.warn(\"#spriteContextStack empty\");\n      return;\n    }\n    //_console.log(\"_restoreContextForSprite\", contextState);\n    this.#contextStateHelper.update(contextState);\n  }\n\n  #runPreviewSpriteCommand(\n    command: DisplayContextCommand,\n    spriteSheet: DisplaySpriteSheet\n  ) {\n    //_console.log(\"runPreviewSpriteCommand\", command);\n    if (command.type == \"drawSprite\") {\n      const sprite = spriteSheet.sprites[command.spriteIndex];\n      if (sprite) {\n        _console.log(\"drawing sub sprite\", sprite);\n        const contextState = structuredClone(this.contextState);\n        this.#saveContextForSprite(\n          command.offsetX,\n          command.offsetY,\n          sprite,\n          contextState\n        );\n        sprite.commands.forEach((command) => {\n          this.#runPreviewSpriteCommand(command, spriteSheet);\n        });\n        this.#restoreContextForSprite();\n      } else {\n        _console.error(\n          `spriteIndex ${command.spriteIndex} not found in spriteSheet`\n        );\n      }\n    } else {\n      this.runContextCommand(command);\n    }\n  }\n  previewSprite(\n    offsetX: number,\n    offsetY: number,\n    sprite: DisplaySprite,\n    spriteSheet: DisplaySpriteSheet\n  ) {\n    this.#setIgnoreDevice(true);\n    this.#setUseSpriteColorIndices(true);\n    const contextState = structuredClone(this.contextState);\n    this.#saveContextForSprite(offsetX, offsetY, sprite, contextState);\n    this.#setClearCanvasBoundingBoxOnDraw(false);\n\n    sprite.commands.forEach((command) => {\n      this.#runPreviewSpriteCommand(command, spriteSheet);\n    });\n\n    this.#setIgnoreDevice(false);\n    this.#restoreContextForSprite();\n    this.#setUseSpriteColorIndices(false);\n    this.#setClearCanvasBoundingBoxOnDraw(true);\n  }\n  previewSpriteCommands(commands: DisplayContextCommand[]) {\n    this.#setIgnoreDevice(true);\n    this.#setClearCanvasBoundingBoxOnDraw(false);\n\n    commands.forEach((command) => {\n      this.runContextCommand(command);\n    });\n\n    this.#setIgnoreDevice(false);\n    this.#setClearCanvasBoundingBoxOnDraw(true);\n  }\n\n  // SPRITE SHEET PALETTES\n\n  assertSpriteSheetPalette(paletteName: string) {\n    assertSpriteSheetPalette(this, paletteName);\n  }\n  assertSpriteSheetPaletteSwap(paletteSwapName: string) {\n    assertSpriteSheetPaletteSwap(this, paletteSwapName);\n  }\n  assertSpritePaletteSwap(spriteName: string, paletteSwapName: string) {\n    assertSpritePaletteSwap(this, spriteName, paletteSwapName);\n  }\n  async selectSpriteSheetPalette(\n    paletteName: string,\n    offset?: number,\n    indicesOnly?: boolean,\n    sendImmediately?: boolean\n  ) {\n    await selectSpriteSheetPalette(\n      this,\n      paletteName,\n      offset,\n      indicesOnly,\n      sendImmediately\n    );\n  }\n  async selectSpriteSheetPaletteSwap(\n    paletteSwapName: string,\n    offset?: number,\n    sendImmediately?: boolean\n  ) {\n    await selectSpriteSheetPaletteSwap(\n      this,\n      paletteSwapName,\n      offset,\n      sendImmediately\n    );\n  }\n  async selectSpritePaletteSwap(\n    spriteName: string,\n    paletteSwapName: string,\n    offset?: number,\n    sendImmediately?: boolean\n  ) {\n    await selectSpritePaletteSwap(\n      this,\n      spriteName,\n      paletteSwapName,\n      offset,\n      sendImmediately\n    );\n  }\n\n  #reset() {\n    this.#useSpriteColorIndices = false;\n    this.#clearBoundingBoxOnDraw = true;\n    this.#ignoreDevice = false;\n    this.#resetColors();\n    this.#resetOpacities();\n    this.#resetContextState();\n    this.#resetBrightness();\n    Object.keys(this.#spriteSheets).forEach(\n      (spriteSheetName) => delete this.#spriteSheets[spriteSheetName]\n    );\n    Object.keys(this.#spriteSheetIndices).forEach(\n      (spriteSheetName) => delete this.#spriteSheetIndices[spriteSheetName]\n    );\n    this.#isDrawingBlankSprite = false;\n  }\n\n  async imageToBitmap(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors?: number\n  ) {\n    return imageToBitmap(\n      image,\n      width,\n      height,\n      this.colors,\n      this.bitmapColorIndices,\n      numberOfColors\n    );\n  }\n  async quantizeImage(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors: number\n  ) {\n    return quantizeImage(image, width, height, numberOfColors);\n  }\n\n  async resizeAndQuantizeImage(\n    image: HTMLImageElement,\n    width: number,\n    height: number,\n    numberOfColors: number,\n    colors?: string[]\n  ) {\n    return resizeAndQuantizeImage(image, width, height, numberOfColors, colors);\n  }\n\n  serializeSpriteSheet(spriteSheet: DisplaySpriteSheet): ArrayBuffer {\n    return serializeSpriteSheet(this, spriteSheet);\n  }\n\n  #startSprite(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    contextState: DisplayContextState\n  ) {\n    this.#saveContextForSprite(\n      offsetX,\n      offsetY,\n      { width, height },\n      contextState\n    );\n    this.#setUseSpriteColorIndices(true, true);\n    this.#setClearCanvasBoundingBoxOnDraw(false, true);\n  }\n  #isDrawingBlankSprite = false;\n  async startSprite(\n    offsetX: number,\n    offsetY: number,\n    width: number,\n    height: number,\n    sendImmediately?: boolean\n  ) {\n    _console.assertWithError(\n      !this.#isDrawingBlankSprite,\n      `already drawing blank sprite`\n    );\n    this.#isDrawingBlankSprite = true;\n\n    const contextState = structuredClone(this.contextState);\n    this.#startSprite(offsetX, offsetY, width, height, contextState);\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.startSprite(\n        offsetX,\n        offsetY,\n        width,\n        height,\n        sendImmediately\n      );\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n  #endSprite() {\n    this.#restoreContextForSprite();\n    this.#setUseSpriteColorIndices(false, true);\n    this.#setClearCanvasBoundingBoxOnDraw(true, true);\n  }\n  async endSprite(sendImmediately?: boolean) {\n    _console.assertWithError(\n      this.#isDrawingBlankSprite,\n      `not drawing blank sprite`\n    );\n    this.#isDrawingBlankSprite = false;\n\n    this.#endSprite();\n\n    if (this.device?.isConnected && !this.#ignoreDevice) {\n      await this.deviceDisplayManager!.endSprite(sendImmediately);\n    } else {\n      if (sendImmediately) {\n        this.#onSentContextCommands();\n      }\n    }\n  }\n}\nexport default DisplayCanvasHelper;\n","import { createConsole } from \"../utils/Console.ts\";\nimport CenterOfPressureHelper from \"../utils/CenterOfPressureHelper.ts\";\nimport {\n  PressureData,\n  PressureSensorPosition,\n  PressureSensorValue,\n} from \"../sensor/PressureSensorDataManager.ts\";\nimport { CenterOfPressure } from \"../utils/CenterOfPressureHelper.ts\";\nimport { Side, Sides } from \"../InformationManager.ts\";\nimport { DeviceEventMap } from \"../Device.ts\";\nimport { RangeHelper } from \"../BS.ts\";\n\nconst _console = createConsole(\"DevicePairPressureSensorDataManager\", {\n  log: false,\n});\n\nexport type DevicePairRawPressureData = { [side in Side]: PressureData };\n\nexport interface DevicePairPressureData {\n  sensors: { [key in Side]: PressureSensorValue[] };\n  scaledSum: number;\n  normalizedSum: number;\n  center?: CenterOfPressure;\n  normalizedCenter?: CenterOfPressure;\n}\n\nexport interface DevicePairPressureDataEventMessage {\n  pressure: DevicePairPressureData;\n}\n\nexport interface DevicePairPressureDataEventMessages {\n  pressure: DevicePairPressureDataEventMessage;\n}\n\nclass DevicePairPressureSensorDataManager {\n  #rawPressure: Partial<DevicePairRawPressureData> = {};\n\n  #centerOfPressureHelper = new CenterOfPressureHelper();\n\n  #normalizedSumRangeHelper = new RangeHelper();\n\n  constructor() {\n    this.resetPressureRange();\n  }\n\n  resetPressureRange() {\n    this.#centerOfPressureHelper.reset();\n    this.#normalizedSumRangeHelper.reset();\n  }\n\n  onDevicePressureData(event: DeviceEventMap[\"pressure\"]) {\n    const { pressure } = event.message;\n    const { side } = event.target;\n    _console.log({ pressure, side });\n    this.#rawPressure[side] = pressure;\n    if (this.#hasAllPressureData) {\n      return this.#updatePressureData();\n    } else {\n      _console.log(\"doesn't have all pressure data yet...\");\n    }\n  }\n\n  get #hasAllPressureData() {\n    return Sides.every((side) => side in this.#rawPressure);\n  }\n\n  #updatePressureData() {\n    const pressure: DevicePairPressureData = {\n      scaledSum: 0,\n      normalizedSum: 0,\n      sensors: { left: [], right: [] },\n    };\n\n    Sides.forEach((side) => {\n      const sidePressure = this.#rawPressure[side]!;\n      pressure.scaledSum += sidePressure.scaledSum;\n      //pressure.normalizedSum += this.#rawPressure[side]!.normalizedSum;\n    });\n    pressure.normalizedSum +=\n      this.#normalizedSumRangeHelper.updateAndGetNormalization(\n        pressure.scaledSum,\n        false\n      );\n\n    if (pressure.scaledSum > 0) {\n      pressure.center = { x: 0, y: 0 };\n      Sides.forEach((side) => {\n        const sidePressure = this.#rawPressure[side]!;\n\n        if (false) {\n          const sidePressureWeight =\n            sidePressure.scaledSum / pressure.scaledSum;\n          if (sidePressureWeight > 0) {\n            if (sidePressure.normalizedCenter?.y != undefined) {\n              pressure.center!.y +=\n                sidePressure.normalizedCenter!.y * sidePressureWeight;\n            }\n            if (side == \"right\") {\n              pressure.center!.x = sidePressureWeight;\n            }\n          }\n        } else {\n          sidePressure.sensors.forEach((sensor) => {\n            const _sensor: PressureSensorValue = structuredClone(sensor);\n            _sensor.weightedValue = sensor.scaledValue / pressure.scaledSum;\n            let { x, y } = sensor.position;\n            x /= 2;\n            if (side == \"right\") {\n              x += 0.5;\n            }\n            _sensor.position = { x, y };\n            pressure.center!.x += _sensor.position.x * _sensor.weightedValue;\n            pressure.center!.y += _sensor.position.y * _sensor.weightedValue;\n            pressure.sensors[side].push(_sensor);\n          });\n        }\n      });\n\n      pressure.normalizedCenter =\n        this.#centerOfPressureHelper.updateAndGetNormalization(\n          pressure.center,\n          false\n        );\n    }\n\n    _console.log({ devicePairPressure: pressure });\n\n    return pressure;\n  }\n}\n\nexport default DevicePairPressureSensorDataManager;\n","import DevicePairPressureSensorDataManager, {\n  DevicePairPressureDataEventMessages,\n} from \"./DevicePairPressureSensorDataManager.ts\";\nimport { createConsole } from \"../utils/Console.ts\";\nimport { Side } from \"../InformationManager.ts\";\nimport { SensorType } from \"../sensor/SensorDataManager.ts\";\nimport { DeviceEventMap } from \"../Device.ts\";\nimport EventDispatcher from \"../utils/EventDispatcher.ts\";\nimport DevicePair from \"./DevicePair.ts\";\nimport { AddKeysAsPropertyToInterface, ExtendInterfaceValues, ValueOf } from \"../utils/TypeScriptUtils.ts\";\n\nconst _console = createConsole(\"DevicePairSensorDataManager\", { log: false });\n\nexport const DevicePairSensorTypes = [\"pressure\", \"sensorData\"] as const;\nexport type DevicePairSensorType = (typeof DevicePairSensorTypes)[number];\n\nexport const DevicePairSensorDataEventTypes = DevicePairSensorTypes;\nexport type DevicePairSensorDataEventType = (typeof DevicePairSensorDataEventTypes)[number];\n\nexport type DevicePairSensorDataTimestamps = { [side in Side]: number };\n\ninterface BaseDevicePairSensorDataEventMessage {\n  timestamps: DevicePairSensorDataTimestamps;\n}\n\ntype BaseDevicePairSensorDataEventMessages = DevicePairPressureDataEventMessages;\ntype _DevicePairSensorDataEventMessages = ExtendInterfaceValues<\n  AddKeysAsPropertyToInterface<BaseDevicePairSensorDataEventMessages, \"sensorType\">,\n  BaseDevicePairSensorDataEventMessage\n>;\n\nexport type DevicePairSensorDataEventMessage = ValueOf<_DevicePairSensorDataEventMessages>;\ninterface AnyDevicePairSensorDataEventMessages {\n  sensorData: DevicePairSensorDataEventMessage;\n}\nexport type DevicePairSensorDataEventMessages = _DevicePairSensorDataEventMessages &\n  AnyDevicePairSensorDataEventMessages;\n\nexport type DevicePairSensorDataEventDispatcher = EventDispatcher<\n  DevicePair,\n  DevicePairSensorDataEventType,\n  DevicePairSensorDataEventMessages\n>;\n\nclass DevicePairSensorDataManager {\n  eventDispatcher!: DevicePairSensorDataEventDispatcher;\n  get dispatchEvent() {\n    return this.eventDispatcher.dispatchEvent;\n  }\n\n  #timestamps: { [sensorType in SensorType]?: Partial<DevicePairSensorDataTimestamps> } = {};\n\n  pressureSensorDataManager = new DevicePairPressureSensorDataManager();\n  resetPressureRange() {\n    this.pressureSensorDataManager.resetPressureRange();\n  }\n\n  onDeviceSensorData(event: DeviceEventMap[\"sensorData\"]) {\n    const { timestamp, sensorType } = event.message;\n\n    _console.log({ sensorType, timestamp, event });\n\n    if (!this.#timestamps[sensorType]) {\n      this.#timestamps[sensorType] = {};\n    }\n    this.#timestamps[sensorType]![event.target.side] = timestamp;\n\n    let value;\n    switch (sensorType) {\n      case \"pressure\":\n        value = this.pressureSensorDataManager.onDevicePressureData(event as unknown as DeviceEventMap[\"pressure\"]);\n        break;\n      default:\n        _console.log(`uncaught sensorType \"${sensorType}\"`);\n        break;\n    }\n\n    if (value) {\n      const timestamps = Object.assign({}, this.#timestamps[sensorType]) as DevicePairSensorDataTimestamps;\n      // @ts-expect-error\n      this.dispatchEvent(sensorType as DevicePairSensorDataEventType, { sensorType, timestamps, [sensorType]: value });\n      // @ts-expect-error\n      this.dispatchEvent(\"sensorData\", { sensorType, timestamps, [sensorType]: value });\n    } else {\n      _console.log(\"no value received\");\n    }\n  }\n}\n\nexport default DevicePairSensorDataManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n  EventListenerMap,\n  EventMap,\n} from \"../utils/EventDispatcher.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../utils/EventUtils.ts\";\nimport Device, {\n  DeviceEvent,\n  DeviceEventType,\n  DeviceEventMessages,\n  DeviceEventTypes,\n  BoundDeviceEventListeners,\n  DeviceEventMap,\n} from \"../Device.ts\";\nimport DevicePairSensorDataManager, {\n  DevicePairSensorDataEventDispatcher,\n} from \"./DevicePairSensorDataManager.ts\";\nimport { capitalizeFirstCharacter } from \"../utils/stringUtils.ts\";\nimport { Side, Sides } from \"../InformationManager.ts\";\nimport { VibrationConfiguration } from \"../vibration/VibrationManager.ts\";\nimport { SensorConfiguration } from \"../sensor/SensorConfigurationManager.ts\";\nimport {\n  DevicePairSensorDataEventMessages,\n  DevicePairSensorDataEventTypes,\n} from \"./DevicePairSensorDataManager.ts\";\nimport {\n  AddPrefixToInterfaceKeys,\n  ExtendInterfaceValues,\n  KeyOf,\n} from \"../utils/TypeScriptUtils.ts\";\nimport DeviceManager from \"../DeviceManager.ts\";\n\nconst _console = createConsole(\"DevicePair\", { log: false });\n\ninterface BaseDevicePairDeviceEventMessage {\n  device: Device;\n  side: Side;\n}\ntype DevicePairDeviceEventMessages = ExtendInterfaceValues<\n  AddPrefixToInterfaceKeys<DeviceEventMessages, \"device\">,\n  BaseDevicePairDeviceEventMessage\n>;\ntype DevicePairDeviceEventType = KeyOf<DevicePairDeviceEventMessages>;\nfunction getDevicePairDeviceEventType(deviceEventType: DeviceEventType) {\n  return `device${capitalizeFirstCharacter(\n    deviceEventType\n  )}` as DevicePairDeviceEventType;\n}\nconst DevicePairDeviceEventTypes = DeviceEventTypes.map((eventType) =>\n  getDevicePairDeviceEventType(eventType)\n) as DevicePairDeviceEventType[];\n\nexport const DevicePairConnectionEventTypes = [\"isConnected\"] as const;\nexport type DevicePairConnectionEventType =\n  (typeof DevicePairConnectionEventTypes)[number];\n\nexport interface DevicePairConnectionEventMessages {\n  isConnected: { isConnected: boolean };\n}\n\nexport const DevicePairEventTypes = [\n  ...DevicePairConnectionEventTypes,\n  ...DevicePairSensorDataEventTypes,\n  ...DevicePairDeviceEventTypes,\n] as const;\nexport type DevicePairEventType = (typeof DevicePairEventTypes)[number];\n\nexport type DevicePairEventMessages = DevicePairConnectionEventMessages &\n  DevicePairSensorDataEventMessages &\n  DevicePairDeviceEventMessages;\n\nexport type DevicePairEventDispatcher = EventDispatcher<\n  DevicePair,\n  DevicePairEventType,\n  DevicePairEventMessages\n>;\nexport type DevicePairEventMap = EventMap<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\nexport type DevicePairEventListenerMap = EventListenerMap<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\nexport type DevicePairEvent = Event<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\nexport type BoundDevicePairEventListeners = BoundEventListeners<\n  DevicePair,\n  DeviceEventType,\n  DevicePairEventMessages\n>;\n\nexport const DevicePairTypes = [\"insoles\", \"gloves\"] as const;\nexport type DevicePairType = (typeof DevicePairTypes)[number];\n\nclass DevicePair {\n  constructor(type: DevicePairType) {\n    this.#type = type;\n    this.#sensorDataManager.eventDispatcher = this\n      .#eventDispatcher as DevicePairSensorDataEventDispatcher;\n  }\n\n  get sides() {\n    return Sides;\n  }\n\n  #type: DevicePairType;\n  get type() {\n    return this.#type;\n  }\n\n  #eventDispatcher: DevicePairEventDispatcher = new EventDispatcher(\n    this as DevicePair,\n    DevicePairEventTypes\n  );\n  get addEventListener() {\n    return this.#eventDispatcher.addEventListener;\n  }\n  get #dispatchEvent() {\n    return this.#eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.#eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.#eventDispatcher.waitForEvent;\n  }\n  get removeEventListeners() {\n    return this.#eventDispatcher.removeEventListeners;\n  }\n  get removeAllEventListeners() {\n    return this.#eventDispatcher.removeAllEventListeners;\n  }\n\n  // SIDES\n  #left?: Device;\n  get left() {\n    return this.#left;\n  }\n\n  #right?: Device;\n  get right() {\n    return this.#right;\n  }\n\n  get isConnected() {\n    return Sides.every((side) => this[side]?.isConnected);\n  }\n  get isPartiallyConnected() {\n    return Sides.some((side) => this[side]?.isConnected);\n  }\n  get isHalfConnected() {\n    return this.isPartiallyConnected && !this.isConnected;\n  }\n  #assertIsConnected() {\n    _console.assertWithError(this.isConnected, \"devicePair must be connected\");\n  }\n\n  #isDeviceCorrectType(device: Device) {\n    switch (this.type) {\n      case \"insoles\":\n        return device.isInsole;\n      case \"gloves\":\n        return device.isGlove;\n    }\n  }\n\n  assignDevice(device: Device) {\n    if (!this.#isDeviceCorrectType(device)) {\n      _console.log(\n        `device is incorrect type ${device.type} for ${this.type} devicePair`\n      );\n      return;\n    }\n    const side = device.side;\n\n    const currentDevice = this[side];\n\n    if (device == currentDevice) {\n      _console.log(\"device already assigned\");\n      return;\n    }\n\n    if (currentDevice) {\n      this.#removeDeviceEventListeners(currentDevice);\n    }\n    this.#addDeviceEventListeners(device);\n\n    switch (side) {\n      case \"left\":\n        this.#left = device;\n        break;\n      case \"right\":\n        this.#right = device;\n        break;\n    }\n\n    _console.log(`assigned ${side} ${this.type} device`, device);\n\n    this.resetPressureRange();\n\n    this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n    this.#dispatchEvent(\"deviceIsConnected\", {\n      device,\n      isConnected: device.isConnected,\n      side,\n    });\n\n    return currentDevice;\n  }\n\n  #addDeviceEventListeners(device: Device) {\n    addEventListeners(device, this.#boundDeviceEventListeners);\n    DeviceEventTypes.forEach((deviceEventType) => {\n      device.addEventListener(\n        // @ts-expect-error\n        deviceEventType,\n        this.#redispatchDeviceEvent.bind(this)\n      );\n    });\n  }\n  #removeDeviceEventListeners(device: Device) {\n    removeEventListeners(device, this.#boundDeviceEventListeners);\n    DeviceEventTypes.forEach((deviceEventType) => {\n      device.removeEventListener(\n        // @ts-expect-error\n        deviceEventType,\n        this.#redispatchDeviceEvent.bind(this)\n      );\n    });\n  }\n\n  #removeDevice(device: Device) {\n    const foundDevice = Sides.some((side) => {\n      if (this[side] != device) {\n        return false;\n      }\n\n      _console.log(`removing ${side} ${this.type} device`, device);\n      removeEventListeners(device, this.#boundDeviceEventListeners);\n\n      switch (side) {\n        case \"left\":\n          this.#left = undefined;\n          break;\n        case \"right\":\n          this.#right = undefined;\n          break;\n      }\n\n      return true;\n    });\n    if (foundDevice) {\n      this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n    }\n    return foundDevice;\n  }\n\n  #boundDeviceEventListeners: BoundDeviceEventListeners = {\n    isConnected: this.#onDeviceIsConnected.bind(this),\n    sensorData: this.#onDeviceSensorData.bind(this),\n    getType: this.#onDeviceType.bind(this),\n  };\n\n  #redispatchDeviceEvent(deviceEvent: DeviceEvent) {\n    const { type, target: device, message } = deviceEvent;\n    this.#dispatchEvent(getDevicePairDeviceEventType(type), {\n      ...message,\n      device,\n      side: device.side,\n    });\n  }\n\n  #onDeviceIsConnected(deviceEvent: DeviceEventMap[\"isConnected\"]) {\n    this.#dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n  }\n\n  #onDeviceType(deviceEvent: DeviceEventMap[\"getType\"]) {\n    const { target: device } = deviceEvent;\n    if (this[device.side] == device) {\n      return;\n    }\n    const foundDevice = this.#removeDevice(device);\n    if (!foundDevice) {\n      return;\n    }\n    this.assignDevice(device);\n  }\n\n  // SENSOR CONFIGURATION\n  async setSensorConfiguration(sensorConfiguration: SensorConfiguration) {\n    for (let i = 0; i < Sides.length; i++) {\n      const side = Sides[i];\n      if (this[side]?.isConnected) {\n        await this[side].setSensorConfiguration(sensorConfiguration);\n      }\n    }\n  }\n\n  // SENSOR DATA\n  #sensorDataManager = new DevicePairSensorDataManager();\n  #onDeviceSensorData(deviceEvent: DeviceEventMap[\"sensorData\"]) {\n    if (this.isConnected) {\n      this.#sensorDataManager.onDeviceSensorData(deviceEvent);\n    }\n  }\n  resetPressureRange() {\n    Sides.forEach((side) => this[side]?.resetPressureRange());\n    this.#sensorDataManager.resetPressureRange();\n  }\n\n  // VIBRATION\n  async triggerVibration(\n    vibrationConfigurations: VibrationConfiguration[],\n    sendImmediately?: boolean\n  ) {\n    const promises = Sides.map((side) => {\n      return this[side]?.triggerVibration(\n        vibrationConfigurations,\n        sendImmediately\n      );\n    }).filter(Boolean);\n    return Promise.allSettled(promises);\n  }\n\n  // SHARED INSTANCES\n  static #insoles = new DevicePair(\"insoles\");\n  static get insoles() {\n    return this.#insoles;\n  }\n  static #gloves = new DevicePair(\"gloves\");\n  static get gloves() {\n    return this.#gloves;\n  }\n  static {\n    DeviceManager.AddEventListener(\"deviceConnected\", (event) => {\n      const { device } = event.message;\n      if (device.isInsole) {\n        this.#insoles.assignDevice(device);\n      }\n      if (device.isGlove) {\n        this.#gloves.assignDevice(device);\n      }\n    });\n  }\n}\n\nexport default DevicePair;\n","import { createConsole } from \"../utils/Console.ts\";\nimport { isInBrowser } from \"../utils/environment.ts\";\nimport BaseConnectionManager, {\n  ConnectionType,\n  ConnectionMessageType,\n  ClientConnectionType,\n} from \"./BaseConnectionManager.ts\";\nimport { DeviceEventTypes } from \"../Device.ts\";\nimport { parseMessage } from \"../utils/ParseUtils.ts\";\nimport { DeviceInformationTypes } from \"../DeviceInformationManager.ts\";\nimport { DeviceEventType } from \"../Device.ts\";\nimport { ClientDeviceMessage } from \"../server/ServerUtils.ts\";\nimport BaseClient from \"../server/BaseClient.ts\";\nimport { DiscoveredDevice } from \"../BS.ts\";\n\nconst _console = createConsole(\"ClientConnectionManager\", { log: false });\n\nexport type SendClientMessageCallback = (\n  ...messages: ClientDeviceMessage[]\n) => void;\n\nexport type SendClientConnectMessageCallback = (\n  connectionType?: ClientConnectionType\n) => void;\n\nconst ClientDeviceInformationMessageTypes: ConnectionMessageType[] = [\n  ...DeviceInformationTypes,\n  \"batteryLevel\",\n];\n\nclass ClientConnectionManager extends BaseConnectionManager {\n  static get isSupported() {\n    return isInBrowser;\n  }\n  static get type(): ConnectionType {\n    return \"client\";\n  }\n\n  subType?: ClientConnectionType;\n\n  get canUpdateFirmware() {\n    // FIX - how to know if it has an smp characteristic?\n    return false;\n  }\n\n  client!: BaseClient;\n  discoveredDevice!: DiscoveredDevice;\n\n  #bluetoothId!: string;\n  get bluetoothId() {\n    return this.#bluetoothId!;\n  }\n  set bluetoothId(newBluetoothId) {\n    _console.assertTypeWithError(newBluetoothId, \"string\");\n    if (this.#bluetoothId == newBluetoothId) {\n      _console.log(\"redundant bluetoothId assignment\");\n      return;\n    }\n    this.#bluetoothId = newBluetoothId;\n  }\n\n  #isConnected = false;\n  get isConnected() {\n    return this.#isConnected;\n  }\n  set isConnected(newIsConnected) {\n    _console.assertTypeWithError(newIsConnected, \"boolean\");\n    if (this.#isConnected == newIsConnected) {\n      _console.log(\"redundant newIsConnected assignment\", newIsConnected);\n      return;\n    }\n    this.#isConnected = newIsConnected;\n\n    this.status = this.#isConnected ? \"connected\" : \"notConnected\";\n\n    if (this.isConnected) {\n      this.#requestDeviceInformation();\n    }\n  }\n\n  get isAvailable() {\n    return this.client.isConnected;\n  }\n\n  async connect() {\n    await super.connect();\n    this.sendClientConnectMessage(this.subType);\n  }\n  async disconnect() {\n    await super.disconnect();\n    this.sendClientDisconnectMessage();\n  }\n\n  get canReconnect() {\n    return true;\n  }\n  async reconnect() {\n    await super.reconnect();\n    this.sendClientConnectMessage();\n  }\n\n  sendClientMessage!: SendClientMessageCallback;\n  sendClientConnectMessage!: SendClientConnectMessageCallback;\n  sendClientDisconnectMessage!: Function;\n  sendRequiredDeviceInformationMessage!: Function;\n\n  async sendSmpMessage(data: ArrayBuffer) {\n    super.sendSmpMessage(data);\n    this.sendClientMessage({ type: \"smp\", data });\n  }\n\n  async sendTxData(data: ArrayBuffer) {\n    super.sendTxData(data);\n    if (data.byteLength == 0) {\n      return;\n    }\n    this.sendClientMessage({ type: \"tx\", data });\n  }\n\n  #requestDeviceInformation() {\n    //this.sendClientMessage(...ClientDeviceInformationMessageTypes);\n    this.sendRequiredDeviceInformationMessage();\n  }\n\n  onClientMessage(dataView: DataView) {\n    _console.log({ dataView });\n    parseMessage(\n      dataView,\n      DeviceEventTypes,\n      this.#onClientMessageCallback.bind(this),\n      null,\n      true\n    );\n    this.onMessagesReceived!();\n  }\n\n  #onClientMessageCallback(messageType: DeviceEventType, dataView: DataView) {\n    let byteOffset = 0;\n\n    _console.log({ messageType }, dataView);\n\n    switch (messageType) {\n      case \"isConnected\":\n        const isConnected = Boolean(dataView.getUint8(byteOffset++));\n        _console.log({ isConnected });\n        this.isConnected = isConnected;\n        break;\n\n      case \"rx\":\n        this.parseRxMessage(dataView);\n        break;\n\n      default:\n        this.onMessageReceived!(messageType as ConnectionMessageType, dataView);\n        break;\n    }\n  }\n}\n\nexport default ClientConnectionManager;\n","import { createConsole } from \"../utils/Console.ts\";\nimport {\n  ServerMessageTypes,\n  discoveredDevicesMessage,\n  ServerMessage,\n  MessageLike,\n  ClientDeviceMessage,\n  createClientDeviceMessage,\n  ServerMessageType,\n} from \"./ServerUtils.ts\";\nimport { parseMessage, parseStringFromDataView } from \"../utils/ParseUtils.ts\";\nimport EventDispatcher, {\n  BoundEventListeners,\n  Event,\n} from \"../utils/EventDispatcher.ts\";\nimport Device from \"../Device.ts\";\nimport {\n  concatenateArrayBuffers,\n  sliceDataView,\n  stringToArrayBuffer,\n} from \"../utils/ArrayBufferUtils.ts\";\nimport {\n  DiscoveredDevice,\n  DiscoveredDevicesMap,\n  ScannerEventMessages,\n} from \"../scanner/BaseScanner.ts\";\nimport ClientConnectionManager from \"../connection/ClientConnectionManager.ts\";\nimport { DeviceManager } from \"../BS.ts\";\nimport {\n  ClientConnectionType,\n  ConnectionTypes,\n} from \"../connection/BaseConnectionManager.ts\";\n\nconst _console = createConsole(\"BaseClient\", { log: false });\n\nexport const ClientConnectionStatuses = [\n  \"notConnected\",\n  \"connecting\",\n  \"connected\",\n  \"disconnecting\",\n] as const;\nexport type ClientConnectionStatus = (typeof ClientConnectionStatuses)[number];\n\nexport const ClientEventTypes = [\n  ...ClientConnectionStatuses,\n  \"connectionStatus\",\n  \"isConnected\",\n  \"isScanningAvailable\",\n  \"isScanning\",\n  \"discoveredDevice\",\n  \"expiredDiscoveredDevice\",\n] as const;\nexport type ClientEventType = (typeof ClientEventTypes)[number];\n\ninterface ClientConnectionEventMessages {\n  connectionStatus: { connectionStatus: ClientConnectionStatus };\n  isConnected: { isConnected: boolean };\n}\n\nexport type ClientEventMessages = ClientConnectionEventMessages &\n  ScannerEventMessages;\n\nexport type ClientEventDispatcher = EventDispatcher<\n  BaseClient,\n  ClientEventType,\n  ClientEventMessages\n>;\nexport type ClientEvent = Event<\n  BaseClient,\n  ClientEventType,\n  ClientEventMessages\n>;\nexport type BoundClientEventListeners = BoundEventListeners<\n  BaseClient,\n  ClientEventType,\n  ClientEventMessages\n>;\n\nexport type ServerURL = string | URL;\n\ntype DevicesMap = { [deviceId: string]: Device };\n\nabstract class BaseClient {\n  protected get baseConstructor() {\n    return this.constructor as typeof BaseClient;\n  }\n\n  #reset() {\n    this.#isScanningAvailable = false;\n    this.#isScanning = false;\n    for (const id in this.#devices) {\n      const device = this.#devices[id];\n      const connectionManager =\n        device.connectionManager! as ClientConnectionManager;\n      connectionManager.isConnected = false;\n      //device.removeAllEventListeners();\n    }\n    this.#receivedMessageTypes.length = 0;\n    //this.#devices = {};\n  }\n\n  // DEVICES\n  #devices: DevicesMap = {};\n  get devices(): Readonly<DevicesMap> {\n    return this.#devices;\n  }\n\n  #eventDispatcher: ClientEventDispatcher = new EventDispatcher(\n    this as BaseClient,\n    ClientEventTypes\n  );\n  get addEventListener() {\n    return this.#eventDispatcher.addEventListener;\n  }\n  protected get dispatchEvent() {\n    return this.#eventDispatcher.dispatchEvent;\n  }\n  get removeEventListener() {\n    return this.#eventDispatcher.removeEventListener;\n  }\n  get waitForEvent() {\n    return this.#eventDispatcher.waitForEvent;\n  }\n\n  abstract isConnected: boolean;\n  protected assertConnection() {\n    _console.assertWithError(this.isConnected, \"notConnected\");\n  }\n\n  abstract isDisconnected: boolean;\n  protected assertDisconnection() {\n    _console.assertWithError(this.isDisconnected, \"not disconnected\");\n  }\n\n  abstract connect(): void;\n  abstract disconnect(): void;\n  abstract reconnect(): void;\n  abstract toggleConnection(url?: ServerURL): void;\n\n  static _reconnectOnDisconnection = true;\n  static get ReconnectOnDisconnection() {\n    return this._reconnectOnDisconnection;\n  }\n  static set ReconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this._reconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n\n  protected _reconnectOnDisconnection =\n    this.baseConstructor.ReconnectOnDisconnection;\n  get reconnectOnDisconnection() {\n    return this._reconnectOnDisconnection;\n  }\n  set reconnectOnDisconnection(newReconnectOnDisconnection) {\n    _console.assertTypeWithError(newReconnectOnDisconnection, \"boolean\");\n    this._reconnectOnDisconnection = newReconnectOnDisconnection;\n  }\n\n  abstract sendServerMessage(...messages: ServerMessage[]): void;\n\n  // CONNECTION STATUS\n  #_connectionStatus: ClientConnectionStatus = \"notConnected\";\n  protected get _connectionStatus() {\n    return this.#_connectionStatus;\n  }\n  protected set _connectionStatus(newConnectionStatus) {\n    _console.assertTypeWithError(newConnectionStatus, \"string\");\n    _console.log({ newConnectionStatus });\n    this.#_connectionStatus = newConnectionStatus;\n\n    this.dispatchEvent(\"connectionStatus\", {\n      connectionStatus: this.connectionStatus,\n    });\n    this.dispatchEvent(this.connectionStatus, {});\n\n    switch (newConnectionStatus) {\n      case \"connected\":\n      case \"notConnected\":\n        this.dispatchEvent(\"isConnected\", { isConnected: this.isConnected });\n        if (this.isConnected) {\n          // this._sendRequiredMessages();\n        } else {\n          this.#reset();\n        }\n        break;\n    }\n  }\n  get connectionStatus() {\n    return this._connectionStatus;\n  }\n\n  static #RequiredMessageTypes: ServerMessage[] = [\n    \"isScanningAvailable\",\n    \"discoveredDevices\",\n    \"connectedDevices\",\n  ];\n  get #requiredMessageTypes(): ServerMessage[] {\n    return BaseClient.#RequiredMessageTypes;\n  }\n  protected _sendRequiredMessages() {\n    _console.log(\"sending required messages\", this.#receivedMessageTypes);\n    this.sendServerMessage(...this.#requiredMessageTypes);\n  }\n\n  #receivedMessageTypes: ServerMessage[] = [];\n  #checkIfFullyConnected() {\n    if (this.connectionStatus != \"connecting\") {\n      return;\n    }\n    _console.log(\"checking if fully connected...\");\n\n    if (!this.#receivedMessageTypes.includes(\"isScanningAvailable\")) {\n      _console.log(\"not fully connected - didn't receive isScanningAvailable\");\n      return;\n    }\n\n    if (this.isScanningAvailable) {\n      if (!this.#receivedMessageTypes.includes(\"isScanning\")) {\n        _console.log(\"not fully connected - didn't receive isScanning\");\n        return;\n      }\n    }\n\n    _console.log(\"fully connected\");\n    this._connectionStatus = \"connected\";\n  }\n\n  protected parseMessage(dataView: DataView) {\n    _console.log(\"parseMessage\", { dataView });\n    parseMessage(\n      dataView,\n      ServerMessageTypes,\n      this.#parseMessageCallback.bind(this),\n      null,\n      true\n    );\n    this.#checkIfFullyConnected();\n  }\n\n  #parseMessageCallback(messageType: ServerMessageType, dataView: DataView) {\n    let byteOffset = 0;\n\n    _console.log({ messageType }, dataView);\n\n    switch (messageType) {\n      case \"isScanningAvailable\":\n        {\n          const isScanningAvailable = Boolean(dataView.getUint8(byteOffset++));\n          _console.log({ isScanningAvailable });\n          this.#isScanningAvailable = isScanningAvailable;\n        }\n        break;\n      case \"isScanning\":\n        {\n          const isScanning = Boolean(dataView.getUint8(byteOffset++));\n          _console.log({ isScanning });\n          this.#isScanning = isScanning;\n        }\n        break;\n      case \"discoveredDevice\":\n        {\n          const { string: discoveredDeviceString } = parseStringFromDataView(\n            dataView,\n            byteOffset\n          );\n          _console.log({ discoveredDeviceString });\n\n          const discoveredDevice: DiscoveredDevice = JSON.parse(\n            discoveredDeviceString\n          );\n          _console.log({ discoveredDevice });\n\n          this.onDiscoveredDevice(discoveredDevice);\n        }\n        break;\n      case \"expiredDiscoveredDevice\":\n        {\n          const { string: bluetoothId } = parseStringFromDataView(\n            dataView,\n            byteOffset\n          );\n          this.#onExpiredDiscoveredDevice(bluetoothId);\n        }\n        break;\n      case \"connectedDevices\":\n        {\n          if (dataView.byteLength == 0) {\n            break;\n          }\n          const { string: connectedBluetoothDeviceIdStrings } =\n            parseStringFromDataView(dataView, byteOffset);\n          _console.log({ connectedBluetoothDeviceIdStrings });\n          const connectedBluetoothDeviceIds = JSON.parse(\n            connectedBluetoothDeviceIdStrings\n          ).connectedDevices;\n          _console.log({ connectedBluetoothDeviceIds });\n          this.onConnectedBluetoothDeviceIds(connectedBluetoothDeviceIds);\n        }\n        break;\n      case \"deviceMessage\":\n        {\n          const { string: bluetoothId, byteOffset: _byteOffset } =\n            parseStringFromDataView(dataView, byteOffset);\n          byteOffset = _byteOffset;\n          const device = this.#devices[bluetoothId];\n          _console.assertWithError(\n            device,\n            `no device found for id ${bluetoothId}`\n          );\n          const connectionManager =\n            device.connectionManager! as ClientConnectionManager;\n          const _dataView = sliceDataView(dataView, byteOffset);\n          connectionManager.onClientMessage(_dataView);\n        }\n        break;\n      default:\n        _console.error(`uncaught messageType \"${messageType}\"`);\n        break;\n    }\n\n    if (this.connectionStatus == \"connecting\") {\n      this.#receivedMessageTypes.push(messageType);\n    }\n  }\n\n  // SCANNING\n  #_isScanningAvailable = false;\n  get #isScanningAvailable() {\n    return this.#_isScanningAvailable;\n  }\n  set #isScanningAvailable(newIsAvailable) {\n    _console.assertTypeWithError(newIsAvailable, \"boolean\");\n    this.#_isScanningAvailable = newIsAvailable;\n    this.dispatchEvent(\"isScanningAvailable\", {\n      isScanningAvailable: this.isScanningAvailable,\n    });\n    if (this.isScanningAvailable) {\n      this.#requestIsScanning();\n    }\n  }\n  get isScanningAvailable() {\n    return this.#isScanningAvailable;\n  }\n  #assertIsScanningAvailable() {\n    this.assertConnection();\n    _console.assertWithError(\n      this.isScanningAvailable,\n      \"scanning is not available\"\n    );\n  }\n  protected requestIsScanningAvailable() {\n    this.sendServerMessage(\"isScanningAvailable\");\n  }\n\n  #_isScanning = false;\n  get #isScanning() {\n    return this.#_isScanning;\n  }\n  set #isScanning(newIsScanning) {\n    _console.assertTypeWithError(newIsScanning, \"boolean\");\n    this.#_isScanning = newIsScanning;\n    this.dispatchEvent(\"isScanning\", { isScanning: this.isScanning });\n  }\n  get isScanning() {\n    return this.#isScanning;\n  }\n  #requestIsScanning() {\n    this.sendServerMessage(\"isScanning\");\n  }\n\n  #assertIsScanning() {\n    _console.assertWithError(this.isScanning, \"is not scanning\");\n  }\n  #assertIsNotScanning() {\n    _console.assertWithError(!this.isScanning, \"is already scanning\");\n  }\n\n  startScan() {\n    this.#assertIsNotScanning();\n    this.sendServerMessage(\"startScan\");\n  }\n  stopScan() {\n    this.#assertIsScanning();\n    this.sendServerMessage(\"stopScan\");\n  }\n  toggleScan() {\n    this.#assertIsScanningAvailable();\n\n    if (this.isScanning) {\n      this.stopScan();\n    } else {\n      this.startScan();\n    }\n  }\n\n  // PERIPHERALS\n  #discoveredDevices: DiscoveredDevicesMap = {};\n  get discoveredDevices(): Readonly<DiscoveredDevicesMap> {\n    return this.#discoveredDevices;\n  }\n\n  protected onDiscoveredDevice(discoveredDevice: DiscoveredDevice) {\n    _console.log({ discoveredDevice });\n    this.#discoveredDevices[discoveredDevice.bluetoothId] = discoveredDevice;\n    this.dispatchEvent(\"discoveredDevice\", { discoveredDevice });\n  }\n  requestDiscoveredDevices() {\n    this.sendServerMessage({ type: \"discoveredDevices\" });\n  }\n  #onExpiredDiscoveredDevice(bluetoothId: string) {\n    _console.log({ expiredBluetoothDeviceId: bluetoothId });\n    const discoveredDevice = this.#discoveredDevices[bluetoothId];\n    if (!discoveredDevice) {\n      _console.warn(`no discoveredDevice found with id \"${bluetoothId}\"`);\n      return;\n    }\n    _console.log({ expiredDiscoveredDevice: discoveredDevice });\n    delete this.#discoveredDevices[bluetoothId];\n    this.dispatchEvent(\"expiredDiscoveredDevice\", { discoveredDevice });\n  }\n\n  // DEVICE CONNECTION\n  connectToDevice(bluetoothId: string, connectionType?: ClientConnectionType) {\n    return this.requestConnectionToDevice(bluetoothId, connectionType);\n  }\n  protected requestConnectionToDevice(\n    bluetoothId: string,\n    connectionType?: ClientConnectionType\n  ) {\n    this.assertConnection();\n    _console.assertTypeWithError(bluetoothId, \"string\");\n    const device = this.#getOrCreateDevice(bluetoothId);\n    if (connectionType) {\n      device.connect({ type: \"client\", subType: connectionType });\n    } else {\n      device.connect();\n    }\n    return device;\n  }\n  protected sendConnectToDeviceMessage(\n    bluetoothId: string,\n    connectionType?: ClientConnectionType\n  ) {\n    if (connectionType) {\n      this.sendServerMessage({\n        type: \"connectToDevice\",\n        data: concatenateArrayBuffers(\n          stringToArrayBuffer(bluetoothId),\n          ConnectionTypes.indexOf(connectionType)\n        ),\n      });\n    } else {\n      this.sendServerMessage({ type: \"connectToDevice\", data: bluetoothId });\n    }\n  }\n\n  // DEVICE CONNECTION\n  createDevice(bluetoothId: string) {\n    const device = new Device();\n    const discoveredDevice = this.#discoveredDevices[bluetoothId];\n    const clientConnectionManager = new ClientConnectionManager();\n    clientConnectionManager.discoveredDevice = Object.assign(\n      {},\n      discoveredDevice\n    );\n    clientConnectionManager.client = this;\n    clientConnectionManager.bluetoothId = bluetoothId;\n    clientConnectionManager.sendClientMessage = this.sendDeviceMessage.bind(\n      this,\n      bluetoothId\n    );\n    clientConnectionManager.sendRequiredDeviceInformationMessage =\n      this.sendRequiredDeviceInformationMessage.bind(this, bluetoothId);\n    clientConnectionManager.sendClientConnectMessage =\n      this.sendConnectToDeviceMessage.bind(this, bluetoothId);\n    clientConnectionManager.sendClientDisconnectMessage =\n      this.sendDisconnectFromDeviceMessage.bind(this, bluetoothId);\n    device.connectionManager = clientConnectionManager;\n    return device;\n  }\n\n  #getOrCreateDevice(bluetoothId: string) {\n    let device = this.#devices[bluetoothId];\n    if (!device) {\n      device = this.createDevice(bluetoothId);\n      this.#devices[bluetoothId] = device;\n    }\n    return device;\n  }\n  protected onConnectedBluetoothDeviceIds(bluetoothIds: string[]) {\n    _console.log({ bluetoothIds });\n    bluetoothIds.forEach((bluetoothId) => {\n      const device = this.#getOrCreateDevice(bluetoothId);\n      const connectionManager =\n        device.connectionManager! as ClientConnectionManager;\n      connectionManager.isConnected = true;\n      DeviceManager._CheckDeviceAvailability(device);\n    });\n  }\n\n  disconnectFromDevice(bluetoothId: string) {\n    this.requestDisconnectionFromDevice(bluetoothId);\n  }\n  protected requestDisconnectionFromDevice(bluetoothId: string) {\n    this.assertConnection();\n    _console.assertTypeWithError(bluetoothId, \"string\");\n    const device = this.devices[bluetoothId];\n    _console.assertWithError(device, `no device found with id ${bluetoothId}`);\n    device.disconnect();\n    return device;\n  }\n  protected sendDisconnectFromDeviceMessage(bluetoothId: string) {\n    this.sendServerMessage({ type: \"disconnectFromDevice\", data: bluetoothId });\n  }\n\n  protected sendDeviceMessage(\n    bluetoothId: string,\n    ...messages: ClientDeviceMessage[]\n  ) {\n    this.sendServerMessage({\n      type: \"deviceMessage\",\n      data: [bluetoothId, createClientDeviceMessage(...messages)],\n    });\n  }\n\n  protected sendRequiredDeviceInformationMessage(bluetoothId: string) {\n    this.sendServerMessage({\n      type: \"requiredDeviceInformation\",\n      data: [bluetoothId],\n    });\n  }\n}\n\nexport default BaseClient;\n","import { createConsole } from \"../../utils/Console.ts\";\nimport {\n  createServerMessage,\n  MessageLike,\n  ServerMessage,\n} from \"../ServerUtils.ts\";\nimport {\n  addEventListeners,\n  removeEventListeners,\n} from \"../../utils/EventUtils.ts\";\nimport ClientConnectionManager from \"../../connection/ClientConnectionManager.ts\";\nimport BaseClient, { ServerURL } from \"../BaseClient.ts\";\nimport type * as ws from \"ws\";\nimport { Timer } from \"../../utils/Timer.ts\";\nimport {\n  createWebSocketMessage,\n  WebSocketMessageType,\n  WebSocketMessageTypes,\n  webSocketPingTimeout,\n  webSocketReconnectTimeout,\n  WebSocketMessage,\n} from \"./WebSocketUtils.ts\";\nimport { parseMessage } from \"../../utils/ParseUtils.ts\";\nimport { isInLensStudio, isInBrowser } from \"../../utils/environment.ts\";\n\nconst _console = createConsole(\"WebSocketClient\", { log: false });\n\nclass WebSocketClient extends BaseClient {\n  // WEBSOCKET\n  #webSocket?: WebSocket;\n  get webSocket() {\n    return this.#webSocket;\n  }\n  set webSocket(newWebSocket) {\n    if (this.#webSocket == newWebSocket) {\n      _console.log(\"redundant webSocket assignment\");\n      return;\n    }\n\n    _console.log(\"assigning webSocket\", newWebSocket);\n\n    if (this.#webSocket) {\n      removeEventListeners(this.#webSocket, this.#boundWebSocketEventListeners);\n    }\n\n    addEventListeners(newWebSocket, this.#boundWebSocketEventListeners);\n    this.#webSocket = newWebSocket;\n\n    _console.log(\"assigned webSocket\");\n  }\n  get readyState() {\n    return this.webSocket?.readyState;\n  }\n  get isConnected() {\n    return this.readyState == WebSocket.OPEN;\n  }\n  get isDisconnected() {\n    return this.readyState == WebSocket.CLOSED;\n  }\n\n  connect(url: string | URL = `wss://${location.host}`) {\n    if (this.webSocket) {\n      this.assertDisconnection();\n    }\n    this._connectionStatus = \"connecting\";\n\n    if (isInLensStudio) {\n      if (globalThis.internetModule) {\n        // FILL\n        /*\n        let socket = globalThis.internetModule.createWebSocket(url);\n        socket.binaryType = \"blob\";\n\n        socket.onopen = (event) => {\n          socket.send(\"Message 1\");\n\n          // Try sending a binary message\n          // (the bytes below spell 'Message 2')\n          const message = [77, 101, 115, 115, 97, 103, 101, 32, 50];\n          const bytes = new Uint8Array(message);\n          socket.send(bytes);\n        };\n\n        // Listen for messages\n        socket.onmessage = async (event) => {\n          if (event.data instanceof Blob) {\n            // Binary frame, can be retrieved as either Uint8Array or string\n            let bytes = await event.data.bytes();\n            let text = await event.data.text();\n\n            print(\"Received binary message, printing as text: \" + text);\n          } else {\n            // Text frame\n            let text = event.data;\n            print(\"Received text message: \" + text);\n          }\n        };\n\n        socket.onclose = (event) => {\n          if (event.wasClean) {\n            print(\"Socket closed cleanly\");\n          } else {\n            print(\"Socket closed with error, code: \" + event.code);\n          }\n        };\n\n        socket.onerror = (event) => {\n          print(\"Socket error\");\n        };\n        */\n      }\n    } else {\n      this.webSocket = new WebSocket(url);\n    }\n  }\n\n  disconnect() {\n    this.assertConnection();\n    if (this.reconnectOnDisconnection) {\n      this.reconnectOnDisconnection = false;\n      this.webSocket!.addEventListener(\n        \"close\",\n        () => {\n          this.reconnectOnDisconnection = true;\n        },\n        { once: true }\n      );\n    }\n    this._connectionStatus = \"disconnecting\";\n    this.webSocket!.close();\n  }\n\n  reconnect() {\n    this.assertDisconnection();\n    this.connect(this.webSocket!.url);\n  }\n\n  toggleConnection(url?: ServerURL) {\n    if (this.isConnected) {\n      this.disconnect();\n    } else if (url && this.webSocket?.url == url) {\n      this.reconnect();\n    } else {\n      this.connect(url);\n    }\n  }\n\n  // WEBSOCKET MESSAGING\n  sendMessage(message: MessageLike) {\n    this.assertConnection();\n    this.#webSocket!.send(message);\n    this.#pingTimer.restart();\n  }\n\n  sendServerMessage(...messages: ServerMessage[]) {\n    this.sendMessage(\n      createWebSocketMessage({\n        type: \"serverMessage\",\n        data: createServerMessage(...messages),\n      })\n    );\n  }\n\n  #sendWebSocketMessage(...messages: WebSocketMessage[]) {\n    this.sendMessage(createWebSocketMessage(...messages));\n  }\n\n  // WEBSOCKET EVENTS\n  #boundWebSocketEventListeners: { [eventType: string]: Function } = {\n    open: this.#onWebSocketOpen.bind(this),\n    message: this.#onWebSocketMessage.bind(this),\n    close: this.#onWebSocketClose.bind(this),\n    error: this.#onWebSocketError.bind(this),\n  };\n\n  #onWebSocketOpen(event: ws.Event) {\n    _console.log(\"webSocket.open\", event);\n    this.#pingTimer.start();\n    //this._connectionStatus = \"connected\";\n    this._sendRequiredMessages();\n  }\n  async #onWebSocketMessage(event: ws.MessageEvent) {\n    _console.log(\"webSocket.message\", event);\n    //this.#pingTimer.restart();\n    //@ts-expect-error\n    const arrayBuffer = await event.data.arrayBuffer();\n    const dataView = new DataView(arrayBuffer);\n    this.#parseWebSocketMessage(dataView);\n  }\n  #onWebSocketClose(event: ws.CloseEvent) {\n    _console.log(\"webSocket.close\", event);\n\n    this._connectionStatus = \"notConnected\";\n\n    Object.entries(this.devices).forEach(([id, device]) => {\n      const connectionManager =\n        device.connectionManager! as ClientConnectionManager;\n      connectionManager.isConnected = false;\n    });\n\n    this.#pingTimer.stop();\n    if (this.reconnectOnDisconnection) {\n      setTimeout(() => {\n        this.reconnect();\n      }, webSocketReconnectTimeout);\n    }\n  }\n  #onWebSocketError(event: ws.ErrorEvent) {\n    _console.error(\"webSocket.error\", event);\n  }\n\n  // PARSING\n  #parseWebSocketMessage(dataView: DataView) {\n    parseMessage(\n      dataView,\n      WebSocketMessageTypes,\n      this.#onServerMessage.bind(this),\n      null,\n      true\n    );\n  }\n\n  #onServerMessage(messageType: WebSocketMessageType, dataView: DataView) {\n    switch (messageType) {\n      case \"ping\":\n        this.#pong();\n        break;\n      case \"pong\":\n        break;\n      case \"serverMessage\":\n        this.parseMessage(dataView);\n        break;\n      default:\n        _console.error(`uncaught messageType \"${messageType}\"`);\n        break;\n    }\n  }\n\n  // PING\n  #pingTimer = new Timer(this.#ping.bind(this), webSocketPingTimeout);\n  #ping() {\n    this.#sendWebSocketMessage(\"ping\");\n  }\n  #pong() {\n    this.#sendWebSocketMessage(\"pong\");\n  }\n}\n\nexport default WebSocketClient;\n","export {\n  setAllConsoleLevelFlags,\n  setConsoleLevelFlagsForType,\n} from \"./utils/Console.ts\";\nexport * as Environment from \"./utils/environment.ts\";\nexport { Vector2, Vector3, Quaternion, Euler } from \"./utils/MathUtils.ts\";\n\nexport {\n  default as Device,\n  DeviceEvent,\n  DeviceEventMap,\n  DeviceEventListenerMap,\n  BoundDeviceEventListeners,\n} from \"./Device.ts\";\nexport {\n  default as DeviceManager,\n  DeviceManagerEvent,\n  DeviceManagerEventMap,\n  DeviceManagerEventListenerMap,\n  BoundDeviceManagerEventListeners,\n} from \"./DeviceManager.ts\";\n\nexport { DeviceInformation } from \"./DeviceInformationManager.ts\";\nexport {\n  DeviceType,\n  DeviceTypes,\n  MinNameLength,\n  MaxNameLength,\n  Sides,\n  Side,\n} from \"./InformationManager.ts\";\nexport {\n  MinWifiSSIDLength,\n  MaxWifiSSIDLength,\n  MinWifiPasswordLength,\n  MaxWifiPasswordLength,\n} from \"./WifiManager.ts\";\nexport {\n  SensorType,\n  SensorTypes,\n  ContinuousSensorType,\n  ContinuousSensorTypes,\n} from \"./sensor/SensorDataManager.ts\";\nexport {\n  MaxSensorRate,\n  SensorRateStep,\n  SensorConfiguration,\n} from \"./sensor/SensorConfigurationManager.ts\";\n\nexport {\n  DefaultNumberOfPressureSensors,\n  PressureData,\n} from \"./sensor/PressureSensorDataManager.ts\";\nexport { CenterOfPressure } from \"./utils/CenterOfPressureHelper.ts\";\nexport {\n  VibrationConfiguration,\n  VibrationLocation,\n  VibrationLocations,\n  VibrationType,\n  VibrationTypes,\n  MaxNumberOfVibrationWaveformEffectSegments,\n  MaxVibrationWaveformSegmentDuration,\n  MaxVibrationWaveformEffectSegmentDelay,\n  MaxVibrationWaveformEffectSegmentLoopCount,\n  MaxNumberOfVibrationWaveformSegments,\n  MaxVibrationWaveformEffectSequenceLoopCount,\n} from \"./vibration/VibrationManager.ts\";\nexport {\n  VibrationWaveformEffect,\n  VibrationWaveformEffects,\n} from \"./vibration/VibrationWaveformEffects.ts\";\n\nexport {\n  FileType,\n  FileTypes,\n  FileTransferDirection,\n  FileTransferDirections,\n} from \"./FileTransferManager.ts\";\nexport {\n  TfliteSensorType,\n  TfliteSensorTypes,\n  TfliteTask,\n  TfliteTasks,\n  TfliteFileConfiguration as TfliteFileConfiguration,\n} from \"./TfliteManager.ts\";\n\nexport {\n  CameraConfiguration,\n  CameraCommand,\n  CameraCommands,\n  CameraConfigurationType,\n  CameraConfigurationTypes,\n} from \"./CameraManager.ts\";\n\nexport {\n  MicrophoneConfiguration,\n  MicrophoneCommand,\n  MicrophoneCommands,\n  MicrophoneConfigurationType,\n  MicrophoneConfigurationTypes,\n  MicrophoneConfigurationValues,\n} from \"./MicrophoneManager.ts\";\n\nexport {\n  DisplayBrightness,\n  DisplayBrightnesses,\n  DisplaySize,\n  DisplayBitmapColorPair,\n  DisplayPixelDepths,\n  DefaultNumberOfDisplayColors,\n  MinSpriteSheetNameLength,\n  MaxSpriteSheetNameLength,\n  DisplayBitmap,\n  DisplaySpriteColorPair,\n  DisplayWireframeEdge,\n  DisplayWireframe,\n  DisplayBezierCurveType,\n  DisplayBezierCurveTypes,\n} from \"./DisplayManager.ts\";\n\nexport { wait, Timer } from \"./utils/Timer.ts\";\n\nexport {\n  DisplaySegmentCap,\n  DisplaySegmentCaps,\n  DisplayAlignment,\n  DisplayAlignments,\n  DisplayDirection,\n  DisplayDirections,\n} from \"./utils/DisplayContextState.ts\";\n\nexport {\n  maxDisplayScale,\n  DisplayColorRGB,\n  pixelDepthToNumberOfColors,\n  displayCurveTypeToNumberOfControlPoints,\n  mergeWireframes,\n  intersectWireframes,\n  isWireframePolygon,\n} from \"./utils/DisplayUtils.ts\";\n\n/** BROWSER_START */\nexport {\n  svgToDisplayContextCommands,\n  svgToSprite,\n  svgToSpriteSheet,\n  isValidSVG,\n  getSvgStringFromDataUrl,\n} from \"./utils/SvgUtils.ts\";\n/** BROWSER_END */\n\nexport {\n  DisplayContextCommand,\n  DisplayContextCommandType,\n  DisplayContextCommandTypes,\n  DisplaySpriteContextCommandType,\n  DisplaySpriteContextCommandTypes,\n} from \"./utils/DisplayContextCommand.ts\";\n\nexport {\n  simplifyPoints,\n  simplifyCurves,\n  simplifyPointsAsCubicCurveControlPoints,\n} from \"./utils/PathUtils.ts\";\n\nexport {\n  DisplaySprite,\n  DisplaySpriteSheet,\n  DisplaySpriteSheetPalette,\n  DisplaySpritePaletteSwap,\n  parseFont,\n  getFontUnicodeRange,\n  stringToSprites,\n  fontToSpriteSheet,\n  getFontMetrics,\n  DisplaySpriteSubLine,\n  DisplaySpriteLine,\n  DisplaySpriteLines,\n  getFontMaxHeight,\n  getMaxSpriteSheetSize,\n  englishRegex,\n  FontToSpriteSheetOptions,\n} from \"./utils/DisplaySpriteSheetUtils.ts\";\n\n/** BROWSER_START */\nexport {\n  default as DisplayCanvasHelper,\n  DisplayCanvasHelperEvent,\n  DisplayCanvasHelperEventMap,\n  DisplayCanvasHelperEventListenerMap,\n} from \"./utils/DisplayCanvasHelper.ts\";\n/** BROWSER_END */\n\n/** BROWSER_START */\nexport { Font, Glyph } from \"opentype.js\";\n/** BROWSER_END */\n\n/** BROWSER_START */\nexport {\n  resizeAndQuantizeImage,\n  quantizeImage,\n  imageToSprite,\n  imageToSpriteSheet,\n  canvasToSprite,\n  canvasToSpriteSheet,\n  resizeImage,\n  imageToBitmaps,\n  canvasToBitmaps,\n} from \"./utils/DisplayBitmapUtils.ts\";\n/** BROWSER_END */\n\nexport { rgbToHex, hexToRGB } from \"./utils/ColorUtils.ts\";\n\nexport {\n  default as DevicePair,\n  DevicePairEvent,\n  DevicePairEventMap,\n  DevicePairEventListenerMap,\n  BoundDevicePairEventListeners,\n  DevicePairType,\n  DevicePairTypes,\n} from \"./devicePair/DevicePair.ts\";\n\nimport { addEventListeners, removeEventListeners } from \"./utils/EventUtils.ts\";\nexport const EventUtils = {\n  addEventListeners,\n  removeEventListeners,\n};\n\nimport { throttle, debounce } from \"./utils/ThrottleUtils.ts\";\nexport const ThrottleUtils = {\n  throttle,\n  debounce,\n};\n\nexport { DiscoveredDevice } from \"./scanner/BaseScanner.ts\";\n/** NODE_START */\nexport { default as Scanner } from \"./scanner/Scanner.ts\";\nexport { default as WebSocketServer } from \"./server/websocket/WebSocketServer.ts\";\nexport { default as UDPServer } from \"./server/udp/UDPServer.ts\";\n/** NODE_END */\n/** BROWSER_START */\nexport { default as WebSocketClient } from \"./server/websocket/WebSocketClient.ts\";\n/** BROWSER_END */\n/** LS_START */\nexport { default as WebSocketClient } from \"./server/websocket/WebSocketClient.ts\";\n/** LS_END */\n\nexport { default as RangeHelper, Range } from \"./utils/RangeHelper.ts\";\n","export function throttle<T extends (...args: any[]) => void>(\n  fn: T,\n  interval: number,\n  trailing = false\n): (...args: Parameters<T>) => void {\n  let lastTime = 0;\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n  let lastArgs: Parameters<T> | null = null;\n\n  return function (...args: Parameters<T>) {\n    const now = Date.now();\n    const remaining = interval - (now - lastTime);\n\n    if (remaining <= 0) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      lastTime = now;\n      fn(...args);\n    } else if (trailing) {\n      lastArgs = args;\n      if (!timeout) {\n        timeout = setTimeout(() => {\n          lastTime = Date.now();\n          timeout = null;\n          if (lastArgs) {\n            fn(...lastArgs);\n            lastArgs = null;\n          }\n        }, remaining);\n      }\n    }\n  };\n}\n\nexport function debounce<T extends (...args: any[]) => void>(\n  fn: T,\n  interval: number,\n  callImmediately = false\n): (...args: Parameters<T>) => void {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n\n  return function (...args: Parameters<T>) {\n    const callNow = callImmediately && !timeout;\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(() => {\n      timeout = null;\n      if (!callImmediately) {\n        fn(...args);\n      }\n    }, interval);\n\n    if (callNow) {\n      fn(...args);\n    }\n  };\n}\n"],"names":["isInDev","isInBrowser","window","document","isInNode","process","versions","node","userAgent","navigator","isBluetoothSupported","Boolean","bluetooth","isInBluefy","test","isInWebBLE","isAndroid","isSafari","isIOS","isMac","isInLensStudio","__console","log","args","wrapWithLocation","fn","functionPath","stack","Error","match","callerLine","getCallerFunctionPath","assert","warn","data","table","emptyFunction","error","table$1","bind","Console","static","constructor","type","consoles","this","levelFlags","setLevelFlags","setLevelFlagsForType","create","condition","message","assertWithError","value","enumeration","includes","assertRangeWithError","name","min","max","createConsole","setConsoleLevelFlagsForType","setAllConsoleLevelFlags","setAllLevelFlags","_console$J","EventDispatcher","target","validEventTypes","isValidEventType","updateEventListeners","listeners","filter","listenerObj","shouldRemove","find","listenerObject","listener","once","options","push","length","removeEventListeners","forEach","console","waitForEvent","Promise","resolve","addEventListener","event","_console$I","async","wait","delay","callback","assertTypeWithError","newCallback","isRunning","interval","newInterval","intervalId","undefined","setInterval","clearInterval","start","startImmediately","crc32ForByte","r","j","crc32Table","Uint32Array","i","crc32","dataIterable","dataBytes","Uint8Array","byteLength","crcLowByte","crc","dataByte","_TextEncoder","_TextDecoder","TextEncoder","encode","string","from","encoding","TextDecoder","decode","Array","map","String","fromCharCode","textEncoder","textDecoder","_console$H","concatenateArrayBuffers","arrayBuffers","arrayBuffer","Math","floor","number","boolean","stringToArrayBuffer","ArrayBuffer","buffer","DataView","object","objectToArrayBuffer","uint8Array","byteOffset","end","dataView","begin","slice","getFileBuffer","file","fileBuffer","response","fetch","File","UInt8ByteBuffer","autoBind","self","include","exclude","key","pattern","some","properties","Set","Reflect","ownKeys","add","getPrototypeOf","Object","prototype","getAllProperties","descriptor","getOwnPropertyDescriptor","_console$G","FileTransferMessageTypes","FileTypes","FileTransferStatuses","FileTransferCommands","FileTransferEventTypes","RequiredFileTransferMessageTypes","FileTransferManager","sendMessage","eventDispatcher","dispatchEvent","removeEventListener","assertValidType","assertEnumWithError","isValidType","assertValidTypeEnum","typeEnum","assertValidStatusEnum","statusEnum","assertValidCommand","command","fileTypes","parseFileTypes","MaxLength","maxLength","_a$5","parseMaxLength","updateMaxLength","assertValidLength","parseType","updateType","setType","newType","sendImmediately","promise","parseLength","updateLength","setLength","newLength","checksum","parseChecksum","updateChecksum","setChecksum","newChecksum","setCommand","commandEnum","status","parseStatus","updateStatus","receivedBlocks","isCancelling","bytesTransferred","fileTransferStatus","progress","bytesReceived","isServerSide","direction","fileType","messageType","parseBlock","parseBytesTransferred","send","override","fileLength","promises","all","sendBlock","mtu","offset","slicedBuffer","cancel","newIsServerSide","messages","_console$F","Uint16Max","parseTimestamp","now","Date","timestamp","getVector2DistanceSquared","a","b","getVector2Midpoint","getVector3Length","vector","sqrt","x","y","z","clamp","degToRad","deg","twoPi","PI","normalizeRadians","rad","pointInPolygon","pt","polygon","xi","yi","xj","yj","inside","initialRange","Infinity","span","RangeHelper","range","structuredClone","newMin","newMax","update","normalization","CenterOfPressureHelper","reset","centerOfPressure","getNormalization","weightByRange","_console$E","PressureSensorTypes","ContinuousPressureSensorTypes","DefaultNumberOfPressureSensors","PressureSensorDataManager","positions","numberOfSensors","parsePositions","getUint8","arrayLength","objectOrCallback","sensorRangeHelpers","fill","_","index","normalizedSumRangeHelper","centerOfPressureHelper","rangeHelper","pressure","sensors","scaledSum","normalizedSum","weightedValue","scaledValue","center","sensor","position","normalizedCenter","_console$D","ActivityTypes","DeviceOrientations","MotionSensorDataManager","getInt16","quaternion","heading","pitch","roll","euler","parseStepCounter","stepCount","parseActivity","activityBitfield","toString","activity","activityType","parseDeviceOrientation","deviceOrientation","BarometerSensorTypes","ContinuousBarometerSensorTypes","_console$C","BarometerSensorDataManager","calculcateAltitude","L","getUint32","scalar","_console$B","parseMessage","messageTypes","context","parseMessageLengthAsUint16","messageTypeEnum","messageLength","_dataView","_console$A","CameraCommands","CameraStatuses","CameraDataTypes","CameraConfigurationTypes","CameraMessageTypes","RequiredCameraMessageTypes","CameraEventTypes","CameraManager","cameraStatus","parseCameraStatus","newCameraStatus","cameraStatusIndex","updateCameraStatus","previousCameraStatus","didBuildImage","sendCameraCommand","focus","takePicture","stop","sleep","wake","parseCameraData","onCameraData","headerData","headerProgress","headerSize","imageData","imageProgress","imageSize","footerData","footerProgress","footerSize","blob","Blob","url","cameraConfiguration","availableCameraConfigurationTypes","cameraConfigurationRanges","parseCameraConfiguration","cameraConfigurationType","cameraConfigurationTypeIndex","parsedCameraConfiguration","getUint16","isCameraConfigurationRedundant","every","newCameraConfiguration","setCameraConfigurationData","assertAvailableCameraConfigurationType","isCameraConfigurationTypeAvailable","cameraConfigurationTypeEnum","createData","cameraConfigurationTypes","_a$4","AssertValidCameraConfigurationType","setUint16","interleaved","sampleRate","numChannels","view","writeString","setUint32","wavBuffer","setUint8","charCodeAt","_console$z","MicrophoneCommands","MicrophoneStatuses","MicrophoneBitDepths","MicrophoneMessageTypes","MicrophoneConfigurationValues","bitDepth","RequiredMicrophoneMessageTypes","MicrophoneEventTypes","MicrophoneManager","microphoneStatus","parseMicrophoneStatus","newMicrophoneStatus","microphoneStatusIndex","updateMicrophoneStatus","previousMicrophoneStatus","sendMicrophoneCommand","vad","toggle","parseMicrophoneData","samples","Float32Array","numberOfSamples","sample","getInt8","microphoneRecordingData","audioContext","gainNode","bufferSource","audioBuffer","fadeDuration","channelData","connect","playbackTime","duration","bytesPerSample","microphoneConfiguration","availableMicrophoneConfigurationTypes","parseMicrophoneConfiguration","microphoneConfigurationType","MicrophoneConfigurationTypes","microphoneConfigurationTypeIndex","values","rawValue","parsedMicrophoneConfiguration","isMicrophoneConfigurationRedundant","newMicrophoneConfiguration","setMicrophoneConfigurationData","assertAvailableMicrophoneConfigurationType","isMicrophoneConfigurationTypeAvailable","microphoneConfigurationTypeEnum","microphoneConfigurationTypes","_a$3","AssertValidMicrophoneConfigurationType","newAudioContext","mediaStreamDestination","disconnect","createMediaStreamDestination","isRecording","float32ArrayToWav","Number","_console$y","SensorTypes","ContinuousSensorTypes","SensorDataMessageTypes","RequiredPressureMessageTypes","SensorDataEventTypes","SensorDataManager","pressureSensorDataManager","motionSensorDataManager","barometerSensorDataManager","scalars","Map","sensorType","sensorTypeEnum","parseScalars","parseData","sensorTypeIndex","sensorScalar","getFloat32","parseDataCallback","get","_console$x","SensorRateStep","SensorConfigurationMessageTypes","SensorConfigurationEventTypes","SensorConfigurationManager","availableSensorTypes","assertAvailableSensorType","isSensorTypeAvailable","configuration","updateConfiguration","updatedConfiguration","isRedundant","sensorConfiguration","setConfiguration","newSensorConfiguration","clearRest","assign","zeroSensorConfiguration","setSensorConfigurationData","parse","sensorRate","parsedSensorConfiguration","assertValidSensorRate","_a$2","AssertValidSensorRate","sensorTypes","AssertValidSensorType","ZeroSensorConfiguration","clearSensorConfiguration","_console$w","TfliteMessageTypes","TfliteEventTypes","RequiredTfliteMessageTypes","TfliteSensorTypes","TfliteManager","assertValidTask","task","TfliteTasks","assertValidTaskEnum","taskEnum","addEventListenter","parseName","updateName","setName","newName","setNameData","parseTask","updateTask","setTask","newTask","parseSampleRate","updateSampleRate","tfliteSampleRate","setSampleRate","newSampleRate","tfliteSensorType","parseSensorTypes","updateSensorTypes","tfliteSensorTypes","setSensorTypes","newSensorTypes","array","indexOf","sort","newSensorTypeEnums","isReady","parseIsReady","updateIsReady","captureDelay","parseCaptureDelay","updateCaptueDelay","tfliteCaptureDelay","setCaptureDelay","newCaptureDelay","threshold","parseThreshold","updateThreshold","setThreshold","newThreshold","inferencingEnabled","parseInferencingEnabled","updateInferencingEnabled","tfliteInferencingEnabled","setInferencingEnabled","newInferencingEnabled","toggleInferencingEnabled","enableInferencing","disableInferencing","parseInference","inference","maxValue","maxIndex","classes","maxClass","classValues","_console$v","DeviceInformationTypes","DeviceInformationEventTypes","DeviceInformationManager","information","isComplete","partialDeviceInformation","deviceInformationName","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","source","vendorId","serialNumber","_console$u","DeviceTypes","MinNameLength","MaxNameLength","InformationMessageTypes","InformationEventTypes","InformationManager","isCharging","updateIsCharging","updatedIsCharging","batteryCurrent","getBatteryCurrent","updateBatteryCurrent","updatedBatteryCurrent","id","updateId","updatedId","updatedName","assertValidDeviceType","assertValidDeviceTypeEnum","updatedType","newTypeEnum","setTypeData","setTypeEnum","isInsole","isGlove","side","updateMtu","newMtu","isCurrentTimeSet","onCurrentTime","currentTime","abs","setCurrentTime","setBigUint64","BigInt","connectionType","getBigUint64","VibrationWaveformEffects","_console$t","VibrationMessageTypes","VibrationEventTypes","MaxNumberOfVibrationWaveformEffectSegments","MaxVibrationWaveformSegmentDuration","MaxVibrationWaveformEffectSegmentDelay","MaxVibrationWaveformEffectSegmentLoopCount","MaxNumberOfVibrationWaveformSegments","MaxVibrationWaveformEffectSequenceLoopCount","VibrationManager","verifyLocation","location","VibrationLocations","verifyLocations","locations","assertNonEmptyArray","createLocationsBitmask","locationsBitmask","locationIndex","isArray","verifyWaveformEffect","waveformEffect","verifyWaveformEffectSegment","waveformEffectSegment","effect","loopCount","verifyWaveformEffectSegmentLoopCount","waveformEffectSegmentLoopCount","verifyWaveformEffectSegments","waveformEffectSegments","verifyWaveformEffectSequenceLoopCount","waveformEffectSequenceLoopCount","verifyWaveformSegment","waveformSegment","amplitude","verifyWaveformSegments","waveformSegments","createWaveformEffectsData","includeAllWaveformEffectSegments","includeAllWaveformEffectSegmentLoopCounts","dataArray","bitOffset","verifyVibrationType","vibrationType","VibrationTypes","vibrationTypeIndex","triggerVibration","vibrationConfigurations","triggerVibrationData","vibrationConfiguration","vibrationLocations","segments","onVibrationLocations","_console$s","MinWifiSSIDLength","MaxWifiSSIDLength","MinWifiPasswordLength","MaxWifiPasswordLength","WifiMessageTypes","RequiredWifiMessageTypes","WifiEventTypes","WifiManager","isWifiAvailable","updateIsWifiAvailable","updatedIsWifiAvailable","wifiSSID","updateWifiSSID","updatedWifiSSID","wifiConnectionEnabled","newWifiSSID","setWifiSSIDData","wifiPassword","updateWifiPassword","updatedWifiPassword","newWifiPassword","setWifiPasswordData","updateWifiConnectionEnabled","setWifiConnectionEnabled","newWifiConnectionEnabled","toggleWifiConnection","enableWifiConnection","disableWifiConnection","isWifiConnected","updateIsWifiConnected","updatedIsWifiConnected","ipAddress","updateIpAddress","updatedIpAddress","isWifiSecure","updateIsWifiSecure","updatedIsWifiSecure","ssid","password","_console$r","hexToRGB","hex","parseInt","substring","g","blackColor","stringToRGB","startsWith","colorName","temp","style","color","body","appendChild","removeChild","colorNameToRGB","rgbToHex","v","toHex","colorDistanceSq","defaultKMeansOptions","useInputColors","maxIterations","DisplayAlignments","DisplayAlignmentDirections","DisplayDirections","DefaultDisplayContextState","backgroundColorIndex","fillColorIndex","lineColorIndex","ignoreFill","ignoreLine","fillBackground","lineWidth","rotation","horizontalAlignment","verticalAlignment","segmentStartCap","segmentEndCap","segmentStartRadius","segmentEndRadius","cropTop","cropRight","cropBottom","cropLeft","rotationCropTop","rotationCropRight","rotationCropBottom","rotationCropLeft","bitmapScaleX","bitmapScaleY","spriteScaleX","spriteScaleY","spriteSheetName","spritesLineHeight","spritesDirection","spritesLineDirection","spritesSpacing","spritesLineSpacing","spritesAlignment","spritesLineAlignment","isDirectionPositive","isDirectionHorizontal","deepEqual","obj1","obj2","keys1","keys2","_console$q","DisplayContextStateHelper","state","isSegmentUniform","diff","other","differences","newState","_console$p","rotationRad","rotationDeg","minDisplayScale","maxDisplayScale","formatScale","bitmapScale","roundScale","step","round","assertValidSegmentCap","segmentCap","DisplaySegmentCaps","assertValidDisplayBrightness","displayBrightness","DisplayBrightnesses","assertValidColorValue","assertValidColor","assertValidOpacity","DisplayCropDirections","DisplayCropDirectionToStateKey","top","right","bottom","left","DisplayCropDirectionToCommandType","DisplayRotationCropDirectionToStateKey","DisplayRotationCropDirectionToCommandType","DisplayAlignmentDirectionToCommandType","horizontal","vertical","DisplayAlignmentDirectionToStateKey","pixelDepthToNumberOfColors","pixelDepth","pixelDepthToPixelsPerByte","numberOfColorsToPixelDepth","numberOfColors","DisplayPixelDepths","DisplayBitmapScaleDirectionToCommandType","DisplaySpriteScaleDirectionToCommandType","assertValidAlignment","alignment","assertValidDirection","displayCurveTypeToNumberOfControlPoints","segment","quadratic","cubic","assertValidNumberOfControlPoints","curveType","controlPoints","isPath","numberOfControlPoints","assertValidPathNumberOfControlPoints","assertValidPath","curves","curve","points","edges","edge","startIndex","endIndex","_edges","pointIndices","splice","point","mergeWireframes","wireframe","pointIndexOffset","trimWireframe","intersectWireframes","ignoreDirection","bPointIndex","aPointIndices","aPointIndex","bPointIndices","bStartIndex","bEndIndex","startPoint","endPoint","trimmedStartIndex","trimmedPoints","trimmedEndIndex","trimmedEdge","trimmedEdgeIndex","trimmedEdges","getPointDataType","pointDataType","serializePoints","DisplayPointDataTypes","pointDataSize","displayPointDataTypeToSize","dataViewLength","setInt8","RgbQuant","opts","boxSize","palLocked","histogram","idxrgb","palette","idxi32","i32idx","i32rgb","reIndex","colorDist","distManhattan","distEuclidean","rgb","i32","HueStats","numGroups","minCols","stats","num","cols","groupsFull","img","width","colorStats1D","buf32","colorStats2D","reduce","retType","dithKern","dithSerp","out32","dither","getImageData","len","out","kernel","serpentine","FloydSteinberg","FalseFloydSteinberg","Stucki","Atkinson","Jarvis","Burkes","Sierra","TwoSierra","SierraLite","ds","kernels","height","dir","lni","xend","idx","r1","g1","b1","r2","i32x","g2","b2","dithDelta","er","eg","eb","lni2","y1","r4","histG","sorted","obj","keys","sortedHashKeys","initColors","freq","pos","hueStats","inject","reducePal","noSort","cacheHistogram","tuples","buildPal","keep","uniques","pruned","prunePal","colors","thold","initDist","palLen","pxi","pxj","i32j","dist","memDist","distIncr","k","col","check","boxH","area","boxW","boxes","wrem","wid","w0","hrem","hgt","h0","bxs","w","h","yend","makeBoxes","box","effc","boxPxls","histL","cnt","incr","i0","call","idxB","rgbA","idxA","rgbB","hslA","rgb2hsl","hslB","hueA","hueGroup","hueGroups","hueDiff","lumDiff","satDiff","useCache","cacheFreq","nearestIndex","hg","gr","typeOf","Pr","Pg","rgb0","rgb1","manhMax","Pb","rd","gd","bd","s","d","hue","segs","seg","haf","mid","val","split","join","ord","can","createElement","naturalWidth","naturalHeight","ctx","getContext","canvas","imgd","buf8","module","exports","commonjsGlobal","_console$o","DisplayContextCommandTypes","DisplaySpriteContextCommandTypes","serializeContextCommand","displayManager","colorIndex","colorRGB","colorHex","assertValidColorIndex","opacity","opacities","assertValidLineWidth","alignmentEnum","isRadians","formatRotation","segmentCapEnum","segmentRadius","bitmapColorIndex","bitmapColorPairs","bitmapColorIndices","setInt16","spriteColorIndex","spriteColorPairs","spriteColorIndices","spriteScale","offsetX","offsetY","borderRadius","numberOfSides","pointsDataView","edgesDataView","controlPoint","allControlPoints","typesDataView","typeByteIndex","typeValue","controlPointsDataViews","controlPointsDataView","controlPointsBuffer","headerDataView","radius","startAngle","angleOffset","Int16Max","radiusX","radiusY","assertValidBitmap","bitmap","pixels","bitmapData","pixelDataLength","getBitmapNumberOfBytes","pixelsPerByte","byteSlot","pixelIndex","pixelBitWidth","pixelDepthToPixelBitWidth","shift","byteIndex","getBitmapData","spriteSheetIndex","spriteSerializedLines","spriteLines","subSpriteLine","subLineSpriteIndicesDataView","spriteIndex","subLineHeaderDataView","concatenatedSubLineArrayBuffers","subLineArrayBuffers","concatenatedLineArrayBuffers","lineArrayBuffers","contextCommandDependencies","appendContextCommandDependencyPair","set","defineProperty","codePointAt","$defineProperty","result","TypeError","size","second","first","configurable","writable","Tree","Uint16Array","trans","Data","dest","sourceIndex","tag","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","base","delta","sum","offs","tinf_build_tree","t","off","tinf_getbit","bit","tinf_read_bits","tinf_decode_symbol","cur","tinf_decode_trees","lt","dt","hlit","hdist","hclen","clen","sym","prev","tinf_inflate_block_data","tinf_inflate_uncompressed_block","tinf_build_fixed_trees","tinyInflate","bfinal","res","subarray","derive","v0","v1","v2","v3","pow","BoundingBox","x1","NaN","x2","y2","Path","commands","stroke","strokeWidth","fail","argument","predicate","isEmpty","isNaN","addPoint","addX","addY","addBezier","x0","y0","p0","p1","p2","p3","c","b2ac","t1","t2","addQuad","cp1x","cp1y","cp2x","cp2y","moveTo","lineTo","curveTo","bezierCurveTo","quadTo","quadraticCurveTo","close","closePath","extend","pathOrCommands","apply","getBoundingBox","startX","startY","prevX","prevY","cmd","draw","beginPath","fillStyle","strokeStyle","toPathData","decimalPlaces","floatToString","toFixed","packValues","arguments$1","arguments","toSVG","svg","toDOMElement","temporaryPath","newPath","createElementNS","setAttribute","LIMIT32","decode$1","encode$1","sizeOf","constant","BYTE","CHAR","CHARARRAY","USHORT","SHORT","UINT24","ULONG","LONG","FIXED","FWORD","UFWORD","LONGDATETIME","TAG","Card8","Card16","OffSize","SID","NUMBER16","NUMBER32","NUMBER","m","exec","epsilon","parseFloat","nibbles","ii","i$1","ii$1","substr","REAL","NAME","STRING","codePoints","numChars","numBytes","codepoint","UTF16","eightBitMacEncodings","macintosh","dataLength","macEncodingCacheKeys","macEncodingTableCache","WeakMap","isByteEncodable","encodeVarDeltaRunAsZeroes","deltas","runLength","numDeltas","encodeVarDeltaRunAsBytes","encodeVarDeltaRunAsWords","e","cacheKey","cachedTable","decodingTable","encodingTable","getMacEncodingTable","str","MACSTRING","offsets","l","OBJECT","encodedOffsets","offSize","offsetEncoder","encodedOffset","concat","INDEX","OPERAND","OPERATOR","DICT","OP","wmm","Table","tableName","fields","field","optionKeys","ushortList","itemName","list","count","tableList","records","itemCallback","recordList","Coverage","coverageTable","format","glyphs","ranges","RangeRecord","ScriptList","scriptListTable","scriptRecord","script","defaultLangSys","reqFeatureIndex","featureIndexes","langSysRecords","langSysRecord","langSys","FeatureList","featureListTable","featureRecord","feature","featureParams","lookupListIndexes","LookupList","lookupListTable","subtableMakers","lookupTable","subtableCallback","lookupType","lookupFlag","subtables","cachedValue","ops","op","CHARSTRING","encodingFunction","sizeOfFunction","subtableOffsets","bytes","o","TABLE","RECORD","LITERAL","Record","getByte","getUShort","getULong","getFixed","typeOffsets","byte","uShort","short","uLong","fixed","longDateTime","Parser","relativeOffset","parseByte","parseChar","parseCard8","parseUShort","parseCard16","parseSID","parseOffset16","parseShort","parseF2Dot14","parseULong","parseOffset32","parseFixed","parseString","parseTag","parseLongDateTime","parseVersion","minorBase","major","minor","skip","amount","parseULongList","parseOffset16List","parseUShortList","parseShortList","parseByteList","parseList","parseList32","parseRecordList","recordDescription","rec","fieldName","fieldType","parseRecordList32","parseStruct","description","struct","parseValueRecord","valueFormat","valueRecord","xPlacement","yPlacement","xAdvance","yAdvance","xPlaDevice","yPlaDevice","xAdvDevice","yAdvDevice","parseValueRecordList","valueCount","parsePointer","structOffset","parsePointer32","parseListOfLists","subOffsets","subList","parseCoverage","startOffset","parseClassDef","startGlyph","classId","list32","recordList32","pointer","pointer32","offset16","uShortList","offset32","uLongList","coverage","classDef","langSysTable","reserved","parseScriptList","parseFeatureList","parseLookupList","lookupTableParsers","useMarkFilteringSet","markFilteringSet","parseFeatureVariationsList","majorVersion","minorVersion","conditionSetOffset","featureTableSubstitutionOffset","getCard8","getCard16","getShort","getTag","getOffset","getBytes","endOffset","bytesToString","addSegment","code","glyphIndex","cmap","version","numTables","platformId","encodingId","p","groupCount","language","glyphIndexMap","startCharCode","endCharCode","startGlyphId","parseCmapTableFormat12","segCount","endCountParser","startCountParser","idDeltaParser","idRangeOffsetParser","glyphIndexOffset","endCount","startCount","idDelta","idRangeOffset","parseCmapTableFormat4","make","isPlan0Only","unicode","cmapTable","glyph","unicodes","addTerminatorSegment","segCountToRemove","endCounts","startCounts","idDeltas","idRangeOffsets","glyphIds","cmap12Groups","glyphId","segCountX2","searchRange","entrySelector","rangeShift","cmap4Length","cmap12Length","cmap12Offset","cffStandardStrings","cffStandardEncoding","cffExpertEncoding","standardNames","DefaultEncoding","font","CmapEncoding","CffEncoding","charset","GlyphNames","post","names","numberOfGlyphs","glyphNameIndex","addGlyphNames","opt","lowMemory","_IndexToUnicodeMap","tables","charCodes","addGlyphNamesToUnicodeMap","addUnicode","cffEncoding","isCIDFont","glyphNames","glyphIndexToName","addGlyphNamesAll","charToGlyphIndex","charName","nameToGlyphIndex","gid","line","Glyph","bindConstructorValues","defineDependentProperty","externalName","internalName","path","newValue","enumerable","GlyphSet","unitsPerEm","_path","xMin","yMin","xMax","yMax","advanceWidth","getPath","fontSize","hPoints","xScale","yScale","hinting","getCommands","scale","getContours","contours","currentContour","lastPointOfContour","getMetrics","xCoords","yCoords","metrics","leftSideBearing","isFinite","rightSideBearing","drawPoints","drawCircles","arc","blueCircles","redCircles","drawMetrics","_push","unicodeObj","_hmtxTableData","loader","glyphset","glyphLoader","ttfGlyphLoader","parseGlyph","buildPath","cffGlyphLoader","parseCFFCharstring","charstring","equals","calcCFFSubroutineBias","subrs","parseCFFIndex","conversionFn","objectOffset","objects","offsetSize","parseOperand","parser","b0","lookup","n1","n2","parseFloatOperand","parseCFFDict","entries","operands","hasOwnProperty","entriesToObject","getCFFString","strings","interpretDict","dict","meta","newDict","TOP_DICT_META","PRIVATE_DICT_META","parseCFFTopDict","parseCFFPrivateDict","gatherCFFTopDicts","cffIndex","topDictArray","iTopDict","topDict","_subrs","_subrsBias","_defaultWidthX","_nominalWidthX","privateSize","private","privateOffset","privateDict","defaultWidthX","nominalWidthX","subrIndex","_privateDict","c1x","c1y","c2x","c2y","subrsBias","nStems","haveWidth","open","fdIndex","cff","_fdSelect","fdDict","_fdArray","newContour","parseStems","b3","b4","codeIndex","subrCode","jpx","jpy","c3x","c3y","c4x","c4y","pop","gsubrsBias","gsubrs","encodeString","sid","makeDict","attrs","entry","makeTopDict","makeTopDictIndex","topDicts","glyphToOps","dx","dy","_13","_23","dx1","dy1","dx2","dy2","header","formatMajor","formatMinor","parseCFFHeader","nameIndex","topDictIndex","stringIndex","globalSubrIndex","ros","fdArrayOffset","fdArray","fdSelectOffset","fdSelect","fdArrayIndex","nGlyphs","fdArrayCount","iGid","next","nRanges","iRange","parseCFFFDSelect","numGlyphs","charStringsIndex","privateDictOffset","subrOffset","parseCFFIndexLowMemory","charStrings","i$2","parseCFFCharset","enc","nCodes","nLeft","parseCFFEncoding","charString","getCffIndexObject","fontScale","fullName","familyName","weight","weightName","fontBBox","fontMatrix","fontNames","makeNameIndex","postScriptName","charsets","glyphSID","makeCharsets","makeCharStringsIndex","makePrivateDict","makeStringIndex","head","fontRevision","checkSumAdjustment","magicNumber","flags","created","modified","macStyle","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","getTime","createdTimestamp","hhea","ascender","descender","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfHMetrics","hmtx","numMetrics","parseHmtxTableOnLowMemory","parseHmtxTableAll","ltag","tags","stringPool","stringPoolOffset","tableVersion","numTags","maxp","maxPoints","maxContours","maxCompositePoints","maxCompositeContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","nameTableNames","macLanguages","macLanguageToScript","windowsLanguages","getLanguageCode","platformID","languageID","utf16","macScriptEncodings","macLanguageEncodings","getEncoding","encodingID","reverseDict","makeNameRecord","nameID","addStringToPool","pool","needle","haystack","needleLength","limit","loop","findSubArray","_name","stringOffset","property","text","translations","nameIDs","namesWithNumericKeys","nameTableIds","macLanguageIds","windowsLanguageIds","nameRecords","lang","macPlatform","macLanguage","macScript","macEncoding","macName","macNameOffset","winLanguage","winName","winNameOffset","unicodeRanges","os2","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","achVendID","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefaultChar","usBreakChar","usMaxContent","getUnicodeRange","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","nameLength","subtableParsers","substFormat","deltaGlyphId","substitute","sequences","alternateSets","ligatureSets","ligGlyph","components","lookupRecordDesc","sequenceIndex","lookupListIndex","ruleSets","glyphCount","substCount","input","lookupRecords","classSets","coverages","chainRuleSets","backtrack","lookahead","backtrackClassDef","inputClassDef","lookaheadClassDef","chainClassSet","backtrackCoverage","inputCoverage","lookaheadCoverage","extensionLookupType","extensionParser","extension","substitutes","subtable","sequenceSet","alternateSet","ligatureSet","ligature","returnTable","chainRuleSet","chainRule","tableData","record","gsub","scripts","features","lookups","variations","numDataMaps","dataOffset","UTF8","log2","computeCheckSum","makeTableRecord","checkSum","makeSfntTable","sfnt","highestPowerOf2","recordFields","tableFields","tableLength","tableRecord","metricsForChar","chars","notFoundMetrics","average","vs","fontToTable","firstCharIndex","xMins","yMins","xMaxs","yMaxs","advanceWidths","leftSideBearings","rightSideBearings","lastCharIndex","globals","advanceWidthAvg","maxLeftSideBearing","headTable","hheaTable","maxpTable","os2Table","hasChar","hmtxTable","englishFamilyName","getEnglishName","englishStyleName","englishFullName","replace","n","uniqueID","en","preferredFamily","fontFamily","preferredSubfamily","fontSubfamily","languageTags","nameTable","ltagTable","postTable","cffTable","metaTable","metas","sfntTable","checkSumAdjusted","searchTag","arr","imin","imax","imid","binSearch","Layout","Position","Substitution","arraysEqual","ar1","ar2","getSubstFormat","defaultSubtable","nodeBufferToArrayBuffer","ab","checkArgument","expression","parseGlyphCoordinate","flag","previousValue","shortVectorBitMask","sameBitMask","numberOfContours","_xMin","_yMin","_xMax","_yMax","endPointIndices","instructionLength","instructions","numberOfCoordinates","repeatCount","i$3","onCurve","px","i$4","py","i$5","isComposite","moreComponents","component","scale01","scale10","matchedPoints","i$6","transformPoints","transform","newPoints","newPt","contourIndex","contour","curr","next2","componentGlyph","transformedPoints","firstPt","secondPt","getTable","layout","createDefaultTable","getScriptNames","getDefaultScriptName","hasLatn","getScriptTable","scr","getLangSysTable","scriptTable","getFeatureTable","featIndexes","allFeatures","params","getLookupTables","featureTable","allLookups","getGlyphClass","classDefTable","getCoverageIndex","expandCoverage","init","defaultKerningTables","getKerningTables","getKerningValue","kerningLookups","leftIndex","rightIndex","covIndex","posFormat","pairSet","pairSets","pair","secondGlyph","value1","class1","classDef1","class2","classDef2","pair$1","classRecords","gpos","getSingle","substitutions","lookupTables","sub","by","getMultiple","replacements","getAlternates","alternates","getLigatures","ligatures","ligSet","lig","addSingle","substitution","coverageGlyph","addMultiple","addAlternate","addLigature","ligComponents","ligatureTable","getFeature","instructionTable","execGlyph","execComponent","glyf","loca","parseGlyfTableOnLowMemory","parseGlyfTableAll","Hinting","_fpgmState","_prepState","_errorState","roundOff","roundToGrid","sign","roundToDoubleGrid","roundToHalfGrid","roundUpToGrid","ceil","roundDownToGrid","roundSuper","period","srPeriod","phase","srPhase","srThreshold","trunc","xUnitVector","axis","distance","o1","o2","xo","interpolate","rp1","rp2","pv","do1","do2","doa1","doa2","dm1","dm2","setRelative","normalSlope","NEGATIVE_INFINITY","rp","org","rpx","rpy","yo","rpdx","rpdy","slope","touch","xTouched","touched","untouch","yUnitVector","POSITIVE_INFINITY","yTouched","UnitVector","freeze","getUnitVector","HPoint","prevPointOnContour","nextPointOnContour","preventExtensions","pvns","fvs","nextTouched","prevTouched","HPZero","defaultState","cvCutIn","deltaBase","deltaShift","minDis","autoFlip","State","env","prog","zp0","zp1","zp2","rp0","fv","dpv","initTZone","tZone","gZone","handleElse","ins","ip","nesting","SVTCA","DEBUG","SPVTCA","SFVTCA","SPVTL","p2i","p1i","z2","z1","SFVTL","POP","MDAP","pi","z0","IUP","cp","pp","np","pLen","SHP","rpi","SHC","ci","sp","SHZ","MSIRP","MIAP","cv","cvt","GC","MD","pi2","pi1","DELTAP123","ppem","arg","mag","ROUND$1","DELTAC123","SDPVTL","PUSHB","PUSHW","MDRP_MIRP","indirect","setRp0","keepD","ro","od","cvte","rp0i","md","Token","char","activeState","ContextRange","contextName","ContextChecker","checkStart","checkEnd","openRange","ContextParams","currentIndex","current","Event","eventId","subscribers","initializeCoreEvents","events","this$1$1","coreEvents","subscribe","updateContextsRanges","Tokenizer","tokens","registeredContexts","contextCheckers","registeredModifiers","isArabicChar","isIsolatedArabicChar","isTashkeelArabicChar","isLatinChar","FeatureQuery","SubstitutionAction","action","lookupCoverage","singleSubstitutionFormat1","singleSubstitutionFormat2","substituteIndex","lookupCoverageList","coverageList","contextParams","lookupList","lookupIndex","chainingSubstitutionFormat3","lookupsCount","inputLookups","lookaheadOffset","lookaheadContext","lookaheadParams","lookaheadLookups","backtrackContext","reverse","backtrackParams","backtrackLookups","getLookupByIndex","subtable$1","getLookupMethod","getSubstitutionType","ligatureSubstitutionFormat1","ligSetIndex","decompositionSubstitutionFormat1","prepState","fpgmState","fpgm","funcs","prep","oCvt","cg","gz","cc","gLen","inhibitGridFit","pa0i","pa1i","pb0i","pb1i","pa0","pa1","pb0","pb1","x3","y3","x4","y4","div","f1","f2","cip","cprog","ipBegin","rp1i","rp2i","store","e2","e1","sel","ignoreCvt","setState","getState","stateId","inboundIndex","composeRUD","RUDs","RUD","hasFAILObject","FAIL","report","dispatch","replaceRange","silent","isTokenType","token","replaced","replaceToken","removeRange","removeToken","insertToken","registerModifier","modifierId","modifier","newToken","conditionParams","modifierParams","newStateValue","eventHandler","unsubscribe","subsId","setCurrentIndex","rangeToText","getRangeTokens","getText","on","eventName","subscriber","registerContextChecker","contextStartCheck","contextEndCheck","getContextRanges","resetContextsRanges","runContextCheck","setEndOffset","rangeId","contextChecker","tokenize","getDefaultScriptFeaturesIndexes","getScriptFeaturesIndexes","scriptTag","mapTagsToFeatures","getScriptFeatures","featuresIndexes","lookupFeature","query","getFeatureLookups","getLookupSubtables","substType","supports","supportedScript","supportedFeature","scriptFeatures","arabicWordCheck","startCheck","prevChar","endCheck","nextChar","arabicSentenceCheck","nextIsWhitespace","arabicCharAhead","SUBSTITUTIONS","subst","compsCount","applySubstitution","arabicPresentationForms","featuresTags","tokenizer","charContextParams","CONNECT","isolated","tashkeel","willConnectPrev","willConnectNext","info","getContextParams","arabicRequiredLigatures","latinWordCheck","getContextParams$1","latinLigature","Bidi","baseDir","checkId","contextChecks","tokenizeText","reverseArabicSentences","rangeTokens","checkGlyphIndexStatus","applyArabicPresentationForms","applyArabicRequireLigatures","applyLatinLigatures","Font","empty","styleName","designer","designerURL","manufacturer","manufacturerURL","license","licenseURL","copyright","trademark","weightClass","usWeightClasses","MEDIUM","widthClass","usWidthClasses","fsSelectionValues","REGULAR","supported","_hinting","outlinesFormat","addName","nameString","JSON","stringify","nameKey","makeFvarAxis","minValue","defaultValue","parseFvarAxis","makeFvarInstance","inst","axes","axisTag","coordinates","parseFvarInstance","setText","registerFeatures","supportedTags","applyFeatures","f","checkContextReady","contextId","applyFeaturesToContexts","processText","getBidiText","getTextGlyphs","indexes","deleted","charToGlyph","updateFeatures","defaultRenderOptions","stringToGlyphs","bidi","notdef","nameToGlyph","leftGlyph","rightGlyph","gposKerning","kerningPairs","kerning","forEachGlyph","letterSpacing","tracking","fullPath","gX","gY","gFontSize","glyphPath","getPaths","glyphPaths","getAdvanceWidth","validate","_this","assertNamePresent","englishName","trim","toTables","toBuffer","toArrayBuffer","intArray","download","fileName","URL","webkitURL","link","href","createObjectURL","createEvent","initEvent","fs","require","Buffer","arrayBufferToNodeBuffer","writeFileSync","ITALIC","UNDERSCORE","NEGATIVE","OUTLINED","STRIKEOUT","BOLD","USER_TYPO_METRICS","WWS","OBLIQUE","ULTRA_CONDENSED","EXTRA_CONDENSED","CONDENSED","SEMI_CONDENSED","SEMI_EXPANDED","EXPANDED","EXTRA_EXPANDED","ULTRA_EXPANDED","THIN","EXTRA_LIGHT","LIGHT","NORMAL","SEMI_BOLD","EXTRA_BOLD","BLACK","fvar","instances","offsetToData","axisCount","axisSize","instanceCount","instanceSize","instanceStart","attachList","attachPoints","caretValue","coordinate","pointindex","ligCaretList","ligGlyphs","markGlyphSets","gdef","markAttachClassDef","subtableParsers$1","posformat","valueFormat1","valueFormat2","value2","class1Count","class2Count","subtableMakers$1","kern","pairs","subtableVersion","nPairs","parseWindowsKernTable","parseMacKernTable","shortVersion","parseFn","glyphOffsets","glyphOffset","loadFromFile","readFile","err","loadFromUrl","request","XMLHttpRequest","responseType","onload","statusText","onerror","parseOpenTypeTableEntries","tableEntries","compression","uncompressTable","tableEntry","inBuffer","compressedLength","outBuffer","parseBuffer","cffTableEntry","fvarTableEntry","glyfTableEntry","gdefTableEntry","gposTableEntry","gsubTableEntry","hmtxTableEntry","kernTableEntry","locaTableEntry","nameTableEntry","metaTableEntry","signature","flavor","compLength","origLength","parseWOFFTableEntries","locaTable","locaOffsets","glyfTable","kernTable","gdefTable","gposTable","gsubTable","fvarTable","A","opentype","__proto__","_parse","load","loadFn","isUrl","reject","loadSync","readFileSync","ready","C","B","Q","E","D","G","Y","F","N","K","R","H","Z","M","W","currentScript","src","lastIndexOf","print","printErr","thisProgram","quit","wasmBinary","noExitRuntime","WebAssembly","X","HEAP8","Int8Array","HEAP16","Int16Array","HEAPU8","HEAPU16","HEAP32","Int32Array","HEAPU32","HEAPF32","HEAPF64","Float64Array","S","q","V","onAbort","RuntimeError","u","locateFile","excPtr","ptr","set_type","get_type","set_destructor","get_destructor","set_caught","get_caught","set_rethrown","get_rethrown","set_adjusted_ptr","get_adjusted_ptr","get_exception_ptr","AP","P","T","AA","ignoreDuplicateRegistrations","I","Ag","allocated","freelist","AC","AB","refcount","free","AI","allocate","AQ","fromWireType","AE","Aw","AD","AG","Ai","overloadTable","argCount","Ao","numArguments","AY","Ac","Ah","AF","AN","As","Aa","Ar","AO","AH","Ak","AW","Ay","Ad","AU","Ap","Ab","Al","AS","Am","Aq","AX","grow","BindingError","super","InternalError","has","count_emval_handles","UnboundTypeError","Ax","toWireType","argPackAdvance","readValueFromPointer","destructorFunction","AL","AK","AR","$","Function","Uint8ClampedArray","AM","Av","AJ","AZ","isVoid","At","copyWithin","An","Aj","unshift","monitorRunDependencies","instantiateWasm","then","atob","instantiate","instance","catch","__embind_initialize_bindings","Az","calledRun","onRuntimeInitialized","postRun","preRun","setStatus","setTimeout","preInit","getSqSegDist","last","sqDist","maxSqDist","sqTolerance","simplifyDPStep","simplified","simplifyDouglasPeucker","simplify","tolerance","highestQuality","prevPoint","default","_classCallCheck","Constructor","item","leftTangent","createTangent","rightTangent","fitCubic","maxError","progressCallback","bezCurve","uPrime","centerVector","toCenterTangent","fromCenterTangent","beziers","MaxIterations","_generateAndReport","generateAndReport","chordLengthParameterize","splitPoint","_generateAndReport2","prevSplit","errChange","prevErr","maths","subtract","_ref","normalize","generateBezier","paramsPrime","_computeMaxError","maxPoint","det_C0_C1","det_C0_X","det_X_C1","alpha_l","alpha_r","segLength","tmp","ux","firstPoint","parameters","mulItems","dot","vectorLen","lastPoint","addArrays","bezier","bez","denominator","squareItems","qprime","mulMatrix","qprimeprime","numerator","currU","prevU","prevP","maxDist","find_t","t_distMap","B_t_curr","B_t_dist","B_t_prev","B_parts","sumLen","param","tMin","tMax","lenMin","pointA","pointB","zs","items","arr2","divItems","tx","pA","ctrlPoly","pB","pC","pD","fitCurve","perpendicularDistance","hypot","projX","projY","rdp","cursor","isFirst","lastCommand","sampled","steps","sampleQuadratic","at","mt","sampleCubic","simplifyPoints","simplifyPointsAsCubicCurveControlPoints","isBuffer_1","isBuffer","isSlowBuffer","_isBuffer","kindOf","RegExp","createCommonjsModule","renameKeys","rename","cb","eventemitter3","_events","Events","_eventsCount","getOwnPropertySymbols","EventEmitter","exists","available","evt","ee","removeListener","a1","a2","EE","prefixed","prefix","noop","attributeValue","Action","space","gt","quote","equal","getAction","create$1","_State$data","_State$tagBegin","_State$tagName","_State$tagEnd","_State$attributeNameS","_State$attributeName","_State$attributeNameE","_State$attributeValue","_State$attributeValue2","_lexer$stateMachine","debug","lexer","tagName","emit","stateMachine","_defineProperty","Type$1","tagBegin","tagEnd","attributeNameStart","openTag","closeTag","cdata","attributeName","attributeNameEnd","attrName","attributeValueBegin","attrValue","openingQuote","slash","write","Type","createNode","NodeType","element","children","lexer$1","reader","handleLexerData","parent","parentNodes","rootNode","tagPrefix","removeAllListeners","attributes","reader_1","stream","xml","parseInput","parsed","camelize","deepRenameKeys","notCamelcase","toCamelCase","prop","letter","toUpperCase","escapeText","escapeAttr","attr","svgsonSync","_ref$transformNode","transformNode","_ref$camelcase","camelcase","applyFilters","_ast","_ref$transformAttr","transformAttr","escape","_ref$selfClose","selfClose","ast","attrStr","WSP","rotate","cos","sin","assertNumbers","numbers","annotateArcCommand","lArcFlag","sweepFlag","rX","rY","cX","cY","phi1","phi2","xRotRad","xRot","x1_","y1_","testValue","c_ScaleTemp","c_Scale","cx_","cy_","cRot","atan2","intersectionUnitCircleLine","termSqr","term","DEG","lerp","arcAt","phiDeg","bezierRoot","EPS","x01","x12","PRECISION","discriminantX4","root","pqFormula","bezierAt","arePointsCollinear","v1x","v1y","v2x","v2y","cross","lenSqV2","reverseSubpath","isExplicitlyClosed","SVGPathData","CLOSE_PATH","startPointIndex","reversed","MOVE_TO","relative","curCmd","HORIZ_LINE_TO","VERT_LINE_TO","LINE_TO","CURVE_TO","SMOOTH_CURVE_TO","SMOOTH_QUAD_TO","ARC","QUAD_TO","TO_ABS","INFO","NORMALIZE_ST","prevCurveC2X","prevCurveC2Y","prevQuadCX","prevQuadCY","QT_TO_C","prevQuadX1","prevQuadY1","prevXAbs","prevYAbs","pathStartXAbs","pathStartYAbs","MATRIX","pathStartX","origX1","origX2","comRel","sqr","det","sinRot","cosRot","xCurve","yCurve","A1","B1","C1","newXRot","newSinRot","newCosRot","CLONE","SVGPathDataTransformer","ROUND","roundVal","rf","TO_REL","NORMALIZE_HVZ","normalizeZ","normalizeH","normalizeV","normalizeC","pathStartY","control1","control2","SANITIZE","x1Rel","y1Rel","LINE_COMMANDS","xRel","yRel","x2Rel","y2Rel","ROTATE","TRANSLATE","dX","dY","SCALE","SKEW_X","tan","SKEW_Y","X_AXIS_SYMMETRY","xOffset","Y_AXIS_SYMMETRY","yOffset","A_TO_C","phiMin","deltaPhi","partCount","xTemp","yTemp","phiStart","phiEnd","cp1","cp2","a2c","ANNOTATE_ARCS","CALCULATE_BOUNDS","clone","toAbs","qtToC","normST","fixX","absX","maxX","minX","fixY","absY","maxY","minY","DRAWING_COMMANDS","xDerivRoots","derivRoot","yDerivRoots","x90","y90","phiMax","normalizeXiEta","eta","phi","REVERSE_PATH","preserveSubpathOrder","normalized","processing","original","REMOVE_COLLINEAR","results","pXAbs","pYAbs","isRelatve","nextCmd","nextPoint","TransformableSVG","toRel","normalizeHVZ","normalizeST","aToC","sanitize","eps","translate","matrix","skewX","skewY","xSymmetry","ySymmetry","annotateArcs","isWhiteSpace","isDigit","SVGPathDataParser","curNumber","curCommandType","curCommandRelative","canParseCommandOrComma","curNumberHasExp","curNumberHasExpDigits","curNumberHasDecimal","curArgs","finish","SyntaxError","finishCommand","isAArcFlag","isEndingDigit","COMMAND_ARG_COUNTS","chunk","parsedCommands","cT","content","getBounds","boundsTransform","transformFunction","newCommands","transformedCommand","removeCollinear","encodeSVGPath","_console$n","identity","multiply","applyTransform","circleBezierConstant","svgJsonToCanvasCommands","svgJson","traverse","parentTransform","transformStr","part","argsStr","angle","cx","cy","isScaleUniform","ty","scaleX","scaleY","decomposeTransform","nodeTransform","uniformScale","styleStr","fillRule","pathData","c1","c2","ce","qcp","qe","rx","ry","tr","br","bl","ox","oy","p4","p5","p6","p7","p8","pTop","pRight","pBottom","pLeft","cpTopRight","cpRightTop","cpRightBottom","cpBottomRight","cpBottomLeft","cpLeftBottom","cpLeftTop","cpTopLeft","acc","child","getSvgJsonSize","viewBox","relativeTo","getSvgJsonViewBox","defaultParseSvgOptions","fit","centered","transformCanvasCommands","canvasCommands","xCallback","yCallback","cpx","cpy","offsetCanvasCommands","bboxContains","centroid","subpath","subBBox","previous","insideCount","winding","contourArea","svgToDisplayContextCommands","svgString","paletteOffset","svgson_umdExports","parseSync","boundingBox","getSvgJsonBoundingBox","intrinsicWidth","intrinsicHeight","aspectRatio","vectorCallback","canvasCommand","svgColors","mapping","bestDist","bestIdx","mapToClosestPaletteIndex","maxIter","colorMap","uniqueColors","uniqueKeys","iter","clusters","cluster","centroids","orig","DisplayColorRGB","kMeansColors","colorToIndex","displayCommands","simplifyCurves","flatMap","isHole","wasHole","parsedPaths","endX","endY","newIgnoreFill","newIgnoreLine","dependencies","trimmedCommand","dependentCommandIndex","similarCommandIndex","trimmedCommands","trimContextCommands","spriteSheet","palettes","paletteName","overridePalette","sprite","spriteName","paletteSwaps","sprites","findIndex","svgToSpriteSheet","svgToSprite","getSvgStringFromDataUrl","decodeURIComponent","isValidSVG","DOMParser","doc","querySelector","documentElement","nodeName","toLowerCase","namespaceURI","removeRedundantCharacters","removeSubstrings","substrings","_console$m","getCurvesPoints","curvePoints","serializeSpriteSheet","numberOfSprites","serializedContextCommands","serializedContextCommandArray","serializedSprite","spriteOffsetsDataView","spritePayload","serializedSpriteSheet","defaultFontToSpriteSheetOptions","unicodeOnly","englishOnly","usePath","parseFont","isWoff2","decompress","getFontUnicodeRange","englishRegex","fonts","maxSpriteY","filteredGlyphs","hasUnicode","bbox","minSpriteY","maxSpriteHeight","fontToSpriteSheet","getFontMetrics","spriteWidth","bitmapWidth","bitmapHeight","bitmapY","spriteHeight","pathOffset","bitmapX","allCurves","aPoints","imageSmoothingEnabled","fillRect","colorIndices","stringToSprites","requireAll","longestSprite","getReferencedSprites","_sprite","reduceSpriteSheet","spriteNames","reducedSpriteSheet","stringToSpriteLines","spriteSheets","contextState","maxLineBreadth","separators","areSpritesDirectionsOrthogonal","isSpritesDirectionHorizontal","isSpritesLineDirectionHorizontal","latestSeparator","latestSeparatorLineBreadth","latestSeparatorBreadth","latestSeparatorIndex","lineStrings","lineString","spritesLineIndices","lineBreadth","lineSubstring","longestSpriteSheet","isSeparator","newLineBreadth","spriteSubLine","spriteLine","_sprites","getFontMaxHeight","getMaxSpriteSheetSize","getExpandedSpriteLinesSize","expandedSpritesLines","localSize","expandedSpriteLine","spritesLineBreadth","breadthSizeKey","depthSizeKey","lineBreadths","spritesScaledWidth","spritesScaledHeight","_spritesLine","stringToSpriteLinesMetrics","_console$l","drawBitmapHeaderLength","quantizeCanvas","willReadFrequently","quantOptions","orDist","quantizer","RGBQuant","quantizedImageData","quantizedPaletteData","numberOfQuantizedPaletteColors","vector3","quantizedPaletteColors","distanceToBlack","closestColorDistanceToBlack","closestColorIndexToBlack","currentBlack","newBlack","toBlob","quantizedColors","quantizedColorIndices","quantizeImage","image","drawImage","resizeImage","cropCanvas","targetCanvas","removeAlphaFromCanvas","resizeAndQuantizeImage","imageToBitmap","bitmapColors","canvasToBitmaps","numberOfPixels","maxBitmapWidth","maxBitmapHeight","bitmapRows","bitmapRow","bitmapCanvas","imageToBitmaps","assertValidBitmapPixels","pixel","canvasToSprite","imageToSprite","spriteSheetWithSingleBitmapCommandLength","canvasToSpriteSheet","maxFileLength","spriteCanvas","imageIndex","imageToSpriteSheet","_console$k","runDisplayContextCommand","hide","show","clear","clearRotation","clearCrop","clearRotationCrop","resetBitmapScale","resetSpriteScale","resetAlignment","clearRect","drawRect","drawRoundRect","drawCircle","drawEllipse","drawRegularPolygon","drawSegment","drawSegments","drawArc","drawBitmap","selectedSpriteSheet","drawSprite","spriteSheetIndices","resetSpriteColors","startSprite","endSprite","runDisplayContextCommands","assertLoadedSpriteSheet","assertSelectedSpriteSheet","selectedSpriteSheetName","assertAnySelectedSpriteSheet","getSprite","assertSprite","getSpriteSheetPalette","getSpriteSheetPaletteSwap","paletteSwapName","paletteSwap","assertSpriteSheetPalette","displayManagerInterface","assertSpriteSheetPaletteSwap","selectSpriteSheetPalette","indicesOnly","selectSpriteSheetPaletteSwap","selectSpriteColors","selectSpritePaletteSwap","drawSpriteFromSpriteSheet","uploadSpriteSheet","_console$j","DefaultNumberOfDisplayColors","DisplayCommands","DisplayStatuses","DisplayInformationTypes","DisplayMessageTypes","DisplayBezierCurveTypes","displayCurveTypeBitWidth","displayCurveTypesPerByte","displayPointDataTypeToRange","int8","int16","DisplayInformationValues","RequiredDisplayMessageTypes","DisplayEventTypes","MinSpriteSheetNameLength","MaxSpriteSheetNameLength","DisplayManager","isAvailable","parseIsDisplayAvailable","newIsDisplayAvailable","contextStateHelper","onContextStateUpdate","displayContextState","setContextState","difference","selectBackgroundColor","setFillBackground","setIgnoreFill","setIgnoreLine","selectFillColor","selectLineColor","setLineWidth","setHorizontalAlignment","setVerticalAlignment","setSegmentStartCap","setSegmentEndCap","setSegmentStartRadius","setSegmentEndRadius","setCropTop","setCropRight","setCropBottom","setCropLeft","setRotationCropTop","setRotationCropRight","setRotationCropBottom","setRotationCropLeft","selectBitmapColors","setBitmapScaleX","setBitmapScaleY","spriteColors","setSpriteScaleX","setSpriteScaleY","setSpritesLineHeight","setSpritesDirection","setSpritesLineDirection","setSpritesSpacing","setSpritesLineSpacing","setSpritesAlignment","setSpritesLineAlignment","sendContextCommands","displayStatus","isDisplayAwake","parseDisplayStatus","newDisplayStatus","displayStatusIndex","updateDisplayStatus","previousDisplayStatus","sendDisplayCommand","displayInformation","parseDisplayInformation","displayInformationType","displayInformationTypeIndex","parsedDisplayInformation","missingDisplayInformationType","brightness","parseDisplayBrightness","newDisplayBrightness","newDisplayBrightnessEnum","setBrightness","newDisplayBrightnessData","assertValidDisplayContextCommandType","displayContextCommand","maxCommandDataLength","sendContextCommand","contextCommandType","contextCommandBuffers","_arrayBuffer","flushContextCommands","lastShowRequestTime","setColor","setColorOpacity","commandType","setOpacity","saveContext","contextStack","restoreContext","setAlignment","alignmentDirection","alignmentCommand","alignmentKey","setRotation","setSegmentCap","setSegmentRadius","setCrop","cropDirection","crop","cropCommand","cropKey","setRotationCrop","selectBitmapColor","setBitmapColor","setBitmapColorOpacity","setBitmapScaleDirection","setBitmapScale","selectSpriteColor","setSpriteColor","setSpriteColorOpacity","setSpriteScaleDirection","setSpriteScale","setSpritesDirectionGeneric","isOrthogonal","setSpritesSpacingGeneric","spacing","setSpritesAlignmentGeneric","drawPolygon","drawWireframe","isWireframePolygon","drawCurve","drawCurves","drawQuadraticBezierCurve","drawQuadraticBezierCurves","drawCubicBezierCurve","drawCubicBezierCurves","_drawPath","isClosed","drawPath","drawClosedPath","firstHalf","secondHalf","drawArcEllipse","assertValidNumberOfColors","assertValidBitmapSize","runContextCommand","runContextCommands","minReadyInterval","timeSinceLastDraw","timeSinceLastReady","lastReadyTime","timeToWait","setSpriteSheetName","setSpriteSheetNameData","pendingSpriteSheet","pendingSpriteSheetName","updateSpriteSheetName","updatedSpriteSheetName","sendFile","selectSpriteSheet","serializedSubLine","spriteIndices","use2Bytes","serializedLine","drawSpritesString","drawSprites","parseSpriteSheetIndex","parseDisplayReady","assertSpritePaletteSwap","isDrawingBlankSprite","_console$i","ConnectionTypes","ConnectionStatuses","ConnectionEventTypes","TxRxMessageTypes","BatteryLevelMessageTypes","MetaConnectionMessageTypes","ConnectionMessageTypes","BaseConnectionManager","onStatusUpdated","onMessageReceived","onMessagesReceived","baseConstructor","isSupported","canUpdateFirmware","newConnectionStatus","isConnected","timer","defaultMtu","canReconnect","reconnect","sendTxMessages","isSendingMessages","pendingMessages","AssertValidTxRxMessageType","arrayBufferByteLength","arrayBufferCount","arrayBuffersToSend","sendTxData","parseRxMessage","onRxMessage","Timer","checkConnection","_console$h","addEventListeners","boundEventListeners","addListener","AddEventListener","eventType","eventListener","RemoveEventListener","_console$g","BluetoothUUID","generateBluetoothUUID","stringToCharacteristicUUID","identifier","getCharacteristic","stringToServiceUUID","getService","bluetoothUUIDs","services","deviceInformation","uuid","characteristics","battery","batteryLevel","main","smp","serviceUUIDs","optionalServiceUUIDs","getServiceNameFromUUID","serviceUUID","serviceName","characteristicUUIDs","allCharacteristicUUIDs","getCharacteristicNameFromUUID","characteristicUUID","characteristicName","serviceInfo","getCharacteristicProperties","broadcast","read","writeWithoutResponse","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","characteristicNames","characteristicInfo","_console$f","BluetoothConnectionManager","writeCharacteristic","sendSmpMessage","_console$e","WebBluetoothConnectionManager","bluetoothId","device","boundBluetoothCharacteristicEventListeners","boundBluetoothDeviceEventListeners","newDevice","server","gatt","connected","requestDevice","filters","getServicesAndCharacteristics","serviceIndex","service","getCharacteristics","characteristicIndex","characteristic","characteristicProperties","startNotifications","readValue","onCharacteristicValueChanged","stopNotifications","allSettled","onCharacteristicvaluechanged","writeValueWithoutResponse","writeValueWithResponse","isInRange","POW_2_32","POW_2_53","CBOR","lastLength","prepareWrite","newByteLength","requiredLength","oldDataView","uint32count","commitWrite","writeUint8","writeUint8Array","writeTypeAndLength","writeUint16","writeUint32","low","high","writeUint64","encodeItem","utf8data","setFloat64","writeFloat64","charCode","ret","retView","tagger","simpleValue","commitRead","readArrayBuffer","readUint8","readUint16","readUint32","readBreak","readLength","additionalInformation","readIndefiniteStringLength","majorType","initialByte","appendUtf16Data","utf16data","decodeItem","tempArrayBuffer","tempDataView","exponent","fraction","readFloat16","getFloat64","retArray","retObject","elements","fullArrayLength","fullArray","fullArrayOffset","_console$d","constants","MCUManager","_mtu","_messageCallback","_imageUploadProgressCallback","_imageUploadNextCallback","_fileUploadProgressCallback","_fileUploadNextCallback","_uploadIsInProgress","_downloadIsInProgress","_buffer","_seq","onMessage","onImageUploadNext","onImageUploadProgress","onImageUploadFinished","_imageUploadFinishedCallback","onFileUploadNext","onFileUploadProgress","onFileUploadFinished","_fileUploadFinishedCallback","onFileDownloadNext","_fileDownloadNextCallback","onFileDownloadProgress","_fileDownloadProgressCallback","onFileDownloadFinished","_fileDownloadFinishedCallback","_getMessage","group","encodedData","lengthLo","_notification","_processMessage","lengthHi","groupHi","groupLo","_uploadOffset","_uploadNext","_uploadFileOffset","_uploadFileNext","_downloadFileOffset","_downloadFileLength","percentage","_downloadFileNext","cmdReset","smpEcho","cmdImageState","cmdImageErase","cmdImageTest","hash","confirm","cmdImageConfirm","_hash","crypto","subtle","digest","_uploadImage","sha","packet","cmdUpload","slot","_uploadSlot","cmdUploadFile","filebuf","destFilename","_uploadFile","_uploadFilename","cmdDownloadFile","filename","_downloadRemoteFilename","_downloadLocalFilename","imageInfo","padStart","_console$c","FirmwareMessageTypes","FirmwareEventTypes","FirmwareStatuses","FirmwareManager","mcuManager","getImages","newStatus","firmwareStatus","images","assertValidImageIndex","testImage","eraseImage","confirmImage","onMcuMessage","onMcuFileDownloadProgress","onMcuFileDownloadFinished","onMcuFileUploadNext","onMcuFileUploadProgress","onMcuFileUploadFinished","onMcuImageUploadNext","onMcuImageUploadProgress","onMcuImageUploadFinished","tasks","onMcuImageState","pending","confirmed","bootable","active","permanent","firmwareImages","_console$b","DeviceManagerEventTypes","DeviceManager","CanUseLocalStorage","UseLocalStorage","boundDeviceEventListeners","onDevice","onDeviceType","UpdateLocalStorageConfigurationForDevice","ConnectedDevices","newUseLocalStorage","DefaultLocalStorageConfiguration","devices","LocalStorageConfiguration","localStorage","setItem","LocalStorageKey","LoadFromLocalStorage","localStorageString","CanGetDevices","GetDevices","deviceInformationIndex","AvailableDevices","getDevices","bluetoothDevices","bluetoothDevice","existingConnectedDevice","existingAvailableDevice","Device","connectionManager","DispatchEvent","RemoveEventListeners","RemoveAllEventListeners","removeAllEventListeners","OnDeviceIsConnected","_CheckDeviceAvailability","DeviceManager$1","shared","_console$a","ServerMessageTypes","messageDataArrayBufferByteLength","messageDataArrayBuffer","messageBuffers","createServerMessage","createMessage","createClientDeviceMessage","_console$9","WebSocketMessageTypes$1","createWebSocketMessage$1","createWebSocketMessage","_console$8","WebSocketMessageTypes","WebSocketDeviceInformationMessageTypes","WebSocketConnectionManager","isSecure","webSocket","newWebSocket","readyState","OPEN","boundWebSocketEventListeners","newIpAddress","newIsSecure","pingTimer","restart","onWebSocketOpen","parseWebSocketMessage","onWebSocketClose","onWebSocketError","deviceInformationType","ping","webSocketPingTimeout","sendWebSocketMessage","_console$7","DeviceEventTypes","RequiredInformationConnectionMessages","deviceInformationManager","_informationManager","sensorConfigurationManager","sensorDataManager","vibrationManager","tfliteManager","fileTransferManager","wifiManager","cameraManager","microphoneManager","firmwareManager","connectionStatus","requestRequiredInformation","DefaultConnectionManager","newConnectionManager","remove","onConnectionStatusUpdated","onConnectionMessageReceived","onConnectionMessagesReceived","reconnectOnDisconnection","UDPConnectionManager","_a$1","clientConnectionManager","subType","didReceiveMessageTypes","hasConnectionMessage","hasRequiredInformation","hasCamera","hasMicrophone","isDisplayAvailable","ReconnectOnDisconnection","newReconnectOnDisconnection","reconnectIntervalId","isConnectionBusy","OnDeviceConnectionStatusUpdated","dispatchConnectionEvents","latestConnectionMessages","updateBatteryLevel","updatedBatteryLevel","continuousSensorTypes","setSensorConfiguration","ClearSensorConfigurationOnLeave","newClearSensorConfigurationOnLeave","clearSensorConfigurationOnLeave","numberOfPressureSensors","resetRange","validFileTypes","receive","tfliteName","setTfliteName","tfliteTask","setTfliteTask","setTfliteSampleRate","allowedTfliteSensorTypes","setTfliteSensorTypes","tfliteIsReady","setTfliteInferencingEnabled","enableTfliteInferencing","disableTfliteInferencing","toggleTfliteInferencing","setTfliteCaptureDelay","tfliteThreshold","setTfliteThreshold","uploadFirmware","canReset","getFirmwareImages","eraseFirmwareImage","confirmFirmwareImage","testFirmwareImage","isUkaton","reconnectViaWebSockets","reconnectViaUDP","camera","focusCamera","stopCamera","wakeCamera","sleepCamera","setCameraConfiguration","startMicrophone","microphone","stopMicrophone","enableMicrophoneVad","toggleMicrophone","setMicrophoneConfiguration","AudioContext","microphoneMediaStreamDestination","microphoneGainNode","isRecordingMicrophone","startRecording","stopRecording","toggleRecording","isDisplayReady","displayColors","displayBitmapColors","displayBitmapColorIndices","displayColorOpacities","setDisplayBrightness","numberOfDisplayColors","wakeDisplay","sleepDisplay","toggleDisplay","showDisplay","clearDisplay","setDisplayColor","setDisplayColorOpacity","setDisplayOpacity","saveDisplayContext","restoreDisplayContext","clearDisplayRect","selectDisplayBackgroundColor","selectDisplayFillColor","selectDisplayLineColor","setDisplayIgnoreFill","setDisplayIgnoreLine","setDisplayFillBackground","setDisplayLineWidth","setDisplayRotation","clearDisplayRotation","setDisplaySegmentStartCap","setDisplaySegmentEndCap","setDisplaySegmentCap","setDisplaySegmentStartRadius","setDisplaySegmentEndRadius","setDisplaySegmentRadius","setDisplayCropTop","setDisplayCropRight","setDisplayCropBottom","setDisplayCropLeft","setDisplayCrop","clearDisplayCrop","setDisplayRotationCropTop","setDisplayRotationCropRight","setDisplayRotationCropBottom","setDisplayRotationCropLeft","setDisplayRotationCrop","clearDisplayRotationCrop","flushDisplayContextCommands","drawDisplayRect","drawDisplayCircle","drawDisplayEllipse","drawDisplayRoundRect","drawDisplayRegularPolygon","drawDisplayPolygon","drawDisplayWireframe","drawDisplaySegment","drawDisplaySegments","drawDisplayArc","drawDisplayArcEllipse","drawDisplayBitmap","imageToDisplayBitmap","quantizeDisplayImage","resizeAndQuantizeDisplayImage","setDisplayContextState","selectDisplayBitmapColor","selectDisplayBitmapColors","setDisplayBitmapColor","setDisplayBitmapColorOpacity","setDisplayBitmapScaleDirection","setDisplayBitmapScaleX","setDisplayBitmapScaleY","setDisplayBitmapScale","resetDisplayBitmapScale","selectDisplaySpriteColor","selectDisplaySpriteColors","setDisplaySpriteColor","setDisplaySpriteColorOpacity","resetDisplaySpriteColors","setDisplaySpriteScaleDirection","setDisplaySpriteScaleX","setDisplaySpriteScaleY","setDisplaySpriteScale","resetDisplaySpriteScale","uploadDisplaySpriteSheet","uploadDisplaySpriteSheets","uploadSpriteSheets","selectDisplaySpriteSheet","drawDisplaySprite","startDisplaySprite","endDisplaySprite","displaySpriteSheets","serializeDisplaySpriteSheet","setDisplayAlignment","setDisplayVerticalAlignment","setDisplayHorizontalAlignment","resetDisplayAlignment","setDisplaySpritesDirection","setDisplaySpritesLineDirection","setDisplaySpritesSpacing","setDisplaySpritesLineSpacing","setDisplaySpritesAlignment","drawDisplayQuadraticBezierCurve","drawDisplayQuadraticBezierCurves","drawDisplayCubicBezierCurve","drawDisplayCubicBezierCurves","drawDisplayPath","drawDisplayClosedPath","_console$6","DisplayCanvasHelperEventTypes","DisplayCanvasHelper","bitmapContext","newCanvas","resetTransform","frontDrawStack","applyTransparency","alpha","deviceDisplayManager","onDeviceIsConnected","onDeviceConnected","onDeviceNotConnected","onDeviceDisplaySpriteSheetUploadStart","onDeviceDisplaySpriteSheetUploadProgress","onDeviceDisplaySpriteSheetUploadComplete","onDeviceDisplayContextCommands","redraw","flushColors","flushOpacities","flushBrightness","updateDevice","updateDeviceColors","updateDeviceOpacity","updateDeviceContextState","updateDeviceBrightness","updateDeviceSpriteSheets","updateDeviceSelectedSpriteSheet","newNumberOfColors","pendingColors","pendingOpacities","rearDrawStack","ignoreDevice","spriteBitmapColorIndices","spriteBitmapColors","clearRectToCanvas","useSpriteColorIndices","colorIndexToRgbString","transformContext","translateContext","rotateContext","rotated","xs","ys","offsetBoundingBox","getOuterPadding","getRectBoundingBox","applyLineWidth","outerPadding","applyClip","rect","applyRotationClip","darken","hexToRgbWithOpacity","getColorOpacity","includeBrightness","brightnessOpacity","hexToRgbStringWithOpacity","colorIndexToRgb","updateContext","localBox","rotatedLocalBox","rotateBoundingBox","rotatedBox","clearBoundingBoxOnDraw","clearBoundingBox","strokeRect","maxBorderRadius","roundRect","diameter","drawCircleToCanvas","drawArcEllipseToCanvas","getRegularPolygonBoundingBox","shapeFactor","angleStep","getPointsBoundingBox","applyAlignment","pointsBoundingBox","alignBoundingBox","alignedBoundingBox","drawPolygonToCanvas","centeredLocalBox","getWireframeBoundingBox","drawWireframeToCanvas","curvePoint","_curvePoints","appendCurvePoint","generateQuadraticCurvePoints","displayCurveTolerance","p01","p12","appendCurvePoints","generateCubicCurvePoints","p012","p123","p23","generateGenericCurvePoints","isStart","appendQuadraticCurvePoints","appendCubicCurvePoints","appendGenericCurvePoints","drawCurveToCanvas","drawSegmentsToCanvas","drawCurvesToCanvas","curvePointsJump","numberOfCurves","drawPathToCanvas","_controlPoints","getLocalSegmentBoundingBox","maxRadius","drawSegmentToCanvas","r0","previousPoint","drawArcToCanvas","centerX","centerY","clockwise","endAngle","bitmapImageData","createImageData","rawBitmapImageData","imageDataOffset","saveContextForSprite","_contextState","runSpriteCommand","drawSpriteToCanvas","setIgnoreDevice","setUseSpriteColorIndices","setClearCanvasBoundingBoxOnDraw","drawSpritesToCanvas","spritesBreadthSign","isSpritesDirectionPositive","spritesDepthSign","isSpritesLineDirectionPositive","setCanvasContextTransform","spritesBreadthStart","spriteOffset","signedSpritesSpacing","signedSpriteLineSpacing","signedSpriteLineHeight","breadthOffsetKey","lineIndex","_spriteOffset","spriteContextState","depthOffsetKey","assertValidSpriteLines","brightnessOpacities","veryLow","medium","veryHigh","didSetBrightness","newBrightness","resetBrightness","contextScale","scaledWidth","scaledHeight","correctAlignmentTranslation","spriteStack","spriteContextStack","runPreviewSpriteCommand","previewSprite","previewSpriteCommands","_console$5","DevicePairPressureSensorDataManager","onDevicePressureData","rawPressure","hasAllPressureData","updatePressureData","Sides","sidePressure","_sensor","_console$4","DevicePairSensorDataEventTypes","DevicePairSensorDataManager","resetPressureRange","onDeviceSensorData","timestamps","_console$3","getDevicePairDeviceEventType","deviceEventType","DevicePairEventTypes","DevicePair","sides","isPartiallyConnected","isHalfConnected","isDeviceCorrectType","assignDevice","currentDevice","removeDeviceEventListeners","addDeviceEventListeners","removeDevice","foundDevice","redispatchDeviceEvent","deviceEvent","insoles","gloves","_console$2","ClientConnectionManager","client","discoveredDevice","newBluetoothId","newIsConnected","sendClientConnectMessage","sendClientMessage","sendClientDisconnectMessage","sendRequiredDeviceInformationMessage","onClientMessage","onClientMessageCallback","_console$1","ClientEventTypes","BaseClient","isScanningAvailable","isScanning","receivedMessageTypes","_reconnectOnDisconnection","_connectionStatus","requiredMessageTypes","parseMessageCallback","discoveredDeviceString","parseStringFromDataView","onDiscoveredDevice","onExpiredDiscoveredDevice","connectedBluetoothDeviceIdStrings","connectedBluetoothDeviceIds","onConnectedBluetoothDeviceIds","_byteOffset","newIsAvailable","_isScanningAvailable","sendServerMessage","newIsScanning","_isScanning","discoveredDevices","createDevice","sendDeviceMessage","getOrCreateDevice","bluetoothIds","disconnectFromDevice","requestDisconnectionFromDevice","sendDisconnectFromDeviceMessage","_console","WebSocketClient","WebSocket","isDisconnected","CLOSED","host","toggleConnection","onServerMessage","EventUtils","ThrottleUtils","trailing","remaining","timeout","lastTime","lastArgs","callImmediately","callNow"],"mappings":"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,IAAA,MACA,CAAAE,MAAA,MAAAF,IAAA,OACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,MAAAF,IAAA,OACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,MACA,CAAAE,MAAA,KAAAF,IAAA,OACA,CAAAE,MAAA,MAAAF,IAAA,OACA,CAAAE,MAAA,MAAAF,IAAA,OACA,CAAAE,MAAA,MAAAF,IAAA,OACA,CAAAE,MAAA,MAAAF,IAAA,OACA,C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,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA,EAAA,EAAA,EAAA,EAAA,GACAorE,GAAAjvE,UAAA6D,EAAA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","x_google_ignoreList":[7,33,36,37,38,39,41,42,43,44,45,46,47,48,49]}