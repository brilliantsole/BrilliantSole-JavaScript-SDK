import { DisplayBezierCurve, DisplayBezierCurveType, DisplayBrightness, DisplayPixelDepth, DisplayWireframe } from "../DisplayManager.ts";
import { DisplayContextCommandType } from "./DisplayContextCommand.ts";
import { DisplayAlignment, DisplayAlignmentDirection, DisplayDirection, DisplaySegmentCap } from "./DisplayContextState.ts";
import { Vector2 } from "./MathUtils.ts";
export declare function formatRotation(rotation: number, isRadians?: boolean, isSigned?: boolean): number;
export declare function roundToStep(value: number, step: number): number;
export declare const minDisplayScale = -50;
export declare const maxDisplayScale = 50;
export declare const displayScaleStep = 0.002;
export declare function formatScale(bitmapScale: number): number;
export declare function roundScale(bitmapScale: number): number;
export declare function assertValidSegmentCap(segmentCap: DisplaySegmentCap): void;
export declare function assertValidDisplayBrightness(displayBrightness: DisplayBrightness): void;
export declare function assertValidColorValue(name: string, value: number): void;
export declare function assertValidColor(color: DisplayColorRGB): void;
export declare function assertValidOpacity(value: number): void;
export declare const DisplayCropDirections: readonly ["top", "right", "bottom", "left"];
export type DisplayCropDirection = (typeof DisplayCropDirections)[number];
export declare const DisplayContextCropStateKeys: readonly ["cropTop", "cropRight", "cropBottom", "cropLeft"];
export type DisplayContextCropStateKey = (typeof DisplayContextCropStateKeys)[number];
export declare const DisplayCropDirectionToStateKey: Record<DisplayCropDirection, DisplayContextCropStateKey>;
export declare const DisplayContextCropCommandTypes: readonly ["setCropTop", "setCropRight", "setCropBottom", "setCropLeft"];
export type DisplayContextCropCommandType = (typeof DisplayContextCropCommandTypes)[number];
export declare const DisplayCropDirectionToCommandType: Record<DisplayCropDirection, DisplayContextCropCommandType>;
export declare const DisplayContextRotationCropStateKeys: readonly ["rotationCropTop", "rotationCropRight", "rotationCropBottom", "rotationCropLeft"];
export type DisplayContextRotationCropStateKey = (typeof DisplayContextRotationCropStateKeys)[number];
export declare const DisplayRotationCropDirectionToStateKey: Record<DisplayCropDirection, DisplayContextRotationCropStateKey>;
export declare const DisplayContextRotationCropCommandTypes: readonly ["setRotationCropTop", "setRotationCropRight", "setRotationCropBottom", "setRotationCropLeft"];
export type DisplayContextRotationCropCommandType = (typeof DisplayContextRotationCropCommandTypes)[number];
export declare const DisplayRotationCropDirectionToCommandType: Record<DisplayCropDirection, DisplayContextRotationCropCommandType>;
export declare const DisplayContextAlignmentCommandTypes: readonly ["setVerticalAlignment", "setHorizontalAlignment"];
export type DisplayContextAlignmentCommandType = (typeof DisplayContextAlignmentCommandTypes)[number];
export declare const DisplayAlignmentDirectionToCommandType: Record<DisplayAlignmentDirection, DisplayContextAlignmentCommandType>;
export declare const DisplayContextAlignmentStateKeys: readonly ["verticalAlignment", "horizontalAlignment"];
export type DisplayContextAlignmentStateKey = (typeof DisplayContextAlignmentStateKeys)[number];
export declare const DisplayAlignmentDirectionToStateKey: Record<DisplayAlignmentDirection, DisplayContextAlignmentStateKey>;
export declare function pixelDepthToNumberOfColors(pixelDepth: DisplayPixelDepth): number;
export declare function pixelDepthToPixelsPerByte(pixelDepth: DisplayPixelDepth): number;
export declare function pixelDepthToPixelBitWidth(pixelDepth: DisplayPixelDepth): number;
export declare function numberOfColorsToPixelDepth(numberOfColors: number): "1" | "2" | "4" | undefined;
export declare const DisplayScaleDirections: readonly ["x", "y", "all"];
export type DisplayScaleDirection = (typeof DisplayScaleDirections)[number];
export declare const DisplayBitmapScaleDirectionToCommandType: Record<DisplayScaleDirection, DisplayContextCommandType>;
export declare const DisplaySpriteScaleDirectionToCommandType: Record<DisplayScaleDirection, DisplayContextCommandType>;
export type DisplayColorRGB = {
    r: number;
    g: number;
    b: number;
};
export type DisplayColorYCbCr = {
    y: number;
    cb: number;
    cr: number;
};
export declare function assertValidAlignment(alignment: DisplayAlignment): void;
export declare function assertValidDirection(direction: DisplayDirection): void;
export declare function assertValidAlignmentDirection(direction: DisplayAlignmentDirection): void;
export declare const displayCurveTypeToNumberOfControlPoints: Record<DisplayBezierCurveType, number>;
export declare const displayCurveTolerance = 1;
export declare const displayCurveToleranceSquared: number;
export declare const maxNumberOfDisplayCurvePoints = 150;
export declare function assertValidNumberOfControlPoints(curveType: DisplayBezierCurveType, controlPoints: Vector2[], isPath?: boolean): void;
export declare function assertValidPathNumberOfControlPoints(curveType: DisplayBezierCurveType, controlPoints: Vector2[]): void;
export declare function assertValidPath(curves: DisplayBezierCurve[]): void;
export declare function assertValidWireframe({ points, edges }: DisplayWireframe): void;
export declare function mergeWireframes(a: DisplayWireframe, b: DisplayWireframe): DisplayWireframe;
export declare function intersectWireframes(a: DisplayWireframe, b: DisplayWireframe, ignoreDirection?: boolean): DisplayWireframe;
export declare function trimWireframe(wireframe: DisplayWireframe): DisplayWireframe;
