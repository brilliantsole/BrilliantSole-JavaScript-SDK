export namespace constants {
    let MGMT_OP_READ: number;
    let MGMT_OP_READ_RSP: number;
    let MGMT_OP_WRITE: number;
    let MGMT_OP_WRITE_RSP: number;
    let MGMT_GROUP_ID_OS: number;
    let MGMT_GROUP_ID_IMAGE: number;
    let MGMT_GROUP_ID_STAT: number;
    let MGMT_GROUP_ID_CONFIG: number;
    let MGMT_GROUP_ID_LOG: number;
    let MGMT_GROUP_ID_CRASH: number;
    let MGMT_GROUP_ID_SPLIT: number;
    let MGMT_GROUP_ID_RUN: number;
    let MGMT_GROUP_ID_FS: number;
    let MGMT_GROUP_ID_SHELL: number;
    let OS_MGMT_ID_ECHO: number;
    let OS_MGMT_ID_CONS_ECHO_CTRL: number;
    let OS_MGMT_ID_TASKSTAT: number;
    let OS_MGMT_ID_MPSTAT: number;
    let OS_MGMT_ID_DATETIME_STR: number;
    let OS_MGMT_ID_RESET: number;
    let IMG_MGMT_ID_STATE: number;
    let IMG_MGMT_ID_UPLOAD: number;
    let IMG_MGMT_ID_FILE: number;
    let IMG_MGMT_ID_CORELIST: number;
    let IMG_MGMT_ID_CORELOAD: number;
    let IMG_MGMT_ID_ERASE: number;
    let FS_MGMT_ID_FILE: number;
}
export class MCUManager {
    _mtu: number;
    _messageCallback: any;
    _imageUploadProgressCallback: any;
    _imageUploadNextCallback: any;
    _fileUploadProgressCallback: any;
    _fileUploadNextCallback: any;
    _uploadIsInProgress: boolean;
    _downloadIsInProgress: boolean;
    _buffer: Uint8Array;
    _seq: number;
    onMessage(callback: any): this;
    onImageUploadNext(callback: any): this;
    onImageUploadProgress(callback: any): this;
    onImageUploadFinished(callback: any): this;
    _imageUploadFinishedCallback: any;
    onFileUploadNext(callback: any): this;
    onFileUploadProgress(callback: any): this;
    onFileUploadFinished(callback: any): this;
    _fileUploadFinishedCallback: any;
    onFileDownloadNext(callback: any): this;
    _fileDownloadNextCallback: any;
    onFileDownloadProgress(callback: any): this;
    _fileDownloadProgressCallback: any;
    onFileDownloadFinished(callback: any): this;
    _fileDownloadFinishedCallback: any;
    _getMessage(op: any, group: any, id: any, data: any): any[];
    _notification(buffer: any): void;
    _processMessage(message: any): void;
    _uploadOffset: any;
    _uploadFileOffset: any;
    _downloadFileLength: any;
    cmdReset(): any[];
    smpEcho(message: any): any[];
    cmdImageState(): any[];
    cmdImageErase(): any[];
    cmdImageTest(hash: any): any[];
    cmdImageConfirm(hash: any): any[];
    _hash(image: any): Promise<ArrayBuffer>;
    _uploadNext(): Promise<void>;
    reset(): Promise<void>;
    cmdUpload(image: any, slot?: number): Promise<void>;
    _uploadImage: any;
    _uploadSlot: number | undefined;
    cmdUploadFile(filebuf: any, destFilename: any): Promise<void>;
    _uploadFile: any;
    _uploadFilename: any;
    _uploadFileNext(): Promise<void>;
    cmdDownloadFile(filename: any, destFilename: any): Promise<void>;
    _downloadFileOffset: number | undefined;
    _downloadRemoteFilename: any;
    _downloadLocalFilename: any;
    _downloadFileNext(): Promise<void>;
    imageInfo(image: any): Promise<{
        imageSize: number;
        version: string;
        hash: string;
    }>;
}
