/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function r(){}e&&navigator.userAgent.includes("Android");const s=console.log.bind(console),n=console.warn.bind(console),i=console.error.bind(console),a=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new o(e)}get log(){return this.#t.log?s:r}get warn(){return this.#t.warn?n:r}get error(){return this.#t.error?i:r}get assert(){return this.#t.assert?a:r}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}}function c(e,t){return o.create(e,t)}const u=c("EventDispatcher",{log:!1});class h{constructor(e){u.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#r=e}#r;#s(e){return!this.#r||this.#r.includes(e)}#n(e){u.assertWithError(this.#s(e),`invalid event type "${e}"`)}#i;addEventListener(e,t,r){if(u.log(`adding "${e}" eventListener`,t),this.#n(e),this.#i||(this.#i={}),r?.once){const r=t;t=function t(s){r.apply(this,arguments),this.removeEventListener(e,t)}}const s=this.#i;s[e]||(s[e]=[]),s[e].includes(t)||s[e].push(t)}hasEventListener(e,t){return u.log(`has "${e}" eventListener?`,t),this.#n(e),this.#i?.[e]?.includes(t)}removeEventListener(e,t){if(u.log(`removing "${e}" eventListener`,t),this.#n(e),this.hasEventListener(e,t)){const r=this.#i[e].indexOf(t);return this.#i[e].splice(r,1),!0}return!1}dispatchEvent(e){if(this.#n(e.type),this.#i?.[e.type]){e.target=this;const t=this.#i[e.type].slice(0);for(let r=0,s=t.length;r<s;r++)t[r].call(this,e)}}}function g(e,t){Object.entries(t).forEach((([t,r])=>{e.addEventListener(t,r)}))}function m(e,t){Object.entries(t).forEach((([t,r])=>{e.removeEventListener(t,r)}))}const l=c("ConnectionManager");class f{onStatusUpdated;onMessageReceived;static#a(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#a("type")}get type(){return this.constructor.type}#c(){l.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#u(){l.assertWithError(this.constructor!=f,`${this.constructor.name} must be subclassed`)}constructor(){this.#u(),this.#c()}#h="not connected";get status(){return this.#h}set status(e){l.assertTypeWithError(e,"string"),this.#h!=e?(l.log(`new connection status "${e}"`),this.#h=e,this.onStatusUpdated?.(this.status)):l.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){l.assertWithError(!this.isConnected,"device is already connected")}#m(){l.assertWithError("connecting"!=this.status,"device is already connecting")}#l(){l.assertWithError(this.isConnected,"device is not connected")}#f(){l.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#d(){this.#l(),this.#f()}async connect(){this.#g(),this.#m(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#m(),l.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#l(),this.#f(),this.status="disconnecting"}async sendMessage(e,t){this.#d(),l.log("sending message",{messageType:e,data:t})}}if(t){var d=require("webbluetooth").BluetoothUUID}if(e)d=window.BluetoothUUID;function p(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function v(e){return d.getCharacteristic(e)}function y(e){return d.getService(e)}const S=Object.freeze({services:{deviceInformation:{uuid:y("device_information"),characteristics:{manufacturerName:{uuid:v("manufacturer_name_string")},modelNumber:{uuid:v("model_number_string")},hardwareRevision:{uuid:v("hardware_revision_string")},firmwareRevision:{uuid:v("firmware_revision_string")},softwareRevision:{uuid:v("software_revision_string")},pnpId:{uuid:v("pnp_id")},serialNumber:{uuid:v("serial_number_string")}}},battery:{uuid:y("battery_service"),characteristics:{batteryLevel:{uuid:v("battery_level")}}},main:{uuid:p(0),characteristics:{name:{uuid:p(1)},type:{uuid:p(2)},sensorConfiguration:{uuid:p(3)},sensorData:{uuid:p(4)},vibration:{uuid:p(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,r])=>e==r.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((r=>(t=Object.entries(r.characteristics).find((([t,r])=>e==r.uuid))?.[0],t))),t}}),b=S.serviceUUIDs,E=S.optionalServiceUUIDs;const w=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var C={bluetooth:t}}if(e)C=window.navigator;class D extends f{#p={characteristicvaluechanged:this.#v.bind(this)};#y={gattserverdisconnected:this.#S.bind(this)};static get isSupported(){return"bluetooth"in C}static get type(){return"web bluetooth"}#b;get device(){return this.#b}set device(e){this.#b!=e?(this.#b&&m(this.#b,this.#y),e&&g(e,this.#y),this.#b=e):w.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const t=await C.bluetooth.requestDevice({filters:[{services:b}],optionalServices:e?E:[]});w.log("got BluetoothDevice"),this.device=t,w.log("connecting to device...");const r=await this.device.gatt.connect();w.log(`connected to device? ${r.connected}`),await this.#C(),w.log("fully connected"),this.status="connected"}catch(e){w.error(e),this.status="not connected",this.server?.disconnect(),this.#D()}}async#C(){this.#D(),w.log("getting services...");const e=await this.server.getPrimaryServices();w.log("got services",e.length),w.log("getting characteristics...");for(const s in e){const n=e[s],i=(r=n.uuid,S.getServiceNameFromUUID(r));if(w.assertWithError(i,`no name found for service uuid "${n.uuid}"`),w.log(`got "${i}" service`),"dfu"==i){w.log("skipping dfu service");continue}n._name=i,this.#E.set(i,n),w.log(`getting characteristics for "${i}" service`);const a=await n.getCharacteristics();w.log(`got characteristics for "${i}" service`);for(const e in a){const r=a[e],s=(t=r.uuid,S.getCharacteristicNameFromUUID(t));w.assertWithError(s,`no name found for characteristic uuid "${r.uuid}" in "${i}" service`),w.log(`got "${s}" characteristic in "${i}" service`),r._name=s,this.#w.set(s,r),g(r,this.#p),r.properties.read&&(w.log(`reading "${s}" characteristic...`),await r.readValue()),r.properties.notify&&(w.log(`starting notifications for "${s}" characteristic`),await r.startNotifications())}}var t,r}#D(){this.device&&m(this.device,this.#y),this.#w.forEach((e=>{m(e,this.#p)}))}async disconnect(){await super.disconnect(),w.log("disconnecting from device..."),this.server?.disconnect(),this.#D()}#v(e){w.log("oncharacteristicvaluechanged");const t=e.target,r=t._name;w.assertWithError(r,`no name found for characteristic with uuid "${t.uuid}"`),w.log(`oncharacteristicvaluechanged for "${r}" characteristic`);const s=t.value;switch(w.assertWithError(s,`no data found for "${r}" characteristic`),w.log(`data for "${r}" characteristic`,Array.from(new Uint8Array(s.buffer))),r){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${r}"`)}}#S(e){w.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let r;switch(await super.sendMessage(...arguments),e){case"setName":r=this.#w.get("name");break;case"setType":r=this.#w.get("type");break;case"setSensorConfiguration":r=this.#w.get("sensorConfiguration");break;case"triggerVibration":r=this.#w.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}w.assert(r,"no characteristic found"),await r.writeValueWithResponse(t),r.properties.read&&await r.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),w.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(w.log("successfully reconnected!"),await this.#C(),this.status="connected"):(w.log("unable to reconnect"),this.status="not connected")}}function T(e,t,r){return(e-t)/(r-t)}c("NobleConnectionManager",{log:!0}),t&&require("@abandonware/noble");const M=c("PressureSensorDataManager",{log:!0});class R{#T;get deviceType(){return this.#T}set deviceType(e){M.assertTypeWithError(e,"string"),this.#T!=e?(M.log({newDeviceType:e}),this.#T=e,this.#M(),this.resetCenterOfPressureRange()):M.warn(`redundant deviceType assignment "${e}"`)}static#R=["hallux","digits","metatarsal_inner","metatarsal_center","metatarsal_outer","arch","lateral","heel"];static get Names(){return this.#R}get names(){return R.Names}static#L={pressure:2**-16};static get Scalars(){return this.#L}get scalars(){return R.Scalars}static#W=8;static get NumberOfPressureSensors(){return this.#W}get numberOfPressureSensors(){return R.NumberOfPressureSensors}static#x=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#x}#I;get pressureSensorPositions(){return this.#I}#M(){const e=R.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));M.log({pressureSensorPositions:e}),this.#I=e}#N;resetCenterOfPressureRange(){this.#N={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}}}#O(e){this.#N.min.x=Math.min(e.x,this.#N.min.x),this.#N.min.y=Math.min(e.y,this.#N.min.y),this.#N.max.x=Math.max(e.x,this.#N.max.x),this.#N.max.y=Math.max(e.y,this.#N.max.y)}#k(e){return{x:T(e.x,this.#N.min.x,this.#N.max.x),y:T(e.y,this.#N.min.y,this.#N.max.y)}}parsePressure(e,t){const r=this.scalars.pressure,s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const i=e.getUint16(t,!0),a=i*r,o=this.pressureSensorPositions[n],c=this.names[n];s.sensors[n]={rawValue:i,normalizedValue:a,position:o,name:c},s.rawSum+=i,s.normalizedSum=a/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),this.#O(s.center),s.calibratedCenter=this.#k(s.center)),M.log({pressure:s}),s}}const L=c("MotionSensorDataManager",{log:!0});class W{#T;get deviceType(){return this.#T}set deviceType(e){L.assertTypeWithError(e,"string"),this.#T!=e?(L.log({newDeviceType:e}),this.#T=e):L.warn(`redundant deviceType assignment "${e}"`)}static#L={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#L}get scalars(){return W.Scalars}static#$=6;static get Vector3Size(){return this.#$}get vector3Size(){return W.Vector3Size}parseVector3(e,t,r){let[s,n,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[r]));const a={x:s,y:n,z:i};return L.log({vector:a}),a}static#U=8;static get QuaternionSize(){return this.#U}get quaternionSize(){return W.QuaternionSize}parseQuaternion(e,t,r){let[s,n,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[r]));const o={x:s,y:n,z:i,w:a};return L.log({quaternion:o}),o}}c("BarometerSensorDataManager",{log:!0});class x{static#L={barometer:.78125};static get Scalars(){return this.#L}get scalars(){return x.Scalars}}const I=c("SensorDataManager",{log:!0});class N{#T;get deviceType(){return this.#T}set deviceType(e){I.assertTypeWithError(e,"string"),this.#T!=e?(I.log({newDeviceType:e}),this.#T=e,this.#_.deviceType=e,this.#P.deviceType=e):I.warn(`redundant deviceType assignment "${e}"`)}#_=new R;#P=new W;#V=new x;static#A=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#A}get#z(){return N.Types}static AssertValidSensorType(e){I.assertTypeWithError(e,"string"),I.assertWithError(this.#A.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){I.assertTypeWithError(e,"number"),I.assertWithError(e in this.#A,`invalid sensorTypeEnum ${e}`)}onDataReceived;#B=0;#F=0;clearTimestamp(){I.log("clearing sensorDataManager timestamp data"),this.#B=0,this.#F=0}#q(e,t){const r=e.getUint16(t,!0);r<this.#F&&(this.#B+=65536),this.#F=r;return r+this.#B}parse(e){I.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const r=this.#q(e,t);for(t+=2;t<e.byteLength;){const s=e.getUint8(t++);let n;N.AssertValidSensorTypeEnum(s);const i=e.getUint8(t++),a=this.#z[s];switch(I.log({sensorTypeEnum:s,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":n=this.#_.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":n=this.#P.parseVector3(e,t,a);break;case"gameRotation":case"rotation":n=this.#P.parseQuaternion(e,t,a);break;case"barometer":break;default:I.error(`uncaught sensorType "${a}"`)}t+=i,I.assertWithError(n,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:r,[a]:n})}}static get NumberOfPressureSensors(){return R.NumberOfPressureSensors}get numberOfPressureSensors(){return N.NumberOfPressureSensors}}const O=c("SensorConfigurationManager",{log:!0});class k{#T;get deviceType(){return this.#T}set deviceType(e){O.assertTypeWithError(e,"string"),this.#T!=e?(O.log({newDeviceType:e}),this.#T=e):O.warn(`redundant deviceType assignment "${e}"`)}parse(e){const t={};return N.Types.forEach(((r,s)=>{const n=e.getUint16(2*s,!0);O.log({sensorType:r,sensorRate:n}),t[r]=n})),O.log({parsedSensorConfiguration:t}),t}static#j=65535;static get MaxSensorRate(){return this.#j}get maxSensorRate(){return k.MaxSensorRate}static#H=5;static get SensorRateStep(){return this.#H}get sensorRateStep(){return k.SensorRateStep}#Z(e){O.assertTypeWithError(e,"number"),O.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),O.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),O.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){const t=Object.keys(e),r=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,s)=>{N.AssertValidSensorType(t);const n=N.Types.indexOf(t);r.setUint8(3*s,n);const i=e[t];this.#Z(i),r.setUint16(3*s+1,e[t],!0)})),O.log({sensorConfigurationData:r}),r}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const $=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];function U(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),r=new Uint8Array(t);let s=0;return e.forEach((e=>{r.set(new Uint8Array(e),s),s+=e.byteLength})),r.buffer}const _=c("VibrationManager");class P{static#Q=["front","rear"];static get Locations(){return this.#Q}get locations(){return P.Locations}#G(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#J(e){this.#K(e),e.forEach((e=>{this.#G(e)}))}#X(e){this.#J(e);let t=0;return e.forEach((e=>{const r=this.locations.indexOf(e);t|=1<<r})),_.log({locationsBitmask:t}),_.assertWithError(t>0,"locationsBitmask must not be zero"),t}#K(e){_.assertWithError(Array.isArray(e),"passed non-array"),_.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return $}get waveformEffects(){return P.WaveformEffects}#Y(e){_.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#ee=1270;static get MaxWaveformEffectSegmentDelay(){return this.#ee}get maxWaveformEffectSegmentDelay(){return P.MaxWaveformEffectSegmentDelay}#te(e){if(null!=e.effect){const t=e.effect;this.#Y(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;_.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),_.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#re(t)}}static#se=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#se}get maxWaveformEffectSegmentLoopCount(){return P.MaxWaveformEffectSegmentLoopCount}#re(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ne=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ne}get maxNumberOfWaveformEffectSegments(){return P.MaxNumberOfWaveformEffectSegments}#ie(e){this.#K(e),_.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#te(e)}))}static#ae=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ae}get maxWaveformEffectSequenceLoopCount(){return P.MaxWaveformEffectSequenceLoopCount}#oe(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ce=2550;static get MaxWaveformSegmentDuration(){return this.#ce}get maxWaveformSegmentDuration(){return P.MaxWaveformSegmentDuration}#ue(e){_.assertTypeWithError(e.amplitude,"number"),_.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),_.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),_.assertTypeWithError(e.duration,"number"),_.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),_.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#he=20;static get MaxNumberOfWaveformSegments(){return this.#he}get maxNumberOfWaveformSegments(){return P.MaxNumberOfWaveformSegments}#ge(e){this.#K(e),_.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ue(e)}))}createWaveformEffectsData(e,t,r=0){this.#ie(t),this.#oe(r);let s=[],n=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=r;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const r=t[e]||{effect:"none"};if(null!=r.effect){const e=r.effect;s[n++]=this.waveformEffects.indexOf(e)}else{if(null==r.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=r;s[n++]=128|Math.floor(e/10)}}}const a=0!=r;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const r=t[e]?.loopCount||0;0!=e&&4!=e||(s[n]=0);const i=e%4*2;s[n]|=r<<i,3!=e&&7!=e||n++}0!=r&&(s[n++]=r);const o=new DataView(Uint8Array.from(s).buffer);return _.log({dataArray:s,dataView:o}),this.#me(e,"waveformEffect",o)}createWaveformData(e,t){this.#ge(t);const r=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{r.setUint8(2*t,Math.floor(127*e.amplitude)),r.setUint8(2*t+1,Math.floor(e.duration/10))})),_.log({dataView:r}),this.#me(e,"waveform",r)}static#A=["waveformEffect","waveform"];static get Types(){return this.#A}get#z(){return P.Types}#le(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.#z.includes(e),`invalid vibrationType "${e}"`)}#me(e,t,r){_.assertWithError(r?.byteLength>0,"no data received");const s=this.#X(e);this.#le(t);const n=this.#z.indexOf(t);_.log({locationsBitmask:s,vibrationTypeIndex:n,dataView:r});const i=U(s,n,r.byteLength,r);return _.log({data:i}),i}}const V=c("Device",{log:!0});class A{constructor(){this.connectionManager=new A.#fe,this.#de.onDataReceived=this.#pe.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()}))}static get#fe(){return D}static#ve=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];get#r(){return A.#ve}#ye=new h(this.#r);addEventListener(e,t,r){this.#ye.addEventListener(e,t,r)}#Se(e){this.#ye.dispatchEvent(e)}removeEventListener(e,t){return this.#ye.removeEventListener(e,t)}#be;get connectionManager(){return this.#be}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Ee.bind(this),e.onMessageReceived=this.#we.bind(this)),this.#be=e,V.log("assigned new connectionManager",this.#be)):V.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#l(){V.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}#Ce=!1;get reconnectOnDisconnection(){return this.#Ce}set reconnectOnDisconnection(e){V.assertTypeWithError(e,"boolean"),this.#Ce=e}#De;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#l(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}get connectionStatus(){return this.#be?.status}#Ee(e){switch(V.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(V.log("starting reconnect interval..."),this.#De=setInterval((()=>{V.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#De&&(V.log("clearing reconnect interval"),clearInterval(this.#De),this.#De=void 0),this.#Se({type:"connectionStatus",message:{connectionStatus:e}}),this.#Se({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Se({type:"isConnected",message:{isConnected:this.isConnected}})}}#Te(){this.#Me=null,this.#Re=null,this.#Le=null;for(const e in this.#We)this.#We[e]=null}#we(e,t){switch(V.log({messageType:e,dataView:t}),e){case"manufacturerName":const r=this.#xe.decode(t);V.log({manufacturerName:r}),this.#Ie({manufacturerName:r});break;case"modelNumber":const s=this.#xe.decode(t);V.log({modelNumber:s}),this.#Ie({modelNumber:s});break;case"softwareRevision":const n=this.#xe.decode(t);V.log({softwareRevision:n}),this.#Ie({softwareRevision:n});break;case"hardwareRevision":const i=this.#xe.decode(t);V.log({hardwareRevision:i}),this.#Ie({hardwareRevision:i});break;case"firmwareRevision":const a=this.#xe.decode(t);V.log({firmwareRevision:a}),this.#Ie({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),V.log({pnpId:o}),this.#Ie({pnpId:o});break;case"serialNumber":const c=this.#xe.decode(t);V.log({serialNumber:c});break;case"batteryLevel":const u=t.getUint8(0);V.log("received battery level",{batteryLevel:u}),this.#Ne(u);break;case"getName":const h=this.#xe.decode(t);V.log({name:h}),this.#Oe(h);break;case"getType":const g=t.getUint8(0),m=this.#z[g];V.log({typeEnum:g,type:m}),this.#ke(m);break;case"getSensorConfiguration":const l=this.#$e.parse(t);V.log({sensorConfiguration:l}),this.#Ue(l);break;case"sensorData":this.#de.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#_e=new TextEncoder;get#Pe(){return A.#_e}static#Ve=new TextDecoder;get#xe(){return A.#Ve}#We={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#We}get#Ae(){return Object.values(this.#We).every((e=>null!=e))}#Ie(e){V.log({partialDeviceInformation:e});for(const t in e)this.#Se({type:t,message:{[t]:e[t]}});Object.assign(this.#We,e),V.log({deviceInformation:this.#We}),this.#Ae&&(V.log("completed deviceInformation"),this.#Se({type:"deviceInformation",message:{deviceInformation:this.#We}}))}#Le=null;get batteryLevel(){return this.#Le}#Ne(e){V.assertTypeWithError(e,"number"),this.#Le!=e?(this.#Le=e,V.log({updatedBatteryLevel:this.#Le}),this.#Se({type:"batteryLevel",message:{batteryLevel:this.#Le}})):V.warn(`duplicate batteryLevel assignment ${e}`)}#Me;get name(){return this.#Me}#Oe(e){V.assertTypeWithError(e,"string"),this.#Me=e,V.log({updatedName:this.#Me}),this.#Se({type:"getName",message:{name:this.#Me}})}static get MinNameLength(){return 2}get minNameLength(){return A.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return A.MaxNameLength}async setName(e){this.#l(),V.assertTypeWithError(e,"string"),V.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),V.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Pe.encode(e);V.log({setNameData:t}),await this.#be.sendMessage("setName",t)}static#A=["leftInsole","rightInsole"];static get Types(){return this.#A}get#z(){return A.Types}#Re;get type(){return this.#Re}#ze(e){V.assertTypeWithError(e,"string"),V.assertWithError(this.#z.includes(e),`invalid type "${e}"`)}#ke(e){this.#ze(e),e!=this.type?(this.#Re=e,V.log({updatedType:this.#Re}),this.#de.deviceType=this.#Re,this.#$e.deviceType=this.#Re,this.#Se({type:"getType",message:{type:this.#Re}})):V.warn("redundant type assignment")}async setType(e){this.#l(),this.#ze(e);const t=this.#z.indexOf(e),r=Uint8Array.from([t]);V.log({setTypeData:r}),await this.#be.sendMessage("setType",r)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Be=["left","right"];static get InsoleSides(){return this.#Be}get insoleSides(){return A.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static#Fe=N.Types;static get SensorTypes(){return this.#Fe}get sensorTypes(){return A.SensorTypes}#$e=new k;#qe;get sensorConfiguration(){return this.#qe}static get MaxSensorRate(){return k.MaxSensorRate}static get SensorRateStep(){return k.SensorRateStep}#Ue(e){this.#qe=e,V.log({updatedSensorConfiguration:this.#qe}),this.#$e.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(V.log("clearing sensorDataManager timestamp..."),this.#de.clearTimestamp()),this.#Se({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#l(),V.log({newSensorConfiguration:e});const t=this.#$e.createData(e);V.log({setSensorConfigurationData:t}),await this.#be.sendMessage("setSensorConfiguration",t)}static#je=!0;static get ClearSensorConfigurationOnLeave(){return this.#je}static set ClearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#je=e}#He=A.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#He}set clearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#He=e}static#Ze={};static get ZeroSensorConfiguration(){return this.#Ze}static{this.SensorTypes.forEach((e=>{this.#Ze[e]=0}))}get zeroSensorConfiguration(){return A.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#de=new N;#pe(e,t){V.log({sensorType:e,sensorData:t}),this.#Se({type:e,message:t}),this.#Se({type:"sensorData",message:t})}#Qe=new P;static get VibrationLocations(){return P.Locations}static get VibrationTypes(){return P.Types}static get VibrationWaveformEffects(){return P.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return P.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return P.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return P.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return P.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return P.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return P.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:r,type:s}=e;let n;switch(s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:i}=t;n=this.#Qe.createWaveformEffectsData(r,s,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Qe.createWaveformData(r,s)}break;default:throw Error(`invalid vibration type "${s}"`)}V.log({type:s,dataView:n}),t=U(t,n)})),await this.#be.sendMessage("triggerVibration",t)}}const z=c("DevicePair",{log:!0});class B{static#ve=["pressure"];get#r(){return B.#ve}#ye=new h(this.#r);addEventListener(e,t,r){this.#ye.addEventListener(e,t,r)}#Se(e){this.#ye.dispatchEvent(e)}removeEventListener(e,t){return this.#ye.removeEventListener(e,t)}static get Sides(){return A.InsoleSides}static get sides(){return B.Sides}#Ge;get left(){return this.#Ge}set left(e){this.#Je(e,"left")}#Ke;get right(){return this.#Ke}set right(e){this.#Je(e,"right")}#Je(e,t){if(z.assertWithError(e.isInsole,"device must be an insole"),z.assertWithError(e.insoleSide==t,`attempted to assign ${e.insoleSide} insole to ${t} side`),e!=this[t]){switch(this[t]&&m(this[t],this.#Xe),g(e,this.#Xe),t){case"left":this.#Ge=e;break;case"right":this.#Ke=e}z.log(`assigned ${t} insole`,e)}else z.warn("attempted to assign the same insole")}#Xe={pressure:this.#Ye.bind(this)};#Ye(){this.isConnected&&this.#et()}get isConnected(){return this.left?.isConnected&&this.right?.isConnected}#et(){}}return{setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)},Device:A,DevicePair:B}}));
