/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class l{static#e={};constructor(e){if(l.#e[e])throw new Error(`"${e}" console already exists`);l.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new l(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function h(e,t){return l.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=h("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const f=h("ConnectionManager",{log:!1});class m{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","getCurrentTime","setCurrentTime","triggerVibration","maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock","getTfliteModelName","setTfliteModelName","getTfliteModelTask","setTfliteModelTask","getTfliteModelSampleRate","setTfliteModelSampleRate","getTfliteModelSensorTypes","setTfliteModelSensorTypes","getTfliteModelNumberOfClasses","setTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteEnableInferencing","setTfliteEnableInferencing","tfliteModelInference"];static get MessageTypes(){return this.#o}get id(){this.#c("id")}onStatusUpdated;onMessageReceived;static#l(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#c(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#l("type")}get type(){return this.constructor.type}#h(){f.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){f.assertWithError(this.constructor!=m,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#h()}#d="not connected";get status(){return this.#d}set status(e){f.assertTypeWithError(e,"string"),this.#d!=e?(f.log(`new connection status "${e}"`),this.#d=e,this.onStatusUpdated?.(this.status)):f.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#u(){f.assertWithError(!this.isConnected,"device is already connected")}#v(){f.assertWithError("connecting"!=this.status,"device is already connecting")}#p(){f.assertWithError(this.isConnected,"device is not connected")}#f(){f.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#m(){this.#p(),this.#f()}async connect(){this.#u(),this.#v(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#u(),this.#v(),f.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#p(),this.#f(),this.status="disconnecting",f.log("disconnecting from device...")}async sendMessage(e,t){this.#m(),f.log("sending message",{messageType:e,data:t})}}const b=h("bluetoothUUIDs",{log:!1});if(t){var S=require("webbluetooth").BluetoothUUID}if(e)S=window.BluetoothUUID;function y(e){return b.assertTypeWithError(e,"string"),b.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function D(e){return S?.getCharacteristic?.(e)}function C(e){return S?.getService?.(e)}const E=Object.freeze({services:{deviceInformation:{uuid:C("device_information"),characteristics:{manufacturerName:{uuid:D("manufacturer_name_string")},modelNumber:{uuid:D("model_number_string")},hardwareRevision:{uuid:D("hardware_revision_string")},firmwareRevision:{uuid:D("firmware_revision_string")},softwareRevision:{uuid:D("software_revision_string")},pnpId:{uuid:D("pnp_id")},serialNumber:{uuid:D("serial_number_string")}}},battery:{uuid:C("battery_service"),characteristics:{batteryLevel:{uuid:D("battery_level")}}},main:{uuid:y("0000"),characteristics:{name:{uuid:y("1000")},type:{uuid:y("1001")},sensorConfiguration:{uuid:y("2000")},pressurePositions:{uuid:y("2001")},sensorScalars:{uuid:y("2002")},currentTime:{uuid:y("2003")},sensorData:{uuid:y("2004")},vibration:{uuid:y("3000")},maxFileLength:{uuid:y("4000")},fileTransferType:{uuid:y("4001")},fileLength:{uuid:y("4002")},fileChecksum:{uuid:y("4003")},fileTransferCommand:{uuid:y("4004")},fileTransferStatus:{uuid:y("4005")},fileTransferBlock:{uuid:y("4006")},tfliteModelName:{uuid:y("5000")},tfliteModelTask:{uuid:y("5001")},tfliteModelSampleRate:{uuid:y("5002")},tfliteModelSensorTypes:{uuid:y("5003")},tfliteModelNumberOfClasses:{uuid:y("5004")},tfliteModelIsReady:{uuid:y("5005")},tfliteCaptureDelay:{uuid:y("5006")},tfliteThreshold:{uuid:y("5007")},tfliteEnableInferencing:{uuid:y("5008")},tfliteModelInference:{uuid:y("5009")}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{dfu:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.dfu.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),T=E.serviceUUIDs,M=E.optionalServiceUUIDs,w=[...T,...M];function L(e){return E.getServiceNameFromUUID(e)}const k=[],W=[],N=[];function I(e){return E.getCharacteristicNameFromUUID(e)}function R(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":case"fileTransferCommand":case"fileTransferBlock":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":case"currentTime":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferStatus":case"fileTransferBlock":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferCommand":case"fileTransferBlock":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(E.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{T.includes(t.uuid)&&k.push(s.uuid),W.push(s.uuid),N.push(e)}))}),[]);h("BluetoothConnectionManager",{log:!0});class x extends m{onCharacteristicValueChanged(e,t){switch(e){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":case"maxFileLength":case"fileTransferStatus":case"tfliteModelIsReady":case"tfliteModelInference":this.onMessageReceived(e,t);break;case"name":this.onMessageReceived("getName",t);break;case"type":this.onMessageReceived("getType",t);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",t);break;case"currentTime":this.onMessageReceived("getCurrentTime",t);break;case"fileTransferType":this.onMessageReceived("getFileTransferType",t);break;case"fileLength":this.onMessageReceived("getFileLength",t);break;case"fileChecksum":this.onMessageReceived("getFileChecksum",t);break;case"fileTransferBlock":this.onMessageReceived("getFileTransferBlock",t);break;case"tfliteModelName":this.onMessageReceived("getTfliteModelName",t);break;case"tfliteModelTask":this.onMessageReceived("getTfliteModelTask",t);break;case"tfliteModelSampleRate":this.onMessageReceived("getTfliteModelSampleRate",t);break;case"tfliteModelSensorTypes":this.onMessageReceived("getTfliteModelSensorTypes",t);break;case"tfliteModelNumberOfClasses":this.onMessageReceived("getTfliteModelNumberOfClasses",t);break;case"tfliteCaptureDelay":this.onMessageReceived("getTfliteCaptureDelay",t);break;case"tfliteThreshold":this.onMessageReceived("getTfliteThreshold",t);break;case"tfliteEnableInferencing":this.onMessageReceived("getTfliteEnableInferencing",t);break;default:throw new Error(`uncaught characteristicName "${e}"`)}}characteristicNameForMessageType(e){switch(e){case"setName":return"name";case"setType":return"type";case"setSensorConfiguration":return"sensorConfiguration";case"setCurrentTime":return"currentTime";case"triggerVibration":return"vibration";case"setFileTransferType":return"fileTransferType";case"setFileLength":return"fileLength";case"setFileChecksum":return"fileChecksum";case"setFileTransferCommand":return"fileTransferCommand";case"setFileTransferBlock":return"fileTransferBlock";case"setTfliteModelName":return"tfliteModelName";case"setTfliteModelTask":return"tfliteModelTask";case"setTfliteModelSampleRate":return"tfliteModelSampleRate";case"setTfliteModelSensorTypes":return"tfliteModelSensorTypes";case"setTfliteModelNumberOfClasses":return"tfliteModelNumberOfClasses";case"setTfliteCaptureDelay":return"tfliteCaptureDelay";case"setTfliteThreshold":return"tfliteThreshold";case"setTfliteEnableInferencing":return"tfliteEnableInferencing";default:throw Error(`no characteristicName for messageType "${e}"`)}}}const A=h("WebBluetoothConnectionManager",{log:!1});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var O={bluetooth:t}}if(e)O=window.navigator;class U extends x{get id(){return this.device?.id}#b={characteristicvaluechanged:this.#S.bind(this)};#y={gattserverdisconnected:this.#D.bind(this)};static get isSupported(){return"bluetooth"in O}static get type(){return"webBluetooth"}#C;get device(){return this.#C}set device(e){this.#C!=e?(this.#C&&p(this.#C,this.#y),e&&v(e,this.#y),this.#C=e):A.log("tried to assign the same BluetoothDevice")}get server(){return this.#C?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#T=new Map;async connect(){await super.connect();try{const t=await O.bluetooth.requestDevice({filters:[{services:T}],optionalServices:e?M:[]});A.log("got BluetoothDevice"),this.device=t,A.log("connecting to device...");const s=await this.device.gatt.connect();A.log(`connected to device? ${s.connected}`),await this.#M(),A.log("fully connected"),this.status="connected"}catch(e){A.error(e),this.status="not connected",this.server?.disconnect(),this.#w()}}async#M(){this.#w(),A.log("getting services...");const e=await this.server.getPrimaryServices();A.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),A.log("getting characteristics...");for(const t in e){const i=e[t];A.log({service:i});const r=L(i.uuid);if(A.assertWithError(r,`no name found for service uuid "${i.uuid}"`),A.log(`got "${r}" service`),"dfu"==r){A.log("skipping dfu service");continue}i._name=r,this.#E.set(r,i),A.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();A.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];A.log({characteristic:t});const i=I(t.uuid);A.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),A.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#T.set(i,t),v(t,this.#b);const o=t.properties||R(i);o.notify&&(A.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(A.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#L(t))}}}#w(){this.device&&p(this.device,this.#y),this.#T.forEach((e=>{p(e,this.#b)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#w(),this.status="not connected"}#S(e){A.log("oncharacteristicvaluechanged");const t=e.target;this.#L(t)}#L(e){A.log("onCharacteristicValue");const t=e._name;A.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),A.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;A.assertWithError(s,`no data found for "${t}" characteristic`),A.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}#D(e){A.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){await super.sendMessage(...arguments);const i=this.characteristicNameForMessageType(e);A.log({characteristicName:i});const r=this.#T.get(i);A.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||R(i);a.read&&!a.notify&&(A.log("reading value after write..."),await r.readValue(),(s||n)&&this.#L(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),A.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(A.log("successfully reconnected!"),await this.#M(),this.status="connected"):(A.log("unable to reconnect"),this.status="not connected")}}const P={min:1/0,max:-1/0};class ${#k=Object.assign({},P);reset(){Object.assign(this.#k,P)}update(e){this.#k.min=Math.min(e,this.#k.min),this.#k.max=Math.max(e,this.#k.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#k.min,this.#k.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class V{#k={x:new $,y:new $};reset(){this.#k.x.reset(),this.#k.y.reset()}update(e){this.#k.x.update(e.x),this.#k.y.update(e.y)}getNormalization(e){return{x:this.#k.x.getNormalization(e.x),y:this.#k.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const _=h("PressureSensorDataManager",{log:!0});class F{#W=[];get positions(){return this.#W}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;_.log({positions:t}),this.#W=t,this.#N=(s=this.numberOfSensors,n=()=>new $,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#N;#I=new V;resetRange(){this.#N.forEach((e=>e.reset())),this.#I.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),r=this.#N[s].updateAndGetNormalization(i),a=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:r,position:a},t.rawSum+=i,t.normalizedSum+=r/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#I.updateAndGetNormalization(t.center)),_.log({pressure:t}),t}}const B=h("MotionSensorDataManager",{log:!1});class z{static#R=6;static get Vector3Size(){return this.#R}get vector3Size(){return z.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return B.log({vector:r}),r}static#x=8;static get QuaternionSize(){return this.#x}get quaternionSize(){return z.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return B.log({quaternion:a}),a}}h("BarometerSensorDataManager",{log:!0});class q{static#A={barometer:.78125};static get Scalars(){return this.#A}get scalars(){return q.Scalars}}const j=h("ArrayBufferUtils",{log:!1}),H=new TextEncoder;function G(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return Q(e)}if(e instanceof Array){return G(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return Q(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function J(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function Q(e){const t=H.encode(e);return G(t.byteLength,t)}function Z(e,t,s){let n;return s&&(n=e.byteOffset+t+s),j.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const K=h("ParseUtils",{log:!0}),X=new TextDecoder;function Y(e,t=0){const s=e.getUint8(t++);return{string:X.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function ee(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),K.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),K.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=Z(e,i,o);K.log({_dataView:c}),s(a,c),i+=o}}const te=h("SensorDataManager",{log:!0});class se{pressureSensorDataManager=new F;motionSensorDataManager=new z;barometerSensorDataManager=new q;static#O=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#O}get types(){return se.Types}#U=new Map;static AssertValidSensorType(e){te.assertTypeWithError(e,"string"),te.assertWithError(this.#O.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){te.assertTypeWithError(e,"number"),te.assertWithError(e in this.#O,`invalid sensorTypeEnum ${e}`)}onDataReceived;#P(e,t){let s=Date.now();s-=s%65536;return s+e.getUint16(t,!0)}parseData(e){te.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#P(e,t);t+=2;ee(new DataView(e.buffer,t),se.Types,((e,t)=>{const n=e,i=this.#U.get(n);let r;switch(n){case"pressure":r=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:te.error(`uncaught sensorType "${n}"`)}te.assertWithError(r,`no value defined for sensorType "${n}"`),this.onDataReceived?.(n,{timestamp:s,[n]:r})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=se.Types[s];if(!n){te.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);te.log({sensorType:n,sensorScalar:i}),this.#U.set(n,i)}}}const ne=h("SensorConfigurationManager",{log:!1});class ie{#$;#V(e){ne.assertWithError(this.#$,"must get initial sensorConfiguration");const t=this.#$?.includes(e);return ne.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=se.Types[n];if(!i){ne.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);ne.log({sensorType:i,sensorRate:r}),t[i]=r}return ne.log({parsedSensorConfiguration:t}),this.#$=Object.keys(t),t}static#_=65535;static get MaxSensorRate(){return this.#_}get maxSensorRate(){return ie.MaxSensorRate}static#F=5;static get SensorRateStep(){return this.#F}get sensorRateStep(){return ie.SensorRateStep}static#B(e){ne.assertTypeWithError(e,"number"),ne.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),ne.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),ne.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#z(e){ie.#B(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#V(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{se.AssertValidSensorType(t);const i=se.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#z(r),s.setUint16(3*n+1,e[t],!0)})),ne.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const re=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ae=h("VibrationManager");class oe{static#q=["front","rear"];static get Locations(){return this.#q}get locations(){return oe.Locations}#j(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#H(e){this.#G(e),e.forEach((e=>{this.#j(e)}))}#J(e){this.#H(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ae.log({locationsBitmask:t}),ae.assertWithError(t>0,"locationsBitmask must not be zero"),t}#G(e){ae.assertWithError(Array.isArray(e),"passed non-array"),ae.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return re}get waveformEffects(){return oe.WaveformEffects}#Q(e){ae.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#Z=1270;static get MaxWaveformEffectSegmentDelay(){return this.#Z}get maxWaveformEffectSegmentDelay(){return oe.MaxWaveformEffectSegmentDelay}#K(e){if(null!=e.effect){const t=e.effect;this.#Q(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ae.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ae.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#X(t)}}static#Y=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#Y}get maxWaveformEffectSegmentLoopCount(){return oe.MaxWaveformEffectSegmentLoopCount}#X(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#ee=8;static get MaxNumberOfWaveformEffectSegments(){return this.#ee}get maxNumberOfWaveformEffectSegments(){return oe.MaxNumberOfWaveformEffectSegments}#te(e){this.#G(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#K(e)}))}static#se=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#se}get maxWaveformEffectSequenceLoopCount(){return oe.MaxWaveformEffectSequenceLoopCount}#ne(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ie=2550;static get MaxWaveformSegmentDuration(){return this.#ie}get maxWaveformSegmentDuration(){return oe.MaxWaveformSegmentDuration}#re(e){ae.assertTypeWithError(e.amplitude,"number"),ae.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ae.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ae.assertTypeWithError(e.duration,"number"),ae.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ae.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#ae=20;static get MaxNumberOfWaveformSegments(){return this.#ae}get maxNumberOfWaveformSegments(){return oe.MaxNumberOfWaveformSegments}#oe(e){this.#G(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#re(e)}))}createWaveformEffectsData(e,t,s=0){this.#te(t),this.#ne(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ae.log({dataArray:n,dataView:o}),this.#ce(e,"waveformEffect",o)}createWaveformData(e,t){this.#oe(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ae.log({dataView:s}),this.#ce(e,"waveform",s)}static#O=["waveformEffect","waveform"];static get Types(){return this.#O}get#le(){return oe.Types}#he(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.#le.includes(e),`invalid vibrationType "${e}"`)}#ce(e,t,s){ae.assertWithError(s?.byteLength>0,"no data received");const n=this.#J(e);this.#he(t);const i=this.#le.indexOf(t);ae.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=G(n,i,s.byteLength,s);return ae.log({data:r}),r}}const ce=h("FileTransferManager",{log:!0});class le{static#O=["tflite"];static get Types(){return this.#O}get types(){return le.Types}assertValidType(e){ce.assertEnumWithError(e,this.types)}assertValidTypeEnum(e){ce.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#ge=["idle","sending","receiving"];static get Statuses(){return this.#ge}get statuses(){return le.Statuses}assertValidStatusEnum(e){ce.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#de=["startSend","startReceive","cancel"];static get Commands(){return this.#de}get commands(){return le.Commands}assertValidCommand(e){ce.assertEnumWithError(e,this.commands)}static async GetFileBuffer(e){let t;if(e instanceof Array)t=e;else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}async getFileBuffer(e){return le.GetFileBuffer(e)}#ue=0;get maxLength(){return this.#ue}parseMaxLength(e){ce.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);ce.log(`maxLength: ${t}kB`),this.#ue=t}assertValidLength(e){ce.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#ve;get type(){return this.#ve}parseType(e){ce.log("parseFileType",e);const t=e.getUint8(0);this.assertValidTypeEnum(t);const s=this.types[t];ce.log({type:s}),this.#ve=s}async#pe(e){this.assertValidType(e),this.type!=e||ce.log(`redundant type assignment ${e}`)}#fe=0;get length(){return this.#fe}parseLength(e){ce.log("parseFileLength",e);const t=e.getUint32(0,!0);ce.log(`length: ${t}kB`),this.#fe=t}async#me(e){ce.assertTypeWithError(e,"number"),this.assertValidLength(e),this.length!=e||ce.log(`redundant length assignment ${e}`)}#be=0;get checksum(){return this.#be}parseChecksum(e){ce.log("checksum",e);const t=e.getUint32(0,!0);ce.log({checksum:t}),this.#be=t}async#Se(e){ce.assertTypeWithError(newLength,"number"),this.checksum!=e||ce.log(`redundant checksum assignment ${e}`)}sendCommand(e){this.assertValidCommand(e)}#d;get status(){return this.#d}parseStatus(e){ce.log("parseFileStatus",e);const t=e.getUint8(0);this.assertValidStatusEnum(t);const s=this.statuses[t];ce.log({status:s}),this.#d=s}parseBlock(e){ce.log("parseFileBlock",e)}sendFile(e,t){this.assertValidType(e)}receiveFile(e){this.assertValidType(e)}}const he=h("TfliteManager",{log:!0});class ge{parseName(e){he.log("parseName",e)}parseTask(e){he.log("parseTask",e)}parseSampleRate(e){he.log("parseSampleRate",e)}parseSensorTypes(e){he.log("parseSensorTypes",e)}parseNumberOfClasses(e){he.log("parseNumberOfClasses",e)}parseIsReady(e){he.log("parseIsReady",e)}parseCaptureDelay(e){he.log("parseCaptureDelay",e)}parseThreshold(e){he.log("parseThreshold",e)}parseEnableInferencing(e){he.log("parseEnableInferencing",e)}parseInference(e){he.log("parseInference",e)}}const de=h("Device",{log:!1});class ue{get id(){return this.#ye?.id}constructor(){this.#De.onDataReceived=this.#Ce.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{ue.#Ee(this)}))}static get#Te(){return U}static#Me=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage"];static get EventTypes(){return this.#Me}get eventTypes(){return ue.#Me}#we=new u(this,this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}#Le(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}#ye;get connectionManager(){return this.#ye}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#ke.bind(this),e.onMessageReceived=this.#We.bind(this)),this.#ye=e,de.log("assigned new connectionManager",this.#ye)):de.log("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new ue.#Te),this.#Ne(),this.connectionManager.connect()}#Ie=!1;get isConnected(){return this.#Ie}#p(){de.assertWithError(this.isConnected,"not connected")}static#Re=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","fileTransferStatus","getTfliteModelName","getTfliteModelTask","getTfliteModelSampleRate","getTfliteModelSensorTypes","getTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteEnableInferencing","tfliteModelInference"];static get AllInformationConnectionMessages(){return this.#Re}get#xe(){return ue.#Re}get#Ae(){return this.#xe.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#Ne(),this.connectionManager?.reconnect()}static#Oe=!1;static get ReconnectOnDisconnection(){return this.#Oe}static set ReconnectOnDisconnection(e){de.assertTypeWithError(e,"boolean"),this.#Oe=e}#Ue=ue.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Ue}set reconnectOnDisconnection(e){de.assertTypeWithError(e,"boolean"),this.#Ue=e}#Pe;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#p(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#ye?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#ye.status;default:return"not connected"}}#ke(e){de.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(de.log("starting reconnect interval..."),this.#Pe=setInterval((()=>{de.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Pe&&(de.log("clearing reconnect interval"),clearInterval(this.#Pe),this.#Pe=void 0),this.#$e()}#Ve(e=!1){this.#Le({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Le({type:this.connectionStatus}),e&&this.#Le({type:"isConnected",message:{isConnected:this.isConnected}})}#$e(){switch(this.#Ie=this.connectionManager?.isConnected&&this.#Ae&&this.#_e,this.connectionStatus){case"connected":this.#Ie&&this.#Ve(!0);break;case"not connected":this.#Ve(!0);break;default:this.#Ve(!1)}}#Ne(){this.latestConnectionMessage.clear(),this.#_e=!1}#We(e,t){switch(de.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Fe.decode(t);de.log({manufacturerName:s}),this.#Be({manufacturerName:s});break;case"modelNumber":const n=this.#Fe.decode(t);de.log({modelNumber:n}),this.#Be({modelNumber:n});break;case"softwareRevision":const i=this.#Fe.decode(t);de.log({softwareRevision:i}),this.#Be({softwareRevision:i});break;case"hardwareRevision":const r=this.#Fe.decode(t);de.log({hardwareRevision:r}),this.#Be({hardwareRevision:r});break;case"firmwareRevision":const a=this.#Fe.decode(t);de.log({firmwareRevision:a}),this.#Be({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),de.log({pnpId:o}),this.#Be({pnpId:o});break;case"serialNumber":const c=this.#Fe.decode(t);de.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);de.log("received battery level",{batteryLevel:l}),this.#ze(l);break;case"getName":const h=this.#Fe.decode(t);de.log({name:h}),this.#qe(h);break;case"getType":const g=t.getUint8(0),d=this.#le[g];de.log({typeEnum:g,type:d}),this.#je(d);break;case"getSensorConfiguration":const u=this.#He.parse(t);de.log({sensorConfiguration:u}),this.#Ge(u);break;case"sensorScalars":this.#De.parseScalars(t);break;case"pressurePositions":this.#De.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":const v=Number(t.getBigUint64(0,!0));this.#Je(v);break;case"sensorData":this.#De.parseData(t);break;case"maxFileLength":this.#Qe.parseMaxLength(t);break;case"getFileTransferType":this.#Qe.parseType(t);break;case"getFileLength":this.#Qe.parseLength(t);break;case"getFileChecksum":this.#Qe.parseChecksum(t);break;case"fileTransferStatus":this.#Qe.parseStatus(t);break;case"getFileTransferBlock":this.#Qe.parseBlock(t);break;case"getTfliteModelName":this.#Ze.parseName(t);break;case"getTfliteModelTask":this.#Ze.parseTask(t);break;case"getTfliteModelSampleRate":this.#Ze.parseSampleRate(t);break;case"getTfliteModelSensorTypes":this.#Ze.parseSensorTypes(t);break;case"getTfliteModelNumberOfClasses":this.#Ze.parseNumberOfClasses(t);break;case"tfliteModelIsReady":this.#Ze.parseIsReady(t);break;case"getTfliteCaptureDelay":this.#Ze.parseCaptureDelay(t);break;case"getTfliteThreshold":this.#Ze.parseThreshold(t);break;case"getTfliteEnableInferencing":this.#Ze.parseEnableInferencing(t);break;case"tfliteModelInference":this.#Ze.parseInference(t);break;default:throw Error(`uncaught messageType ${e}`)}this.latestConnectionMessage.set(e,t),this.#Le({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#Ae&&this.#$e()}latestConnectionMessage=new Map;static#Ke=new TextEncoder;get#Xe(){return ue.#Ke}static#Ye=new TextDecoder;get#Fe(){return ue.#Ye}#_e=!1;#Je(e){de.log({currentTime:e}),this.#_e=0!=e,this.#_e||this.#et()}#et(){de.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#ye.sendMessage("setCurrentTime",e)}#tt={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#tt}get#st(){return Object.values(this.#tt).every((e=>null!=e))}#Be(e){de.log({partialDeviceInformation:e});for(const t in e)this.#Le({type:t,message:{[t]:e[t]}});Object.assign(this.#tt,e),de.log({deviceInformation:this.#tt}),this.#st&&(de.log("completed deviceInformation"),this.#Le({type:"deviceInformation",message:{deviceInformation:this.#tt}}))}#nt=null;get batteryLevel(){return this.#nt}#ze(e){de.assertTypeWithError(e,"number"),this.#nt!=e?(this.#nt=e,de.log({updatedBatteryLevel:this.#nt}),this.#Le({type:"batteryLevel",message:{batteryLevel:this.#nt}})):de.log(`duplicate batteryLevel assignment ${e}`)}#it;get name(){return this.#it}#qe(e){de.assertTypeWithError(e,"string"),this.#it=e,de.log({updatedName:this.#it}),this.#Le({type:"getName",message:{name:this.#it}})}static get MinNameLength(){return 2}get minNameLength(){return ue.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return ue.MaxNameLength}async setName(e){this.#p(),de.assertTypeWithError(e,"string"),de.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),de.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Xe.encode(e);de.log({setNameData:t}),await this.#ye.sendMessage("setName",t)}static#O=["leftInsole","rightInsole"];static get Types(){return this.#O}get#le(){return ue.Types}#ve;get type(){return this.#ve}get typeEnum(){return ue.Types.indexOf(this.type)}#rt(e){de.assertEnumWithError(e,this.#le)}#at(e){de.assertTypeWithError(e,"number"),de.assertWithError(this.#le[e],`invalid typeEnum ${e}`)}#je(e){this.#rt(e),e!=this.type?(this.#ve=e,de.log({updatedType:this.#ve}),this.#Le({type:"getType",message:{type:this.#ve}}),ue.#ot&&ue.#ct(this)):de.log("redundant type assignment")}async#lt(e){this.#at(e);const t=Uint8Array.from([e]);de.log({setTypeData:t}),await this.#ye.sendMessage("setType",t)}async setType(e){this.#p(),this.#rt(e);const t=this.#le.indexOf(e);this.#lt(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ht=["left","right"];static get InsoleSides(){return this.#ht}get insoleSides(){return ue.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return se.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#He=new ie;#gt;get sensorConfiguration(){return this.#gt}get sensorConfigurationData(){return this.#He.createData(this.sensorConfiguration)}static get MaxSensorRate(){return ie.MaxSensorRate}static get SensorRateStep(){return ie.SensorRateStep}#Ge(e){this.#gt=e,de.log({updatedSensorConfiguration:this.#gt}),this.#Le({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#p(),de.log({newSensorConfiguration:e});const t=this.#He.createData(e);de.log({setSensorConfigurationData:t}),await this.#ye.sendMessage("setSensorConfiguration",t)}static#dt=!0;static get ClearSensorConfigurationOnLeave(){return this.#dt}static set ClearSensorConfigurationOnLeave(e){de.assertTypeWithError(e,"boolean"),this.#dt=e}#ut=ue.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#ut}set clearSensorConfigurationOnLeave(e){de.assertTypeWithError(e,"boolean"),this.#ut=e}static#vt={};static get ZeroSensorConfiguration(){return this.#vt}static{this.SensorTypes.forEach((e=>{this.#vt[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#pt=8;static get DefaultNumberOfPressureSensors(){return this.#pt}#De=new se;#Ce(e,t){de.log({sensorType:e,sensorData:t}),this.#Le({type:e,message:t}),this.#Le({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#De.pressureSensorDataManager.resetRange()}#ft=new oe;static get VibrationLocations(){return oe.Locations}static get VibrationTypes(){return oe.Types}static get VibrationWaveformEffects(){return oe.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return oe.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return oe.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return oe.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return oe.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return oe.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return oe.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#ft.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#ft.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#ft.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}de.log({type:s,dataView:n}),t=G(t,n)})),await this.#ye.sendMessage("triggerVibration",t)}static#mt=[];static get ConnectedDevices(){return this.#mt}static#ot=!1;static get UseLocalStorage(){return this.#ot}static set UseLocalStorage(e){this.#bt(),de.assertTypeWithError(e,"boolean"),this.#ot=e,this.#ot&&!this.#St&&this.#yt()}static#Dt={devices:[]};static#St;static get CanUseLocalStorage(){return e&&window.localStorage}static#bt(){de.assertWithError(e,"localStorage is only available in the browser"),de.assertWithError(window.localStorage,"localStorage not found")}static#Ct="BS.Device";static#Et(){this.#bt(),localStorage.setItem(this.#Ct,JSON.stringify(this.#St))}static async#yt(){this.#bt();let e=localStorage.getItem(this.#Ct);if("string"!=typeof e)return de.log("no info found in localStorage"),this.#St=Object.assign({},this.#Dt),void this.#Et();try{const t=JSON.parse(e);de.log({configuration:t}),this.#St=t,this.CanGetDevices&&await this.GetDevices()}catch(e){de.error(e)}}static#ct(e){if("webBluetooth"!=e.connectionType)return void de.log("localStorage is only for webBluetooth devices");this.#bt();const t=this.#St.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#St.devices[t].type=e.type,this.#Et())}static#Tt=[];static get AvailableDevices(){return this.#Tt}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void de.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void de.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void de.warn("bluetooth.getDevices() is not available in this browser");this.#St||this.#yt();const t=this.#St;if(!t.devices||0==t.devices.length)return void de.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return de.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#Tt.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new ue,a=new U;a.device=e,e.name&&r.#qe(e.name),r.#je(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#Mt(),this.AvailableDevices}static#wt=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#wt}static#Lt=new u(this,this.#wt);static AddEventListener(e,t,s){this.#Lt.addEventListener(e,t,s)}static#kt(e){this.#Lt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Lt.removeEventListener(e,t)}static#Ee(e){if(e.isConnected)if(this.#mt.includes(e))de.log("device already included");else{if(de.log("adding device",e),this.#mt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#St.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#St.devices.push(t):this.#St.devices[s]=t,this.#Et()}this.#kt({type:"deviceConnected",message:{device:e}}),this.#kt({type:"deviceIsConnected",message:{device:e}})}else this.#mt.includes(e)?(de.log("removing device",e),this.#mt.splice(this.#mt.indexOf(e),1),this.#kt({type:"deviceDisconnected",message:{device:e}}),this.#kt({type:"deviceIsConnected",message:{device:e}})):de.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));de.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#Mt()}}static#Mt(){de.log({AvailableDevices:this.AvailableDevices}),this.#kt({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new ue;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#Qe=new le;get maxFileLength(){return this.#Qe.maxLength}sendFile(e,t){this.#Qe.sendFile(e,t)}receiveFile(e){this.#Qe.receiveFile(e)}#Ze=new ge}const ve=h("Timer",{log:!1});class pe{#Wt;get callback(){return this.#Wt}set callback(e){ve.assertTypeWithError(e,"function"),ve.log({newCallback:e}),this.#Wt=e,this.isRunning&&this.restart()}#Nt;get interval(){return this.#Nt}set interval(e){ve.assertTypeWithError(e,"number"),ve.assertWithError(e>0,"interval must be above 0"),ve.log({newInterval:e}),this.#Nt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#It=null;get isRunning(){return null!=this.#It}start(){this.isRunning?ve.log("interval already running"):(ve.log("starting interval"),this.#It=setInterval(this.#Wt,this.#Nt))}stop(){this.isRunning?(ve.log("stopping interval"),clearInterval(this.#It),this.#It=null):ve.log("interval already not running")}restart(){this.stop(),this.start()}}const fe=h("BaseScanner");class me{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#h(){fe.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#g(){fe.assertWithError(this.constructor!=me,`${this.constructor.name} must be subclassed`)}constructor(){this.#g(),this.#h(),v(this,this.#Rt)}#Rt={discoveredDevice:this.#xt.bind(this),isScanning:this.#At.bind(this)};static#Me=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Me}get eventTypes(){return me.#Me}#we=new u(this,this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}dispatchEvent(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}get isAvailable(){return!1}#Ot(){fe.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#Ut(){fe.assertWithError(this.isScanning,"not scanning")}#Pt(){fe.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#Ot(),this.#Pt()}stopScan(){this.#Ut()}#At(){this.isScanning?(this.#$t={},this.#Vt={}):this.#_t.stop()}#$t={};get discoveredDevices(){return this.#$t}get discoveredDevicesArray(){return Object.values(this.#$t).sort(((e,t)=>this.#Vt[e.id]-this.#Vt[t.id]))}#Ft(e){fe.assertWithError(this.#$t[e],`no discovered device with id "${e}"`)}#xt(e){const t=e.message.discoveredDevice;this.#$t[t.id]=t,this.#Vt[t.id]=Date.now(),this.#_t.start()}#Vt={};static#Bt=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#Bt}get#zt(){return me.DiscoveredDeviceExpirationTimeout}#_t=new pe(this.#qt.bind(this),1e3);#qt(){const e=Object.entries(this.#$t);if(0==e.length)return void this.#_t.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Vt[e];t-n>this.#zt&&(fe.log("discovered device timeout"),delete this.#$t[e],delete this.#Vt[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#Ot()}get canReset(){return!1}reset(){fe.log("resetting...")}}const be=h("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class Se extends x{get id(){return this.#jt?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#jt?.state}async connect(){await super.connect(),await this.#jt.connectAsync()}async disconnect(){await super.disconnect(),await this.#jt.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);be.log({characteristicName:s});const n=this.#T.get(s);be.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);be.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#jt.connectable}async reconnect(){await super.reconnect(),be.log("attempting to reconnect..."),this.connect()}#jt;get noblePeripheral(){return this.#jt}set noblePeripheral(e){be.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(be.log("newNoblePeripheral",e.id),this.#jt&&(p(this.#jt,this.#Ht),delete this.#jt._connectionManager),e&&(e._connectionManager=this,v(e,this.#Ht)),this.#jt=e):be.log("attempted to assign duplicate noblePeripheral")}#Ht={connect:this.#Gt,disconnect:this.#Jt,rssiUpdate:this.#Qt,servicesDiscover:this.#Zt};async#Gt(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){be.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#jt.discoverServicesAsync(w),await this.#Kt()}async#Jt(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){be.log("onNoblePeripheralDisconnect",e.id),await this.#Kt()}async#Kt(){switch(be.log(`noblePeripheral ${this.id} state ${this.#jt.state}`),this.#jt.state){case"connected":case"connecting":break;case"disconnected":this.#w(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":be.error("noblePeripheral error");break;default:be.log(`uncaught noblePeripheral state ${this.#jt.state}`)}}#w(){be.log("removing noblePeripheral eventListeners"),this.#E.forEach((e=>{p(e,this.#Xt)})),this.#E.clear(),this.#T.forEach((e=>{p(e,this.#Yt)})),this.#T.clear()}async#Qt(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){be.log("onNoblePeripheralRssiUpdate",e.id,t)}async#Zt(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){be.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];be.log("service",s.uuid);const n=L(s.uuid);be.assertWithError(n,`no name found for service uuid "${s.uuid}"`),be.log({serviceName:n}),this.#E.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Xt),await s.discoverCharacteristicsAsync()}}#E=new Map;#Xt={characteristicsDiscover:this.#es};async#es(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){be.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];be.log("characteristic",s.uuid);const n=I(s.uuid);be.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),be.log({characteristicName:n}),this.#T.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Yt),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#ts&&(this.status="connected")}#Yt={data:this.#ss,write:this.#ns,notify:this.#is};#T=new Map;get#ts(){return N.every((e=>this.#T.has(e)))}#ss(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){be.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(J(t)),i=e._name;be.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#ns(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){be.log("onNobleCharacteristicWrite",e.uuid)}#is(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){be.log("onNobleCharacteristicNotify",e.uuid,t)}}const ye=h("NobleScanner",{log:!0});let De=!1;if(t){var Ce=require("@abandonware/noble");De=!0}class Ee extends me{static get isSupported(){return De}#rs=!1;get#as(){return this.#rs}set#as(e){ye.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#rs=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ye.log("duplicate isScanning assignment")}get isScanning(){return this.#as}#os="unknown";get#cs(){return this.#os}set#cs(e){ye.assertTypeWithError(e,"string"),this.#cs!=e?(this.#os=e,ye.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ye.log("duplicate nobleState assignment")}#ls={scanStart:this.#hs.bind(this),scanStop:this.#gs.bind(this),stateChange:this.#ds.bind(this),discover:this.#us.bind(this)};#hs(){ye.log("OnNobleScanStart"),this.#as=!0}#gs(){ye.log("OnNobleScanStop"),this.#as=!1}#ds(e){ye.log("onNobleStateChange",e),this.#cs=e}#us(e){let t;ye.log("onNobleDiscover",e.id),this.#vs[e.id]||(e._scanner=this,this.#vs[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=ue.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(Ce,this.#ls),v(this,this.#ps)}get isAvailable(){return"poweredOn"==this.#cs}startScan(){super.startScan(),Ce.startScanningAsync(T,!0)}stopScan(){super.stopScan(),Ce.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),Ce.reset()}#ps={expiredDiscoveredDevice:this.#fs.bind(this)};#fs(e){const t=e.message.discoveredDevice;this.#vs[t.id]&&delete this.#vs[t.id]}#vs={};#ms(e){ye.assertTypeWithError(e,"string"),ye.assertWithError(this.#vs[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#ms(e);const t=this.#vs[e];ye.log("connecting to discoveredDevice...",e);let s=ue.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#bs(t),await s.connect())}#bs(e){const t=new ue,s=new Se;return s.noblePeripheral=e,t.connectionManager=s,t}}const Te=h("Scanner",{log:!1});let Me;Ee.isSupported?(Te.log("using NobleScanner"),Me=new Ee):Te.log("Scanner not available");var we=Me;const Le=h("DevicePairPressureSensorDataManager",{log:!0});class ke{static get Sides(){return ue.InsoleSides}get sides(){return ue.InsoleSides}#Ss={};#I=new V;resetPressureRange(){this.#I.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(Le.log({pressure:t,insoleSide:s}),this.#Ss[s]=t,this.#ys)return this.#Ds();Le.log("doesn't have all pressure data yet...")}get#ys(){return this.sides.every((e=>e in this.#Ss))}#Ds(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Ss[t].rawSum,e.normalizedSum+=this.#Ss[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Ss[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#I.updateAndGetNormalization(e.center)),Le.log({devicePairPressure:e}),e}}const We=h("DevicePairSensorDataManager",{log:!0});class Ne{static get Sides(){return ue.InsoleSides}get sides(){return ue.InsoleSides}#Cs={};pressureSensorDataManager=new ke;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(We.log({sensorType:s,timestamp:t,event:e}),this.#Cs[s]||(this.#Cs[s]={}),this.#Cs[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else We.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#Cs[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else We.log("no value received")}onDataReceived}const Ie=h("DevicePair",{log:!0});class Re{constructor(){this.#De.onDataReceived=this.#Ce.bind(this)}static#Me=["isConnected","pressure",...ue.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#Me}get eventTypes(){return Re.#Me}#we=new u(this,this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}#Le(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}static get Sides(){return ue.InsoleSides}get sides(){return Re.Sides}#Es;get left(){return this.#Es}#Ts;get right(){return this.#Ts}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#p(){Ie.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Ie.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#Ms),v(e,this.#Ms),t){case"left":this.#Es=e;break;case"right":this.#Ts=e}return Ie.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Le({type:"isConnected",message:{isConnected:this.isConnected}}),this.#Le({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Ie.log("device already assigned")}#Ms={connectionStatus:this.#ws.bind(this),isConnected:this.#Ls.bind(this),sensorData:this.#ks.bind(this),getSensorConfiguration:this.#ws.bind(this)};#ws(e){this.#Le({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#Ls(e){this.#ws(e),this.#Le({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#De=new Ne;#ks(e){this.#ws(e),this.#Le({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#De.onDeviceSensorData(e)}#Ce(e,t){Ie.log({sensorType:e,sensorData:t}),this.#Le({type:e,message:t})}resetPressureRange(){this.#De.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#Ws=new Re;static get shared(){return this.#Ws}static{ue.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Ws.assignInsole(t)}))}}const xe=h("ServerUtils",{log:!1}),Ae=3e7;function Oe(e,...t){xe.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=G(...t.data),n=s.byteLength;xe.assertEnumWithError(t.type,e);return G(e.indexOf(t.type),Uint16Array.from([n]),s)}));return xe.log("messageBuffers",...s),G(...s)}const Ue=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function Pe(...e){return Oe(Ue,...e)}function $e(...e){return xe.log("createDeviceMessage",...e),Oe(ue.EventTypes,...e)}function Ve(...e){return Oe(m.MessageTypes,...e)}const _e=Pe("ping"),Fe=Pe("pong");Pe("isScanningAvailable"),Pe("isScanning"),Pe("startScan"),Pe("stopScan");const Be=Pe("discoveredDevices"),ze=h("WebSocketClientConnectionManager",{log:!0});class qe extends m{static get isSupported(){return e}static get type(){return"webSocketClient"}#Ns;get id(){return this.#Ns}set id(e){ze.assertTypeWithError(e,"string"),this.#Ns!=e?this.#Ns=e:ze.log("redundant id assignment")}#Ie=!1;get isConnected(){return this.#Ie}set isConnected(e){ze.assertTypeWithError(e,"boolean"),this.#Ie!=e?(this.#Ie=e,this.status=this.#Ie?"connected":"not connected",this.#Ie&&this.#Is()):ze.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":ze.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),ze.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){ze.log({dataView:e}),ee(e,ue.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));ze.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":this.onMessageReceived(s,t);break;default:ze.error(`uncaught messageType "${s}"`)}}),!0)}#Is(){this.sendWebSocketMessage(...ue.AllInformationConnectionMessages)}}const je=h("WebSocketClient",{log:!0});class He{static#Me=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Me}get eventTypes(){return He.#Me}#we=new u(this,this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}#Le(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}#Rs;get webSocket(){return this.#Rs}set webSocket(e){this.#Rs!=e?(je.log("assigning webSocket",e),this.#Rs&&p(this.#Rs,this.#xs),v(e,this.#xs),this.#Rs=e,je.log("assigned webSocket")):je.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#As(){je.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Os(){je.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#Os(),this.#Us="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#As(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Us="disconnecting",this.webSocket.close()}reconnect(){this.#Os(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#Oe=!0;static get ReconnectOnDisconnection(){return this.#Oe}static set ReconnectOnDisconnection(e){je.assertTypeWithError(e,"boolean"),this.#Oe=e}#Ue=He.#Oe;get reconnectOnDisconnection(){return this.#Ue}set reconnectOnDisconnection(e){je.assertTypeWithError(e,"boolean"),this.#Ue=e}#Ps(e){this.#As(),this.#Rs.send(e)}#$s(...e){this.#Ps(Pe(...e))}#xs={open:this.#Vs.bind(this),message:this.#_s.bind(this),close:this.#Fs.bind(this),error:this.#Bs.bind(this)};#Vs(e){je.log("webSocket.open",e),this.#zs.start(),this.#Us="connected"}async#_s(e){je.log("webSocket.message",e),this.#zs.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#qs(s)}#Fs(e){je.log("webSocket.close",e),this.#Us="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#zs.stop(),this.#Ue&&setTimeout((()=>{this.reconnect()}),3e3)}#Bs(e){je.log("webSocket.error",e)}#js="not connected";get#Us(){return this.#js}set#Us(e){switch(je.assertTypeWithError(e,"string"),je.log({newConnectionStatus:e}),this.#js=e,this.#Le({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Le({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Le({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#$s("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Hs=!1,this.#as=!1)}}get connectionStatus(){return this.#Us}#qs(e){je.log("parseMessage",{dataView:e}),ee(e,Ue,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#Gs();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));je.log({isScanningAvailable:e}),this.#Hs=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));je.log({isScanning:e}),this.#as=e}break;case"discoveredDevice":{const{string:e}=Y(t,n);je.log({discoveredDeviceString:e});const s=JSON.parse(e);je.log({discoveredDevice:s}),this.#xt(s)}break;case"expiredDiscoveredDevice":{const{string:e}=Y(t,n);this.#fs(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=Y(t,n);je.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);je.log({connectedDeviceIds:s}),this.#Js(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=Y(t,n);n=s;const i=this.#Qs[e];je.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=Z(t,n);r.onWebSocketMessage(a)}break;default:je.error(`uncaught messageType "${s}"`)}}),!0)}#zs=new pe(this.#Zs.bind(this),Ae);#Zs(){this.#$s("ping")}#Gs(){this.#$s("pong")}#Ks=!1;get#Hs(){return this.#Ks}set#Hs(e){je.assertTypeWithError(e,"boolean"),this.#Ks=e,this.#Le({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Xs()}get isScanningAvailable(){return this.#Hs}#Ys(){this.#As(),je.assertWithError(this.isScanningAvailable,"scanning is not available")}#en(){this.#$s("isScanningAvailable")}#rs=!1;get#as(){return this.#rs}set#as(e){je.assertTypeWithError(e,"boolean"),this.#rs=e,this.#Le({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#as}#Xs(){this.#$s("isScanning")}#Ut(){je.assertWithError(this.isScanning,"is not scanning")}#Pt(){je.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Pt(),this.#$s("startScan")}stopScan(){this.#Ut(),this.#$s("stopScan")}toggleScan(){this.#Ys(),this.isScanning?this.stopScan():this.startScan()}#$t={};get discoveredDevices(){return this.#$t}#xt(e){je.log({discoveredDevice:e}),this.#$t[e.id]=e,this.#Le({type:"discoveredDevice",message:{discoveredDevice:e}})}#tn(){this.#Ps(Be)}#fs(e){je.log({expiredDeviceId:e});const t=this.#$t[e];t?(je.log({expiredDiscoveredDevice:t}),delete this.#$t[e],this.#Le({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):je.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#sn(e)}#sn(e){this.#As(),je.assertTypeWithError(e,"string");const t=this.#nn(e);return t.connect(),t}#in(e){this.#Ps(this.#rn(e))}#rn(e){return Pe({type:"connectToDevice",data:e})}#bs(e){const t=new ue,s=new qe;return s.id=e,s.sendWebSocketMessage=this.#an.bind(this,e),s.sendWebSocketConnectMessage=this.#in.bind(this,e),s.sendWebSocketDisconnectMessage=this.#on.bind(this,e),t.connectionManager=s,t}#nn(e){let t=this.#Qs[e];return t||(t=this.#bs(e),this.#Qs[e]=t),t}#Js(e){je.log({deviceIds:e}),e.forEach((e=>{this.#nn(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#cn(e)}#cn(e){this.#As(),je.assertTypeWithError(e,"string");const t=this.devices[e];return je.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#on(e){this.#Ps(this.#ln(e))}#ln(e){return Pe({type:"disconnectFromDevice",data:e})}#an(e,...t){this.#Ps(this.#hn(e,...t))}#hn(e,...t){return Pe({type:"deviceMessage",data:[e,Ve(...t)]})}#Qs={};get devices(){return this.#Qs}}const Ge=h("BaseServer",{log:!0});class Je{#g(){Ge.assertWithError(this.constructor!=Je,`${this.constructor.name} must be subclassed`)}static#Me=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Me}get eventTypes(){return Je.#Me}#we=new u(this,this.eventTypes);addEventListener(e,t,s){this.#we.addEventListener(e,t,s)}dispatchEvent(e){this.#we.dispatchEvent(e)}removeEventListener(e,t){return this.#we.removeEventListener(e,t)}constructor(){this.#g(),Ge.assertWithError(we,"no scanner defined"),v(we,this.#gn),v(ue,this.#dn),v(this,this.#un)}get numberOfClients(){return 0}static#vn=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#vn}static set ClearSensorConfigurationsWhenNoClients(e){Ge.assertTypeWithError(e,"boolean"),this.#vn=e}#pn=Je.#vn;get clearSensorConfigurationsWhenNoClients(){return this.#pn}set clearSensorConfigurationsWhenNoClients(e){Ge.assertTypeWithError(e,"boolean"),this.#pn=e}#un={clientConnected:this.#fn.bind(this),clientDisconnected:this.#mn.bind(this)};#fn(e){e.message.client,Ge.log("onClientConnected")}#mn(e){e.message.client,Ge.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&ue.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){Ge.log("broadcasting",e)}#gn={isAvailable:this.#bn.bind(this),isScanning:this.#Sn.bind(this),discoveredDevice:this.#yn.bind(this),expiredDiscoveredDevice:this.#fs.bind(this)};#bn(e){this.broadcastMessage(this.#Dn)}get#Dn(){return Pe({type:"isScanningAvailable",data:we.isAvailable})}#Sn(e){this.broadcastMessage(this.#Cn)}get#Cn(){return Pe({type:"isScanning",data:we.isScanning})}#yn(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#En(t))}#En(e){return Pe({type:"discoveredDevice",data:e})}#fs(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#Tn(t))}#Tn(e){return Pe({type:"expiredDiscoveredDevice",data:e.id})}get#Mn(){return Pe(...we.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#wn(){return Pe({type:"connectedDevices",data:JSON.stringify(ue.ConnectedDevices.map((e=>e.id)))})}#Ln={connectionMessage:this.#kn.bind(this)};#hn(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#kn(e){const t=e.target;if(Ge.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#Wn(t,this.#hn(t,s,n)))}#dn={deviceConnected:this.#Nn.bind(this),deviceDisconnected:this.#In.bind(this),deviceIsConnected:this.#Ls.bind(this)};#Nn(e){const t=e.message.device;Ge.log("onDeviceConnected",t.id),v(t,this.#Ln)}#In(e){const t=e.message.device;Ge.log("onDeviceDisconnected",t.id),p(t,this.#Ln)}#Ls(e){const t=e.message.device;Ge.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#Rn(t))}#Rn(e){return this.#Wn(e,{type:"isConnected",data:e.isConnected})}#Wn(e,...t){return Pe({type:"deviceMessage",data:[e.id,$e(...t)]})}parseClientMessage(e){let t=[];if(ee(e,Ue,((e,s)=>{const n=e;switch(n){case"ping":t.push(Fe);break;case"pong":break;case"isScanningAvailable":t.push(this.#Dn);break;case"isScanning":t.push(this.#Cn);break;case"startScan":we.startScan();break;case"stopScan":we.stopScan();break;case"discoveredDevices":t.push(this.#Mn);break;case"connectToDevice":{const{string:e}=Y(s);we.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=Y(s),t=ue.ConnectedDevices.find((t=>t.id==e));if(!t){Ge.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#wn);break;case"deviceMessage":{const{string:e,byteOffset:n}=Y(s),i=ue.ConnectedDevices.find((t=>t.id==e));if(!i){Ge.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:Ge.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return G(t)}parseClientDeviceMessage(e,t){Ge.log("onDeviceMessage",e.id,t);let s=[];if(ee(t,m.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":s.push(this.#hn(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:Ge.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#Wn(e,...s)}}const Qe=h("WebSocketServer",{log:!0});t&&require("ws");var Ze={setAllConsoleLevelFlags:function(e){l.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){l.setLevelFlagsForType(e,t)},Device:ue,DevicePair:Re,WebSocketClient:He,WebSocketServer:class extends Je{get numberOfClients(){return this.#xn?.clients.size||0}#xn;get server(){return this.#xn}set server(e){this.#xn!=e?(Qe.log("assigning server..."),this.#xn&&(Qe.log("clearing existing server..."),p(this.#xn,this.#un)),v(e,this.#un),this.#xn=e,Qe.log("assigned server")):Qe.log("redundant WebSocket assignment")}#un={close:this.#An.bind(this),connection:this.#On.bind(this),error:this.#Un.bind(this),headers:this.#Pn.bind(this),listening:this.#$n.bind(this)};#An(){Qe.log("server.close")}#On(e){Qe.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new pe((()=>this.#Vn(e)),Ae),e.pingClientTimer.start(),v(e,this.#_n),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#Un(e){Qe.error(e)}#Pn(){}#$n(){Qe.log("server.listening")}#_n={open:this.#Fn.bind(this),message:this.#Bn.bind(this),close:this.#zn.bind(this),error:this.#qn.bind(this)};#Fn(e){Qe.log("client.open")}#Bn(e){Qe.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(J(e.data));this.#jn(t,s)}#zn(e){Qe.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#_n),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#qn(e){Qe.log("client.error")}#jn(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Vn(e){e.isAlive?(e.isAlive=!1,e.send(_e)):e.terminate()}},Scanner:we};return Ze}));
