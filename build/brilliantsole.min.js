/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BrilliantSole=t()}(this,(function(){"use strict";const e=!1,t="undefined"!=typeof window&&"undefined"!==window?.document,n="undefined"!=typeof process&&null!=process?.versions?.node;function r(){}const s=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),i=console.assert.bind(console);class c{static#e={};constructor(e){if(c.#e[e])throw new Error(`"${e}" console already exists`);c.#e[e]=this}#t={log:e,warn:e,error:e};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new c(e)}get log(){return this.#t.log?s:r}get warn(){return this.#t.warn?a:r}get error(){return this.#t.error?o:r}get assert(){return this.#t.assert?i:r}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}}function u(e,t){return c.create(e,t)}const h=u("EventDispatcher",{log:!1});class m{constructor(e){h.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#n=e}#n;#r(e){return!this.#n||this.#n.includes(e)}#s(e){h.assertWithError(this.#r(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,n){if(h.log(`adding "${e}" eventListener`,t),this.#s(e),this.#a||(this.#a={}),n?.once){const n=t;t=function t(r){n.apply(this,arguments),this.removeEventListener(e,t)}}const r=this.#a;r[e]||(r[e]=[]),r[e].includes(t)||r[e].push(t)}hasEventListener(e,t){return h.log(`has "${e}" eventListener?`,t),this.#s(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(h.log(`removing "${e}" eventListener`,t),this.#s(e),this.hasEventListener(e,t)){const n=this.#a[e].indexOf(t);return this.#a[e].splice(n,1),!0}return!1}dispatchEvent(e){if(this.#s(e.type),this.#a?.[e.type]){e.target=this;const t=this.#a[e.type].slice(0);for(let n=0,r=t.length;n<r;n++)t[n].call(this,e)}}}function g(e,t){Object.entries(t).forEach((([t,n])=>{e.addEventListener(t,n)}))}const f=u("ConnectionManager");class l{onStatusUpdated;onMessageReceived;static#o(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#i(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#o("type")}get type(){return this.constructor.type}#c(){f.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#u(){f.assertWithError(this.constructor!=l,`${this.constructor.name} must be subclassed`)}constructor(){this.#u(),this.#c()}#h="not connected";get status(){return this.#h}set status(e){f.assertTypeWithError(e,"string"),this.#h!=e?(f.log(`new connection status "${e}"`),this.#h=e,this.onStatusUpdated?.(this.status)):f.warn("same connection status")}get isConnected(){return"connected"==this.status}#m(){f.assertWithError(!this.isConnected,"device is already connected")}#g(){f.assertWithError("connecting"!=this.status,"device is already connecting")}#f(){f.assertWithError(this.isConnected,"device is not connected")}#l(){f.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#p(){this.#f(),this.#l()}async connect(){this.#m(),this.#g(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#m(),this.#g(),f.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#f(),this.#l(),this.status="disconnecting"}async sendMessage(e,t){this.#p(),f.log("sending message",{messageType:e,data:t})}}if(n){var p=require("webbluetooth").BluetoothUUID}function d(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function v(e){return p.getCharacteristic(e)}function y(e){return p.getService(e)}const S=Object.freeze({services:{deviceInformation:{uuid:y("device_information"),characteristics:{manufacturerName:{uuid:v("manufacturer_name_string")},modelNumber:{uuid:v("model_number_string")},hardwareRevision:{uuid:v("hardware_revision_string")},firmwareRevision:{uuid:v("firmware_revision_string")},softwareRevision:{uuid:v("software_revision_string")},pnpId:{uuid:v("pnp_id")}}},battery:{uuid:y("battery_service"),characteristics:{batteryLevel:{uuid:v("battery_level")}}},main:{uuid:d(0),characteristics:{name:{uuid:d(1)},type:{uuid:d(2)},sensorConfiguration:{uuid:d(3)},sensorData:{uuid:d(4)},vibration:{uuid:d(5)}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,n])=>e==n.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((n=>(t=Object.entries(n.characteristics).find((([t,n])=>e==n.uuid))?.[0],t))),t}}),b=S.serviceUUIDs,E=S.optionalServiceUUIDs;const w=u("WebBluetoothConnectionManager",{log:!0});if(n){const e=require("webbluetooth"),{bluetooth:t}=e;var C={bluetooth:t}}class D extends l{#d={characteristicvaluechanged:this.#v.bind(this)};#y={gattserverdisconnected:this.#S.bind(this)};static get isSupported(){return"bluetooth"in C}static get type(){return"web bluetooth"}#b;get device(){return this.#b}set device(e){var t,n;this.#b!=e?(this.#b&&(t=this.#b,n=this.#y,Object.entries(n).forEach((([e,n])=>{t.removeEventListener(e,n)}))),e&&g(e,this.#y),this.#b=e):w.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#w=new Map;async connect(){await super.connect();try{const e=await C.bluetooth.requestDevice({filters:[{services:b}],optionalServices:E});w.log("got BluetoothDevice",e),this.device=e,w.log("connecting to device...");const t=await this.device.gatt.connect();w.log(`connected to device? ${t.connected}`),w.log("getting services...");const n=await t.getPrimaryServices();w.log("got services",n),w.log("getting characteristics...");const r=n.map((async e=>{const t=(n=e.uuid,S.getServiceNameFromUUID(n));var n;w.assertWithError(t,`no name found for service uuid "${e.uuid}"`),w.log(`got "${t}" service`),e._name=t,this.#E.set(t,e),w.log("getting characteristics for service",e);const r=await e.getCharacteristics();w.log("got characteristics for service",e,r);const s=r.map((async e=>{const n=(r=e.uuid,S.getCharacteristicNameFromUUID(r));var r;w.assertWithError(n,`no name found for characteristic uuid "${e.uuid}" in "${t}" service`),w.log(`got "${n}" characteristic in "${t}" service`),e._name=n,this.#w.set(n,e),g(e,this.#d),e.properties.read&&await e.readValue(),e.properties.notify&&(w.log(`starting notifications for "${n}" characteristic`,e),await e.startNotifications())}));await Promise.all(s)}));await Promise.all(r),w.log("fully connected"),this.status="connected"}catch(e){w.error(e),this.status="not connected"}}async disconnect(){await super.disconnect(),w.log("disconnecting from device..."),this.server.disconnect()}#v(e){w.log("oncharacteristicvaluechanged",e);const t=e.target,n=t._name;w.assertWithError(n,`no name found for characteristic with uuid "${t.uuid}"`),w.log(`oncharacteristicvaluechanged for "${n}" characteristic`,e);const r=t.value;switch(w.assertWithError(r,`no data found for "${n}" characteristic`),w.log(`data for "${n}" characteristic`,Array.from(new Uint8Array(r.buffer))),n){case"manufacturerName":this.onMessageReceived("manufacturerName",r);break;case"modelNumber":this.onMessageReceived("modelNumber",r);break;case"softwareRevision":this.onMessageReceived("softwareRevision",r);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",r);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",r);break;case"pnpId":this.onMessageReceived("pnpId",r);break;case"batteryLevel":this.onMessageReceived("batteryLevel",r);break;case"name":this.onMessageReceived("getName",r);break;case"type":this.onMessageReceived("getType",r);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",r);break;case"sensorData":this.onMessageReceived("sensorData",r);break;default:throw new Error(`uncaught characteristicName "${n}"`)}}#S(e){w.log("gattserverdisconnected",e),this.status="not connected"}async sendMessage(e,t){let n;switch(await super.sendMessage(...arguments),e){case"setName":n=this.#w.get("name");break;case"setType":n=this.#w.get("type");break;case"setSensorConfiguration":n=this.#w.get("sensorConfiguration");break;default:throw Error(`uncaught messageType "${e}"`)}w.assert(n,"no characteristic found"),await n.writeValueWithResponse(t),await n.readValue()}get canReconnect(){return Boolean(this.server)}async reconnect(){await super.reconnect(),w.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(w.log("successfully reconnected!"),this.status="connected"):(w.log("unable to reconnect"),this.status="not connected")}}const M=u("NobleConnectionManager",{log:!0});n&&require("@abandonware/noble");class W extends l{static get isSupported(){return n}static get type(){return"noble"}get isConnected(){return!1}async connect(){await super.connect()}async disconnect(){await super.disconnect(),M.log("disconnecting from device...")}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!1}async reconnect(){await super.reconnect(),M.log("attempting to reconnect...")}}const T=u("SensorDataManager",{log:!0});class R{#C;get deviceType(){return this.#C}set deviceType(e){T.assertTypeWithError(e,"string"),this.#C!=e?(T.log({newDeviceType:e}),this.#C=e):T.warn(`redundant deviceType assignment "${e}"`)}static#D=["pressure","accelerometer","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#D}get#M(){return R.#D}static assertValidSensorType(e){T.assertTypeWithError(e,"string"),T.assertWithError(this.#D.includes(e),`invalid sensorType "${e}"`)}static assertValidSensorTypeEnum(e){T.assertTypeWithError(e,"number"),T.assertWithError(e in this.#D,`invalid sensorTypeEnum ${e}`)}onDataReceived;#W=0;#T=0;static#R=65536;get Uint16Max(){return R.#R}#L(e,t){const n=e.getUint16(t,!0);n<this.#T&&(this.#W+=this.Uint16Max),this.#T=n;return n+this.#W}parse(e){T.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const n=this.#L(e,t);for(t+=2;t<e.byteLength;){const r=e.getUint8(t++);let s;R.assertValidSensorTypeEnum(r);const a=this.#M[r];switch(a){case"pressure":s=this.#x(e,t),t+=2*this.numberOfPressureSensors;break;case"accelerometer":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":s=this.#k(e,t,a),t+=7;break;case"gameRotation":case"rotation":s=this.#N(e,t,a),t+=10;break;case"barometer":break;default:throw Error(`uncaught sensorType "${a}"`)}T.assertWithError(s,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:n,[a]:s})}}static#I={pressure:65536,accelerometer:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14,barometer:.78125};get#U(){return R.#I}static#$=8;get numberOfPressureSensors(){return R.#$}#x(e,t){const n=[];for(let r=0;r<this.numberOfPressureSensors;r++,t+=2)n[r]=e.getUint16(t,!0);return T.log({pressure:n}),n}#k(e,t,n){let[r,s,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.#U[n]));const o={x:r,y:s,z:a};return T.log({vector:o}),o}#N(e,t,n){let[r,s,a,o]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.#U[n]));const i={x:r,y:s,z:a,w:o};return T.log({quaternion:i}),i}}const L=u("SensorConfigurationManager",{log:!0});class x{#C;get deviceType(){return this.#C}set deviceType(e){L.assertTypeWithError(e,"string"),this.#C!=e?(L.log({newDeviceType:e}),this.#C=e):L.warn(`redundant deviceType assignment "${e}"`)}parse(e){const t={};return R.Types.forEach(((n,r)=>{const s=e.getUint16(2*r,!0);L.log({sensorType:n,sensorRate:s}),t[n]=s})),L.log({parsedSensorConfiguration:t}),t}static get MaxSensorRate(){return 65535}get maxSensorRate(){return x.MaxSensorRate}static get SensorRateStep(){return 5}get sensorRateStep(){return x.SensorRateStep}#_(e){L.assertTypeWithError(e,"number"),L.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),L.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),L.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){const t=Object.keys(e),n=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,r)=>{R.assertValidSensorType(t);const s=R.Types.indexOf(t);n.setUint8(3*r,s);const a=e[t];this.#_(a),n.setUint16(3*r+1,e[t],!0)})),L.log({sensorConfigurationData:n}),n}}const k=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];function N(...e){const t=(e=(e=(e=e.filter((e=>e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}const I=u("VibrationManager");class U{static#O=["front","rear"];static get Locations(){return this.#O}get locations(){return U.#O}#V(e){I.assertTypeWithError(e,"string"),I.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#A(e){this.#B(e),e.forEach((e=>{this.#V(e)}))}#F(e){this.#A(e);let t=0;return e.forEach((e=>{const n=this.locations.indexOf(e);t|=1<<n})),I.log({locationsBitmask:t}),I.assertWithError(t>0,"locationsBitmask must not be zero"),t}#B(e){I.assertWithError(Array.isArray(e),"passed non-array"),I.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return k}get#z(){return U.WaveformEffects}#q(e){I.assertWithError(this.#z.includes(e),`invalid waveformEffect "${e}"`)}static#j=1270;static get MaxWaveformEffectSegmentDelay(){return this.#j}get#H(){return U.#j}#P(e){if(null!=e.effect){const t=e.effect;this.#q(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;I.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),I.assertWithError(t<=this.#H,`delay must be ${this.#H}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#G(t)}}static#Q=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#Q}get#J(){return U.#Q}#G(e){I.assertTypeWithError(e,"number"),I.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),I.assertWithError(e<=this.#J,`waveformEffectSegmentLoopCount must be ${this.#J} or fewer (got ${e})`)}static#K=8;static get MaxNumberOfWaveformEffectSegments(){return this.#K}get maxNumberOfWaveformEffectSegments(){return U.#K}#X(e){this.#B(e),I.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#P(e)}))}static#Y=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Y}get maxWaveformEffectSequenceLoopCount(){return U.#Y}#Z(e){I.assertTypeWithError(e,"number"),I.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),I.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ee=2550;static get MaxWaveformSegmentDuration(){return this.#ee}get#te(){return U.#ee}#ne(e){I.assertTypeWithError(e.amplitude,"number"),I.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),I.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),I.assertTypeWithError(e.duration,"number"),I.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),I.assertWithError(e.duration<=this.#te,`duration must be ${this.#te}ms or less (got ${e.duration}ms)`)}static#re=20;static get MaxNumberOfWaveformSegments(){return this.#re}get maxNumberOfWaveformSegments(){return U.#re}#se(e){this.#B(e),I.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ne(e)}))}createWaveformEffectsData(e,t,n=0){this.#X(t),this.#Z(n);let r=[],s=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=n;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const n=t[e]||{effect:"none"};if(null!=n.effect){const e=n.effect;r[s++]=this.#z.indexOf(e)}else{if(null==n.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=n;r[s++]=128|Math.floor(e/10)}}}const o=0!=n;for(let e=0;e<t.length||o&&e<this.maxNumberOfWaveformEffectSegments;e++){const n=t[e]?.loopCount||0;0!=e&&4!=e||(r[s++]=0);const a=e%4*2;r[s]|=n<<a}0!=n&&(r[s++]=n);const i=new DataView(Uint8Array.from(r).buffer);I.log({dataArray:r,dataView:i}),this.#ae(e,"waveformEffect",i)}createWaveformData(e,t){this.#se(t);const n=new DataView(new ArrayBuffer(2*t.length));t.forEach(((e,t)=>{n.setUint8(2*t,Math.floor(127*e.amplitude)),n.setUint8(2*t+1,Math.floor(e.duration/10))})),I.log({dataView:n}),this.#ae(e,"waveform",n)}static#D=["waveformEffect","waveform"];static get Types(){return this.#D}get#M(){return U.#D}#oe(e){I.assertTypeWithError(e,"string"),I.assertWithError(this.#M.includes(e),`invalid vibrationType "${e}"`)}#ae(e,t,n){I.assertWithError(n?.byteLength>0,"no data received");const r=this.#F(e);this.#oe(t);const s=this.#M.indexOf(t);I.log({locationsBitmask:r,vibrationTypeIndex:s,dataView:n});const a=N(r,s,n.byteLength,n);return I.log({data:a}),a}}const $=u("BrilliantSole",{log:!0});class _{constructor(){this.connectionManager=new _.#ie,this.#ce.onDataReceived=this.#ue.bind(this)}static get#ie(){return t?D:n?W:void 0}static#he=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","accelerometer","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];get#n(){return _.#he}#me=new m(this.#n);addEventListener(e,t,n){this.#me.addEventListener(...arguments)}#ge(e){this.#me.dispatchEvent(e)}removeEventListener(e,t){return this.#me.removeEventListener(...arguments)}#fe;get connectionManager(){return this.#fe}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#le.bind(this),e.onMessageReceived=this.#pe.bind(this)),this.#fe=e,$.log("assigned new connectionManager",this.#fe)):$.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#f(){$.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}get connectionType(){return this.connectionManager?.type}async disconnect(){return this.connectionManager.disconnect()}get connectionStatus(){return this.#fe?.status}#le(e){switch($.log({connectionStatus:e}),this.#ge({type:"connectionStatus",message:{connectionStatus:e}}),this.#ge({type:this.connectionStatus}),e){case"connected":case"not connected":this.#ge({type:"isConnected",message:{isConnected:this.isConnected}})}}#de(){this.#ve=null,this.#ye=null,this.#Se=null;for(const e in this.#be)this.#be[e]=null}#pe(e,t){switch($.log({messageType:e,dataView:t}),e){case"manufacturerName":const n=this.#Ee.decode(t);$.log({manufacturerName:n}),this.#we({manufacturerName:n});break;case"modelNumber":const r=this.#Ee.decode(t);$.log({modelNumber:r}),this.#we({modelNumber:r});break;case"softwareRevision":const s=this.#Ee.decode(t);$.log({softwareRevision:s}),this.#we({softwareRevision:s});break;case"hardwareRevision":const a=this.#Ee.decode(t);$.log({hardwareRevision:a}),this.#we({hardwareRevision:a});break;case"firmwareRevision":const o=this.#Ee.decode(t);$.log({firmwareRevision:o}),this.#we({firmwareRevision:o});break;case"pnpId":const i={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==i.source&&(i.vendorId=t.getUint8(1)|t.getUint8(2)<<8),$.log({pnpId:i}),this.#we({pnpId:i});break;case"batteryLevel":const c=t.getUint8(0);$.log("received battery level",{batteryLevel:c}),this.#Ce(c);break;case"getName":const u=this.#Ee.decode(t);$.log({name:u}),this.#De(u);break;case"getType":const h=t.getUint8(0),m=this.#M[h];$.log({typeEnum:h,type:m}),this.#Me(m);break;case"getSensorConfiguration":const g=this.#We.parse(t);$.log({sensorConfiguration:g}),this.#Te(g);break;case"sensorData":this.#ce.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#Re=new TextEncoder;get#Le(){return _.#Re}static#xe=new TextDecoder;get#Ee(){return _.#xe}#be={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#be}get#ke(){return Object.values(this.#be).every((e=>null!=e))}#we(e){$.log({partialDeviceInformation:e});for(const t in e)this.#ge({type:t,message:{[t]:e[t]}});Object.assign(this.#be,e),$.log({deviceInformation:this.#be}),this.#ke&&($.log("completed deviceInformation"),this.#ge({type:"deviceInformation",message:{deviceInformation:this.#be}}))}#Se=null;get batteryLevel(){return this.#Se}#Ce(e){$.assertTypeWithError(e,"number"),this.#Se!=e?(this.#Se=e,$.log({updatedBatteryLevel:this.#Se}),this.#ge({type:"batteryLevel",message:{batteryLevel:this.#Se}})):$.warn(`duplicate batteryLevel assignment ${e}`)}#ve;get name(){return this.#ve}#De(e){$.assertTypeWithError(e,"string"),this.#ve=e,$.log({updatedName:this.#ve}),this.#ge({type:"getName",message:{name:this.#ve}})}static get MinNameLength(){return 2}get#Ne(){return _.MinNameLength}static get MaxNameLength(){return 65}get#Ie(){return _.MaxNameLength}async setName(e){this.#f(),$.assertTypeWithError(e,"string"),$.assertWithError(e.length>=this.#Ne,`name must be greater than ${this.#Ne} characters long ("${e}" is ${e.length} characters long)`),$.assertWithError(e.length<this.#Ie,`name must be less than ${this.#Ie} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Le.encode(e);$.log({setNameData:t}),await this.#fe.sendMessage("setName",t)}static#D=["leftInsole","rightInsole"];static get Types(){return this.#D}get#M(){return _.#D}#ye;get type(){return this.#ye}#Ue(e){$.assertTypeWithError(e,"string"),$.assertWithError(this.#M.includes(e),`invalid type "${e}"`)}#Me(e){this.#Ue(e),e!=this.type?(this.#ye=e,$.log({updatedType:this.#ye}),this.#ce.deviceType=this.#ye,this.#We.deviceType=this.#ye,this.#ge({type:"getType",message:{type:this.#ye}})):$.warn("redundant type assignment")}async setType(e){this.#f(),this.#Ue(e);const t=this.#M.indexOf(e),n=Uint8Array.from([t]);$.log({setTypeData:n}),await this.#fe.sendMessage("setType",n)}#We=new x;#$e;get sensorConfiguration(){return this.#$e}static get MaxSensorRate(){return x.MaxSensorRate}static get SensorRateStep(){return x.SensorRateStep}#Te(e){this.#$e=e,$.log({updatedSensorConfiguration:this.#$e}),this.#ge({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#f(),$.log({newSensorConfiguration:e});const t=this.#We.createData(e);$.log({setSensorConfigurationData:t}),await this.#fe.sendMessage("setSensorConfiguration",t)}static#_e=R.Types;static get SensorTypes(){return this.#_e}#ce=new R;#ue(e,t){$.log({sensorType:e,sensorData:t}),this.#ge({type:e,message:t}),this.#ge({type:"sensorData",message:t})}#Oe=new U;static get VibrationLocations(){return U.Locations}static get VibrationTypes(){return U.Types}static get VibrationWaveformEffects(){return U.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return U.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return U.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return U.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return U.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return U.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return U.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:n,type:r}=e;switch(r){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:r,loopCount:s}=t;this.#Oe.createWaveformEffectsData(n,r,s)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:r}=t;this.#Oe.createWaveformData(n,r)}break;default:throw Error(`invalid vibration type "${r}"`)}t=N(t,undefined)})),await this.#fe.sendMessage("triggerVibration",t)}}return _.setConsoleLevelFlagsForType=function(e,t){c.setLevelFlagsForType(e,t)},_.setAllConsoleLevelFlags=function(e){c.setAllLevelFlags(e)},_}));
