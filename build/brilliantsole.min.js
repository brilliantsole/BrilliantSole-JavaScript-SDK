/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function s(){}e&&navigator.userAgent.includes("Android");const r=console.log.bind(console),n=console.warn.bind(console),i=console.error.bind(console),a=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new o(e);return s.setLevelFlags(t),s}get log(){return this.#t.log?r:s}get warn(){return this.#t.warn?n:s}get error(){return this.#t.error?i:s}get assert(){return this.#t.assert?a:s}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}}function c(e,t){return o.create(e,t)}const u=c("EventDispatcher",{log:!1});class h{constructor(e){u.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#s=e}#s;#r(e){return!this.#s||this.#s.includes(e)}#n(e){u.assertWithError(this.#r(e),`invalid event type "${e}"`)}#i;addEventListener(e,t,s){if(u.log(`adding "${e}" eventListener`,t),this.#n(e),this.#i||(this.#i={}),s?.once){const s=t;t=function t(r){s.apply(this,arguments),this.removeEventListener(e,t)}}const r=this.#i;r[e]||(r[e]=[]),r[e].includes(t)||r[e].push(t)}hasEventListener(e,t){return u.log(`has "${e}" eventListener?`,t),this.#n(e),this.#i?.[e]?.includes(t)}removeEventListener(e,t){if(u.log(`removing "${e}" eventListener`,t),this.#n(e),this.hasEventListener(e,t)){const s=this.#i[e].indexOf(t);return this.#i[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#n(e.type),this.#i?.[e.type]){e.target=this;const t=this.#i[e.type].slice(0);for(let s=0,r=t.length;s<r;s++)t[s].call(this,e)}}}function g(e,t){Object.entries(t).forEach((([t,s])=>{e.addEventListener(t,s)}))}function l(e,t){Object.entries(t).forEach((([t,s])=>{e.removeEventListener(t,s)}))}const d=c("ConnectionManager");class m{onStatusUpdated;onMessageReceived;static#a(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#a("type")}get type(){return this.constructor.type}#c(){d.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#u(){d.assertWithError(this.constructor!=m,`${this.constructor.name} must be subclassed`)}constructor(){this.#u(),this.#c()}#h="not connected";get status(){return this.#h}set status(e){d.assertTypeWithError(e,"string"),this.#h!=e?(d.log(`new connection status "${e}"`),this.#h=e,this.onStatusUpdated?.(this.status)):d.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){d.assertWithError(!this.isConnected,"device is already connected")}#l(){d.assertWithError("connecting"!=this.status,"device is already connecting")}#d(){d.assertWithError(this.isConnected,"device is not connected")}#m(){d.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#f(){this.#d(),this.#m()}async connect(){this.#g(),this.#l(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#l(),d.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#d(),this.#m(),this.status="disconnecting"}async sendMessage(e,t){this.#f(),d.log("sending message",{messageType:e,data:t})}}if(t){var f=require("webbluetooth").BluetoothUUID}if(e)f=window.BluetoothUUID;function p(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function v(e){return f.getCharacteristic(e)}function S(e){return f.getService(e)}const y=Object.freeze({services:{deviceInformation:{uuid:S("device_information"),characteristics:{manufacturerName:{uuid:v("manufacturer_name_string")},modelNumber:{uuid:v("model_number_string")},hardwareRevision:{uuid:v("hardware_revision_string")},firmwareRevision:{uuid:v("firmware_revision_string")},softwareRevision:{uuid:v("software_revision_string")},pnpId:{uuid:v("pnp_id")},serialNumber:{uuid:v("serial_number_string")}}},battery:{uuid:S("battery_service"),characteristics:{batteryLevel:{uuid:v("battery_level")}}},main:{uuid:p(0),characteristics:{name:{uuid:p(1)},type:{uuid:p(2)},sensorConfiguration:{uuid:p(3)},sensorData:{uuid:p(4)},vibration:{uuid:p(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,s])=>e==s.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>e==s.uuid))?.[0],t))),t}}),b=y.serviceUUIDs,E=y.optionalServiceUUIDs;const C=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var w={bluetooth:t}}if(e)w=window.navigator;class D extends m{#p={characteristicvaluechanged:this.#v.bind(this)};#S={gattserverdisconnected:this.#y.bind(this)};static get isSupported(){return"bluetooth"in w}static get type(){return"webBluetooth"}#b;get device(){return this.#b}set device(e){this.#b!=e?(this.#b&&l(this.#b,this.#S),e&&g(e,this.#S),this.#b=e):C.warn("tried to assign the same BluetoothDevice")}get server(){return this.#b?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#C=new Map;async connect(){await super.connect();try{device=await w.bluetooth.requestDevice({filters:[{services:b}],optionalServices:e?E:[]}),C.log("got BluetoothDevice"),this.device=device,C.log("connecting to device...");const t=await this.device.gatt.connect();C.log(`connected to device? ${t.connected}`),await this.#w(),C.log("fully connected"),this.status="connected"}catch(e){C.error(e),this.status="not connected",this.server?.disconnect(),this.#D()}}async#w(){this.#D(),C.log("getting services...");const e=await this.server.getPrimaryServices();C.log("got services",e.length),C.log("getting characteristics...");for(const r in e){const n=e[r],i=(s=n.uuid,y.getServiceNameFromUUID(s));if(C.assertWithError(i,`no name found for service uuid "${n.uuid}"`),C.log(`got "${i}" service`),"dfu"==i){C.log("skipping dfu service");continue}n._name=i,this.#E.set(i,n),C.log(`getting characteristics for "${i}" service`);const a=await n.getCharacteristics();C.log(`got characteristics for "${i}" service`);for(const e in a){const s=a[e],r=(t=s.uuid,y.getCharacteristicNameFromUUID(t));C.assertWithError(r,`no name found for characteristic uuid "${s.uuid}" in "${i}" service`),C.log(`got "${r}" characteristic in "${i}" service`),s._name=r,this.#C.set(r,s),g(s,this.#p),s.properties.read&&(C.log(`reading "${r}" characteristic...`),await s.readValue()),s.properties.notify&&(C.log(`starting notifications for "${r}" characteristic`),await s.startNotifications())}}var t,s}#D(){this.device&&l(this.device,this.#S),this.#C.forEach((e=>{l(e,this.#p)}))}async disconnect(){await super.disconnect(),C.log("disconnecting from device..."),this.server?.disconnect(),this.#D()}#v(e){C.log("oncharacteristicvaluechanged");const t=e.target,s=t._name;C.assertWithError(s,`no name found for characteristic with uuid "${t.uuid}"`),C.log(`oncharacteristicvaluechanged for "${s}" characteristic`);const r=t.value;switch(C.assertWithError(r,`no data found for "${s}" characteristic`),C.log(`data for "${s}" characteristic`,Array.from(new Uint8Array(r.buffer))),s){case"manufacturerName":this.onMessageReceived("manufacturerName",r);break;case"modelNumber":this.onMessageReceived("modelNumber",r);break;case"softwareRevision":this.onMessageReceived("softwareRevision",r);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",r);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",r);break;case"pnpId":this.onMessageReceived("pnpId",r);break;case"serialNumber":this.onMessageReceived("serialNumber",r);break;case"batteryLevel":this.onMessageReceived("batteryLevel",r);break;case"name":this.onMessageReceived("getName",r);break;case"type":this.onMessageReceived("getType",r);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",r);break;case"sensorData":this.onMessageReceived("sensorData",r);break;default:throw new Error(`uncaught characteristicName "${s}"`)}}#y(e){C.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s;switch(await super.sendMessage(...arguments),e){case"setName":s=this.#C.get("name");break;case"setType":s=this.#C.get("type");break;case"setSensorConfiguration":s=this.#C.get("sensorConfiguration");break;case"triggerVibration":s=this.#C.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}C.assert(s,"no characteristic found"),await s.writeValueWithResponse(t),s.properties.read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),C.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(C.log("successfully reconnected!"),await this.#w(),this.status="connected"):(C.log("unable to reconnect"),this.status="not connected")}}function L(e,t,s){return(e-t)/(s-t)}c("NobleConnectionManager",{log:!0}),t&&require("@abandonware/noble");class T{#L;resetRange(){this.#L={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}}}constructor(){this.resetRange()}updateCenterOfPressureRange(e){this.#L.min.x=Math.min(e.x,this.#L.min.x),this.#L.min.y=Math.min(e.y,this.#L.min.y),this.#L.max.x=Math.max(e.x,this.#L.max.x),this.#L.max.y=Math.max(e.y,this.#L.max.y)}getCalibratedCenterOfPressure(e){return{x:L(e.x,this.#L.min.x,this.#L.max.x),y:L(e.y,this.#L.min.y,this.#L.max.y)}}}const M=c("PressureSensorDataManager",{log:!0});class R{#T;get deviceType(){return this.#T}set deviceType(e){M.assertTypeWithError(e,"string"),this.#T!=e?(M.log({newDeviceType:e}),this.#T=e,this.#M(),this.resetPressureRange()):M.warn(`redundant deviceType assignment "${e}"`)}static#R=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#R}get names(){return R.Names}static#W={pressure:2**-16};static get Scalars(){return this.#W}get scalars(){return R.Scalars}static#x=8;static get NumberOfPressureSensors(){return this.#x}get numberOfPressureSensors(){return R.NumberOfPressureSensors}static#I=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#I}#k;get pressureSensorPositions(){return this.#k}#M(){const e=R.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));M.log({pressureSensorPositions:e}),this.#k=e}#O=new T;resetRange(){this.#O.resetRange()}parsePressure(e,t){const s=this.scalars.pressure,r={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const i=e.getUint16(t,!0),a=i*s,o=this.pressureSensorPositions[n],c=this.names[n];r.sensors[n]={rawValue:i,normalizedValue:a,position:o,name:c},r.rawSum+=i,r.normalizedSum=a/this.numberOfPressureSensors}return r.rawSum>0&&(r.center={x:0,y:0},r.sensors.forEach((e=>{e.weightedValue=e.rawValue/r.rawSum,r.center.x+=e.position.x*e.weightedValue,r.center.y+=e.position.y*e.weightedValue})),this.#O.updateCenterOfPressureRange(r.center),r.calibratedCenter=this.#O.getCalibratedCenterOfPressure(r.center)),M.log({pressure:r}),r}}const W=c("MotionSensorDataManager",{log:!0});class x{#T;get deviceType(){return this.#T}set deviceType(e){W.assertTypeWithError(e,"string"),this.#T!=e?(W.log({newDeviceType:e}),this.#T=e):W.warn(`redundant deviceType assignment "${e}"`)}static#W={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#W}get scalars(){return x.Scalars}static#N=6;static get Vector3Size(){return this.#N}get vector3Size(){return x.Vector3Size}parseVector3(e,t,s){let[r,n,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:r,y:n,z:i};return W.log({vector:a}),a}static#P=8;static get QuaternionSize(){return this.#P}get quaternionSize(){return x.QuaternionSize}parseQuaternion(e,t,s){let[r,n,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:r,y:n,z:i,w:a};return W.log({quaternion:o}),o}}c("BarometerSensorDataManager",{log:!0});class I{static#W={barometer:.78125};static get Scalars(){return this.#W}get scalars(){return I.Scalars}}const k=c("SensorDataManager",{log:!0});class O{#T;get deviceType(){return this.#T}set deviceType(e){k.assertTypeWithError(e,"string"),this.#T!=e?(k.log({newDeviceType:e}),this.#T=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):k.warn(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new R;motionSensorDataManager=new x;barometerSensorDataManager=new I;static#U=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#U}get#$(){return O.Types}static AssertValidSensorType(e){k.assertTypeWithError(e,"string"),k.assertWithError(this.#U.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){k.assertTypeWithError(e,"number"),k.assertWithError(e in this.#U,`invalid sensorTypeEnum ${e}`)}onDataReceived;#_=0;#A=0;clearTimestamp(){k.log("clearing sensorDataManager timestamp data"),this.#_=0,this.#A=0}#V(e,t){const s=e.getUint16(t,!0);s<this.#A&&(this.#_+=65536),this.#A=s;return s+this.#_}parse(e){k.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#V(e,t);for(t+=2;t<e.byteLength;){const r=e.getUint8(t++);let n;O.AssertValidSensorTypeEnum(r);const i=e.getUint8(t++),a=this.#$[r];switch(k.log({sensorTypeEnum:r,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":n=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":n=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":n=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:k.error(`uncaught sensorType "${a}"`)}t+=i,k.assertWithError(n,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:n})}}static get NumberOfPressureSensors(){return R.NumberOfPressureSensors}get numberOfPressureSensors(){return O.NumberOfPressureSensors}static get PressureSensorNames(){return R.Names}get pressureSensorNames(){return O.PressureSensorNames}}const N=c("SensorConfigurationManager",{log:!0});class P{#T;get deviceType(){return this.#T}set deviceType(e){N.assertTypeWithError(e,"string"),this.#T!=e?(N.log({newDeviceType:e}),this.#T=e):N.warn(`redundant deviceType assignment "${e}"`)}#z;#B(e){N.assertWithError(this.#z,"must get initial sensorConfiguration");const t=this.#z?.includes(e);return N.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0,r=0;s<e.byteLength;s+=2,r++){const n=O.Types[r];if(!n){N.warn(`unknown sensorType index ${r}`);break}const i=e.getUint16(2*s,!0);N.log({sensorType:n,sensorRate:i}),t[n]=i}return N.log({parsedSensorConfiguration:t}),this.#z=Object.keys(t),t}static#F=65535;static get MaxSensorRate(){return this.#F}get maxSensorRate(){return P.MaxSensorRate}static#H=5;static get SensorRateStep(){return this.#H}get sensorRateStep(){return P.SensorRateStep}#q(e){N.assertTypeWithError(e,"number"),N.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),N.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),N.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#B(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,r)=>{O.AssertValidSensorType(t);const n=O.Types.indexOf(t);s.setUint8(3*r,n);const i=e[t];this.#q(i),s.setUint16(3*r+1,e[t],!0)})),N.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const U=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"];function $(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>"number"==typeof e?Uint8Array.from([Math.floor(e)]):e instanceof Array?Uint8Array.from(e).buffer:e instanceof ArrayBuffer?e:"buffer"in e&&e.buffer instanceof ArrayBuffer||e instanceof DataView?e.buffer:e))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let r=0;return e.forEach((e=>{s.set(new Uint8Array(e),r),r+=e.byteLength})),s.buffer}const _=c("VibrationManager");class A{static#j=["front","rear"];static get Locations(){return this.#j}get locations(){return A.Locations}#Z(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#Q(e){this.#G(e),e.forEach((e=>{this.#Z(e)}))}#K(e){this.#Q(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),_.log({locationsBitmask:t}),_.assertWithError(t>0,"locationsBitmask must not be zero"),t}#G(e){_.assertWithError(Array.isArray(e),"passed non-array"),_.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return U}get waveformEffects(){return A.WaveformEffects}#J(e){_.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#X=1270;static get MaxWaveformEffectSegmentDelay(){return this.#X}get maxWaveformEffectSegmentDelay(){return A.MaxWaveformEffectSegmentDelay}#Y(e){if(null!=e.effect){const t=e.effect;this.#J(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;_.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),_.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ee(t)}}static#te=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#te}get maxWaveformEffectSegmentLoopCount(){return A.MaxWaveformEffectSegmentLoopCount}#ee(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#se=8;static get MaxNumberOfWaveformEffectSegments(){return this.#se}get maxNumberOfWaveformEffectSegments(){return A.MaxNumberOfWaveformEffectSegments}#re(e){this.#G(e),_.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Y(e)}))}static#ne=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ne}get maxWaveformEffectSequenceLoopCount(){return A.MaxWaveformEffectSequenceLoopCount}#ie(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),_.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ae=2550;static get MaxWaveformSegmentDuration(){return this.#ae}get maxWaveformSegmentDuration(){return A.MaxWaveformSegmentDuration}#oe(e){_.assertTypeWithError(e.amplitude,"number"),_.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),_.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),_.assertTypeWithError(e.duration,"number"),_.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),_.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#ce=20;static get MaxNumberOfWaveformSegments(){return this.#ce}get maxNumberOfWaveformSegments(){return A.MaxNumberOfWaveformSegments}#ue(e){this.#G(e),_.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#oe(e)}))}createWaveformEffectsData(e,t,s=0){this.#re(t),this.#ie(s);let r=[],n=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;r[n++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;r[n++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(r[n]=0);const i=e%4*2;r[n]|=s<<i,3!=e&&7!=e||n++}0!=s&&(r[n++]=s);const o=new DataView(Uint8Array.from(r).buffer);return _.log({dataArray:r,dataView:o}),this.#he(e,"waveformEffect",o)}createWaveformData(e,t){this.#ue(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),_.log({dataView:s}),this.#he(e,"waveform",s)}static#U=["waveformEffect","waveform"];static get Types(){return this.#U}get#$(){return A.Types}#ge(e){_.assertTypeWithError(e,"string"),_.assertWithError(this.#$.includes(e),`invalid vibrationType "${e}"`)}#he(e,t,s){_.assertWithError(s?.byteLength>0,"no data received");const r=this.#K(e);this.#ge(t);const n=this.#$.indexOf(t);_.log({locationsBitmask:r,vibrationTypeIndex:n,dataView:s});const i=$(r,n,s.byteLength,s);return _.log({data:i}),i}}const V=c("Device",{log:!1});class z{constructor(){this.connectionManager=new z.#le,this.#de.onDataReceived=this.#me.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{z.#fe(this)}))}static get#le(){return D}static#pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#pe}get eventTypes(){return z.#pe}#ve=new h(this.eventTypes);addEventListener(e,t,s){this.#ve.addEventListener(e,t,s)}#Se(e){this.#ve.dispatchEvent(e)}removeEventListener(e,t){return this.#ve.removeEventListener(e,t)}#ye;get connectionManager(){return this.#ye}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#be.bind(this),e.onMessageReceived=this.#Ee.bind(this)),this.#ye=e,V.log("assigned new connectionManager",this.#ye)):V.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager?.connect()}get isConnected(){return this.connectionManager?.isConnected}#d(){V.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#Ce=!1;static get ReconnectOnDisconnection(){return this.#Ce}static set ReconnectOnDisconnection(e){V.assertTypeWithError(e,"boolean"),this.#Ce=e}#we=z.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#we}set reconnectOnDisconnection(e){V.assertTypeWithError(e,"boolean"),this.#we=e}#De;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#d(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}get connectionStatus(){return this.#ye?.status}#be(e){switch(V.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(V.log("starting reconnect interval..."),this.#De=setInterval((()=>{V.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#De&&(V.log("clearing reconnect interval"),clearInterval(this.#De),this.#De=void 0),this.#Se({type:"connectionStatus",message:{connectionStatus:e}}),this.#Se({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Se({type:"isConnected",message:{isConnected:this.isConnected}})}}#Le(){this.#Te=null,this.#Me=null,this.#Re=null;for(const e in this.#We)this.#We[e]=null}#Ee(e,t){switch(V.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#xe.decode(t);V.log({manufacturerName:s}),this.#Ie({manufacturerName:s});break;case"modelNumber":const r=this.#xe.decode(t);V.log({modelNumber:r}),this.#Ie({modelNumber:r});break;case"softwareRevision":const n=this.#xe.decode(t);V.log({softwareRevision:n}),this.#Ie({softwareRevision:n});break;case"hardwareRevision":const i=this.#xe.decode(t);V.log({hardwareRevision:i}),this.#Ie({hardwareRevision:i});break;case"firmwareRevision":const a=this.#xe.decode(t);V.log({firmwareRevision:a}),this.#Ie({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),V.log({pnpId:o}),this.#Ie({pnpId:o});break;case"serialNumber":const c=this.#xe.decode(t);V.log({serialNumber:c});break;case"batteryLevel":const u=t.getUint8(0);V.log("received battery level",{batteryLevel:u}),this.#ke(u);break;case"getName":const h=this.#xe.decode(t);V.log({name:h}),this.#Oe(h);break;case"getType":const g=t.getUint8(0),l=this.#$[g];V.log({typeEnum:g,type:l}),this.#Ne(l);break;case"getSensorConfiguration":const d=this.#Pe.parse(t);V.log({sensorConfiguration:d}),this.#Ue(d);break;case"sensorData":this.#de.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#$e=new TextEncoder;get#_e(){return z.#$e}static#Ae=new TextDecoder;get#xe(){return z.#Ae}#We={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#We}get#Ve(){return Object.values(this.#We).every((e=>null!=e))}#Ie(e){V.log({partialDeviceInformation:e});for(const t in e)this.#Se({type:t,message:{[t]:e[t]}});Object.assign(this.#We,e),V.log({deviceInformation:this.#We}),this.#Ve&&(V.log("completed deviceInformation"),this.#Se({type:"deviceInformation",message:{deviceInformation:this.#We}}))}#Re=null;get batteryLevel(){return this.#Re}#ke(e){V.assertTypeWithError(e,"number"),this.#Re!=e?(this.#Re=e,V.log({updatedBatteryLevel:this.#Re}),this.#Se({type:"batteryLevel",message:{batteryLevel:this.#Re}})):V.warn(`duplicate batteryLevel assignment ${e}`)}#Te;get name(){return this.#Te}#Oe(e){V.assertTypeWithError(e,"string"),this.#Te=e,V.log({updatedName:this.#Te}),this.#Se({type:"getName",message:{name:this.#Te}})}static get MinNameLength(){return 2}get minNameLength(){return z.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return z.MaxNameLength}async setName(e){this.#d(),V.assertTypeWithError(e,"string"),V.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),V.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#_e.encode(e);V.log({setNameData:t}),await this.#ye.sendMessage("setName",t)}static#U=["leftInsole","rightInsole"];static get Types(){return this.#U}get#$(){return z.Types}#Me;get type(){return this.#Me}#ze(e){V.assertTypeWithError(e,"string"),V.assertWithError(this.#$.includes(e),`invalid type "${e}"`)}#Ne(e){this.#ze(e),e!=this.type?(this.#Me=e,V.log({updatedType:this.#Me}),this.#de.deviceType=this.#Me,this.#Pe.deviceType=this.#Me,this.#Se({type:"getType",message:{type:this.#Me}})):V.warn("redundant type assignment")}async setType(e){this.#d(),this.#ze(e);const t=this.#$.indexOf(e),s=Uint8Array.from([t]);V.log({setTypeData:s}),await this.#ye.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Be=["left","right"];static get InsoleSides(){return this.#Be}get insoleSides(){return z.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return O.Types}get sensorTypes(){return z.SensorTypes}static get PressureSensorNames(){return O.PressureSensorNames}get pressureSensorNames(){return z.PressureSensorNames}static get NumberOfPressureSensors(){return O.NumberOfPressureSensors}get numberOfPressureSensors(){return z.NumberOfPressureSensors}#Pe=new P;#Fe;get sensorConfiguration(){return this.#Fe}static get MaxSensorRate(){return P.MaxSensorRate}static get SensorRateStep(){return P.SensorRateStep}#Ue(e){this.#Fe=e,V.log({updatedSensorConfiguration:this.#Fe}),this.#Pe.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(V.log("clearing sensorDataManager timestamp..."),this.#de.clearTimestamp()),this.#Se({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#d(),V.log({newSensorConfiguration:e});const t=this.#Pe.createData(e);V.log({setSensorConfigurationData:t}),await this.#ye.sendMessage("setSensorConfiguration",t)}static#He=!0;static get ClearSensorConfigurationOnLeave(){return this.#He}static set ClearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#He=e}#qe=z.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#qe}set clearSensorConfigurationOnLeave(e){V.assertTypeWithError(e,"boolean"),this.#qe=e}static#je={};static get ZeroSensorConfiguration(){return this.#je}static{this.SensorTypes.forEach((e=>{this.#je[e]=0}))}get zeroSensorConfiguration(){return z.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#de=new O;#me(e,t){V.log({sensorType:e,sensorData:t}),this.#Se({type:e,message:t}),this.#Se({type:"sensorData",message:t})}resetPressureRange(){this.#de.pressureSensorDataManager.resetRange()}#Ze=new A;static get VibrationLocations(){return A.Locations}static get VibrationTypes(){return A.Types}static get VibrationWaveformEffects(){return A.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return A.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return A.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return A.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return A.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return A.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return A.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:r}=e;let n;switch(r){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:r,loopCount:i}=t;n=this.#Ze.createWaveformEffectsData(s,r,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:r}=t;n=this.#Ze.createWaveformData(s,r)}break;default:throw Error(`invalid vibration type "${r}"`)}V.log({type:r,dataView:n}),t=$(t,n)})),await this.#ye.sendMessage("triggerVibration",t)}static#Qe=[];static get ConnectedDevices(){return this.#Qe}static#Ge=!1;static get UseLocalStorage(){return this.#Ge}static set UseLocalStorage(e){this.#Ke(),V.assertTypeWithError(e,"boolean"),this.#Ge=e,this.#Ge&&!this.#Je&&this.#Xe()}static#Ye={};static#Je;static#Ke(){V.assertWithError(e,"localStorage is only available in the browser")}static#et="BS.Device";static#tt(){this.#Ke(),localStorage.setItem(this.#et,JSON.stringify(this.#Je))}static#Xe(){this.#Ke();let e=localStorage.getItem(this.#et);if("string"!=typeof e)return V.warn("no info found in localStorage"),this.#Je=Object.assign({},this.#Ye),void this.#tt();try{const t=JSON.parse(e);return V.log({configuration:t}),t}catch(e){V.error(e)}}static async GetDevices(){if(!e)return void V.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void V.warn("bluetooth is not available in this browser");if(!this.#Je)return void V.warn("localStorageConfiguration not found");const t=this.#Je;if(!t.bluetoothDeviceIds||0==t.bluetoothDeviceIds.length)return void V.log("no bluetoothDeviceIds found in configuration");const s=await navigator.bluetooth.getDevices();V.log({bluetoothDevices:s});return s.map((e=>{if(e.gatt&&t.bluetoothDeviceIds.includes(e.id)){const t=new z;t.connectionManager=new D;return t.connectionManager.device=e,t}})).filter(Boolean)}static#st=["deviceConnected","deviceDisconnected"];static get StaticEventTypes(){return this.#st}static#rt=new h(this.#st);static AddEventListener(e,t,s){this.#rt.addEventListener(e,t,s)}static#nt(e){this.#rt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#rt.removeEventListener(e,t)}static#fe(e){if(e.isConnected)if(this.#Qe.includes(e))V.warn("device already included");else{if(V.log("adding device",e),this.#Qe.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t=e.connectionManager;this.#Je.bluetoothDeviceIds.push(t.device.id),this.#tt()}this.#nt({type:"deviceConnected",message:{device:e}})}else this.#Qe.includes(e)?(V.log("removing device",e),this.#Qe.splice(this.#Qe.indexOf(e),1),this.#nt({type:"deviceDisconnected",message:{device:e}})):V.warn("device already not included")}}const B=c("DevicePairPressureSensorDataManager",{log:!0});class F{static get Sides(){return z.InsoleSides}get sides(){return z.InsoleSides}#it={};#O=new T;resetPressureRange(){this.#O.resetRange()}onDevicePressureData(e){const{pressure:t}=e.message;if(this.#it[e.target.insoleSide]=t,this.#at)return this.#ot()}get#at(){this.sides.every((e=>e in this.#it))}static#W={pressure:R.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#W}get scalars(){return DevicePair.Scalars}#ot(){const e=this.scalars.pressure,t={rawSum:0,normalizedSum:0};return this.#it.left.data.rawSum,this.sides.forEach((e=>{t.rawSum+=this.#it[e].data.rawSum})),t.rawSum>0&&(t.normalizedSum=t.rawSum*e,t.center={x:0,y:0},this.sides.forEach((e=>{const s=this.#it[e].data,r=s.rawSum/rawPressureSum;t.center.y+=s.center.y*r,"right"==e&&(t.center.x=r)})),this.#O.updateCenterOfPressureRange(t.center),t.calibratedCenter=this.#O.getCalibratedCenterOfPressure(t.center)),B.log({pressure:t}),t}}const H=c("DevicePairSensorDataManager",{log:!0});class q{static get Sides(){return z.InsoleSides}get sides(){return z.InsoleSides}#ct={};pressureSensorDataManager=new F;resetPressureRange(){this.sides.forEach((e=>{this[e].resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{type:t,timestamp:s}=e.message,r=t;let n;if(this.#ct[r]||(this.#ct[r]={}),this.#ct[r][e.target.insoleSide]=s,"pressure"===r)n=this.pressureSensorDataManager.onDevicePressureData(e);else H.warn(`uncaught sensorType "${r}"`);if(n){const e=Object.assign({},this.#ct[r]);this.onDataReceived?.(r,{timestamps:e,[r]:n})}else H.warn("no value received")}onDataReceived}const j=c("DevicePair",{log:!0});let Z=class e{constructor(){this.#de.onDataReceived=this.#me.bind(this)}static#pe=["pressure","isConnected"];static get EventTypes(){return this.#pe}get eventTypes(){return e.#pe}#ve=new h(this.eventTypes);addEventListener(e,t,s){this.#ve.addEventListener(e,t,s)}#Se(e){this.#ve.dispatchEvent(e)}removeEventListener(e,t){return this.#ve.removeEventListener(e,t)}static get Sides(){return z.InsoleSides}get sides(){return e.Sides}#ut;get left(){return this.#ut}#ht;get right(){return this.#ht}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}assignInsole(e){if(e.isInsole)return void j.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&l(s,this.#gt),g(e,this.#gt),t){case"left":this.#ut=e;break;case"right":this.#ht=e}return j.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Se({type:"isConnected",message:{isConnected:this.isConnected}}),s}j.warn("device already assigned")}#gt={pressure:this.#lt.bind(this),isConnected:this.#dt.bind(this)};#dt(e){this.#Se({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#de=new q;#lt(e){this.isConnected&&this.#de.onDeviceSensorData(e)}#me(e,t){j.log({sensorType:e,sensorData:t}),this.#Se({type:e,message:t})}resetPressureRange(){this.#de.resetPressureRange()}static#mt=new e;static get shared(){return this.#mt}static{z.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#mt.assignInsole(t)}))}};const Q=c("ServerUtils"),G=["ping","pong"];function K(e){return Q.assertTypeWithError(e,"string"),Q.assertWithError(G.includes(e),`invalid messageType "${e}"`),G.indexOf(e)}const J=Uint8Array.from([K("ping")]),X=Uint8Array.from([K("pong")]),Y=c("WebSocketClient",{log:!0});c("ListenerUtils",{log:!1});const ee=c("WebSocketServer",{log:!0});t&&require("ws");var te={setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)},Device:z,DevicePair:Z,WebSocketClient:class{constructor(e=`wss://${location.host}`){this.webSocket=new WebSocket(e)}#ft;get webSocket(){return this.#ft}set webSocket(e){this.#ft!=e?(Y.log("assigning webSocket",e),this.#ft&&l(this.#ft,this.#pt),g(e,this.#pt),this.#ft=e,Y.log("assigned webSocket")):Y.warn("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#vt(){Y.assertWithError(this.isConnected,"not connected")}#pt={close:this.#St.bind(this),error:this.#yt.bind(this),message:this.#bt.bind(this),open:this.#Et.bind(this),ping:this.#Ct.bind(this)};#St(e){Y.log("webSocket.close",e)}#yt(e){Y.log("webSocket.error",e)}async#bt(e){Y.log("webSocket.message",e);const t=await e.data.arrayBuffer(),s=new DataView(t);this.#wt(s)}#Et(e){Y.log("webSocket.open",e)}#Ct(e){Y.log("webSocket.ping",e)}#wt(e){Y.log({dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),r=G[s];if(Y.log({messageTypeEnum:s,messageType:r}),Y.assertWithError(r,`invalid messageTypeEnum ${s}`),"ping"===r)this.#Dt();else Y.error(`uncaught messageType "${r}"`)}}#Dt(){this.#vt(),this.webSocket.send(J)}#Lt(){this.#vt(),this.webSocket.send(X)}},WebSocketServer:class{#Tt;get server(){return this.#Tt}set server(e){var t,s;this.#Tt!=e?(ee.log("assigning server..."),this.#Tt&&(ee.log("clearing existing server..."),t=this.#Tt,s=this.#Mt,Object.entries(s).forEach((([e,s])=>{t.removeListener(e,s)}))),function(e,t){Object.entries(t).forEach((([t,s])=>{e.addListener(t,s)}))}(e,this.#Mt),this.#Tt=e,ee.log("assigned server")):ee.warn("redundant WebSocket assignment")}#Mt={close:this.#Rt.bind(this),connection:this.#Wt.bind(this),error:this.#xt.bind(this),headers:this.#It.bind(this),listening:this.#kt.bind(this)};#Rt(){ee.log("server.close")}#Wt(e){ee.log("server.connection"),this.#Ot||this.#Nt(),e.isAlive=!0,g(e,this.#Pt)}#xt(e){ee.error(e)}#It(){}#kt(){ee.log("server.listening")}#Pt={open:this.#Ut.bind(this),message:this.#$t.bind(this),close:this.#_t.bind(this),error:this.#At.bind(this)};#Ut(e){ee.log("client.open")}#$t(e){ee.log("client.message"),ee.log(e.data)}#_t(e){ee.log("client.close"),l(e.target,this.#Pt)}#At(e){ee.log("client.error")}#Vt;get#Ot(){return null!=this.#Vt}#Nt(){ee.assertWithError(!this.#Ot,"already pinging clients"),ee.log("startPingingClients"),this.#Vt=setInterval(this.#zt.bind(this),1e3)}#Bt(){ee.assertWithError(this.#Ot,"already not pinging clients"),ee.log("stopPingingClients"),clearInterval(this.#Vt),this.#Vt=null}#zt(){ee.log("pingClients"),this.server&&0!=this.server.clients.size?(ee.log("pingingClients..."),this.server.clients.forEach((e=>{e.isAlive?(e.isAlive=!1,this.#Ft(e)):e.terminate()}))):this.#Bt()}#Ft(e){e.send(J)}}};return te}));
