/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class l{static#e={};constructor(e){if(l.#e[e])throw new Error(`"${e}" console already exists`);l.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new l(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function h(e,t){return l.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=h("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function f(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}const m=new Uint32Array(256);for(let e=0;e<256;++e)m[e]=f(e);const b=h("FileTransferManager",{log:!0});class S{static#o=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#o}get messageTypes(){return S.MessageTypes}static#c=[...this.#o,"fileTransferProgress","fileTransferComplete"];static get EventTypes(){return this.#c}get eventTypes(){return S.#c}#l=new u(this,this.eventTypes);addEventListener(e,t,s){this.#l.addEventListener(e,t,s)}#h(e){this.#l.dispatchEvent(e)}removeEventListener(e,t){return this.#l.removeEventListener(e,t)}#g(e){return new Promise((t=>{this.addEventListener(e,(()=>{t()}),{once:!0})}))}static#d=["tflite"];static get Types(){return this.#d}get types(){return S.Types}#u(e){b.assertEnumWithError(e,this.types)}#v(e){b.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#p=["idle","sending","receiving"];static get Statuses(){return this.#p}get statuses(){return S.Statuses}#f(e){b.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#m=["startSend","startReceive","cancel"];static get Commands(){return this.#m}get commands(){return S.Commands}#b(e){b.assertEnumWithError(e,this.commands)}static async GetFileBuffer(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}async getFileBuffer(e){return S.GetFileBuffer(e)}static#S=51200;static get MaxLength(){return this.#S}#y=S.MaxLength;get maxLength(){return this.#y}#D(e){b.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);b.log(`maxLength: ${t}kB`),this.#y=t}#C(e){b.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#T;get type(){return this.#T}#E(e){b.log("parseFileType",e);const t=e.getUint8(0);this.#v(t);const s=this.types[t];this.#w(s)}#w(e){b.log({type:e}),this.#T=e,this.#h({type:"getFileTransferType",message:{fileType:e}})}async#M(e){if(this.#u(e),this.type==e)return void b.log(`redundant type assignment ${e}`);const t=this.#g("getFileTransferType"),s=this.types.indexOf(e);this.sendMessage("setFileTransferType",Uint8Array.from([s])),await t}#L=0;get length(){return this.#L}#k(e){b.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#W(t)}#W(e){b.log(`length: ${e}kB`),this.#L=e,this.#h({type:"getFileLength",message:{fileLength:e}})}async#N(e){if(b.assertTypeWithError(e,"number"),this.#C(e),this.length==e)return void b.log(`redundant length assignment ${e}`);const t=this.#g("getFileLength"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileLength",s),await t}#I=0;get checksum(){return this.#I}#R(e){b.log("checksum",e);const t=e.getUint32(0,!0);this.#x(t)}#x(e){b.log({checksum:e}),this.#I=e,this.#h({type:"getFileChecksum",message:{fileChecksum:e}})}async#A(e){if(b.assertTypeWithError(e,"number"),this.checksum==e)return void b.log(`redundant checksum assignment ${e}`);const t=this.#g("getFileChecksum"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileChecksum",s),await t}async#O(e){this.#b(e);const t=this.#g("fileTransferStatus"),s=this.commands.indexOf(e);this.sendMessage("setFileTransferCommand",Uint8Array.from([s])),await t}#U;get status(){return this.#U}#P(e){b.log("parseFileStatus",e);const t=e.getUint8(0);this.#f(t);const s=this.statuses[t];this.#$(s)}#$(e){b.log({status:e}),this.#U=e,this.#h({type:"fileTransferStatus",message:{fileTransferStatus:e}})}#V(){b.assertWithError("idle"==this.#U,"status is not idle")}#F(){b.assertWithError("idle"!=this.#U,"status is idle")}#_(e){b.log("parseFileBlock",e)}parseMessage(e,t){switch(b.log({messageType:e}),e){case"maxFileLength":this.#D(t);break;case"getFileTransferType":this.#E(t);break;case"getFileLength":this.#k(t);break;case"getFileChecksum":this.#R(t);break;case"fileTransferStatus":this.#P(t);break;case"getFileTransferBlock":this.#_(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#V(),this.#u(e);const s=await this.getFileBuffer(t);await this.#M(e);const n=s.byteLength;await this.#N(n);const i=function(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(m[n^i]^s>>>8)>>>0}return s}(s);await this.#A(i),await this.#O("startSend"),await this.#B(s)}#z=256;async#B(e){return this.#q(e)}async#q(e,t=0){const s=e.slice(t,t+this.#z);if(b.log("sending buffer",s),0!=s.byteLength)return await this.sendMessage("setFileTransferBlock",s),this.#q(e,t+s.byteLength);b.log("finished sending buffer")}async receive(e){this.#V(),this.#u(e),await this.#M(e),await this.#O("startReceive")}async cancel(){this.#F(),await this.#O("cancel")}sendMessage}const y=h("TfliteManager",{log:!0});class D{static#o=["getTfliteModelName","setTfliteModelName","getTfliteModelTask","setTfliteModelTask","getTfliteModelSampleRate","setTfliteModelSampleRate","getTfliteModelSensorTypes","setTfliteModelSensorTypes","getTfliteModelNumberOfClasses","setTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteEnableInferencing","setTfliteEnableInferencing","tfliteModelInference"];static get MessageTypes(){return this.#o}get messageTypes(){return D.MessageTypes}#j(e){y.log("parseName",e)}#H(e){y.log("parseTask",e)}#G(e){y.log("parseSampleRate",e)}#J(e){y.log("parseSensorTypes",e)}#Q(e){y.log("parseNumberOfClasses",e)}#Z(e){y.log("parseIsReady",e)}#K(e){y.log("parseCaptureDelay",e)}#X(e){y.log("parseThreshold",e)}#Y(e){y.log("parseEnableInferencing",e)}#ee(e){y.log("parseInference",e)}parseMessage(e,t){switch(y.log({messageType:e}),e){case"getTfliteModelName":this.#j(t);break;case"getTfliteModelTask":this.#H(t);break;case"getTfliteModelSampleRate":this.#G(t);break;case"getTfliteModelSensorTypes":this.#J(t);break;case"getTfliteModelNumberOfClasses":this.#Q(t);break;case"tfliteModelIsReady":this.#Z(t);break;case"getTfliteCaptureDelay":this.#K(t);break;case"getTfliteThreshold":this.#X(t);break;case"getTfliteEnableInferencing":this.#Y(t);break;case"tfliteModelInference":this.#ee(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const C=h("ConnectionManager",{log:!1});class T{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","getCurrentTime","setCurrentTime","triggerVibration",...S.MessageTypes,...D.MessageTypes];static get MessageTypes(){return this.#o}get id(){this.#te("id")}onStatusUpdated;onMessageReceived;static#se(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#te(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#se("type")}get type(){return this.constructor.type}#ne(){C.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ie(){C.assertWithError(this.constructor!=T,`${this.constructor.name} must be subclassed`)}constructor(){this.#ie(),this.#ne()}#U="not connected";get status(){return this.#U}set status(e){C.assertTypeWithError(e,"string"),this.#U!=e?(C.log(`new connection status "${e}"`),this.#U=e,this.onStatusUpdated?.(this.status)):C.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#re(){C.assertWithError(!this.isConnected,"device is already connected")}#ae(){C.assertWithError("connecting"!=this.status,"device is already connecting")}#oe(){C.assertWithError(this.isConnected,"device is not connected")}#ce(){C.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#le(){this.#oe(),this.#ce()}async connect(){this.#re(),this.#ae(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#re(),this.#ae(),C.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#oe(),this.#ce(),this.status="disconnecting",C.log("disconnecting from device...")}async sendMessage(e,t){this.#le(),C.log("sending message",{messageType:e,data:t})}}const E=h("bluetoothUUIDs",{log:!1});if(t){var w=require("webbluetooth").BluetoothUUID}if(e)w=window.BluetoothUUID;function M(e){return E.assertTypeWithError(e,"string"),E.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function L(e){return w?.getCharacteristic?.(e)}function k(e){return w?.getService?.(e)}const W=Object.freeze({services:{deviceInformation:{uuid:k("device_information"),characteristics:{manufacturerName:{uuid:L("manufacturer_name_string")},modelNumber:{uuid:L("model_number_string")},hardwareRevision:{uuid:L("hardware_revision_string")},firmwareRevision:{uuid:L("firmware_revision_string")},softwareRevision:{uuid:L("software_revision_string")},pnpId:{uuid:L("pnp_id")},serialNumber:{uuid:L("serial_number_string")}}},battery:{uuid:k("battery_service"),characteristics:{batteryLevel:{uuid:L("battery_level")}}},main:{uuid:M("0000"),characteristics:{name:{uuid:M("1000")},type:{uuid:M("1001")},sensorConfiguration:{uuid:M("2000")},pressurePositions:{uuid:M("2001")},sensorScalars:{uuid:M("2002")},currentTime:{uuid:M("2003")},sensorData:{uuid:M("2004")},vibration:{uuid:M("3000")},maxFileLength:{uuid:M("4000")},fileTransferType:{uuid:M("4001")},fileLength:{uuid:M("4002")},fileChecksum:{uuid:M("4003")},fileTransferCommand:{uuid:M("4004")},fileTransferStatus:{uuid:M("4005")},fileTransferBlock:{uuid:M("4006")},tfliteModelName:{uuid:M("5000")},tfliteModelTask:{uuid:M("5001")},tfliteModelSampleRate:{uuid:M("5002")},tfliteModelSensorTypes:{uuid:M("5003")},tfliteModelNumberOfClasses:{uuid:M("5004")},tfliteModelIsReady:{uuid:M("5005")},tfliteCaptureDelay:{uuid:M("5006")},tfliteThreshold:{uuid:M("5007")},tfliteEnableInferencing:{uuid:M("5008")},tfliteModelInference:{uuid:M("5009")}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{dfu:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.dfu.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),N=W.serviceUUIDs,I=W.optionalServiceUUIDs,R=[...N,...I];function x(e){return W.getServiceNameFromUUID(e)}const A=[],O=[],U=[];function P(e){return W.getCharacteristicNameFromUUID(e)}function $(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":case"fileTransferCommand":case"fileTransferBlock":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":case"currentTime":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferStatus":case"fileTransferBlock":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferCommand":case"fileTransferBlock":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(W.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{N.includes(t.uuid)&&A.push(s.uuid),O.push(s.uuid),U.push(e)}))}),[]);h("BluetoothConnectionManager",{log:!0});class V extends T{onCharacteristicValueChanged(e,t){switch(e){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":case"maxFileLength":case"fileTransferStatus":case"tfliteModelIsReady":case"tfliteModelInference":this.onMessageReceived(e,t);break;case"name":this.onMessageReceived("getName",t);break;case"type":this.onMessageReceived("getType",t);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",t);break;case"currentTime":this.onMessageReceived("getCurrentTime",t);break;case"fileTransferType":this.onMessageReceived("getFileTransferType",t);break;case"fileLength":this.onMessageReceived("getFileLength",t);break;case"fileChecksum":this.onMessageReceived("getFileChecksum",t);break;case"fileTransferBlock":this.onMessageReceived("getFileTransferBlock",t);break;case"tfliteModelName":this.onMessageReceived("getTfliteModelName",t);break;case"tfliteModelTask":this.onMessageReceived("getTfliteModelTask",t);break;case"tfliteModelSampleRate":this.onMessageReceived("getTfliteModelSampleRate",t);break;case"tfliteModelSensorTypes":this.onMessageReceived("getTfliteModelSensorTypes",t);break;case"tfliteModelNumberOfClasses":this.onMessageReceived("getTfliteModelNumberOfClasses",t);break;case"tfliteCaptureDelay":this.onMessageReceived("getTfliteCaptureDelay",t);break;case"tfliteThreshold":this.onMessageReceived("getTfliteThreshold",t);break;case"tfliteEnableInferencing":this.onMessageReceived("getTfliteEnableInferencing",t);break;default:throw new Error(`uncaught characteristicName "${e}"`)}}characteristicNameForMessageType(e){switch(e){case"setName":return"name";case"setType":return"type";case"setSensorConfiguration":return"sensorConfiguration";case"setCurrentTime":return"currentTime";case"triggerVibration":return"vibration";case"setFileTransferType":return"fileTransferType";case"setFileLength":return"fileLength";case"setFileChecksum":return"fileChecksum";case"setFileTransferCommand":return"fileTransferCommand";case"setFileTransferBlock":return"fileTransferBlock";case"setTfliteModelName":return"tfliteModelName";case"setTfliteModelTask":return"tfliteModelTask";case"setTfliteModelSampleRate":return"tfliteModelSampleRate";case"setTfliteModelSensorTypes":return"tfliteModelSensorTypes";case"setTfliteModelNumberOfClasses":return"tfliteModelNumberOfClasses";case"setTfliteCaptureDelay":return"tfliteCaptureDelay";case"setTfliteThreshold":return"tfliteThreshold";case"setTfliteEnableInferencing":return"tfliteEnableInferencing";default:throw Error(`no characteristicName for messageType "${e}"`)}}}const F=h("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var _={bluetooth:t}}if(e)_=window.navigator;class B extends V{get id(){return this.device?.id}#he={characteristicvaluechanged:this.#ge.bind(this)};#de={gattserverdisconnected:this.#ue.bind(this)};static get isSupported(){return"bluetooth"in _}static get type(){return"webBluetooth"}#ve;get device(){return this.#ve}set device(e){this.#ve!=e?(this.#ve&&p(this.#ve,this.#de),e&&v(e,this.#de),this.#ve=e):F.log("tried to assign the same BluetoothDevice")}get server(){return this.#ve?.gatt}get isConnected(){return this.server?.connected}#pe=new Map;#fe=new Map;async connect(){await super.connect();try{const t=await _.bluetooth.requestDevice({filters:[{services:N}],optionalServices:e?I:[]});F.log("got BluetoothDevice"),this.device=t,F.log("connecting to device...");const s=await this.device.gatt.connect();F.log(`connected to device? ${s.connected}`),await this.#me(),F.log("fully connected"),this.status="connected"}catch(e){F.error(e),this.status="not connected",this.server?.disconnect(),this.#be()}}async#me(){this.#be(),F.log("getting services...");const e=await this.server.getPrimaryServices();F.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),F.log("getting characteristics...");for(const t in e){const i=e[t];F.log({service:i});const r=x(i.uuid);if(F.assertWithError(r,`no name found for service uuid "${i.uuid}"`),F.log(`got "${r}" service`),"dfu"==r){F.log("skipping dfu service");continue}i._name=r,this.#pe.set(r,i),F.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();F.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];F.log({characteristic:t});const i=P(t.uuid);F.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),F.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#fe.set(i,t),v(t,this.#he);const o=t.properties||$(i);o.notify&&(F.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(F.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#Se(t))}}}#be(){this.device&&p(this.device,this.#de),this.#fe.forEach((e=>{p(e,this.#he)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#be(),this.status="not connected"}#ge(e){F.log("oncharacteristicvaluechanged");const t=e.target;this.#Se(t)}#Se(e){F.log("onCharacteristicValue");const t=e._name;F.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),F.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;F.assertWithError(s,`no data found for "${t}" characteristic`),F.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}#ue(e){F.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){await super.sendMessage(...arguments);const i=this.characteristicNameForMessageType(e);F.log({characteristicName:i});const r=this.#fe.get(i);F.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||$(i);a.read&&!a.notify&&(F.log("reading value after write..."),await r.readValue(),(s||n)&&this.#Se(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),F.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(F.log("successfully reconnected!"),await this.#me(),this.status="connected"):(F.log("unable to reconnect"),this.status="not connected")}}const z={min:1/0,max:-1/0};class q{#ye=Object.assign({},z);reset(){Object.assign(this.#ye,z)}update(e){this.#ye.min=Math.min(e,this.#ye.min),this.#ye.max=Math.max(e,this.#ye.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#ye.min,this.#ye.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class j{#ye={x:new q,y:new q};reset(){this.#ye.x.reset(),this.#ye.y.reset()}update(e){this.#ye.x.update(e.x),this.#ye.y.update(e.y)}getNormalization(e){return{x:this.#ye.x.getNormalization(e.x),y:this.#ye.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const H=h("PressureSensorDataManager",{log:!0});class G{#De=[];get positions(){return this.#De}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;H.log({positions:t}),this.#De=t,this.#Ce=(s=this.numberOfSensors,n=()=>new q,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#Ce;#Te=new j;resetRange(){this.#Ce.forEach((e=>e.reset())),this.#Te.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),r=this.#Ce[s].updateAndGetNormalization(i),a=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:r,position:a},t.rawSum+=i,t.normalizedSum+=r/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#Te.updateAndGetNormalization(t.center)),H.log({pressure:t}),t}}const J=h("MotionSensorDataManager",{log:!1});class Q{static#Ee=6;static get Vector3Size(){return this.#Ee}get vector3Size(){return Q.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return J.log({vector:r}),r}static#we=8;static get QuaternionSize(){return this.#we}get quaternionSize(){return Q.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return J.log({quaternion:a}),a}}h("BarometerSensorDataManager",{log:!0});class Z{static#Me={barometer:.78125};static get Scalars(){return this.#Me}get scalars(){return Z.Scalars}}const K=h("ArrayBufferUtils",{log:!1}),X=new TextEncoder;function Y(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return te(e)}if(e instanceof Array){return Y(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return te(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function ee(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function te(e){const t=X.encode(e);return Y(t.byteLength,t)}function se(e,t,s){let n;return s&&(n=e.byteOffset+t+s),K.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const ne=h("ParseUtils",{log:!0}),ie=new TextDecoder;function re(e,t=0){const s=e.getUint8(t++);return{string:ie.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function ae(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),ne.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),ne.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=se(e,i,o);ne.log({_dataView:c}),s(a,c),i+=o}}const oe=h("SensorDataManager",{log:!0});class ce{pressureSensorDataManager=new G;motionSensorDataManager=new Q;barometerSensorDataManager=new Z;static#d=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#d}get types(){return ce.Types}#Le=new Map;static AssertValidSensorType(e){oe.assertTypeWithError(e,"string"),oe.assertWithError(this.#d.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){oe.assertTypeWithError(e,"number"),oe.assertWithError(e in this.#d,`invalid sensorTypeEnum ${e}`)}onDataReceived;#ke(e,t){let s=Date.now();s-=s%65536;return s+e.getUint16(t,!0)}parseData(e){oe.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#ke(e,t);t+=2;ae(new DataView(e.buffer,t),ce.Types,((e,t)=>{const n=e,i=this.#Le.get(n);let r;switch(n){case"pressure":r=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:oe.error(`uncaught sensorType "${n}"`)}oe.assertWithError(r,`no value defined for sensorType "${n}"`),this.onDataReceived(n,{timestamp:s,[n]:r})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=ce.Types[s];if(!n){oe.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);oe.log({sensorType:n,sensorScalar:i}),this.#Le.set(n,i)}}}const le=h("SensorConfigurationManager",{log:!1});class he{#We;#Ne(e){le.assertWithError(this.#We,"must get initial sensorConfiguration");const t=this.#We?.includes(e);return le.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=ce.Types[n];if(!i){le.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);le.log({sensorType:i,sensorRate:r}),t[i]=r}return le.log({parsedSensorConfiguration:t}),this.#We=Object.keys(t),t}static#Ie=65535;static get MaxSensorRate(){return this.#Ie}get maxSensorRate(){return he.MaxSensorRate}static#Re=5;static get SensorRateStep(){return this.#Re}get sensorRateStep(){return he.SensorRateStep}static#xe(e){le.assertTypeWithError(e,"number"),le.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),le.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),le.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#Ae(e){he.#xe(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#Ne(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{ce.AssertValidSensorType(t);const i=ce.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#Ae(r),s.setUint16(3*n+1,e[t],!0)})),le.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const ge=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],de=h("VibrationManager");class ue{static#Oe=["front","rear"];static get Locations(){return this.#Oe}get locations(){return ue.Locations}#Ue(e){de.assertTypeWithError(e,"string"),de.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#Pe(e){this.#$e(e),e.forEach((e=>{this.#Ue(e)}))}#Ve(e){this.#Pe(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),de.log({locationsBitmask:t}),de.assertWithError(t>0,"locationsBitmask must not be zero"),t}#$e(e){de.assertWithError(Array.isArray(e),"passed non-array"),de.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return ge}get waveformEffects(){return ue.WaveformEffects}#Fe(e){de.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#_e=1270;static get MaxWaveformEffectSegmentDelay(){return this.#_e}get maxWaveformEffectSegmentDelay(){return ue.MaxWaveformEffectSegmentDelay}#Be(e){if(null!=e.effect){const t=e.effect;this.#Fe(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;de.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),de.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ze(t)}}static#qe=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#qe}get maxWaveformEffectSegmentLoopCount(){return ue.MaxWaveformEffectSegmentLoopCount}#ze(e){de.assertTypeWithError(e,"number"),de.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),de.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#je=8;static get MaxNumberOfWaveformEffectSegments(){return this.#je}get maxNumberOfWaveformEffectSegments(){return ue.MaxNumberOfWaveformEffectSegments}#He(e){this.#$e(e),de.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Be(e)}))}static#Ge=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Ge}get maxWaveformEffectSequenceLoopCount(){return ue.MaxWaveformEffectSequenceLoopCount}#Je(e){de.assertTypeWithError(e,"number"),de.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),de.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Qe=2550;static get MaxWaveformSegmentDuration(){return this.#Qe}get maxWaveformSegmentDuration(){return ue.MaxWaveformSegmentDuration}#Ze(e){de.assertTypeWithError(e.amplitude,"number"),de.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),de.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),de.assertTypeWithError(e.duration,"number"),de.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),de.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Ke=20;static get MaxNumberOfWaveformSegments(){return this.#Ke}get maxNumberOfWaveformSegments(){return ue.MaxNumberOfWaveformSegments}#Xe(e){this.#$e(e),de.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Ze(e)}))}createWaveformEffectsData(e,t,s=0){this.#He(t),this.#Je(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return de.log({dataArray:n,dataView:o}),this.#Ye(e,"waveformEffect",o)}createWaveformData(e,t){this.#Xe(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),de.log({dataView:s}),this.#Ye(e,"waveform",s)}static#d=["waveformEffect","waveform"];static get Types(){return this.#d}get#et(){return ue.Types}#tt(e){de.assertTypeWithError(e,"string"),de.assertWithError(this.#et.includes(e),`invalid vibrationType "${e}"`)}#Ye(e,t,s){de.assertWithError(s?.byteLength>0,"no data received");const n=this.#Ve(e);this.#tt(t);const i=this.#et.indexOf(t);de.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=Y(n,i,s.byteLength,s);return de.log({data:r}),r}}const ve=h("Device",{log:!1});class pe{get id(){return this.#st?.id}constructor(){this.#nt.onDataReceived=this.#it.bind(this),this.#rt.sendMessage=this.#at.bind(this),this.#ot.sendMessage=this.#at.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{pe.#ct(this)}))}static get#lt(){return B}static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage"];static get EventTypes(){return this.#c}get eventTypes(){return pe.#c}#l=new u(this,this.eventTypes);addEventListener(e,t,s){this.#l.addEventListener(e,t,s)}#h(e){this.#l.dispatchEvent(e)}removeEventListener(e,t){return this.#l.removeEventListener(e,t)}#st;get connectionManager(){return this.#st}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#ht.bind(this),e.onMessageReceived=this.#gt.bind(this)),this.#st=e,ve.log("assigned new connectionManager",this.#st)):ve.log("same connectionManager is already assigned")}#at(e,t){return this.#st?.sendMessage(e,t)}async connect(){return this.connectionManager||(this.connectionManager=new pe.#lt),this.#dt(),this.connectionManager.connect()}#ut=!1;get isConnected(){return this.#ut}#oe(){ve.assertWithError(this.isConnected,"not connected")}static#vt=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","fileTransferStatus","getTfliteModelName","getTfliteModelTask","getTfliteModelSampleRate","getTfliteModelSensorTypes","getTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteEnableInferencing","tfliteModelInference"];static get AllInformationConnectionMessages(){return this.#vt}get#pt(){return pe.#vt}get#ft(){return this.#pt.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#dt(),this.connectionManager?.reconnect()}static#mt=!1;static get ReconnectOnDisconnection(){return this.#mt}static set ReconnectOnDisconnection(e){ve.assertTypeWithError(e,"boolean"),this.#mt=e}#bt=pe.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#bt}set reconnectOnDisconnection(e){ve.assertTypeWithError(e,"boolean"),this.#bt=e}#St;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#oe(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#st?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#st.status;default:return"not connected"}}#ht(e){ve.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(ve.log("starting reconnect interval..."),this.#St=setInterval((()=>{ve.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#St&&(ve.log("clearing reconnect interval"),clearInterval(this.#St),this.#St=void 0),this.#yt()}#Dt(e=!1){this.#h({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#h({type:this.connectionStatus}),e&&this.#h({type:"isConnected",message:{isConnected:this.isConnected}})}#yt(){switch(this.#ut=this.connectionManager?.isConnected&&this.#ft&&this.#Ct,this.connectionStatus){case"connected":this.#ut&&this.#Dt(!0);break;case"not connected":this.#Dt(!0);break;default:this.#Dt(!1)}}#dt(){this.latestConnectionMessage.clear(),this.#Ct=!1}#gt(e,t){switch(ve.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Tt.decode(t);ve.log({manufacturerName:s}),this.#Et({manufacturerName:s});break;case"modelNumber":const n=this.#Tt.decode(t);ve.log({modelNumber:n}),this.#Et({modelNumber:n});break;case"softwareRevision":const i=this.#Tt.decode(t);ve.log({softwareRevision:i}),this.#Et({softwareRevision:i});break;case"hardwareRevision":const r=this.#Tt.decode(t);ve.log({hardwareRevision:r}),this.#Et({hardwareRevision:r});break;case"firmwareRevision":const a=this.#Tt.decode(t);ve.log({firmwareRevision:a}),this.#Et({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),ve.log({pnpId:o}),this.#Et({pnpId:o});break;case"serialNumber":const c=this.#Tt.decode(t);ve.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);ve.log("received battery level",{batteryLevel:l}),this.#wt(l);break;case"getName":const h=this.#Tt.decode(t);ve.log({name:h}),this.#Mt(h);break;case"getType":const g=t.getUint8(0),d=this.#et[g];ve.log({typeEnum:g,type:d}),this.#w(d);break;case"getSensorConfiguration":const u=this.#Lt.parse(t);ve.log({sensorConfiguration:u}),this.#kt(u);break;case"sensorScalars":this.#nt.parseScalars(t);break;case"pressurePositions":this.#nt.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":const v=Number(t.getBigUint64(0,!0));this.#Wt(v);break;case"sensorData":this.#nt.parseData(t);break;default:if(this.#rt.messageTypes.includes(e))this.#rt.parseMessage(e,t);else{if(!this.#ot.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#ot.parseMessage(e,t)}}this.latestConnectionMessage.set(e,t),this.#h({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#ft&&this.#yt()}latestConnectionMessage=new Map;static#Nt=new TextEncoder;get#It(){return pe.#Nt}static#Rt=new TextDecoder;get#Tt(){return pe.#Rt}#Ct=!1;#Wt(e){ve.log({currentTime:e}),this.#Ct=0!=e,this.#Ct||this.#xt()}#xt(){ve.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#st.sendMessage("setCurrentTime",e)}#At={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#At}get#Ot(){return Object.values(this.#At).every((e=>null!=e))}#Et(e){ve.log({partialDeviceInformation:e});for(const t in e)this.#h({type:t,message:{[t]:e[t]}});Object.assign(this.#At,e),ve.log({deviceInformation:this.#At}),this.#Ot&&(ve.log("completed deviceInformation"),this.#h({type:"deviceInformation",message:{deviceInformation:this.#At}}))}#Ut=null;get batteryLevel(){return this.#Ut}#wt(e){ve.assertTypeWithError(e,"number"),this.#Ut!=e?(this.#Ut=e,ve.log({updatedBatteryLevel:this.#Ut}),this.#h({type:"batteryLevel",message:{batteryLevel:this.#Ut}})):ve.log(`duplicate batteryLevel assignment ${e}`)}#Pt;get name(){return this.#Pt}#Mt(e){ve.assertTypeWithError(e,"string"),this.#Pt=e,ve.log({updatedName:this.#Pt}),this.#h({type:"getName",message:{name:this.#Pt}})}static get MinNameLength(){return 2}get minNameLength(){return pe.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return pe.MaxNameLength}async setName(e){this.#oe(),ve.assertTypeWithError(e,"string"),ve.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ve.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#It.encode(e);ve.log({setNameData:t}),await this.#st.sendMessage("setName",t)}static#d=["leftInsole","rightInsole"];static get Types(){return this.#d}get#et(){return pe.Types}#T;get type(){return this.#T}get typeEnum(){return pe.Types.indexOf(this.type)}#$t(e){ve.assertEnumWithError(e,this.#et)}#Vt(e){ve.assertTypeWithError(e,"number"),ve.assertWithError(this.#et[e],`invalid typeEnum ${e}`)}#w(e){this.#$t(e),e!=this.type?(this.#T=e,ve.log({updatedType:this.#T}),this.#h({type:"getType",message:{type:this.#T}}),pe.#Ft&&pe.#_t(this)):ve.log("redundant type assignment")}async#Bt(e){this.#Vt(e);const t=Uint8Array.from([e]);ve.log({setTypeData:t}),await this.#st.sendMessage("setType",t)}async setType(e){this.#oe(),this.#$t(e);const t=this.#et.indexOf(e);this.#Bt(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#zt=["left","right"];static get InsoleSides(){return this.#zt}get insoleSides(){return pe.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return ce.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#Lt=new he;#qt;get sensorConfiguration(){return this.#qt}get sensorConfigurationData(){return this.#Lt.createData(this.sensorConfiguration)}static get MaxSensorRate(){return he.MaxSensorRate}static get SensorRateStep(){return he.SensorRateStep}#kt(e){this.#qt=e,ve.log({updatedSensorConfiguration:this.#qt}),this.#h({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#oe(),ve.log({newSensorConfiguration:e});const t=this.#Lt.createData(e);ve.log({setSensorConfigurationData:t}),await this.#st.sendMessage("setSensorConfiguration",t)}static#jt=!0;static get ClearSensorConfigurationOnLeave(){return this.#jt}static set ClearSensorConfigurationOnLeave(e){ve.assertTypeWithError(e,"boolean"),this.#jt=e}#Ht=pe.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Ht}set clearSensorConfigurationOnLeave(e){ve.assertTypeWithError(e,"boolean"),this.#Ht=e}static#Gt={};static get ZeroSensorConfiguration(){return this.#Gt}static{this.SensorTypes.forEach((e=>{this.#Gt[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#Jt=8;static get DefaultNumberOfPressureSensors(){return this.#Jt}#nt=new ce;#it(e,t){ve.log({sensorType:e,sensorData:t}),this.#h({type:e,message:t}),this.#h({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#nt.pressureSensorDataManager.resetRange()}#Qt=new ue;static get VibrationLocations(){return ue.Locations}static get VibrationTypes(){return ue.Types}static get VibrationWaveformEffects(){return ue.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return ue.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return ue.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return ue.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return ue.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return ue.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return ue.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#Qt.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#Qt.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Qt.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}ve.log({type:s,dataView:n}),t=Y(t,n)})),await this.#st.sendMessage("triggerVibration",t)}static#Zt=[];static get ConnectedDevices(){return this.#Zt}static#Ft=!1;static get UseLocalStorage(){return this.#Ft}static set UseLocalStorage(e){this.#Kt(),ve.assertTypeWithError(e,"boolean"),this.#Ft=e,this.#Ft&&!this.#Xt&&this.#Yt()}static#es={devices:[]};static#Xt;static get CanUseLocalStorage(){return e&&window.localStorage}static#Kt(){ve.assertWithError(e,"localStorage is only available in the browser"),ve.assertWithError(window.localStorage,"localStorage not found")}static#ts="BS.Device";static#ss(){this.#Kt(),localStorage.setItem(this.#ts,JSON.stringify(this.#Xt))}static async#Yt(){this.#Kt();let e=localStorage.getItem(this.#ts);if("string"!=typeof e)return ve.log("no info found in localStorage"),this.#Xt=Object.assign({},this.#es),void this.#ss();try{const t=JSON.parse(e);ve.log({configuration:t}),this.#Xt=t,this.CanGetDevices&&await this.GetDevices()}catch(e){ve.error(e)}}static#_t(e){if("webBluetooth"!=e.connectionType)return void ve.log("localStorage is only for webBluetooth devices");this.#Kt();const t=this.#Xt.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#Xt.devices[t].type=e.type,this.#ss())}static#ns=[];static get AvailableDevices(){return this.#ns}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void ve.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void ve.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void ve.warn("bluetooth.getDevices() is not available in this browser");this.#Xt||this.#Yt();const t=this.#Xt;if(!t.devices||0==t.devices.length)return void ve.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return ve.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#ns.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new pe,a=new B;a.device=e,e.name&&r.#Mt(e.name),r.#w(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#is(),this.AvailableDevices}static#rs=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#rs}static#as=new u(this,this.#rs);static AddEventListener(e,t,s){this.#as.addEventListener(e,t,s)}static#os(e){this.#as.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#as.removeEventListener(e,t)}static#ct(e){if(e.isConnected)if(this.#Zt.includes(e))ve.log("device already included");else{if(ve.log("adding device",e),this.#Zt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#Xt.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Xt.devices.push(t):this.#Xt.devices[s]=t,this.#ss()}this.#os({type:"deviceConnected",message:{device:e}}),this.#os({type:"deviceIsConnected",message:{device:e}})}else this.#Zt.includes(e)?(ve.log("removing device",e),this.#Zt.splice(this.#Zt.indexOf(e),1),this.#os({type:"deviceDisconnected",message:{device:e}}),this.#os({type:"deviceIsConnected",message:{device:e}})):ve.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));ve.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#is()}}static#is(){ve.log({AvailableDevices:this.AvailableDevices}),this.#os({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new pe;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#rt=new S;static get FileTypes(){return S.Types}get maxFileLength(){return this.#rt.maxLength}sendFile(e,t){this.#rt.send(e,t)}receiveFile(e){this.#rt.receive(e)}get fileTransferStatus(){return this.#rt.status}cancelFileTransfer(){this.#rt.cancel()}#ot=new D}const fe=h("Timer",{log:!1});class me{#cs;get callback(){return this.#cs}set callback(e){fe.assertTypeWithError(e,"function"),fe.log({newCallback:e}),this.#cs=e,this.isRunning&&this.restart()}#ls;get interval(){return this.#ls}set interval(e){fe.assertTypeWithError(e,"number"),fe.assertWithError(e>0,"interval must be above 0"),fe.log({newInterval:e}),this.#ls=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#hs=null;get isRunning(){return null!=this.#hs}start(){this.isRunning?fe.log("interval already running"):(fe.log("starting interval"),this.#hs=setInterval(this.#cs,this.#ls))}stop(){this.isRunning?(fe.log("stopping interval"),clearInterval(this.#hs),this.#hs=null):fe.log("interval already not running")}restart(){this.stop(),this.start()}}const be=h("BaseScanner");class Se{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#ne(){be.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ie(){be.assertWithError(this.constructor!=Se,`${this.constructor.name} must be subclassed`)}constructor(){this.#ie(),this.#ne(),v(this,this.#gs)}#gs={discoveredDevice:this.#ds.bind(this),isScanning:this.#us.bind(this)};static#c=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Se.#c}#l=new u(this,this.eventTypes);addEventListener(e,t,s){this.#l.addEventListener(e,t,s)}dispatchEvent(e){this.#l.dispatchEvent(e)}removeEventListener(e,t){return this.#l.removeEventListener(e,t)}get isAvailable(){return!1}#vs(){be.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#ps(){be.assertWithError(this.isScanning,"not scanning")}#fs(){be.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#vs(),this.#fs()}stopScan(){this.#ps()}#us(){this.isScanning?(this.#ms={},this.#bs={}):this.#Ss.stop()}#ms={};get discoveredDevices(){return this.#ms}get discoveredDevicesArray(){return Object.values(this.#ms).sort(((e,t)=>this.#bs[e.id]-this.#bs[t.id]))}#ys(e){be.assertWithError(this.#ms[e],`no discovered device with id "${e}"`)}#ds(e){const t=e.message.discoveredDevice;this.#ms[t.id]=t,this.#bs[t.id]=Date.now(),this.#Ss.start()}#bs={};static#Ds=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#Ds}get#Cs(){return Se.DiscoveredDeviceExpirationTimeout}#Ss=new me(this.#Ts.bind(this),1e3);#Ts(){const e=Object.entries(this.#ms);if(0==e.length)return void this.#Ss.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#bs[e];t-n>this.#Cs&&(be.log("discovered device timeout"),delete this.#ms[e],delete this.#bs[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#vs()}get canReset(){return!1}reset(){be.log("resetting...")}}const ye=h("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class De extends V{get id(){return this.#Es?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#Es?.state}async connect(){await super.connect(),await this.#Es.connectAsync()}async disconnect(){await super.disconnect(),await this.#Es.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);ye.log({characteristicName:s});const n=this.#fe.get(s);ye.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);ye.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#Es.connectable}async reconnect(){await super.reconnect(),ye.log("attempting to reconnect..."),this.connect()}#Es;get noblePeripheral(){return this.#Es}set noblePeripheral(e){ye.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(ye.log("newNoblePeripheral",e.id),this.#Es&&(p(this.#Es,this.#ws),delete this.#Es._connectionManager),e&&(e._connectionManager=this,v(e,this.#ws)),this.#Es=e):ye.log("attempted to assign duplicate noblePeripheral")}#ws={connect:this.#Ms,disconnect:this.#Ls,rssiUpdate:this.#ks,servicesDiscover:this.#Ws};async#Ms(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){ye.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#Es.discoverServicesAsync(R),await this.#Ns()}async#Ls(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){ye.log("onNoblePeripheralDisconnect",e.id),await this.#Ns()}async#Ns(){switch(ye.log(`noblePeripheral ${this.id} state ${this.#Es.state}`),this.#Es.state){case"connected":case"connecting":break;case"disconnected":this.#be(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":ye.error("noblePeripheral error");break;default:ye.log(`uncaught noblePeripheral state ${this.#Es.state}`)}}#be(){ye.log("removing noblePeripheral eventListeners"),this.#pe.forEach((e=>{p(e,this.#Is)})),this.#pe.clear(),this.#fe.forEach((e=>{p(e,this.#Rs)})),this.#fe.clear()}async#ks(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){ye.log("onNoblePeripheralRssiUpdate",e.id,t)}async#Ws(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){ye.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];ye.log("service",s.uuid);const n=x(s.uuid);ye.assertWithError(n,`no name found for service uuid "${s.uuid}"`),ye.log({serviceName:n}),this.#pe.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Is),await s.discoverCharacteristicsAsync()}}#pe=new Map;#Is={characteristicsDiscover:this.#xs};async#xs(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){ye.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];ye.log("characteristic",s.uuid);const n=P(s.uuid);ye.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),ye.log({characteristicName:n}),this.#fe.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Rs),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#As&&(this.status="connected")}#Rs={data:this.#Os,write:this.#Us,notify:this.#Ps};#fe=new Map;get#As(){return U.every((e=>this.#fe.has(e)))}#Os(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){ye.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(ee(t)),i=e._name;ye.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#Us(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){ye.log("onNobleCharacteristicWrite",e.uuid)}#Ps(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){ye.log("onNobleCharacteristicNotify",e.uuid,t)}}const Ce=h("NobleScanner",{log:!0});let Te=!1;if(t){var Ee=require("@abandonware/noble");Te=!0}class we extends Se{static get isSupported(){return Te}#$s=!1;get#Vs(){return this.#$s}set#Vs(e){Ce.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#$s=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):Ce.log("duplicate isScanning assignment")}get isScanning(){return this.#Vs}#Fs="unknown";get#_s(){return this.#Fs}set#_s(e){Ce.assertTypeWithError(e,"string"),this.#_s!=e?(this.#Fs=e,Ce.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):Ce.log("duplicate nobleState assignment")}#Bs={scanStart:this.#zs.bind(this),scanStop:this.#qs.bind(this),stateChange:this.#js.bind(this),discover:this.#Hs.bind(this)};#zs(){Ce.log("OnNobleScanStart"),this.#Vs=!0}#qs(){Ce.log("OnNobleScanStop"),this.#Vs=!1}#js(e){Ce.log("onNobleStateChange",e),this.#_s=e}#Hs(e){let t;Ce.log("onNobleDiscover",e.id),this.#Gs[e.id]||(e._scanner=this,this.#Gs[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=pe.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(Ee,this.#Bs),v(this,this.#Js)}get isAvailable(){return"poweredOn"==this.#_s}startScan(){super.startScan(),Ee.startScanningAsync(N,!0)}stopScan(){super.stopScan(),Ee.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),Ee.reset()}#Js={expiredDiscoveredDevice:this.#Qs.bind(this)};#Qs(e){const t=e.message.discoveredDevice;this.#Gs[t.id]&&delete this.#Gs[t.id]}#Gs={};#Zs(e){Ce.assertTypeWithError(e,"string"),Ce.assertWithError(this.#Gs[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#Zs(e);const t=this.#Gs[e];Ce.log("connecting to discoveredDevice...",e);let s=pe.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#Ks(t),await s.connect())}#Ks(e){const t=new pe,s=new De;return s.noblePeripheral=e,t.connectionManager=s,t}}const Me=h("Scanner",{log:!1});let Le;we.isSupported?(Me.log("using NobleScanner"),Le=new we):Me.log("Scanner not available");var ke=Le;const We=h("DevicePairPressureSensorDataManager",{log:!0});class Ne{static get Sides(){return pe.InsoleSides}get sides(){return pe.InsoleSides}#Xs={};#Te=new j;resetPressureRange(){this.#Te.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(We.log({pressure:t,insoleSide:s}),this.#Xs[s]=t,this.#Ys)return this.#en();We.log("doesn't have all pressure data yet...")}get#Ys(){return this.sides.every((e=>e in this.#Xs))}#en(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Xs[t].rawSum,e.normalizedSum+=this.#Xs[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Xs[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#Te.updateAndGetNormalization(e.center)),We.log({devicePairPressure:e}),e}}const Ie=h("DevicePairSensorDataManager",{log:!0});class Re{static get Sides(){return pe.InsoleSides}get sides(){return pe.InsoleSides}#tn={};pressureSensorDataManager=new Ne;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(Ie.log({sensorType:s,timestamp:t,event:e}),this.#tn[s]||(this.#tn[s]={}),this.#tn[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else Ie.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#tn[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else Ie.log("no value received")}onDataReceived}const xe=h("DevicePair",{log:!0});class Ae{constructor(){this.#nt.onDataReceived=this.#it.bind(this)}static#c=["isConnected","pressure",...pe.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#c}get eventTypes(){return Ae.#c}#l=new u(this,this.eventTypes);addEventListener(e,t,s){this.#l.addEventListener(e,t,s)}#h(e){this.#l.dispatchEvent(e)}removeEventListener(e,t){return this.#l.removeEventListener(e,t)}static get Sides(){return pe.InsoleSides}get sides(){return Ae.Sides}#sn;get left(){return this.#sn}#nn;get right(){return this.#nn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#oe(){xe.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void xe.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#in),v(e,this.#in),t){case"left":this.#sn=e;break;case"right":this.#nn=e}return xe.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#h({type:"isConnected",message:{isConnected:this.isConnected}}),this.#h({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}xe.log("device already assigned")}#in={connectionStatus:this.#rn.bind(this),isConnected:this.#an.bind(this),sensorData:this.#on.bind(this),getSensorConfiguration:this.#rn.bind(this)};#rn(e){this.#h({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#an(e){this.#rn(e),this.#h({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#nt=new Re;#on(e){this.#rn(e),this.#h({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#nt.onDeviceSensorData(e)}#it(e,t){xe.log({sensorType:e,sensorData:t}),this.#h({type:e,message:t})}resetPressureRange(){this.#nt.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#cn=new Ae;static get shared(){return this.#cn}static{pe.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#cn.assignInsole(t)}))}}const Oe=h("ServerUtils",{log:!1}),Ue=3e7;function Pe(e,...t){Oe.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=Y(...t.data),n=s.byteLength;Oe.assertEnumWithError(t.type,e);return Y(e.indexOf(t.type),Uint16Array.from([n]),s)}));return Oe.log("messageBuffers",...s),Y(...s)}const $e=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function Ve(...e){return Pe($e,...e)}function Fe(...e){return Oe.log("createDeviceMessage",...e),Pe(pe.EventTypes,...e)}function _e(...e){return Pe(T.MessageTypes,...e)}const Be=Ve("ping"),ze=Ve("pong");Ve("isScanningAvailable"),Ve("isScanning"),Ve("startScan"),Ve("stopScan");const qe=Ve("discoveredDevices"),je=h("WebSocketClientConnectionManager",{log:!0});class He extends T{static get isSupported(){return e}static get type(){return"webSocketClient"}#ln;get id(){return this.#ln}set id(e){je.assertTypeWithError(e,"string"),this.#ln!=e?this.#ln=e:je.log("redundant id assignment")}#ut=!1;get isConnected(){return this.#ut}set isConnected(e){je.assertTypeWithError(e,"boolean"),this.#ut!=e?(this.#ut=e,this.status=this.#ut?"connected":"not connected",this.#ut&&this.#hn()):je.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":je.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),je.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){je.log({dataView:e}),ae(e,pe.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));je.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":this.onMessageReceived(s,t);break;default:je.error(`uncaught messageType "${s}"`)}}),!0)}#hn(){this.sendWebSocketMessage(...pe.AllInformationConnectionMessages)}}const Ge=h("WebSocketClient",{log:!0});class Je{static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Je.#c}#l=new u(this,this.eventTypes);addEventListener(e,t,s){this.#l.addEventListener(e,t,s)}#h(e){this.#l.dispatchEvent(e)}removeEventListener(e,t){return this.#l.removeEventListener(e,t)}#gn;get webSocket(){return this.#gn}set webSocket(e){this.#gn!=e?(Ge.log("assigning webSocket",e),this.#gn&&p(this.#gn,this.#dn),v(e,this.#dn),this.#gn=e,Ge.log("assigned webSocket")):Ge.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#un(){Ge.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#vn(){Ge.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#vn(),this.#pn="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#un(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#pn="disconnecting",this.webSocket.close()}reconnect(){this.#vn(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#mt=!0;static get ReconnectOnDisconnection(){return this.#mt}static set ReconnectOnDisconnection(e){Ge.assertTypeWithError(e,"boolean"),this.#mt=e}#bt=Je.#mt;get reconnectOnDisconnection(){return this.#bt}set reconnectOnDisconnection(e){Ge.assertTypeWithError(e,"boolean"),this.#bt=e}#fn(e){this.#un(),this.#gn.send(e)}#mn(...e){this.#fn(Ve(...e))}#dn={open:this.#bn.bind(this),message:this.#Sn.bind(this),close:this.#yn.bind(this),error:this.#Dn.bind(this)};#bn(e){Ge.log("webSocket.open",e),this.#Cn.start(),this.#pn="connected"}async#Sn(e){Ge.log("webSocket.message",e),this.#Cn.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Tn(s)}#yn(e){Ge.log("webSocket.close",e),this.#pn="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#Cn.stop(),this.#bt&&setTimeout((()=>{this.reconnect()}),3e3)}#Dn(e){Ge.log("webSocket.error",e)}#En="not connected";get#pn(){return this.#En}set#pn(e){switch(Ge.assertTypeWithError(e,"string"),Ge.log({newConnectionStatus:e}),this.#En=e,this.#h({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#h({type:this.connectionStatus}),e){case"connected":case"not connected":this.#h({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#mn("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#wn=!1,this.#Vs=!1)}}get connectionStatus(){return this.#pn}#Tn(e){Ge.log("parseMessage",{dataView:e}),ae(e,$e,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#Mn();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));Ge.log({isScanningAvailable:e}),this.#wn=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));Ge.log({isScanning:e}),this.#Vs=e}break;case"discoveredDevice":{const{string:e}=re(t,n);Ge.log({discoveredDeviceString:e});const s=JSON.parse(e);Ge.log({discoveredDevice:s}),this.#ds(s)}break;case"expiredDiscoveredDevice":{const{string:e}=re(t,n);this.#Qs(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=re(t,n);Ge.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);Ge.log({connectedDeviceIds:s}),this.#Ln(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=re(t,n);n=s;const i=this.#kn[e];Ge.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=se(t,n);r.onWebSocketMessage(a)}break;default:Ge.error(`uncaught messageType "${s}"`)}}),!0)}#Cn=new me(this.#Wn.bind(this),Ue);#Wn(){this.#mn("ping")}#Mn(){this.#mn("pong")}#Nn=!1;get#wn(){return this.#Nn}set#wn(e){Ge.assertTypeWithError(e,"boolean"),this.#Nn=e,this.#h({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#In()}get isScanningAvailable(){return this.#wn}#Rn(){this.#un(),Ge.assertWithError(this.isScanningAvailable,"scanning is not available")}#xn(){this.#mn("isScanningAvailable")}#$s=!1;get#Vs(){return this.#$s}set#Vs(e){Ge.assertTypeWithError(e,"boolean"),this.#$s=e,this.#h({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Vs}#In(){this.#mn("isScanning")}#ps(){Ge.assertWithError(this.isScanning,"is not scanning")}#fs(){Ge.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#fs(),this.#mn("startScan")}stopScan(){this.#ps(),this.#mn("stopScan")}toggleScan(){this.#Rn(),this.isScanning?this.stopScan():this.startScan()}#ms={};get discoveredDevices(){return this.#ms}#ds(e){Ge.log({discoveredDevice:e}),this.#ms[e.id]=e,this.#h({type:"discoveredDevice",message:{discoveredDevice:e}})}#An(){this.#fn(qe)}#Qs(e){Ge.log({expiredDeviceId:e});const t=this.#ms[e];t?(Ge.log({expiredDiscoveredDevice:t}),delete this.#ms[e],this.#h({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Ge.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#On(e)}#On(e){this.#un(),Ge.assertTypeWithError(e,"string");const t=this.#Un(e);return t.connect(),t}#Pn(e){this.#fn(this.#$n(e))}#$n(e){return Ve({type:"connectToDevice",data:e})}#Ks(e){const t=new pe,s=new He;return s.id=e,s.sendWebSocketMessage=this.#Vn.bind(this,e),s.sendWebSocketConnectMessage=this.#Pn.bind(this,e),s.sendWebSocketDisconnectMessage=this.#Fn.bind(this,e),t.connectionManager=s,t}#Un(e){let t=this.#kn[e];return t||(t=this.#Ks(e),this.#kn[e]=t),t}#Ln(e){Ge.log({deviceIds:e}),e.forEach((e=>{this.#Un(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#_n(e)}#_n(e){this.#un(),Ge.assertTypeWithError(e,"string");const t=this.devices[e];return Ge.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#Fn(e){this.#fn(this.#Bn(e))}#Bn(e){return Ve({type:"disconnectFromDevice",data:e})}#Vn(e,...t){this.#fn(this.#zn(e,...t))}#zn(e,...t){return Ve({type:"deviceMessage",data:[e,_e(...t)]})}#kn={};get devices(){return this.#kn}}const Qe=h("BaseServer",{log:!0});class Ze{#ie(){Qe.assertWithError(this.constructor!=Ze,`${this.constructor.name} must be subclassed`)}static#c=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#c}get eventTypes(){return Ze.#c}#l=new u(this,this.eventTypes);addEventListener(e,t,s){this.#l.addEventListener(e,t,s)}dispatchEvent(e){this.#l.dispatchEvent(e)}removeEventListener(e,t){return this.#l.removeEventListener(e,t)}constructor(){this.#ie(),Qe.assertWithError(ke,"no scanner defined"),v(ke,this.#qn),v(pe,this.#jn),v(this,this.#Hn)}get numberOfClients(){return 0}static#Gn=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#Gn}static set ClearSensorConfigurationsWhenNoClients(e){Qe.assertTypeWithError(e,"boolean"),this.#Gn=e}#Jn=Ze.#Gn;get clearSensorConfigurationsWhenNoClients(){return this.#Jn}set clearSensorConfigurationsWhenNoClients(e){Qe.assertTypeWithError(e,"boolean"),this.#Jn=e}#Hn={clientConnected:this.#Qn.bind(this),clientDisconnected:this.#Zn.bind(this)};#Qn(e){e.message.client,Qe.log("onClientConnected")}#Zn(e){e.message.client,Qe.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&pe.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){Qe.log("broadcasting",e)}#qn={isAvailable:this.#Kn.bind(this),isScanning:this.#Xn.bind(this),discoveredDevice:this.#Yn.bind(this),expiredDiscoveredDevice:this.#Qs.bind(this)};#Kn(e){this.broadcastMessage(this.#ei)}get#ei(){return Ve({type:"isScanningAvailable",data:ke.isAvailable})}#Xn(e){this.broadcastMessage(this.#ti)}get#ti(){return Ve({type:"isScanning",data:ke.isScanning})}#Yn(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#si(t))}#si(e){return Ve({type:"discoveredDevice",data:e})}#Qs(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#ni(t))}#ni(e){return Ve({type:"expiredDiscoveredDevice",data:e.id})}get#ii(){return Ve(...ke.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#ri(){return Ve({type:"connectedDevices",data:JSON.stringify(pe.ConnectedDevices.map((e=>e.id)))})}#ai={connectionMessage:this.#oi.bind(this)};#zn(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#oi(e){const t=e.target;if(Qe.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#ci(t,this.#zn(t,s,n)))}#jn={deviceConnected:this.#li.bind(this),deviceDisconnected:this.#hi.bind(this),deviceIsConnected:this.#an.bind(this)};#li(e){const t=e.message.device;Qe.log("onDeviceConnected",t.id),v(t,this.#ai)}#hi(e){const t=e.message.device;Qe.log("onDeviceDisconnected",t.id),p(t,this.#ai)}#an(e){const t=e.message.device;Qe.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#gi(t))}#gi(e){return this.#ci(e,{type:"isConnected",data:e.isConnected})}#ci(e,...t){return Ve({type:"deviceMessage",data:[e.id,Fe(...t)]})}parseClientMessage(e){let t=[];if(ae(e,$e,((e,s)=>{const n=e;switch(n){case"ping":t.push(ze);break;case"pong":break;case"isScanningAvailable":t.push(this.#ei);break;case"isScanning":t.push(this.#ti);break;case"startScan":ke.startScan();break;case"stopScan":ke.stopScan();break;case"discoveredDevices":t.push(this.#ii);break;case"connectToDevice":{const{string:e}=re(s);ke.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=re(s),t=pe.ConnectedDevices.find((t=>t.id==e));if(!t){Qe.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#ri);break;case"deviceMessage":{const{string:e,byteOffset:n}=re(s),i=pe.ConnectedDevices.find((t=>t.id==e));if(!i){Qe.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:Qe.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return Y(t)}parseClientDeviceMessage(e,t){Qe.log("onDeviceMessage",e.id,t);let s=[];if(ae(t,T.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":s.push(this.#zn(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:Qe.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#ci(e,...s)}}const Ke=h("WebSocketServer",{log:!0});t&&require("ws");var Xe={setAllConsoleLevelFlags:function(e){l.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){l.setLevelFlagsForType(e,t)},Device:pe,DevicePair:Ae,WebSocketClient:Je,WebSocketServer:class extends Ze{get numberOfClients(){return this.#di?.clients.size||0}#di;get server(){return this.#di}set server(e){this.#di!=e?(Ke.log("assigning server..."),this.#di&&(Ke.log("clearing existing server..."),p(this.#di,this.#Hn)),v(e,this.#Hn),this.#di=e,Ke.log("assigned server")):Ke.log("redundant WebSocket assignment")}#Hn={close:this.#ui.bind(this),connection:this.#vi.bind(this),error:this.#pi.bind(this),headers:this.#fi.bind(this),listening:this.#mi.bind(this)};#ui(){Ke.log("server.close")}#vi(e){Ke.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new me((()=>this.#bi(e)),Ue),e.pingClientTimer.start(),v(e,this.#Si),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#pi(e){Ke.error(e)}#fi(){}#mi(){Ke.log("server.listening")}#Si={open:this.#yi.bind(this),message:this.#Di.bind(this),close:this.#Ci.bind(this),error:this.#Ti.bind(this)};#yi(e){Ke.log("client.open")}#Di(e){Ke.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(ee(e.data));this.#Ei(t,s)}#Ci(e){Ke.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#Si),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#Ti(e){Ke.log("client.error")}#Ei(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#bi(e){e.isAlive?(e.isAlive=!1,e.send(Be)):e.terminate()}},Scanner:ke};return Xe}));
