/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e=!1,t="undefined"!=typeof window&&"undefined"!==window?.document,s="undefined"!=typeof process&&null!=process?.versions?.node,n=t&&navigator.userAgent.includes("Bluefy"),i=t&&navigator.userAgent.includes("WebBLE");t&&navigator.userAgent.includes("Android"),t&&navigator.userAgent.includes("Safari");var a;if(!t&&!s&&"undefined"!=typeof global&&"undefined"!=typeof Studio){const e=function(...e){Studio.log(e.map((e=>new String(e))).join(","))};a={log:e,warn:e,error:e}}else a=console;if(!a.assert){const e=(e,...t)=>{e||a.warn(...t)};a.assert=e}if(!a.table){const e=(...e)=>{a.log(...e)};a.table=e}function r(){}const o=a.log.bind(a),c=a.warn.bind(a),h=a.error.bind(a),l=a.table.bind(a),g=a.assert.bind(a);class d{static#e={};constructor(e){if(d.#e[e])throw new Error(`"${e}" console already exists`);d.#e[e]=this}#t={log:e,warn:e,assert:!0,error:!0,table:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new d(e)}get log(){return this.#t.log?o:r}get warn(){return this.#t.warn?c:r}get error(){return this.#t.error?h:r}get assert(){return this.#t.assert?g:r}get table(){return this.#t.table?l:r}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function u(e,t){return d.create(e,t)}function p(e){return e[0].toUpperCase()+e.slice(1)}const f=u("EventDispatcher",{log:!1});class m{constructor(e,t){f.assertWithError(e,"target is required"),this.#s=e,f.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#a(e){f.assertWithError(this.#i(e),`invalid event type "${e}"`)}#r;addEventListener(e,t,s){if(f.log(`adding "${e}" eventListener`,t),this.#a(e),this.#r||(this.#r={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#r;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return f.log(`has "${e}" eventListener?`,t),this.#a(e),this.#r?.[e]?.includes(t)}removeEventListener(e,t){if(f.log(`removing "${e}" eventListener`,t),this.#a(e),this.hasEventListener(e,t)){const s=this.#r[e].indexOf(t);return this.#r[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#a(e.type),this.#r?.[e.type]){e.target=this.#s;const t=this.#r[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){f.error(e)}}}waitForEvent(e){return f.log(`waiting for event "${e}"`),this.#a(e),new Promise((t=>{this.addEventListener(e,(e=>{t(e)}),{once:!0})}))}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;f.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function y(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;f.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const b=u("Timer",{log:!1});class S{#o;get callback(){return this.#o}set callback(e){b.assertTypeWithError(e,"function"),b.log({newCallback:e}),this.#o=e,this.isRunning&&this.restart()}#c;get interval(){return this.#c}set interval(e){b.assertTypeWithError(e,"number"),b.assertWithError(e>0,"interval must be above 0"),b.log({newInterval:e}),this.#c=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#h=null;get isRunning(){return null!=this.#h}start(){this.isRunning?b.log("interval already running"):(b.log("starting interval"),this.#h=setInterval(this.#o,this.#c))}stop(){this.isRunning?(b.log("stopping interval"),clearInterval(this.#h),this.#h=null):b.log("interval already not running")}restart(){this.stop(),this.start()}}function D(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}u("checksum",{log:!0});const T=new Uint32Array(256);for(let e=0;e<256;++e)T[e]=D(e);function w(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(T[n^i]^s>>>8)>>>0}return s}var E,M;E="undefined"==typeof TextEncoder?class{encode(e){const t=Array.from(e).map((e=>e.charCodeAt(0)));return Uint8Array.from(t)}}:TextEncoder,M="undefined"==typeof TextDecoder?class{decode(e){return Array.from(new Uint8Array(e)).map((e=>String.fromCharCode(e))).join("")}}:TextDecoder;const C=new E,k=new M,L=u("ArrayBufferUtils",{log:!1});function I(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return x(e)}if(e instanceof Array){return I(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return x(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function W(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function x(e){const t=C.encode(e);return I(t.byteLength,t)}function N(e,t,s){let n;return null!=s&&(n=e.byteOffset+t+s),L.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}async function _(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}const U=u("FileTransferManager",{log:!0});class R{static#l=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#l}get messageTypes(){return R.MessageTypes}static#g=[...this.#l,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#g}get eventTypes(){return R.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#u=["tflite"];static get Types(){return this.#u}get types(){return R.Types}#p(e){U.assertEnumWithError(e,this.types)}#f(e){U.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#m=["idle","sending","receiving"];static get Statuses(){return this.#m}get statuses(){return R.Statuses}#v(e){U.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#y=["startSend","startReceive","cancel"];static get Commands(){return this.#y}get commands(){return R.Commands}#b(e){U.assertEnumWithError(e,this.commands)}static#S=0;static get MaxLength(){return this.#S}#D=R.MaxLength;get maxLength(){return this.#D}#T(e){U.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);U.log(`maxLength: ${t/1024}kB`),this.#D=t}#w(e){U.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#E;get type(){return this.#E}#M(e){U.log("parseFileType",e);const t=e.getUint8(0);this.#f(t);const s=this.types[t];this.#C(s)}#C(e){U.log({fileTransferType:e}),this.#E=e,this.#d({type:"getFileTransferType",message:{fileType:e}})}async#k(e,t){if(this.#p(e),this.type==e)return void U.log(`redundant type assignment ${e}`);const s=this.waitForEvent("getFileTransferType"),n=this.types.indexOf(e);this.sendMessage([{type:"setFileTransferType",data:Uint8Array.from([n]).buffer}],t),await s}#L=0;get length(){return this.#L}#I(e){U.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#W(t)}#W(e){U.log(`length: ${e/1024}kB`),this.#L=e,this.#d({type:"getFileLength",message:{fileLength:e}})}async#x(e,t){if(U.assertTypeWithError(e,"number"),this.#w(e),this.length==e)return void U.log(`redundant length assignment ${e}`);const s=this.waitForEvent("getFileLength"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileLength",data:n.buffer}],t),await s}#N=0;get checksum(){return this.#N}#_(e){U.log("checksum",e);const t=e.getUint32(0,!0);this.#U(t)}#U(e){U.log({checksum:e}),this.#N=e,this.#d({type:"getFileChecksum",message:{fileChecksum:e}})}async#R(e,t){if(U.assertTypeWithError(e,"number"),this.checksum==e)return void U.log(`redundant checksum assignment ${e}`);const s=this.waitForEvent("getFileChecksum"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileChecksum",data:n.buffer}],t),await s}async#F(e,t){this.#b(e);const s=this.waitForEvent("fileTransferStatus"),n=this.commands.indexOf(e);this.sendMessage([{type:"setFileTransferCommand",data:Uint8Array.from([n]).buffer}],t),await s}#A="idle";get status(){return this.#A}#O(e){U.log("parseFileStatus",e);const t=e.getUint8(0);this.#v(t);const s=this.statuses[t];this.#P(s)}#P(e){U.log({status:e}),this.#A=e,this.#d({type:"fileTransferStatus",message:{fileTransferStatus:e}}),this.#$.length=0}#V(){U.assertWithError("idle"==this.#A,"status is not idle")}#B(){U.assertWithError("idle"!=this.#A,"status is idle")}#$=[];async#z(e){U.log("parseFileBlock",e),this.#$.push(e.buffer);const t=this.#$.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#L;if(U.log(`received ${t} of ${this.#L} bytes (${100*s}%)`),this.#d({type:"fileTransferProgress",message:{progress:s}}),t!=this.#L)return;U.log("file transfer complete");let n,i=(new Date).toLocaleString();if("tflite"===this.type)i+=".tflite";n="undefined"!=typeof File?new File(this.#$,i):new Blob(this.#$);const a=w(await n.arrayBuffer());U.log({checksum:a}),a==this.#N?(U.log("received file",n),this.#d({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#d({type:"fileReceived",message:{file:n}})):U.error(`wrong checksum - expected ${this.#N}, got ${a}`)}parseMessage(e,t){switch(U.log({messageType:e}),e){case"maxFileLength":this.#T(t);break;case"getFileTransferType":case"setFileTransferType":this.#M(t);break;case"getFileLength":case"setFileLength":this.#I(t);break;case"getFileChecksum":case"setFileChecksum":this.#_(t);break;case"fileTransferStatus":this.#O(t);break;case"getFileTransferBlock":this.#z(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#V(),this.#p(e);const s=await _(t),n=[];n.push(this.#k(e,!1));const i=s.byteLength;n.push(this.#x(i,!1));const a=w(s);n.push(this.#R(a,!1)),n.push(this.#F("startSend",!1)),this.sendMessage(),await Promise.all(n),await this.#q(s)}async#q(e){return this.#j(e)}async#j(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+(this.mtu-3-3));U.log("slicedBuffer",s);const n=1-(e.byteLength-t)/e.byteLength;if(U.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#d({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage([{type:"setFileTransferBlock",data:s}]),this.#j(e,t+s.byteLength);U.log("finished sending buffer"),this.#d({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#V(),this.#p(e),await this.#k(e),await this.#F("startReceive")}async cancel(){this.#B(),await this.#F("cancel")}sendMessage;mtu}const F=65536;function A(e,t){const s=Date.now();var n;return(n=s)-n%F+e.getUint16(t,!0)}const O={min:1/0,max:-1/0};class P{#H=Object.assign({},O);reset(){Object.assign(this.#H,O)}update(e){this.#H.min=Math.min(e,this.#H.min),this.#H.max=Math.max(e,this.#H.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#H.min,this.#H.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class ${#H={x:new P,y:new P};reset(){this.#H.x.reset(),this.#H.y.reset()}update(e){this.#H.x.update(e.x),this.#H.y.update(e.y)}getNormalization(e){return{x:this.#H.x.getNormalization(e.x),y:this.#H.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const V=u("PressureSensorDataManager",{log:!0});class B{static#u=["pressure"];static get Types(){return this.#u}#G=[];get positions(){return this.#G}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;V.log({positions:t}),this.#G=t,this.#J=(s=this.numberOfSensors,n=()=>new P,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#J;#Q=new $;resetRange(){this.#J.forEach((e=>e.reset())),this.#Q.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),a=this.#J[s].updateAndGetNormalization(i),r=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:a,position:r},t.rawSum+=i,t.normalizedSum+=a/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#Q.updateAndGetNormalization(t.center)),V.log({pressure:t}),t}}const z=u("MotionSensorDataManager",{log:!0});class q{static#u=["acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","orientation","activity","stepCounter","stepDetector","deviceOrientation"];static get Types(){return this.#u}static#Z=6;static get Vector3Size(){return this.#Z}get vector3Size(){return q.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const a={x:s,y:n,z:i};return z.log({vector:a}),a}static#K=8;static get QuaternionSize(){return this.#K}get quaternionSize(){return q.QuaternionSize}parseQuaternion(e,t){let[s,n,i,a]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const r={x:s,y:n,z:i,w:a};return z.log({quaternion:r}),r}static#X=6;static get EulerSize(){return this.#X}get eulerSize(){return q.EulerSize}parseEuler(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));n*=-1,s*=-1;const a={heading:s,pitch:n,roll:i};return z.log({euler:a}),a}parseStepCounter(e){z.log("parseStepCounter",e);const t=e.getUint32(0,!0);return z.log({stepCount:t}),t}static#Y=["still","walking","running","bicycle","vehicle","tilting"];static get ActivityTypes(){return this.#Y}get#ee(){return q.#Y}parseActivity(e){z.log("parseActivity",e);const t={},s=e.getUint8(0);return z.log("activityBitfield",s.toString(2)),this.#ee.forEach(((e,n)=>{t[e]=Boolean(s&1<<n)})),z.log("activity",t),t}static#te=["portraitUpright","landscapeLeft","portraitUpsideDown","landscapeRight","unknown"];static get DeviceOrientations(){return this.#te}get#se(){return q.#te}parseDeviceOrientation(e){z.log("parseDeviceOrientation",e);const t=e.getUint8(0),s=this.#se[t];return z.assertWithError(s,"undefined deviceOrientation"),z.log({deviceOrientation:s}),s}}const j=u("BarometerSensorDataManager",{log:!0});class H{static#u=["barometer"];static get Types(){return this.#u}#ne(e){const t=.0065;return 288.15/t*(1-Math.pow(e/101325,.19026643566373183))}parseData(e,t){const s=e.getUint32(0,!0)*t,n=this.#ne(s);return j.log({pressure:s,altitude:n}),{pressure:s}}}const G=u("ParseUtils",{log:!0});function J(e,t=0){const s=e.getUint8(t++);return{string:k.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function Q(e,t,s,n,i=!1){let a=0;for(;a<e.byteLength;){const r=e.getUint8(a++),o=t[r];let c;i?(c=e.getUint16(a,!0),a+=2):c=e.getUint8(a++),G.log({messageTypeEnum:r,messageType:o,messageLength:c,dataView:e,byteOffset:a}),G.assertWithError(o,`invalid messageTypeEnum ${r}`);const h=N(e,a,c);G.log({_dataView:h}),s(o,h,n),a+=c}}const Z=u("SensorDataManager",{log:!0});class K{static#l=["getPressurePositions","getSensorScalars","sensorData"];static get MessageTypes(){return this.#l}get messageTypes(){return K.MessageTypes}pressureSensorDataManager=new B;motionSensorDataManager=new q;barometerSensorDataManager=new H;static#u=[...B.Types,...q.Types,...H.Types];static get Types(){return this.#u}get types(){return K.Types}#ie=new Map;static AssertValidSensorType(e){Z.assertTypeWithError(e,"string"),Z.assertWithError(this.#u.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){Z.assertTypeWithError(e,"number"),Z.assertWithError(e in this.#u,`invalid sensorTypeEnum ${e}`)}static#g=[...this.#l,...this.#u];static get EventTypes(){return this.#g}get eventTypes(){return K.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#ae(e){Z.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=A(e,t);t+=2;Q(new DataView(e.buffer,t),K.Types,this.#re.bind(this),{timestamp:s})}#re(e,t,{timestamp:s}){const n=this.#ie.get(e);let i=null;switch(e){case"pressure":i=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(t,n);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(t,n);break;case"orientation":i=this.motionSensorDataManager.parseEuler(t,n);break;case"stepCounter":i=this.motionSensorDataManager.parseStepCounter(t);break;case"stepDetector":i={};break;case"activity":i=this.motionSensorDataManager.parseActivity(t);break;case"deviceOrientation":i=this.motionSensorDataManager.parseDeviceOrientation(t);break;case"barometer":i=this.barometerSensorDataManager.parseData(t,n);break;default:Z.error(`uncaught sensorType "${e}"`)}Z.assertWithError(null!=i,`no sensorData defined for sensorType "${e}"`),Z.log({sensorType:e,sensorData:i,sensorData:i}),this.#d({type:e,message:{[e]:i,timestamp:s}}),this.#d({type:"sensorData",message:{[e]:i,sensorType:e,timestamp:s}})}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=K.Types[s];if(!n){Z.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);Z.log({sensorType:n,sensorScalar:i}),this.#ie.set(n,i)}}parseMessage(e,t){switch(Z.log({messageType:e}),e){case"getSensorScalars":this.parseScalars(t);break;case"getPressurePositions":this.pressureSensorDataManager.parsePositions(t);break;case"sensorData":this.#ae(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const X=u("SensorConfigurationManager",{log:!0});class Y{static#l=["getSensorConfiguration","setSensorConfiguration"];static get MessageTypes(){return this.#l}get messageTypes(){return Y.MessageTypes}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return Y.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static get#oe(){return K.Types}get#ce(){return Y.#oe}#he;#le(e){X.assertWithError(this.#he,"must get initial sensorConfiguration");const t=this.#he?.includes(e);return X.assert(t,`unavailable sensor type "${e}"`),t}#ge;get configuration(){return this.#ge}#de(e){this.#ge=e,X.log({updatedConfiguration:this.#ge}),this.#d({type:"getSensorConfiguration",message:{sensorConfiguration:this.configuration}})}async setConfiguration(e){X.log({newSensorConfiguration:e});const t=this.#ue(e);X.log({setSensorConfigurationData:t});const s=this.waitForEvent("getSensorConfiguration");this.sendMessage([{type:"setSensorConfiguration",data:t.buffer}]),await s}#pe(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=K.Types[n];if(!i){X.warn(`unknown sensorType index ${n}`);continue}const a=e.getUint16(s+1,!0);X.log({sensorType:i,sensorRate:a}),t[i]=a}return X.log({parsedSensorConfiguration:t}),this.#he=Object.keys(t),t}static#fe=65535;static get MaxSensorRate(){return this.#fe}get maxSensorRate(){return Y.MaxSensorRate}static#me=5;static get SensorRateStep(){return this.#me}get sensorRateStep(){return Y.SensorRateStep}static#ve(e){X.assertTypeWithError(e,"number"),X.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),X.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),X.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ye(e){Y.#ve(e)}#ue(e){let t=Object.keys(e);t=t.filter((e=>this.#le(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{K.AssertValidSensorType(t);const i=K.Types.indexOf(t);s.setUint8(3*n,i);const a=e[t];this.#ye(a),s.setUint16(3*n+1,e[t],!0)})),X.log({sensorConfigurationData:s}),s}static#be={};static get ZeroSensorConfiguration(){return this.#be}static{this.#oe.forEach((e=>{this.#be[e]=0}))}get zeroSensorConfiguration(){const e={};return this.#ce.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setConfiguration(this.zeroSensorConfiguration)}parseMessage(e,t){switch(X.log({messageType:e}),e){case"getSensorConfiguration":case"setSensorConfiguration":const s=this.#pe(t);this.#de(s);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const ee=u("TfliteManager",{log:!0});let te=class e{static#l=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteSensorTypes","setTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#l}get messageTypes(){return e.MessageTypes}static#Se=["classification","regression"];static get Tasks(){return this.#Se}get tasks(){return e.Tasks}#De(e){ee.assertEnumWithError(e,this.tasks)}#Te(e){ee.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return e.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#we;get name(){return this.#we}#Ee(e){ee.log("parseName",e);const t=k.decode(e);this.#Me(t)}#Me(e){ee.log({name:e}),this.#we=e,this.#d({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e,t){if(ee.assertTypeWithError(e,"string"),this.name==e)return void ee.log(`redundant name assignment ${e}`);const s=this.waitForEvent("getTfliteName"),n=C.encode(e);this.sendMessage([{type:"setTfliteName",data:n.buffer}],t),await s}#Ce;get task(){return this.#Ce}#ke(e){ee.log("parseTask",e);const t=e.getUint8(0);this.#Te(t);const s=this.tasks[t];this.#Le(s)}#Le(e){ee.log({task:e}),this.#Ce=e,this.#d({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e,t){if(this.#De(e),this.task==e)return void ee.log(`redundant task assignment ${e}`);const s=this.waitForEvent("getTfliteTask"),n=this.tasks.indexOf(e);this.sendMessage([{type:"setTfliteTask",data:Uint8Array.from([n]).buffer}],t),await s}#Ie;get sampleRate(){return this.#Ie}#We(e){ee.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#xe(t)}#xe(e){ee.log({sampleRate:e}),this.#Ie=e,this.#d({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e,t){if(ee.assertTypeWithError(e,"number"),e-=e%Y.SensorRateStep,ee.assertWithError(e>=Y.SensorRateStep,`sampleRate must be multiple of ${Y.SensorRateStep} greater than 0 (got ${e})`),this.#Ie==e)return void ee.log(`redundant sampleRate assignment ${e}`);const s=this.waitForEvent("getTfliteSampleRate"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteSampleRate",data:n.buffer}],t),await s}static#oe=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#oe}static AssertValidSensorType(e){K.AssertValidSensorType(e),ee.assertWithError(this.#oe.includes(e),`invalid tflite sensorType "${e}"`)}#ce=[];get sensorTypes(){return this.#ce.slice()}#Ne(e){ee.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=K.Types[n];i?t.push(i):ee.error(`invalid sensorTypeEnum ${n}`)}this.#_e(t)}#_e(e){ee.log({sensorTypes:e}),this.#ce=e,this.#d({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(t,s){t.forEach((t=>{e.AssertValidSensorType(t)}));const n=this.waitForEvent("getTfliteSensorTypes");var i;const a=(t=(i=t).filter(((e,t)=>i.indexOf(e)==t))).map((e=>K.Types.indexOf(e))).sort();ee.log(t,a),this.sendMessage([{type:"setTfliteSensorTypes",data:Uint8Array.from(a).buffer}],s),await n}#Ue;get isReady(){return this.#Ue}#Re(e){ee.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Fe(t)}#Fe(e){ee.log({isReady:e}),this.#Ue=e,this.#d({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#Ae(){ee.assertWithError(this.isReady,"tflite is not ready")}#Oe;get captureDelay(){return this.#Oe}#Pe(e){ee.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#$e(t)}#$e(e){ee.log({captureDelay:e}),this.#Oe=e,this.#d({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e,t){if(ee.assertTypeWithError(e,"number"),this.#Oe==e)return void ee.log(`redundant captureDelay assignment ${e}`);const s=this.waitForEvent("getTfliteCaptureDelay"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteCaptureDelay",data:n.buffer}],t),await s}#Ve;get threshold(){return this.#Ve}#Be(e){ee.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#ze(t)}#ze(e){ee.log({threshold:e}),this.#Ve=e,this.#d({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e,t){if(ee.assertTypeWithError(e,"number"),ee.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#Ve==e)return void ee.log(`redundant threshold assignment ${e}`);const s=this.waitForEvent("getTfliteThreshold"),n=new DataView(new ArrayBuffer(4));n.setFloat32(0,e,!0),this.sendMessage([{type:"setTfliteThreshold",data:n.buffer}],t),await s}#qe;get inferencingEnabled(){return this.#qe}#je(e){ee.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#He(t)}#He(e){ee.log({inferencingEnabled:e}),this.#qe=e,this.#d({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e,t){if(ee.assertTypeWithError(e,"boolean"),!e&&!this.isReady)return;if(this.#Ae(),this.#qe==e)return void ee.log(`redundant inferencingEnabled assignment ${e}`);const s=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage([{type:"setTfliteInferencingEnabled",data:Uint8Array.from([e]).buffer}],t),await s}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#Ge(e){ee.log("parseInference",e);const t=A(e,0);ee.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}ee.log("values",s);const n={timestamp:t,values:s};this.#d({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(ee.log({messageType:e}),e){case"getTfliteName":case"setTfliteName":this.#Ee(t);break;case"getTfliteTask":case"setTfliteTask":this.#ke(t);break;case"getTfliteSampleRate":case"setTfliteSampleRate":this.#We(t);break;case"getTfliteSensorTypes":case"setTfliteSensorTypes":this.#Ne(t);break;case"tfliteModelIsReady":this.#Re(t);break;case"getTfliteCaptureDelay":case"setTfliteCaptureDelay":this.#Pe(t);break;case"getTfliteThreshold":case"setTfliteThreshold":this.#Be(t);break;case"getTfliteInferencingEnabled":case"setTfliteInferencingEnabled":this.#je(t);break;case"tfliteModelInference":this.#Ge(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage};const se=u("DeviceInformationManager",{log:!0});class ne{static#l=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber"];static get MessageTypes(){return this.#l}get messageTypes(){return ne.MessageTypes}static#g=[...this.#l,"deviceInformation"];static get EventTypes(){return this.#g}get eventTypes(){return ne.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}information={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get#Je(){return Object.values(this.information).every((e=>null!=e))}#Qe(e){se.log({partialDeviceInformation:e});for(const t in e)this.#d({type:t,message:{[t]:e[t]}});Object.assign(this.information,e),se.log({deviceInformation:this.information}),this.#Je&&(se.log("completed deviceInformation"),this.#d({type:"deviceInformation",message:{deviceInformation:this.information}}))}parseMessage(e,t){switch(se.log({messageType:e}),e){case"manufacturerName":const s=k.decode(t);se.log({manufacturerName:s}),this.#Qe({manufacturerName:s});break;case"modelNumber":const n=k.decode(t);se.log({modelNumber:n}),this.#Qe({modelNumber:n});break;case"softwareRevision":const i=k.decode(t);se.log({softwareRevision:i}),this.#Qe({softwareRevision:i});break;case"hardwareRevision":const a=k.decode(t);se.log({hardwareRevision:a}),this.#Qe({hardwareRevision:a});break;case"firmwareRevision":const r=k.decode(t);se.log({firmwareRevision:r}),this.#Qe({firmwareRevision:r});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),se.log({pnpId:o}),this.#Qe({pnpId:o});break;case"serialNumber":const c=k.decode(t);se.log({serialNumber:c});break;default:throw Error(`uncaught messageType ${e}`)}}}const ie=u("InformationManager",{log:!0});class ae{static#l=["getMtu","getName","setName","getType","setType","getCurrentTime","setCurrentTime"];static get MessageTypes(){return this.#l}get messageTypes(){return ae.MessageTypes}static#g=[...this.#l];static get EventTypes(){return this.#g}get eventTypes(){return ae.#g}eventDispatcher;#d(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#we;get name(){return this.#we}updateName(e){ie.assertTypeWithError(e,"string"),this.#we=e,ie.log({updatedName:this.#we}),this.#d({type:"getName",message:{name:this.#we}})}static get MinNameLength(){return 2}get minNameLength(){return ae.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return ae.MaxNameLength}async setName(e){ie.assertTypeWithError(e,"string"),ie.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ie.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=C.encode(e);ie.log({setNameData:t});const s=this.waitForEvent("getName");this.sendMessage([{type:"setName",data:t.buffer}]),await s}static#u=["leftInsole","rightInsole"];static get Types(){return this.#u}get#Ze(){return ae.Types}#E;get type(){return this.#E}get typeEnum(){return ae.Types.indexOf(this.type)}#Ke(e){ie.assertEnumWithError(e,this.#Ze)}#Xe(e){ie.assertTypeWithError(e,"number"),ie.assertWithError(this.#Ze[e],`invalid typeEnum ${e}`)}updateType(e){this.#Ke(e),e!=this.type?(this.#E=e,ie.log({updatedType:this.#E}),this.#d({type:"getType",message:{type:this.#E}})):ie.log("redundant type assignment")}async#Ye(e){this.#Xe(e);const t=Uint8Array.from([e]);ie.log({setTypeData:t});const s=this.waitForEvent("getType");this.sendMessage([{type:"setType",data:t.buffer}]),await s}async setType(e){this.#Ke(e);const t=this.#Ze.indexOf(e);this.#Ye(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#et=["left","right"];static get InsoleSides(){return this.#et}get insoleSides(){return ae.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}#tt=0;get mtu(){return this.#tt}#st(e){ie.assertTypeWithError(e,"number"),this.#tt!=e?(this.#tt=e,this.#d({type:"getMtu",message:{mtu:this.#tt}})):ie.log("redundant mtu assignment",e)}#nt=!1;get isCurrentTimeSet(){return this.#nt}#it(e){ie.log({currentTime:e}),this.#nt=0!=e,this.#nt||this.#at()}async#at(){ie.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0);const t=this.waitForEvent("getCurrentTime");this.sendMessage([{type:"setCurrentTime",data:e.buffer}]),await t}parseMessage(e,t){switch(ie.log({messageType:e}),e){case"getName":case"setName":const s=k.decode(t);ie.log({name:s}),this.updateName(s);break;case"getType":case"setType":const n=t.getUint8(0),i=this.#Ze[n];ie.log({typeEnum:n,type:i}),this.updateType(i);break;case"getMtu":const a=t.getUint16(0,!0);ie.log({mtu:a}),this.#st(a);break;case"getCurrentTime":case"setCurrentTime":const r=Number(t.getBigUint64(0,!0));this.#it(r);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage;clear(){this.#nt=!1}}const re=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],oe=u("VibrationManager");class ce{static#l=["triggerVibration"];static get MessageTypes(){return this.#l}get messageTypes(){return TfliteManager.MessageTypes}static#rt=["front","rear"];static get Locations(){return this.#rt}get locations(){return ce.Locations}#ot(e){oe.assertTypeWithError(e,"string"),oe.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ct(e){this.#ht(e),e.forEach((e=>{this.#ot(e)}))}#lt(e){this.#ct(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),oe.log({locationsBitmask:t}),oe.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ht(e){oe.assertWithError(Array.isArray(e),"passed non-array"),oe.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return re}get waveformEffects(){return ce.WaveformEffects}#gt(e){oe.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#dt=1270;static get MaxWaveformEffectSegmentDelay(){return this.#dt}get maxWaveformEffectSegmentDelay(){return ce.MaxWaveformEffectSegmentDelay}#ut(e){if(null!=e.effect){const t=e.effect;this.#gt(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;oe.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),oe.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#pt(t)}}static#ft=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#ft}get maxWaveformEffectSegmentLoopCount(){return ce.MaxWaveformEffectSegmentLoopCount}#pt(e){oe.assertTypeWithError(e,"number"),oe.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),oe.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#mt=8;static get MaxNumberOfWaveformEffectSegments(){return this.#mt}get maxNumberOfWaveformEffectSegments(){return ce.MaxNumberOfWaveformEffectSegments}#vt(e){this.#ht(e),oe.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ut(e)}))}static#yt=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#yt}get maxWaveformEffectSequenceLoopCount(){return ce.MaxWaveformEffectSequenceLoopCount}#bt(e){oe.assertTypeWithError(e,"number"),oe.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),oe.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#St=2550;static get MaxWaveformSegmentDuration(){return this.#St}get maxWaveformSegmentDuration(){return ce.MaxWaveformSegmentDuration}#Dt(e){oe.assertTypeWithError(e.amplitude,"number"),oe.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),oe.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),oe.assertTypeWithError(e.duration,"number"),oe.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),oe.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Tt=20;static get MaxNumberOfWaveformSegments(){return this.#Tt}get maxNumberOfWaveformSegments(){return ce.MaxNumberOfWaveformSegments}#wt(e){this.#ht(e),oe.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Dt(e)}))}#Et(e,t,s=0){this.#vt(t),this.#bt(s);let n=[],i=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const r=0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const a=e%4*2;n[i]|=s<<a,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return oe.log({dataArray:n,dataView:o}),this.#ue(e,"waveformEffect",o)}#Mt(e,t){this.#wt(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),oe.log({dataView:s}),this.#ue(e,"waveform",s)}static#u=["waveformEffect","waveform"];static get Types(){return this.#u}get#Ze(){return ce.Types}#Ct(e){oe.assertTypeWithError(e,"string"),oe.assertWithError(this.#Ze.includes(e),`invalid vibrationType "${e}"`)}#ue(e,t,s){oe.assertWithError(s?.byteLength>0,"no data received");const n=this.#lt(e);this.#Ct(t);const i=this.#Ze.indexOf(t);oe.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const a=I(n,i,s.byteLength,s);return oe.log({data:a}),a}async triggerVibration(e,t){let s;e.forEach((e=>{const{type:t}=e;let n,{locations:i}=e;switch(i=i||this.locations.slice(),t){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:a}=t;n=this.#Et(i,s,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Mt(i,s)}break;default:throw Error(`invalid vibration type "${t}"`)}oe.log({type:t,dataView:n}),s=I(s,n)})),await this.sendMessage([{type:"triggerVibration",data:s}],t)}sendMessage}const he=u("BaseConnectionManager",{log:!0});class le{static#kt=[...ae.MessageTypes,...Y.MessageTypes,...K.MessageTypes,...ce.MessageTypes,...te.MessageTypes,...R.MessageTypes];static get TxRxMessageTypes(){return this.#kt}static#l=[...ne.MessageTypes,"batteryLevel","smp","rx","tx",...this.TxRxMessageTypes];static get MessageTypes(){return this.#l}static#Lt(e){he.assertEnumWithError(e,this.#kt)}get id(){this.#It("id")}onStatusUpdated;onMessageReceived;static#Wt(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#It(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#Wt("type")}get type(){return this.constructor.type}#xt(){he.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Nt(){he.assertWithError(this.constructor!=le,`${this.constructor.name} must be subclassed`)}constructor(){this.#Nt(),this.#xt()}static get#m(){return["not connected","connecting","connected","disconnecting"]}static get Statuses(){return this.#m}get#_t(){return le.#m}#A="not connected";get status(){return this.#A}set status(e){he.assertEnumWithError(e,this.#_t),this.#A!=e?(he.log(`new connection status "${e}"`),this.#A=e,this.onStatusUpdated?.(this.status),this.isConnected?this.#Ut.start():this.#Ut.stop(),"not connected"==this.#A&&(this.#tt=null)):he.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#Rt(){he.assertWithError(!this.isConnected,"device is already connected")}#Ft(){he.assertWithError("connecting"!=this.status,"device is already connecting")}#At(){he.assertWithError(this.isConnected,"device is not connected")}#Ot(){he.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Pt(){this.#At(),this.#Ot()}async connect(){this.#Rt(),this.#Ft(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#Rt(),this.#Ft(),he.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#At(),this.#Ot(),this.status="disconnecting",he.log("disconnecting from device...")}async sendSmpMessage(e){this.#Pt(),he.log("sending smp message",e)}#$t=[];async sendTxMessages(e,t=!0){if(this.#Pt(),e&&this.#$t.push(...e),!t)return;he.log("sendTxMessages",this.#$t.slice());const s=this.#$t.map((e=>{le.#Lt(e.type);const t=le.TxRxMessageTypes.indexOf(e.type),s=new DataView(new ArrayBuffer(2));return s.setUint16(0,e.data?.byteLength||0,!0),I(t,s,e.data)}));if(this.#tt)for(;s.length>0;){let e=0,t=0;s.some((s=>{if(e+s.byteLength>this.#tt-3)return!0;t++,e+=s.byteLength}));const n=s.splice(0,t);he.log({arrayBufferCount:t,arrayBuffersToSend:n});const i=I(...n);he.log("sending arrayBuffer",i),await this.sendTxData(i)}else{const e=I(...s);he.log("sending arrayBuffer",e),await this.sendTxData(e)}this.#$t.length=0}#tt;get mtu(){return this.#tt}set mtu(e){this.#tt=e}async sendTxData(e){he.log("sendTxData",e)}parseRxMessage(e){Q(e,le.#kt,this.#Vt.bind(this),null,!0)}#Vt(e,t){he.log({messageType:e,dataView:t}),this.onMessageReceived?.(e,t)}#Ut=new S(this.#Bt.bind(this),5e3);#Bt(){this.isConnected||(he.log("timer detected disconnection"),this.status="not connected")}}const ge=u("bluetoothUUIDs",{log:!1});if(s){var de=require("webbluetooth").BluetoothUUID}if(t)de=window.BluetoothUUID;function ue(e){return ge.assertTypeWithError(e,"string"),ge.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function pe(e){return de?.getCharacteristic?.(e)}function fe(e){return de?.getService?.(e)}const me=Object.freeze({services:{deviceInformation:{uuid:fe("device_information"),characteristics:{manufacturerName:{uuid:pe("manufacturer_name_string")},modelNumber:{uuid:pe("model_number_string")},hardwareRevision:{uuid:pe("hardware_revision_string")},firmwareRevision:{uuid:pe("firmware_revision_string")},softwareRevision:{uuid:pe("software_revision_string")},pnpId:{uuid:pe("pnp_id")},serialNumber:{uuid:pe("serial_number_string")}}},battery:{uuid:fe("battery_service"),characteristics:{batteryLevel:{uuid:pe("battery_level")}}},main:{uuid:ue("0000"),characteristics:{rx:{uuid:ue("1000")},tx:{uuid:ue("1001")}}},smp:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{smp:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.smp.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),ve=me.serviceUUIDs,ye=me.optionalServiceUUIDs,be=[...ve,...ye];function Se(e){return me.getServiceNameFromUUID(e)}const De=[],Te=[],we=[];function Ee(e){return me.getCharacteristicNameFromUUID(e)}function Me(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"rx":case"tx":case"smp":t.read=!1}switch(e){case"batteryLevel":case"rx":case"smp":t.notify=!0}switch(e){case"tx":case"smp":t.writeWithoutResponse=!0}return t}Object.entries(me.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{ve.includes(t.uuid)&&De.push(s.uuid),Te.push(s.uuid),we.push(e)}))}),[]);const Ce=u("BluetoothConnectionManager",{log:!0});class ke extends le{onCharacteristicValueChanged(e,t){"rx"==e?this.parseRxMessage(t):this.onMessageReceived?.(e,t)}async writeCharacteristic(e,t){Ce.log("writeCharacteristic",...arguments)}async sendSmpMessage(e){super.sendSmpMessage(...arguments),await this.writeCharacteristic("smp",e)}async sendTxData(e){super.sendTxData(...arguments),await this.writeCharacteristic("tx",e)}}const Le=u("WebBluetoothConnectionManager",{log:!0});if(s){const e=require("webbluetooth"),{bluetooth:t}=e;var Ie={bluetooth:t}}if(t)Ie=window.navigator;class We extends ke{get id(){return this.device?.id}#zt={characteristicvaluechanged:this.#qt.bind(this)};#jt={gattserverdisconnected:this.#Ht.bind(this)};static get isSupported(){return"bluetooth"in Ie}static get type(){return"webBluetooth"}#Gt;get device(){return this.#Gt}set device(e){this.#Gt!=e?(this.#Gt&&y(this.#Gt,this.#jt),e&&v(e,this.#jt),this.#Gt=e):Le.log("tried to assign the same BluetoothDevice")}get server(){return this.#Gt?.gatt}get isConnected(){return this.server?.connected}#Jt=new Map;#Qt=new Map;async connect(){await super.connect();try{const e=await Ie.bluetooth.requestDevice({filters:[{services:ve}],optionalServices:t?ye:[]});Le.log("got BluetoothDevice"),this.device=e,Le.log("connecting to device...");const s=await this.device.gatt.connect();Le.log(`connected to device? ${s.connected}`),await this.#Zt(),Le.log("fully connected"),this.status="connected"}catch(e){Le.error(e),this.status="not connected",this.server?.disconnect(),this.#Kt()}}async#Zt(){this.#Kt(),Le.log("getting services...");const e=await this.server.getPrimaryServices();Le.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),Le.log("getting characteristics...");for(const t in e){const s=e[t];Le.log({service:s});const a=Se(s.uuid);Le.assertWithError(a,`no name found for service uuid "${s.uuid}"`),Le.log(`got "${a}" service`),s._name=a,this.#Jt.set(a,s),Le.log(`getting characteristics for "${a}" service`);const r=await s.getCharacteristics();Le.log(`got characteristics for "${a}" service`);for(const e in r){const t=r[e];Le.log({characteristic:t});const s=Ee(t.uuid);Le.assertWithError(s,`no name found for characteristic uuid "${t.uuid}" in "${a}" service`),Le.log(`got "${s}" characteristic in "${a}" service`),t._name=s,this.#Qt.set(s,t),v(t,this.#zt);const o=t.properties||Me(s);o.notify&&(Le.log(`starting notifications for "${s}" characteristic`),await t.startNotifications()),o.read&&(Le.log(`reading "${s}" characteristic...`),await t.readValue(),(n||i)&&this.#Xt(t))}}}#Kt(){this.device&&y(this.device,this.#jt),this.#Qt.forEach((e=>{y(e,this.#zt)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#Kt(),this.status="not connected"}#qt(e){Le.log("oncharacteristicvaluechanged");const t=e.target;this.#Xt(t)}#Xt(e){Le.log("onCharacteristicValue");const t=e._name;Le.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),Le.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;Le.assertWithError(s,`no data found for "${t}" characteristic`),Le.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}async writeCharacteristic(e,t){super.writeCharacteristic(...arguments);const s=this.#Qt.get(e);Le.assertWithError(s,`${e} characteristic not found`),Le.log("writing characteristic",s,t);const a=s.properties||Me(e);a.writeWithoutResponse?(Le.log("writing without response"),await s.writeValueWithoutResponse(t)):(Le.log("writing with response"),await s.writeValueWithResponse(t)),Le.log("wrote characteristic"),a.read&&!a.notify&&(Le.log("reading value after write..."),await s.readValue(),(n||i)&&this.#Xt(s))}#Ht(e){Le.log("gattserverdisconnected"),this.status="not connected"}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),Le.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(Le.log("successfully reconnected!"),await this.#Zt(),this.status="connected"):(Le.log("unable to reconnect"),this.status="not connected")}}const xe=4294967296,Ne=9007199254740992;const _e={encode:function(e){let t,s=new ArrayBuffer(256),n=new DataView(s),i=0;function a(e){let a=s.byteLength;const r=i+e;for(;a<r;)a<<=1;if(a!==s.byteLength){const e=n;s=new ArrayBuffer(a),n=new DataView(s);const t=i+3>>2;for(let s=0;s<t;++s)n.setUint32(s<<2,e.getUint32(s<<2))}return t=e,n}function r(){i+=t}function o(e){r(a(1).setUint8(i,e))}function c(e){const t=a(e.length);for(let s=0;s<e.length;++s)t.setUint8(i+s,e[s]);r()}function h(e,t){t<24?o(e<<5|t):t<256?(o(e<<5|24),o(t)):t<65536?(o(e<<5|25),function(e){r(a(2).setUint16(i,e))}(t)):t<4294967296?(o(e<<5|26),function(e){r(a(4).setUint32(i,e))}(t)):(o(e<<5|27),function(e){const t=e%xe,s=(e-t)/xe,n=a(8);n.setUint32(i,s),n.setUint32(i+4,t),r()}(t))}if(function e(t){let s;const n=[];let l;if(!1===t)return o(244);if(!0===t)return o(245);if(null===t)return o(246);if(void 0===t)return o(247);switch(typeof t){case"number":if(Math.floor(t)===t){if(t>=0&&t<=Ne)return h(0,t);if(-Ne<=t&&t<0)return h(1,-(t+1))}return o(251),function(e){r(a(8).setFloat64(i,e))}(t);case"string":for(s=0;s<t.length;++s){let e=t.charCodeAt(s);e<128?n.push(e):e<2048?(n.push(192|e>>6),n.push(128|63&e)):e<55296?(n.push(224|e>>12),n.push(128|e>>6&63),n.push(128|63&e)):(e=(1023&e)<<10,e|=1023&t.charCodeAt(++s),e+=65536,n.push(240|e>>18),n.push(128|e>>12&63),n.push(128|e>>6&63),n.push(128|63&e))}return h(3,n.length),c(n);default:if(Array.isArray(t))for(l=t.length,h(4,l),s=0;s<l;++s)e(t[s]);else if(t instanceof Uint8Array)h(2,t.length),c(t);else{const n=Object.keys(t);for(l=n.length,h(5,l),s=0;s<l;++s){const i=n[s];e(i),e(t[i])}}}}(e),"slice"in s)return s.slice(0,i);const l=new ArrayBuffer(i),g=new DataView(l);for(let e=0;e<i;++e)g.setUint8(e,n.getUint8(e));return l},decode:function(e,t,s){const n=new DataView(e);let i=0;function a(e,t){return i+=e,t}function r(t){return a(t,new Uint8Array(e,i,t))}function o(){return a(1,n.getUint8(i))}function c(){return a(2,n.getUint16(i))}function h(){return a(4,n.getUint32(i))}function l(){return 255===n.getUint8(i)&&(i+=1,!0)}function g(e){if(e<24)return e;if(24===e)return o();if(25===e)return c();if(26===e)return h();if(27===e)return h()*xe+h();if(31===e)return-1;throw new Error("Invalid length encoding")}function d(e){const t=o();if(255===t)return-1;const s=g(31&t);if(s<0||t>>5!==e)throw new Error("Invalid indefinite length element");return s}function u(e,t){for(let s=0;s<t;++s){let s=o();128&s&&(s<224?(s=(31&s)<<6|63&o(),t-=1):s<240?(s=(15&s)<<12|(63&o())<<6|63&o(),t-=2):(s=(15&s)<<18|(63&o())<<12|(63&o())<<6|63&o(),t-=3)),s<65536?e.push(s):(s-=65536,e.push(55296|s>>10),e.push(56320|1023&s))}}"function"!=typeof t&&(t=function(e){return e}),"function"!=typeof s&&(s=function(){});const p=function e(){const h=o(),p=h>>5,f=31&h;let m,v;if(7===p)switch(f){case 25:return function(){const e=new ArrayBuffer(4),t=new DataView(e),s=c(),n=32768&s;let i=31744&s;const a=1023&s;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==a)return(n?-1:1)*a*5.960464477539063e-8;return t.setUint32(0,n<<16|i<<13|a<<13),t.getFloat32(0)}();case 26:return a(4,n.getFloat32(i));case 27:return a(8,n.getFloat64(i))}if(v=g(f),v<0&&(p<2||p>6))throw new Error("Invalid length");const y=[];let b;const S={};switch(p){case 0:return v;case 1:return-1-v;case 2:if(v<0){const e=[];let t=0;for(;(v=d(p))>=0;)t+=v,e.push(r(v));const s=new Uint8Array(t);let n=0;for(m=0;m<e.length;++m)s.set(e[m],n),n+=e[m].length;return s}return r(v);case 3:if(v<0)for(;(v=d(p))>=0;)u(y,v);else u(y,v);return String.fromCharCode.apply(null,y);case 4:if(v<0)for(b=[];!l();)b.push(e());else for(b=new Array(v),m=0;m<v;++m)b[m]=e();return b;case 5:for(m=0;m<v||v<0&&!l();++m){S[e()]=e()}return S;case 6:return t(e(),v);case 7:switch(v){case 20:return!1;case 21:return!0;case 22:return null;case 23:return;default:return s(v)}}}();if(i!==e.byteLength)throw new Error("Remaining bytes");return p}},Ue=u("mcumgr",{log:!0}),Re=0,Fe=1,Ae=2,Oe=3,Pe=0,$e=1,Ve=8,Be=0,ze=2,qe=3,je=5,He=0,Ge=1,Je=5,Qe=0;class Ze{constructor(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}onMessage(e){return this._messageCallback=e,this}onImageUploadNext(e){return this._imageUploadNextCallback=e,this}onImageUploadProgress(e){return this._imageUploadProgressCallback=e,this}onImageUploadFinished(e){return this._imageUploadFinishedCallback=e,this}onFileUploadNext(e){return this._fileUploadNextCallback=e,this}onFileUploadProgress(e){return this._fileUploadProgressCallback=e,this}onFileUploadFinished(e){return this._fileUploadFinishedCallback=e,this}onFileDownloadNext(e){return this._fileDownloadNextCallback=e,this}onFileDownloadProgress(e){return this._fileDownloadProgressCallback=e,this}onFileDownloadFinished(e){return this._fileDownloadFinishedCallback=e,this}_getMessage(e,t,s,n){let i=[];void 0!==n&&(i=[...new Uint8Array(_e.encode(n))]);const a=255&i.length,r=[e,0,i.length>>8,a,t>>8,255&t,this._seq,s,...i];return this._seq=(this._seq+1)%256,r}_notification(e){Ue.log("mcumgr - message received");const t=new Uint8Array(e);this._buffer=new Uint8Array([...this._buffer,...t]);const s=256*this._buffer[2]+this._buffer[3];this._buffer.length<s+8||(this._processMessage(this._buffer.slice(0,s+8)),this._buffer=this._buffer.slice(s+8))}_processMessage(e){const[t,,s,n,i,a,,r]=e,o=_e.decode(e.slice(8).buffer),c=256*s+n,h=256*i+a;return Ue.log("mcumgr - Process Message - Group: "+h+", Id: "+r+", Off: "+o.off),h===$e&&r===Ge&&o.off?(this._uploadOffset=o.off,void this._uploadNext()):t===Oe&&h===Ve&&r===Qe&&o.off?(this._uploadFileOffset=o.off,void this._uploadFileNext()):t===Fe&&h===Ve&&r===Qe?(this._downloadFileOffset+=o.data.length,null!=o.len&&(this._downloadFileLength=o.len),Ue.log("downloaded "+this._downloadFileOffset+" bytes of "+this._downloadFileLength),this._downloadFileLength>0&&this._fileDownloadProgressCallback({percentage:Math.floor(this._downloadFileOffset/this._downloadFileLength*100)}),this._messageCallback&&this._messageCallback({op:t,group:h,id:r,data:o,length:c}),void this._downloadFileNext()):void(this._messageCallback&&this._messageCallback({op:t,group:h,id:r,data:o,length:c}))}cmdReset(){return this._getMessage(Ae,Pe,je)}smpEcho(e){return this._getMessage(Ae,Pe,Be,{d:e})}cmdImageState(){return this._getMessage(Re,$e,He)}cmdImageErase(){return this._getMessage(Ae,$e,Je,{})}cmdImageTest(e){return this._getMessage(Ae,$e,He,{hash:e,confirm:!1})}cmdImageConfirm(e){return this._getMessage(Ae,$e,He,{hash:e,confirm:!0})}_hash(e){return crypto.subtle.digest("SHA-256",e)}async _uploadNext(){if(!this._uploadImage)return;if(this._uploadOffset>=this._uploadImage.byteLength)return this._uploadIsInProgress=!1,void this._imageUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadOffset};0===this._uploadOffset&&(e.len=this._uploadImage.byteLength,e.sha=new Uint8Array(await this._hash(this._uploadImage))),this._imageUploadProgressCallback({percentage:Math.floor(this._uploadOffset/this._uploadImage.byteLength*100)});const t=this._mtu-_e.encode(e).byteLength-8-3-5;e.data=new Uint8Array(this._uploadImage.slice(this._uploadOffset,this._uploadOffset+t)),this._uploadOffset+=t;const s=this._getMessage(Ae,$e,Ge,e);Ue.log("mcumgr - _uploadNext: Message Length: "+s.length),this._imageUploadNextCallback({packet:s})}async reset(){this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}async cmdUpload(e,t=0){this._uploadIsInProgress?Ue.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadOffset=0,this._uploadImage=e,this._uploadSlot=t,this._uploadNext())}async cmdUploadFile(e,t){this._uploadIsInProgress?Ue.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadFileOffset=0,this._uploadFile=e,this._uploadFilename=t,this._uploadFileNext())}async _uploadFileNext(){if(Ue.log("uploadFileNext - offset: "+this._uploadFileOffset+", length: "+this._uploadFile.byteLength),this._uploadFileOffset>=this._uploadFile.byteLength)return this._uploadIsInProgress=!1,void this._fileUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadFileOffset};0===this._uploadFileOffset&&(e.len=this._uploadFile.byteLength),e.name=this._uploadFilename,this._fileUploadProgressCallback({percentage:Math.floor(this._uploadFileOffset/this._uploadFile.byteLength*100)});const t=this._mtu-_e.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadFile.slice(this._uploadFileOffset,this._uploadFileOffset+t)),this._uploadFileOffset+=t;const s=this._getMessage(Ae,Ve,Qe,e);Ue.log("mcumgr - _uploadNext: Message Length: "+s.length),this._fileUploadNextCallback({packet:s})}async cmdDownloadFile(e,t){this._downloadIsInProgress?Ue.error("Download is already in progress."):(this._downloadIsInProgress=!0,this._downloadFileOffset=0,this._downloadFileLength=0,this._downloadRemoteFilename=e,this._downloadLocalFilename=t,this._downloadFileNext())}async _downloadFileNext(){if(this._downloadFileLength>0&&this._downloadFileOffset>=this._downloadFileLength)return this._downloadIsInProgress=!1,void this._fileDownloadFinishedCallback();const e={off:this._downloadFileOffset};0===this._downloadFileOffset&&(e.name=this._downloadRemoteFilename);const t=this._getMessage(Re,Ve,Qe,e);Ue.log("mcumgr - _downloadNext: Message Length: "+t.length),this._fileDownloadNextCallback({packet:t})}async imageInfo(e){const t={},s=new Uint8Array(e);if(s.length<32)throw new Error("Invalid image (too short file)");if(61!==s[0]||184!==s[1]||243!==s[2]||150!==s[3])throw new Error("Invalid image (wrong magic bytes)");if(0!==s[4]||0!==s[5]||0!==s[6]||0!==s[7])throw new Error("Invalid image (wrong load address)");const n=s[8]+256*s[9];if(0!==s[10]||0!==s[11])throw new Error("Invalid image (wrong protected TLV area size)");const i=s[12]+256*s[13]+65536*s[14]+s[15]*2**24;if(t.imageSize=i,s.length<i+n)throw new Error("Invalid image (wrong image size)");if(0!==s[16]||0!==s[17]||0!==s[18]||0!==s[19])throw new Error("Invalid image (wrong flags)");const a=`${s[20]}.${s[21]}.${s[22]+256*s[23]}`;return t.version=a,t.hash=[...new Uint8Array(await this._hash(e.slice(0,i+32)))].map((e=>e.toString(16).padStart(2,"0"))).join(""),t}}const Ke=u("FirmwareManager",{log:!0});class Xe{sendMessage;constructor(){this.#Yt()}static#l=["smp"];static get MessageTypes(){return this.#l}get messageTypes(){return Xe.MessageTypes}static#g=[...this.#l,"firmwareImages","firmwareUploadProgress","firmwareUploadComplete","firmwareStatus"];static get EventTypes(){return this.#g}get eventTypes(){return Xe.#g}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#d(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}parseMessage(e,t){if(Ke.log({messageType:e}),"smp"!==e)throw Error(`uncaught messageType ${e}`);this.#es._notification(Array.from(new Uint8Array(t.buffer))),this.#d({type:"smp"})}async uploadFirmware(e){Ke.log("uploadFirmware",e);const t=this.waitForEvent("firmwareUploadComplete");await this.getImages();const s=await _(e),n=await this.#es.imageInfo(s);Ke.log({imageInfo:n}),this.#es.cmdUpload(s,1),this.#P("uploading"),await t}static#m=["idle","uploading","uploaded","pending","testing","erasing"];static get Statuses(){return this.#m}#A="idle";get status(){return this.#A}#P(e){Ke.assertEnumWithError(e,Xe.Statuses),this.#A!=e?(this.#A=e,Ke.log({firmwareStatus:this.#A}),this.#d({type:"firmwareStatus",message:{firmwareStatus:this.#A}})):Ke.log(`redundant firmwareStatus assignment "${e}"`)}#ts;get images(){return this.#ts}#ss(){Ke.assertWithError(this.#ts,"didn't get imageState")}#ns(e){Ke.assertTypeWithError(e,"number"),Ke.assertWithError(0==e||1==e,"imageIndex must be 0 or 1")}async getImages(){const e=this.waitForEvent("firmwareImages");Ke.log("getting firmware image state..."),this.sendMessage(Uint8Array.from(this.#es.cmdImageState()).buffer),await e}async testImage(e=1){if(this.#ns(e),this.#ss(),!this.#ts[e])return void Ke.log(`image ${e} not found`);if(1==this.#ts[e].pending)return void Ke.log(`image ${e} is already pending`);if(this.#ts[e].empty)return void Ke.log(`image ${e} is empty`);const t=this.waitForEvent("smp");Ke.log("testing firmware image..."),this.sendMessage(Uint8Array.from(this.#es.cmdImageTest(this.#ts[e].hash)).buffer),await t}async eraseImage(){this.#ss();const e=this.waitForEvent("smp");Ke.log("erasing image..."),this.sendMessage(Uint8Array.from(this.#es.cmdImageErase()).buffer),this.#P("erasing"),await e,await this.getImages()}async confirmImage(e=0){if(this.#ns(e),this.#ss(),!0===this.#ts[e].confirmed)return void Ke.log(`image ${e} is already confirmed`);const t=this.waitForEvent("smp");Ke.log("confirming image..."),this.sendMessage(Uint8Array.from(this.#es.cmdImageConfirm(this.#ts[e].hash)).buffer),await t}async echo(e){Ke.assertTypeWithError(e,"string");const t=this.waitForEvent("smp");Ke.log("sending echo..."),this.sendMessage(Uint8Array.from(this.#es.smpEcho(e)).buffer),await t}async reset(){const e=this.waitForEvent("smp");Ke.log("resetting..."),this.sendMessage(Uint8Array.from(this.#es.cmdReset()).buffer),await e}#tt;get mtu(){return this.#tt}set mtu(e){this.#tt=e,this.#es._mtu=this.#tt}#es=new Ze;#Yt(){this.#es.onMessage(this.#is.bind(this)),this.#es.onFileDownloadNext(this.#as),this.#es.onFileDownloadProgress(this.#rs.bind(this)),this.#es.onFileDownloadFinished(this.#os.bind(this)),this.#es.onFileUploadNext(this.#cs.bind(this)),this.#es.onFileUploadProgress(this.#hs.bind(this)),this.#es.onFileUploadFinished(this.#ls.bind(this)),this.#es.onImageUploadNext(this.#gs.bind(this)),this.#es.onImageUploadProgress(this.#ds.bind(this)),this.#es.onImageUploadFinished(this.#us.bind(this))}#is({op:e,group:t,id:s,data:n,length:i}){switch(Ke.log("onMcuMessage",...arguments),t){case Pe:switch(s){case Be:Ke.log(`echo "${n.r}"`);break;case ze:Ke.table(n.tasks);break;case qe:Ke.log(n)}break;case $e:if(s===He)this.#ps(n);break;default:throw Error(`uncaught mcuMessage group ${t}`)}}#as(){Ke.log("onMcuFileDownloadNext",...arguments)}#rs(){Ke.log("onMcuFileDownloadProgress",...arguments)}#os(){Ke.log("onMcuFileDownloadFinished",...arguments)}#cs(){Ke.log("onMcuFileUploadNext",...arguments)}#hs(){Ke.log("onMcuFileUploadProgress",...arguments)}#ls(){Ke.log("onMcuFileUploadFinished",...arguments)}#gs({packet:e}){Ke.log("onMcuImageUploadNext",...arguments),this.sendMessage(Uint8Array.from(e).buffer)}#ds({percentage:e}){const t=e/100;Ke.log("onMcuImageUploadProgress",...arguments),this.#d({type:"firmwareUploadProgress",message:{firmwareUploadProgress:t}})}async#us(){Ke.log("onMcuImageUploadFinished",...arguments),await this.getImages(),this.#d({type:"firmwareUploadProgress",message:{firmwareUploadProgress:100}}),this.#d({type:"firmwareUploadComplete"})}#ps(e){if(!e.images)return void Ke.log("no images found");this.#ts=e.images,Ke.log("images",this.#ts);let t="idle";2==this.#ts.length&&(this.#ts[1].bootable?this.#ts[0].confirmed?this.#ts[1].pending?(Ke.log("reset to upload to the new firmware image"),t="pending"):(Ke.log("Slot 1 has a valid image. run testImage() to test it or upload a different image."),t="uploaded"):(Ke.log('Slot 0 has a valid image. Click "Confirm Image" to confirm it or wait and the device will swap images back.'),t="testing"):Ke.warn('Slot 1 has a invalid image. Click "Erase Image" to erase it or upload a different image')),1==this.#ts.length&&(this.#ts.push({slot:1,empty:!0,version:"Empty",pending:!1,confirmed:!1,bootable:!1}),Ke.log("Select a firmware upload image to upload to slot 1.")),this.#P(t),this.#d({type:"firmwareImages",message:{firmwareImages:this.#ts}})}}const Ye=u("Device",{log:!0});class et{get id(){return this.#fs?.id}constructor(){this.#ms.eventDispatcher=this.#vs,this.#ys.sendMessage=this.#bs.bind(this),this.#ys.eventDispatcher=this.#vs,this.#Ss.sendMessage=this.#bs.bind(this),this.#Ss.eventDispatcher=this.#vs,this.#Ds.sendMessage=this.#bs.bind(this),this.#Ds.eventDispatcher=this.#vs,this.#Ts.sendMessage=this.#bs.bind(this),this.#ws.sendMessage=this.#bs.bind(this),this.#ws.eventDispatcher=this.#vs,this.#Es.sendMessage=this.#bs.bind(this),this.#Es.eventDispatcher=this.#vs,this.#Ms.sendMessage=this.#Cs.bind(this),this.#Ms.eventDispatcher=this.#vs,this.addEventListener("getMtu",(()=>{this.#Ms.mtu=this.mtu,this.#Es.mtu=this.mtu,this.connectionManager.mtu=this.mtu})),this.addEventListener("getType",(()=>{et.#ks&&et.#Ls(this)})),t&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),s&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{et.#Is(this)}))}static get#Ws(){return We}static#g=["batteryLevel","connectionStatus",...le.Statuses,"isConnected","connectionMessage",...ne.EventTypes,...ae.EventTypes,...Y.EventTypes,...K.EventTypes,...R.EventTypes,...te.EventTypes,...Xe.EventTypes];static get EventTypes(){return this.#g}get eventTypes(){return et.#g}#vs=new m(this,this.eventTypes);addEventListener(e,t,s){this.#vs.addEventListener(e,t,s)}#d(e){this.#vs.dispatchEvent(e)}removeEventListener(e,t){return this.#vs.removeEventListener(e,t)}waitForEvent(e){return this.#vs.waitForEvent(e)}#fs;get connectionManager(){return this.#fs}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#xs.bind(this),e.onMessageReceived=this.#Ns.bind(this)),this.#fs=e,Ye.log("assigned new connectionManager",this.#fs)):Ye.log("same connectionManager is already assigned")}async#bs(e,t){await(this.#fs?.sendTxMessages(...arguments))}async connect(){return this.connectionManager||(this.connectionManager=new et.#Ws),this.#_s(),this.connectionManager.connect()}#Us=!1;get isConnected(){return this.#Us}#At(){Ye.assertWithError(this.isConnected,"not connected")}static#Rs=["getMtu","getName","getType","getCurrentTime","getSensorConfiguration","getSensorScalars","getPressurePositions","maxFileLength","getFileLength","getFileChecksum","getFileTransferType","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];get#Fs(){return et.#Rs}get#As(){return this.#Fs.every((e=>this.latestConnectionMessage.has(e)))}#Os(){const e=this.#Fs.map((e=>({type:e})));this.#bs(e)}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#_s(),this.connectionManager?.reconnect()}static#Ps=!1;static get ReconnectOnDisconnection(){return this.#Ps}static set ReconnectOnDisconnection(e){Ye.assertTypeWithError(e,"boolean"),this.#Ps=e}#$s=et.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#$s}set reconnectOnDisconnection(e){Ye.assertTypeWithError(e,"boolean"),this.#$s=e}#Vs;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#At(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#fs?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#fs.status;default:return"not connected"}}#xs(e){Ye.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(Ye.log("starting reconnect interval..."),this.#Vs=setInterval((()=>{Ye.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Vs&&(Ye.log("clearing reconnect interval"),clearInterval(this.#Vs),this.#Vs=void 0),this.#Bt(),"connected"!=e||this.#Us||this.#Os()}#Bs(e=!1){this.#d({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#d({type:this.connectionStatus}),e&&this.#d({type:"isConnected",message:{isConnected:this.isConnected}})}#Bt(){switch(this.#Us=this.connectionManager?.isConnected&&this.#As&&this.#ys.isCurrentTimeSet,this.connectionStatus){case"connected":this.#Us&&this.#Bs(!0);break;case"not connected":this.#Bs(!0);break;default:this.#Bs(!1)}}#_s(){this.latestConnectionMessage.clear(),this.#ys.clear()}#Ns(e,t){if(Ye.log({messageType:e,dataView:t}),"batteryLevel"===e){const e=t.getUint8(0);Ye.log("received battery level",{batteryLevel:e}),this.#zs(e)}else if(this.#Es.messageTypes.includes(e))this.#Es.parseMessage(e,t);else if(this.#ws.messageTypes.includes(e))this.#ws.parseMessage(e,t);else if(this.#Ds.messageTypes.includes(e))this.#Ds.parseMessage(e,t);else if(this.#Ms.messageTypes.includes(e))this.#Ms.parseMessage(e,t);else if(this.#ms.messageTypes.includes(e))this.#ms.parseMessage(e,t);else if(this.#ys.messageTypes.includes(e))this.#ys.parseMessage(e,t);else{if(!this.#Ss.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Ss.parseMessage(e,t)}this.latestConnectionMessage.set(e,t),this.#d({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#As&&this.#Bt()}latestConnectionMessage=new Map;#ms=new ne;get deviceInformation(){return this.#ms.information}#qs=null;get batteryLevel(){return this.#qs}#zs(e){Ye.assertTypeWithError(e,"number"),this.#qs!=e?(this.#qs=e,Ye.log({updatedBatteryLevel:this.#qs}),this.#d({type:"batteryLevel",message:{batteryLevel:this.#qs}})):Ye.log(`duplicate batteryLevel assignment ${e}`)}#ys=new ae;static get MinNameLength(){return ae.MinNameLength}static get MaxNameLength(){return ae.MaxNameLength}get name(){return this.#ys.name}async setName(e){await this.#ys.setName(e)}static get Types(){return ae.Types}get type(){return this.#ys.type}async setType(e){await this.#ys.setType(e)}static get InsoleSides(){return ae.InsoleSides}get isInsole(){return this.#ys.isInsole}get insoleSide(){return this.#ys.insoleSide}get mtu(){return this.#ys.mtu}static get SensorTypes(){return K.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#Ss=new Y;get sensorConfiguration(){return this.#Ss.configuration}static get MaxSensorRate(){return Y.MaxSensorRate}static get SensorRateStep(){return Y.SensorRateStep}async setSensorConfiguration(e){await this.#Ss.setConfiguration(e)}async clearSensorConfiguration(){return this.#Ss.clearSensorConfiguration()}static#js=!0;static get ClearSensorConfigurationOnLeave(){return this.#js}static set ClearSensorConfigurationOnLeave(e){Ye.assertTypeWithError(e,"boolean"),this.#js=e}#Hs=et.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Hs}set clearSensorConfigurationOnLeave(e){Ye.assertTypeWithError(e,"boolean"),this.#Hs=e}static#Gs=8;static get DefaultNumberOfPressureSensors(){return this.#Gs}get numberOfPressureSensors(){return this.#Ds.pressureSensorDataManager.numberOfSensors}#Ds=new K;resetPressureRange(){this.#Ds.pressureSensorDataManager.resetRange()}#Ts=new ce;static get VibrationLocations(){return ce.Locations}static get VibrationTypes(){return ce.Types}static get VibrationWaveformEffects(){return ce.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return ce.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return ce.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return ce.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return ce.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return ce.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return ce.MaxNumberOfWaveformSegments}async triggerVibration(e,t){this.#Ts.triggerVibration(e,t)}#Es=new R;static get FileTypes(){return R.Types}get maxFileLength(){return this.#Es.maxLength}async sendFile(e,t){const s=this.waitForEvent("fileTransferComplete");this.#Es.send(e,t),await s}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#Es.receive(e),await t}get fileTransferStatus(){return this.#Es.status}cancelFileTransfer(){this.#Es.cancel()}static get TfliteSensorTypes(){return te.SensorTypes}#ws=new te;get tfliteName(){return this.#ws.name}setTfliteName(e){return this.#ws.setName(e)}static get TfliteTasks(){return te.Tasks}get tfliteTask(){return this.#ws.task}setTfliteTask(e){return this.#ws.setTask(e)}get tfliteSampleRate(){return this.#ws.sampleRate}setTfliteSampleRate(e){return this.#ws.setSampleRate(e)}get tfliteSensorTypes(){return this.#ws.sensorTypes}get allowedTfliteSensorTypes(){return this.sensorTypes.filter((e=>te.SensorTypes.includes(e)))}setTfliteSensorTypes(e){return this.#ws.setSensorTypes(e)}get tfliteIsReady(){return this.#ws.isReady}get tfliteInferencingEnabled(){return this.#ws.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#ws.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#ws.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#ws.captureDelay}async setTfliteCaptureDelay(e){return this.#ws.setCaptureDelay(e)}get tfliteThreshold(){return this.#ws.threshold}async setTfliteThreshold(e){return this.#ws.setThreshold(e)}#Ms=new Xe;#Cs(e){this.#fs.sendSmpMessage(e)}async uploadFirmware(e){return this.#Ms.uploadFirmware(e)}async reset(){return await this.#Ms.reset(),this.#fs.disconnect()}get firmwareStatus(){return this.#Ms.status}async getFirmwareImages(){return this.#Ms.getImages()}get firmwareImages(){return this.#Ms.images}async eraseFirmwareImage(){return this.#Ms.eraseImage()}async confirmFirmwareImage(e){return this.#Ms.confirmImage(e)}async testFirmwareImage(e){return this.#Ms.testImage(e)}static#Js=[];static get ConnectedDevices(){return this.#Js}static#ks=!1;static get UseLocalStorage(){return this.#ks}static set UseLocalStorage(e){this.#Qs(),Ye.assertTypeWithError(e,"boolean"),this.#ks=e,this.#ks&&!this.#Zs&&this.#Ks()}static#Xs={devices:[]};static#Zs;static get CanUseLocalStorage(){return t&&window.localStorage}static#Qs(){Ye.assertWithError(t,"localStorage is only available in the browser"),Ye.assertWithError(window.localStorage,"localStorage not found")}static#Ys="BS.Device";static#en(){this.#Qs(),localStorage.setItem(this.#Ys,JSON.stringify(this.#Zs))}static async#Ks(){this.#Qs();let e=localStorage.getItem(this.#Ys);if("string"!=typeof e)return Ye.log("no info found in localStorage"),this.#Zs=Object.assign({},this.#Xs),void this.#en();try{const t=JSON.parse(e);Ye.log({configuration:t}),this.#Zs=t,this.CanGetDevices&&await this.GetDevices()}catch(e){Ye.error(e)}}static#Ls(e){if("webBluetooth"!=e.connectionType)return void Ye.log("localStorage is only for webBluetooth devices");this.#Qs();const t=this.#Zs.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#Zs.devices[t].type=e.type,this.#en())}static#tn=[];static get AvailableDevices(){return this.#tn}static get CanGetDevices(){return t&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!t)return void Ye.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void Ye.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void Ye.warn("bluetooth.getDevices() is not available in this browser");this.#Zs||this.#Ks();const e=this.#Zs;if(!e.devices||0==e.devices.length)return void Ye.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return Ye.log({bluetoothDevices:s}),s.forEach((t=>{if(!t.gatt)return;let s=e.devices.find((e=>t.id==e.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.id==t.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.id==t.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#tn.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const a=new et,r=new We;r.device=t,t.name&&a.#ys.updateName(t.name),a.#ys.updateType(s.type),a.connectionManager=r,this.AvailableDevices.push(a)})),this.#sn(),this.AvailableDevices}static#nn=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#nn}static#in=new m(this,this.#nn);static AddEventListener(e,t,s){this.#in.addEventListener(e,t,s)}static#an(e){this.#in.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#in.removeEventListener(e,t)}static#Is(e){if(e.isConnected)if(this.#Js.includes(e))Ye.log("device already included");else{if(Ye.log("adding device",e),this.#Js.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#Zs.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Zs.devices.push(t):this.#Zs.devices[s]=t,this.#en()}this.#an({type:"deviceConnected",message:{device:e}}),this.#an({type:"deviceIsConnected",message:{device:e}})}else this.#Js.includes(e)?(Ye.log("removing device",e),this.#Js.splice(this.#Js.indexOf(e),1),this.#an({type:"deviceDisconnected",message:{device:e}}),this.#an({type:"deviceIsConnected",message:{device:e}})):Ye.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));Ye.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#sn()}}static#sn(){Ye.log({AvailableDevices:this.AvailableDevices}),this.#an({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new et;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const tt=u("BaseScanner");class st{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#xt(){tt.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Nt(){tt.assertWithError(this.constructor!=st,`${this.constructor.name} must be subclassed`)}constructor(){this.#Nt(),this.#xt(),v(this,this.#rn)}#rn={discoveredDevice:this.#on.bind(this),isScanning:this.#cn.bind(this)};static#g=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#g}get eventTypes(){return st.#g}#vs=new m(this,this.eventTypes);addEventListener(e,t,s){this.#vs.addEventListener(e,t,s)}dispatchEvent(e){this.#vs.dispatchEvent(e)}removeEventListener(e,t){return this.#vs.removeEventListener(e,t)}get isAvailable(){return!1}#hn(){tt.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#ln(){tt.assertWithError(this.isScanning,"not scanning")}#gn(){tt.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#hn(),this.#gn()}stopScan(){this.#ln()}#cn(){this.isScanning?(this.#dn={},this.#un={}):this.#pn.stop()}#dn={};get discoveredDevices(){return this.#dn}get discoveredDevicesArray(){return Object.values(this.#dn).sort(((e,t)=>this.#un[e.id]-this.#un[t.id]))}#fn(e){tt.assertWithError(this.#dn[e],`no discovered device with id "${e}"`)}#on(e){const t=e.message.discoveredDevice;this.#dn[t.id]=t,this.#un[t.id]=Date.now(),this.#pn.start()}#un={};static#mn=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#mn}get#vn(){return st.DiscoveredDeviceExpirationTimeout}#pn=new S(this.#yn.bind(this),1e3);#yn(){const e=Object.entries(this.#dn);if(0==e.length)return void this.#pn.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#un[e];t-n>this.#vn&&(tt.log("discovered device timeout"),delete this.#dn[e],delete this.#un[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#hn()}get canReset(){return!1}reset(){tt.log("resetting...")}}const nt=u("NobleConnectionManager",{log:!0});s&&require("@abandonware/noble");class it extends ke{get id(){return this.#bn?.id}static get isSupported(){return s}static get type(){return"noble"}get isConnected(){return"connected"==this.#bn?.state}async connect(){await super.connect(),await this.#bn.connectAsync()}async disconnect(){await super.disconnect(),await this.#bn.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);nt.log({characteristicName:s});const n=this.#Qt.get(s);nt.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);nt.log("writing data",i);await n.writeAsync(i,!0),n.properties.includes("read")&&await n.readAsync()}async writeCharacteristic(e,t){const s=this.#Qt.get(e);nt.assertWithError(s,`no characteristic found with name "${e}"`);const n=Buffer.from(t);nt.log("writing data",n);await s.writeAsync(n,!0),s.properties.includes("read")&&await s.readAsync()}get canReconnect(){return this.#bn.connectable}async reconnect(){await super.reconnect(),nt.log("attempting to reconnect..."),this.connect()}#bn;get noblePeripheral(){return this.#bn}set noblePeripheral(e){nt.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(nt.log("newNoblePeripheral",e.id),this.#bn&&(y(this.#bn,this.#Sn),delete this.#bn._connectionManager),e&&(e._connectionManager=this,v(e,this.#Sn)),this.#bn=e):nt.log("attempted to assign duplicate noblePeripheral")}#Sn={connect:this.#Dn,disconnect:this.#Tn,rssiUpdate:this.#wn,servicesDiscover:this.#En};async#Dn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){nt.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#bn.discoverServicesAsync(be),await this.#Mn()}async#Tn(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){nt.log("onNoblePeripheralDisconnect",e.id),await this.#Mn()}async#Mn(){switch(nt.log(`noblePeripheral ${this.id} state ${this.#bn.state}`),this.#bn.state){case"connected":case"connecting":break;case"disconnected":this.#Kt(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":nt.error("noblePeripheral error");break;default:nt.log(`uncaught noblePeripheral state ${this.#bn.state}`)}}#Kt(){nt.log("removing noblePeripheral eventListeners"),this.#Jt.forEach((e=>{y(e,this.#Cn)})),this.#Jt.clear(),this.#Qt.forEach((e=>{y(e,this.#kn)})),this.#Qt.clear()}async#wn(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){nt.log("onNoblePeripheralRssiUpdate",e.id,t)}async#En(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){nt.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];nt.log("service",s.uuid);const n=Se(s.uuid);nt.assertWithError(n,`no name found for service uuid "${s.uuid}"`),nt.log({serviceName:n}),this.#Jt.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Cn),await s.discoverCharacteristicsAsync()}}#Jt=new Map;#Cn={characteristicsDiscover:this.#Ln};async#Ln(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){nt.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];nt.log("characteristic",s.uuid);const n=Ee(s.uuid);nt.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),nt.log({characteristicName:n}),this.#Qt.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#kn),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#In&&(this.status="connected")}#kn={data:this.#Wn,write:this.#xn,notify:this.#Nn};#Qt=new Map;get#In(){return we.every((e=>this.#Qt.has(e)))}#Wn(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){nt.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(W(t)),i=e._name;nt.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#xn(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){nt.log("onNobleCharacteristicWrite",e.uuid)}#Nn(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){nt.log("onNobleCharacteristicNotify",e.uuid,t)}}const at=u("NobleScanner",{log:!0});let rt=!1;if(s){var ot=require("@abandonware/noble");rt=!0}class ct extends st{static get isSupported(){return rt}#_n=!1;get#Un(){return this.#_n}set#Un(e){at.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#_n=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):at.log("duplicate isScanning assignment")}get isScanning(){return this.#Un}#Rn="unknown";get#Fn(){return this.#Rn}set#Fn(e){at.assertTypeWithError(e,"string"),this.#Fn!=e?(this.#Rn=e,at.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):at.log("duplicate nobleState assignment")}#An={scanStart:this.#On.bind(this),scanStop:this.#Pn.bind(this),stateChange:this.#$n.bind(this),discover:this.#Vn.bind(this)};#On(){at.log("OnNobleScanStart"),this.#Un=!0}#Pn(){at.log("OnNobleScanStop"),this.#Un=!1}#$n(e){at.log("onNobleStateChange",e),this.#Fn=e}#Vn(e){let t;at.log("onNobleDiscover",e.id),this.#Bn[e.id]||(e._scanner=this,this.#Bn[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=et.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(ot,this.#An),v(this,this.#zn)}get isAvailable(){return"poweredOn"==this.#Fn}startScan(){super.startScan(),ot.startScanningAsync(ve,!0)}stopScan(){super.stopScan(),ot.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),ot.reset()}#zn={expiredDiscoveredDevice:this.#qn.bind(this)};#qn(e){const t=e.message.discoveredDevice;this.#Bn[t.id]&&delete this.#Bn[t.id]}#Bn={};#jn(e){at.assertTypeWithError(e,"string"),at.assertWithError(this.#Bn[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#jn(e);const t=this.#Bn[e];at.log("connecting to discoveredDevice...",e);let s=et.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#Hn(t),await s.connect())}#Hn(e){const t=new et,s=new it;return s.noblePeripheral=e,t.connectionManager=s,t}}const ht=u("Scanner",{log:!1});let lt;ct.isSupported?(ht.log("using NobleScanner"),lt=new ct):ht.log("Scanner not available");var gt=lt;const dt=u("DevicePairPressureSensorDataManager",{log:!0});class ut{static get Sides(){return et.InsoleSides}get sides(){return et.InsoleSides}#Gn={};#Q=new $;resetPressureRange(){this.#Q.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(dt.log({pressure:t,insoleSide:s}),this.#Gn[s]=t,this.#Jn)return this.#Qn();dt.log("doesn't have all pressure data yet...")}get#Jn(){return this.sides.every((e=>e in this.#Gn))}#Qn(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Gn[t].rawSum,e.normalizedSum+=this.#Gn[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Gn[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#Q.updateAndGetNormalization(e.center)),dt.log({devicePairPressure:e}),e}}const pt=u("DevicePairSensorDataManager",{log:!0});class ft{static get Sides(){return et.InsoleSides}get sides(){return et.InsoleSides}#Zn={};pressureSensorDataManager=new ut;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(pt.log({sensorType:s,timestamp:t,event:e}),this.#Zn[s]||(this.#Zn[s]={}),this.#Zn[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else pt.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#Zn[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else pt.log("no value received")}onDataReceived}const mt=u("DevicePair",{log:!0});class vt{constructor(){this.#Ds.onDataReceived=this.#Kn.bind(this)}static#g=["isConnected","pressure",...et.EventTypes.map((e=>`device${p(e)}`))];static get EventTypes(){return this.#g}get eventTypes(){return vt.#g}#vs=new m(this,this.eventTypes);addEventListener(e,t,s){this.#vs.addEventListener(e,t,s)}#d(e){this.#vs.dispatchEvent(e)}removeEventListener(e,t){return this.#vs.removeEventListener(e,t)}static get Sides(){return et.InsoleSides}get sides(){return vt.Sides}#Xn;get left(){return this.#Xn}#Yn;get right(){return this.#Yn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#At(){mt.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void mt.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&y(s,this.#ei),v(e,this.#ei),t){case"left":this.#Xn=e;break;case"right":this.#Yn=e}return mt.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#d({type:"isConnected",message:{isConnected:this.isConnected}}),this.#d({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}mt.log("device already assigned")}#ei={connectionStatus:this.#ti.bind(this),isConnected:this.#si.bind(this),sensorData:this.#ni.bind(this),getSensorConfiguration:this.#ti.bind(this)};#ti(e){this.#d({type:`device${p(e.type)}`,message:{...e.message,device:e.target}})}#si(e){this.#ti(e),this.#d({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#Ds=new ft;#ni(e){this.#ti(e),this.#d({type:`device${p(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Ds.onDeviceSensorData(e)}#Kn(e,t){mt.log({sensorType:e,sensorData:t}),this.#d({type:e,message:t})}resetPressureRange(){this.#Ds.resetPressureRange()}async triggerVibration(e,t){const s=this.sides.map((s=>this[s]?.triggerVibration(e,t))).filter(Boolean);return Promise.allSettled(s)}static#ii=new vt;static get shared(){return this.#ii}static{et.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#ii.assignInsole(t)}))}}const yt=u("ServerUtils",{log:!0}),bt=3e7;function St(e,...t){yt.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=I(...t.data),n=s.byteLength;yt.assertEnumWithError(t.type,e);return I(e.indexOf(t.type),Uint16Array.from([n]),s)}));return yt.log("messageBuffers",...s),I(...s)}const Dt=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function Tt(...e){return St(Dt,...e)}function wt(...e){return yt.log("createDeviceMessage",...e),St(et.EventTypes,...e)}function Et(...e){return St(le.MessageTypes,...e)}const Mt=Tt("ping"),Ct=Tt("pong");Tt("isScanningAvailable"),Tt("isScanning"),Tt("startScan"),Tt("stopScan");const kt=Tt("discoveredDevices"),Lt=u("WebSocketClientConnectionManager",{log:!0});class It extends le{static get isSupported(){return t}static get type(){return"webSocketClient"}#ai;get id(){return this.#ai}set id(e){Lt.assertTypeWithError(e,"string"),this.#ai!=e?this.#ai=e:Lt.log("redundant id assignment")}#Us=!1;get isConnected(){return this.#Us}set isConnected(e){Lt.assertTypeWithError(e,"boolean"),this.#Us!=e?(this.#Us=e,this.status=this.#Us?"connected":"not connected",this.isConnected&&this.#ri()):Lt.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}get canReconnect(){return!0}async reconnect(){await super.reconnect(),Lt.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;async sendSmpMessage(e){super.sendSmpMessage(...arguments),this.sendWebSocketMessage({type:"smp",data:e})}async sendTxData(e){super.sendTxData(...arguments),this.sendWebSocketMessage({type:"tx",data:e})}static#oi=[...ne.MessageTypes,"batteryLevel"];get#ci(){return It.#oi}#ri(){this.sendWebSocketMessage(...this.#ci)}onWebSocketMessage(e){Lt.log({dataView:e}),Q(e,et.EventTypes,this.#hi.bind(this),null,!0)}#hi(e,t){let s=0;switch(e){case"isConnected":const n=Boolean(t.getUint8(s++));Lt.log({isConnected:n}),this.isConnected=n;break;case"rx":this.parseRxMessage(t);break;default:this.onMessageReceived(e,t)}}}const Wt=u("WebSocketClient",{log:!0});class xt{static#g=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#g}get eventTypes(){return xt.#g}#vs=new m(this,this.eventTypes);addEventListener(e,t,s){this.#vs.addEventListener(e,t,s)}#d(e){this.#vs.dispatchEvent(e)}removeEventListener(e,t){return this.#vs.removeEventListener(e,t)}#li;get webSocket(){return this.#li}set webSocket(e){this.#li!=e?(Wt.log("assigning webSocket",e),this.#li&&y(this.#li,this.#gi),v(e,this.#gi),this.#li=e,Wt.log("assigned webSocket")):Wt.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#di(){Wt.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ui(){Wt.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ui(),this.#pi="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#di(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#pi="disconnecting",this.webSocket.close()}reconnect(){this.#ui(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#Ps=!0;static get ReconnectOnDisconnection(){return this.#Ps}static set ReconnectOnDisconnection(e){Wt.assertTypeWithError(e,"boolean"),this.#Ps=e}#$s=xt.#Ps;get reconnectOnDisconnection(){return this.#$s}set reconnectOnDisconnection(e){Wt.assertTypeWithError(e,"boolean"),this.#$s=e}#fi(e){this.#di(),this.#li.send(e)}#mi(...e){this.#fi(Tt(...e))}#gi={open:this.#vi.bind(this),message:this.#yi.bind(this),close:this.#bi.bind(this),error:this.#Si.bind(this)};#vi(e){Wt.log("webSocket.open",e),this.#Di.start(),this.#pi="connected"}async#yi(e){Wt.log("webSocket.message",e),this.#Di.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Ti(s)}#bi(e){Wt.log("webSocket.close",e),this.#pi="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#Di.stop(),this.#$s&&setTimeout((()=>{this.reconnect()}),3e3)}#Si(e){Wt.log("webSocket.error",e)}#wi="not connected";get#pi(){return this.#wi}set#pi(e){switch(Wt.assertTypeWithError(e,"string"),Wt.log({newConnectionStatus:e}),this.#wi=e,this.#d({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#d({type:this.connectionStatus}),e){case"connected":case"not connected":this.#d({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#mi("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Ei=!1,this.#Un=!1)}}get connectionStatus(){return this.#pi}#Ti(e){Wt.log("parseMessage",{dataView:e}),Q(e,Dt,this.#Mi.bind(this),null,!0)}#Mi(e,t){let s=0;switch(e){case"ping":this.#Ci();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(s++));Wt.log({isScanningAvailable:e}),this.#Ei=e}break;case"isScanning":{const e=Boolean(t.getUint8(s++));Wt.log({isScanning:e}),this.#Un=e}break;case"discoveredDevice":{const{string:e}=J(t,s);Wt.log({discoveredDeviceString:e});const n=JSON.parse(e);Wt.log({discoveredDevice:n}),this.#on(n)}break;case"expiredDiscoveredDevice":{const{string:e}=J(t,s);this.#qn(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=J(t,s);Wt.log({connectedDeviceIdStrings:e});const n=JSON.parse(e);Wt.log({connectedDeviceIds:n}),this.#ki(n)}break;case"deviceMessage":{const{string:e,byteOffset:n}=J(t,s);s=n;const i=this.#Li[e];Wt.assertWithError(i,`no device found for id ${e}`);const a=i.connectionManager,r=N(t,s);a.onWebSocketMessage(r)}break;default:Wt.error(`uncaught messageType "${e}"`)}}#Di=new S(this.#Ii.bind(this),bt);#Ii(){this.#mi("ping")}#Ci(){this.#mi("pong")}#Wi=!1;get#Ei(){return this.#Wi}set#Ei(e){Wt.assertTypeWithError(e,"boolean"),this.#Wi=e,this.#d({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#xi()}get isScanningAvailable(){return this.#Ei}#Ni(){this.#di(),Wt.assertWithError(this.isScanningAvailable,"scanning is not available")}#_i(){this.#mi("isScanningAvailable")}#_n=!1;get#Un(){return this.#_n}set#Un(e){Wt.assertTypeWithError(e,"boolean"),this.#_n=e,this.#d({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Un}#xi(){this.#mi("isScanning")}#ln(){Wt.assertWithError(this.isScanning,"is not scanning")}#gn(){Wt.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#gn(),this.#mi("startScan")}stopScan(){this.#ln(),this.#mi("stopScan")}toggleScan(){this.#Ni(),this.isScanning?this.stopScan():this.startScan()}#dn={};get discoveredDevices(){return this.#dn}#on(e){Wt.log({discoveredDevice:e}),this.#dn[e.id]=e,this.#d({type:"discoveredDevice",message:{discoveredDevice:e}})}#Ui(){this.#fi(kt)}#qn(e){Wt.log({expiredDeviceId:e});const t=this.#dn[e];t?(Wt.log({expiredDiscoveredDevice:t}),delete this.#dn[e],this.#d({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Wt.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#Ri(e)}#Ri(e){this.#di(),Wt.assertTypeWithError(e,"string");const t=this.#Fi(e);return t.connect(),t}#Ai(e){this.#fi(this.#Oi(e))}#Oi(e){return Tt({type:"connectToDevice",data:e})}#Hn(e){const t=new et,s=new It;return s.id=e,s.sendWebSocketMessage=this.#Pi.bind(this,e),s.sendWebSocketConnectMessage=this.#Ai.bind(this,e),s.sendWebSocketDisconnectMessage=this.#$i.bind(this,e),t.connectionManager=s,t}#Fi(e){let t=this.#Li[e];return t||(t=this.#Hn(e),this.#Li[e]=t),t}#ki(e){Wt.log({deviceIds:e}),e.forEach((e=>{this.#Fi(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#Vi(e)}#Vi(e){this.#di(),Wt.assertTypeWithError(e,"string");const t=this.devices[e];return Wt.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#$i(e){this.#fi(this.#Bi(e))}#Bi(e){return Tt({type:"disconnectFromDevice",data:e})}#Pi(e,...t){this.#fi(this.#zi(e,...t))}#zi(e,...t){return Tt({type:"deviceMessage",data:[e,Et(...t)]})}#Li={};get devices(){return this.#Li}}const Nt=u("BaseServer",{log:!0});class _t{#Nt(){Nt.assertWithError(this.constructor!=_t,`${this.constructor.name} must be subclassed`)}static#g=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#g}get eventTypes(){return _t.#g}#vs=new m(this,this.eventTypes);addEventListener(e,t,s){this.#vs.addEventListener(e,t,s)}dispatchEvent(e){this.#vs.dispatchEvent(e)}removeEventListener(e,t){return this.#vs.removeEventListener(e,t)}constructor(){this.#Nt(),Nt.assertWithError(gt,"no scanner defined"),v(gt,this.#qi),v(et,this.#ji),v(this,this.#Hi)}get numberOfClients(){return 0}static#Gi=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#Gi}static set ClearSensorConfigurationsWhenNoClients(e){Nt.assertTypeWithError(e,"boolean"),this.#Gi=e}#Ji=_t.#Gi;get clearSensorConfigurationsWhenNoClients(){return this.#Ji}set clearSensorConfigurationsWhenNoClients(e){Nt.assertTypeWithError(e,"boolean"),this.#Ji=e}#Hi={clientConnected:this.#Qi.bind(this),clientDisconnected:this.#Zi.bind(this)};#Qi(e){e.message.client,Nt.log("onClientConnected")}#Zi(e){e.message.client,Nt.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&et.ConnectedDevices.forEach((e=>{e.clearSensorConfiguration(),e.setTfliteInferencingEnabled(!1)}))}broadcastMessage(e){Nt.log("broadcasting",e)}#qi={isAvailable:this.#Ki.bind(this),isScanning:this.#Xi.bind(this),discoveredDevice:this.#Yi.bind(this),expiredDiscoveredDevice:this.#qn.bind(this)};#Ki(e){this.broadcastMessage(this.#ea)}get#ea(){return Tt({type:"isScanningAvailable",data:gt.isAvailable})}#Xi(e){this.broadcastMessage(this.#ta)}get#ta(){return Tt({type:"isScanning",data:gt.isScanning})}#Yi(e){const t=e.message.discoveredDevice;Nt.log(t),this.broadcastMessage(this.#sa(t))}#sa(e){return Tt({type:"discoveredDevice",data:e})}#qn(e){const t=e.message.discoveredDevice;Nt.log("expired",t),this.broadcastMessage(this.#na(t))}#na(e){return Tt({type:"expiredDiscoveredDevice",data:e.id})}get#ia(){return Tt(...gt.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#aa(){return Tt({type:"connectedDevices",data:JSON.stringify(et.ConnectedDevices.map((e=>e.id)))})}#ra={connectionMessage:this.#oa.bind(this)};#zi(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#oa(e){const t=e.target;if(Nt.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#ca(t,this.#zi(t,s,n)))}#ji={deviceConnected:this.#ha.bind(this),deviceDisconnected:this.#la.bind(this),deviceIsConnected:this.#si.bind(this)};#ha(e){const t=e.message.device;Nt.log("onDeviceConnected",t.id),v(t,this.#ra)}#la(e){const t=e.message.device;Nt.log("onDeviceDisconnected",t.id),y(t,this.#ra)}#si(e){const t=e.message.device;Nt.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#ga(t))}#ga(e){return this.#ca(e,{type:"isConnected",data:e.isConnected})}#ca(e,...t){return Tt({type:"deviceMessage",data:[e.id,wt(...t)]})}parseClientMessage(e){let t=[];if(Q(e,Dt,this.#da.bind(this),{responseMessages:t},!0),t=t.filter(Boolean),t.length>0)return I(t)}#da(e,t,s){switch(e){case"ping":responseMessages.push(Ct);break;case"pong":break;case"isScanningAvailable":s.responseMessages.push(this.#ea);break;case"isScanning":s.responseMessages.push(this.#ta);break;case"startScan":gt.startScan();break;case"stopScan":gt.stopScan();break;case"discoveredDevices":s.responseMessages.push(this.#ia);break;case"connectToDevice":{const{string:e}=J(t);gt.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=J(t),s=et.ConnectedDevices.find((t=>t.id==e));if(!s){Nt.error(`no device found with id ${e}`);break}s.disconnect()}break;case"connectedDevices":s.responseMessages.push(this.#aa);break;case"deviceMessage":{const{string:e,byteOffset:n}=J(t),i=et.ConnectedDevices.find((t=>t.id==e));if(!i){Nt.error(`no device found with id ${e}`);break}const a=new DataView(t.buffer,t.byteOffset+n);s.responseMessages.push(this.parseClientDeviceMessage(i,a))}break;default:Nt.error(`uncaught messageType "${e}"`)}}parseClientDeviceMessage(e,t){Nt.log("onDeviceMessage",e.id,t);let s=[];if(Q(t,le.MessageTypes,this.#ua.bind(this),{responseMessages:s,device:e},!0),s.length>0)return this.#ca(e,...s)}#ua(e,t,s){switch(e){case"smp":s.device.connectionManager.sendSmpMessage(t.buffer);break;case"tx":s.device.connectionManager.sendTxData(t.buffer);break;default:s.responseMessages.push(this.#zi(s.device,e))}}}const Ut=u("WebSocketServer",{log:!0});s&&require("ws");var Rt={setAllConsoleLevelFlags:function(e){d.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){d.setLevelFlagsForType(e,t)},Device:et,DevicePair:vt,WebSocketClient:xt,WebSocketServer:class extends _t{get numberOfClients(){return this.#pa?.clients.size||0}#pa;get server(){return this.#pa}set server(e){this.#pa!=e?(Ut.log("assigning server..."),this.#pa&&(Ut.log("clearing existing server..."),y(this.#pa,this.#Hi)),v(e,this.#Hi),this.#pa=e,Ut.log("assigned server")):Ut.log("redundant WebSocket assignment")}#Hi={close:this.#fa.bind(this),connection:this.#ma.bind(this),error:this.#va.bind(this),headers:this.#ya.bind(this),listening:this.#ba.bind(this)};#fa(){Ut.log("server.close")}#ma(e){Ut.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new S((()=>this.#Sa(e)),bt),e.pingClientTimer.start(),v(e,this.#Da),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#va(e){Ut.error(e)}#ya(){}#ba(){Ut.log("server.listening")}#Da={open:this.#Ta.bind(this),message:this.#da.bind(this),close:this.#wa.bind(this),error:this.#Ea.bind(this)};#Ta(e){Ut.log("client.open")}#da(e){Ut.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(W(e.data));this.#Ma(t,s)}#wa(e){Ut.log("client.close");const t=e.target;t.pingClientTimer.stop(),y(t,this.#Da),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#Ea(e){Ut.log("client.error")}#Ma(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Sa(e){e.isAlive?(e.isAlive=!1,e.send(Mt)):e.terminate()}},Scanner:gt};return Rt}));
