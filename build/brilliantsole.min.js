/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).BS={})}(this,(function(e){"use strict";const t=!1,s="undefined"!=typeof window&&"undefined"!==window?.document,n="undefined"!=typeof process&&null!=process?.versions?.node,i=s&&navigator.userAgent.includes("Bluefy"),a=s&&navigator.userAgent.includes("WebBLE");s&&navigator.userAgent.includes("Android"),s&&navigator.userAgent.includes("Safari");var r;if(!s&&!n&&"undefined"!=typeof global&&"undefined"!=typeof Studio){const e=function(...e){Studio.log(e.map((e=>new String(e))).join(","))};(r={}).log=e,r.warn=e.bind(r,"WARNING"),r.error=e.bind(r,"ERROR")}else r=console;if(!r.assert){const e=(e,...t)=>{e||r.warn(...t)};r.assert=e}if(!r.table){const e=(...e)=>{r.log(...e)};r.table=e}function o(){}const c=r.log.bind(r),g=r.warn.bind(r),h=r.error.bind(r),l=r.table.bind(r),u=r.assert.bind(r);class d{static#e={};constructor(e){if(d.#e[e])throw new Error(`"${e}" console already exists`);d.#e[e]=this}#t={log:t,warn:t,assert:!0,error:!0,table:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new d(e)}get log(){return this.#t.log?c:o}get warn(){return this.#t.warn?g:o}get error(){return this.#t.error?h:o}get assert(){return this.#t.assert?u:o}get table(){return this.#t.table?l:o}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function p(e,t){return d.create(e,t)}function f(e){return e[0].toUpperCase()+e.slice(1)}const m=p("EventDispatcher",{log:!1});class v{constructor(e,t){m.assertWithError(e,"target is required"),this.#s=e,m.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#a(e){m.assertWithError(this.#i(e),`invalid event type "${e}"`)}#r;addEventListener(e,t,s){if(m.log(`adding "${e}" eventListener`,t),this.#a(e),this.#r||(this.#r={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#r;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return m.log(`has "${e}" eventListener?`,t),this.#a(e),this.#r?.[e]?.includes(t)}removeEventListener(e,t){if(m.log(`removing "${e}" eventListener`,t),this.#a(e),this.hasEventListener(e,t)){const s=this.#r[e].indexOf(t);return this.#r[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#a(e.type),this.#r?.[e.type]){e.target=this.#s;const t=this.#r[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)try{t[s].call(this,e)}catch(e){m.error(e)}}}waitForEvent(e){return m.log(`waiting for event "${e}"`),this.#a(e),new Promise((t=>{this.addEventListener(e,(e=>{t(e)}),{once:!0})}))}}function y(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;m.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function S(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;m.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const b=p("Timer",{log:!1});class T{#o;get callback(){return this.#o}set callback(e){b.assertTypeWithError(e,"function"),b.log({newCallback:e}),this.#o=e,this.isRunning&&this.restart()}#c;get interval(){return this.#c}set interval(e){b.assertTypeWithError(e,"number"),b.assertWithError(e>0,"interval must be above 0"),b.log({newInterval:e}),this.#c=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#g=null;get isRunning(){return null!=this.#g}start(){this.isRunning?b.log("interval already running"):(b.log("starting interval"),this.#g=setInterval(this.#o,this.#c))}stop(){this.isRunning?(b.log("stopping interval"),clearInterval(this.#g),this.#g=null):b.log("interval already not running")}restart(){this.stop(),this.start()}}function w(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}p("checksum",{log:!0});const E=new Uint32Array(256);for(let e=0;e<256;++e)E[e]=w(e);function M(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(E[n^i]^s>>>8)>>>0}return s}var D,C;D="undefined"==typeof TextEncoder?class{encode(e){const t=Array.from(e).map((e=>e.charCodeAt(0)));return Uint8Array.from(t)}}:TextEncoder,C="undefined"==typeof TextDecoder?class{decode(e){return Array.from(new Uint8Array(e)).map((e=>String.fromCharCode(e))).join("")}}:TextDecoder;const I=new D,k=new C,L=p("ArrayBufferUtils",{log:!1});function W(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return x(e)}if(e instanceof Array){return W(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return x(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function x(e){const t=I.encode(e);return W(t.byteLength,t)}function R(e,t,s){let n;return null!=s&&(n=e.byteOffset+t+s),L.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}async function U(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}const F=p("FileTransferManager",{log:!0});class _{static#h=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#h}get messageTypes(){return _.MessageTypes}static#l=[...this.#h,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#l}get eventTypes(){return _.#l}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#d=["tflite"];static get Types(){return this.#d}get types(){return _.Types}#p(e){F.assertEnumWithError(e,this.types)}#f(e){F.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#m=["idle","sending","receiving"];static get Statuses(){return this.#m}get statuses(){return _.Statuses}#v(e){F.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#y=["startSend","startReceive","cancel"];static get Commands(){return this.#y}get commands(){return _.Commands}#S(e){F.assertEnumWithError(e,this.commands)}static#b=0;static get MaxLength(){return this.#b}#T=_.MaxLength;get maxLength(){return this.#T}#w(e){F.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);F.log(`maxLength: ${t/1024}kB`),this.#T=t}#E(e){F.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#M;get type(){return this.#M}#D(e){F.log("parseFileType",e);const t=e.getUint8(0);this.#f(t);const s=this.types[t];this.#C(s)}#C(e){F.log({fileTransferType:e}),this.#M=e,this.#u({type:"getFileTransferType",message:{fileType:e}})}async#I(e,t){if(this.#p(e),this.type==e)return void F.log(`redundant type assignment ${e}`);const s=this.waitForEvent("getFileTransferType"),n=this.types.indexOf(e);this.sendMessage([{type:"setFileTransferType",data:Uint8Array.from([n]).buffer}],t),await s}#k=0;get length(){return this.#k}#L(e){F.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#W(t)}#W(e){F.log(`length: ${e/1024}kB`),this.#k=e,this.#u({type:"getFileLength",message:{fileLength:e}})}async#x(e,t){if(F.assertTypeWithError(e,"number"),this.#E(e),this.length==e)return void F.log(`redundant length assignment ${e}`);const s=this.waitForEvent("getFileLength"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileLength",data:n.buffer}],t),await s}#R=0;get checksum(){return this.#R}#U(e){F.log("checksum",e);const t=e.getUint32(0,!0);this.#F(t)}#F(e){F.log({checksum:e}),this.#R=e,this.#u({type:"getFileChecksum",message:{fileChecksum:e}})}async#_(e,t){if(F.assertTypeWithError(e,"number"),this.checksum==e)return void F.log(`redundant checksum assignment ${e}`);const s=this.waitForEvent("getFileChecksum"),n=new DataView(new ArrayBuffer(4));n.setUint32(0,e,!0),this.sendMessage([{type:"setFileChecksum",data:n.buffer}],t),await s}async#A(e,t){this.#S(e);const s=this.waitForEvent("fileTransferStatus"),n=this.commands.indexOf(e);this.sendMessage([{type:"setFileTransferCommand",data:Uint8Array.from([n]).buffer}],t),await s}#O="idle";get status(){return this.#O}#N(e){F.log("parseFileStatus",e);const t=e.getUint8(0);this.#v(t);const s=this.statuses[t];this.#$(s)}#$(e){F.log({status:e}),this.#O=e,this.#u({type:"fileTransferStatus",message:{fileTransferStatus:e}}),this.#V.length=0}#B(){F.assertWithError("idle"==this.#O,"status is not idle")}#P(){F.assertWithError("idle"!=this.#O,"status is idle")}#V=[];async#z(e){F.log("parseFileBlock",e),this.#V.push(e.buffer);const t=this.#V.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#k;if(F.log(`received ${t} of ${this.#k} bytes (${100*s}%)`),this.#u({type:"fileTransferProgress",message:{progress:s}}),t!=this.#k)return;F.log("file transfer complete");let n,i=(new Date).toLocaleString();if("tflite"===this.type)i+=".tflite";n="undefined"!=typeof File?new File(this.#V,i):new Blob(this.#V);const a=M(await n.arrayBuffer());F.log({checksum:a}),a==this.#R?(F.log("received file",n),this.#u({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#u({type:"fileReceived",message:{file:n}})):F.error(`wrong checksum - expected ${this.#R}, got ${a}`)}parseMessage(e,t){switch(F.log({messageType:e}),e){case"maxFileLength":this.#w(t);break;case"getFileTransferType":case"setFileTransferType":this.#D(t);break;case"getFileLength":case"setFileLength":this.#L(t);break;case"getFileChecksum":case"setFileChecksum":this.#U(t);break;case"fileTransferStatus":this.#N(t);break;case"getFileTransferBlock":this.#z(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#B(),this.#p(e);const s=await U(t),n=[];n.push(this.#I(e,!1));const i=s.byteLength;n.push(this.#x(i,!1));const a=M(s);n.push(this.#_(a,!1)),n.push(this.#A("startSend",!1)),this.sendMessage(),await Promise.all(n),await this.#q(s)}async#q(e){return this.#j(e)}async#j(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+(this.mtu-3-3));F.log("slicedBuffer",s);const n=1-(e.byteLength-t)/e.byteLength;if(F.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#u({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage([{type:"setFileTransferBlock",data:s}]),this.#j(e,t+s.byteLength);F.log("finished sending buffer"),this.#u({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#B(),this.#p(e),await this.#I(e),await this.#A("startReceive")}async cancel(){this.#P(),await this.#A("cancel")}sendMessage;mtu}const A=65536;function O(e,t){const s=Date.now();var n;return(n=s)-n%A+e.getUint16(t,!0)}const N={min:1/0,max:-1/0,range:0};class ${#H=Object.assign({},N);reset(){Object.assign(this.#H,N)}update(e){this.#H.min=Math.min(e,this.#H.min),this.#H.max=Math.max(e,this.#H.max),this.#H.range=this.#H.max-this.#H.min}getNormalization(e){return this.#H.range*e||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class V{#H={x:new $,y:new $};reset(){this.#H.x.reset(),this.#H.y.reset()}update(e){this.#H.x.update(e.x),this.#H.y.update(e.y)}getNormalization(e){return{x:this.#H.x.getNormalization(e.x),y:this.#H.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const B=p("PressureSensorDataManager",{log:!0});class P{static#d=["pressure"];static get Types(){return this.#d}#G=[];get positions(){return this.#G}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;B.log({positions:t}),this.#G=t,this.#Q=(s=this.numberOfSensors,n=()=>new $,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#Q;#J=new V;resetRange(){this.#Q.forEach((e=>e.reset())),this.#J.reset()}parseData(e,t){const s={sensors:[],scaledSum:0,normalizedSum:0};for(let n=0,i=0;i<e.byteLength;n++,i+=2){const a=e.getUint16(i,!0),r=a*t,o=this.#Q[n].updateAndGetNormalization(r),c=this.positions[n];s.sensors[n]={rawValue:a,scaledValue:r,normalizedValue:o,position:c,weightedValue:0},s.scaledSum+=r,s.normalizedSum+=o/this.numberOfSensors}return s.scaledSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.scaledValue/s.scaledSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#J.updateAndGetNormalization(s.center)),B.log({pressure:s}),s}}const z=p("MotionSensorDataManager",{log:!0});class q{static#d=["acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","orientation","activity","stepCounter","stepDetector","deviceOrientation"];static get Types(){return this.#d}static#Z=6;static get Vector3Size(){return this.#Z}get vector3Size(){return q.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const a={x:s,y:n,z:i};return z.log({vector:a}),a}static#K=8;static get QuaternionSize(){return this.#K}get quaternionSize(){return q.QuaternionSize}parseQuaternion(e,t){let[s,n,i,a]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const r={x:s,y:n,z:i,w:a};return z.log({quaternion:r}),r}static#X=6;static get EulerSize(){return this.#X}get eulerSize(){return q.EulerSize}parseEuler(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));n*=-1,s*=-1;const a={heading:s,pitch:n,roll:i};return z.log({euler:a}),a}parseStepCounter(e){z.log("parseStepCounter",e);const t=e.getUint32(0,!0);return z.log({stepCount:t}),t}static#Y=["still","walking","running","bicycle","vehicle","tilting"];static get ActivityTypes(){return this.#Y}get#ee(){return q.#Y}parseActivity(e){z.log("parseActivity",e);const t={},s=e.getUint8(0);return z.log("activityBitfield",s.toString(2)),this.#ee.forEach(((e,n)=>{t[e]=Boolean(s&1<<n)})),z.log("activity",t),t}static#te=["portraitUpright","landscapeLeft","portraitUpsideDown","landscapeRight","unknown"];static get DeviceOrientations(){return this.#te}get#se(){return q.#te}parseDeviceOrientation(e){z.log("parseDeviceOrientation",e);const t=e.getUint8(0),s=this.#se[t];return z.assertWithError(s,"undefined deviceOrientation"),z.log({deviceOrientation:s}),s}}const j=p("BarometerSensorDataManager",{log:!0});class H{static#d=["barometer"];static get Types(){return this.#d}#ne(e){const t=.0065;return 288.15/t*(1-Math.pow(e/101325,.19026643566373183))}parseData(e,t){const s=e.getUint32(0,!0)*t,n=this.#ne(s);return j.log({pressure:s,altitude:n}),{pressure:s}}}const G=p("ParseUtils",{log:!0});function Q(e,t=0){const s=e.getUint8(t++);return{string:k.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function J(e,t,s,n,i=!1){let a=0;for(;a<e.byteLength;){const r=e.getUint8(a++),o=t[r];let c;i?(c=e.getUint16(a,!0),a+=2):c=e.getUint8(a++),G.log({messageTypeEnum:r,messageType:o,messageLength:c,dataView:e,byteOffset:a}),G.assertWithError(o,`invalid messageTypeEnum ${r}`);const g=R(e,a,c);G.log({_dataView:g}),s(o,g,n),a+=c}}const Z=p("SensorDataManager",{log:!0});class K{static#h=["getPressurePositions","getSensorScalars","sensorData"];static get MessageTypes(){return this.#h}get messageTypes(){return K.MessageTypes}pressureSensorDataManager=new P;motionSensorDataManager=new q;barometerSensorDataManager=new H;static#d=[...P.Types,...q.Types,...H.Types];static get Types(){return this.#d}get types(){return K.Types}#ie=new Map;static AssertValidSensorType(e){Z.assertTypeWithError(e,"string"),Z.assertWithError(this.#d.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){Z.assertTypeWithError(e,"number"),Z.assertWithError(e in this.#d,`invalid sensorTypeEnum ${e}`)}static#l=[...this.#h,...this.#d];static get EventTypes(){return this.#l}get eventTypes(){return K.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#ae(e){Z.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=O(e,t);t+=2;J(new DataView(e.buffer,t),K.Types,this.#re.bind(this),{timestamp:s})}#re(e,t,{timestamp:s}){const n=this.#ie.get(e);let i=null;switch(e){case"pressure":i=this.pressureSensorDataManager.parseData(t,n);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(t,n);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(t,n);break;case"orientation":i=this.motionSensorDataManager.parseEuler(t,n);break;case"stepCounter":i=this.motionSensorDataManager.parseStepCounter(t);break;case"stepDetector":i={};break;case"activity":i=this.motionSensorDataManager.parseActivity(t);break;case"deviceOrientation":i=this.motionSensorDataManager.parseDeviceOrientation(t);break;case"barometer":i=this.barometerSensorDataManager.parseData(t,n);break;default:Z.error(`uncaught sensorType "${e}"`)}Z.assertWithError(null!=i,`no sensorData defined for sensorType "${e}"`),Z.log({sensorType:e,sensorData:i,sensorData:i}),this.#u({type:e,message:{[e]:i,timestamp:s}}),this.#u({type:"sensorData",message:{[e]:i,sensorType:e,timestamp:s}})}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=K.Types[s];if(!n){Z.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);Z.log({sensorType:n,sensorScalar:i}),this.#ie.set(n,i)}}parseMessage(e,t){switch(Z.log({messageType:e}),e){case"getSensorScalars":this.parseScalars(t);break;case"getPressurePositions":this.pressureSensorDataManager.parsePositions(t);break;case"sensorData":this.#ae(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const X=p("SensorConfigurationManager",{log:!0});class Y{static#h=["getSensorConfiguration","setSensorConfiguration"];static get MessageTypes(){return this.#h}get messageTypes(){return Y.MessageTypes}static#l=[...this.#h];static get EventTypes(){return this.#l}get eventTypes(){return Y.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static get#oe(){return K.Types}get#ce(){return Y.#oe}#ge;#he(e){X.assertWithError(this.#ge,"must get initial sensorConfiguration");const t=this.#ge?.includes(e);return X.assert(t,`unavailable sensor type "${e}"`),t}#le;get configuration(){return this.#le}#ue(e){this.#le=e,X.log({updatedConfiguration:this.#le}),this.#u({type:"getSensorConfiguration",message:{sensorConfiguration:this.configuration}})}async setConfiguration(e){X.log({newSensorConfiguration:e});const t=this.#de(e);X.log({setSensorConfigurationData:t});const s=this.waitForEvent("getSensorConfiguration");this.sendMessage([{type:"setSensorConfiguration",data:t.buffer}]),await s}#pe(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=K.Types[n];if(!i){X.warn(`unknown sensorType index ${n}`);continue}const a=e.getUint16(s+1,!0);X.log({sensorType:i,sensorRate:a}),t[i]=a}return X.log({parsedSensorConfiguration:t}),this.#ge=Object.keys(t),t}static#fe=65535;static get MaxSensorRate(){return this.#fe}get maxSensorRate(){return Y.MaxSensorRate}static#me=5;static get SensorRateStep(){return this.#me}get sensorRateStep(){return Y.SensorRateStep}static#ve(e){X.assertTypeWithError(e,"number"),X.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),X.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),X.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ye(e){Y.#ve(e)}#de(e){let t=Object.keys(e);t=t.filter((e=>this.#he(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{K.AssertValidSensorType(t);const i=K.Types.indexOf(t);s.setUint8(3*n,i);const a=e[t];this.#ye(a),s.setUint16(3*n+1,e[t],!0)})),X.log({sensorConfigurationData:s}),s}static#Se={};static get ZeroSensorConfiguration(){return this.#Se}static{this.#oe.forEach((e=>{this.#Se[e]=0}))}get zeroSensorConfiguration(){const e={};return this.#ce.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setConfiguration(this.zeroSensorConfiguration)}parseMessage(e,t){switch(X.log({messageType:e}),e){case"getSensorConfiguration":case"setSensorConfiguration":const s=this.#pe(t);this.#ue(s);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const ee=p("TfliteManager",{log:!0});let te=class e{static#h=["getTfliteName","setTfliteName","getTfliteTask","setTfliteTask","getTfliteSampleRate","setTfliteSampleRate","getTfliteSensorTypes","setTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#h}get messageTypes(){return e.MessageTypes}static#be=["classification","regression"];static get Tasks(){return this.#be}get tasks(){return e.Tasks}#Te(e){ee.assertEnumWithError(e,this.tasks)}#we(e){ee.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#l=[...this.#h];static get EventTypes(){return this.#l}get eventTypes(){return e.#l}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#Ee;get name(){return this.#Ee}#Me(e){ee.log("parseName",e);const t=k.decode(e);this.#De(t)}#De(e){ee.log({name:e}),this.#Ee=e,this.#u({type:"getTfliteName",message:{tfliteModelName:e}})}async setName(e,t){if(ee.assertTypeWithError(e,"string"),this.name==e)return void ee.log(`redundant name assignment ${e}`);const s=this.waitForEvent("getTfliteName"),n=I.encode(e);this.sendMessage([{type:"setTfliteName",data:n.buffer}],t),await s}#Ce;get task(){return this.#Ce}#Ie(e){ee.log("parseTask",e);const t=e.getUint8(0);this.#we(t);const s=this.tasks[t];this.#ke(s)}#ke(e){ee.log({task:e}),this.#Ce=e,this.#u({type:"getTfliteTask",message:{tfliteModelTask:e}})}async setTask(e,t){if(this.#Te(e),this.task==e)return void ee.log(`redundant task assignment ${e}`);const s=this.waitForEvent("getTfliteTask"),n=this.tasks.indexOf(e);this.sendMessage([{type:"setTfliteTask",data:Uint8Array.from([n]).buffer}],t),await s}#Le;get sampleRate(){return this.#Le}#We(e){ee.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#xe(t)}#xe(e){ee.log({sampleRate:e}),this.#Le=e,this.#u({type:"getTfliteSampleRate",message:{tfliteModelSampleRate:e}})}async setSampleRate(e,t){if(ee.assertTypeWithError(e,"number"),e-=e%Y.SensorRateStep,ee.assertWithError(e>=Y.SensorRateStep,`sampleRate must be multiple of ${Y.SensorRateStep} greater than 0 (got ${e})`),this.#Le==e)return void ee.log(`redundant sampleRate assignment ${e}`);const s=this.waitForEvent("getTfliteSampleRate"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteSampleRate",data:n.buffer}],t),await s}static#oe=["pressure","linearAcceleration","gyroscope","magnetometer"];static get SensorTypes(){return this.#oe}static AssertValidSensorType(e){K.AssertValidSensorType(e),ee.assertWithError(this.#oe.includes(e),`invalid tflite sensorType "${e}"`)}#ce=[];get sensorTypes(){return this.#ce.slice()}#Re(e){ee.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=K.Types[n];i?t.push(i):ee.error(`invalid sensorTypeEnum ${n}`)}this.#Ue(t)}#Ue(e){ee.log({sensorTypes:e}),this.#ce=e,this.#u({type:"getTfliteSensorTypes",message:{tfliteModelSensorTypes:e}})}async setSensorTypes(t,s){t.forEach((t=>{e.AssertValidSensorType(t)}));const n=this.waitForEvent("getTfliteSensorTypes");var i;const a=(t=(i=t).filter(((e,t)=>i.indexOf(e)==t))).map((e=>K.Types.indexOf(e))).sort();ee.log(t,a),this.sendMessage([{type:"setTfliteSensorTypes",data:Uint8Array.from(a).buffer}],s),await n}#Fe;get isReady(){return this.#Fe}#_e(e){ee.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Ae(t)}#Ae(e){ee.log({isReady:e}),this.#Fe=e,this.#u({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#Oe(){ee.assertWithError(this.isReady,"tflite is not ready")}#Ne;get captureDelay(){return this.#Ne}#$e(e){ee.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#Ve(t)}#Ve(e){ee.log({captureDelay:e}),this.#Ne=e,this.#u({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async setCaptureDelay(e,t){if(ee.assertTypeWithError(e,"number"),this.#Ne==e)return void ee.log(`redundant captureDelay assignment ${e}`);const s=this.waitForEvent("getTfliteCaptureDelay"),n=new DataView(new ArrayBuffer(2));n.setUint16(0,e,!0),this.sendMessage([{type:"setTfliteCaptureDelay",data:n.buffer}],t),await s}#Be;get threshold(){return this.#Be}#Pe(e){ee.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#ze(t)}#ze(e){ee.log({threshold:e}),this.#Be=e,this.#u({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async setThreshold(e,t){if(ee.assertTypeWithError(e,"number"),ee.assertWithError(e>=0,`threshold must be positive (got ${e})`),this.#Be==e)return void ee.log(`redundant threshold assignment ${e}`);const s=this.waitForEvent("getTfliteThreshold"),n=new DataView(new ArrayBuffer(4));n.setFloat32(0,e,!0),this.sendMessage([{type:"setTfliteThreshold",data:n.buffer}],t),await s}#qe;get inferencingEnabled(){return this.#qe}#je(e){ee.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#He(t)}#He(e){ee.log({inferencingEnabled:e}),this.#qe=e,this.#u({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async setInferencingEnabled(e,t){if(ee.assertTypeWithError(e,"boolean"),!e&&!this.isReady)return;if(this.#Oe(),this.#qe==e)return void ee.log(`redundant inferencingEnabled assignment ${e}`);const s=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage([{type:"setTfliteInferencingEnabled",data:Uint8Array.from([e]).buffer}],t),await s}async toggleInferencingEnabled(){return this.setInferencingEnabled(!this.inferencingEnabled)}async enableInferencing(){this.inferencingEnabled||this.setInferencingEnabled(!0)}async disableInferencing(){this.inferencingEnabled&&this.setInferencingEnabled(!1)}#Ge(e){ee.log("parseInference",e);const t=O(e,0);ee.log({timestamp:t});const s=[];for(let t=0,n=2;n<e.byteLength;t++,n+=4){const t=e.getFloat32(n,!0);s.push(t)}ee.log("values",s);const n={timestamp:t,values:s};this.#u({type:"tfliteModelInference",message:{tfliteModelInference:n}})}parseMessage(e,t){switch(ee.log({messageType:e}),e){case"getTfliteName":case"setTfliteName":this.#Me(t);break;case"getTfliteTask":case"setTfliteTask":this.#Ie(t);break;case"getTfliteSampleRate":case"setTfliteSampleRate":this.#We(t);break;case"getTfliteSensorTypes":case"setTfliteSensorTypes":this.#Re(t);break;case"tfliteModelIsReady":this.#_e(t);break;case"getTfliteCaptureDelay":case"setTfliteCaptureDelay":this.#$e(t);break;case"getTfliteThreshold":case"setTfliteThreshold":this.#Pe(t);break;case"getTfliteInferencingEnabled":case"setTfliteInferencingEnabled":this.#je(t);break;case"tfliteModelInference":this.#Ge(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage};const se=p("DeviceInformationManager",{log:!0});class ne{static#h=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber"];static get MessageTypes(){return this.#h}get messageTypes(){return ne.MessageTypes}static#l=[...this.#h,"deviceInformation"];static get EventTypes(){return this.#l}get eventTypes(){return ne.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}information={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get#Qe(){return Object.values(this.information).every((e=>null!=e))}#Je(e){se.log({partialDeviceInformation:e});for(const t in e)this.#u({type:t,message:{[t]:e[t]}});Object.assign(this.information,e),se.log({deviceInformation:this.information}),this.#Qe&&(se.log("completed deviceInformation"),this.#u({type:"deviceInformation",message:{deviceInformation:this.information}}))}parseMessage(e,t){switch(se.log({messageType:e}),e){case"manufacturerName":const s=k.decode(t);se.log({manufacturerName:s}),this.#Je({manufacturerName:s});break;case"modelNumber":const n=k.decode(t);se.log({modelNumber:n}),this.#Je({modelNumber:n});break;case"softwareRevision":const i=k.decode(t);se.log({softwareRevision:i}),this.#Je({softwareRevision:i});break;case"hardwareRevision":const a=k.decode(t);se.log({hardwareRevision:a}),this.#Je({hardwareRevision:a});break;case"firmwareRevision":const r=k.decode(t);se.log({firmwareRevision:r}),this.#Je({firmwareRevision:r});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),se.log({pnpId:o}),this.#Je({pnpId:o});break;case"serialNumber":const c=k.decode(t);se.log({serialNumber:c});break;default:throw Error(`uncaught messageType ${e}`)}}}const ie=p("InformationManager",{log:!0});class ae{static#h=["isCharging","getBatteryCurrent","getMtu","getId","getName","setName","getType","setType","getCurrentTime","setCurrentTime"];static get MessageTypes(){return this.#h}get messageTypes(){return ae.MessageTypes}static#l=[...this.#h];static get EventTypes(){return this.#l}get eventTypes(){return ae.#l}eventDispatcher;#u(e){this.eventDispatcher.dispatchEvent(e)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#Ze;get isCharging(){return this.#Ze}updateIsCharging(e){ie.assertTypeWithError(e,"boolean"),this.#Ze=e,ie.log({isCharging:this.#Ze}),this.#u({type:"isCharging",message:{isCharging:this.#Ze}})}#Ke;get batteryCurrent(){return this.#Ke}async getBatteryCurrent(){ie.log("getting battery current...");const e=this.waitForEvent("getBatteryCurrent");this.sendMessage([{type:"getBatteryCurrent"}]),await e}updateBatteryCurrent(e){ie.assertTypeWithError(e,"number"),this.#Ke=e,ie.log({batteryCurrent:this.#Ke}),this.#u({type:"getBatteryCurrent",message:{batteryCurrent:this.#Ke}})}#Xe;get id(){return this.#Xe}updateId(e){ie.assertTypeWithError(e,"string"),this.#Xe=e,ie.log({id:this.#Xe}),this.#u({type:"getId",message:{id:this.#Xe}})}#Ee;get name(){return this.#Ee}updateName(e){ie.assertTypeWithError(e,"string"),this.#Ee=e,ie.log({updatedName:this.#Ee}),this.#u({type:"getName",message:{name:this.#Ee}})}static get MinNameLength(){return 2}get minNameLength(){return ae.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return ae.MaxNameLength}async setName(e){ie.assertTypeWithError(e,"string"),ie.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ie.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=I.encode(e);ie.log({setNameData:t});const s=this.waitForEvent("getName");this.sendMessage([{type:"setName",data:t.buffer}]),await s}static#d=["leftInsole","rightInsole"];static get Types(){return this.#d}get#Ye(){return ae.Types}#M;get type(){return this.#M}get typeEnum(){return ae.Types.indexOf(this.type)}#et(e){ie.assertEnumWithError(e,this.#Ye)}#tt(e){ie.assertTypeWithError(e,"number"),ie.assertWithError(this.#Ye[e],`invalid typeEnum ${e}`)}updateType(e){this.#et(e),e!=this.type?(this.#M=e,ie.log({updatedType:this.#M}),this.#u({type:"getType",message:{type:this.#M}})):ie.log("redundant type assignment")}async#st(e){this.#tt(e);const t=Uint8Array.from([e]);ie.log({setTypeData:t});const s=this.waitForEvent("getType");this.sendMessage([{type:"setType",data:t.buffer}]),await s}async setType(e){this.#et(e);const t=this.#Ye.indexOf(e);this.#st(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#nt=["left","right"];static get InsoleSides(){return this.#nt}get insoleSides(){return ae.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}#it=0;get mtu(){return this.#it}#at(e){ie.assertTypeWithError(e,"number"),this.#it!=e?(this.#it=e,this.#u({type:"getMtu",message:{mtu:this.#it}})):ie.log("redundant mtu assignment",e)}#rt=!1;get isCurrentTimeSet(){return this.#rt}#ot(e){ie.log({currentTime:e}),this.#rt=0!=e,this.#rt||this.#ct()}async#ct(){ie.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0);const t=this.waitForEvent("getCurrentTime");this.sendMessage([{type:"setCurrentTime",data:e.buffer}]),await t}parseMessage(e,t){switch(ie.log({messageType:e}),e){case"isCharging":const s=Boolean(t.getUint8(0));ie.log({isCharging:s}),this.updateIsCharging(s);break;case"getBatteryCurrent":const n=t.getFloat32(0,!0);ie.log({batteryCurrent:n}),this.updateBatteryCurrent(n);break;case"getId":const i=k.decode(t);ie.log({id:i}),this.updateId(i);break;case"getName":case"setName":const a=k.decode(t);ie.log({name:a}),this.updateName(a);break;case"getType":case"setType":const r=t.getUint8(0),o=this.#Ye[r];ie.log({typeEnum:r,type:o}),this.updateType(o);break;case"getMtu":const c=t.getUint16(0,!0);ie.log({mtu:c}),this.#at(c);break;case"getCurrentTime":case"setCurrentTime":const g=Number(t.getBigUint64(0,!0));this.#ot(g);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage;clear(){this.#rt=!1}}const re=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],oe=p("VibrationManager");class ce{static#h=["triggerVibration"];static get MessageTypes(){return this.#h}get messageTypes(){return TfliteManager.MessageTypes}static#gt=["front","rear"];static get Locations(){return this.#gt}get locations(){return ce.Locations}#ht(e){oe.assertTypeWithError(e,"string"),oe.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#lt(e){this.#ut(e),e.forEach((e=>{this.#ht(e)}))}#dt(e){this.#lt(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),oe.log({locationsBitmask:t}),oe.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ut(e){oe.assertWithError(Array.isArray(e),"passed non-array"),oe.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return re}get waveformEffects(){return ce.WaveformEffects}#pt(e){oe.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#ft=1270;static get MaxWaveformEffectSegmentDelay(){return this.#ft}get maxWaveformEffectSegmentDelay(){return ce.MaxWaveformEffectSegmentDelay}#mt(e){if(null!=e.effect){const t=e.effect;this.#pt(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;oe.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),oe.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#vt(t)}}static#yt=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#yt}get maxWaveformEffectSegmentLoopCount(){return ce.MaxWaveformEffectSegmentLoopCount}#vt(e){oe.assertTypeWithError(e,"number"),oe.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),oe.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#St=8;static get MaxNumberOfWaveformEffectSegments(){return this.#St}get maxNumberOfWaveformEffectSegments(){return ce.MaxNumberOfWaveformEffectSegments}#bt(e){this.#ut(e),oe.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#mt(e)}))}static#Tt=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Tt}get maxWaveformEffectSequenceLoopCount(){return ce.MaxWaveformEffectSequenceLoopCount}#wt(e){oe.assertTypeWithError(e,"number"),oe.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),oe.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Et=2550;static get MaxWaveformSegmentDuration(){return this.#Et}get maxWaveformSegmentDuration(){return ce.MaxWaveformSegmentDuration}#Mt(e){oe.assertTypeWithError(e.amplitude,"number"),oe.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),oe.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),oe.assertTypeWithError(e.duration,"number"),oe.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),oe.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Dt=20;static get MaxNumberOfWaveformSegments(){return this.#Dt}get maxNumberOfWaveformSegments(){return ce.MaxNumberOfWaveformSegments}#Ct(e){this.#ut(e),oe.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Mt(e)}))}#It(e,t,s=0){this.#bt(t),this.#wt(s);let n=[],i=0;const a=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const r=0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const a=e%4*2;n[i]|=s<<a,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return oe.log({dataArray:n,dataView:o}),this.#de(e,"waveformEffect",o)}#kt(e,t){this.#Ct(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),oe.log({dataView:s}),this.#de(e,"waveform",s)}static#d=["waveformEffect","waveform"];static get Types(){return this.#d}get#Ye(){return ce.Types}#Lt(e){oe.assertTypeWithError(e,"string"),oe.assertWithError(this.#Ye.includes(e),`invalid vibrationType "${e}"`)}#de(e,t,s){oe.assertWithError(s?.byteLength>0,"no data received");const n=this.#dt(e);this.#Lt(t);const i=this.#Ye.indexOf(t);oe.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const a=W(n,i,s.byteLength,s);return oe.log({data:a}),a}async triggerVibration(e,t){let s;e.forEach((e=>{const{type:t}=e;let n,{locations:i}=e;switch(i=i||this.locations.slice(),t){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:a}=t;n=this.#It(i,s,a)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#kt(i,s)}break;default:throw Error(`invalid vibration type "${t}"`)}oe.log({type:t,dataView:n}),s=W(s,n)})),await this.sendMessage([{type:"triggerVibration",data:s}],t)}sendMessage}const ge=p("BaseConnectionManager",{log:!0});class he{static#Wt=[...ae.MessageTypes,...Y.MessageTypes,...K.MessageTypes,...ce.MessageTypes,...te.MessageTypes,..._.MessageTypes];static get TxRxMessageTypes(){return this.#Wt}static#h=[...ne.MessageTypes,"batteryLevel","smp","rx","tx",...this.TxRxMessageTypes];static get MessageTypes(){return this.#h}static#xt(e){ge.assertEnumWithError(e,this.#Wt)}get bluetoothId(){this.#Rt("bluetoothId")}onStatusUpdated;onMessageReceived;static#Ut(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#Rt(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#Ut("type")}get type(){return this.constructor.type}#Ft(){ge.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#_t(){ge.assertWithError(this.constructor!=he,`${this.constructor.name} must be subclassed`)}constructor(){this.#_t(),this.#Ft()}static get#m(){return["not connected","connecting","connected","disconnecting"]}static get Statuses(){return this.#m}get#At(){return he.#m}#O="not connected";get status(){return this.#O}set status(e){ge.assertEnumWithError(e,this.#At),this.#O!=e?(ge.log(`new connection status "${e}"`),this.#O=e,this.onStatusUpdated?.(this.status),this.isConnected?this.#Ot.start():this.#Ot.stop(),"not connected"==this.#O&&(this.#it=null)):ge.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#Nt(){ge.assertWithError(!this.isConnected,"device is already connected")}#$t(){ge.assertWithError("connecting"!=this.status,"device is already connecting")}#Vt(){ge.assertWithError(this.isConnected,"device is not connected")}#Bt(){ge.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Pt(){this.#Vt(),this.#Bt()}async connect(){this.#Nt(),this.#$t(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#Nt(),this.#$t(),ge.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#Vt(),this.#Bt(),this.status="disconnecting",ge.log("disconnecting from device...")}async sendSmpMessage(e){this.#Pt(),ge.log("sending smp message",e)}#zt=[];async sendTxMessages(e,t=!0){if(this.#Pt(),e&&this.#zt.push(...e),!t)return;ge.log("sendTxMessages",this.#zt.slice());const s=this.#zt.map((e=>{he.#xt(e.type);const t=he.TxRxMessageTypes.indexOf(e.type),s=new DataView(new ArrayBuffer(2));return s.setUint16(0,e.data?.byteLength||0,!0),W(t,s,e.data)}));if(this.#it)for(;s.length>0;){let e=0,t=0;s.some((s=>{if(e+s.byteLength>this.#it-3)return!0;t++,e+=s.byteLength}));const n=s.splice(0,t);ge.log({arrayBufferCount:t,arrayBuffersToSend:n});const i=W(...n);ge.log("sending arrayBuffer",i),await this.sendTxData(i)}else{const e=W(...s);ge.log("sending arrayBuffer",e),await this.sendTxData(e)}this.#zt.length=0}#it;get mtu(){return this.#it}set mtu(e){this.#it=e}async sendTxData(e){ge.log("sendTxData",e)}parseRxMessage(e){J(e,he.#Wt,this.#qt.bind(this),null,!0)}#qt(e,t){ge.log({messageType:e,dataView:t}),this.onMessageReceived?.(e,t)}#Ot=new T(this.#jt.bind(this),5e3);#jt(){this.isConnected||(ge.log("timer detected disconnection"),this.status="not connected")}}const le=p("bluetoothUUIDs",{log:!1});if(s)var ue=window.BluetoothUUID;function de(e){return le.assertTypeWithError(e,"string"),le.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function pe(e){return ue?.getCharacteristic?.(e)}function fe(e){return ue?.getService?.(e)}const me=Object.freeze({services:{deviceInformation:{uuid:fe("device_information"),characteristics:{manufacturerName:{uuid:pe("manufacturer_name_string")},modelNumber:{uuid:pe("model_number_string")},hardwareRevision:{uuid:pe("hardware_revision_string")},firmwareRevision:{uuid:pe("firmware_revision_string")},softwareRevision:{uuid:pe("software_revision_string")},pnpId:{uuid:pe("pnp_id")},serialNumber:{uuid:pe("serial_number_string")}}},battery:{uuid:fe("battery_service"),characteristics:{batteryLevel:{uuid:pe("battery_level")}}},main:{uuid:de("0000"),characteristics:{rx:{uuid:de("1000")},tx:{uuid:de("1001")}}},smp:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{smp:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.smp.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),ve=me.serviceUUIDs,ye=me.optionalServiceUUIDs;const Se=[],be=[];function Te(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"rx":case"tx":case"smp":t.read=!1}switch(e){case"batteryLevel":case"rx":case"smp":t.notify=!0}switch(e){case"tx":case"smp":t.writeWithoutResponse=!0}return t}Object.entries(me.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{ve.includes(t.uuid)&&Se.push(s.uuid),be.push(s.uuid)}))}),[]);const we=p("BluetoothConnectionManager",{log:!0});class Ee extends he{onCharacteristicValueChanged(e,t){"rx"==e?this.parseRxMessage(t):this.onMessageReceived?.(e,t)}async writeCharacteristic(e,t){we.log("writeCharacteristic",...arguments)}async sendSmpMessage(e){super.sendSmpMessage(...arguments),await this.writeCharacteristic("smp",e)}async sendTxData(e){super.sendTxData(...arguments),await this.writeCharacteristic("tx",e)}}const Me=p("WebBluetoothConnectionManager",{log:!0});if(s)var De=window.navigator;class Ce extends Ee{get bluetoothId(){return this.device?.id}#Ht={characteristicvaluechanged:this.#Gt.bind(this)};#Qt={gattserverdisconnected:this.#Jt.bind(this)};static get isSupported(){return"bluetooth"in De}static get type(){return"webBluetooth"}#Zt;get device(){return this.#Zt}set device(e){this.#Zt!=e?(this.#Zt&&S(this.#Zt,this.#Qt),e&&y(e,this.#Qt),this.#Zt=e):Me.log("tried to assign the same BluetoothDevice")}get server(){return this.#Zt?.gatt}get isConnected(){return this.server?.connected}#Kt=new Map;#Xt=new Map;async connect(){await super.connect();try{const e=await De.bluetooth.requestDevice({filters:[{services:ve}],optionalServices:s?ye:[]});Me.log("got BluetoothDevice"),this.device=e,Me.log("connecting to device...");const t=await this.device.gatt.connect();Me.log(`connected to device? ${t.connected}`),await this.#Yt(),Me.log("fully connected"),this.status="connected"}catch(e){Me.error(e),this.status="not connected",this.server?.disconnect(),this.#es()}}async#Yt(){this.#es(),Me.log("getting services...");const e=await this.server.getPrimaryServices();Me.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),Me.log("getting characteristics...");for(const n in e){const r=e[n];Me.log({service:r});const o=(s=r.uuid,me.getServiceNameFromUUID(s));Me.assertWithError(o,`no name found for service uuid "${r.uuid}"`),Me.log(`got "${o}" service`),r._name=o,this.#Kt.set(o,r),Me.log(`getting characteristics for "${o}" service`);const c=await r.getCharacteristics();Me.log(`got characteristics for "${o}" service`);for(const e in c){const s=c[e];Me.log({characteristic:s});const n=(t=s.uuid,me.getCharacteristicNameFromUUID(t));Me.assertWithError(n,`no name found for characteristic uuid "${s.uuid}" in "${o}" service`),Me.log(`got "${n}" characteristic in "${o}" service`),s._name=n,this.#Xt.set(n,s),y(s,this.#Ht);const r=s.properties||Te(n);r.notify&&(Me.log(`starting notifications for "${n}" characteristic`),await s.startNotifications()),r.read&&(Me.log(`reading "${n}" characteristic...`),await s.readValue(),(i||a)&&this.#ts(s))}}var t,s}#es(){this.device&&S(this.device,this.#Qt),this.#Xt.forEach((e=>{S(e,this.#Ht)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#es(),this.status="not connected"}#Gt(e){Me.log("oncharacteristicvaluechanged");const t=e.target;this.#ts(t)}#ts(e){Me.log("onCharacteristicValue");const t=e._name;Me.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),Me.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;Me.assertWithError(s,`no data found for "${t}" characteristic`),Me.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer)));try{this.onCharacteristicValueChanged(t,s)}catch(e){Me.error(e)}}async writeCharacteristic(e,t){super.writeCharacteristic(...arguments);const s=this.#Xt.get(e);Me.assertWithError(s,`${e} characteristic not found`),Me.log("writing characteristic",s,t);const n=s.properties||Te(e);n.writeWithoutResponse?(Me.log("writing without response"),await s.writeValueWithoutResponse(t)):(Me.log("writing with response"),await s.writeValueWithResponse(t)),Me.log("wrote characteristic"),n.read&&!n.notify&&(Me.log("reading value after write..."),await s.readValue(),(i||a)&&this.#ts(s))}#Jt(e){Me.log("gattserverdisconnected"),this.status="not connected"}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),Me.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(Me.log("successfully reconnected!"),await this.#Yt(),this.status="connected"):(Me.log("unable to reconnect"),this.status="not connected")}}const Ie=4294967296,ke=9007199254740992;const Le={encode:function(e){let t,s=new ArrayBuffer(256),n=new DataView(s),i=0;function a(e){let a=s.byteLength;const r=i+e;for(;a<r;)a<<=1;if(a!==s.byteLength){const e=n;s=new ArrayBuffer(a),n=new DataView(s);const t=i+3>>2;for(let s=0;s<t;++s)n.setUint32(s<<2,e.getUint32(s<<2))}return t=e,n}function r(){i+=t}function o(e){r(a(1).setUint8(i,e))}function c(e){const t=a(e.length);for(let s=0;s<e.length;++s)t.setUint8(i+s,e[s]);r()}function g(e,t){t<24?o(e<<5|t):t<256?(o(e<<5|24),o(t)):t<65536?(o(e<<5|25),function(e){r(a(2).setUint16(i,e))}(t)):t<4294967296?(o(e<<5|26),function(e){r(a(4).setUint32(i,e))}(t)):(o(e<<5|27),function(e){const t=e%Ie,s=(e-t)/Ie,n=a(8);n.setUint32(i,s),n.setUint32(i+4,t),r()}(t))}if(function e(t){let s;const n=[];let h;if(!1===t)return o(244);if(!0===t)return o(245);if(null===t)return o(246);if(void 0===t)return o(247);switch(typeof t){case"number":if(Math.floor(t)===t){if(t>=0&&t<=ke)return g(0,t);if(-ke<=t&&t<0)return g(1,-(t+1))}return o(251),function(e){r(a(8).setFloat64(i,e))}(t);case"string":for(s=0;s<t.length;++s){let e=t.charCodeAt(s);e<128?n.push(e):e<2048?(n.push(192|e>>6),n.push(128|63&e)):e<55296?(n.push(224|e>>12),n.push(128|e>>6&63),n.push(128|63&e)):(e=(1023&e)<<10,e|=1023&t.charCodeAt(++s),e+=65536,n.push(240|e>>18),n.push(128|e>>12&63),n.push(128|e>>6&63),n.push(128|63&e))}return g(3,n.length),c(n);default:if(Array.isArray(t))for(h=t.length,g(4,h),s=0;s<h;++s)e(t[s]);else if(t instanceof Uint8Array)g(2,t.length),c(t);else{const n=Object.keys(t);for(h=n.length,g(5,h),s=0;s<h;++s){const i=n[s];e(i),e(t[i])}}}}(e),"slice"in s)return s.slice(0,i);const h=new ArrayBuffer(i),l=new DataView(h);for(let e=0;e<i;++e)l.setUint8(e,n.getUint8(e));return h},decode:function(e,t,s){const n=new DataView(e);let i=0;function a(e,t){return i+=e,t}function r(t){return a(t,new Uint8Array(e,i,t))}function o(){return a(1,n.getUint8(i))}function c(){return a(2,n.getUint16(i))}function g(){return a(4,n.getUint32(i))}function h(){return 255===n.getUint8(i)&&(i+=1,!0)}function l(e){if(e<24)return e;if(24===e)return o();if(25===e)return c();if(26===e)return g();if(27===e)return g()*Ie+g();if(31===e)return-1;throw new Error("Invalid length encoding")}function u(e){const t=o();if(255===t)return-1;const s=l(31&t);if(s<0||t>>5!==e)throw new Error("Invalid indefinite length element");return s}function d(e,t){for(let s=0;s<t;++s){let s=o();128&s&&(s<224?(s=(31&s)<<6|63&o(),t-=1):s<240?(s=(15&s)<<12|(63&o())<<6|63&o(),t-=2):(s=(15&s)<<18|(63&o())<<12|(63&o())<<6|63&o(),t-=3)),s<65536?e.push(s):(s-=65536,e.push(55296|s>>10),e.push(56320|1023&s))}}"function"!=typeof t&&(t=function(e){return e}),"function"!=typeof s&&(s=function(){});const p=function e(){const g=o(),p=g>>5,f=31&g;let m,v;if(7===p)switch(f){case 25:return function(){const e=new ArrayBuffer(4),t=new DataView(e),s=c(),n=32768&s;let i=31744&s;const a=1023&s;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==a)return(n?-1:1)*a*5.960464477539063e-8;return t.setUint32(0,n<<16|i<<13|a<<13),t.getFloat32(0)}();case 26:return a(4,n.getFloat32(i));case 27:return a(8,n.getFloat64(i))}if(v=l(f),v<0&&(p<2||p>6))throw new Error("Invalid length");const y=[];let S;const b={};switch(p){case 0:return v;case 1:return-1-v;case 2:if(v<0){const e=[];let t=0;for(;(v=u(p))>=0;)t+=v,e.push(r(v));const s=new Uint8Array(t);let n=0;for(m=0;m<e.length;++m)s.set(e[m],n),n+=e[m].length;return s}return r(v);case 3:if(v<0)for(;(v=u(p))>=0;)d(y,v);else d(y,v);return String.fromCharCode.apply(null,y);case 4:if(v<0)for(S=[];!h();)S.push(e());else for(S=new Array(v),m=0;m<v;++m)S[m]=e();return S;case 5:for(m=0;m<v||v<0&&!h();++m){b[e()]=e()}return b;case 6:return t(e(),v);case 7:switch(v){case 20:return!1;case 21:return!0;case 22:return null;case 23:return;default:return s(v)}}}();if(i!==e.byteLength)throw new Error("Remaining bytes");return p}},We=p("mcumgr",{log:!0}),xe=0,Re=1,Ue=2,Fe=3,_e=0,Ae=1,Oe=8,Ne=0,$e=2,Ve=3,Be=5,Pe=0,ze=1,qe=5,je=0;class He{constructor(){this._mtu=256,this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}onMessage(e){return this._messageCallback=e,this}onImageUploadNext(e){return this._imageUploadNextCallback=e,this}onImageUploadProgress(e){return this._imageUploadProgressCallback=e,this}onImageUploadFinished(e){return this._imageUploadFinishedCallback=e,this}onFileUploadNext(e){return this._fileUploadNextCallback=e,this}onFileUploadProgress(e){return this._fileUploadProgressCallback=e,this}onFileUploadFinished(e){return this._fileUploadFinishedCallback=e,this}onFileDownloadNext(e){return this._fileDownloadNextCallback=e,this}onFileDownloadProgress(e){return this._fileDownloadProgressCallback=e,this}onFileDownloadFinished(e){return this._fileDownloadFinishedCallback=e,this}_getMessage(e,t,s,n){let i=[];void 0!==n&&(i=[...new Uint8Array(Le.encode(n))]);const a=255&i.length,r=[e,0,i.length>>8,a,t>>8,255&t,this._seq,s,...i];return this._seq=(this._seq+1)%256,r}_notification(e){We.log("mcumgr - message received");const t=new Uint8Array(e);this._buffer=new Uint8Array([...this._buffer,...t]);const s=256*this._buffer[2]+this._buffer[3];this._buffer.length<s+8||(this._processMessage(this._buffer.slice(0,s+8)),this._buffer=this._buffer.slice(s+8))}_processMessage(e){const[t,,s,n,i,a,,r]=e,o=Le.decode(e.slice(8).buffer),c=256*s+n,g=256*i+a;return We.log("mcumgr - Process Message - Group: "+g+", Id: "+r+", Off: "+o.off),g===Ae&&r===ze&&o.off?(this._uploadOffset=o.off,void this._uploadNext()):t===Fe&&g===Oe&&r===je&&o.off?(this._uploadFileOffset=o.off,void this._uploadFileNext()):t===Re&&g===Oe&&r===je?(this._downloadFileOffset+=o.data.length,null!=o.len&&(this._downloadFileLength=o.len),We.log("downloaded "+this._downloadFileOffset+" bytes of "+this._downloadFileLength),this._downloadFileLength>0&&this._fileDownloadProgressCallback({percentage:Math.floor(this._downloadFileOffset/this._downloadFileLength*100)}),this._messageCallback&&this._messageCallback({op:t,group:g,id:r,data:o,length:c}),void this._downloadFileNext()):void(this._messageCallback&&this._messageCallback({op:t,group:g,id:r,data:o,length:c}))}cmdReset(){return this._getMessage(Ue,_e,Be)}smpEcho(e){return this._getMessage(Ue,_e,Ne,{d:e})}cmdImageState(){return this._getMessage(xe,Ae,Pe)}cmdImageErase(){return this._getMessage(Ue,Ae,qe,{})}cmdImageTest(e){return this._getMessage(Ue,Ae,Pe,{hash:e,confirm:!1})}cmdImageConfirm(e){return this._getMessage(Ue,Ae,Pe,{hash:e,confirm:!0})}_hash(e){return crypto.subtle.digest("SHA-256",e)}async _uploadNext(){if(!this._uploadImage)return;if(this._uploadOffset>=this._uploadImage.byteLength)return this._uploadIsInProgress=!1,void this._imageUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadOffset};0===this._uploadOffset&&(e.len=this._uploadImage.byteLength,e.sha=new Uint8Array(await this._hash(this._uploadImage))),this._imageUploadProgressCallback({percentage:Math.floor(this._uploadOffset/this._uploadImage.byteLength*100)});const t=this._mtu-Le.encode(e).byteLength-8-3-5;e.data=new Uint8Array(this._uploadImage.slice(this._uploadOffset,this._uploadOffset+t)),this._uploadOffset+=t;const s=this._getMessage(Ue,Ae,ze,e);We.log("mcumgr - _uploadNext: Message Length: "+s.length),this._imageUploadNextCallback({packet:s})}async reset(){this._messageCallback=null,this._imageUploadProgressCallback=null,this._imageUploadNextCallback=null,this._fileUploadProgressCallback=null,this._fileUploadNextCallback=null,this._uploadIsInProgress=!1,this._downloadIsInProgress=!1,this._buffer=new Uint8Array,this._seq=0}async cmdUpload(e,t=0){this._uploadIsInProgress?We.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadOffset=0,this._uploadImage=e,this._uploadSlot=t,this._uploadNext())}async cmdUploadFile(e,t){this._uploadIsInProgress?We.error("Upload is already in progress."):(this._uploadIsInProgress=!0,this._uploadFileOffset=0,this._uploadFile=e,this._uploadFilename=t,this._uploadFileNext())}async _uploadFileNext(){if(We.log("uploadFileNext - offset: "+this._uploadFileOffset+", length: "+this._uploadFile.byteLength),this._uploadFileOffset>=this._uploadFile.byteLength)return this._uploadIsInProgress=!1,void this._fileUploadFinishedCallback();const e={data:new Uint8Array,off:this._uploadFileOffset};0===this._uploadFileOffset&&(e.len=this._uploadFile.byteLength),e.name=this._uploadFilename,this._fileUploadProgressCallback({percentage:Math.floor(this._uploadFileOffset/this._uploadFile.byteLength*100)});const t=this._mtu-Le.encode(e).byteLength-8;e.data=new Uint8Array(this._uploadFile.slice(this._uploadFileOffset,this._uploadFileOffset+t)),this._uploadFileOffset+=t;const s=this._getMessage(Ue,Oe,je,e);We.log("mcumgr - _uploadNext: Message Length: "+s.length),this._fileUploadNextCallback({packet:s})}async cmdDownloadFile(e,t){this._downloadIsInProgress?We.error("Download is already in progress."):(this._downloadIsInProgress=!0,this._downloadFileOffset=0,this._downloadFileLength=0,this._downloadRemoteFilename=e,this._downloadLocalFilename=t,this._downloadFileNext())}async _downloadFileNext(){if(this._downloadFileLength>0&&this._downloadFileOffset>=this._downloadFileLength)return this._downloadIsInProgress=!1,void this._fileDownloadFinishedCallback();const e={off:this._downloadFileOffset};0===this._downloadFileOffset&&(e.name=this._downloadRemoteFilename);const t=this._getMessage(xe,Oe,je,e);We.log("mcumgr - _downloadNext: Message Length: "+t.length),this._fileDownloadNextCallback({packet:t})}async imageInfo(e){const t={},s=new Uint8Array(e);if(s.length<32)throw new Error("Invalid image (too short file)");if(61!==s[0]||184!==s[1]||243!==s[2]||150!==s[3])throw new Error("Invalid image (wrong magic bytes)");if(0!==s[4]||0!==s[5]||0!==s[6]||0!==s[7])throw new Error("Invalid image (wrong load address)");const n=s[8]+256*s[9];if(0!==s[10]||0!==s[11])throw new Error("Invalid image (wrong protected TLV area size)");const i=s[12]+256*s[13]+65536*s[14]+s[15]*2**24;if(t.imageSize=i,s.length<i+n)throw new Error("Invalid image (wrong image size)");if(0!==s[16]||0!==s[17]||0!==s[18]||0!==s[19])throw new Error("Invalid image (wrong flags)");const a=`${s[20]}.${s[21]}.${s[22]+256*s[23]}`;return t.version=a,t.hash=[...new Uint8Array(await this._hash(e.slice(0,i+32)))].map((e=>e.toString(16).padStart(2,"0"))).join(""),t}}const Ge=p("FirmwareManager",{log:!0});class Qe{sendMessage;constructor(){this.#ss()}static#h=["smp"];static get MessageTypes(){return this.#h}get messageTypes(){return Qe.MessageTypes}static#l=[...this.#h,"firmwareImages","firmwareUploadProgress","firmwareUploadComplete","firmwareStatus"];static get EventTypes(){return this.#l}get eventTypes(){return Qe.#l}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#u(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}parseMessage(e,t){if(Ge.log({messageType:e}),"smp"!==e)throw Error(`uncaught messageType ${e}`);this.#ns._notification(Array.from(new Uint8Array(t.buffer))),this.#u({type:"smp"})}async uploadFirmware(e){Ge.log("uploadFirmware",e);const t=this.waitForEvent("firmwareUploadComplete");await this.getImages();const s=await U(e),n=await this.#ns.imageInfo(s);Ge.log({imageInfo:n}),this.#ns.cmdUpload(s,1),this.#$("uploading"),await t}static#m=["idle","uploading","uploaded","pending","testing","erasing"];static get Statuses(){return this.#m}#O="idle";get status(){return this.#O}#$(e){Ge.assertEnumWithError(e,Qe.Statuses),this.#O!=e?(this.#O=e,Ge.log({firmwareStatus:this.#O}),this.#u({type:"firmwareStatus",message:{firmwareStatus:this.#O}})):Ge.log(`redundant firmwareStatus assignment "${e}"`)}#is;get images(){return this.#is}#as(){Ge.assertWithError(this.#is,"didn't get imageState")}#rs(e){Ge.assertTypeWithError(e,"number"),Ge.assertWithError(0==e||1==e,"imageIndex must be 0 or 1")}async getImages(){const e=this.waitForEvent("firmwareImages");Ge.log("getting firmware image state..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageState()).buffer),await e}async testImage(e=1){if(this.#rs(e),this.#as(),!this.#is[e])return void Ge.log(`image ${e} not found`);if(1==this.#is[e].pending)return void Ge.log(`image ${e} is already pending`);if(this.#is[e].empty)return void Ge.log(`image ${e} is empty`);const t=this.waitForEvent("smp");Ge.log("testing firmware image..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageTest(this.#is[e].hash)).buffer),await t}async eraseImage(){this.#as();const e=this.waitForEvent("smp");Ge.log("erasing image..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageErase()).buffer),this.#$("erasing"),await e,await this.getImages()}async confirmImage(e=0){if(this.#rs(e),this.#as(),!0===this.#is[e].confirmed)return void Ge.log(`image ${e} is already confirmed`);const t=this.waitForEvent("smp");Ge.log("confirming image..."),this.sendMessage(Uint8Array.from(this.#ns.cmdImageConfirm(this.#is[e].hash)).buffer),await t}async echo(e){Ge.assertTypeWithError(e,"string");const t=this.waitForEvent("smp");Ge.log("sending echo..."),this.sendMessage(Uint8Array.from(this.#ns.smpEcho(e)).buffer),await t}async reset(){const e=this.waitForEvent("smp");Ge.log("resetting..."),this.sendMessage(Uint8Array.from(this.#ns.cmdReset()).buffer),await e}#it;get mtu(){return this.#it}set mtu(e){this.#it=e,this.#ns._mtu=this.#it}#ns=new He;#ss(){this.#ns.onMessage(this.#os.bind(this)),this.#ns.onFileDownloadNext(this.#cs),this.#ns.onFileDownloadProgress(this.#gs.bind(this)),this.#ns.onFileDownloadFinished(this.#hs.bind(this)),this.#ns.onFileUploadNext(this.#ls.bind(this)),this.#ns.onFileUploadProgress(this.#us.bind(this)),this.#ns.onFileUploadFinished(this.#ds.bind(this)),this.#ns.onImageUploadNext(this.#ps.bind(this)),this.#ns.onImageUploadProgress(this.#fs.bind(this)),this.#ns.onImageUploadFinished(this.#ms.bind(this))}#os({op:e,group:t,id:s,data:n,length:i}){switch(Ge.log("onMcuMessage",...arguments),t){case _e:switch(s){case Ne:Ge.log(`echo "${n.r}"`);break;case $e:Ge.table(n.tasks);break;case Ve:Ge.log(n)}break;case Ae:if(s===Pe)this.#vs(n);break;default:throw Error(`uncaught mcuMessage group ${t}`)}}#cs(){Ge.log("onMcuFileDownloadNext",...arguments)}#gs(){Ge.log("onMcuFileDownloadProgress",...arguments)}#hs(){Ge.log("onMcuFileDownloadFinished",...arguments)}#ls(){Ge.log("onMcuFileUploadNext",...arguments)}#us(){Ge.log("onMcuFileUploadProgress",...arguments)}#ds(){Ge.log("onMcuFileUploadFinished",...arguments)}#ps({packet:e}){Ge.log("onMcuImageUploadNext",...arguments),this.sendMessage(Uint8Array.from(e).buffer)}#fs({percentage:e}){const t=e/100;Ge.log("onMcuImageUploadProgress",...arguments),this.#u({type:"firmwareUploadProgress",message:{firmwareUploadProgress:t}})}async#ms(){Ge.log("onMcuImageUploadFinished",...arguments),await this.getImages(),this.#u({type:"firmwareUploadProgress",message:{firmwareUploadProgress:100}}),this.#u({type:"firmwareUploadComplete"})}#vs(e){if(!e.images)return void Ge.log("no images found");this.#is=e.images,Ge.log("images",this.#is);let t="idle";2==this.#is.length&&(this.#is[1].bootable?this.#is[0].confirmed?this.#is[1].pending?(Ge.log("reset to upload to the new firmware image"),t="pending"):(Ge.log("Slot 1 has a valid image. run testImage() to test it or upload a different image."),t="uploaded"):(Ge.log('Slot 0 has a valid image. Click "Confirm Image" to confirm it or wait and the device will swap images back.'),t="testing"):Ge.warn('Slot 1 has a invalid image. Click "Erase Image" to erase it or upload a different image')),1==this.#is.length&&(this.#is.push({slot:1,empty:!0,version:"Empty",pending:!1,confirmed:!1,bootable:!1}),Ge.log("Select a firmware upload image to upload to slot 1.")),this.#$(t),this.#u({type:"firmwareImages",message:{firmwareImages:this.#is}})}}const Je=p("Device",{log:!0});class Ze{get bluetoothId(){return this.#ys?.bluetoothId}constructor(){this.#Ss.eventDispatcher=this.#bs,this.#Ts.sendMessage=this.#ws.bind(this),this.#Ts.eventDispatcher=this.#bs,this.#Es.sendMessage=this.#ws.bind(this),this.#Es.eventDispatcher=this.#bs,this.#Ms.sendMessage=this.#ws.bind(this),this.#Ms.eventDispatcher=this.#bs,this.#Ds.sendMessage=this.#ws.bind(this),this.#Cs.sendMessage=this.#ws.bind(this),this.#Cs.eventDispatcher=this.#bs,this.#Is.sendMessage=this.#ws.bind(this),this.#Is.eventDispatcher=this.#bs,this.#ks.sendMessage=this.#Ls.bind(this),this.#ks.eventDispatcher=this.#bs,this.addEventListener("getMtu",(()=>{this.#ks.mtu=this.mtu,this.#Is.mtu=this.mtu,this.connectionManager.mtu=this.mtu})),this.addEventListener("getType",(()=>{Ze.#Ws&&Ze.#xs(this)})),s&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),n&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{Ze.#Rs(this)}))}static get#Us(){return Ce}static#l=["batteryLevel","connectionStatus",...he.Statuses,"isConnected","connectionMessage",...ne.EventTypes,...ae.EventTypes,...Y.EventTypes,...K.EventTypes,..._.EventTypes,...te.EventTypes,...Qe.EventTypes];static get EventTypes(){return this.#l}get eventTypes(){return Ze.#l}#bs=new v(this,this.eventTypes);addEventListener(e,t,s){this.#bs.addEventListener(e,t,s)}#u(e){this.#bs.dispatchEvent(e)}removeEventListener(e,t){return this.#bs.removeEventListener(e,t)}waitForEvent(e){return this.#bs.waitForEvent(e)}#ys;get connectionManager(){return this.#ys}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Fs.bind(this),e.onMessageReceived=this.#_s.bind(this)),this.#ys=e,Je.log("assigned new connectionManager",this.#ys)):Je.log("same connectionManager is already assigned")}async#ws(e,t){await(this.#ys?.sendTxMessages(...arguments))}async connect(){return this.connectionManager||(this.connectionManager=new Ze.#Us),this.#As(),this.connectionManager.connect()}#Os=!1;get isConnected(){return this.#Os}#Vt(){Je.assertWithError(this.isConnected,"not connected")}static#Ns=["isCharging","getBatteryCurrent","getId","getMtu","getName","getType","getCurrentTime","getSensorConfiguration","getSensorScalars","getPressurePositions","maxFileLength","getFileLength","getFileChecksum","getFileTransferType","fileTransferStatus","getTfliteName","getTfliteTask","getTfliteSampleRate","getTfliteSensorTypes","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled"];get#$s(){return Ze.#Ns}get#Vs(){return this.#$s.every((e=>this.latestConnectionMessage.has(e)))}#Bs(){const e=this.#$s.map((e=>({type:e})));this.#ws(e)}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#As(),this.connectionManager?.reconnect()}static#Ps=!1;static get ReconnectOnDisconnection(){return this.#Ps}static set ReconnectOnDisconnection(e){Je.assertTypeWithError(e,"boolean"),this.#Ps=e}#zs=Ze.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#zs}set reconnectOnDisconnection(e){Je.assertTypeWithError(e,"boolean"),this.#zs=e}#qs;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#Vt(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#ys?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#ys.status;default:return"not connected"}}#Fs(e){Je.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(Je.log("starting reconnect interval..."),this.#qs=setInterval((()=>{Je.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#qs&&(Je.log("clearing reconnect interval"),clearInterval(this.#qs),this.#qs=void 0),this.#jt(),"connected"!=e||this.#Os||this.#Bs()}#js(e=!1){this.#u({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#u({type:this.connectionStatus}),e&&this.#u({type:"isConnected",message:{isConnected:this.isConnected}})}#jt(){switch(this.#Os=this.connectionManager?.isConnected&&this.#Vs&&this.#Ts.isCurrentTimeSet,this.connectionStatus){case"connected":this.#Os&&this.#js(!0);break;case"not connected":this.#js(!0);break;default:this.#js(!1)}}#As(){this.latestConnectionMessage.clear(),this.#Ts.clear()}#_s(e,t){if(Je.log({messageType:e,dataView:t}),"batteryLevel"===e){const e=t.getUint8(0);Je.log("received battery level",{batteryLevel:e}),this.#Hs(e)}else if(this.#Is.messageTypes.includes(e))this.#Is.parseMessage(e,t);else if(this.#Cs.messageTypes.includes(e))this.#Cs.parseMessage(e,t);else if(this.#Ms.messageTypes.includes(e))this.#Ms.parseMessage(e,t);else if(this.#ks.messageTypes.includes(e))this.#ks.parseMessage(e,t);else if(this.#Ss.messageTypes.includes(e))this.#Ss.parseMessage(e,t);else if(this.#Ts.messageTypes.includes(e))this.#Ts.parseMessage(e,t);else{if(!this.#Es.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Es.parseMessage(e,t)}this.latestConnectionMessage.set(e,t),this.#u({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#Vs&&this.#jt()}latestConnectionMessage=new Map;#Ss=new ne;get deviceInformation(){return this.#Ss.information}#Gs=null;get batteryLevel(){return this.#Gs}#Hs(e){Je.assertTypeWithError(e,"number"),this.#Gs!=e?(this.#Gs=e,Je.log({updatedBatteryLevel:this.#Gs}),this.#u({type:"batteryLevel",message:{batteryLevel:this.#Gs}})):Je.log(`duplicate batteryLevel assignment ${e}`)}#Ts=new ae;get id(){return this.#Ts.id}get isCharging(){return this.#Ts.isCharging}get batteryCurrent(){return this.#Ts.batteryCurrent}async getBatteryCurrent(){await this.#Ts.getBatteryCurrent()}static get MinNameLength(){return ae.MinNameLength}static get MaxNameLength(){return ae.MaxNameLength}get name(){return this.#Ts.name}async setName(e){await this.#Ts.setName(e)}static get Types(){return ae.Types}get type(){return this.#Ts.type}async setType(e){await this.#Ts.setType(e)}static get InsoleSides(){return ae.InsoleSides}get isInsole(){return this.#Ts.isInsole}get insoleSide(){return this.#Ts.insoleSide}get mtu(){return this.#Ts.mtu}static get SensorTypes(){return K.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#Es=new Y;get sensorConfiguration(){return this.#Es.configuration}static get MaxSensorRate(){return Y.MaxSensorRate}static get SensorRateStep(){return Y.SensorRateStep}async setSensorConfiguration(e){await this.#Es.setConfiguration(e)}async clearSensorConfiguration(){return this.#Es.clearSensorConfiguration()}static#Qs=!0;static get ClearSensorConfigurationOnLeave(){return this.#Qs}static set ClearSensorConfigurationOnLeave(e){Je.assertTypeWithError(e,"boolean"),this.#Qs=e}#Js=Ze.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Js}set clearSensorConfigurationOnLeave(e){Je.assertTypeWithError(e,"boolean"),this.#Js=e}static#Zs=8;static get DefaultNumberOfPressureSensors(){return this.#Zs}get numberOfPressureSensors(){return this.#Ms.pressureSensorDataManager.numberOfSensors}#Ms=new K;resetPressureRange(){this.#Ms.pressureSensorDataManager.resetRange()}#Ds=new ce;static get VibrationLocations(){return ce.Locations}static get VibrationTypes(){return ce.Types}static get VibrationWaveformEffects(){return ce.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return ce.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return ce.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return ce.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return ce.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return ce.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return ce.MaxNumberOfWaveformSegments}async triggerVibration(e,t){this.#Ds.triggerVibration(e,t)}#Is=new _;static get FileTypes(){return _.Types}get maxFileLength(){return this.#Is.maxLength}async sendFile(e,t){const s=this.waitForEvent("fileTransferComplete");this.#Is.send(e,t),await s}async receiveFile(e){const t=this.waitForEvent("fileTransferComplete");this.#Is.receive(e),await t}get fileTransferStatus(){return this.#Is.status}cancelFileTransfer(){this.#Is.cancel()}static get TfliteSensorTypes(){return te.SensorTypes}#Cs=new te;get tfliteName(){return this.#Cs.name}setTfliteName(e){return this.#Cs.setName(e)}static get TfliteTasks(){return te.Tasks}get tfliteTask(){return this.#Cs.task}setTfliteTask(e){return this.#Cs.setTask(e)}get tfliteSampleRate(){return this.#Cs.sampleRate}setTfliteSampleRate(e){return this.#Cs.setSampleRate(e)}get tfliteSensorTypes(){return this.#Cs.sensorTypes}get allowedTfliteSensorTypes(){return this.sensorTypes.filter((e=>te.SensorTypes.includes(e)))}setTfliteSensorTypes(e){return this.#Cs.setSensorTypes(e)}get tfliteIsReady(){return this.#Cs.isReady}get tfliteInferencingEnabled(){return this.#Cs.inferencingEnabled}async setTfliteInferencingEnabled(e){return this.#Cs.setInferencingEnabled(e)}async enableTfliteInferencing(){return this.setTfliteInferencingEnabled(!0)}async disableTfliteInferencing(){return this.setTfliteInferencingEnabled(!1)}async toggleTfliteInferencing(){return this.#Cs.toggleInferencingEnabled()}get tfliteCaptureDelay(){return this.#Cs.captureDelay}async setTfliteCaptureDelay(e){return this.#Cs.setCaptureDelay(e)}get tfliteThreshold(){return this.#Cs.threshold}async setTfliteThreshold(e){return this.#Cs.setThreshold(e)}#ks=new Qe;#Ls(e){this.#ys.sendSmpMessage(e)}async uploadFirmware(e){return this.#ks.uploadFirmware(e)}async reset(){return await this.#ks.reset(),this.#ys.disconnect()}get firmwareStatus(){return this.#ks.status}async getFirmwareImages(){return this.#ks.getImages()}get firmwareImages(){return this.#ks.images}async eraseFirmwareImage(){return this.#ks.eraseImage()}async confirmFirmwareImage(e){return this.#ks.confirmImage(e)}async testFirmwareImage(e){return this.#ks.testImage(e)}static#Ks=[];static get ConnectedDevices(){return this.#Ks}static#Ws=!1;static get UseLocalStorage(){return this.#Ws}static set UseLocalStorage(e){this.#Xs(),Je.assertTypeWithError(e,"boolean"),this.#Ws=e,this.#Ws&&!this.#Ys&&this.#en()}static#tn={devices:[]};static#Ys;static get CanUseLocalStorage(){return s&&window.localStorage}static#Xs(){Je.assertWithError(s,"localStorage is only available in the browser"),Je.assertWithError(window.localStorage,"localStorage not found")}static#sn="BS.Device";static#nn(){this.#Xs(),localStorage.setItem(this.#sn,JSON.stringify(this.#Ys))}static async#en(){this.#Xs();let e=localStorage.getItem(this.#sn);if("string"!=typeof e)return Je.log("no info found in localStorage"),this.#Ys=Object.assign({},this.#tn),void this.#nn();try{const t=JSON.parse(e);Je.log({configuration:t}),this.#Ys=t,this.CanGetDevices&&await this.GetDevices()}catch(e){Je.error(e)}}static#xs(e){if("webBluetooth"!=e.connectionType)return void Je.log("localStorage is only for webBluetooth devices");this.#Xs();const t=this.#Ys.devices.findIndex((t=>t.bluetoothId==e.bluetoothId));-1!=t&&(this.#Ys.devices[t].type=e.type,this.#nn())}static#in=[];static get AvailableDevices(){return this.#in}static get CanGetDevices(){return s&&navigator.bluetooth?.getDevices&&!i}static async GetDevices(){if(!s)return void Je.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void Je.warn("bluetooth is not available in this browser");if(i)return void Je.warn("bluefy lists too many devices...");if(!navigator.bluetooth.getDevices)return void Je.warn("bluetooth.getDevices() is not available in this browser");this.#Ys||this.#en();const e=this.#Ys;if(!e.devices||0==e.devices.length)return void Je.log("no devices found in configuration");const t=await navigator.bluetooth.getDevices();return Je.log({bluetoothDevices:t}),t.forEach((t=>{if(!t.gatt)return;let s=e.devices.find((e=>t.id==e.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.bluetoothId==t.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((e=>e.bluetoothId==t.id));if(i)return void(n?.bluetoothId==i.bluetoothId&&n!=i&&(this.AvailableDevices[this.#in.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const a=new Ze,r=new Ce;r.device=t,t.name&&a.#Ts.updateName(t.name),a.#Ts.updateType(s.type),a.connectionManager=r,this.AvailableDevices.push(a)})),this.#an(),this.AvailableDevices}static#rn=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#rn}static#on=new v(this,this.#rn);static AddEventListener(e,t,s){this.#on.addEventListener(e,t,s)}static#cn(e){this.#on.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#on.removeEventListener(e,t)}static#Rs(e){if(e.isConnected)if(this.#Ks.includes(e))Je.log("device already included");else{if(Je.log("adding device",e),this.#Ks.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.bluetoothId},s=this.#Ys.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Ys.devices.push(t):this.#Ys.devices[s]=t,this.#nn()}this.#cn({type:"deviceConnected",message:{device:e}}),this.#cn({type:"deviceIsConnected",message:{device:e}})}else this.#Ks.includes(e)?(Je.log("removing device",e),this.#Ks.splice(this.#Ks.indexOf(e),1),this.#cn({type:"deviceDisconnected",message:{device:e}}),this.#cn({type:"deviceIsConnected",message:{device:e}})):Je.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.bluetoothId==e.bluetoothId));Je.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#an()}}static#an(){Je.log({AvailableDevices:this.AvailableDevices}),this.#cn({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new Ze;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const Ke=p("DevicePairPressureSensorDataManager",{log:!0});class Xe{static get Sides(){return Ze.InsoleSides}get sides(){return Ze.InsoleSides}#gn={};#J=new V;resetPressureRange(){this.#J.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(Ke.log({pressure:t,insoleSide:s}),this.#gn[s]=t,this.#hn)return this.#ln();Ke.log("doesn't have all pressure data yet...")}get#hn(){return this.sides.every((e=>e in this.#gn))}#ln(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#gn[t].rawSum,e.normalizedSum+=this.#gn[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#gn[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#J.updateAndGetNormalization(e.center)),Ke.log({devicePairPressure:e}),e}}const Ye=p("DevicePairSensorDataManager",{log:!0});class et{static get Sides(){return Ze.InsoleSides}get sides(){return Ze.InsoleSides}#un={};pressureSensorDataManager=new Xe;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(Ye.log({sensorType:s,timestamp:t,event:e}),this.#un[s]||(this.#un[s]={}),this.#un[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else Ye.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#un[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else Ye.log("no value received")}onDataReceived}const tt=p("DevicePair",{log:!0});class st{constructor(){this.#Ms.onDataReceived=this.#dn.bind(this)}static#l=["isConnected","pressure",...Ze.EventTypes.map((e=>`device${f(e)}`))];static get EventTypes(){return this.#l}get eventTypes(){return st.#l}#bs=new v(this,this.eventTypes);addEventListener(e,t,s){this.#bs.addEventListener(e,t,s)}#u(e){this.#bs.dispatchEvent(e)}removeEventListener(e,t){return this.#bs.removeEventListener(e,t)}static get Sides(){return Ze.InsoleSides}get sides(){return st.Sides}#pn;get left(){return this.#pn}#fn;get right(){return this.#fn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#Vt(){tt.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void tt.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&S(s,this.#mn),y(e,this.#mn),t){case"left":this.#pn=e;break;case"right":this.#fn=e}return tt.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#u({type:"isConnected",message:{isConnected:this.isConnected}}),this.#u({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}tt.log("device already assigned")}#mn={connectionStatus:this.#vn.bind(this),isConnected:this.#yn.bind(this),sensorData:this.#Sn.bind(this),getSensorConfiguration:this.#vn.bind(this)};#vn(e){this.#u({type:`device${f(e.type)}`,message:{...e.message,device:e.target}})}#yn(e){this.#vn(e),this.#u({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#Ms=new et;#Sn(e){this.#vn(e),this.#u({type:`device${f(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Ms.onDeviceSensorData(e)}#dn(e,t){tt.log({sensorType:e,sensorData:t}),this.#u({type:e,message:t})}resetPressureRange(){this.#Ms.resetPressureRange()}async triggerVibration(e,t){const s=this.sides.map((s=>this[s]?.triggerVibration(e,t))).filter(Boolean);return Promise.allSettled(s)}static#bn=new st;static get shared(){return this.#bn}static{Ze.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#bn.assignInsole(t)}))}}const nt=p("ServerUtils",{log:!1});function it(e,...t){nt.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=W(...t.data),n=s.byteLength;nt.assertEnumWithError(t.type,e);return W(e.indexOf(t.type),Uint16Array.from([n]),s)}));return nt.log("messageBuffers",...s),W(...s)}const at=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function rt(...e){return it(at,...e)}function ot(...e){return it(he.MessageTypes,...e)}rt("ping"),rt("pong"),rt("isScanningAvailable"),rt("isScanning"),rt("startScan"),rt("stopScan");const ct=rt("discoveredDevices"),gt=p("WebSocketClientConnectionManager",{log:!0});class ht extends he{static get isSupported(){return s}static get type(){return"webSocketClient"}#Tn;get bluetoothId(){return this.#Tn}set bluetoothId(e){gt.assertTypeWithError(e,"string"),this.#Tn!=e?this.#Tn=e:gt.log("redundant bluetoothId assignment")}#Os=!1;get isConnected(){return this.#Os}set isConnected(e){gt.assertTypeWithError(e,"boolean"),this.#Os!=e?(this.#Os=e,this.status=this.#Os?"connected":"not connected",this.isConnected&&this.#wn()):gt.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}get canReconnect(){return!0}async reconnect(){await super.reconnect(),gt.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;async sendSmpMessage(e){super.sendSmpMessage(...arguments),this.sendWebSocketMessage({type:"smp",data:e})}async sendTxData(e){super.sendTxData(...arguments),this.sendWebSocketMessage({type:"tx",data:e})}static#En=[...ne.MessageTypes,"batteryLevel"];get#Mn(){return ht.#En}#wn(){this.sendWebSocketMessage(...this.#Mn)}onWebSocketMessage(e){gt.log({dataView:e}),J(e,Ze.EventTypes,this.#Dn.bind(this),null,!0)}#Dn(e,t){let s=0;switch(e){case"isConnected":const n=Boolean(t.getUint8(s++));gt.log({isConnected:n}),this.isConnected=n;break;case"rx":this.parseRxMessage(t);break;default:this.onMessageReceived(e,t)}}}const lt=p("WebSocketClient",{log:!0});class ut{static#l=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#l}get eventTypes(){return ut.#l}#bs=new v(this,this.eventTypes);addEventListener(e,t,s){this.#bs.addEventListener(e,t,s)}#u(e){this.#bs.dispatchEvent(e)}removeEventListener(e,t){return this.#bs.removeEventListener(e,t)}#Cn;get webSocket(){return this.#Cn}set webSocket(e){this.#Cn!=e?(lt.log("assigning webSocket",e),this.#Cn&&S(this.#Cn,this.#In),y(e,this.#In),this.#Cn=e,lt.log("assigned webSocket")):lt.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#kn(){lt.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#Ln(){lt.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#Ln(),this.#Wn="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#kn(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Wn="disconnecting",this.webSocket.close()}reconnect(){this.#Ln(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#Ps=!0;static get ReconnectOnDisconnection(){return this.#Ps}static set ReconnectOnDisconnection(e){lt.assertTypeWithError(e,"boolean"),this.#Ps=e}#zs=ut.#Ps;get reconnectOnDisconnection(){return this.#zs}set reconnectOnDisconnection(e){lt.assertTypeWithError(e,"boolean"),this.#zs=e}#xn(e){this.#kn(),this.#Cn.send(e)}#Rn(...e){this.#xn(rt(...e))}#In={open:this.#Un.bind(this),message:this.#Fn.bind(this),close:this.#_n.bind(this),error:this.#An.bind(this)};#Un(e){lt.log("webSocket.open",e),this.#On.start(),this.#Wn="connected"}async#Fn(e){lt.log("webSocket.message",e),this.#On.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Nn(s)}#_n(e){lt.log("webSocket.close",e),this.#Wn="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#On.stop(),this.#zs&&setTimeout((()=>{this.reconnect()}),3e3)}#An(e){lt.log("webSocket.error",e)}#$n="not connected";get#Wn(){return this.#$n}set#Wn(e){switch(lt.assertTypeWithError(e,"string"),lt.log({newConnectionStatus:e}),this.#$n=e,this.#u({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#u({type:this.connectionStatus}),e){case"connected":case"not connected":this.#u({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#Rn("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Vn=!1,this.#Bn=!1)}}get connectionStatus(){return this.#Wn}#Nn(e){lt.log("parseMessage",{dataView:e}),J(e,at,this.#Pn.bind(this),null,!0)}#Pn(e,t){let s=0;switch(e){case"ping":this.#zn();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(s++));lt.log({isScanningAvailable:e}),this.#Vn=e}break;case"isScanning":{const e=Boolean(t.getUint8(s++));lt.log({isScanning:e}),this.#Bn=e}break;case"discoveredDevice":{const{string:e}=Q(t,s);lt.log({discoveredDeviceString:e});const n=JSON.parse(e);lt.log({discoveredDevice:n}),this.#qn(n)}break;case"expiredDiscoveredDevice":{const{string:e}=Q(t,s);this.#jn(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=Q(t,s);lt.log({connectedBluetoothDeviceIdStrings:e});const n=JSON.parse(e);lt.log({connectedBluetoothDeviceIds:n}),this.#Hn(n)}break;case"deviceMessage":{const{string:e,byteOffset:n}=Q(t,s);s=n;const i=this.#Gn[e];lt.assertWithError(i,`no device found for id ${e}`);const a=i.connectionManager,r=R(t,s);a.onWebSocketMessage(r)}break;default:lt.error(`uncaught messageType "${e}"`)}}#On=new T(this.#Qn.bind(this),3e7);#Qn(){this.#Rn("ping")}#zn(){this.#Rn("pong")}#Jn=!1;get#Vn(){return this.#Jn}set#Vn(e){lt.assertTypeWithError(e,"boolean"),this.#Jn=e,this.#u({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Zn()}get isScanningAvailable(){return this.#Vn}#Kn(){this.#kn(),lt.assertWithError(this.isScanningAvailable,"scanning is not available")}#Xn(){this.#Rn("isScanningAvailable")}#Yn=!1;get#Bn(){return this.#Yn}set#Bn(e){lt.assertTypeWithError(e,"boolean"),this.#Yn=e,this.#u({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Bn}#Zn(){this.#Rn("isScanning")}#ei(){lt.assertWithError(this.isScanning,"is not scanning")}#ti(){lt.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#ti(),this.#Rn("startScan")}stopScan(){this.#ei(),this.#Rn("stopScan")}toggleScan(){this.#Kn(),this.isScanning?this.stopScan():this.startScan()}#si={};get discoveredDevices(){return this.#si}#qn(e){lt.log({discoveredDevice:e}),this.#si[e.bluetoothId]=e,this.#u({type:"discoveredDevice",message:{discoveredDevice:e}})}#ni(){this.#xn(ct)}#jn(e){lt.log({expiredBluetoothDeviceId:e});const t=this.#si[e];t?(lt.log({expiredDiscoveredDevice:t}),delete this.#si[e],this.#u({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):lt.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#ii(e)}#ii(e){this.#kn(),lt.assertTypeWithError(e,"string");const t=this.#ai(e);return t.connect(),t}#ri(e){this.#xn(this.#oi(e))}#oi(e){return rt({type:"connectToDevice",data:e})}#ci(e){const t=new Ze,s=new ht;return s.bluetoothId=e,s.sendWebSocketMessage=this.#gi.bind(this,e),s.sendWebSocketConnectMessage=this.#ri.bind(this,e),s.sendWebSocketDisconnectMessage=this.#hi.bind(this,e),t.connectionManager=s,t}#ai(e){let t=this.#Gn[e];return t||(t=this.#ci(e),this.#Gn[e]=t),t}#Hn(e){lt.log({bluetoothIds:e}),e.forEach((e=>{this.#ai(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#li(e)}#li(e){this.#kn(),lt.assertTypeWithError(e,"string");const t=this.devices[e];return lt.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#hi(e){this.#xn(this.#ui(e))}#ui(e){return rt({type:"disconnectFromDevice",data:e})}#gi(e,...t){this.#xn(this.#di(e,...t))}#di(e,...t){return rt({type:"deviceMessage",data:[e,ot(...t)]})}#Gn={};get devices(){return this.#Gn}}e.Device=Ze,e.DevicePair=st,e.WebSocketClient=ut,e.setAllConsoleLevelFlags=function(e){d.setAllLevelFlags(e)},e.setConsoleLevelFlagsForType=function(e,t){d.setLevelFlagsForType(e,t)}}));
