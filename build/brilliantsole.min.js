/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class l{static#e={};constructor(e){if(l.#e[e])throw new Error(`"${e}" console already exists`);l.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new l(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function h(e,t){return l.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=h("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}waitForEvent(e){return d.log(`waiting for event "${e}"`),this.#r(e),new Promise((t=>{this.addEventListener(e,(()=>{t()}),{once:!0})}))}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function f(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}const m=new Uint32Array(256);for(let e=0;e<256;++e)m[e]=f(e);function b(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(m[n^i]^s>>>8)>>>0}return s}const S=h("FileTransferManager",{log:!0});class y{static#o=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#o}get messageTypes(){return y.MessageTypes}static#c=[...this.#o,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#c}get eventTypes(){return y.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}static#h=["tflite"];static get Types(){return this.#h}get types(){return y.Types}#g(e){S.assertEnumWithError(e,this.types)}#d(e){S.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#u=["idle","sending","receiving"];static get Statuses(){return this.#u}get statuses(){return y.Statuses}#v(e){S.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#p=["startSend","startReceive","cancel"];static get Commands(){return this.#p}get commands(){return y.Commands}#f(e){S.assertEnumWithError(e,this.commands)}static async GetFileBuffer(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}async getFileBuffer(e){return y.GetFileBuffer(e)}static#m=51200;static get MaxLength(){return this.#m}#b=y.MaxLength;get maxLength(){return this.#b}#S(e){S.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);S.log(`maxLength: ${t}kB`),this.#b=t}#y(e){S.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#D;get type(){return this.#D}#C(e){S.log("parseFileType",e);const t=e.getUint8(0);this.#d(t);const s=this.types[t];this.#T(s)}#T(e){S.log({type:e}),this.#D=e,this.#l({type:"getFileTransferType",message:{fileType:e}})}async#E(e){if(this.#g(e),this.type==e)return void S.log(`redundant type assignment ${e}`);const t=this.waitForEvent("getFileTransferType"),s=this.types.indexOf(e);this.sendMessage("setFileTransferType",Uint8Array.from([s])),await t}#w=0;get length(){return this.#w}#M(e){S.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#L(t)}#L(e){S.log(`length: ${e}kB`),this.#w=e,this.#l({type:"getFileLength",message:{fileLength:e}})}async#k(e){if(S.assertTypeWithError(e,"number"),this.#y(e),this.length==e)return void S.log(`redundant length assignment ${e}`);const t=this.waitForEvent("getFileLength"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileLength",s),await t}#W=0;get checksum(){return this.#W}#N(e){S.log("checksum",e);const t=e.getUint32(0,!0);this.#I(t)}#I(e){S.log({checksum:e}),this.#W=e,this.#l({type:"getFileChecksum",message:{fileChecksum:e}})}async#R(e){if(S.assertTypeWithError(e,"number"),this.checksum==e)return void S.log(`redundant checksum assignment ${e}`);const t=this.waitForEvent("getFileChecksum"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileChecksum",s),await t}async#A(e){this.#f(e);const t=this.waitForEvent("fileTransferStatus"),s=this.commands.indexOf(e);this.sendMessage("setFileTransferCommand",Uint8Array.from([s])),await t}#x="idle";get status(){return this.#x}#O(e){S.log("parseFileStatus",e);const t=e.getUint8(0);this.#v(t);const s=this.statuses[t];this.#U(s)}#U(e){S.log({status:e}),this.#x=e,this.#l({type:"fileTransferStatus",message:{fileTransferStatus:e}})}#$(){S.assertWithError("idle"==this.#x,"status is not idle")}#P(){S.assertWithError("idle"!=this.#x,"status is idle")}#F;async#V(e){S.log("parseFileBlock",e),this.#F.push(e.buffer);const t=this.#F.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#w;if(S.log(`received ${t} of ${this.#w} bytes (${100*s}%)`),this.#l({type:"fileTransferProgress",message:{progress:s}}),t!=this.#w)return;S.log("file transfer complete");let n=(new Date).toLocaleString();if("tflite"===this.type)n+=".tflite";const i=new File(this.#F,n),r=b(await i.arrayBuffer());S.log({checksum:r}),r==this.#W?(console.log("received file",i),this.#l({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#l({type:"fileReceived",message:{file:i}})):S.error(`wrong checksum - expected ${this.#W}, got ${r}`)}parseMessage(e,t){switch(S.log({messageType:e}),e){case"maxFileLength":this.#S(t);break;case"getFileTransferType":this.#C(t);break;case"getFileLength":this.#M(t);break;case"getFileChecksum":this.#N(t);break;case"fileTransferStatus":this.#O(t);break;case"getFileTransferBlock":this.#V(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#$(),this.#g(e);const s=await this.getFileBuffer(t);await this.#E(e);const n=s.byteLength;await this.#k(n);const i=b(s);await this.#R(i),await this.#A("startSend"),await this.#B(s)}async#B(e){return this.#_(e)}#z=256;async#_(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+this.#z),n=1-(e.byteLength-t)/e.byteLength;if(S.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#l({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage("setFileTransferBlock",s),this.#_(e,t+s.byteLength);S.log("finished sending buffer"),this.#l({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#$(),this.#g(e),this.#F=[],await this.#E(e),await this.#A("startReceive")}async cancel(){this.#P(),await this.#A("cancel")}sendMessage}const D=new TextEncoder,C=new TextDecoder;const T={min:1/0,max:-1/0};class E{#q=Object.assign({},T);reset(){Object.assign(this.#q,T)}update(e){this.#q.min=Math.min(e,this.#q.min),this.#q.max=Math.max(e,this.#q.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#q.min,this.#q.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class w{#q={x:new E,y:new E};reset(){this.#q.x.reset(),this.#q.y.reset()}update(e){this.#q.x.update(e.x),this.#q.y.update(e.y)}getNormalization(e){return{x:this.#q.x.getNormalization(e.x),y:this.#q.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const M=h("PressureSensorDataManager",{log:!0});class L{#j=[];get positions(){return this.#j}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;M.log({positions:t}),this.#j=t,this.#H=(s=this.numberOfSensors,n=()=>new E,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#H;#G=new w;resetRange(){this.#H.forEach((e=>e.reset())),this.#G.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),r=this.#H[s].updateAndGetNormalization(i),a=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:r,position:a},t.rawSum+=i,t.normalizedSum+=r/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#G.updateAndGetNormalization(t.center)),M.log({pressure:t}),t}}const k=h("MotionSensorDataManager",{log:!1});class W{static#J=6;static get Vector3Size(){return this.#J}get vector3Size(){return W.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return k.log({vector:r}),r}static#Q=8;static get QuaternionSize(){return this.#Q}get quaternionSize(){return W.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return k.log({quaternion:a}),a}}h("BarometerSensorDataManager",{log:!0});class N{static#Z={barometer:.78125};static get Scalars(){return this.#Z}get scalars(){return N.Scalars}}const I=h("ArrayBufferUtils",{log:!1}),R=new TextEncoder;function A(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return O(e)}if(e instanceof Array){return A(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return O(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function x(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function O(e){const t=R.encode(e);return A(t.byteLength,t)}function U(e,t,s){let n;return s&&(n=e.byteOffset+t+s),I.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const $=h("ParseUtils",{log:!0}),P=new TextDecoder;function F(e,t=0){const s=e.getUint8(t++);return{string:P.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function V(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),$.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),$.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=U(e,i,o);$.log({_dataView:c}),s(a,c),i+=o}}const B=h("SensorDataManager",{log:!0});class _{pressureSensorDataManager=new L;motionSensorDataManager=new W;barometerSensorDataManager=new N;static#h=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#h}get types(){return _.Types}#K=new Map;static AssertValidSensorType(e){B.assertTypeWithError(e,"string"),B.assertWithError(this.#h.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){B.assertTypeWithError(e,"number"),B.assertWithError(e in this.#h,`invalid sensorTypeEnum ${e}`)}onDataReceived;#X(e,t){let s=Date.now();s-=s%65536;return s+e.getUint16(t,!0)}parseData(e){B.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#X(e,t);t+=2;V(new DataView(e.buffer,t),_.Types,((e,t)=>{const n=e,i=this.#K.get(n);let r;switch(n){case"pressure":r=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:B.error(`uncaught sensorType "${n}"`)}B.assertWithError(r,`no value defined for sensorType "${n}"`),this.onDataReceived(n,{timestamp:s,[n]:r})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=_.Types[s];if(!n){B.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);B.log({sensorType:n,sensorScalar:i}),this.#K.set(n,i)}}}const z=h("TfliteManager",{log:!0});class q{static#o=["getTfliteModelName","setTfliteModelName","getTfliteModelTask","setTfliteModelTask","getTfliteModelSampleRate","setTfliteModelSampleRate","getTfliteModelSensorTypes","setTfliteModelSensorTypes","getTfliteModelNumberOfClasses","setTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteInferencingEnabled","setTfliteInferencingEnabled","tfliteModelInference"];static get MessageTypes(){return this.#o}get messageTypes(){return q.MessageTypes}static#Y=["classification","regression"];static get Tasks(){return this.#Y}get tasks(){return q.Tasks}#ee(e){z.assertEnumWithError(e,this.tasks)}#te(e){z.assertWithError(this.tasks[e],`invalid taskEnum ${e}`)}static#c=[...this.#o];static get EventTypes(){return this.#c}get eventTypes(){return q.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}waitForEvent(e){return this.eventDispatcher.waitForEvent(e)}#se;get name(){return this.#se}#ne(e){z.log("parseName",e);const t=C.decode(e);this.#ie(t)}#ie(e){z.log({name:e}),this.#se=e,this.#l({type:"getTfliteModelName",message:{tfliteModelName:e}})}async#re(e){if(z.assertTypeWithError(e,"string"),this.name==e)return void z.log(`redundant name assignment ${e}`);const t=this.waitForEvent("getTfliteModelName"),s=D.encode(e);this.sendMessage("setTfliteModelName",s),await t}#ae;get task(){return this.#ae}#oe(e){z.log("parseTask",e);const t=e.getUint8(0);this.#te(t);const s=this.tasks[t];this.#ce(s)}#ce(e){z.log({task:e}),this.#ae=e,this.#l({type:"getTfliteModelTask",message:{tfliteModelTask:e}})}async#le(e){if(this.#ee(e),this.task==e)return void z.log(`redundant task assignment ${e}`);const t=this.waitForEvent("getTfliteModelTask"),s=this.tasks.indexOf(e);this.sendMessage("setTfliteModelTask",Uint8Array.from([s])),await t}#he;get sampleRate(){return this.#he}#ge(e){z.log("parseSampleRate",e);const t=e.getUint16(0,!0);this.#de(t)}#de(e){z.log({sampleRate:e}),this.#he=e,this.#l({type:"getTfliteModelSampleRate",message:{tfliteModelSampleRate:e}})}async#ue(e){if(z.assertTypeWithError(e,"number"),this.#he==e)return void z.log(`redundant sampleRate assignment ${e}`);const t=this.waitForEvent("getTfliteModelSampleRate"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteModelSampleRate",s),await t}#ve;get sensorTypes(){return this.#ve}#pe(e){z.log("parseSensorTypes",e);const t=[];for(let s=0;s<e.byteLength;s++){const n=e.getUint8(s),i=_.Types[n];i?t.push(i):z.error(`invalid sensorTypeEnum ${n}`)}this.#fe(t)}#fe(e){z.log({sensorTypes:e}),this.#ve=e,this.#l({type:"getTfliteModelSensorTypes",message:{tfliteModelSensorTypes:e}})}async#me(...e){e.forEach((e=>{_.AssertValidSensorType(e)}));const t=this.waitForEvent("getTfliteModelSensorTypes");var s;const n=(e=(s=e).filter(((e,t)=>s.indexOf(e)==t))).map((e=>_.Types.indexOf(e))).sort();this.sendMessage("setTfliteModelSensorTypes",Uint8Array.from([n])),await t}#be;get numberOfClasses(){return this.#be}#Se(e){z.log("parseNumberOfClasses",e);const t=e.getUint8(0);this.#ye(t)}#ye(e){z.log({numberOfClasses:e}),this.#be=e,this.#l({type:"getTfliteModelNumberOfClasses",message:{tfliteModelNumberOfClasses:e}})}async#De(e){if(z.assertTypeWithError(e,"number"),z.assertWithError(e>1,`numberOfClasses must be greated than 1 (received ${e})`),this.#be==e)return void z.log(`redundant numberOfClasses assignment ${e}`);const t=this.waitForEvent("getTfliteModelNumberOfClasses");this.sendMessage("setTfliteModelNumberOfClasses",Uint8Array.from([e])),await t}#Ce;get isReady(){return this.#Ce}#Te(e){z.log("parseIsReady",e);const t=Boolean(e.getUint8(0));this.#Ee(t)}#Ee(e){z.log({isReady:e}),this.#Ce=e,this.#l({type:"tfliteModelIsReady",message:{tfliteModelIsReady:e}})}#we;get captureDelay(){return this.#we}#Me(e){z.log("parseCaptureDelay",e);const t=e.getUint16(0,!0);this.#Le(t)}#Le(e){z.log({captureDelay:e}),this.#we=e,this.#l({type:"getTfliteCaptureDelay",message:{tfliteCaptureDelay:e}})}async#ke(e){if(z.assertTypeWithError(e,"number"),this.#we==e)return void z.log(`redundant captureDelay assignment ${e}`);const t=this.waitForEvent("getTfliteCaptureDelay"),s=new DataView(new ArrayBuffer(2));s.setUint16(0,e,!0),this.sendMessage("setTfliteCaptureDelay",s),await t}#We;get threshold(){return this.#We}#Ne(e){z.log("parseThreshold",e);const t=e.getFloat32(0,!0);this.#Ie(t)}#Ie(e){z.log({threshold:e}),this.#We=e,this.#l({type:"getTfliteThreshold",message:{tfliteThreshold:e}})}async#Re(e){if(z.assertTypeWithError(e,"number"),this.#We==e)return void z.log(`redundant threshold assignment ${e}`);const t=this.waitForEvent("getTfliteThreshold"),s=new DataView(new ArrayBuffer(4));s.setFloat32(0,e,!0),this.sendMessage("setTfliteThreshold",s),await t}#Ae;get inferencingEnabled(){return this.#Ae}#xe(e){z.log("parseInferencingEnabled",e);const t=Boolean(e.getUint8(0));this.#Oe(t)}#Oe(e){z.log({inferencingEnabled:e}),this.#Ae=e,this.#l({type:"getTfliteInferencingEnabled",message:{tfliteInferencingEnabled:e}})}async#Ue(e){if(z.assertTypeWithError(e,"boolean"),this.#Ae==e)return void z.log(`redundant inferencingEnabled assignment ${e}`);const t=this.waitForEvent("getTfliteInferencingEnabled");this.sendMessage("setTfliteInferencingEnabled",Uint8Array.from([e])),await t}async enableInferencing(){this.inferencingEnabled||this.#Ue(!0)}async disableInferencing(){this.inferencingEnabled&&this.#Ue(!1)}#$e(e){z.log("parseInference",e)}parseMessage(e,t){switch(z.log({messageType:e}),e){case"getTfliteModelName":this.#ne(t);break;case"getTfliteModelTask":this.#oe(t);break;case"getTfliteModelSampleRate":this.#ge(t);break;case"getTfliteModelSensorTypes":this.#pe(t);break;case"getTfliteModelNumberOfClasses":this.#Se(t);break;case"tfliteModelIsReady":this.#Te(t);break;case"getTfliteCaptureDelay":this.#Me(t);break;case"getTfliteThreshold":this.#Ne(t);break;case"getTfliteInferencingEnabled":this.#xe(t);break;case"tfliteModelInference":this.#$e(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const j=h("ConnectionManager",{log:!0});class H{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","getCurrentTime","setCurrentTime","triggerVibration",...y.MessageTypes,...q.MessageTypes];static get MessageTypes(){return this.#o}get id(){this.#Pe("id")}onStatusUpdated;onMessageReceived;static#Fe(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#Pe(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#Fe("type")}get type(){return this.constructor.type}#Ve(){j.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Be(){j.assertWithError(this.constructor!=H,`${this.constructor.name} must be subclassed`)}constructor(){this.#Be(),this.#Ve()}#x="not connected";get status(){return this.#x}set status(e){j.assertTypeWithError(e,"string"),this.#x!=e?(j.log(`new connection status "${e}"`),this.#x=e,this.onStatusUpdated?.(this.status)):j.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#_e(){j.assertWithError(!this.isConnected,"device is already connected")}#ze(){j.assertWithError("connecting"!=this.status,"device is already connecting")}#qe(){j.assertWithError(this.isConnected,"device is not connected")}#je(){j.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#He(){this.#qe(),this.#je()}async connect(){this.#_e(),this.#ze(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#_e(),this.#ze(),j.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#qe(),this.#je(),this.status="disconnecting",j.log("disconnecting from device...")}async sendMessage(e,t){this.#He(),j.log("sending message",{messageType:e,data:t})}}const G=h("bluetoothUUIDs",{log:!1});if(t){var J=require("webbluetooth").BluetoothUUID}if(e)J=window.BluetoothUUID;function Q(e){return G.assertTypeWithError(e,"string"),G.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function Z(e){return J?.getCharacteristic?.(e)}function K(e){return J?.getService?.(e)}const X=Object.freeze({services:{deviceInformation:{uuid:K("device_information"),characteristics:{manufacturerName:{uuid:Z("manufacturer_name_string")},modelNumber:{uuid:Z("model_number_string")},hardwareRevision:{uuid:Z("hardware_revision_string")},firmwareRevision:{uuid:Z("firmware_revision_string")},softwareRevision:{uuid:Z("software_revision_string")},pnpId:{uuid:Z("pnp_id")},serialNumber:{uuid:Z("serial_number_string")}}},battery:{uuid:K("battery_service"),characteristics:{batteryLevel:{uuid:Z("battery_level")}}},main:{uuid:Q("0000"),characteristics:{name:{uuid:Q("1000")},type:{uuid:Q("1001")},sensorConfiguration:{uuid:Q("2000")},pressurePositions:{uuid:Q("2001")},sensorScalars:{uuid:Q("2002")},currentTime:{uuid:Q("2003")},sensorData:{uuid:Q("2004")},vibration:{uuid:Q("3000")},maxFileLength:{uuid:Q("4000")},fileTransferType:{uuid:Q("4001")},fileLength:{uuid:Q("4002")},fileChecksum:{uuid:Q("4003")},fileTransferCommand:{uuid:Q("4004")},fileTransferStatus:{uuid:Q("4005")},fileTransferBlock:{uuid:Q("4006")},tfliteModelName:{uuid:Q("5000")},tfliteModelTask:{uuid:Q("5001")},tfliteModelSampleRate:{uuid:Q("5002")},tfliteModelSensorTypes:{uuid:Q("5003")},tfliteModelNumberOfClasses:{uuid:Q("5004")},tfliteModelIsReady:{uuid:Q("5005")},tfliteCaptureDelay:{uuid:Q("5006")},tfliteThreshold:{uuid:Q("5007")},tfliteInferencingEnabled:{uuid:Q("5008")},tfliteModelInference:{uuid:Q("5009")}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{dfu:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.dfu.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),Y=X.serviceUUIDs,ee=X.optionalServiceUUIDs,te=[...Y,...ee];function se(e){return X.getServiceNameFromUUID(e)}const ne=[],ie=[],re=[];function ae(e){return X.getCharacteristicNameFromUUID(e)}function oe(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":case"fileTransferCommand":case"fileTransferBlock":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":case"currentTime":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferStatus":case"fileTransferBlock":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferCommand":case"fileTransferBlock":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(X.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{Y.includes(t.uuid)&&ne.push(s.uuid),ie.push(s.uuid),re.push(e)}))}),[]);h("BluetoothConnectionManager",{log:!0});class ce extends H{onCharacteristicValueChanged(e,t){switch(e){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":case"maxFileLength":case"fileTransferStatus":case"tfliteModelIsReady":case"tfliteModelInference":this.onMessageReceived(e,t);break;case"name":this.onMessageReceived("getName",t);break;case"type":this.onMessageReceived("getType",t);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",t);break;case"currentTime":this.onMessageReceived("getCurrentTime",t);break;case"fileTransferType":this.onMessageReceived("getFileTransferType",t);break;case"fileLength":this.onMessageReceived("getFileLength",t);break;case"fileChecksum":this.onMessageReceived("getFileChecksum",t);break;case"fileTransferBlock":this.onMessageReceived("getFileTransferBlock",t);break;case"tfliteModelName":this.onMessageReceived("getTfliteModelName",t);break;case"tfliteModelTask":this.onMessageReceived("getTfliteModelTask",t);break;case"tfliteModelSampleRate":this.onMessageReceived("getTfliteModelSampleRate",t);break;case"tfliteModelSensorTypes":this.onMessageReceived("getTfliteModelSensorTypes",t);break;case"tfliteModelNumberOfClasses":this.onMessageReceived("getTfliteModelNumberOfClasses",t);break;case"tfliteCaptureDelay":this.onMessageReceived("getTfliteCaptureDelay",t);break;case"tfliteThreshold":this.onMessageReceived("getTfliteThreshold",t);break;case"tfliteInferencingEnabled":this.onMessageReceived("getTfliteInferencingEnabled",t);break;default:throw new Error(`uncaught characteristicName "${e}"`)}}characteristicNameForMessageType(e){switch(e){case"setName":return"name";case"setType":return"type";case"setSensorConfiguration":return"sensorConfiguration";case"setCurrentTime":return"currentTime";case"triggerVibration":return"vibration";case"setFileTransferType":return"fileTransferType";case"setFileLength":return"fileLength";case"setFileChecksum":return"fileChecksum";case"setFileTransferCommand":return"fileTransferCommand";case"setFileTransferBlock":return"fileTransferBlock";case"setTfliteModelName":return"tfliteModelName";case"setTfliteModelTask":return"tfliteModelTask";case"setTfliteModelSampleRate":return"tfliteModelSampleRate";case"setTfliteModelSensorTypes":return"tfliteModelSensorTypes";case"setTfliteModelNumberOfClasses":return"tfliteModelNumberOfClasses";case"setTfliteCaptureDelay":return"tfliteCaptureDelay";case"setTfliteThreshold":return"tfliteThreshold";case"setTfliteInferencingEnabled":return"tfliteInferencingEnabled";default:throw Error(`no characteristicName for messageType "${e}"`)}}}const le=h("WebBluetoothConnectionManager",{log:!1});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var he={bluetooth:t}}if(e)he=window.navigator;class ge extends ce{get id(){return this.device?.id}#Ge={characteristicvaluechanged:this.#Je.bind(this)};#Qe={gattserverdisconnected:this.#Ze.bind(this)};static get isSupported(){return"bluetooth"in he}static get type(){return"webBluetooth"}#Ke;get device(){return this.#Ke}set device(e){this.#Ke!=e?(this.#Ke&&p(this.#Ke,this.#Qe),e&&v(e,this.#Qe),this.#Ke=e):le.log("tried to assign the same BluetoothDevice")}get server(){return this.#Ke?.gatt}get isConnected(){return this.server?.connected}#Xe=new Map;#Ye=new Map;async connect(){await super.connect();try{const t=await he.bluetooth.requestDevice({filters:[{services:Y}],optionalServices:e?ee:[]});le.log("got BluetoothDevice"),this.device=t,le.log("connecting to device...");const s=await this.device.gatt.connect();le.log(`connected to device? ${s.connected}`),await this.#et(),le.log("fully connected"),this.status="connected"}catch(e){le.error(e),this.status="not connected",this.server?.disconnect(),this.#tt()}}async#et(){this.#tt(),le.log("getting services...");const e=await this.server.getPrimaryServices();le.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),le.log("getting characteristics...");for(const t in e){const i=e[t];le.log({service:i});const r=se(i.uuid);if(le.assertWithError(r,`no name found for service uuid "${i.uuid}"`),le.log(`got "${r}" service`),"dfu"==r){le.log("skipping dfu service");continue}i._name=r,this.#Xe.set(r,i),le.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();le.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];le.log({characteristic:t});const i=ae(t.uuid);le.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),le.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#Ye.set(i,t),v(t,this.#Ge);const o=t.properties||oe(i);o.notify&&(le.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(le.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#st(t))}}}#tt(){this.device&&p(this.device,this.#Qe),this.#Ye.forEach((e=>{p(e,this.#Ge)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#tt(),this.status="not connected"}#Je(e){le.log("oncharacteristicvaluechanged");const t=e.target;this.#st(t)}#st(e){le.log("onCharacteristicValue");const t=e._name;le.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),le.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;le.assertWithError(s,`no data found for "${t}" characteristic`),le.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}#Ze(e){le.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){await super.sendMessage(...arguments);const i=this.characteristicNameForMessageType(e);le.log({characteristicName:i});const r=this.#Ye.get(i);le.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||oe(i);a.read&&!a.notify&&(le.log("reading value after write..."),await r.readValue(),(s||n)&&this.#st(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),le.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(le.log("successfully reconnected!"),await this.#et(),this.status="connected"):(le.log("unable to reconnect"),this.status="not connected")}}const de=h("SensorConfigurationManager",{log:!1});class ue{#nt;#it(e){de.assertWithError(this.#nt,"must get initial sensorConfiguration");const t=this.#nt?.includes(e);return de.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=_.Types[n];if(!i){de.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);de.log({sensorType:i,sensorRate:r}),t[i]=r}return de.log({parsedSensorConfiguration:t}),this.#nt=Object.keys(t),t}static#rt=65535;static get MaxSensorRate(){return this.#rt}get maxSensorRate(){return ue.MaxSensorRate}static#at=5;static get SensorRateStep(){return this.#at}get sensorRateStep(){return ue.SensorRateStep}static#ot(e){de.assertTypeWithError(e,"number"),de.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),de.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),de.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ct(e){ue.#ot(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#it(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{_.AssertValidSensorType(t);const i=_.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#ct(r),s.setUint16(3*n+1,e[t],!0)})),de.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const ve=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],pe=h("VibrationManager");class fe{static#lt=["front","rear"];static get Locations(){return this.#lt}get locations(){return fe.Locations}#ht(e){pe.assertTypeWithError(e,"string"),pe.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#gt(e){this.#dt(e),e.forEach((e=>{this.#ht(e)}))}#ut(e){this.#gt(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),pe.log({locationsBitmask:t}),pe.assertWithError(t>0,"locationsBitmask must not be zero"),t}#dt(e){pe.assertWithError(Array.isArray(e),"passed non-array"),pe.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return ve}get waveformEffects(){return fe.WaveformEffects}#vt(e){pe.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#pt=1270;static get MaxWaveformEffectSegmentDelay(){return this.#pt}get maxWaveformEffectSegmentDelay(){return fe.MaxWaveformEffectSegmentDelay}#ft(e){if(null!=e.effect){const t=e.effect;this.#vt(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;pe.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),pe.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#mt(t)}}static#bt=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#bt}get maxWaveformEffectSegmentLoopCount(){return fe.MaxWaveformEffectSegmentLoopCount}#mt(e){pe.assertTypeWithError(e,"number"),pe.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),pe.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#St=8;static get MaxNumberOfWaveformEffectSegments(){return this.#St}get maxNumberOfWaveformEffectSegments(){return fe.MaxNumberOfWaveformEffectSegments}#yt(e){this.#dt(e),pe.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ft(e)}))}static#Dt=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Dt}get maxWaveformEffectSequenceLoopCount(){return fe.MaxWaveformEffectSequenceLoopCount}#Ct(e){pe.assertTypeWithError(e,"number"),pe.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),pe.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Tt=2550;static get MaxWaveformSegmentDuration(){return this.#Tt}get maxWaveformSegmentDuration(){return fe.MaxWaveformSegmentDuration}#Et(e){pe.assertTypeWithError(e.amplitude,"number"),pe.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),pe.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),pe.assertTypeWithError(e.duration,"number"),pe.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),pe.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#wt=20;static get MaxNumberOfWaveformSegments(){return this.#wt}get maxNumberOfWaveformSegments(){return fe.MaxNumberOfWaveformSegments}#Mt(e){this.#dt(e),pe.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Et(e)}))}createWaveformEffectsData(e,t,s=0){this.#yt(t),this.#Ct(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return pe.log({dataArray:n,dataView:o}),this.#Lt(e,"waveformEffect",o)}createWaveformData(e,t){this.#Mt(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),pe.log({dataView:s}),this.#Lt(e,"waveform",s)}static#h=["waveformEffect","waveform"];static get Types(){return this.#h}get#kt(){return fe.Types}#Wt(e){pe.assertTypeWithError(e,"string"),pe.assertWithError(this.#kt.includes(e),`invalid vibrationType "${e}"`)}#Lt(e,t,s){pe.assertWithError(s?.byteLength>0,"no data received");const n=this.#ut(e);this.#Wt(t);const i=this.#kt.indexOf(t);pe.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=A(n,i,s.byteLength,s);return pe.log({data:r}),r}}const me=h("Device",{log:!1});class be{get id(){return this.#Nt?.id}constructor(){this.#It.onDataReceived=this.#Rt.bind(this),this.#At.sendMessage=this.#xt.bind(this),this.#At.eventDispatcher=this.#Ot,this.#Ut.sendMessage=this.#xt.bind(this),this.#Ut.eventDispatcher=this.#Ot,e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{be.#$t(this)}))}static get#Pt(){return ge}static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage",...y.EventTypes,...q.EventTypes];static get EventTypes(){return this.#c}get eventTypes(){return be.#c}#Ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ot.addEventListener(e,t,s)}#l(e){this.#Ot.dispatchEvent(e)}removeEventListener(e,t){return this.#Ot.removeEventListener(e,t)}#Nt;get connectionManager(){return this.#Nt}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Ft.bind(this),e.onMessageReceived=this.#Vt.bind(this)),this.#Nt=e,me.log("assigned new connectionManager",this.#Nt)):me.log("same connectionManager is already assigned")}#xt(e,t){return this.#Nt?.sendMessage(e,t)}async connect(){return this.connectionManager||(this.connectionManager=new be.#Pt),this.#Bt(),this.connectionManager.connect()}#_t=!1;get isConnected(){return this.#_t}#qe(){me.assertWithError(this.isConnected,"not connected")}static#zt=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","fileTransferStatus","getTfliteModelName","getTfliteModelTask","getTfliteModelSampleRate","getTfliteModelSensorTypes","getTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteInferencingEnabled","tfliteModelInference"];static get AllInformationConnectionMessages(){return this.#zt}get#qt(){return be.#zt}get#jt(){return this.#qt.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#Bt(),this.connectionManager?.reconnect()}static#Ht=!1;static get ReconnectOnDisconnection(){return this.#Ht}static set ReconnectOnDisconnection(e){me.assertTypeWithError(e,"boolean"),this.#Ht=e}#Gt=be.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Gt}set reconnectOnDisconnection(e){me.assertTypeWithError(e,"boolean"),this.#Gt=e}#Jt;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#qe(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#Nt?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#Nt.status;default:return"not connected"}}#Ft(e){me.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(me.log("starting reconnect interval..."),this.#Jt=setInterval((()=>{me.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Jt&&(me.log("clearing reconnect interval"),clearInterval(this.#Jt),this.#Jt=void 0),this.#Qt()}#Zt(e=!1){this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e&&this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}#Qt(){switch(this.#_t=this.connectionManager?.isConnected&&this.#jt&&this.#Kt,this.connectionStatus){case"connected":this.#_t&&this.#Zt(!0);break;case"not connected":this.#Zt(!0);break;default:this.#Zt(!1)}}#Bt(){this.latestConnectionMessage.clear(),this.#Kt=!1}#Vt(e,t){switch(me.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=C.decode(t);me.log({manufacturerName:s}),this.#Xt({manufacturerName:s});break;case"modelNumber":const n=C.decode(t);me.log({modelNumber:n}),this.#Xt({modelNumber:n});break;case"softwareRevision":const i=C.decode(t);me.log({softwareRevision:i}),this.#Xt({softwareRevision:i});break;case"hardwareRevision":const r=C.decode(t);me.log({hardwareRevision:r}),this.#Xt({hardwareRevision:r});break;case"firmwareRevision":const a=C.decode(t);me.log({firmwareRevision:a}),this.#Xt({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),me.log({pnpId:o}),this.#Xt({pnpId:o});break;case"serialNumber":const c=C.decode(t);me.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);me.log("received battery level",{batteryLevel:l}),this.#Yt(l);break;case"getName":const h=C.decode(t);me.log({name:h}),this.#ie(h);break;case"getType":const g=t.getUint8(0),d=this.#kt[g];me.log({typeEnum:g,type:d}),this.#T(d);break;case"getSensorConfiguration":const u=this.#es.parse(t);me.log({sensorConfiguration:u}),this.#ts(u);break;case"sensorScalars":this.#It.parseScalars(t);break;case"pressurePositions":this.#It.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":const v=Number(t.getBigUint64(0,!0));this.#ss(v);break;case"sensorData":this.#It.parseData(t);break;default:if(this.#At.messageTypes.includes(e))this.#At.parseMessage(e,t);else{if(!this.#Ut.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Ut.parseMessage(e,t)}}this.latestConnectionMessage.set(e,t),this.#l({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#jt&&this.#Qt()}latestConnectionMessage=new Map;#Kt=!1;#ss(e){me.log({currentTime:e}),this.#Kt=0!=e,this.#Kt||this.#ns()}#ns(){me.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#Nt.sendMessage("setCurrentTime",e)}#is={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#is}get#rs(){return Object.values(this.#is).every((e=>null!=e))}#Xt(e){me.log({partialDeviceInformation:e});for(const t in e)this.#l({type:t,message:{[t]:e[t]}});Object.assign(this.#is,e),me.log({deviceInformation:this.#is}),this.#rs&&(me.log("completed deviceInformation"),this.#l({type:"deviceInformation",message:{deviceInformation:this.#is}}))}#as=null;get batteryLevel(){return this.#as}#Yt(e){me.assertTypeWithError(e,"number"),this.#as!=e?(this.#as=e,me.log({updatedBatteryLevel:this.#as}),this.#l({type:"batteryLevel",message:{batteryLevel:this.#as}})):me.log(`duplicate batteryLevel assignment ${e}`)}#se;get name(){return this.#se}#ie(e){me.assertTypeWithError(e,"string"),this.#se=e,me.log({updatedName:this.#se}),this.#l({type:"getName",message:{name:this.#se}})}static get MinNameLength(){return 2}get minNameLength(){return be.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return be.MaxNameLength}async setName(e){this.#qe(),me.assertTypeWithError(e,"string"),me.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),me.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=D.encode(e);me.log({setNameData:t}),await this.#Nt.sendMessage("setName",t)}static#h=["leftInsole","rightInsole"];static get Types(){return this.#h}get#kt(){return be.Types}#D;get type(){return this.#D}get typeEnum(){return be.Types.indexOf(this.type)}#os(e){me.assertEnumWithError(e,this.#kt)}#cs(e){me.assertTypeWithError(e,"number"),me.assertWithError(this.#kt[e],`invalid typeEnum ${e}`)}#T(e){this.#os(e),e!=this.type?(this.#D=e,me.log({updatedType:this.#D}),this.#l({type:"getType",message:{type:this.#D}}),be.#ls&&be.#hs(this)):me.log("redundant type assignment")}async#gs(e){this.#cs(e);const t=Uint8Array.from([e]);me.log({setTypeData:t}),await this.#Nt.sendMessage("setType",t)}async setType(e){this.#qe(),this.#os(e);const t=this.#kt.indexOf(e);this.#gs(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ds=["left","right"];static get InsoleSides(){return this.#ds}get insoleSides(){return be.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return _.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#es=new ue;#us;get sensorConfiguration(){return this.#us}get sensorConfigurationData(){return this.#es.createData(this.sensorConfiguration)}static get MaxSensorRate(){return ue.MaxSensorRate}static get SensorRateStep(){return ue.SensorRateStep}#ts(e){this.#us=e,me.log({updatedSensorConfiguration:this.#us}),this.#l({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#qe(),me.log({newSensorConfiguration:e});const t=this.#es.createData(e);me.log({setSensorConfigurationData:t}),await this.#Nt.sendMessage("setSensorConfiguration",t)}static#vs=!0;static get ClearSensorConfigurationOnLeave(){return this.#vs}static set ClearSensorConfigurationOnLeave(e){me.assertTypeWithError(e,"boolean"),this.#vs=e}#ps=be.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#ps}set clearSensorConfigurationOnLeave(e){me.assertTypeWithError(e,"boolean"),this.#ps=e}static#fs={};static get ZeroSensorConfiguration(){return this.#fs}static{this.SensorTypes.forEach((e=>{this.#fs[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#ms=8;static get DefaultNumberOfPressureSensors(){return this.#ms}#It=new _;#Rt(e,t){me.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t}),this.#l({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#It.pressureSensorDataManager.resetRange()}#bs=new fe;static get VibrationLocations(){return fe.Locations}static get VibrationTypes(){return fe.Types}static get VibrationWaveformEffects(){return fe.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return fe.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return fe.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return fe.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return fe.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return fe.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return fe.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#bs.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#bs.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#bs.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}me.log({type:s,dataView:n}),t=A(t,n)})),await this.#Nt.sendMessage("triggerVibration",t)}static#Ss=[];static get ConnectedDevices(){return this.#Ss}static#ls=!1;static get UseLocalStorage(){return this.#ls}static set UseLocalStorage(e){this.#ys(),me.assertTypeWithError(e,"boolean"),this.#ls=e,this.#ls&&!this.#Ds&&this.#Cs()}static#Ts={devices:[]};static#Ds;static get CanUseLocalStorage(){return e&&window.localStorage}static#ys(){me.assertWithError(e,"localStorage is only available in the browser"),me.assertWithError(window.localStorage,"localStorage not found")}static#Es="BS.Device";static#ws(){this.#ys(),localStorage.setItem(this.#Es,JSON.stringify(this.#Ds))}static async#Cs(){this.#ys();let e=localStorage.getItem(this.#Es);if("string"!=typeof e)return me.log("no info found in localStorage"),this.#Ds=Object.assign({},this.#Ts),void this.#ws();try{const t=JSON.parse(e);me.log({configuration:t}),this.#Ds=t,this.CanGetDevices&&await this.GetDevices()}catch(e){me.error(e)}}static#hs(e){if("webBluetooth"!=e.connectionType)return void me.log("localStorage is only for webBluetooth devices");this.#ys();const t=this.#Ds.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#Ds.devices[t].type=e.type,this.#ws())}static#Ms=[];static get AvailableDevices(){return this.#Ms}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void me.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void me.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void me.warn("bluetooth.getDevices() is not available in this browser");this.#Ds||this.#Cs();const t=this.#Ds;if(!t.devices||0==t.devices.length)return void me.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return me.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#Ms.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new be,a=new ge;a.device=e,e.name&&r.#ie(e.name),r.#T(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#Ls(),this.AvailableDevices}static#ks=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#ks}static#Ws=new u(this,this.#ks);static AddEventListener(e,t,s){this.#Ws.addEventListener(e,t,s)}static#Ns(e){this.#Ws.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Ws.removeEventListener(e,t)}static#$t(e){if(e.isConnected)if(this.#Ss.includes(e))me.log("device already included");else{if(me.log("adding device",e),this.#Ss.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#Ds.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Ds.devices.push(t):this.#Ds.devices[s]=t,this.#ws()}this.#Ns({type:"deviceConnected",message:{device:e}}),this.#Ns({type:"deviceIsConnected",message:{device:e}})}else this.#Ss.includes(e)?(me.log("removing device",e),this.#Ss.splice(this.#Ss.indexOf(e),1),this.#Ns({type:"deviceDisconnected",message:{device:e}}),this.#Ns({type:"deviceIsConnected",message:{device:e}})):me.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));me.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#Ls()}}static#Ls(){me.log({AvailableDevices:this.AvailableDevices}),this.#Ns({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new be;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#At=new y;static get FileTypes(){return y.Types}get maxFileLength(){return this.#At.maxLength}sendFile(e,t){this.#At.send(e,t)}receiveFile(e){this.#At.receive(e)}get fileTransferStatus(){return this.#At.status}cancelFileTransfer(){this.#At.cancel()}#Ut=new q}const Se=h("Timer",{log:!1});class ye{#Is;get callback(){return this.#Is}set callback(e){Se.assertTypeWithError(e,"function"),Se.log({newCallback:e}),this.#Is=e,this.isRunning&&this.restart()}#Rs;get interval(){return this.#Rs}set interval(e){Se.assertTypeWithError(e,"number"),Se.assertWithError(e>0,"interval must be above 0"),Se.log({newInterval:e}),this.#Rs=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#As=null;get isRunning(){return null!=this.#As}start(){this.isRunning?Se.log("interval already running"):(Se.log("starting interval"),this.#As=setInterval(this.#Is,this.#Rs))}stop(){this.isRunning?(Se.log("stopping interval"),clearInterval(this.#As),this.#As=null):Se.log("interval already not running")}restart(){this.stop(),this.start()}}const De=h("BaseScanner");class Ce{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#Ve(){De.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#Be(){De.assertWithError(this.constructor!=Ce,`${this.constructor.name} must be subclassed`)}constructor(){this.#Be(),this.#Ve(),v(this,this.#xs)}#xs={discoveredDevice:this.#Os.bind(this),isScanning:this.#Us.bind(this)};static#c=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Ce.#c}#Ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ot.addEventListener(e,t,s)}dispatchEvent(e){this.#Ot.dispatchEvent(e)}removeEventListener(e,t){return this.#Ot.removeEventListener(e,t)}get isAvailable(){return!1}#$s(){De.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#Ps(){De.assertWithError(this.isScanning,"not scanning")}#Fs(){De.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#$s(),this.#Fs()}stopScan(){this.#Ps()}#Us(){this.isScanning?(this.#Vs={},this.#Bs={}):this.#_s.stop()}#Vs={};get discoveredDevices(){return this.#Vs}get discoveredDevicesArray(){return Object.values(this.#Vs).sort(((e,t)=>this.#Bs[e.id]-this.#Bs[t.id]))}#zs(e){De.assertWithError(this.#Vs[e],`no discovered device with id "${e}"`)}#Os(e){const t=e.message.discoveredDevice;this.#Vs[t.id]=t,this.#Bs[t.id]=Date.now(),this.#_s.start()}#Bs={};static#qs=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#qs}get#js(){return Ce.DiscoveredDeviceExpirationTimeout}#_s=new ye(this.#Hs.bind(this),1e3);#Hs(){const e=Object.entries(this.#Vs);if(0==e.length)return void this.#_s.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Bs[e];t-n>this.#js&&(De.log("discovered device timeout"),delete this.#Vs[e],delete this.#Bs[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#$s()}get canReset(){return!1}reset(){De.log("resetting...")}}const Te=h("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class Ee extends ce{get id(){return this.#Gs?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#Gs?.state}async connect(){await super.connect(),await this.#Gs.connectAsync()}async disconnect(){await super.disconnect(),await this.#Gs.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);Te.log({characteristicName:s});const n=this.#Ye.get(s);Te.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);Te.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#Gs.connectable}async reconnect(){await super.reconnect(),Te.log("attempting to reconnect..."),this.connect()}#Gs;get noblePeripheral(){return this.#Gs}set noblePeripheral(e){Te.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(Te.log("newNoblePeripheral",e.id),this.#Gs&&(p(this.#Gs,this.#Js),delete this.#Gs._connectionManager),e&&(e._connectionManager=this,v(e,this.#Js)),this.#Gs=e):Te.log("attempted to assign duplicate noblePeripheral")}#Js={connect:this.#Qs,disconnect:this.#Zs,rssiUpdate:this.#Ks,servicesDiscover:this.#Xs};async#Qs(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){Te.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#Gs.discoverServicesAsync(te),await this.#Ys()}async#Zs(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){Te.log("onNoblePeripheralDisconnect",e.id),await this.#Ys()}async#Ys(){switch(Te.log(`noblePeripheral ${this.id} state ${this.#Gs.state}`),this.#Gs.state){case"connected":case"connecting":break;case"disconnected":this.#tt(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":Te.error("noblePeripheral error");break;default:Te.log(`uncaught noblePeripheral state ${this.#Gs.state}`)}}#tt(){Te.log("removing noblePeripheral eventListeners"),this.#Xe.forEach((e=>{p(e,this.#en)})),this.#Xe.clear(),this.#Ye.forEach((e=>{p(e,this.#tn)})),this.#Ye.clear()}async#Ks(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){Te.log("onNoblePeripheralRssiUpdate",e.id,t)}async#Xs(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){Te.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];Te.log("service",s.uuid);const n=se(s.uuid);Te.assertWithError(n,`no name found for service uuid "${s.uuid}"`),Te.log({serviceName:n}),this.#Xe.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#en),await s.discoverCharacteristicsAsync()}}#Xe=new Map;#en={characteristicsDiscover:this.#sn};async#sn(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){Te.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];Te.log("characteristic",s.uuid);const n=ae(s.uuid);Te.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),Te.log({characteristicName:n}),this.#Ye.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#tn),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#nn&&(this.status="connected")}#tn={data:this.#in,write:this.#rn,notify:this.#an};#Ye=new Map;get#nn(){return re.every((e=>this.#Ye.has(e)))}#in(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){Te.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(x(t)),i=e._name;Te.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#rn(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){Te.log("onNobleCharacteristicWrite",e.uuid)}#an(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){Te.log("onNobleCharacteristicNotify",e.uuid,t)}}const we=h("NobleScanner",{log:!0});let Me=!1;if(t){var Le=require("@abandonware/noble");Me=!0}class ke extends Ce{static get isSupported(){return Me}#on=!1;get#cn(){return this.#on}set#cn(e){we.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#on=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):we.log("duplicate isScanning assignment")}get isScanning(){return this.#cn}#ln="unknown";get#hn(){return this.#ln}set#hn(e){we.assertTypeWithError(e,"string"),this.#hn!=e?(this.#ln=e,we.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):we.log("duplicate nobleState assignment")}#gn={scanStart:this.#dn.bind(this),scanStop:this.#un.bind(this),stateChange:this.#vn.bind(this),discover:this.#pn.bind(this)};#dn(){we.log("OnNobleScanStart"),this.#cn=!0}#un(){we.log("OnNobleScanStop"),this.#cn=!1}#vn(e){we.log("onNobleStateChange",e),this.#hn=e}#pn(e){let t;we.log("onNobleDiscover",e.id),this.#fn[e.id]||(e._scanner=this,this.#fn[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=be.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(Le,this.#gn),v(this,this.#mn)}get isAvailable(){return"poweredOn"==this.#hn}startScan(){super.startScan(),Le.startScanningAsync(Y,!0)}stopScan(){super.stopScan(),Le.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),Le.reset()}#mn={expiredDiscoveredDevice:this.#bn.bind(this)};#bn(e){const t=e.message.discoveredDevice;this.#fn[t.id]&&delete this.#fn[t.id]}#fn={};#Sn(e){we.assertTypeWithError(e,"string"),we.assertWithError(this.#fn[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#Sn(e);const t=this.#fn[e];we.log("connecting to discoveredDevice...",e);let s=be.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#yn(t),await s.connect())}#yn(e){const t=new be,s=new Ee;return s.noblePeripheral=e,t.connectionManager=s,t}}const We=h("Scanner",{log:!1});let Ne;ke.isSupported?(We.log("using NobleScanner"),Ne=new ke):We.log("Scanner not available");var Ie=Ne;const Re=h("DevicePairPressureSensorDataManager",{log:!0});class Ae{static get Sides(){return be.InsoleSides}get sides(){return be.InsoleSides}#Dn={};#G=new w;resetPressureRange(){this.#G.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(Re.log({pressure:t,insoleSide:s}),this.#Dn[s]=t,this.#Cn)return this.#Tn();Re.log("doesn't have all pressure data yet...")}get#Cn(){return this.sides.every((e=>e in this.#Dn))}#Tn(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Dn[t].rawSum,e.normalizedSum+=this.#Dn[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Dn[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#G.updateAndGetNormalization(e.center)),Re.log({devicePairPressure:e}),e}}const xe=h("DevicePairSensorDataManager",{log:!0});class Oe{static get Sides(){return be.InsoleSides}get sides(){return be.InsoleSides}#En={};pressureSensorDataManager=new Ae;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(xe.log({sensorType:s,timestamp:t,event:e}),this.#En[s]||(this.#En[s]={}),this.#En[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else xe.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#En[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else xe.log("no value received")}onDataReceived}const Ue=h("DevicePair",{log:!0});class $e{constructor(){this.#It.onDataReceived=this.#Rt.bind(this)}static#c=["isConnected","pressure",...be.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#c}get eventTypes(){return $e.#c}#Ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ot.addEventListener(e,t,s)}#l(e){this.#Ot.dispatchEvent(e)}removeEventListener(e,t){return this.#Ot.removeEventListener(e,t)}static get Sides(){return be.InsoleSides}get sides(){return $e.Sides}#wn;get left(){return this.#wn}#Mn;get right(){return this.#Mn}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#qe(){Ue.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Ue.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#Ln),v(e,this.#Ln),t){case"left":this.#wn=e;break;case"right":this.#Mn=e}return Ue.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.#l({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Ue.log("device already assigned")}#Ln={connectionStatus:this.#kn.bind(this),isConnected:this.#Wn.bind(this),sensorData:this.#Nn.bind(this),getSensorConfiguration:this.#kn.bind(this)};#kn(e){this.#l({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#Wn(e){this.#kn(e),this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#It=new Oe;#Nn(e){this.#kn(e),this.#l({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#It.onDeviceSensorData(e)}#Rt(e,t){Ue.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t})}resetPressureRange(){this.#It.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#In=new $e;static get shared(){return this.#In}static{be.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#In.assignInsole(t)}))}}const Pe=h("ServerUtils",{log:!1}),Fe=3e7;function Ve(e,...t){Pe.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=A(...t.data),n=s.byteLength;Pe.assertEnumWithError(t.type,e);return A(e.indexOf(t.type),Uint16Array.from([n]),s)}));return Pe.log("messageBuffers",...s),A(...s)}const Be=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function _e(...e){return Ve(Be,...e)}function ze(...e){return Pe.log("createDeviceMessage",...e),Ve(be.EventTypes,...e)}function qe(...e){return Ve(H.MessageTypes,...e)}const je=_e("ping"),He=_e("pong");_e("isScanningAvailable"),_e("isScanning"),_e("startScan"),_e("stopScan");const Ge=_e("discoveredDevices"),Je=h("WebSocketClientConnectionManager",{log:!0});class Qe extends H{static get isSupported(){return e}static get type(){return"webSocketClient"}#Rn;get id(){return this.#Rn}set id(e){Je.assertTypeWithError(e,"string"),this.#Rn!=e?this.#Rn=e:Je.log("redundant id assignment")}#_t=!1;get isConnected(){return this.#_t}set isConnected(e){Je.assertTypeWithError(e,"boolean"),this.#_t!=e?(this.#_t=e,this.status=this.#_t?"connected":"not connected",this.#_t&&this.#An()):Je.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":Je.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),Je.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){Je.log({dataView:e}),V(e,be.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));Je.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":this.onMessageReceived(s,t);break;default:Je.error(`uncaught messageType "${s}"`)}}),!0)}#An(){this.sendWebSocketMessage(...be.AllInformationConnectionMessages)}}const Ze=h("WebSocketClient",{log:!0});class Ke{static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Ke.#c}#Ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ot.addEventListener(e,t,s)}#l(e){this.#Ot.dispatchEvent(e)}removeEventListener(e,t){return this.#Ot.removeEventListener(e,t)}#xn;get webSocket(){return this.#xn}set webSocket(e){this.#xn!=e?(Ze.log("assigning webSocket",e),this.#xn&&p(this.#xn,this.#On),v(e,this.#On),this.#xn=e,Ze.log("assigned webSocket")):Ze.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Un(){Ze.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#$n(){Ze.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#$n(),this.#Pn="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Un(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Pn="disconnecting",this.webSocket.close()}reconnect(){this.#$n(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#Ht=!0;static get ReconnectOnDisconnection(){return this.#Ht}static set ReconnectOnDisconnection(e){Ze.assertTypeWithError(e,"boolean"),this.#Ht=e}#Gt=Ke.#Ht;get reconnectOnDisconnection(){return this.#Gt}set reconnectOnDisconnection(e){Ze.assertTypeWithError(e,"boolean"),this.#Gt=e}#Fn(e){this.#Un(),this.#xn.send(e)}#Vn(...e){this.#Fn(_e(...e))}#On={open:this.#Bn.bind(this),message:this.#_n.bind(this),close:this.#zn.bind(this),error:this.#qn.bind(this)};#Bn(e){Ze.log("webSocket.open",e),this.#jn.start(),this.#Pn="connected"}async#_n(e){Ze.log("webSocket.message",e),this.#jn.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Hn(s)}#zn(e){Ze.log("webSocket.close",e),this.#Pn="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#jn.stop(),this.#Gt&&setTimeout((()=>{this.reconnect()}),3e3)}#qn(e){Ze.log("webSocket.error",e)}#Gn="not connected";get#Pn(){return this.#Gn}set#Pn(e){switch(Ze.assertTypeWithError(e,"string"),Ze.log({newConnectionStatus:e}),this.#Gn=e,this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e){case"connected":case"not connected":this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#Vn("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Jn=!1,this.#cn=!1)}}get connectionStatus(){return this.#Pn}#Hn(e){Ze.log("parseMessage",{dataView:e}),V(e,Be,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#Qn();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));Ze.log({isScanningAvailable:e}),this.#Jn=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));Ze.log({isScanning:e}),this.#cn=e}break;case"discoveredDevice":{const{string:e}=F(t,n);Ze.log({discoveredDeviceString:e});const s=JSON.parse(e);Ze.log({discoveredDevice:s}),this.#Os(s)}break;case"expiredDiscoveredDevice":{const{string:e}=F(t,n);this.#bn(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=F(t,n);Ze.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);Ze.log({connectedDeviceIds:s}),this.#Zn(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=F(t,n);n=s;const i=this.#Kn[e];Ze.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=U(t,n);r.onWebSocketMessage(a)}break;default:Ze.error(`uncaught messageType "${s}"`)}}),!0)}#jn=new ye(this.#Xn.bind(this),Fe);#Xn(){this.#Vn("ping")}#Qn(){this.#Vn("pong")}#Yn=!1;get#Jn(){return this.#Yn}set#Jn(e){Ze.assertTypeWithError(e,"boolean"),this.#Yn=e,this.#l({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#ei()}get isScanningAvailable(){return this.#Jn}#ti(){this.#Un(),Ze.assertWithError(this.isScanningAvailable,"scanning is not available")}#si(){this.#Vn("isScanningAvailable")}#on=!1;get#cn(){return this.#on}set#cn(e){Ze.assertTypeWithError(e,"boolean"),this.#on=e,this.#l({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#cn}#ei(){this.#Vn("isScanning")}#Ps(){Ze.assertWithError(this.isScanning,"is not scanning")}#Fs(){Ze.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Fs(),this.#Vn("startScan")}stopScan(){this.#Ps(),this.#Vn("stopScan")}toggleScan(){this.#ti(),this.isScanning?this.stopScan():this.startScan()}#Vs={};get discoveredDevices(){return this.#Vs}#Os(e){Ze.log({discoveredDevice:e}),this.#Vs[e.id]=e,this.#l({type:"discoveredDevice",message:{discoveredDevice:e}})}#ni(){this.#Fn(Ge)}#bn(e){Ze.log({expiredDeviceId:e});const t=this.#Vs[e];t?(Ze.log({expiredDiscoveredDevice:t}),delete this.#Vs[e],this.#l({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Ze.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#ii(e)}#ii(e){this.#Un(),Ze.assertTypeWithError(e,"string");const t=this.#ri(e);return t.connect(),t}#ai(e){this.#Fn(this.#oi(e))}#oi(e){return _e({type:"connectToDevice",data:e})}#yn(e){const t=new be,s=new Qe;return s.id=e,s.sendWebSocketMessage=this.#ci.bind(this,e),s.sendWebSocketConnectMessage=this.#ai.bind(this,e),s.sendWebSocketDisconnectMessage=this.#li.bind(this,e),t.connectionManager=s,t}#ri(e){let t=this.#Kn[e];return t||(t=this.#yn(e),this.#Kn[e]=t),t}#Zn(e){Ze.log({deviceIds:e}),e.forEach((e=>{this.#ri(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#hi(e)}#hi(e){this.#Un(),Ze.assertTypeWithError(e,"string");const t=this.devices[e];return Ze.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#li(e){this.#Fn(this.#gi(e))}#gi(e){return _e({type:"disconnectFromDevice",data:e})}#ci(e,...t){this.#Fn(this.#di(e,...t))}#di(e,...t){return _e({type:"deviceMessage",data:[e,qe(...t)]})}#Kn={};get devices(){return this.#Kn}}const Xe=h("BaseServer",{log:!0});class Ye{#Be(){Xe.assertWithError(this.constructor!=Ye,`${this.constructor.name} must be subclassed`)}static#c=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#c}get eventTypes(){return Ye.#c}#Ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ot.addEventListener(e,t,s)}dispatchEvent(e){this.#Ot.dispatchEvent(e)}removeEventListener(e,t){return this.#Ot.removeEventListener(e,t)}constructor(){this.#Be(),Xe.assertWithError(Ie,"no scanner defined"),v(Ie,this.#ui),v(be,this.#vi),v(this,this.#pi)}get numberOfClients(){return 0}static#fi=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#fi}static set ClearSensorConfigurationsWhenNoClients(e){Xe.assertTypeWithError(e,"boolean"),this.#fi=e}#mi=Ye.#fi;get clearSensorConfigurationsWhenNoClients(){return this.#mi}set clearSensorConfigurationsWhenNoClients(e){Xe.assertTypeWithError(e,"boolean"),this.#mi=e}#pi={clientConnected:this.#bi.bind(this),clientDisconnected:this.#Si.bind(this)};#bi(e){e.message.client,Xe.log("onClientConnected")}#Si(e){e.message.client,Xe.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&be.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){Xe.log("broadcasting",e)}#ui={isAvailable:this.#yi.bind(this),isScanning:this.#Di.bind(this),discoveredDevice:this.#Ci.bind(this),expiredDiscoveredDevice:this.#bn.bind(this)};#yi(e){this.broadcastMessage(this.#Ti)}get#Ti(){return _e({type:"isScanningAvailable",data:Ie.isAvailable})}#Di(e){this.broadcastMessage(this.#Ei)}get#Ei(){return _e({type:"isScanning",data:Ie.isScanning})}#Ci(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#wi(t))}#wi(e){return _e({type:"discoveredDevice",data:e})}#bn(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#Mi(t))}#Mi(e){return _e({type:"expiredDiscoveredDevice",data:e.id})}get#Li(){return _e(...Ie.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#ki(){return _e({type:"connectedDevices",data:JSON.stringify(be.ConnectedDevices.map((e=>e.id)))})}#Wi={connectionMessage:this.#Ni.bind(this)};#di(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#Ni(e){const t=e.target;if(Xe.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#Ii(t,this.#di(t,s,n)))}#vi={deviceConnected:this.#Ri.bind(this),deviceDisconnected:this.#Ai.bind(this),deviceIsConnected:this.#Wn.bind(this)};#Ri(e){const t=e.message.device;Xe.log("onDeviceConnected",t.id),v(t,this.#Wi)}#Ai(e){const t=e.message.device;Xe.log("onDeviceDisconnected",t.id),p(t,this.#Wi)}#Wn(e){const t=e.message.device;Xe.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#xi(t))}#xi(e){return this.#Ii(e,{type:"isConnected",data:e.isConnected})}#Ii(e,...t){return _e({type:"deviceMessage",data:[e.id,ze(...t)]})}parseClientMessage(e){let t=[];if(V(e,Be,((e,s)=>{const n=e;switch(n){case"ping":t.push(He);break;case"pong":break;case"isScanningAvailable":t.push(this.#Ti);break;case"isScanning":t.push(this.#Ei);break;case"startScan":Ie.startScan();break;case"stopScan":Ie.stopScan();break;case"discoveredDevices":t.push(this.#Li);break;case"connectToDevice":{const{string:e}=F(s);Ie.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=F(s),t=be.ConnectedDevices.find((t=>t.id==e));if(!t){Xe.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#ki);break;case"deviceMessage":{const{string:e,byteOffset:n}=F(s),i=be.ConnectedDevices.find((t=>t.id==e));if(!i){Xe.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:Xe.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return A(t)}parseClientDeviceMessage(e,t){Xe.log("onDeviceMessage",e.id,t);let s=[];if(V(t,H.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":s.push(this.#di(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:Xe.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#Ii(e,...s)}}const et=h("WebSocketServer",{log:!0});t&&require("ws");var tt={setAllConsoleLevelFlags:function(e){l.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){l.setLevelFlagsForType(e,t)},Device:be,DevicePair:$e,WebSocketClient:Ke,WebSocketServer:class extends Ye{get numberOfClients(){return this.#Oi?.clients.size||0}#Oi;get server(){return this.#Oi}set server(e){this.#Oi!=e?(et.log("assigning server..."),this.#Oi&&(et.log("clearing existing server..."),p(this.#Oi,this.#pi)),v(e,this.#pi),this.#Oi=e,et.log("assigned server")):et.log("redundant WebSocket assignment")}#pi={close:this.#Ui.bind(this),connection:this.#$i.bind(this),error:this.#Pi.bind(this),headers:this.#Fi.bind(this),listening:this.#Vi.bind(this)};#Ui(){et.log("server.close")}#$i(e){et.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new ye((()=>this.#Bi(e)),Fe),e.pingClientTimer.start(),v(e,this.#_i),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#Pi(e){et.error(e)}#Fi(){}#Vi(){et.log("server.listening")}#_i={open:this.#zi.bind(this),message:this.#qi.bind(this),close:this.#ji.bind(this),error:this.#Hi.bind(this)};#zi(e){et.log("client.open")}#qi(e){et.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(x(e.data));this.#Gi(t,s)}#ji(e){et.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#_i),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#Hi(e){et.log("client.error")}#Gi(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Bi(e){e.isAlive?(e.isAlive=!1,e.send(je)):e.terminate()}},Scanner:Ie};return tt}));
