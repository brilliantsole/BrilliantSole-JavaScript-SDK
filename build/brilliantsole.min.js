/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class h{static#e={};constructor(e){if(h.#e[e])throw new Error(`"${e}" console already exists`);h.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new h(e)}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function g(e,t){return h.create(e,t)}function l(e){return e[0].toUpperCase()+e.slice(1)}const d=g("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const m=g("ConnectionManager");class f{static#o=["deviceInformation","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorData","triggerVibration"];static get MessageTypes(){return this.#o}get id(){this.#c("id")}onStatusUpdated;onMessageReceived;static#h(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#c(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#h("type")}get type(){return this.constructor.type}#g(){m.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){m.assertWithError(this.constructor!=f,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#g()}#d="not connected";get status(){return this.#d}set status(e){m.assertTypeWithError(e,"string"),this.#d!=e?(m.log(`new connection status "${e}"`),this.#d=e,this.onStatusUpdated?.(this.status)):m.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#u(){m.assertWithError(!this.isConnected,"device is already connected")}#v(){m.assertWithError("connecting"!=this.status,"device is already connecting")}#p(){m.assertWithError(this.isConnected,"device is not connected")}#m(){m.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#f(){this.#p(),this.#m()}async connect(){this.#u(),this.#v(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#u(),this.#v(),m.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#p(),this.#m(),this.status="disconnecting",m.log("disconnecting from device...")}async sendMessage(e,t){this.#f(),m.log("sending message",{messageType:e,data:t})}}if(t){var S=require("webbluetooth").BluetoothUUID}if(e)S=window.BluetoothUUID;function b(e){return`ea6da725-2000-4f9b-893d-c3913e33b3e${e}`}function y(e){return S.getCharacteristic(e)}function D(e){return S.getService(e)}const E=Object.freeze({services:{deviceInformation:{uuid:D("device_information"),characteristics:{manufacturerName:{uuid:y("manufacturer_name_string")},modelNumber:{uuid:y("model_number_string")},hardwareRevision:{uuid:y("hardware_revision_string")},firmwareRevision:{uuid:y("firmware_revision_string")},softwareRevision:{uuid:y("software_revision_string")},pnpId:{uuid:y("pnp_id")},serialNumber:{uuid:y("serial_number_string")}}},battery:{uuid:D("battery_service"),characteristics:{batteryLevel:{uuid:y("battery_level")}}},main:{uuid:b(0),characteristics:{name:{uuid:b(1)},type:{uuid:b(2)},sensorConfiguration:{uuid:b(3)},sensorData:{uuid:b(4)},vibration:{uuid:b(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),C=E.serviceUUIDs,w=E.optionalServiceUUIDs,M=[...C,...w];function T(e){return E.getServiceNameFromUUID(e)}const L=[],W=[],N=[];function k(e){return E.getCharacteristicNameFromUUID(e)}function R(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":t.read=!1}switch(e){case"batteryLevel":case"sensorData":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(E.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{C.includes(t.uuid)&&L.push(s.uuid),W.push(s.uuid),N.push(e)}))}),[]);const I=g("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var x={bluetooth:t}}if(e)x=window.navigator;class A extends f{get id(){return this.device?.id}#S={characteristicvaluechanged:this.#b.bind(this)};#y={gattserverdisconnected:this.#D.bind(this)};static get isSupported(){return"bluetooth"in x}static get type(){return"webBluetooth"}#E;get device(){return this.#E}set device(e){this.#E!=e?(this.#E&&p(this.#E,this.#y),e&&v(e,this.#y),this.#E=e):I.log("tried to assign the same BluetoothDevice")}get server(){return this.#E?.gatt}get isConnected(){return this.server?.connected}#C=new Map;#w=new Map;async connect(){await super.connect();try{const t=await x.bluetooth.requestDevice({filters:[{services:C}],optionalServices:e?w:[]});I.log("got BluetoothDevice"),this.device=t,I.log("connecting to device...");const s=await this.device.gatt.connect();I.log(`connected to device? ${s.connected}`),await this.#M(),I.log("fully connected"),this.status="connected"}catch(e){I.error(e),this.status="not connected",this.server?.disconnect(),this.#T()}}async#M(){this.#T(),I.log("getting services...");const e=await this.server.getPrimaryServices();I.log("got services",e.length),I.log("getting characteristics...");for(const t in e){const i=e[t];I.log({service:i});const r=T(i.uuid);if(I.assertWithError(r,`no name found for service uuid "${i.uuid}"`),I.log(`got "${r}" service`),"dfu"==r){I.log("skipping dfu service");continue}i._name=r,this.#C.set(r,i),I.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();I.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];I.log({characteristic:t});const i=k(t.uuid);I.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),I.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#w.set(i,t),v(t,this.#S);const o=t.properties||R(i);o.read&&(I.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#L(t)),o.notify&&(I.log(`starting notifications for "${i}" characteristic`),await t.startNotifications())}}}#T(){this.device&&p(this.device,this.#y),this.#w.forEach((e=>{p(e,this.#S)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#T(),this.status="not connected"}#b(e){I.log("oncharacteristicvaluechanged");const t=e.target;this.#L(t)}#L(e){I.log("onCharacteristicValue");const t=e._name;I.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),I.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;switch(I.assertWithError(s,`no data found for "${t}" characteristic`),I.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),t){case"manufacturerName":this.onMessageReceived("manufacturerName",s);break;case"modelNumber":this.onMessageReceived("modelNumber",s);break;case"softwareRevision":this.onMessageReceived("softwareRevision",s);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",s);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",s);break;case"pnpId":this.onMessageReceived("pnpId",s);break;case"serialNumber":this.onMessageReceived("serialNumber",s);break;case"batteryLevel":this.onMessageReceived("batteryLevel",s);break;case"name":this.onMessageReceived("getName",s);break;case"type":this.onMessageReceived("getType",s);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",s);break;case"sensorData":this.onMessageReceived("sensorData",s);break;default:throw new Error(`uncaught characteristicName "${t}"`)}}#D(e){I.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s,n;switch(await super.sendMessage(...arguments),e){case"setName":n="name",s=this.#w.get(n);break;case"setType":n="type",s=this.#w.get(n);break;case"setSensorConfiguration":n="sensorConfiguration",s=this.#w.get(n);break;case"triggerVibration":n="vibration",s=this.#w.get(n);break;default:throw Error(`uncaught messageType "${e}"`)}I.assert(s,"no characteristic found"),t instanceof DataView&&(t=t.buffer),await s.writeValueWithResponse(t);(s.properties||R(n)).read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),I.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(I.log("successfully reconnected!"),await this.#M(),this.status="connected"):(I.log("unable to reconnect"),this.status="not connected")}}const O=g("ArrayBufferUtils",{log:!1}),P=new TextEncoder;function $(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return _(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return _(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function U(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function _(e){const t=P.encode(e);return $(t.byteLength,t)}function V(e,t,s){let n;return s&&(n=e.byteOffset+t+s),O.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const B=g("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class z extends f{get id(){return this.#W?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#W?.state}async connect(){await super.connect(),await this.#W.connectAsync()}async disconnect(){await super.disconnect(),await this.#W.disconnectAsync()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return this.#W.connectable}async reconnect(){await super.reconnect(),B.log("attempting to reconnect..."),this.connect()}#W;get noblePeripheral(){return this.#W}set noblePeripheral(e){B.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(B.log("newNoblePeripheral",e.id),this.#W&&(p(this.#W,this.#N),delete this.#W._connectionManager),e&&(e._connectionManager=this,v(e,this.#N)),this.#W=e):B.log("attempted to assign duplicate noblePeripheral")}#N={connect:this.#k,disconnect:this.#R,rssiUpdate:this.#I,servicesDiscover:this.#x};async#k(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){B.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#W.discoverServicesAsync(M),await this.#A()}async#R(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){B.log("onNoblePeripheralDisconnect",e.id),await this.#A()}async#A(){switch(B.log(`noblePeripheral ${this.id} state ${this.#W.state}`),this.#W.state){case"connected":case"connecting":break;case"disconnected":this.#T(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":B.error("noblePeripheral error");break;default:B.log(`uncaught noblePeripheral state ${this.#W.state}`)}}#T(){B.log("removing noblePeripheral eventListeners"),this.#C.forEach((e=>{p(e,this.#O)})),this.#C.clear(),this.#w.forEach((e=>{p(e,this.#P)})),this.#w.clear()}async#I(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){B.log("onNoblePeripheralRssiUpdate",e.id,t)}async#x(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){B.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];B.log("service",s.uuid);const n=T(s.uuid);B.assertWithError(n,`no name found for service uuid "${s.uuid}"`),B.log({serviceName:n}),this.#C.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#O),await s.discoverCharacteristicsAsync()}}#C=new Map;#O={characteristicsDiscover:this.#$};async#$(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){B.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];B.log("characteristic",s.uuid);const n=k(s.uuid);B.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),B.log({characteristicName:n}),this.#w.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#P),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#U&&(this.status="connected")}#P={data:this.#_,write:this.#V,notify:this.#B};#w=new Map;get#U(){return N.every((e=>this.#w.has(e)))}#_(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){B.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(U(t)),i=e._name;switch(B.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),i){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${i}"`)}}#V(){B.log("onNobleCharacteristicWrite",...arguments)}onNobleCharacteristicWrite(){}#B(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){B.log("onNobleCharacteristicNotify",e.uuid,t)}}const F={min:1/0,max:-1/0};class q{#z=Object.assign({},F);reset(){Object.assign(this.#z,F)}update(e){this.#z.min=Math.min(e,this.#z.min),this.#z.max=Math.max(e,this.#z.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#z.min,this.#z.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class j{#z={x:new q,y:new q};reset(){this.#z.x.reset(),this.#z.y.reset()}update(e){this.#z.x.update(e.x),this.#z.y.update(e.y)}getNormalization(e){return{x:this.#z.x.getNormalization(e.x),y:this.#z.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const H=g("PressureSensorDataManager",{log:!0});class G{#F;get deviceType(){return this.#F}set deviceType(e){H.assertTypeWithError(e,"string"),this.#F!=e?(H.log({newDeviceType:e}),this.#F=e,this.#q(),this.resetRange()):H.log(`redundant deviceType assignment "${e}"`)}static#j=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#j}get names(){return G.Names}static#H={pressure:2**-16};static get Scalars(){return this.#H}get scalars(){return G.Scalars}static#G=8;static get NumberOfPressureSensors(){return this.#G}get numberOfPressureSensors(){return G.NumberOfPressureSensors}static#Z=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#Z}#Q;get pressureSensorPositions(){return this.#Q}#q(){const e=G.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));H.log({pressureSensorPositions:e}),this.#Q=e}#J=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new q));#K=new j;resetRange(){this.#J.forEach((e=>e.reset())),this.#K.reset()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const i=e.getUint16(t,!0),r=this.#J[n].updateAndGetNormalization(i),a=this.pressureSensorPositions[n],o=this.names[n];s.sensors[n]={rawValue:i,normalizedValue:r,position:a,name:o},s.rawSum+=i,s.normalizedSum+=r/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#K.updateAndGetNormalization(s.center)),H.log({pressure:s}),s}}const Z=g("MotionSensorDataManager",{log:!1});class Q{#F;get deviceType(){return this.#F}set deviceType(e){Z.assertTypeWithError(e,"string"),this.#F!=e?(Z.log({newDeviceType:e}),this.#F=e):Z.log(`redundant deviceType assignment "${e}"`)}static#H={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#H}get scalars(){return Q.Scalars}static#X=6;static get Vector3Size(){return this.#X}get vector3Size(){return Q.Vector3Size}parseVector3(e,t,s){let[n,i,r]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:i,z:r};return Z.log({vector:a}),a}static#Y=8;static get QuaternionSize(){return this.#Y}get quaternionSize(){return Q.QuaternionSize}parseQuaternion(e,t,s){let[n,i,r,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:i,z:r,w:a};return Z.log({quaternion:o}),o}}g("BarometerSensorDataManager",{log:!0});class J{static#H={barometer:.78125};static get Scalars(){return this.#H}get scalars(){return J.Scalars}}const K=g("ParseUtils",{log:!0}),X=new TextDecoder;function Y(e,t=0){const s=e.getUint8(t++);return{string:X.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function ee(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),K.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),K.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=V(e,i,o);K.log({_dataView:c}),s(a,c),i+=o}}const te=g("SensorDataManager",{log:!1});class se{#F;get deviceType(){return this.#F}set deviceType(e){te.assertTypeWithError(e,"string"),this.#F!=e?(te.log({newDeviceType:e}),this.#F=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):te.log(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new G;motionSensorDataManager=new Q;barometerSensorDataManager=new J;static#ee=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#ee}get#te(){return se.Types}static AssertValidSensorType(e){te.assertTypeWithError(e,"string"),te.assertWithError(this.#ee.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){te.assertTypeWithError(e,"number"),te.assertWithError(e in this.#ee,`invalid sensorTypeEnum ${e}`)}onDataReceived;#se=0;#ne=0;clearTimestamp(){te.log("clearing sensorDataManager timestamp data"),this.#se=0,this.#ne=0}#ie(e,t){const s=e.getUint16(t,!0);s<this.#ne&&(this.#se+=65536),this.#ne=s;return s+this.#se}parse(e){te.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#ie(e,t);t+=2;ee(new DataView(e.buffer,t),se.Types,((e,t)=>{const n=e;let i;switch(n){case"pressure":i=this.pressureSensorDataManager.parsePressure(t,0);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":i=this.motionSensorDataManager.parseVector3(t,0,n);break;case"gameRotation":case"rotation":i=this.motionSensorDataManager.parseQuaternion(t,0,n);break;case"barometer":break;default:te.error(`uncaught sensorType "${n}"`)}te.assertWithError(i,`no value defined for sensorType "${n}"`),this.onDataReceived?.(n,{timestamp:s,[n]:i})}))}static get NumberOfPressureSensors(){return G.NumberOfPressureSensors}get numberOfPressureSensors(){return se.NumberOfPressureSensors}static get PressureSensorNames(){return G.Names}get pressureSensorNames(){return se.PressureSensorNames}}const ne=g("SensorConfigurationManager",{log:!1});class ie{#F;get deviceType(){return this.#F}set deviceType(e){ne.assertTypeWithError(e,"string"),this.#F!=e?(ne.log({newDeviceType:e}),this.#F=e):ne.log(`redundant deviceType assignment "${e}"`)}#re;#ae(e){ne.assertWithError(this.#re,"must get initial sensorConfiguration");const t=this.#re?.includes(e);return ne.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=se.Types[n];if(!i){ne.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);ne.log({sensorType:i,sensorRate:r}),t[i]=r}return ne.log({parsedSensorConfiguration:t}),this.#re=Object.keys(t),t}static#oe=65535;static get MaxSensorRate(){return this.#oe}get maxSensorRate(){return ie.MaxSensorRate}static#ce=5;static get SensorRateStep(){return this.#ce}get sensorRateStep(){return ie.SensorRateStep}static#he(e){ne.assertTypeWithError(e,"number"),ne.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),ne.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),ne.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ge(e){ie.#he(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#ae(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{se.AssertValidSensorType(t);const i=se.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#ge(r),s.setUint16(3*n+1,e[t],!0)})),ne.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const re=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ae=g("VibrationManager");class oe{static#le=["front","rear"];static get Locations(){return this.#le}get locations(){return oe.Locations}#de(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#ue(e){this.#ve(e),e.forEach((e=>{this.#de(e)}))}#pe(e){this.#ue(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ae.log({locationsBitmask:t}),ae.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ve(e){ae.assertWithError(Array.isArray(e),"passed non-array"),ae.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return re}get waveformEffects(){return oe.WaveformEffects}#me(e){ae.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#fe=1270;static get MaxWaveformEffectSegmentDelay(){return this.#fe}get maxWaveformEffectSegmentDelay(){return oe.MaxWaveformEffectSegmentDelay}#Se(e){if(null!=e.effect){const t=e.effect;this.#me(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ae.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ae.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#be(t)}}static#ye=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#ye}get maxWaveformEffectSegmentLoopCount(){return oe.MaxWaveformEffectSegmentLoopCount}#be(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#De=8;static get MaxNumberOfWaveformEffectSegments(){return this.#De}get maxNumberOfWaveformEffectSegments(){return oe.MaxNumberOfWaveformEffectSegments}#Ee(e){this.#ve(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Se(e)}))}static#Ce=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Ce}get maxWaveformEffectSequenceLoopCount(){return oe.MaxWaveformEffectSequenceLoopCount}#we(e){ae.assertTypeWithError(e,"number"),ae.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ae.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Me=2550;static get MaxWaveformSegmentDuration(){return this.#Me}get maxWaveformSegmentDuration(){return oe.MaxWaveformSegmentDuration}#Te(e){ae.assertTypeWithError(e.amplitude,"number"),ae.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ae.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ae.assertTypeWithError(e.duration,"number"),ae.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ae.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Le=20;static get MaxNumberOfWaveformSegments(){return this.#Le}get maxNumberOfWaveformSegments(){return oe.MaxNumberOfWaveformSegments}#We(e){this.#ve(e),ae.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Te(e)}))}createWaveformEffectsData(e,t,s=0){this.#Ee(t),this.#we(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ae.log({dataArray:n,dataView:o}),this.#Ne(e,"waveformEffect",o)}createWaveformData(e,t){this.#We(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ae.log({dataView:s}),this.#Ne(e,"waveform",s)}static#ee=["waveformEffect","waveform"];static get Types(){return this.#ee}get#te(){return oe.Types}#ke(e){ae.assertTypeWithError(e,"string"),ae.assertWithError(this.#te.includes(e),`invalid vibrationType "${e}"`)}#Ne(e,t,s){ae.assertWithError(s?.byteLength>0,"no data received");const n=this.#pe(e);this.#ke(t);const i=this.#te.indexOf(t);ae.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=$(n,i,s.byteLength,s);return ae.log({data:r}),r}}const ce=g("Device",{log:!0});class he{get id(){return this.#Re?.id}constructor(){this.#Ie.onDataReceived=this.#xe.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{he.#Ae(this)}))}static get#Oe(){return A}static#Pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage"];static get EventTypes(){return this.#Pe}get eventTypes(){return he.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}#Ue(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}#Re;get connectionManager(){return this.#Re}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#_e.bind(this),e.onMessageReceived=this.#Ve.bind(this)),this.#Re=e,ce.log("assigned new connectionManager",this.#Re)):ce.log("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new he.#Oe),this.#Be(),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#p(){ce.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#Be(),this.connectionManager?.reconnect()}static#ze=!1;static get ReconnectOnDisconnection(){return this.#ze}static set ReconnectOnDisconnection(e){ce.assertTypeWithError(e,"boolean"),this.#ze=e}#Fe=he.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Fe}set reconnectOnDisconnection(e){ce.assertTypeWithError(e,"boolean"),this.#Fe=e}#qe;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#p(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#Re?.status||"not connected"}#_e(e){switch(ce.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(ce.log("starting reconnect interval..."),this.#qe=setInterval((()=>{ce.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#qe&&(ce.log("clearing reconnect interval"),clearInterval(this.#qe),this.#qe=void 0),this.#Ue({type:"connectionStatus",message:{connectionStatus:e}}),this.#Ue({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}})}}#Be(){this.#je=null,this.#He=null,this.#Ge=null;for(const e in this.#Ze)this.#Ze[e]=null}#Ve(e,t){switch(ce.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Qe.decode(t);ce.log({manufacturerName:s}),this.#Je({manufacturerName:s});break;case"modelNumber":const n=this.#Qe.decode(t);ce.log({modelNumber:n}),this.#Je({modelNumber:n});break;case"softwareRevision":const i=this.#Qe.decode(t);ce.log({softwareRevision:i}),this.#Je({softwareRevision:i});break;case"hardwareRevision":const r=this.#Qe.decode(t);ce.log({hardwareRevision:r}),this.#Je({hardwareRevision:r});break;case"firmwareRevision":const a=this.#Qe.decode(t);ce.log({firmwareRevision:a}),this.#Je({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),ce.log({pnpId:o}),this.#Je({pnpId:o});break;case"serialNumber":const c=this.#Qe.decode(t);ce.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);ce.log("received battery level",{batteryLevel:h}),this.#Ke(h);break;case"getName":const g=this.#Qe.decode(t);ce.log({name:g}),this.#Xe(g);break;case"getType":const l=t.getUint8(0),d=this.#te[l];ce.log({typeEnum:l,type:d}),this.#Ye(d);break;case"getSensorConfiguration":const u=this.#et.parse(t);ce.log({sensorConfiguration:u}),this.#tt(u);break;case"sensorData":this.#Ie.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}this.latestConnectionMessage.set(e,t),this.#Ue({type:"connectionMessage",message:{messageType:e,dataView:t}})}latestConnectionMessage=new Map;static#st=new TextEncoder;get#nt(){return he.#st}static#it=new TextDecoder;get#Qe(){return he.#it}#Ze={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Ze}get#rt(){return Object.values(this.#Ze).every((e=>null!=e))}#Je(e){ce.log({partialDeviceInformation:e});for(const t in e)this.#Ue({type:t,message:{[t]:e[t]}});Object.assign(this.#Ze,e),ce.log({deviceInformation:this.#Ze}),this.#rt&&(ce.log("completed deviceInformation"),this.#Ue({type:"deviceInformation",message:{deviceInformation:this.#Ze}}))}#Ge=null;get batteryLevel(){return this.#Ge}#Ke(e){ce.assertTypeWithError(e,"number"),this.#Ge!=e?(this.#Ge=e,ce.log({updatedBatteryLevel:this.#Ge}),this.#Ue({type:"batteryLevel",message:{batteryLevel:this.#Ge}})):ce.log(`duplicate batteryLevel assignment ${e}`)}#je;get name(){return this.#je}#Xe(e){ce.assertTypeWithError(e,"string"),this.#je=e,ce.log({updatedName:this.#je}),this.#Ue({type:"getName",message:{name:this.#je}})}static get MinNameLength(){return 2}get minNameLength(){return he.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return he.MaxNameLength}async setName(e){this.#p(),ce.assertTypeWithError(e,"string"),ce.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),ce.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#nt.encode(e);ce.log({setNameData:t}),await this.#Re.sendMessage("setName",t)}static#ee=["leftInsole","rightInsole"];static get Types(){return this.#ee}get#te(){return he.Types}#He;get type(){return this.#He}get typeEnum(){return he.Types.indexOf(this.type)}#at(e){ce.assertTypeWithError(e,"string"),ce.assertWithError(this.#te.includes(e),`invalid type "${e}"`)}#Ye(e){this.#at(e),e!=this.type?(this.#He=e,ce.log({updatedType:this.#He}),this.#Ie.deviceType=this.#He,this.#et.deviceType=this.#He,this.#Ue({type:"getType",message:{type:this.#He}}),he.#ot&&he.#ct(this)):ce.log("redundant type assignment")}async setType(e){this.#p(),this.#at(e);const t=this.#te.indexOf(e),s=Uint8Array.from([t]);ce.log({setTypeData:s}),await this.#Re.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#ht=["left","right"];static get InsoleSides(){return this.#ht}get insoleSides(){return he.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return se.Types}get sensorTypes(){return he.SensorTypes}static get PressureSensorNames(){return se.PressureSensorNames}get pressureSensorNames(){return he.PressureSensorNames}static get NumberOfPressureSensors(){return se.NumberOfPressureSensors}get numberOfPressureSensors(){return he.NumberOfPressureSensors}#et=new ie;#gt;get sensorConfiguration(){return this.#gt}get sensorConfigurationData(){return this.#et.createData(this.sensorConfiguration)}static get MaxSensorRate(){return ie.MaxSensorRate}static get SensorRateStep(){return ie.SensorRateStep}#tt(e){this.#gt=e,ce.log({updatedSensorConfiguration:this.#gt}),this.#et.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(ce.log("clearing sensorDataManager timestamp..."),this.#Ie.clearTimestamp()),this.#Ue({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#p(),ce.log({newSensorConfiguration:e});const t=this.#et.createData(e);ce.log({setSensorConfigurationData:t}),await this.#Re.sendMessage("setSensorConfiguration",t)}static#lt=!0;static get ClearSensorConfigurationOnLeave(){return this.#lt}static set ClearSensorConfigurationOnLeave(e){ce.assertTypeWithError(e,"boolean"),this.#lt=e}#dt=he.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#dt}set clearSensorConfigurationOnLeave(e){ce.assertTypeWithError(e,"boolean"),this.#dt=e}static#ut={};static get ZeroSensorConfiguration(){return this.#ut}static{this.SensorTypes.forEach((e=>{this.#ut[e]=0}))}get zeroSensorConfiguration(){return he.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#Ie=new se;#xe(e,t){ce.log({sensorType:e,sensorData:t}),this.#Ue({type:e,message:t}),this.#Ue({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#Ie.pressureSensorDataManager.resetRange()}#vt=new oe;static get VibrationLocations(){return oe.Locations}static get VibrationTypes(){return oe.Types}static get VibrationWaveformEffects(){return oe.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return oe.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return oe.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return oe.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return oe.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return oe.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return oe.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let i;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:r}=t;i=this.#vt.createWaveformEffectsData(s,n,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;i=this.#vt.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}ce.log({type:n,dataView:i}),t=$(t,i)})),await this.#Re.sendMessage("triggerVibration",t)}static#pt=[];static get ConnectedDevices(){return this.#pt}static#ot=!1;static get UseLocalStorage(){return this.#ot}static set UseLocalStorage(e){this.#mt(),ce.assertTypeWithError(e,"boolean"),this.#ot=e,this.#ot&&!this.#ft&&this.#St()}static#bt={devices:[]};static#ft;static get CanUseLocalStorage(){return e&&window.localStorage}static#mt(){ce.assertWithError(e,"localStorage is only available in the browser"),ce.assertWithError(window.localStorage,"localStorage not found")}static#yt="BS.Device";static#Dt(){this.#mt(),localStorage.setItem(this.#yt,JSON.stringify(this.#ft))}static async#St(){this.#mt();let e=localStorage.getItem(this.#yt);if("string"!=typeof e)return ce.log("no info found in localStorage"),this.#ft=Object.assign({},this.#bt),void this.#Dt();try{const t=JSON.parse(e);ce.log({configuration:t}),this.#ft=t,this.CanGetDevices&&await this.GetDevices()}catch(e){ce.error(e)}}static#ct(e){if("webBluetooth"!=e.connectionType)return void ce.log("localStorage is only for webBluetooth devices");this.#mt();const t=this.#ft.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#ft.devices[t].type=e.type,this.#Dt())}static#Et=[];static get AvailableDevices(){return this.#Et}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void ce.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void ce.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void ce.warn("bluetooth.getDevices() is not available in this browser");this.#ft||this.#St();const t=this.#ft;if(!t.devices||0==t.devices.length)return void ce.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return ce.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#Et.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new he,a=new A;a.device=e,e.name&&r.#Xe(e.name),r.#Ye(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#Ct(),this.AvailableDevices}static#wt=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#wt}static#Mt=new u(this,this.#wt);static AddEventListener(e,t,s){this.#Mt.addEventListener(e,t,s)}static#Tt(e){this.#Mt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Mt.removeEventListener(e,t)}static#Ae(e){if(e.isConnected)if(this.#pt.includes(e))ce.log("device already included");else{if(ce.log("adding device",e),this.#pt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#ft.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#ft.devices.push(t):this.#ft.devices[s]=t,this.#Dt()}this.#Tt({type:"deviceConnected",message:{device:e}}),this.#Tt({type:"deviceIsConnected",message:{device:e}})}else this.#pt.includes(e)?(ce.log("removing device",e),this.#pt.splice(this.#pt.indexOf(e),1),this.#Tt({type:"deviceDisconnected",message:{device:e}}),this.#Tt({type:"deviceIsConnected",message:{device:e}})):ce.log("device already not included");this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)&&(this.AvailableDevices.push(e),this.#Ct())}static#Ct(){ce.log({AvailableDevices:this.AvailableDevices}),this.#Tt({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new he;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}}const ge=g("Timer",{log:!1});class le{#Lt;get callback(){return this.#Lt}set callback(e){ge.assertTypeWithError(e,"function"),ge.log({newCallback:e}),this.#Lt=e,this.isRunning&&this.restart()}#Wt;get interval(){return this.#Wt}set interval(e){ge.assertTypeWithError(e,"number"),ge.assertWithError(e>0,"interval must be above 0"),ge.log({newInterval:e}),this.#Wt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#Nt=null;get isRunning(){return null!=this.#Nt}start(){this.isRunning?ge.log("interval already running"):(ge.log("starting interval"),this.#Nt=setInterval(this.#Lt,this.#Wt))}stop(){this.isRunning?(ge.log("stopping interval"),clearInterval(this.#Nt),this.#Nt=null):ge.log("interval already not running")}restart(){this.stop(),this.start()}}const de=g("BaseScanner");class ue{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#g(){de.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#l(){de.assertWithError(this.constructor!=ue,`${this.constructor.name} must be subclassed`)}constructor(){this.#l(),this.#g(),v(this,this.#kt)}#kt={discoveredDevice:this.#Rt.bind(this),isScanning:this.#It.bind(this)};static#Pe=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Pe}get eventTypes(){return ue.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}dispatchEvent(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}get isAvailable(){return!1}#xt(){de.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#At(){de.assertWithError(this.isScanning,"not scanning")}#Ot(){de.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#xt(),this.#Ot()}stopScan(){this.#At()}#It(){this.isScanning?(this.#Pt={},this.#$t={}):this.#Ut.stop()}#Pt={};get discoveredDevices(){return this.#Pt}get discoveredDevicesArray(){return Object.values(this.#Pt).sort(((e,t)=>this.#$t[e.id]-this.#$t[t.id]))}#_t(e){de.assertWithError(this.#Pt[e],`no discovered device with id "${e}"`)}#Rt(e){const t=e.message.discoveredDevice;this.#Pt[t.id]=t,this.#$t[t.id]=Date.now(),this.#Ut.start()}#$t={};static#Vt=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#Vt}get#Bt(){return ue.DiscoveredDeviceExpirationTimeout}#Ut=new le(this.#zt.bind(this),1e3);#zt(){const e=Object.entries(this.#Pt);if(0==e.length)return void this.#Ut.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#$t[e];console.log(t-n),t-n>this.#Bt&&(de.log("discovered device timeout"),delete this.#Pt[e],delete this.#$t[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#xt()}get canReset(){return!1}reset(){de.log("resetting...")}}const ve=g("NobleScanner",{log:!0});let pe=!1;if(t){var me=require("@abandonware/noble");pe=!0}class fe extends ue{static get isSupported(){return pe}#Ft=!1;get#qt(){return this.#Ft}set#qt(e){ve.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Ft=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ve.log("duplicate isScanning assignment")}get isScanning(){return this.#qt}#jt="unknown";get#Ht(){return this.#jt}set#Ht(e){ve.assertTypeWithError(e,"string"),this.#Ht!=e?(this.#jt=e,ve.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ve.log("duplicate nobleState assignment")}#Gt={scanStart:this.#Zt.bind(this),scanStop:this.#Qt.bind(this),stateChange:this.#Jt.bind(this),discover:this.#Kt.bind(this)};#Zt(){ve.log("OnNobleScanStart"),this.#qt=!0}#Qt(){ve.log("OnNobleScanStop"),this.#qt=!1}#Jt(e){ve.log("onNobleStateChange",e),this.#Ht=e}#Kt(e){let t;ve.log("onNobleDiscover",e.id),this.#Xt[e.id]||(e._scanner=this,this.#Xt[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=C[0].replaceAll("-",""),n=s.find((t=>t.uuid==e));if(n){const e=n.data.readUint8(0);t=he.Types[e]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(me,this.#Gt),v(this,this.#Yt)}get isAvailable(){return"poweredOn"==this.#Ht}startScan(){super.startScan(),me.startScanningAsync(C,!0)}stopScan(){super.stopScan(),me.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),me.reset()}#Yt={expiredDiscoveredDevice:this.#es.bind(this)};#es(e){const t=e.message.discoveredDevice;this.#Xt[t.id]&&delete this.#Xt[t.id]}#Xt={};#ts(e){ve.assertTypeWithError(e,"string"),ve.assertWithError(this.#Xt[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#ts(e);const t=this.#Xt[e];ve.log("connecting to discoveredDevice...",e);let s=he.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#ss(t),await s.connect())}#ss(e){const t=new he,s=new z;return s.noblePeripheral=e,t.connectionManager=s,t}}const Se=g("Scanner",{log:!1});let be;fe.isSupported?(Se.log("using NobleScanner"),be=new fe):Se.log("Scanner not available");var ye=be;const De=g("DevicePairPressureSensorDataManager",{log:!0});class Ee{static get Sides(){return he.InsoleSides}get sides(){return he.InsoleSides}#ns={};#K=new j;resetPressureRange(){this.#K.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(De.log({pressure:t,insoleSide:s}),this.#ns[s]=t,this.#is)return this.#rs();De.log("doesn't have all pressure data yet...")}get#is(){return this.sides.every((e=>e in this.#ns))}static#H={pressure:G.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#H}get scalars(){return Ee.Scalars}#rs(){this.scalars.pressure;const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#ns[t].rawSum,e.normalizedSum+=this.#ns[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#ns[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#K.updateAndGetNormalization(e.center)),De.log({devicePairPressure:e}),e}}const Ce=g("DevicePairSensorDataManager",{log:!0});class we{static get Sides(){return he.InsoleSides}get sides(){return he.InsoleSides}#as={};pressureSensorDataManager=new Ee;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(Ce.log({sensorType:s,timestamp:t,event:e}),this.#as[s]||(this.#as[s]={}),this.#as[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else Ce.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#as[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else Ce.log("no value received")}onDataReceived}const Me=g("DevicePair",{log:!0});class Te{constructor(){this.#Ie.onDataReceived=this.#xe.bind(this)}static#Pe=["isConnected","pressure",...he.EventTypes.map((e=>`device${l(e)}`))];static get EventTypes(){return this.#Pe}get eventTypes(){return Te.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}#Ue(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}static get Sides(){return he.InsoleSides}get sides(){return Te.Sides}#os;get left(){return this.#os}#cs;get right(){return this.#cs}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}#p(){Me.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Me.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#hs),v(e,this.#hs),t){case"left":this.#os=e;break;case"right":this.#cs=e}return Me.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}}),this.#Ue({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Me.log("device already assigned")}#hs={connectionStatus:this.#gs.bind(this),isConnected:this.#ls.bind(this),sensorData:this.#ds.bind(this),getSensorConfiguration:this.#gs.bind(this)};#gs(e){this.#Ue({type:`device${l(e.type)}`,message:{...e.message,device:e.target}})}#ls(e){this.#gs(e),this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#Ie=new we;#ds(e){this.#gs(e),this.#Ue({type:`device${l(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#Ie.onDeviceSensorData(e)}#xe(e,t){Me.log({sensorType:e,sensorData:t}),this.#Ue({type:e,message:t})}resetPressureRange(){this.#Ie.resetPressureRange()}static#us=new Te;static get shared(){return this.#us}static{he.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#us.assignInsole(t)}))}}const Le=g("ServerUtils",{log:!1}),We=3e7;function Ne(e,...t){Le.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=$(...t.data),n=s.byteLength;Le.assertEnumWithError(t.type,e);return $(e.indexOf(t.type),Uint16Array.from([n]),s)}));return Le.log("messageBuffers",...s),$(...s)}const ke=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function Re(...e){return Ne(ke,...e)}function Ie(...e){return Ne(he.EventTypes,...e)}function xe(...e){return Ne(f.MessageTypes,...e)}const Ae=Re("ping"),Oe=Re("pong");Re("isScanningAvailable"),Re("isScanning"),Re("startScan"),Re("stopScan");const Pe=Re("discoveredDevices"),$e=g("WebSocketClientConnectionManager",{log:!0});class Ue extends f{static get isSupported(){return e}static get type(){return"webSocketClient"}#vs;get id(){return this.#vs}set id(e){$e.assertTypeWithError(e,"string"),this.#vs!=e?this.#vs=e:$e.log("redundant id assignment")}#ps=!1;get isConnected(){return this.#ps}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":this.sendWebSocketMessage({type:"setName",data:t});break;case"setType":this.sendWebSocketMessage({type:"setType",data:t});break;case"setSensorConfiguration":this.sendWebSocketMessage({type:"setSensorConfiguration",data:t});break;case"triggerVibration":this.sendWebSocketMessage({type:"triggerVibration",data:t});break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),$e.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){$e.log({dataView:e}),ee(e,he.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=t.getUint8(n++);this.#ps=e,this.status=e?"connected":"not connected",this.isConnected&&this.#ms();break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"sensorData":this.onMessageReceived(s,t);break;default:$e.error(`uncaught messageType "${s}"`)}}),!0)}#ms(){this.sendWebSocketMessage("deviceInformation","batteryLevel","getName","getType","getSensorConfiguration")}}const _e=g("WebSocketClient",{log:!0});class Ve{static#Pe=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Pe}get eventTypes(){return Ve.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}#Ue(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}#fs;get webSocket(){return this.#fs}set webSocket(e){this.#fs!=e?(_e.log("assigning webSocket",e),this.#fs&&p(this.#fs,this.#Ss),v(e,this.#Ss),this.#fs=e,_e.log("assigned webSocket")):_e.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#bs(){_e.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ys(){_e.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ys(),this.#Ds="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#bs(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#Ds="disconnecting",this.webSocket.close()}reconnect(){this.#ys(),this.webSocket=new WebSocket(this.webSocket.url)}static#ze=!0;static get ReconnectOnDisconnection(){return this.#ze}static set ReconnectOnDisconnection(e){_e.assertTypeWithError(e,"boolean"),this.#ze=e}#Fe=Ve.#ze;get reconnectOnDisconnection(){return this.#Fe}set reconnectOnDisconnection(e){_e.assertTypeWithError(e,"boolean"),this.#Fe=e}#Es(e){this.#bs(),this.#fs.send(e)}#Cs(...e){this.#Es(Re(...e))}#Ss={open:this.#ws.bind(this),message:this.#Ms.bind(this),close:this.#Ts.bind(this),error:this.#Ls.bind(this)};#ws(e){_e.log("webSocket.open",e),this.#Ws.start(),this.#Ds="connected"}async#Ms(e){_e.log("webSocket.message",e),this.#Ws.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#Ns(s)}#Ts(e){_e.log("webSocket.close",e),this.#Ds="not connected",this.#Ws.stop(),this.#Fe&&setTimeout((()=>{this.reconnect()}),3e3)}#Ls(e){_e.log("webSocket.error",e)}#ks="not connected";get#Ds(){return this.#ks}set#Ds(e){switch(_e.assertTypeWithError(e,"string"),_e.log({newConnectionStatus:e}),this.#ks=e,this.#Ue({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Ue({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Ue({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#Cs("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Rs=!1,this.#qt=!1)}}get connectionStatus(){return this.#Ds}#Ns(e){_e.log("parseMessage",{dataView:e}),ee(e,ke,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#Is();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));_e.log({isScanningAvailable:e}),this.#Rs=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));_e.log({isScanning:e}),this.#qt=e}break;case"discoveredDevice":{const{string:e}=Y(t,n);_e.log({discoveredDeviceString:e});const s=JSON.parse(e);_e.log({discoveredDevice:s}),this.#Rt(s)}break;case"expiredDiscoveredDevice":{const{string:e}=Y(t,n);this.#es(e)}break;case"connectedDevices":console.log("CON");break;case"deviceMessage":{const{string:e,byteOffset:s}=Y(t,n);n=s;const i=this.#xs[e];_e.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=V(t,n);r.onWebSocketMessage(a)}break;default:_e.error(`uncaught messageType "${s}"`)}}),!0)}#Ws=new le(this.#As.bind(this),We);#As(){this.#Cs("ping")}#Is(){this.#Cs("pong")}#Os=!1;get#Rs(){return this.#Os}set#Rs(e){_e.assertTypeWithError(e,"boolean"),this.#Os=e,this.#Ue({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Ps()}get isScanningAvailable(){return this.#Rs}#$s(){this.#bs(),_e.assertWithError(this.isScanningAvailable,"scanning is not available")}#Us(){this.#Cs("isScanningAvailable")}#Ft=!1;get#qt(){return this.#Ft}set#qt(e){_e.assertTypeWithError(e,"boolean"),this.#Ft=e,this.#Ue({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#qt}#Ps(){this.#Cs("isScanning")}#At(){_e.assertWithError(this.isScanning,"is not scanning")}#Ot(){_e.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Ot(),this.#Cs("startScan")}stopScan(){this.#At(),this.#Cs("stopScan")}toggleScan(){this.#$s(),this.isScanning?this.stopScan():this.startScan()}#Pt={};get discoveredDevices(){return this.#Pt}#Rt(e){_e.log({discoveredDevice:e}),this.#Pt[e.id]=e,this.#Ue({type:"discoveredDevice",message:{discoveredDevice:e}})}#_s(){this.#Es(Pe)}#es(e){_e.log({expiredDeviceId:e});const t=this.#Pt[e];t?(_e.log({expiredDiscoveredDevice:t}),delete this.#Pt[e],this.#Ue({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):_e.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#Vs(e)}#Vs(e){this.#bs(),_e.assertTypeWithError(e,"string");const t=this.#Bs(e);return t.connect(),t}#zs(e){this.#Es(this.#Fs(e))}#Fs(e){return Re({type:"connectToDevice",data:e})}#ss(e){const t=new he,s=new Ue;return s.id=e,s.sendWebSocketMessage=this.#qs.bind(this,e),s.sendWebSocketConnectMessage=this.#zs.bind(this,e),s.sendWebSocketDisconnectMessage=this.#js.bind(this,e),t.connectionManager=s,t}#Bs(e){let t=this.#xs[e];return t||(t=this.#ss(e),this.#xs[e]=t),t}disconnectFromDevice(e){this.#Hs(e)}#Hs(e){this.#bs(),_e.assertTypeWithError(e,"string");const t=this.devices[e];return _e.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#js(e){this.#Es(this.#Gs(e))}#Gs(e){return Re({type:"disconnectFromDevice",data:e})}#qs(e,...t){this.#Es(this.#Zs(e,...t))}#Zs(e,...t){return Re({type:"deviceMessage",data:[e,xe(...t)]})}#xs={};get devices(){return this.#xs}}const Be=g("WebSocketServer",{log:!0});t&&require("ws");class ze{constructor(){Be.assertWithError(ye,"no scanner defined"),v(ye,this.#Qs),v(he,this.#Js)}static#Pe=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Pe}get eventTypes(){return ze.#Pe}#$e=new u(this,this.eventTypes);addEventListener(e,t,s){this.#$e.addEventListener(e,t,s)}#Ue(e){this.#$e.dispatchEvent(e)}removeEventListener(e,t){return this.#$e.removeEventListener(e,t)}#Ks;get server(){return this.#Ks}set server(e){this.#Ks!=e?(Be.log("assigning server..."),this.#Ks&&(Be.log("clearing existing server..."),p(this.#Ks,this.#Xs)),v(e,this.#Xs),this.#Ks=e,Be.log("assigned server")):Be.log("redundant WebSocket assignment")}#Xs={close:this.#Ys.bind(this),connection:this.#en.bind(this),error:this.#tn.bind(this),headers:this.#sn.bind(this),listening:this.#nn.bind(this)};#Ys(){Be.log("server.close")}#en(e){Be.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new le((()=>this.#in(e)),We),e.pingClientTimer.start(),v(e,this.#rn),this.#Ue({type:"clientConnected",message:{client:e}})}#tn(e){Be.error(e)}#sn(){}#nn(){Be.log("server.listening")}#rn={open:this.#an.bind(this),message:this.#on.bind(this),close:this.#cn.bind(this),error:this.#hn.bind(this)};#an(e){Be.log("client.open")}#on(e){Be.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(U(e.data));this.#gn(t,s)}#cn(e){Be.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#rn),this.#Ue({type:"clientDisconnected",message:{client:t}})}#hn(e){Be.log("client.error")}static#it=new TextDecoder;get#Qe(){return ze.#it}#gn(e,t){ee(t,ke,((t,s)=>{const n=t;switch(n){case"ping":e.send(Oe);break;case"pong":break;case"isScanningAvailable":e.send(this.#ln);break;case"isScanning":e.send(this.#dn);break;case"startScan":ye.startScan();break;case"stopScan":ye.stopScan();break;case"discoveredDevices":e.send(this.#un);break;case"connectToDevice":{const{string:e}=Y(s);ye.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=Y(s),t=he.ConnectedDevices.find((t=>t.id==e));if(!t){Be.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":e.send(this.#vn);break;case"deviceMessage":{const{string:t,byteOffset:n}=Y(s),i=he.ConnectedDevices.find((e=>e.id==t));if(!i){Be.error(`no device found with id ${t}`);break}const r=new DataView(s.buffer,s.byteOffset+n);this.#pn(i,r,e)}break;default:Be.error(`uncaught messageType "${n}"`)}}),!0)}get#ln(){return Re({type:"isScanningAvailable",data:ye.isAvailable})}get#dn(){return Re({type:"isScanning",data:ye.isScanning})}#mn(e){Be.log("broadcasting",e),this.server.clients.forEach((t=>{t.send(e)}))}#in(e){e.isAlive?(e.isAlive=!1,e.send(Ae)):e.terminate()}#Qs={isAvailable:this.#fn.bind(this),isScanning:this.#Sn.bind(this),discoveredDevice:this.#bn.bind(this),expiredDiscoveredDevice:this.#es.bind(this)};#fn(e){this.#mn(this.#ln)}#Sn(e){this.#mn(this.#dn)}#bn(e){const t=e.message.discoveredDevice;console.log(t),this.#mn(this.#yn(t))}#es(e){const t=e.message.discoveredDevice;console.log("expired",t),this.#mn(this.#Dn(t))}#yn(e){return Re({type:"discoveredDevice",data:e})}get#un(){return Re(...ye.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}#Dn(e){return Re({type:"expiredDiscoveredDevice",data:e.id})}get#vn(){return Re({type:"connectedDevices",data:he.ConnectedDevices.map((e=>e.id))})}#Js={deviceConnected:this.#En.bind(this),deviceDisconnected:this.#Cn.bind(this),deviceIsConnected:this.#ls.bind(this)};#En(e){const t=e.message.device;Be.log("onDeviceConnected",t.id),v(t,this.#wn)}#Cn(e){const t=e.message.device;Be.log("onDeviceDisconnected",t.id),p(t,this.#wn)}#ls(e){const t=e.message.device;Be.log("onDeviceIsConnected",t.id),this.#mn(this.#Mn(t))}#Mn(e){return this.#Zs(e,{type:"isConnected",data:e.isConnected})}#Zs(e,...t){return Re({type:"deviceMessage",data:[e.id,Ie(...t)]})}#wn={batteryLevel:this.#Tn.bind(this),connectionMessage:this.#Ln.bind(this)};#Wn(e){const t=[];for(const s in e.deviceInformation)t.push({type:s,data:e.latestConnectionMessage.get(s)});return Be.log("deviceInformationMessages",t),t}#Nn(e){return{type:"getName",data:e.latestConnectionMessage.get("getName")}}#kn(e){return{type:"getType",data:e.latestConnectionMessage.get("getType")}}#Rn(e){return{type:"getSensorConfiguration",data:e.latestConnectionMessage.get("getSensorConfiguration")}}#Tn(e){const t=e.target;Be.log("onDeviceBatteryLevel",e.message),this.#mn(this.#In(t))}#In(e){return this.#Zs(e,{type:"batteryLevel",data:e.latestConnectionMessage.get("batteryLevel")})}#Ln(e){const t=e.target;Be.log("onDeviceConnectionMessage",e.message);const s=e.message.messageType,n=e.message.dataView;if("sensorData"===s)this.#mn(this.#xn(t,n))}#xn(e,t){return this.#Zs(e,{type:"sensorData",data:t})}#pn(e,t,s){Be.log("onDeviceMessage",e.id,t);let n=[];ee(t,f.MessageTypes,((t,s)=>{const i=t;switch(i){case"batteryLevel":n.push({type:"batteryLevel",data:e.batteryLevel});break;case"deviceInformation":n.push(...this.#Wn(e));break;case"getName":n.push(this.#Nn(e));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;case"getType":n.push(this.#kn(e));break;case"getSensorConfiguration":n.push(this.#Rn(e));break;default:Be.error(`uncaught messageType "${i}"`)}}),!0),Be.log({responseMessages:n}),n.length>0&&s.send(this.#Zs(e,...n))}}return{setAllConsoleLevelFlags:function(e){h.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){h.setLevelFlagsForType(e,t)},Device:he,DevicePair:Te,WebSocketClient:Ve,WebSocketServer:ze,Scanner:ye}}));
