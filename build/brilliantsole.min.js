/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function s(){}e&&navigator.userAgent.includes("Android");const n=console.log.bind(console),r=console.warn.bind(console),i=console.error.bind(console),a=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new o(e)}get log(){return this.#t.log?n:s}get warn(){return this.#t.warn?r:s}get error(){return this.#t.error?i:s}get assert(){return this.#t.assert?a:s}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function c(e,t){return o.create(e,t)}const h=c("EventDispatcher",{log:!1});class l{constructor(e){h.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#s=e}#s;#n(e){return!this.#s||this.#s.includes(e)}#r(e){h.assertWithError(this.#n(e),`invalid event type "${e}"`)}#i;addEventListener(e,t,s){if(h.log(`adding "${e}" eventListener`,t),this.#r(e),this.#i||(this.#i={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#i;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return h.log(`has "${e}" eventListener?`,t),this.#r(e),this.#i?.[e]?.includes(t)}removeEventListener(e,t){if(h.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#i[e].indexOf(t);return this.#i[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#i?.[e.type]){e.target=this;const t=this.#i[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function g(e,t){let s=e.addEventListener||e.addListener||e.on;h.assertWithError(s,"no add listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function u(e,t){let s=e.removeEventListener||e.removeListener;h.assertWithError(s,"no remove listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const d=c("ConnectionManager");class p{onStatusUpdated;onMessageReceived;static#a(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#a("type")}get type(){return this.constructor.type}#c(){d.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){d.assertWithError(this.constructor!=p,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c()}#l="not connected";get status(){return this.#l}set status(e){d.assertTypeWithError(e,"string"),this.#l!=e?(d.log(`new connection status "${e}"`),this.#l=e,this.onStatusUpdated?.(this.status)):d.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){d.assertWithError(!this.isConnected,"device is already connected")}#u(){d.assertWithError("connecting"!=this.status,"device is already connecting")}#d(){d.assertWithError(this.isConnected,"device is not connected")}#p(){d.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#v(){this.#d(),this.#p()}async connect(){this.#g(),this.#u(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#u(),d.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#d(),this.#p(),this.status="disconnecting"}async sendMessage(e,t){this.#v(),d.log("sending message",{messageType:e,data:t})}}if(t){var v=require("webbluetooth").BluetoothUUID}if(e)v=window.BluetoothUUID;function m(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function f(e){return v.getCharacteristic(e)}function S(e){return v.getService(e)}const b=Object.freeze({services:{deviceInformation:{uuid:S("device_information"),characteristics:{manufacturerName:{uuid:f("manufacturer_name_string")},modelNumber:{uuid:f("model_number_string")},hardwareRevision:{uuid:f("hardware_revision_string")},firmwareRevision:{uuid:f("firmware_revision_string")},softwareRevision:{uuid:f("software_revision_string")},pnpId:{uuid:f("pnp_id")},serialNumber:{uuid:f("serial_number_string")}}},battery:{uuid:S("battery_service"),characteristics:{batteryLevel:{uuid:f("battery_level")}}},main:{uuid:m(0),characteristics:{name:{uuid:m(1)},type:{uuid:m(2)},sensorConfiguration:{uuid:m(3)},sensorData:{uuid:m(4)},vibration:{uuid:m(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,s])=>e==s.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>e==s.uuid))?.[0],t))),t}}),y=b.serviceUUIDs,E=b.optionalServiceUUIDs;const D=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var w={bluetooth:t}}if(e)w=window.navigator;class C extends p{#m={characteristicvaluechanged:this.#f.bind(this)};#S={gattserverdisconnected:this.#b.bind(this)};static get isSupported(){return"bluetooth"in w}static get type(){return"webBluetooth"}#y;get device(){return this.#y}set device(e){this.#y!=e?(this.#y&&u(this.#y,this.#S),e&&g(e,this.#S),this.#y=e):D.warn("tried to assign the same BluetoothDevice")}get server(){return this.#y?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#D=new Map;async connect(){await super.connect();try{const t=await w.bluetooth.requestDevice({filters:[{services:y}],optionalServices:e?E:[]});D.log("got BluetoothDevice"),this.device=t,D.log("connecting to device...");const s=await this.device.gatt.connect();D.log(`connected to device? ${s.connected}`),await this.#w(),D.log("fully connected"),this.status="connected"}catch(e){D.error(e),this.status="not connected",this.server?.disconnect(),this.#C()}}async#w(){this.#C(),D.log("getting services...");const e=await this.server.getPrimaryServices();D.log("got services",e.length),D.log("getting characteristics...");for(const n in e){const r=e[n],i=(s=r.uuid,b.getServiceNameFromUUID(s));if(D.assertWithError(i,`no name found for service uuid "${r.uuid}"`),D.log(`got "${i}" service`),"dfu"==i){D.log("skipping dfu service");continue}r._name=i,this.#E.set(i,r),D.log(`getting characteristics for "${i}" service`);const a=await r.getCharacteristics();D.log(`got characteristics for "${i}" service`);for(const e in a){const s=a[e],n=(t=s.uuid,b.getCharacteristicNameFromUUID(t));D.assertWithError(n,`no name found for characteristic uuid "${s.uuid}" in "${i}" service`),D.log(`got "${n}" characteristic in "${i}" service`),s._name=n,this.#D.set(n,s),g(s,this.#m),s.properties.read&&(D.log(`reading "${n}" characteristic...`),await s.readValue()),s.properties.notify&&(D.log(`starting notifications for "${n}" characteristic`),await s.startNotifications())}}var t,s}#C(){this.device&&u(this.device,this.#S),this.#D.forEach((e=>{u(e,this.#m)}))}async disconnect(){await super.disconnect(),D.log("disconnecting from device..."),this.server?.disconnect(),this.#C(),this.status="not connected"}#f(e){D.log("oncharacteristicvaluechanged");const t=e.target,s=t._name;D.assertWithError(s,`no name found for characteristic with uuid "${t.uuid}"`),D.log(`oncharacteristicvaluechanged for "${s}" characteristic`);const n=t.value;switch(D.assertWithError(n,`no data found for "${s}" characteristic`),D.log(`data for "${s}" characteristic`,Array.from(new Uint8Array(n.buffer))),s){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${s}"`)}}#b(e){D.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s;switch(await super.sendMessage(...arguments),e){case"setName":s=this.#D.get("name");break;case"setType":s=this.#D.get("type");break;case"setSensorConfiguration":s=this.#D.get("sensorConfiguration");break;case"triggerVibration":s=this.#D.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}D.assert(s,"no characteristic found"),await s.writeValueWithResponse(t),s.properties.read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),D.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(D.log("successfully reconnected!"),await this.#w(),this.status="connected"):(D.log("unable to reconnect"),this.status="not connected")}}const P=c("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class T extends p{static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return!1}async connect(){await super.connect()}async disconnect(){await super.disconnect(),P.log("disconnecting from device...")}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!1}async reconnect(){await super.reconnect(),P.log("attempting to reconnect...")}#P;get noblePeripheral(){return this.#P}set noblePeripheral(e){P.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(P.log({newNoblePeripheral:e}),this.#P&&(u(this.#P,this.#T),delete this.#P._device),e&&(e._device=this,g(e,this.#T)),this.#P=e):P.log("attempted to assign duplicate noblePeripheral")}#T={connect:this.#L,disconnect:this.#M,rssiUpdate:this.#R,servicesDiscover:this.#W};#L(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){P.log("onNoblePeripheralConnect",e)}#M(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){P.log("onNoblePeripheralDisconnect",e)}#R(e){this._device.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){P.log("onNoblePeripheralRssiUpdate",e,t)}#W(e){this._device.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){P.log("onNoblePeripheralServicesDiscover",e,t)}}function L(e,t,s){return(e-t)/(s-t)}const M={min:1/0,max:-1/0};class R{#N=Object.assign({},M);get range(){return this.#N}reset(){Object.assign(this.#N,M)}update(e){this.#N.min=Math.min(e,this.range.min),this.#N.max=Math.max(e,this.range.max)}getNormalization(e){return L(e,this.range.min,this.range.max)}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class W{#x;resetRange(){this.#x={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}}}constructor(){this.resetRange()}updateCenterOfPressureRange(e){this.#x.min.x=Math.min(e.x,this.#x.min.x),this.#x.min.y=Math.min(e.y,this.#x.min.y),this.#x.max.x=Math.max(e.x,this.#x.max.x),this.#x.max.y=Math.max(e.y,this.#x.max.y)}getCalibratedCenterOfPressure(e){return{x:L(e.x,this.#x.min.x,this.#x.max.x),y:L(e.y,this.#x.min.y,this.#x.max.y)}}}const N=c("PressureSensorDataManager",{log:!0});class x{#k;get deviceType(){return this.#k}set deviceType(e){N.assertTypeWithError(e,"string"),this.#k!=e?(N.log({newDeviceType:e}),this.#k=e,this.#I(),this.resetRange()):N.warn(`redundant deviceType assignment "${e}"`)}static#O=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#O}get names(){return x.Names}static#A={pressure:2**-16};static get Scalars(){return this.#A}get scalars(){return x.Scalars}static#U=8;static get NumberOfPressureSensors(){return this.#U}get numberOfPressureSensors(){return x.NumberOfPressureSensors}static#_=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#_}#$;get pressureSensorPositions(){return this.#$}#I(){const e=x.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));N.log({pressureSensorPositions:e}),this.#$=e}#V=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new R));#B=new W;resetRange(){this.#V.forEach((e=>e.reset())),this.#B.resetRange()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const r=e.getUint16(t,!0),i=this.#V[n].updateAndGetNormalization(r),a=this.pressureSensorPositions[n],o=this.names[n];s.sensors[n]={rawValue:r,normalizedValue:i,position:a,name:o},s.rawSum+=r,s.normalizedSum=i/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),this.#B.updateCenterOfPressureRange(s.center),s.calibratedCenter=this.#B.getCalibratedCenterOfPressure(s.center)),N.log({pressure:s}),s}}const k=c("MotionSensorDataManager",{log:!0});class I{#k;get deviceType(){return this.#k}set deviceType(e){k.assertTypeWithError(e,"string"),this.#k!=e?(k.log({newDeviceType:e}),this.#k=e):k.warn(`redundant deviceType assignment "${e}"`)}static#A={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#A}get scalars(){return I.Scalars}static#z=6;static get Vector3Size(){return this.#z}get vector3Size(){return I.Vector3Size}parseVector3(e,t,s){let[n,r,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:r,z:i};return k.log({vector:a}),a}static#F=8;static get QuaternionSize(){return this.#F}get quaternionSize(){return I.QuaternionSize}parseQuaternion(e,t,s){let[n,r,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:r,z:i,w:a};return k.log({quaternion:o}),o}}c("BarometerSensorDataManager",{log:!0});class O{static#A={barometer:.78125};static get Scalars(){return this.#A}get scalars(){return O.Scalars}}const A=c("SensorDataManager",{log:!0});class U{#k;get deviceType(){return this.#k}set deviceType(e){A.assertTypeWithError(e,"string"),this.#k!=e?(A.log({newDeviceType:e}),this.#k=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):A.warn(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new x;motionSensorDataManager=new I;barometerSensorDataManager=new O;static#q=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#q}get#H(){return U.Types}static AssertValidSensorType(e){A.assertTypeWithError(e,"string"),A.assertWithError(this.#q.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){A.assertTypeWithError(e,"number"),A.assertWithError(e in this.#q,`invalid sensorTypeEnum ${e}`)}onDataReceived;#j=0;#Z=0;clearTimestamp(){A.log("clearing sensorDataManager timestamp data"),this.#j=0,this.#Z=0}#G(e,t){const s=e.getUint16(t,!0);s<this.#Z&&(this.#j+=65536),this.#Z=s;return s+this.#j}parse(e){A.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#G(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let r;U.AssertValidSensorTypeEnum(n);const i=e.getUint8(t++),a=this.#H[n];switch(A.log({sensorTypeEnum:n,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":r=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:A.error(`uncaught sensorType "${a}"`)}t+=i,A.assertWithError(r,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:r})}}static get NumberOfPressureSensors(){return x.NumberOfPressureSensors}get numberOfPressureSensors(){return U.NumberOfPressureSensors}static get PressureSensorNames(){return x.Names}get pressureSensorNames(){return U.PressureSensorNames}}const _=c("SensorConfigurationManager",{log:!0});class ${#k;get deviceType(){return this.#k}set deviceType(e){_.assertTypeWithError(e,"string"),this.#k!=e?(_.log({newDeviceType:e}),this.#k=e):_.warn(`redundant deviceType assignment "${e}"`)}#Q;#J(e){_.assertWithError(this.#Q,"must get initial sensorConfiguration");const t=this.#Q?.includes(e);return _.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0,n=0;s<e.byteLength;s+=2,n++){const r=U.Types[n];if(!r){_.warn(`unknown sensorType index ${n}`);break}const i=e.getUint16(s,!0);_.log({sensorType:r,sensorRate:i}),t[r]=i}return _.log({parsedSensorConfiguration:t}),this.#Q=Object.keys(t),t}static#K=65535;static get MaxSensorRate(){return this.#K}get maxSensorRate(){return $.MaxSensorRate}static#X=5;static get SensorRateStep(){return this.#X}get sensorRateStep(){return $.SensorRateStep}#Y(e){_.assertTypeWithError(e,"number"),_.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),_.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),_.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#J(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{U.AssertValidSensorType(t);const r=U.Types.indexOf(t);s.setUint8(3*n,r);const i=e[t];this.#Y(i),s.setUint16(3*n+1,e[t],!0)})),_.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const V=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],B=new TextEncoder;function z(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return F(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return F(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function F(e){const t=B.encode(e);return z(t.byteLength,t)}const q=c("VibrationManager");class H{static#ee=["front","rear"];static get Locations(){return this.#ee}get locations(){return H.Locations}#te(e){q.assertTypeWithError(e,"string"),q.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#se(e){this.#ne(e),e.forEach((e=>{this.#te(e)}))}#re(e){this.#se(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),q.log({locationsBitmask:t}),q.assertWithError(t>0,"locationsBitmask must not be zero"),t}#ne(e){q.assertWithError(Array.isArray(e),"passed non-array"),q.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return V}get waveformEffects(){return H.WaveformEffects}#ie(e){q.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#ae=1270;static get MaxWaveformEffectSegmentDelay(){return this.#ae}get maxWaveformEffectSegmentDelay(){return H.MaxWaveformEffectSegmentDelay}#oe(e){if(null!=e.effect){const t=e.effect;this.#ie(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;q.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),q.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ce(t)}}static#he=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#he}get maxWaveformEffectSegmentLoopCount(){return H.MaxWaveformEffectSegmentLoopCount}#ce(e){q.assertTypeWithError(e,"number"),q.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),q.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#le=8;static get MaxNumberOfWaveformEffectSegments(){return this.#le}get maxNumberOfWaveformEffectSegments(){return H.MaxNumberOfWaveformEffectSegments}#ge(e){this.#ne(e),q.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#oe(e)}))}static#ue=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ue}get maxWaveformEffectSequenceLoopCount(){return H.MaxWaveformEffectSequenceLoopCount}#de(e){q.assertTypeWithError(e,"number"),q.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),q.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#pe=2550;static get MaxWaveformSegmentDuration(){return this.#pe}get maxWaveformSegmentDuration(){return H.MaxWaveformSegmentDuration}#ve(e){q.assertTypeWithError(e.amplitude,"number"),q.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),q.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),q.assertTypeWithError(e.duration,"number"),q.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),q.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#me=20;static get MaxNumberOfWaveformSegments(){return this.#me}get maxNumberOfWaveformSegments(){return H.MaxNumberOfWaveformSegments}#fe(e){this.#ne(e),q.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ve(e)}))}createWaveformEffectsData(e,t,s=0){this.#ge(t),this.#de(s);let n=[],r=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[r++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[r++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[r]=0);const i=e%4*2;n[r]|=s<<i,3!=e&&7!=e||r++}0!=s&&(n[r++]=s);const o=new DataView(Uint8Array.from(n).buffer);return q.log({dataArray:n,dataView:o}),this.#Se(e,"waveformEffect",o)}createWaveformData(e,t){this.#fe(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),q.log({dataView:s}),this.#Se(e,"waveform",s)}static#q=["waveformEffect","waveform"];static get Types(){return this.#q}get#H(){return H.Types}#be(e){q.assertTypeWithError(e,"string"),q.assertWithError(this.#H.includes(e),`invalid vibrationType "${e}"`)}#Se(e,t,s){q.assertWithError(s?.byteLength>0,"no data received");const n=this.#re(e);this.#be(t);const r=this.#H.indexOf(t);q.log({locationsBitmask:n,vibrationTypeIndex:r,dataView:s});const i=z(n,r,s.byteLength,s);return q.log({data:i}),i}}const j=c("Device",{log:!1});class Z{constructor(){this.#ye.onDataReceived=this.#Ee.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{Z.#De(this)}))}static get#we(){return C}static#Ce=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#Ce}get eventTypes(){return Z.#Ce}#Pe=new l(this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Te(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#Le;get connectionManager(){return this.#Le}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Me.bind(this),e.onMessageReceived=this.#Re.bind(this)),this.#Le=e,j.log("assigned new connectionManager",this.#Le)):j.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new Z.#we),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#d(){j.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#We=!1;static get ReconnectOnDisconnection(){return this.#We}static set ReconnectOnDisconnection(e){j.assertTypeWithError(e,"boolean"),this.#We=e}#Ne=Z.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Ne}set reconnectOnDisconnection(e){j.assertTypeWithError(e,"boolean"),this.#Ne=e}#xe;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#d(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#Le?.status||"not connected"}#Me(e){switch(j.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(j.log("starting reconnect interval..."),this.#xe=setInterval((()=>{j.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#xe&&(j.log("clearing reconnect interval"),clearInterval(this.#xe),this.#xe=void 0),this.#Te({type:"connectionStatus",message:{connectionStatus:e}}),this.#Te({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Te({type:"isConnected",message:{isConnected:this.isConnected}})}}#ke(){this.#Ie=null,this.#Oe=null,this.#Ae=null;for(const e in this.#Ue)this.#Ue[e]=null}#Re(e,t){switch(j.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#_e.decode(t);j.log({manufacturerName:s}),this.#$e({manufacturerName:s});break;case"modelNumber":const n=this.#_e.decode(t);j.log({modelNumber:n}),this.#$e({modelNumber:n});break;case"softwareRevision":const r=this.#_e.decode(t);j.log({softwareRevision:r}),this.#$e({softwareRevision:r});break;case"hardwareRevision":const i=this.#_e.decode(t);j.log({hardwareRevision:i}),this.#$e({hardwareRevision:i});break;case"firmwareRevision":const a=this.#_e.decode(t);j.log({firmwareRevision:a}),this.#$e({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),j.log({pnpId:o}),this.#$e({pnpId:o});break;case"serialNumber":const c=this.#_e.decode(t);j.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);j.log("received battery level",{batteryLevel:h}),this.#Ve(h);break;case"getName":const l=this.#_e.decode(t);j.log({name:l}),this.#Be(l);break;case"getType":const g=t.getUint8(0),u=this.#H[g];j.log({typeEnum:g,type:u}),this.#ze(u);break;case"getSensorConfiguration":const d=this.#Fe.parse(t);j.log({sensorConfiguration:d}),this.#qe(d);break;case"sensorData":this.#ye.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#He=new TextEncoder;get#je(){return Z.#He}static#Ze=new TextDecoder;get#_e(){return Z.#Ze}#Ue={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Ue}get#Ge(){return Object.values(this.#Ue).every((e=>null!=e))}#$e(e){j.log({partialDeviceInformation:e});for(const t in e)this.#Te({type:t,message:{[t]:e[t]}});Object.assign(this.#Ue,e),j.log({deviceInformation:this.#Ue}),this.#Ge&&(j.log("completed deviceInformation"),this.#Te({type:"deviceInformation",message:{deviceInformation:this.#Ue}}))}#Ae=null;get batteryLevel(){return this.#Ae}#Ve(e){j.assertTypeWithError(e,"number"),this.#Ae!=e?(this.#Ae=e,j.log({updatedBatteryLevel:this.#Ae}),this.#Te({type:"batteryLevel",message:{batteryLevel:this.#Ae}})):j.warn(`duplicate batteryLevel assignment ${e}`)}#Ie;get name(){return this.#Ie}#Be(e){j.assertTypeWithError(e,"string"),this.#Ie=e,j.log({updatedName:this.#Ie}),this.#Te({type:"getName",message:{name:this.#Ie}})}static get MinNameLength(){return 2}get minNameLength(){return Z.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return Z.MaxNameLength}async setName(e){this.#d(),j.assertTypeWithError(e,"string"),j.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),j.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#je.encode(e);j.log({setNameData:t}),await this.#Le.sendMessage("setName",t)}static#q=["leftInsole","rightInsole"];static get Types(){return this.#q}get#H(){return Z.Types}#Oe;get type(){return this.#Oe}#Qe(e){j.assertTypeWithError(e,"string"),j.assertWithError(this.#H.includes(e),`invalid type "${e}"`)}#ze(e){this.#Qe(e),e!=this.type?(this.#Oe=e,j.log({updatedType:this.#Oe}),this.#ye.deviceType=this.#Oe,this.#Fe.deviceType=this.#Oe,this.#Te({type:"getType",message:{type:this.#Oe}})):j.warn("redundant type assignment")}async setType(e){this.#d(),this.#Qe(e);const t=this.#H.indexOf(e),s=Uint8Array.from([t]);j.log({setTypeData:s}),await this.#Le.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Je=["left","right"];static get InsoleSides(){return this.#Je}get insoleSides(){return Z.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return U.Types}get sensorTypes(){return Z.SensorTypes}static get PressureSensorNames(){return U.PressureSensorNames}get pressureSensorNames(){return Z.PressureSensorNames}static get NumberOfPressureSensors(){return U.NumberOfPressureSensors}get numberOfPressureSensors(){return Z.NumberOfPressureSensors}#Fe=new $;#Ke;get sensorConfiguration(){return this.#Ke}static get MaxSensorRate(){return $.MaxSensorRate}static get SensorRateStep(){return $.SensorRateStep}#qe(e){this.#Ke=e,j.log({updatedSensorConfiguration:this.#Ke}),this.#Fe.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(j.log("clearing sensorDataManager timestamp..."),this.#ye.clearTimestamp()),this.#Te({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#d(),j.log({newSensorConfiguration:e});const t=this.#Fe.createData(e);j.log({setSensorConfigurationData:t}),await this.#Le.sendMessage("setSensorConfiguration",t)}static#Xe=!0;static get ClearSensorConfigurationOnLeave(){return this.#Xe}static set ClearSensorConfigurationOnLeave(e){j.assertTypeWithError(e,"boolean"),this.#Xe=e}#Ye=Z.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Ye}set clearSensorConfigurationOnLeave(e){j.assertTypeWithError(e,"boolean"),this.#Ye=e}static#et={};static get ZeroSensorConfiguration(){return this.#et}static{this.SensorTypes.forEach((e=>{this.#et[e]=0}))}get zeroSensorConfiguration(){return Z.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#ye=new U;#Ee(e,t){j.log({sensorType:e,sensorData:t}),this.#Te({type:e,message:t}),this.#Te({type:"sensorData",message:t})}resetPressureRange(){this.#ye.pressureSensorDataManager.resetRange()}#tt=new H;static get VibrationLocations(){return H.Locations}static get VibrationTypes(){return H.Types}static get VibrationWaveformEffects(){return H.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return H.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return H.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return H.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return H.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return H.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return H.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let r;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:i}=t;r=this.#tt.createWaveformEffectsData(s,n,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;r=this.#tt.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}j.log({type:n,dataView:r}),t=z(t,r)})),await this.#Le.sendMessage("triggerVibration",t)}static#st=[];static get ConnectedDevices(){return this.#st}static#nt=!1;static get UseLocalStorage(){return this.#nt}static set UseLocalStorage(e){this.#rt(),j.assertTypeWithError(e,"boolean"),this.#nt=e,this.#nt&&!this.#it&&this.#at()}static#ot={};static#it;static#rt(){j.assertWithError(e,"localStorage is only available in the browser")}static#ct="BS.Device";static#ht(){this.#rt(),localStorage.setItem(this.#ct,JSON.stringify(this.#it))}static#at(){this.#rt();let e=localStorage.getItem(this.#ct);if("string"!=typeof e)return j.warn("no info found in localStorage"),this.#it=Object.assign({},this.#ot),void this.#ht();try{const t=JSON.parse(e);return j.log({configuration:t}),t}catch(e){j.error(e)}}static async GetDevices(){if(!e)return void j.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void j.warn("bluetooth is not available in this browser");if(!this.#it)return void j.warn("localStorageConfiguration not found");const t=this.#it;if(!t.bluetoothDeviceIds||0==t.bluetoothDeviceIds.length)return void j.log("no bluetoothDeviceIds found in configuration");const s=await navigator.bluetooth.getDevices();j.log({bluetoothDevices:s});return s.map((e=>{if(e.gatt&&t.bluetoothDeviceIds.includes(e.id)){const t=new Z;t.connectionManager=new C;return t.connectionManager.device=e,t}})).filter(Boolean)}static#lt=["deviceConnected","deviceDisconnected"];static get StaticEventTypes(){return this.#lt}static#gt=new l(this.#lt);static AddEventListener(e,t,s){this.#gt.addEventListener(e,t,s)}static#ut(e){this.#gt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#gt.removeEventListener(e,t)}static#De(e){if(e.isConnected)if(this.#st.includes(e))j.warn("device already included");else{if(j.log("adding device",e),this.#st.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t=e.connectionManager;this.#it.bluetoothDeviceIds.push(t.device.id),this.#ht()}this.#ut({type:"deviceConnected",message:{device:e}})}else this.#st.includes(e)?(j.log("removing device",e),this.#st.splice(this.#st.indexOf(e),1),this.#ut({type:"deviceDisconnected",message:{device:e}})):j.log("device already not included")}}const G=c("Timer",{log:!1});class Q{#dt;get callback(){return this.#dt}set callback(e){G.assertTypeWithError(e,"function"),G.log({newCallback:e}),this.#dt=e,this.isRunning&&this.restart()}#pt;get interval(){return this.#pt}set interval(e){G.assertTypeWithError(e,"number"),G.assertWithError(e>0,"interval must be above 0"),G.log({newInterval:e}),this.#pt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#vt=null;get isRunning(){return null!=this.#vt}start(){this.isRunning?G.log("interval already running"):(G.log("starting interval"),this.#vt=setInterval(this.#dt,this.#pt))}stop(){this.isRunning?(G.log("stopping interval"),clearInterval(this.#vt),this.#vt=null):G.log("interval already not running")}restart(){this.stop(),this.start()}}const J=c("BaseScanner");class K{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#c(){J.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){J.assertWithError(this.constructor!=K,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c(),g(this,this.#mt)}#mt={discoveredPeripheral:this.#ft.bind(this),isScanning:this.#St.bind(this)};static#Ce=["isAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#Ce}get eventTypes(){return K.#Ce}#Pe=new l(this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}dispatchEvent(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}get isAvailable(){return!1}#bt(){J.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#yt(){J.assertWithError(this.isScanning,"not scanning")}#Et(){J.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#bt(),this.#Et()}stopScan(){this.#yt()}#St(){this.isScanning?(this.#Dt={},this.#wt={}):this.#Ct.stop()}#Dt={};get discoveredPeripherals(){return this.#Dt}get discoveredPeripheralsArray(){return Object.values(this.#Dt).sort(((e,t)=>this.#wt[e.id]-this.#wt[t.id]))}#Pt(e){J.assertWithError(this.#Dt[e],`no discovered peripheral with id "${e}"`)}#ft(e){const t=e.message.discoveredPeripheral;this.#Dt[t.id]=t,this.#wt[t.id]=Date.now(),this.#Ct.start()}#wt={};static#Tt=5e3;static get DiscoveredPeripheralExpirationTimeout(){return this.#Tt}get#Lt(){return K.DiscoveredPeripheralExpirationTimeout}#Ct=new Q(this.#Mt.bind(this),1e3);#Mt(){const e=Object.entries(this.#Dt);if(0==e.length)return void this.#Ct.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#wt[e];console.log(t-n),t-n>this.#Lt&&(J.log("discovered peripheral timeout"),delete this.#Dt[e],delete this.#wt[e],this.dispatchEvent({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:s}}))}))}connectToPeripheral(e){this.#bt()}disconnectFromPeripheral(e){this.#bt()}reset(){J.log("resetting...")}}const X=c("NobleScanner",{log:!0});let Y=!1;if(t){var ee=require("@abandonware/noble");Y=!0}class te extends K{static get isSupported(){return Y}#Rt=!1;get#Wt(){return this.#Rt}set#Wt(e){X.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Rt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):X.log("duplicate isScanning assignment")}get isScanning(){return this.#Wt}#Nt="unknown";get#xt(){return this.#Nt}set#xt(e){X.assertTypeWithError(e,"string"),this.#xt!=e?(this.#Nt=e,X.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):X.log("duplicate nobleState assignment")}#kt={scanStart:this.#It.bind(this),scanStop:this.#Ot.bind(this),stateChange:this.#At.bind(this),discover:this.#Ut.bind(this)};#It(){X.log("OnNobleScanStart"),this.#Wt=!0}#Ot(){X.log("OnNobleScanStop"),this.#Wt=!1}#At(e){X.log("onNobleStateChange",e),this.#xt=e}#Ut(e){X.log("onNobleDiscover",e),this.#_t[e.id]||(e._scanner=this,this.#_t[e.id]=e,g(e,this.#T));const t={name:e.advertisement.localName,id:e.id,rssi:e.rssi};this.dispatchEvent({type:"discoveredPeripheral",message:{discoveredPeripheral:t}})}constructor(){super(),g(ee,this.#kt),g(this,this.#$t)}get isAvailable(){return"poweredOn"==this.#xt}startScan(){super.startScan(),ee.startScanningAsync([],!0)}stopScan(){super.stopScan(),ee.stopScanningAsync()}reset(){super.reset(),ee.reset()}#$t={expiredDiscoveredPeripheral:this.#Vt.bind(this)};#Vt(e){const t=e.message.discoveredPeripheral,s=this.#_t[t.id];s&&(delete this.#_t[t.id],u(s,this.#T))}#_t={};#Bt(e){X.assertTypeWithError(e,"string"),X.assertWithError(this.#_t[e],`no noblePeripheral found with id "${e}"`)}#T={connect:this.#L,disconnect:this.#M,rssiUpdate:this.#R,servicesDiscover:this.#W};#L(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){X.log("onNoblePeripheralConnect",e)}#M(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){X.log("onNoblePeripheralDisconnect",e)}#R(e){this._scanner.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){X.log("onNoblePeripheralRssiUpdate",e,t)}#W(e){this._scanner.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){X.log("onNoblePeripheralServicesDiscover",e,t)}connectToPeripheral(e){super.connectToPeripheral(e),this.#Bt(e);const t=this.#_t[e];X.log("connecting to discoveredPeripheral...",e);const s=new Z,n=new T;s.noblePeripheral=t,s.connectionManager=n,s.connect()}disconnectFromPeripheral(e){super.disconnectFromPeripheral(e),this.#Bt(e),this.#_t[e],X.log("disconnecting from discoveredPeripheral...",e)}}const se=c("Scanner",{log:!1});let ne;te.isSupported?(se.log("using NobleScanner"),ne=new te):se.log("Scanner not available");var re=ne;const ie=c("DevicePairPressureSensorDataManager",{log:!0});class ae{static get Sides(){return Z.InsoleSides}get sides(){return Z.InsoleSides}#zt={};#B=new W;resetPressureRange(){this.#B.resetRange()}onDevicePressureData(e){const{pressure:t}=e.message;if(this.#zt[e.target.insoleSide]=t,this.#Ft)return this.#qt()}get#Ft(){this.sides.every((e=>e in this.#zt))}static#A={pressure:x.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#A}get scalars(){return DevicePair.Scalars}#qt(){const e=this.scalars.pressure,t={rawSum:0,normalizedSum:0};return this.#zt.left.data.rawSum,this.sides.forEach((e=>{t.rawSum+=this.#zt[e].data.rawSum})),t.rawSum>0&&(t.normalizedSum=t.rawSum*e,t.center={x:0,y:0},this.sides.forEach((e=>{const s=this.#zt[e].data,n=s.rawSum/rawPressureSum;t.center.y+=s.center.y*n,"right"==e&&(t.center.x=n)})),this.#B.updateCenterOfPressureRange(t.center),t.calibratedCenter=this.#B.getCalibratedCenterOfPressure(t.center)),ie.log({pressure:t}),t}}const oe=c("DevicePairSensorDataManager",{log:!0});class ce{static get Sides(){return Z.InsoleSides}get sides(){return Z.InsoleSides}#Ht={};pressureSensorDataManager=new ae;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{type:t,timestamp:s}=e.message,n=t;let r;if(this.#Ht[n]||(this.#Ht[n]={}),this.#Ht[n][e.target.insoleSide]=s,"pressure"===n)r=this.pressureSensorDataManager.onDevicePressureData(e);else oe.warn(`uncaught sensorType "${n}"`);if(r){const e=Object.assign({},this.#Ht[n]);this.onDataReceived?.(n,{timestamps:e,[n]:r})}else oe.warn("no value received")}onDataReceived}const he=c("DevicePair",{log:!0});let le=class e{constructor(){this.#ye.onDataReceived=this.#Ee.bind(this)}static#Ce=["pressure","isConnected"];static get EventTypes(){return this.#Ce}get eventTypes(){return e.#Ce}#Pe=new l(this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Te(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}static get Sides(){return Z.InsoleSides}get sides(){return e.Sides}#jt;get left(){return this.#jt}#Zt;get right(){return this.#Zt}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}assignInsole(e){if(!e.isInsole)return void he.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&u(s,this.#Gt),g(e,this.#Gt),t){case"left":this.#jt=e;break;case"right":this.#Zt=e}return he.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Te({type:"isConnected",message:{isConnected:this.isConnected}}),s}he.warn("device already assigned")}#Gt={pressure:this.#Qt.bind(this),isConnected:this.#Jt.bind(this)};#Jt(e){this.#Te({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#ye=new ce;#Qt(e){this.isConnected&&this.#ye.onDeviceSensorData(e)}#Ee(e,t){he.log({sensorType:e,sensorData:t}),this.#Te({type:e,message:t})}resetPressureRange(){this.#ye.resetPressureRange()}static#Kt=new e;static get shared(){return this.#Kt}static{Z.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Kt.assignInsole(t)}))}};const ge=c("ServerUtils",{log:!1}),ue=3e7,de=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredPeripheral","discoveredPeripherals","expiredDiscoveredPeripheral","peripheralRSSI","connectToPeripheral","disconnectFromPeripheral"];function pe(...e){ge.log("createServerMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=z(...e.data),s=t.byteLength;return z((n=e.type,ge.assertTypeWithError(n,"string"),ge.assertWithError(de.includes(n),`invalid serverMessageType "${n}"`),de.indexOf(n)),s,t);var n}));return ge.log("messageBuffers",...t),z(...t)}const ve=new TextDecoder;function me(e,t){const s=e.getUint8(t++),n=ve.decode(e.buffer.slice(t,t+s));return t+=s,n}const fe=pe("ping"),Se=pe("pong"),be=pe("isScanningAvailable"),ye=pe("isScanning"),Ee=pe("startScan"),De=pe("stopScan"),we=pe("discoveredPeripherals"),Ce=c("WebSocketClient",{log:!0});class Pe{static#Ce=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#Ce}get eventTypes(){return Pe.#Ce}#Pe=new l(this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Te(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#Xt;get webSocket(){return this.#Xt}set webSocket(e){this.#Xt!=e?(Ce.log("assigning webSocket",e),this.#Xt&&u(this.#Xt,this.#Yt),g(e,this.#Yt),this.#Xt=e,Ce.log("assigned webSocket")):Ce.warn("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#es(){Ce.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#ts(){Ce.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#ts(),this.#ss="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#es(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#ss="disconnecting",this.webSocket.close()}reconnect(){this.#ts(),this.webSocket=new WebSocket(this.webSocket.url)}static#We=!0;static get ReconnectOnDisconnection(){return this.#We}static set ReconnectOnDisconnection(e){Ce.assertTypeWithError(e,"boolean"),this.#We=e}#Ne=Pe.#We;get reconnectOnDisconnection(){return this.#Ne}set reconnectOnDisconnection(e){Ce.assertTypeWithError(e,"boolean"),this.#Ne=e}#Yt={open:this.#ns.bind(this),message:this.#rs.bind(this),close:this.#is.bind(this),error:this.#as.bind(this)};#ns(e){Ce.log("webSocket.open",e),this.#os.start(),this.#ss="connected"}async#rs(e){Ce.log("webSocket.message",e),this.#os.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#cs(s)}#is(e){Ce.log("webSocket.close",e),this.#ss="not connected",this.#os.stop(),this.#Ne&&setTimeout((()=>{this.reconnect()}),3e3)}#as(e){Ce.log("webSocket.error",e)}#hs="not connected";get#ss(){return this.#hs}set#ss(e){switch(Ce.assertTypeWithError(e,"string"),Ce.log({newConnectionStatus:e}),this.#hs=e,this.#Te({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Te({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Te({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?(this.#ls(),this.#gs()):(this.#us=!1,this.#Wt=!1)}}get connectionStatus(){return this.#ss}static#Ze=new TextDecoder;get#_e(){return Pe.#Ze}#cs(e){Ce.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=de[s],r=e.getUint8(t++);Ce.log({messageTypeEnum:s,messageType:n,messageByteLength:r}),Ce.assertWithError(n,`invalid messageTypeEnum ${s}`);let i=t;switch(n){case"ping":this.#ds();break;case"pong":break;case"isScanningAvailable":{const t=Boolean(e.getUint8(i++));Ce.log({isScanningAvailable:t}),this.#us=t}break;case"isScanning":{const t=Boolean(e.getUint8(i++));Ce.log({isScanning:t}),this.#Wt=t}break;case"discoveredPeripheral":{const t=me(e,i);Ce.log({discoveredPeripheralString:t}),i+=t.length;const s=JSON.parse(t);Ce.log({discoveredPeripheral:s}),this.#ft(s)}break;case"expiredDiscoveredPeripheral":{const t=me(e,i);i+=t.length,this.#Vt(t)}break;default:Ce.error(`uncaught messageType "${n}"`)}t+=r}}#os=new Q(this.#ps.bind(this),ue);#ps(){this.#es(),this.webSocket.send(fe)}#ds(){this.#es(),this.webSocket.send(Se)}#vs=!1;get#us(){return this.#vs}set#us(e){Ce.assertTypeWithError(e,"boolean"),this.#vs=e,this.#Te({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#ms()}get isScanningAvailable(){return this.#us}#fs(){this.#es(),Ce.assertWithError(this.isScanningAvailable,"scanning is not available")}#ls(){this.#es(),this.webSocket.send(be)}#Rt=!1;get#Wt(){return this.#Rt}set#Wt(e){Ce.assertTypeWithError(e,"boolean"),this.#Rt=e,this.#Te({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Wt}#ms(){this.#es(),this.webSocket.send(ye)}#yt(){Ce.assertWithError(this.isScanning,"is not scanning")}#Et(){Ce.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#Et(),this.webSocket.send(Ee)}stopScan(){this.#yt(),this.webSocket.send(De)}toggleScan(){this.#fs(),this.isScanning?this.stopScan():this.startScan()}#Dt={};get discoveredPeripherals(){return this.#Dt}#Pt(e){Ce.assertTypeWithError(e,"string"),Ce.assertWithError(this.#Dt[e],`no discoveredPeripheral found with id "${e}"`)}#ft(e){Ce.log({discoveredPeripheral:e}),this.#Dt[e.id]=e,this.#Te({type:"discoveredPeripheral",message:{discoveredPeripheral:e}})}#gs(){this.#es(),this.webSocket.send(we)}#Vt(e){Ce.log({discoveredPeripheralId:e});let t=this.#Dt[e];t?(Ce.log({expiredDiscoveredPeripheral:t}),delete this.#Dt[e],this.#Te({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:t}})):Ce.warn(`no discoveredPeripheral found with id "${e}"`)}connectToPeripheral(e){this.#Ss(e)}disconnectFromPeripheral(e){this.#bs(e)}#Ss(e){this.#es(),Ce.assertTypeWithError(e,"string"),this.webSocket.send(this.#ys(e))}#bs(e){this.#es(),Ce.assertTypeWithError(e,"string"),this.webSocket.send(this.#Es(e))}#ys(e){return pe({type:"connectToPeripheral",data:e})}#Es(e){return pe({type:"disconnectFromPeripheral",data:e})}#Ds={};get devices(){return this.#Ds}}const Te=c("WebSocketServer",{log:!0});t&&require("ws");class Le{constructor(){re&&g(re,this.#ws)}static#Ce=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Ce}get eventTypes(){return Le.#Ce}#Pe=new l(this.eventTypes);addEventListener(e,t,s){this.#Pe.addEventListener(e,t,s)}#Te(e){this.#Pe.dispatchEvent(e)}removeEventListener(e,t){return this.#Pe.removeEventListener(e,t)}#Cs;get server(){return this.#Cs}set server(e){this.#Cs!=e?(Te.log("assigning server..."),this.#Cs&&(Te.log("clearing existing server..."),u(this.#Cs,this.#Ps)),g(e,this.#Ps),this.#Cs=e,Te.log("assigned server")):Te.warn("redundant WebSocket assignment")}broadcast(e){this.server.clients.forEach((t=>{t.send(e)}))}#Ps={close:this.#Ts.bind(this),connection:this.#Ls.bind(this),error:this.#Ms.bind(this),headers:this.#Rs.bind(this),listening:this.#Ws.bind(this)};#Ts(){Te.log("server.close")}#Ls(e){Te.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new Q((()=>this.#Ns(e)),ue),e.pingClientTimer.start(),g(e,this.#xs),this.#Te({type:"clientConnected",message:{client:e}})}#Ms(e){Te.error(e)}#Rs(){}#Ws(){Te.log("server.listening")}#xs={open:this.#ks.bind(this),message:this.#Is.bind(this),close:this.#Os.bind(this),error:this.#As.bind(this)};#ks(e){Te.log("client.open")}#Is(e){Te.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView((n=e.data).buffer.slice(n.byteOffset,n.byteOffset+n.byteLength));var n;this.#Us(t,s)}#Os(e){Te.log("client.close");const t=e.target;t.pingClientTimer.stop(),u(t,this.#xs),this.#Te({type:"clientDisconnected",message:{client:t}})}#As(e){Te.log("client.error")}static#Ze=new TextDecoder;get#_e(){return Le.#Ze}#Us(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),r=de[n],i=t.getUint8(s++);Te.log({messageTypeEnum:n,messageType:r,messageByteLength:i}),Te.assertWithError(r,`invalid messageTypeEnum ${n}`);let a=s;switch(r){case"ping":e.send(pongMessageBuffer);break;case"pong":case"disconnectFromAllPeripherals":break;case"isScanningAvailable":e.send(this.#_s);break;case"isScanning":e.send(this.#$s);break;case"startScan":re.startScan();break;case"stopScan":re.stopScan();break;case"discoveredPeripherals":e.send(this.#Vs);break;case"connectToPeripheral":{const e=me(t,a);a+=e.length,re.connectToPeripheral(e)}break;case"disconnectFromPeripheral":{const e=me(t,a);a+=e.length,re.disconnectFromPeripheral(e)}break;default:Te.error(`uncaught messageType "${r}"`)}s+=i}}get#_s(){return pe({type:"isScanningAvailable",data:re.isAvailable})}get#$s(){return pe({type:"isScanning",data:re.isScanning})}#Bs(e){this.server.clients.forEach((t=>{t.send(e)}))}#Ns(e){e.isAlive?(e.isAlive=!1,e.send(fe)):e.terminate()}#ws={isAvailable:this.#zs.bind(this),isScanning:this.#Fs.bind(this),discoveredPeripheral:this.#qs.bind(this),expiredDiscoveredPeripheral:this.#Vt.bind(this)};#zs(e){this.#Bs(this.#_s)}#Fs(e){this.#Bs(this.#$s)}#qs(e){const t=e.message.discoveredPeripheral;console.log(t),this.#Bs(this.#Hs(t))}#Vt(e){const t=e.message.discoveredPeripheral;console.log("expired",t),this.#Bs(this.#js(t))}#Hs(e){return pe({type:"discoveredPeripheral",data:e})}get#Vs(){return pe(...re.discoveredPeripheralsArray.map((e=>({type:"discoveredPeripheral",data:e}))))}#js(e){return pe({type:"expiredDiscoveredPeripheral",data:e.id})}}return{setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)},Device:Z,DevicePair:le,WebSocketClient:Pe,WebSocketServer:Le,Scanner:re}}));
