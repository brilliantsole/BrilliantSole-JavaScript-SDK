/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node;function s(){}e&&navigator.userAgent.includes("Android");const n=console.log.bind(console),r=console.warn.bind(console),i=console.error.bind(console),a=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:false,warn:false,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new o(e)}get log(){return this.#t.log?n:s}get warn(){return this.#t.warn?r:s}get error(){return this.#t.error?i:s}get assert(){return this.#t.assert?a:s}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function c(e,t){return o.create(e,t)}const h=c("EventDispatcher",{log:!1});class l{constructor(e){h.assertWithError(Array.isArray(e)||null==e,"eventTypes must be an array"),this.#s=e}#s;#n(e){return!this.#s||this.#s.includes(e)}#r(e){h.assertWithError(this.#n(e),`invalid event type "${e}"`)}#i;addEventListener(e,t,s){if(h.log(`adding "${e}" eventListener`,t),this.#r(e),this.#i||(this.#i={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#i;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return h.log(`has "${e}" eventListener?`,t),this.#r(e),this.#i?.[e]?.includes(t)}removeEventListener(e,t){if(h.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#i[e].indexOf(t);return this.#i[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#i?.[e.type]){e.target=this;const t=this.#i[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function g(e,t){let s=e.addEventListener||e.addListener||e.on;h.assertWithError(s,"no add listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function d(e,t){let s=e.removeEventListener||e.removeListener;h.assertWithError(s,"no remove listener function found tor target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const u=c("ConnectionManager");class p{onStatusUpdated;onMessageReceived;static#a(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#o(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#a("type")}get type(){return this.constructor.type}#c(){u.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){u.assertWithError(this.constructor!=p,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c()}#l="not connected";get status(){return this.#l}set status(e){u.assertTypeWithError(e,"string"),this.#l!=e?(u.log(`new connection status "${e}"`),this.#l=e,this.onStatusUpdated?.(this.status)):u.warn("same connection status")}get isConnected(){return"connected"==this.status}#g(){u.assertWithError(!this.isConnected,"device is already connected")}#d(){u.assertWithError("connecting"!=this.status,"device is already connecting")}#u(){u.assertWithError(this.isConnected,"device is not connected")}#p(){u.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#v(){this.#u(),this.#p()}async connect(){this.#g(),this.#d(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#g(),this.#d(),u.assert(this.canReconnect,"unable to reconnect"),this.status="connecting"}async disconnect(){this.#u(),this.#p(),this.status="disconnecting"}async sendMessage(e,t){this.#v(),u.log("sending message",{messageType:e,data:t})}}if(t){var v=require("webbluetooth").BluetoothUUID}if(e)v=window.BluetoothUUID;function m(e){return`ea6da725-2000-4f9b-893d-${(0xc3913e33b3e3+e).toString("16")}`}function f(e){return v.getCharacteristic(e)}function S(e){return v.getService(e)}const b=Object.freeze({services:{deviceInformation:{uuid:S("device_information"),characteristics:{manufacturerName:{uuid:f("manufacturer_name_string")},modelNumber:{uuid:f("model_number_string")},hardwareRevision:{uuid:f("hardware_revision_string")},firmwareRevision:{uuid:f("firmware_revision_string")},softwareRevision:{uuid:f("software_revision_string")},pnpId:{uuid:f("pnp_id")},serialNumber:{uuid:f("serial_number_string")}}},battery:{uuid:S("battery_service"),characteristics:{batteryLevel:{uuid:f("battery_level")}}},main:{uuid:m(0),characteristics:{name:{uuid:m(1)},type:{uuid:m(2)},sensorConfiguration:{uuid:m(3)},sensorData:{uuid:m(4)},vibration:{uuid:m(5)}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84"}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid]},getServiceNameFromUUID(e){return Object.entries(this.services).find((([t,s])=>e==s.uuid))?.[0]},getCharacteristicNameFromUUID(e){var t;return Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>e==s.uuid))?.[0],t))),t}}),y=b.serviceUUIDs,E=b.optionalServiceUUIDs;const D=c("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var w={bluetooth:t}}if(e)w=window.navigator;class C extends p{#m={characteristicvaluechanged:this.#f.bind(this)};#S={gattserverdisconnected:this.#b.bind(this)};static get isSupported(){return"bluetooth"in w}static get type(){return"webBluetooth"}#y;get device(){return this.#y}set device(e){this.#y!=e?(this.#y&&d(this.#y,this.#S),e&&g(e,this.#S),this.#y=e):D.warn("tried to assign the same BluetoothDevice")}get server(){return this.#y?.gatt}get isConnected(){return this.server?.connected}#E=new Map;#D=new Map;async connect(){await super.connect();try{const t=await w.bluetooth.requestDevice({filters:[{services:y}],optionalServices:e?E:[]});D.log("got BluetoothDevice"),this.device=t,D.log("connecting to device...");const s=await this.device.gatt.connect();D.log(`connected to device? ${s.connected}`),await this.#w(),D.log("fully connected"),this.status="connected"}catch(e){D.error(e),this.status="not connected",this.server?.disconnect(),this.#C()}}async#w(){this.#C(),D.log("getting services...");const e=await this.server.getPrimaryServices();D.log("got services",e.length),D.log("getting characteristics...");for(const n in e){const r=e[n],i=(s=r.uuid,b.getServiceNameFromUUID(s));if(D.assertWithError(i,`no name found for service uuid "${r.uuid}"`),D.log(`got "${i}" service`),"dfu"==i){D.log("skipping dfu service");continue}r._name=i,this.#E.set(i,r),D.log(`getting characteristics for "${i}" service`);const a=await r.getCharacteristics();D.log(`got characteristics for "${i}" service`);for(const e in a){const s=a[e],n=(t=s.uuid,b.getCharacteristicNameFromUUID(t));D.assertWithError(n,`no name found for characteristic uuid "${s.uuid}" in "${i}" service`),D.log(`got "${n}" characteristic in "${i}" service`),s._name=n,this.#D.set(n,s),g(s,this.#m),s.properties.read&&(D.log(`reading "${n}" characteristic...`),await s.readValue()),s.properties.notify&&(D.log(`starting notifications for "${n}" characteristic`),await s.startNotifications())}}var t,s}#C(){this.device&&d(this.device,this.#S),this.#D.forEach((e=>{d(e,this.#m)}))}async disconnect(){await super.disconnect(),D.log("disconnecting from device..."),this.server?.disconnect(),this.#C(),this.status="not connected"}#f(e){D.log("oncharacteristicvaluechanged");const t=e.target,s=t._name;D.assertWithError(s,`no name found for characteristic with uuid "${t.uuid}"`),D.log(`oncharacteristicvaluechanged for "${s}" characteristic`);const n=t.value;switch(D.assertWithError(n,`no data found for "${s}" characteristic`),D.log(`data for "${s}" characteristic`,Array.from(new Uint8Array(n.buffer))),s){case"manufacturerName":this.onMessageReceived("manufacturerName",n);break;case"modelNumber":this.onMessageReceived("modelNumber",n);break;case"softwareRevision":this.onMessageReceived("softwareRevision",n);break;case"hardwareRevision":this.onMessageReceived("hardwareRevision",n);break;case"firmwareRevision":this.onMessageReceived("firmwareRevision",n);break;case"pnpId":this.onMessageReceived("pnpId",n);break;case"serialNumber":this.onMessageReceived("serialNumber",n);break;case"batteryLevel":this.onMessageReceived("batteryLevel",n);break;case"name":this.onMessageReceived("getName",n);break;case"type":this.onMessageReceived("getType",n);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",n);break;case"sensorData":this.onMessageReceived("sensorData",n);break;default:throw new Error(`uncaught characteristicName "${s}"`)}}#b(e){D.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){let s;switch(await super.sendMessage(...arguments),e){case"setName":s=this.#D.get("name");break;case"setType":s=this.#D.get("type");break;case"setSensorConfiguration":s=this.#D.get("sensorConfiguration");break;case"triggerVibration":s=this.#D.get("vibration");break;default:throw Error(`uncaught messageType "${e}"`)}D.assert(s,"no characteristic found"),await s.writeValueWithResponse(t),s.properties.read&&await s.readValue()}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),D.log("attempting to reconnect..."),await this.server.connect(),this.isConnected?(D.log("successfully reconnected!"),await this.#w(),this.status="connected"):(D.log("unable to reconnect"),this.status="not connected")}}const T=c("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class P extends p{static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return!1}async connect(){await super.connect()}async disconnect(){await super.disconnect(),T.log("disconnecting from device...")}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!1}async reconnect(){await super.reconnect(),T.log("attempting to reconnect...")}#T;get noblePeripheral(){return this.#T}set noblePeripheral(e){T.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(T.log({newNoblePeripheral:e}),this.#T&&(d(this.#T,this.#P),delete this.#T._device),e&&(e._device=this,g(e,this.#P)),this.#T=e):T.log("attempted to assign duplicate noblePeripheral")}#P={connect:this.#L,disconnect:this.#M,rssiUpdate:this.#W,servicesDiscover:this.#N};#L(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){T.log("onNoblePeripheralConnect",e)}#M(){this._device.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){T.log("onNoblePeripheralDisconnect",e)}#W(e){this._device.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){T.log("onNoblePeripheralRssiUpdate",e,t)}#N(e){this._device.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){T.log("onNoblePeripheralServicesDiscover",e,t)}}const L={min:1/0,max:-1/0};class M{#R=Object.assign({},L);reset(){Object.assign(this.#R,L)}update(e){this.#R.min=Math.min(e,this.#R.min),this.#R.max=Math.max(e,this.#R.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#R.min,this.#R.max)}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class W{#R={x:new M,y:new M};reset(){this.#R.x.reset(),this.#R.y.reset()}update(e){this.#R.x.update(e.x),this.#R.y.update(e.y)}getNormalization(e){return{x:this.#R.x.getNormalization(e.x),y:this.#R.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const N=c("PressureSensorDataManager",{log:!0});class R{#x;get deviceType(){return this.#x}set deviceType(e){N.assertTypeWithError(e,"string"),this.#x!=e?(N.log({newDeviceType:e}),this.#x=e,this.#k(),this.resetRange()):N.warn(`redundant deviceType assignment "${e}"`)}static#I=["hallux","digits","innerMetatarsal","centerMetatarsal","outerMetatarsal","arch","lateral","heel"];static get Names(){return this.#I}get names(){return R.Names}static#O={pressure:2**-16};static get Scalars(){return this.#O}get scalars(){return R.Scalars}static#A=8;static get NumberOfPressureSensors(){return this.#A}get numberOfPressureSensors(){return R.NumberOfPressureSensors}static#U=[{x:110,y:73},{x:250,y:155},{x:56,y:236},{x:185,y:277},{x:305,y:337},{x:69,y:584},{x:285,y:635},{x:162,y:914}].map((({x:e,y:t})=>({x:e/365,y:1-t/1e3})));static get PressureSensorPositions(){return this.#U}#_;get pressureSensorPositions(){return this.#_}#k(){const e=R.PressureSensorPositions.map((({x:e,y:t})=>("leftInsole"==this.deviceType&&(e=1-e),{x:e,y:t})));N.log({pressureSensorPositions:e}),this.#_=e}#$=function(e,t){return new Array(e).fill(1).map(((e,s)=>{if("function"==typeof t){return t(s)}{const e=t;return Object.assign({},e)}}))}(this.numberOfPressureSensors,(()=>new M));#V=new W;resetRange(){this.#$.forEach((e=>e.reset())),this.#V.reset()}parsePressure(e,t){this.scalars.pressure;const s={sensors:[],rawSum:0,normalizedSum:0};for(let n=0;n<this.numberOfPressureSensors;n++,t+=2){const r=e.getUint16(t,!0),i=this.#$[n].updateAndGetNormalization(r),a=this.pressureSensorPositions[n],o=this.names[n];s.sensors[n]={rawValue:r,normalizedValue:i,position:a,name:o},s.rawSum+=r,s.normalizedSum=i/this.numberOfPressureSensors}return s.rawSum>0&&(s.center={x:0,y:0},s.sensors.forEach((e=>{e.weightedValue=e.rawValue/s.rawSum,s.center.x+=e.position.x*e.weightedValue,s.center.y+=e.position.y*e.weightedValue})),s.normalizedCenter=this.#V.updateAndGetNormalization(s.center)),N.log({pressure:s}),s}}const x=c("MotionSensorDataManager",{log:!0});class k{#x;get deviceType(){return this.#x}set deviceType(e){x.assertTypeWithError(e,"string"),this.#x!=e?(x.log({newDeviceType:e}),this.#x=e):x.warn(`redundant deviceType assignment "${e}"`)}static#O={acceleration:2**-12,gravity:2**-12,linearAcceleration:2**-12,gyroscope:2e3*2**-15,magnetometer:2500*2**-15,gameRotation:2**-14,rotation:2**-14};static get Scalars(){return this.#O}get scalars(){return k.Scalars}static#z=6;static get Vector3Size(){return this.#z}get vector3Size(){return k.Vector3Size}parseVector3(e,t,s){let[n,r,i]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0)].map((e=>e*this.scalars[s]));const a={x:n,y:r,z:i};return x.log({vector:a}),a}static#B=8;static get QuaternionSize(){return this.#B}get quaternionSize(){return k.QuaternionSize}parseQuaternion(e,t,s){let[n,r,i,a]=[e.getInt16(t,!0),e.getInt16(t+2,!0),e.getInt16(t+4,!0),e.getInt16(t+6,!0)].map((e=>e*this.scalars[s]));const o={x:n,y:r,z:i,w:a};return x.log({quaternion:o}),o}}c("BarometerSensorDataManager",{log:!0});class I{static#O={barometer:.78125};static get Scalars(){return this.#O}get scalars(){return I.Scalars}}const O=c("SensorDataManager",{log:!0});class A{#x;get deviceType(){return this.#x}set deviceType(e){O.assertTypeWithError(e,"string"),this.#x!=e?(O.log({newDeviceType:e}),this.#x=e,this.pressureSensorDataManager.deviceType=e,this.motionSensorDataManager.deviceType=e):O.warn(`redundant deviceType assignment "${e}"`)}pressureSensorDataManager=new R;motionSensorDataManager=new k;barometerSensorDataManager=new I;static#F=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#F}get#q(){return A.Types}static AssertValidSensorType(e){O.assertTypeWithError(e,"string"),O.assertWithError(this.#F.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){O.assertTypeWithError(e,"number"),O.assertWithError(e in this.#F,`invalid sensorTypeEnum ${e}`)}onDataReceived;#j=0;#H=0;clearTimestamp(){O.log("clearing sensorDataManager timestamp data"),this.#j=0,this.#H=0}#G(e,t){const s=e.getUint16(t,!0);s<this.#H&&(this.#j+=65536),this.#H=s;return s+this.#j}parse(e){O.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#G(e,t);for(t+=2;t<e.byteLength;){const n=e.getUint8(t++);let r;A.AssertValidSensorTypeEnum(n);const i=e.getUint8(t++),a=this.#q[n];switch(O.log({sensorTypeEnum:n,sensorType:a,sensorTypeDataSize:i}),a){case"pressure":r=this.pressureSensorDataManager.parsePressure(e,t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(e,t,a);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(e,t,a);break;case"barometer":break;default:O.error(`uncaught sensorType "${a}"`)}t+=i,O.assertWithError(r,`no value defined for sensorType "${a}"`),this.onDataReceived?.(a,{timestamp:s,[a]:r})}}static get NumberOfPressureSensors(){return R.NumberOfPressureSensors}get numberOfPressureSensors(){return A.NumberOfPressureSensors}static get PressureSensorNames(){return R.Names}get pressureSensorNames(){return A.PressureSensorNames}}const U=c("SensorConfigurationManager",{log:!0});class _{#x;get deviceType(){return this.#x}set deviceType(e){U.assertTypeWithError(e,"string"),this.#x!=e?(U.log({newDeviceType:e}),this.#x=e):U.warn(`redundant deviceType assignment "${e}"`)}#Z;#Q(e){U.assertWithError(this.#Z,"must get initial sensorConfiguration");const t=this.#Z?.includes(e);return U.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0,n=0;s<e.byteLength;s+=2,n++){const r=A.Types[n];if(!r){U.warn(`unknown sensorType index ${n}`);break}const i=e.getUint16(s,!0);U.log({sensorType:r,sensorRate:i}),t[r]=i}return U.log({parsedSensorConfiguration:t}),this.#Z=Object.keys(t),t}static#J=65535;static get MaxSensorRate(){return this.#J}get maxSensorRate(){return _.MaxSensorRate}static#K=5;static get SensorRateStep(){return this.#K}get sensorRateStep(){return _.SensorRateStep}#X(e){U.assertTypeWithError(e,"number"),U.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),U.assertWithError(e<this.maxSensorRate,`sensorRate must be 0 or greater (got ${e})`),U.assertWithError(e%this.sensorRateStep==0,`sensorRate must be multiple of ${this.sensorRateStep}`)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#Q(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{A.AssertValidSensorType(t);const r=A.Types.indexOf(t);s.setUint8(3*n,r);const i=e[t];this.#X(i),s.setUint16(3*n+1,e[t],!0)})),U.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const $=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],V=new TextEncoder;function z(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return B(e)}if(e instanceof Array){const t=e;return Uint8Array.from(t).buffer}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return B(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function B(e){const t=V.encode(e);return z(t.byteLength,t)}const F=c("VibrationManager");class q{static#Y=["front","rear"];static get Locations(){return this.#Y}get locations(){return q.Locations}#ee(e){F.assertTypeWithError(e,"string"),F.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#te(e){this.#se(e),e.forEach((e=>{this.#ee(e)}))}#ne(e){this.#te(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),F.log({locationsBitmask:t}),F.assertWithError(t>0,"locationsBitmask must not be zero"),t}#se(e){F.assertWithError(Array.isArray(e),"passed non-array"),F.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return $}get waveformEffects(){return q.WaveformEffects}#re(e){F.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#ie=1270;static get MaxWaveformEffectSegmentDelay(){return this.#ie}get maxWaveformEffectSegmentDelay(){return q.MaxWaveformEffectSegmentDelay}#ae(e){if(null!=e.effect){const t=e.effect;this.#re(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;F.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),F.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#oe(t)}}static#ce=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#ce}get maxWaveformEffectSegmentLoopCount(){return q.MaxWaveformEffectSegmentLoopCount}#oe(e){F.assertTypeWithError(e,"number"),F.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),F.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#he=8;static get MaxNumberOfWaveformEffectSegments(){return this.#he}get maxNumberOfWaveformEffectSegments(){return q.MaxNumberOfWaveformEffectSegments}#le(e){this.#se(e),F.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ae(e)}))}static#ge=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#ge}get maxWaveformEffectSequenceLoopCount(){return q.MaxWaveformEffectSequenceLoopCount}#de(e){F.assertTypeWithError(e,"number"),F.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),F.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#ue=2550;static get MaxWaveformSegmentDuration(){return this.#ue}get maxWaveformSegmentDuration(){return q.MaxWaveformSegmentDuration}#pe(e){F.assertTypeWithError(e.amplitude,"number"),F.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),F.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),F.assertTypeWithError(e.duration,"number"),F.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),F.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#ve=20;static get MaxNumberOfWaveformSegments(){return this.#ve}get maxNumberOfWaveformSegments(){return q.MaxNumberOfWaveformSegments}#me(e){this.#se(e),F.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#pe(e)}))}createWaveformEffectsData(e,t,s=0){this.#le(t),this.#de(s);let n=[],r=0;const i=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||i&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[r++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[r++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[r]=0);const i=e%4*2;n[r]|=s<<i,3!=e&&7!=e||r++}0!=s&&(n[r++]=s);const o=new DataView(Uint8Array.from(n).buffer);return F.log({dataArray:n,dataView:o}),this.#fe(e,"waveformEffect",o)}createWaveformData(e,t){this.#me(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),F.log({dataView:s}),this.#fe(e,"waveform",s)}static#F=["waveformEffect","waveform"];static get Types(){return this.#F}get#q(){return q.Types}#Se(e){F.assertTypeWithError(e,"string"),F.assertWithError(this.#q.includes(e),`invalid vibrationType "${e}"`)}#fe(e,t,s){F.assertWithError(s?.byteLength>0,"no data received");const n=this.#ne(e);this.#Se(t);const r=this.#q.indexOf(t);F.log({locationsBitmask:n,vibrationTypeIndex:r,dataView:s});const i=z(n,r,s.byteLength,s);return F.log({data:i}),i}}const j=c("Device",{log:!1});class H{constructor(){this.#be.onDataReceived=this.#ye.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{H.#Ee(this)}))}static get#De(){return C}static#we=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get EventTypes(){return this.#we}get eventTypes(){return H.#we}#Ce=new l(this.eventTypes);addEventListener(e,t,s){this.#Ce.addEventListener(e,t,s)}#Te(e){this.#Ce.dispatchEvent(e)}removeEventListener(e,t){return this.#Ce.removeEventListener(e,t)}#Pe;get connectionManager(){return this.#Pe}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Le.bind(this),e.onMessageReceived=this.#Me.bind(this)),this.#Pe=e,j.log("assigned new connectionManager",this.#Pe)):j.warn("same connectionManager is already assigned")}async connect(){return this.connectionManager||(this.connectionManager=new H.#De),this.connectionManager.connect()}get isConnected(){return this.connectionManager?.isConnected}#u(){j.assertWithError(this.isConnected,"not connected")}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.connectionManager?.reconnect()}static#We=!1;static get ReconnectOnDisconnection(){return this.#We}static set ReconnectOnDisconnection(e){j.assertTypeWithError(e,"boolean"),this.#We=e}#Ne=H.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#Ne}set reconnectOnDisconnection(e){j.assertTypeWithError(e,"boolean"),this.#Ne=e}#Re;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#u(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){return this.#Pe?.status||"not connected"}#Le(e){switch(j.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(j.log("starting reconnect interval..."),this.#Re=setInterval((()=>{j.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#Re&&(j.log("clearing reconnect interval"),clearInterval(this.#Re),this.#Re=void 0),this.#Te({type:"connectionStatus",message:{connectionStatus:e}}),this.#Te({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Te({type:"isConnected",message:{isConnected:this.isConnected}})}}#xe(){this.#ke=null,this.#Ie=null,this.#Oe=null;for(const e in this.#Ae)this.#Ae[e]=null}#Me(e,t){switch(j.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Ue.decode(t);j.log({manufacturerName:s}),this.#_e({manufacturerName:s});break;case"modelNumber":const n=this.#Ue.decode(t);j.log({modelNumber:n}),this.#_e({modelNumber:n});break;case"softwareRevision":const r=this.#Ue.decode(t);j.log({softwareRevision:r}),this.#_e({softwareRevision:r});break;case"hardwareRevision":const i=this.#Ue.decode(t);j.log({hardwareRevision:i}),this.#_e({hardwareRevision:i});break;case"firmwareRevision":const a=this.#Ue.decode(t);j.log({firmwareRevision:a}),this.#_e({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint8(3)|t.getUint8(4)<<8,productVersion:t.getUint8(5)|t.getUint8(6)<<8};"Bluetooth"==o.source&&(o.vendorId=t.getUint8(1)|t.getUint8(2)<<8),j.log({pnpId:o}),this.#_e({pnpId:o});break;case"serialNumber":const c=this.#Ue.decode(t);j.log({serialNumber:c});break;case"batteryLevel":const h=t.getUint8(0);j.log("received battery level",{batteryLevel:h}),this.#$e(h);break;case"getName":const l=this.#Ue.decode(t);j.log({name:l}),this.#Ve(l);break;case"getType":const g=t.getUint8(0),d=this.#q[g];j.log({typeEnum:g,type:d}),this.#ze(d);break;case"getSensorConfiguration":const u=this.#Be.parse(t);j.log({sensorConfiguration:u}),this.#Fe(u);break;case"sensorData":this.#be.parse(t);break;default:throw Error(`uncaught messageType ${e}`)}}static#qe=new TextEncoder;get#je(){return H.#qe}static#He=new TextDecoder;get#Ue(){return H.#He}#Ae={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Ae}get#Ge(){return Object.values(this.#Ae).every((e=>null!=e))}#_e(e){j.log({partialDeviceInformation:e});for(const t in e)this.#Te({type:t,message:{[t]:e[t]}});Object.assign(this.#Ae,e),j.log({deviceInformation:this.#Ae}),this.#Ge&&(j.log("completed deviceInformation"),this.#Te({type:"deviceInformation",message:{deviceInformation:this.#Ae}}))}#Oe=null;get batteryLevel(){return this.#Oe}#$e(e){j.assertTypeWithError(e,"number"),this.#Oe!=e?(this.#Oe=e,j.log({updatedBatteryLevel:this.#Oe}),this.#Te({type:"batteryLevel",message:{batteryLevel:this.#Oe}})):j.warn(`duplicate batteryLevel assignment ${e}`)}#ke;get name(){return this.#ke}#Ve(e){j.assertTypeWithError(e,"string"),this.#ke=e,j.log({updatedName:this.#ke}),this.#Te({type:"getName",message:{name:this.#ke}})}static get MinNameLength(){return 2}get minNameLength(){return H.MinNameLength}static get MaxNameLength(){return 65}get maxNameLength(){return H.MaxNameLength}async setName(e){this.#u(),j.assertTypeWithError(e,"string"),j.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),j.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#je.encode(e);j.log({setNameData:t}),await this.#Pe.sendMessage("setName",t)}static#F=["leftInsole","rightInsole"];static get Types(){return this.#F}get#q(){return H.Types}#Ie;get type(){return this.#Ie}#Ze(e){j.assertTypeWithError(e,"string"),j.assertWithError(this.#q.includes(e),`invalid type "${e}"`)}#ze(e){this.#Ze(e),e!=this.type?(this.#Ie=e,j.log({updatedType:this.#Ie}),this.#be.deviceType=this.#Ie,this.#Be.deviceType=this.#Ie,this.#Te({type:"getType",message:{type:this.#Ie}})):j.warn("redundant type assignment")}async setType(e){this.#u(),this.#Ze(e);const t=this.#q.indexOf(e),s=Uint8Array.from([t]);j.log({setTypeData:s}),await this.#Pe.sendMessage("setType",s)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#Qe=["left","right"];static get InsoleSides(){return this.#Qe}get insoleSides(){return H.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return A.Types}get sensorTypes(){return H.SensorTypes}static get PressureSensorNames(){return A.PressureSensorNames}get pressureSensorNames(){return H.PressureSensorNames}static get NumberOfPressureSensors(){return A.NumberOfPressureSensors}get numberOfPressureSensors(){return H.NumberOfPressureSensors}#Be=new _;#Je;get sensorConfiguration(){return this.#Je}static get MaxSensorRate(){return _.MaxSensorRate}static get SensorRateStep(){return _.SensorRateStep}#Fe(e){this.#Je=e,j.log({updatedSensorConfiguration:this.#Je}),this.#Be.hasAtLeastOneNonZeroSensorRate(this.sensorConfiguration)||(j.log("clearing sensorDataManager timestamp..."),this.#be.clearTimestamp()),this.#Te({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#u(),j.log({newSensorConfiguration:e});const t=this.#Be.createData(e);j.log({setSensorConfigurationData:t}),await this.#Pe.sendMessage("setSensorConfiguration",t)}static#Ke=!0;static get ClearSensorConfigurationOnLeave(){return this.#Ke}static set ClearSensorConfigurationOnLeave(e){j.assertTypeWithError(e,"boolean"),this.#Ke=e}#Xe=H.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Xe}set clearSensorConfigurationOnLeave(e){j.assertTypeWithError(e,"boolean"),this.#Xe=e}static#Ye={};static get ZeroSensorConfiguration(){return this.#Ye}static{this.SensorTypes.forEach((e=>{this.#Ye[e]=0}))}get zeroSensorConfiguration(){return H.ZeroSensorConfiguration}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}#be=new A;#ye(e,t){j.log({sensorType:e,sensorData:t}),this.#Te({type:e,message:t}),this.#Te({type:"sensorData",message:t})}resetPressureRange(){this.#be.pressureSensorDataManager.resetRange()}#et=new q;static get VibrationLocations(){return q.Locations}static get VibrationTypes(){return q.Types}static get VibrationWaveformEffects(){return q.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return q.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return q.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return q.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return q.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return q.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return q.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{locations:s,type:n}=e;let r;switch(n){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:n,loopCount:i}=t;r=this.#et.createWaveformEffectsData(s,n,i)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:n}=t;r=this.#et.createWaveformData(s,n)}break;default:throw Error(`invalid vibration type "${n}"`)}j.log({type:n,dataView:r}),t=z(t,r)})),await this.#Pe.sendMessage("triggerVibration",t)}static#tt=[];static get ConnectedDevices(){return this.#tt}static#st=!1;static get UseLocalStorage(){return this.#st}static set UseLocalStorage(e){this.#nt(),j.assertTypeWithError(e,"boolean"),this.#st=e,this.#st&&!this.#rt&&this.#it()}static#at={};static#rt;static#nt(){j.assertWithError(e,"localStorage is only available in the browser")}static#ot="BS.Device";static#ct(){this.#nt(),localStorage.setItem(this.#ot,JSON.stringify(this.#rt))}static#it(){this.#nt();let e=localStorage.getItem(this.#ot);if("string"!=typeof e)return j.warn("no info found in localStorage"),this.#rt=Object.assign({},this.#at),void this.#ct();try{const t=JSON.parse(e);return j.log({configuration:t}),t}catch(e){j.error(e)}}static async GetDevices(){if(!e)return void j.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void j.warn("bluetooth is not available in this browser");if(!this.#rt)return void j.warn("localStorageConfiguration not found");const t=this.#rt;if(!t.bluetoothDeviceIds||0==t.bluetoothDeviceIds.length)return void j.log("no bluetoothDeviceIds found in configuration");const s=await navigator.bluetooth.getDevices();j.log({bluetoothDevices:s});return s.map((e=>{if(e.gatt&&t.bluetoothDeviceIds.includes(e.id)){const t=new H;t.connectionManager=new C;return t.connectionManager.device=e,t}})).filter(Boolean)}static#ht=["deviceConnected","deviceDisconnected"];static get StaticEventTypes(){return this.#ht}static#lt=new l(this.#ht);static AddEventListener(e,t,s){this.#lt.addEventListener(e,t,s)}static#gt(e){this.#lt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#lt.removeEventListener(e,t)}static#Ee(e){if(e.isConnected)if(this.#tt.includes(e))j.warn("device already included");else{if(j.log("adding device",e),this.#tt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t=e.connectionManager;this.#rt.bluetoothDeviceIds.push(t.device.id),this.#ct()}this.#gt({type:"deviceConnected",message:{device:e}})}else this.#tt.includes(e)?(j.log("removing device",e),this.#tt.splice(this.#tt.indexOf(e),1),this.#gt({type:"deviceDisconnected",message:{device:e}})):j.log("device already not included")}}const G=c("Timer",{log:!1});class Z{#dt;get callback(){return this.#dt}set callback(e){G.assertTypeWithError(e,"function"),G.log({newCallback:e}),this.#dt=e,this.isRunning&&this.restart()}#ut;get interval(){return this.#ut}set interval(e){G.assertTypeWithError(e,"number"),G.assertWithError(e>0,"interval must be above 0"),G.log({newInterval:e}),this.#ut=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#pt=null;get isRunning(){return null!=this.#pt}start(){this.isRunning?G.log("interval already running"):(G.log("starting interval"),this.#pt=setInterval(this.#dt,this.#ut))}stop(){this.isRunning?(G.log("stopping interval"),clearInterval(this.#pt),this.#pt=null):G.log("interval already not running")}restart(){this.stop(),this.start()}}const Q=c("BaseScanner");class J{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#c(){Q.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#h(){Q.assertWithError(this.constructor!=J,`${this.constructor.name} must be subclassed`)}constructor(){this.#h(),this.#c(),g(this,this.#vt)}#vt={discoveredPeripheral:this.#mt.bind(this),isScanning:this.#ft.bind(this)};static#we=["isAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#we}get eventTypes(){return J.#we}#Ce=new l(this.eventTypes);addEventListener(e,t,s){this.#Ce.addEventListener(e,t,s)}dispatchEvent(e){this.#Ce.dispatchEvent(e)}removeEventListener(e,t){return this.#Ce.removeEventListener(e,t)}get isAvailable(){return!1}#St(){Q.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#bt(){Q.assertWithError(this.isScanning,"not scanning")}#yt(){Q.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#St(),this.#yt()}stopScan(){this.#bt()}#ft(){this.isScanning?(this.#Et={},this.#Dt={}):this.#wt.stop()}#Et={};get discoveredPeripherals(){return this.#Et}get discoveredPeripheralsArray(){return Object.values(this.#Et).sort(((e,t)=>this.#Dt[e.id]-this.#Dt[t.id]))}#Ct(e){Q.assertWithError(this.#Et[e],`no discovered peripheral with id "${e}"`)}#mt(e){const t=e.message.discoveredPeripheral;this.#Et[t.id]=t,this.#Dt[t.id]=Date.now(),this.#wt.start()}#Dt={};static#Tt=5e3;static get DiscoveredPeripheralExpirationTimeout(){return this.#Tt}get#Pt(){return J.DiscoveredPeripheralExpirationTimeout}#wt=new Z(this.#Lt.bind(this),1e3);#Lt(){const e=Object.entries(this.#Et);if(0==e.length)return void this.#wt.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Dt[e];console.log(t-n),t-n>this.#Pt&&(Q.log("discovered peripheral timeout"),delete this.#Et[e],delete this.#Dt[e],this.dispatchEvent({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:s}}))}))}connectToPeripheral(e){this.#St()}disconnectFromPeripheral(e){this.#St()}reset(){Q.log("resetting...")}}const K=c("NobleScanner",{log:!0});let X=!1;if(t){var Y=require("@abandonware/noble");X=!0}class ee extends J{static get isSupported(){return X}#Mt=!1;get#Wt(){return this.#Mt}set#Wt(e){K.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Mt=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):K.log("duplicate isScanning assignment")}get isScanning(){return this.#Wt}#Nt="unknown";get#Rt(){return this.#Nt}set#Rt(e){K.assertTypeWithError(e,"string"),this.#Rt!=e?(this.#Nt=e,K.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):K.log("duplicate nobleState assignment")}#xt={scanStart:this.#kt.bind(this),scanStop:this.#It.bind(this),stateChange:this.#Ot.bind(this),discover:this.#At.bind(this)};#kt(){K.log("OnNobleScanStart"),this.#Wt=!0}#It(){K.log("OnNobleScanStop"),this.#Wt=!1}#Ot(e){K.log("onNobleStateChange",e),this.#Rt=e}#At(e){K.log("onNobleDiscover",e),this.#Ut[e.id]||(e._scanner=this,this.#Ut[e.id]=e,g(e,this.#P));const t={name:e.advertisement.localName,id:e.id,rssi:e.rssi};this.dispatchEvent({type:"discoveredPeripheral",message:{discoveredPeripheral:t}})}constructor(){super(),g(Y,this.#xt),g(this,this.#_t)}get isAvailable(){return"poweredOn"==this.#Rt}startScan(){super.startScan(),Y.startScanningAsync([],!0)}stopScan(){super.stopScan(),Y.stopScanningAsync()}reset(){super.reset(),Y.reset()}#_t={expiredDiscoveredPeripheral:this.#$t.bind(this)};#$t(e){const t=e.message.discoveredPeripheral,s=this.#Ut[t.id];s&&(delete this.#Ut[t.id],d(s,this.#P))}#Ut={};#Vt(e){K.assertTypeWithError(e,"string"),K.assertWithError(this.#Ut[e],`no noblePeripheral found with id "${e}"`)}#P={connect:this.#L,disconnect:this.#M,rssiUpdate:this.#W,servicesDiscover:this.#N};#L(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralConnect(e){K.log("onNoblePeripheralConnect",e)}#M(){this._scanner.onNoblePeripheralConnect(this)}onNoblePeripheralDisconnect(e){K.log("onNoblePeripheralDisconnect",e)}#W(e){this._scanner.onNoblePeripheralRssiUpdate(this,e)}onNoblePeripheralRssiUpdate(e,t){K.log("onNoblePeripheralRssiUpdate",e,t)}#N(e){this._scanner.onNoblePeripheralServicesDiscover(this,e)}onNoblePeripheralServicesDiscover(e,t){K.log("onNoblePeripheralServicesDiscover",e,t)}connectToPeripheral(e){super.connectToPeripheral(e),this.#Vt(e);const t=this.#Ut[e];K.log("connecting to discoveredPeripheral...",e);const s=new H,n=new P;s.noblePeripheral=t,s.connectionManager=n,s.connect()}disconnectFromPeripheral(e){super.disconnectFromPeripheral(e),this.#Vt(e),this.#Ut[e],K.log("disconnecting from discoveredPeripheral...",e)}}const te=c("Scanner",{log:!1});let se;ee.isSupported?(te.log("using NobleScanner"),se=new ee):te.log("Scanner not available");var ne=se;const re=c("DevicePairPressureSensorDataManager",{log:!0});class ie{static get Sides(){return H.InsoleSides}get sides(){return H.InsoleSides}#zt={};#V=new W;resetPressureRange(){this.#V.reset()}onDevicePressureData(e){const{pressure:t}=e.message;if(this.#zt[e.target.insoleSide]=t,this.#Bt)return this.#Ft()}get#Bt(){this.sides.every((e=>e in this.#zt))}static#O={pressure:R.Scalars.pressure/this.Sides.length};static get Scalars(){return this.#O}get scalars(){return DevicePair.Scalars}#Ft(){const e=this.scalars.pressure,t={rawSum:0,normalizedSum:0};return this.#zt.left.data.rawSum,this.sides.forEach((e=>{t.rawSum+=this.#zt[e].data.rawSum})),t.rawSum>0&&(t.normalizedSum=t.rawSum*e,t.center={x:0,y:0},this.sides.forEach((e=>{const s=this.#zt[e].data,n=s.rawSum/rawPressureSum;t.center.y+=s.center.y*n,"right"==e&&(t.center.x=n)})),t.normalizedCenter=this.#V.updateAndGetNormalization(t.center)),re.log({pressure:t}),t}}const ae=c("DevicePairSensorDataManager",{log:!0});class oe{static get Sides(){return H.InsoleSides}get sides(){return H.InsoleSides}#qt={};pressureSensorDataManager=new ie;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{type:t,timestamp:s}=e.message,n=t;let r;if(this.#qt[n]||(this.#qt[n]={}),this.#qt[n][e.target.insoleSide]=s,"pressure"===n)r=this.pressureSensorDataManager.onDevicePressureData(e);else ae.warn(`uncaught sensorType "${n}"`);if(r){const e=Object.assign({},this.#qt[n]);this.onDataReceived?.(n,{timestamps:e,[n]:r})}else ae.warn("no value received")}onDataReceived}const ce=c("DevicePair",{log:!0});let he=class e{constructor(){this.#be.onDataReceived=this.#ye.bind(this)}static#we=["pressure","isConnected"];static get EventTypes(){return this.#we}get eventTypes(){return e.#we}#Ce=new l(this.eventTypes);addEventListener(e,t,s){this.#Ce.addEventListener(e,t,s)}#Te(e){this.#Ce.dispatchEvent(e)}removeEventListener(e,t){return this.#Ce.removeEventListener(e,t)}static get Sides(){return H.InsoleSides}get sides(){return e.Sides}#jt;get left(){return this.#jt}#Ht;get right(){return this.#Ht}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}assignInsole(e){if(!e.isInsole)return void ce.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&d(s,this.#Gt),g(e,this.#Gt),t){case"left":this.#jt=e;break;case"right":this.#Ht=e}return ce.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Te({type:"isConnected",message:{isConnected:this.isConnected}}),s}ce.warn("device already assigned")}#Gt={pressure:this.#Zt.bind(this),isConnected:this.#Qt.bind(this)};#Qt(e){this.#Te({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.isConnected&&this.sides.forEach((t=>{this[t].setSensorConfiguration(e)}))}#be=new oe;#Zt(e){this.isConnected&&this.#be.onDeviceSensorData(e)}#ye(e,t){ce.log({sensorType:e,sensorData:t}),this.#Te({type:e,message:t})}resetPressureRange(){this.#be.resetPressureRange()}static#Jt=new e;static get shared(){return this.#Jt}static{H.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Jt.assignInsole(t)}))}};const le=c("ServerUtils",{log:!1}),ge=3e7,de=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredPeripheral","discoveredPeripherals","expiredDiscoveredPeripheral","peripheralRSSI","connectToPeripheral","disconnectFromPeripheral"];function ue(...e){le.log("createServerMessage",...e);const t=e.map((e=>{"string"==typeof e&&(e={type:e}),"data"in e?Array.isArray(e.data)||(e.data=[e.data]):e.data=[];const t=z(...e.data),s=t.byteLength;return z((n=e.type,le.assertTypeWithError(n,"string"),le.assertWithError(de.includes(n),`invalid serverMessageType "${n}"`),de.indexOf(n)),s,t);var n}));return le.log("messageBuffers",...t),z(...t)}const pe=new TextDecoder;function ve(e,t){const s=e.getUint8(t++),n=pe.decode(e.buffer.slice(t,t+s));return t+=s,n}const me=ue("ping"),fe=ue("pong"),Se=ue("isScanningAvailable"),be=ue("isScanning"),ye=ue("startScan"),Ee=ue("stopScan"),De=ue("discoveredPeripherals"),we=c("WebSocketClient",{log:!0});class Ce{static#we=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredPeripheral","expiredDiscoveredPeripheral"];static get EventTypes(){return this.#we}get eventTypes(){return Ce.#we}#Ce=new l(this.eventTypes);addEventListener(e,t,s){this.#Ce.addEventListener(e,t,s)}#Te(e){this.#Ce.dispatchEvent(e)}removeEventListener(e,t){return this.#Ce.removeEventListener(e,t)}#Kt;get webSocket(){return this.#Kt}set webSocket(e){this.#Kt!=e?(we.log("assigning webSocket",e),this.#Kt&&d(this.#Kt,this.#Xt),g(e,this.#Xt),this.#Kt=e,we.log("assigned webSocket")):we.warn("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#Yt(){we.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#es(){we.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#es(),this.#ts="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#Yt(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#ts="disconnecting",this.webSocket.close()}reconnect(){this.#es(),this.webSocket=new WebSocket(this.webSocket.url)}static#We=!0;static get ReconnectOnDisconnection(){return this.#We}static set ReconnectOnDisconnection(e){we.assertTypeWithError(e,"boolean"),this.#We=e}#Ne=Ce.#We;get reconnectOnDisconnection(){return this.#Ne}set reconnectOnDisconnection(e){we.assertTypeWithError(e,"boolean"),this.#Ne=e}#Xt={open:this.#ss.bind(this),message:this.#ns.bind(this),close:this.#rs.bind(this),error:this.#is.bind(this)};#ss(e){we.log("webSocket.open",e),this.#as.start(),this.#ts="connected"}async#ns(e){we.log("webSocket.message",e),this.#as.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#os(s)}#rs(e){we.log("webSocket.close",e),this.#ts="not connected",this.#as.stop(),this.#Ne&&setTimeout((()=>{this.reconnect()}),3e3)}#is(e){we.log("webSocket.error",e)}#cs="not connected";get#ts(){return this.#cs}set#ts(e){switch(we.assertTypeWithError(e,"string"),we.log({newConnectionStatus:e}),this.#cs=e,this.#Te({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Te({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Te({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?(this.#hs(),this.#ls()):(this.#gs=!1,this.#Wt=!1)}}get connectionStatus(){return this.#ts}static#He=new TextDecoder;get#Ue(){return Ce.#He}#os(e){we.log("parseMessage",{dataView:e});let t=0;for(;t<e.byteLength;){const s=e.getUint8(t++),n=de[s],r=e.getUint8(t++);we.log({messageTypeEnum:s,messageType:n,messageByteLength:r}),we.assertWithError(n,`invalid messageTypeEnum ${s}`);let i=t;switch(n){case"ping":this.#ds();break;case"pong":break;case"isScanningAvailable":{const t=Boolean(e.getUint8(i++));we.log({isScanningAvailable:t}),this.#gs=t}break;case"isScanning":{const t=Boolean(e.getUint8(i++));we.log({isScanning:t}),this.#Wt=t}break;case"discoveredPeripheral":{const t=ve(e,i);we.log({discoveredPeripheralString:t}),i+=t.length;const s=JSON.parse(t);we.log({discoveredPeripheral:s}),this.#mt(s)}break;case"expiredDiscoveredPeripheral":{const t=ve(e,i);i+=t.length,this.#$t(t)}break;default:we.error(`uncaught messageType "${n}"`)}t+=r}}#as=new Z(this.#us.bind(this),ge);#us(){this.#Yt(),this.webSocket.send(me)}#ds(){this.#Yt(),this.webSocket.send(fe)}#ps=!1;get#gs(){return this.#ps}set#gs(e){we.assertTypeWithError(e,"boolean"),this.#ps=e,this.#Te({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#vs()}get isScanningAvailable(){return this.#gs}#ms(){this.#Yt(),we.assertWithError(this.isScanningAvailable,"scanning is not available")}#hs(){this.#Yt(),this.webSocket.send(Se)}#Mt=!1;get#Wt(){return this.#Mt}set#Wt(e){we.assertTypeWithError(e,"boolean"),this.#Mt=e,this.#Te({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Wt}#vs(){this.#Yt(),this.webSocket.send(be)}#bt(){we.assertWithError(this.isScanning,"is not scanning")}#yt(){we.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#yt(),this.webSocket.send(ye)}stopScan(){this.#bt(),this.webSocket.send(Ee)}toggleScan(){this.#ms(),this.isScanning?this.stopScan():this.startScan()}#Et={};get discoveredPeripherals(){return this.#Et}#Ct(e){we.assertTypeWithError(e,"string"),we.assertWithError(this.#Et[e],`no discoveredPeripheral found with id "${e}"`)}#mt(e){we.log({discoveredPeripheral:e}),this.#Et[e.id]=e,this.#Te({type:"discoveredPeripheral",message:{discoveredPeripheral:e}})}#ls(){this.#Yt(),this.webSocket.send(De)}#$t(e){we.log({discoveredPeripheralId:e});let t=this.#Et[e];t?(we.log({expiredDiscoveredPeripheral:t}),delete this.#Et[e],this.#Te({type:"expiredDiscoveredPeripheral",message:{discoveredPeripheral:t}})):we.warn(`no discoveredPeripheral found with id "${e}"`)}connectToPeripheral(e){this.#fs(e)}disconnectFromPeripheral(e){this.#Ss(e)}#fs(e){this.#Yt(),we.assertTypeWithError(e,"string"),this.webSocket.send(this.#bs(e))}#Ss(e){this.#Yt(),we.assertTypeWithError(e,"string"),this.webSocket.send(this.#ys(e))}#bs(e){return ue({type:"connectToPeripheral",data:e})}#ys(e){return ue({type:"disconnectFromPeripheral",data:e})}#Es={};get devices(){return this.#Es}}const Te=c("WebSocketServer",{log:!0});t&&require("ws");class Pe{constructor(){ne&&g(ne,this.#Ds)}static#we=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#we}get eventTypes(){return Pe.#we}#Ce=new l(this.eventTypes);addEventListener(e,t,s){this.#Ce.addEventListener(e,t,s)}#Te(e){this.#Ce.dispatchEvent(e)}removeEventListener(e,t){return this.#Ce.removeEventListener(e,t)}#ws;get server(){return this.#ws}set server(e){this.#ws!=e?(Te.log("assigning server..."),this.#ws&&(Te.log("clearing existing server..."),d(this.#ws,this.#Cs)),g(e,this.#Cs),this.#ws=e,Te.log("assigned server")):Te.warn("redundant WebSocket assignment")}broadcast(e){this.server.clients.forEach((t=>{t.send(e)}))}#Cs={close:this.#Ts.bind(this),connection:this.#Ps.bind(this),error:this.#Ls.bind(this),headers:this.#Ms.bind(this),listening:this.#Ws.bind(this)};#Ts(){Te.log("server.close")}#Ps(e){Te.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new Z((()=>this.#Ns(e)),ge),e.pingClientTimer.start(),g(e,this.#Rs),this.#Te({type:"clientConnected",message:{client:e}})}#Ls(e){Te.error(e)}#Ms(){}#Ws(){Te.log("server.listening")}#Rs={open:this.#xs.bind(this),message:this.#ks.bind(this),close:this.#Is.bind(this),error:this.#Os.bind(this)};#xs(e){Te.log("client.open")}#ks(e){Te.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView((n=e.data).buffer.slice(n.byteOffset,n.byteOffset+n.byteLength));var n;this.#As(t,s)}#Is(e){Te.log("client.close");const t=e.target;t.pingClientTimer.stop(),d(t,this.#Rs),this.#Te({type:"clientDisconnected",message:{client:t}})}#Os(e){Te.log("client.error")}static#He=new TextDecoder;get#Ue(){return Pe.#He}#As(e,t){let s=0;for(;s<t.byteLength;){const n=t.getUint8(s++),r=de[n],i=t.getUint8(s++);Te.log({messageTypeEnum:n,messageType:r,messageByteLength:i}),Te.assertWithError(r,`invalid messageTypeEnum ${n}`);let a=s;switch(r){case"ping":e.send(pongMessageBuffer);break;case"pong":case"disconnectFromAllPeripherals":break;case"isScanningAvailable":e.send(this.#Us);break;case"isScanning":e.send(this.#_s);break;case"startScan":ne.startScan();break;case"stopScan":ne.stopScan();break;case"discoveredPeripherals":e.send(this.#$s);break;case"connectToPeripheral":{const e=ve(t,a);a+=e.length,ne.connectToPeripheral(e)}break;case"disconnectFromPeripheral":{const e=ve(t,a);a+=e.length,ne.disconnectFromPeripheral(e)}break;default:Te.error(`uncaught messageType "${r}"`)}s+=i}}get#Us(){return ue({type:"isScanningAvailable",data:ne.isAvailable})}get#_s(){return ue({type:"isScanning",data:ne.isScanning})}#Vs(e){this.server.clients.forEach((t=>{t.send(e)}))}#Ns(e){e.isAlive?(e.isAlive=!1,e.send(me)):e.terminate()}#Ds={isAvailable:this.#zs.bind(this),isScanning:this.#Bs.bind(this),discoveredPeripheral:this.#Fs.bind(this),expiredDiscoveredPeripheral:this.#$t.bind(this)};#zs(e){this.#Vs(this.#Us)}#Bs(e){this.#Vs(this.#_s)}#Fs(e){const t=e.message.discoveredPeripheral;console.log(t),this.#Vs(this.#qs(t))}#$t(e){const t=e.message.discoveredPeripheral;console.log("expired",t),this.#Vs(this.#js(t))}#qs(e){return ue({type:"discoveredPeripheral",data:e})}get#$s(){return ue(...ne.discoveredPeripheralsArray.map((e=>({type:"discoveredPeripheral",data:e}))))}#js(e){return ue({type:"expiredDiscoveredPeripheral",data:e.id})}}return{setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)},Device:H,DevicePair:he,WebSocketClient:Ce,WebSocketServer:Pe,Scanner:ne}}));
