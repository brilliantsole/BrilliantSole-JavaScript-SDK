/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class l{static#e={};constructor(e){if(l.#e[e])throw new Error(`"${e}" console already exists`);l.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new l(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function h(e,t){return l.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=h("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}const f=h("FileTransferManager",{log:!0});class m{static#o=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#o}get messageTypes(){return m.MessageTypes}static#c=["tflite"];static get Types(){return this.#c}get types(){return m.Types}#l(e){f.assertEnumWithError(e,this.types)}#h(e){f.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#g=["idle","sending","receiving"];static get Statuses(){return this.#g}get statuses(){return m.Statuses}#d(e){f.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#u=["startSend","startReceive","cancel"];static get Commands(){return this.#u}get commands(){return m.Commands}#v(e){f.assertEnumWithError(e,this.commands)}static async GetFileBuffer(e){let t;if(e instanceof Array)t=e;else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}async getFileBuffer(e){return m.GetFileBuffer(e)}static#p=51200;static get MaxLength(){return this.#p}#f=m.MaxLength;get maxLength(){return this.#f}#m(e){f.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);f.log(`maxLength: ${t}kB`),this.#f=t}#b(e){f.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#S;get type(){return this.#S}#y(e){f.log("parseFileType",e);const t=e.getUint8(0);this.#h(t);const s=this.types[t];f.log({type:s}),this.#S=s}async#D(e){this.#l(e),this.type!=e||f.log(`redundant type assignment ${e}`)}#C=0;get length(){return this.#C}#E(e){f.log("parseFileLength",e);const t=e.getUint32(0,!0);f.log(`length: ${t}kB`),this.#C=t}async#T(e){f.assertTypeWithError(e,"number"),this.#b(e),this.length!=e||f.log(`redundant length assignment ${e}`)}#M=0;get checksum(){return this.#M}#w(e){f.log("checksum",e);const t=e.getUint32(0,!0);f.log({checksum:t}),this.#M=t}async#L(e){f.assertTypeWithError(newLength,"number"),this.checksum!=e||f.log(`redundant checksum assignment ${e}`)}sendCommand(e){this.#v(e)}#k;get status(){return this.#k}#W(e){f.log("parseFileStatus",e);const t=e.getUint8(0);this.#d(t);const s=this.statuses[t];f.log({status:s}),this.#k=s}#N(e){f.log("parseFileBlock",e)}parseMessage(e,t){switch(f.log({messageType:e}),e){case"maxFileLength":this.#m(t);break;case"getFileTransferType":this.#y(t);break;case"getFileLength":this.#E(t);break;case"getFileChecksum":this.#w(t);break;case"fileTransferStatus":this.#W(t);break;case"getFileTransferBlock":this.#N(t);break;default:throw Error(`uncaught messageType ${e}`)}}async sendFile(e,t){this.#l(e);const s=await this.getFileBuffer(t);console.log("fileBuffer",s)}receiveFile(e){this.#l(e)}sendMessage}const b=h("TfliteManager",{log:!0});class S{static#o=["getTfliteModelName","setTfliteModelName","getTfliteModelTask","setTfliteModelTask","getTfliteModelSampleRate","setTfliteModelSampleRate","getTfliteModelSensorTypes","setTfliteModelSensorTypes","getTfliteModelNumberOfClasses","setTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteEnableInferencing","setTfliteEnableInferencing","tfliteModelInference"];static get MessageTypes(){return this.#o}get messageTypes(){return S.MessageTypes}#I(e){b.log("parseName",e)}#R(e){b.log("parseTask",e)}#x(e){b.log("parseSampleRate",e)}#A(e){b.log("parseSensorTypes",e)}#O(e){b.log("parseNumberOfClasses",e)}#U(e){b.log("parseIsReady",e)}#$(e){b.log("parseCaptureDelay",e)}#P(e){b.log("parseThreshold",e)}#V(e){b.log("parseEnableInferencing",e)}#_(e){b.log("parseInference",e)}parseMessage(e,t){switch(b.log({messageType:e}),e){case"getTfliteModelName":this.#I(t);break;case"getTfliteModelTask":this.#R(t);break;case"getTfliteModelSampleRate":this.#x(t);break;case"getTfliteModelSensorTypes":this.#A(t);break;case"getTfliteModelNumberOfClasses":this.#O(t);break;case"tfliteModelIsReady":this.#U(t);break;case"getTfliteCaptureDelay":this.#$(t);break;case"getTfliteThreshold":this.#P(t);break;case"getTfliteEnableInferencing":this.#V(t);break;case"tfliteModelInference":this.#_(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const y=h("ConnectionManager",{log:!1});class D{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","getCurrentTime","setCurrentTime","triggerVibration",...m.MessageTypes,...S.MessageTypes];static get MessageTypes(){return this.#o}get id(){this.#F("id")}onStatusUpdated;onMessageReceived;static#B(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#F(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#B("type")}get type(){return this.constructor.type}#z(){y.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#q(){y.assertWithError(this.constructor!=D,`${this.constructor.name} must be subclassed`)}constructor(){this.#q(),this.#z()}#k="not connected";get status(){return this.#k}set status(e){y.assertTypeWithError(e,"string"),this.#k!=e?(y.log(`new connection status "${e}"`),this.#k=e,this.onStatusUpdated?.(this.status)):y.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#j(){y.assertWithError(!this.isConnected,"device is already connected")}#H(){y.assertWithError("connecting"!=this.status,"device is already connecting")}#G(){y.assertWithError(this.isConnected,"device is not connected")}#J(){y.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#Q(){this.#G(),this.#J()}async connect(){this.#j(),this.#H(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#j(),this.#H(),y.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#G(),this.#J(),this.status="disconnecting",y.log("disconnecting from device...")}async sendMessage(e,t){this.#Q(),y.log("sending message",{messageType:e,data:t})}}const C=h("bluetoothUUIDs",{log:!1});if(t){var E=require("webbluetooth").BluetoothUUID}if(e)E=window.BluetoothUUID;function T(e){return C.assertTypeWithError(e,"string"),C.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function M(e){return E?.getCharacteristic?.(e)}function w(e){return E?.getService?.(e)}const L=Object.freeze({services:{deviceInformation:{uuid:w("device_information"),characteristics:{manufacturerName:{uuid:M("manufacturer_name_string")},modelNumber:{uuid:M("model_number_string")},hardwareRevision:{uuid:M("hardware_revision_string")},firmwareRevision:{uuid:M("firmware_revision_string")},softwareRevision:{uuid:M("software_revision_string")},pnpId:{uuid:M("pnp_id")},serialNumber:{uuid:M("serial_number_string")}}},battery:{uuid:w("battery_service"),characteristics:{batteryLevel:{uuid:M("battery_level")}}},main:{uuid:T("0000"),characteristics:{name:{uuid:T("1000")},type:{uuid:T("1001")},sensorConfiguration:{uuid:T("2000")},pressurePositions:{uuid:T("2001")},sensorScalars:{uuid:T("2002")},currentTime:{uuid:T("2003")},sensorData:{uuid:T("2004")},vibration:{uuid:T("3000")},maxFileLength:{uuid:T("4000")},fileTransferType:{uuid:T("4001")},fileLength:{uuid:T("4002")},fileChecksum:{uuid:T("4003")},fileTransferCommand:{uuid:T("4004")},fileTransferStatus:{uuid:T("4005")},fileTransferBlock:{uuid:T("4006")},tfliteModelName:{uuid:T("5000")},tfliteModelTask:{uuid:T("5001")},tfliteModelSampleRate:{uuid:T("5002")},tfliteModelSensorTypes:{uuid:T("5003")},tfliteModelNumberOfClasses:{uuid:T("5004")},tfliteModelIsReady:{uuid:T("5005")},tfliteCaptureDelay:{uuid:T("5006")},tfliteThreshold:{uuid:T("5007")},tfliteEnableInferencing:{uuid:T("5008")},tfliteModelInference:{uuid:T("5009")}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{dfu:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.dfu.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),k=L.serviceUUIDs,W=L.optionalServiceUUIDs,N=[...k,...W];function I(e){return L.getServiceNameFromUUID(e)}const R=[],x=[],A=[];function O(e){return L.getCharacteristicNameFromUUID(e)}function U(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":case"fileTransferCommand":case"fileTransferBlock":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":case"currentTime":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferStatus":case"fileTransferBlock":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferCommand":case"fileTransferBlock":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(L.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{k.includes(t.uuid)&&R.push(s.uuid),x.push(s.uuid),A.push(e)}))}),[]);h("BluetoothConnectionManager",{log:!0});class $ extends D{onCharacteristicValueChanged(e,t){switch(e){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":case"maxFileLength":case"fileTransferStatus":case"tfliteModelIsReady":case"tfliteModelInference":this.onMessageReceived(e,t);break;case"name":this.onMessageReceived("getName",t);break;case"type":this.onMessageReceived("getType",t);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",t);break;case"currentTime":this.onMessageReceived("getCurrentTime",t);break;case"fileTransferType":this.onMessageReceived("getFileTransferType",t);break;case"fileLength":this.onMessageReceived("getFileLength",t);break;case"fileChecksum":this.onMessageReceived("getFileChecksum",t);break;case"fileTransferBlock":this.onMessageReceived("getFileTransferBlock",t);break;case"tfliteModelName":this.onMessageReceived("getTfliteModelName",t);break;case"tfliteModelTask":this.onMessageReceived("getTfliteModelTask",t);break;case"tfliteModelSampleRate":this.onMessageReceived("getTfliteModelSampleRate",t);break;case"tfliteModelSensorTypes":this.onMessageReceived("getTfliteModelSensorTypes",t);break;case"tfliteModelNumberOfClasses":this.onMessageReceived("getTfliteModelNumberOfClasses",t);break;case"tfliteCaptureDelay":this.onMessageReceived("getTfliteCaptureDelay",t);break;case"tfliteThreshold":this.onMessageReceived("getTfliteThreshold",t);break;case"tfliteEnableInferencing":this.onMessageReceived("getTfliteEnableInferencing",t);break;default:throw new Error(`uncaught characteristicName "${e}"`)}}characteristicNameForMessageType(e){switch(e){case"setName":return"name";case"setType":return"type";case"setSensorConfiguration":return"sensorConfiguration";case"setCurrentTime":return"currentTime";case"triggerVibration":return"vibration";case"setFileTransferType":return"fileTransferType";case"setFileLength":return"fileLength";case"setFileChecksum":return"fileChecksum";case"setFileTransferCommand":return"fileTransferCommand";case"setFileTransferBlock":return"fileTransferBlock";case"setTfliteModelName":return"tfliteModelName";case"setTfliteModelTask":return"tfliteModelTask";case"setTfliteModelSampleRate":return"tfliteModelSampleRate";case"setTfliteModelSensorTypes":return"tfliteModelSensorTypes";case"setTfliteModelNumberOfClasses":return"tfliteModelNumberOfClasses";case"setTfliteCaptureDelay":return"tfliteCaptureDelay";case"setTfliteThreshold":return"tfliteThreshold";case"setTfliteEnableInferencing":return"tfliteEnableInferencing";default:throw Error(`no characteristicName for messageType "${e}"`)}}}const P=h("WebBluetoothConnectionManager",{log:!1});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var V={bluetooth:t}}if(e)V=window.navigator;class _ extends ${get id(){return this.device?.id}#Z={characteristicvaluechanged:this.#K.bind(this)};#X={gattserverdisconnected:this.#Y.bind(this)};static get isSupported(){return"bluetooth"in V}static get type(){return"webBluetooth"}#ee;get device(){return this.#ee}set device(e){this.#ee!=e?(this.#ee&&p(this.#ee,this.#X),e&&v(e,this.#X),this.#ee=e):P.log("tried to assign the same BluetoothDevice")}get server(){return this.#ee?.gatt}get isConnected(){return this.server?.connected}#te=new Map;#se=new Map;async connect(){await super.connect();try{const t=await V.bluetooth.requestDevice({filters:[{services:k}],optionalServices:e?W:[]});P.log("got BluetoothDevice"),this.device=t,P.log("connecting to device...");const s=await this.device.gatt.connect();P.log(`connected to device? ${s.connected}`),await this.#ne(),P.log("fully connected"),this.status="connected"}catch(e){P.error(e),this.status="not connected",this.server?.disconnect(),this.#ie()}}async#ne(){this.#ie(),P.log("getting services...");const e=await this.server.getPrimaryServices();P.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),P.log("getting characteristics...");for(const t in e){const i=e[t];P.log({service:i});const r=I(i.uuid);if(P.assertWithError(r,`no name found for service uuid "${i.uuid}"`),P.log(`got "${r}" service`),"dfu"==r){P.log("skipping dfu service");continue}i._name=r,this.#te.set(r,i),P.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();P.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];P.log({characteristic:t});const i=O(t.uuid);P.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),P.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#se.set(i,t),v(t,this.#Z);const o=t.properties||U(i);o.notify&&(P.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(P.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#re(t))}}}#ie(){this.device&&p(this.device,this.#X),this.#se.forEach((e=>{p(e,this.#Z)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#ie(),this.status="not connected"}#K(e){P.log("oncharacteristicvaluechanged");const t=e.target;this.#re(t)}#re(e){P.log("onCharacteristicValue");const t=e._name;P.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),P.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;P.assertWithError(s,`no data found for "${t}" characteristic`),P.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}#Y(e){P.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){await super.sendMessage(...arguments);const i=this.characteristicNameForMessageType(e);P.log({characteristicName:i});const r=this.#se.get(i);P.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||U(i);a.read&&!a.notify&&(P.log("reading value after write..."),await r.readValue(),(s||n)&&this.#re(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),P.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(P.log("successfully reconnected!"),await this.#ne(),this.status="connected"):(P.log("unable to reconnect"),this.status="not connected")}}const F={min:1/0,max:-1/0};class B{#ae=Object.assign({},F);reset(){Object.assign(this.#ae,F)}update(e){this.#ae.min=Math.min(e,this.#ae.min),this.#ae.max=Math.max(e,this.#ae.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#ae.min,this.#ae.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class z{#ae={x:new B,y:new B};reset(){this.#ae.x.reset(),this.#ae.y.reset()}update(e){this.#ae.x.update(e.x),this.#ae.y.update(e.y)}getNormalization(e){return{x:this.#ae.x.getNormalization(e.x),y:this.#ae.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const q=h("PressureSensorDataManager",{log:!0});class j{#oe=[];get positions(){return this.#oe}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;q.log({positions:t}),this.#oe=t,this.#ce=(s=this.numberOfSensors,n=()=>new B,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#ce;#le=new z;resetRange(){this.#ce.forEach((e=>e.reset())),this.#le.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),r=this.#ce[s].updateAndGetNormalization(i),a=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:r,position:a},t.rawSum+=i,t.normalizedSum+=r/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#le.updateAndGetNormalization(t.center)),q.log({pressure:t}),t}}const H=h("MotionSensorDataManager",{log:!1});class G{static#he=6;static get Vector3Size(){return this.#he}get vector3Size(){return G.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return H.log({vector:r}),r}static#ge=8;static get QuaternionSize(){return this.#ge}get quaternionSize(){return G.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return H.log({quaternion:a}),a}}h("BarometerSensorDataManager",{log:!0});class J{static#de={barometer:.78125};static get Scalars(){return this.#de}get scalars(){return J.Scalars}}const Q=h("ArrayBufferUtils",{log:!1}),Z=new TextEncoder;function K(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return Y(e)}if(e instanceof Array){return K(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return Y(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function X(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function Y(e){const t=Z.encode(e);return K(t.byteLength,t)}function ee(e,t,s){let n;return s&&(n=e.byteOffset+t+s),Q.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const te=h("ParseUtils",{log:!0}),se=new TextDecoder;function ne(e,t=0){const s=e.getUint8(t++);return{string:se.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function ie(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),te.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),te.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=ee(e,i,o);te.log({_dataView:c}),s(a,c),i+=o}}const re=h("SensorDataManager",{log:!0});class ae{pressureSensorDataManager=new j;motionSensorDataManager=new G;barometerSensorDataManager=new J;static#c=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#c}get types(){return ae.Types}#ue=new Map;static AssertValidSensorType(e){re.assertTypeWithError(e,"string"),re.assertWithError(this.#c.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){re.assertTypeWithError(e,"number"),re.assertWithError(e in this.#c,`invalid sensorTypeEnum ${e}`)}onDataReceived;#ve(e,t){let s=Date.now();s-=s%65536;return s+e.getUint16(t,!0)}parseData(e){re.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#ve(e,t);t+=2;ie(new DataView(e.buffer,t),ae.Types,((e,t)=>{const n=e,i=this.#ue.get(n);let r;switch(n){case"pressure":r=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:re.error(`uncaught sensorType "${n}"`)}re.assertWithError(r,`no value defined for sensorType "${n}"`),this.onDataReceived(n,{timestamp:s,[n]:r})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=ae.Types[s];if(!n){re.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);re.log({sensorType:n,sensorScalar:i}),this.#ue.set(n,i)}}}const oe=h("SensorConfigurationManager",{log:!1});class ce{#pe;#fe(e){oe.assertWithError(this.#pe,"must get initial sensorConfiguration");const t=this.#pe?.includes(e);return oe.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=ae.Types[n];if(!i){oe.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);oe.log({sensorType:i,sensorRate:r}),t[i]=r}return oe.log({parsedSensorConfiguration:t}),this.#pe=Object.keys(t),t}static#me=65535;static get MaxSensorRate(){return this.#me}get maxSensorRate(){return ce.MaxSensorRate}static#be=5;static get SensorRateStep(){return this.#be}get sensorRateStep(){return ce.SensorRateStep}static#Se(e){oe.assertTypeWithError(e,"number"),oe.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),oe.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),oe.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#ye(e){ce.#Se(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#fe(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{ae.AssertValidSensorType(t);const i=ae.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#ye(r),s.setUint16(3*n+1,e[t],!0)})),oe.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const le=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],he=h("VibrationManager");class ge{static#De=["front","rear"];static get Locations(){return this.#De}get locations(){return ge.Locations}#Ce(e){he.assertTypeWithError(e,"string"),he.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#Ee(e){this.#Te(e),e.forEach((e=>{this.#Ce(e)}))}#Me(e){this.#Ee(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),he.log({locationsBitmask:t}),he.assertWithError(t>0,"locationsBitmask must not be zero"),t}#Te(e){he.assertWithError(Array.isArray(e),"passed non-array"),he.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return le}get waveformEffects(){return ge.WaveformEffects}#we(e){he.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#Le=1270;static get MaxWaveformEffectSegmentDelay(){return this.#Le}get maxWaveformEffectSegmentDelay(){return ge.MaxWaveformEffectSegmentDelay}#ke(e){if(null!=e.effect){const t=e.effect;this.#we(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;he.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),he.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#We(t)}}static#Ne=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#Ne}get maxWaveformEffectSegmentLoopCount(){return ge.MaxWaveformEffectSegmentLoopCount}#We(e){he.assertTypeWithError(e,"number"),he.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),he.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#Ie=8;static get MaxNumberOfWaveformEffectSegments(){return this.#Ie}get maxNumberOfWaveformEffectSegments(){return ge.MaxNumberOfWaveformEffectSegments}#Re(e){this.#Te(e),he.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#ke(e)}))}static#xe=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#xe}get maxWaveformEffectSequenceLoopCount(){return ge.MaxWaveformEffectSequenceLoopCount}#Ae(e){he.assertTypeWithError(e,"number"),he.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),he.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Oe=2550;static get MaxWaveformSegmentDuration(){return this.#Oe}get maxWaveformSegmentDuration(){return ge.MaxWaveformSegmentDuration}#Ue(e){he.assertTypeWithError(e.amplitude,"number"),he.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),he.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),he.assertTypeWithError(e.duration,"number"),he.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),he.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#$e=20;static get MaxNumberOfWaveformSegments(){return this.#$e}get maxNumberOfWaveformSegments(){return ge.MaxNumberOfWaveformSegments}#Pe(e){this.#Te(e),he.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Ue(e)}))}createWaveformEffectsData(e,t,s=0){this.#Re(t),this.#Ae(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return he.log({dataArray:n,dataView:o}),this.#Ve(e,"waveformEffect",o)}createWaveformData(e,t){this.#Pe(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),he.log({dataView:s}),this.#Ve(e,"waveform",s)}static#c=["waveformEffect","waveform"];static get Types(){return this.#c}get#_e(){return ge.Types}#Fe(e){he.assertTypeWithError(e,"string"),he.assertWithError(this.#_e.includes(e),`invalid vibrationType "${e}"`)}#Ve(e,t,s){he.assertWithError(s?.byteLength>0,"no data received");const n=this.#Me(e);this.#Fe(t);const i=this.#_e.indexOf(t);he.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=K(n,i,s.byteLength,s);return he.log({data:r}),r}}const de=h("Device",{log:!1});class ue{get id(){return this.#Be?.id}constructor(){this.#ze.onDataReceived=this.#qe.bind(this),this.#je.sendMessage=this.#He.bind(this),this.#Ge.sendMessage=this.#He.bind(this),e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{ue.#Je(this)}))}static get#Qe(){return _}static#Ze=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage"];static get EventTypes(){return this.#Ze}get eventTypes(){return ue.#Ze}#Ke=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ke.addEventListener(e,t,s)}#Xe(e){this.#Ke.dispatchEvent(e)}removeEventListener(e,t){return this.#Ke.removeEventListener(e,t)}#Be;get connectionManager(){return this.#Be}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#Ye.bind(this),e.onMessageReceived=this.#et.bind(this)),this.#Be=e,de.log("assigned new connectionManager",this.#Be)):de.log("same connectionManager is already assigned")}#He(e,t){return this.#Be?.sendMessage(e,t)}async connect(){return this.connectionManager||(this.connectionManager=new ue.#Qe),this.#tt(),this.connectionManager.connect()}#st=!1;get isConnected(){return this.#st}#G(){de.assertWithError(this.isConnected,"not connected")}static#nt=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","fileTransferStatus","getTfliteModelName","getTfliteModelTask","getTfliteModelSampleRate","getTfliteModelSensorTypes","getTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteEnableInferencing","tfliteModelInference"];static get AllInformationConnectionMessages(){return this.#nt}get#it(){return ue.#nt}get#rt(){return this.#it.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#tt(),this.connectionManager?.reconnect()}static#at=!1;static get ReconnectOnDisconnection(){return this.#at}static set ReconnectOnDisconnection(e){de.assertTypeWithError(e,"boolean"),this.#at=e}#ot=ue.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#ot}set reconnectOnDisconnection(e){de.assertTypeWithError(e,"boolean"),this.#ot=e}#ct;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#G(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#Be?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#Be.status;default:return"not connected"}}#Ye(e){de.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(de.log("starting reconnect interval..."),this.#ct=setInterval((()=>{de.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#ct&&(de.log("clearing reconnect interval"),clearInterval(this.#ct),this.#ct=void 0),this.#lt()}#ht(e=!1){this.#Xe({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Xe({type:this.connectionStatus}),e&&this.#Xe({type:"isConnected",message:{isConnected:this.isConnected}})}#lt(){switch(this.#st=this.connectionManager?.isConnected&&this.#rt&&this.#gt,this.connectionStatus){case"connected":this.#st&&this.#ht(!0);break;case"not connected":this.#ht(!0);break;default:this.#ht(!1)}}#tt(){this.latestConnectionMessage.clear(),this.#gt=!1}#et(e,t){switch(de.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#dt.decode(t);de.log({manufacturerName:s}),this.#ut({manufacturerName:s});break;case"modelNumber":const n=this.#dt.decode(t);de.log({modelNumber:n}),this.#ut({modelNumber:n});break;case"softwareRevision":const i=this.#dt.decode(t);de.log({softwareRevision:i}),this.#ut({softwareRevision:i});break;case"hardwareRevision":const r=this.#dt.decode(t);de.log({hardwareRevision:r}),this.#ut({hardwareRevision:r});break;case"firmwareRevision":const a=this.#dt.decode(t);de.log({firmwareRevision:a}),this.#ut({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),de.log({pnpId:o}),this.#ut({pnpId:o});break;case"serialNumber":const c=this.#dt.decode(t);de.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);de.log("received battery level",{batteryLevel:l}),this.#vt(l);break;case"getName":const h=this.#dt.decode(t);de.log({name:h}),this.#pt(h);break;case"getType":const g=t.getUint8(0),d=this.#_e[g];de.log({typeEnum:g,type:d}),this.#ft(d);break;case"getSensorConfiguration":const u=this.#mt.parse(t);de.log({sensorConfiguration:u}),this.#bt(u);break;case"sensorScalars":this.#ze.parseScalars(t);break;case"pressurePositions":this.#ze.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":const v=Number(t.getBigUint64(0,!0));this.#St(v);break;case"sensorData":this.#ze.parseData(t);break;default:if(this.#je.messageTypes.includes(e))this.#je.parseMessage(e,t);else{if(!this.#Ge.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#Ge.parseMessage(e,t)}}this.latestConnectionMessage.set(e,t),this.#Xe({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#rt&&this.#lt()}latestConnectionMessage=new Map;static#yt=new TextEncoder;get#Dt(){return ue.#yt}static#Ct=new TextDecoder;get#dt(){return ue.#Ct}#gt=!1;#St(e){de.log({currentTime:e}),this.#gt=0!=e,this.#gt||this.#Et()}#Et(){de.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#Be.sendMessage("setCurrentTime",e)}#Tt={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Tt}get#Mt(){return Object.values(this.#Tt).every((e=>null!=e))}#ut(e){de.log({partialDeviceInformation:e});for(const t in e)this.#Xe({type:t,message:{[t]:e[t]}});Object.assign(this.#Tt,e),de.log({deviceInformation:this.#Tt}),this.#Mt&&(de.log("completed deviceInformation"),this.#Xe({type:"deviceInformation",message:{deviceInformation:this.#Tt}}))}#wt=null;get batteryLevel(){return this.#wt}#vt(e){de.assertTypeWithError(e,"number"),this.#wt!=e?(this.#wt=e,de.log({updatedBatteryLevel:this.#wt}),this.#Xe({type:"batteryLevel",message:{batteryLevel:this.#wt}})):de.log(`duplicate batteryLevel assignment ${e}`)}#Lt;get name(){return this.#Lt}#pt(e){de.assertTypeWithError(e,"string"),this.#Lt=e,de.log({updatedName:this.#Lt}),this.#Xe({type:"getName",message:{name:this.#Lt}})}static get MinNameLength(){return 2}get minNameLength(){return ue.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return ue.MaxNameLength}async setName(e){this.#G(),de.assertTypeWithError(e,"string"),de.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),de.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Dt.encode(e);de.log({setNameData:t}),await this.#Be.sendMessage("setName",t)}static#c=["leftInsole","rightInsole"];static get Types(){return this.#c}get#_e(){return ue.Types}#S;get type(){return this.#S}get typeEnum(){return ue.Types.indexOf(this.type)}#kt(e){de.assertEnumWithError(e,this.#_e)}#Wt(e){de.assertTypeWithError(e,"number"),de.assertWithError(this.#_e[e],`invalid typeEnum ${e}`)}#ft(e){this.#kt(e),e!=this.type?(this.#S=e,de.log({updatedType:this.#S}),this.#Xe({type:"getType",message:{type:this.#S}}),ue.#Nt&&ue.#It(this)):de.log("redundant type assignment")}async#Rt(e){this.#Wt(e);const t=Uint8Array.from([e]);de.log({setTypeData:t}),await this.#Be.sendMessage("setType",t)}async setType(e){this.#G(),this.#kt(e);const t=this.#_e.indexOf(e);this.#Rt(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#xt=["left","right"];static get InsoleSides(){return this.#xt}get insoleSides(){return ue.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return ae.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#mt=new ce;#At;get sensorConfiguration(){return this.#At}get sensorConfigurationData(){return this.#mt.createData(this.sensorConfiguration)}static get MaxSensorRate(){return ce.MaxSensorRate}static get SensorRateStep(){return ce.SensorRateStep}#bt(e){this.#At=e,de.log({updatedSensorConfiguration:this.#At}),this.#Xe({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#G(),de.log({newSensorConfiguration:e});const t=this.#mt.createData(e);de.log({setSensorConfigurationData:t}),await this.#Be.sendMessage("setSensorConfiguration",t)}static#Ot=!0;static get ClearSensorConfigurationOnLeave(){return this.#Ot}static set ClearSensorConfigurationOnLeave(e){de.assertTypeWithError(e,"boolean"),this.#Ot=e}#Ut=ue.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Ut}set clearSensorConfigurationOnLeave(e){de.assertTypeWithError(e,"boolean"),this.#Ut=e}static#$t={};static get ZeroSensorConfiguration(){return this.#$t}static{this.SensorTypes.forEach((e=>{this.#$t[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#Pt=8;static get DefaultNumberOfPressureSensors(){return this.#Pt}#ze=new ae;#qe(e,t){de.log({sensorType:e,sensorData:t}),this.#Xe({type:e,message:t}),this.#Xe({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#ze.pressureSensorDataManager.resetRange()}#Vt=new ge;static get VibrationLocations(){return ge.Locations}static get VibrationTypes(){return ge.Types}static get VibrationWaveformEffects(){return ge.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return ge.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return ge.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return ge.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return ge.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return ge.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return ge.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#Vt.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#Vt.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Vt.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}de.log({type:s,dataView:n}),t=K(t,n)})),await this.#Be.sendMessage("triggerVibration",t)}static#_t=[];static get ConnectedDevices(){return this.#_t}static#Nt=!1;static get UseLocalStorage(){return this.#Nt}static set UseLocalStorage(e){this.#Ft(),de.assertTypeWithError(e,"boolean"),this.#Nt=e,this.#Nt&&!this.#Bt&&this.#zt()}static#qt={devices:[]};static#Bt;static get CanUseLocalStorage(){return e&&window.localStorage}static#Ft(){de.assertWithError(e,"localStorage is only available in the browser"),de.assertWithError(window.localStorage,"localStorage not found")}static#jt="BS.Device";static#Ht(){this.#Ft(),localStorage.setItem(this.#jt,JSON.stringify(this.#Bt))}static async#zt(){this.#Ft();let e=localStorage.getItem(this.#jt);if("string"!=typeof e)return de.log("no info found in localStorage"),this.#Bt=Object.assign({},this.#qt),void this.#Ht();try{const t=JSON.parse(e);de.log({configuration:t}),this.#Bt=t,this.CanGetDevices&&await this.GetDevices()}catch(e){de.error(e)}}static#It(e){if("webBluetooth"!=e.connectionType)return void de.log("localStorage is only for webBluetooth devices");this.#Ft();const t=this.#Bt.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#Bt.devices[t].type=e.type,this.#Ht())}static#Gt=[];static get AvailableDevices(){return this.#Gt}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void de.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void de.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void de.warn("bluetooth.getDevices() is not available in this browser");this.#Bt||this.#zt();const t=this.#Bt;if(!t.devices||0==t.devices.length)return void de.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return de.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#Gt.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new ue,a=new _;a.device=e,e.name&&r.#pt(e.name),r.#ft(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#Jt(),this.AvailableDevices}static#Qt=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#Qt}static#Zt=new u(this,this.#Qt);static AddEventListener(e,t,s){this.#Zt.addEventListener(e,t,s)}static#Kt(e){this.#Zt.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#Zt.removeEventListener(e,t)}static#Je(e){if(e.isConnected)if(this.#_t.includes(e))de.log("device already included");else{if(de.log("adding device",e),this.#_t.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#Bt.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Bt.devices.push(t):this.#Bt.devices[s]=t,this.#Ht()}this.#Kt({type:"deviceConnected",message:{device:e}}),this.#Kt({type:"deviceIsConnected",message:{device:e}})}else this.#_t.includes(e)?(de.log("removing device",e),this.#_t.splice(this.#_t.indexOf(e),1),this.#Kt({type:"deviceDisconnected",message:{device:e}}),this.#Kt({type:"deviceIsConnected",message:{device:e}})):de.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));de.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#Jt()}}static#Jt(){de.log({AvailableDevices:this.AvailableDevices}),this.#Kt({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new ue;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#je=new m;static get FileTypes(){return m.Types}get maxFileLength(){return this.#je.maxLength}sendFile(e,t){this.#je.sendFile(e,t)}receiveFile(e){this.#je.receiveFile(e)}#Ge=new S}const ve=h("Timer",{log:!1});class pe{#Xt;get callback(){return this.#Xt}set callback(e){ve.assertTypeWithError(e,"function"),ve.log({newCallback:e}),this.#Xt=e,this.isRunning&&this.restart()}#Yt;get interval(){return this.#Yt}set interval(e){ve.assertTypeWithError(e,"number"),ve.assertWithError(e>0,"interval must be above 0"),ve.log({newInterval:e}),this.#Yt=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#es=null;get isRunning(){return null!=this.#es}start(){this.isRunning?ve.log("interval already running"):(ve.log("starting interval"),this.#es=setInterval(this.#Xt,this.#Yt))}stop(){this.isRunning?(ve.log("stopping interval"),clearInterval(this.#es),this.#es=null):ve.log("interval already not running")}restart(){this.stop(),this.start()}}const fe=h("BaseScanner");class me{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#z(){fe.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#q(){fe.assertWithError(this.constructor!=me,`${this.constructor.name} must be subclassed`)}constructor(){this.#q(),this.#z(),v(this,this.#ts)}#ts={discoveredDevice:this.#ss.bind(this),isScanning:this.#ns.bind(this)};static#Ze=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Ze}get eventTypes(){return me.#Ze}#Ke=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ke.addEventListener(e,t,s)}dispatchEvent(e){this.#Ke.dispatchEvent(e)}removeEventListener(e,t){return this.#Ke.removeEventListener(e,t)}get isAvailable(){return!1}#is(){fe.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#rs(){fe.assertWithError(this.isScanning,"not scanning")}#as(){fe.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#is(),this.#as()}stopScan(){this.#rs()}#ns(){this.isScanning?(this.#os={},this.#cs={}):this.#ls.stop()}#os={};get discoveredDevices(){return this.#os}get discoveredDevicesArray(){return Object.values(this.#os).sort(((e,t)=>this.#cs[e.id]-this.#cs[t.id]))}#hs(e){fe.assertWithError(this.#os[e],`no discovered device with id "${e}"`)}#ss(e){const t=e.message.discoveredDevice;this.#os[t.id]=t,this.#cs[t.id]=Date.now(),this.#ls.start()}#cs={};static#gs=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#gs}get#ds(){return me.DiscoveredDeviceExpirationTimeout}#ls=new pe(this.#us.bind(this),1e3);#us(){const e=Object.entries(this.#os);if(0==e.length)return void this.#ls.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#cs[e];t-n>this.#ds&&(fe.log("discovered device timeout"),delete this.#os[e],delete this.#cs[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#is()}get canReset(){return!1}reset(){fe.log("resetting...")}}const be=h("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class Se extends ${get id(){return this.#vs?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#vs?.state}async connect(){await super.connect(),await this.#vs.connectAsync()}async disconnect(){await super.disconnect(),await this.#vs.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);be.log({characteristicName:s});const n=this.#se.get(s);be.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);be.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#vs.connectable}async reconnect(){await super.reconnect(),be.log("attempting to reconnect..."),this.connect()}#vs;get noblePeripheral(){return this.#vs}set noblePeripheral(e){be.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(be.log("newNoblePeripheral",e.id),this.#vs&&(p(this.#vs,this.#ps),delete this.#vs._connectionManager),e&&(e._connectionManager=this,v(e,this.#ps)),this.#vs=e):be.log("attempted to assign duplicate noblePeripheral")}#ps={connect:this.#fs,disconnect:this.#ms,rssiUpdate:this.#bs,servicesDiscover:this.#Ss};async#fs(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){be.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#vs.discoverServicesAsync(N),await this.#ys()}async#ms(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){be.log("onNoblePeripheralDisconnect",e.id),await this.#ys()}async#ys(){switch(be.log(`noblePeripheral ${this.id} state ${this.#vs.state}`),this.#vs.state){case"connected":case"connecting":break;case"disconnected":this.#ie(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":be.error("noblePeripheral error");break;default:be.log(`uncaught noblePeripheral state ${this.#vs.state}`)}}#ie(){be.log("removing noblePeripheral eventListeners"),this.#te.forEach((e=>{p(e,this.#Ds)})),this.#te.clear(),this.#se.forEach((e=>{p(e,this.#Cs)})),this.#se.clear()}async#bs(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){be.log("onNoblePeripheralRssiUpdate",e.id,t)}async#Ss(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){be.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];be.log("service",s.uuid);const n=I(s.uuid);be.assertWithError(n,`no name found for service uuid "${s.uuid}"`),be.log({serviceName:n}),this.#te.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Ds),await s.discoverCharacteristicsAsync()}}#te=new Map;#Ds={characteristicsDiscover:this.#Es};async#Es(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){be.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];be.log("characteristic",s.uuid);const n=O(s.uuid);be.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),be.log({characteristicName:n}),this.#se.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Cs),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#Ts&&(this.status="connected")}#Cs={data:this.#Ms,write:this.#ws,notify:this.#Ls};#se=new Map;get#Ts(){return A.every((e=>this.#se.has(e)))}#Ms(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){be.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(X(t)),i=e._name;be.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#ws(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){be.log("onNobleCharacteristicWrite",e.uuid)}#Ls(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){be.log("onNobleCharacteristicNotify",e.uuid,t)}}const ye=h("NobleScanner",{log:!0});let De=!1;if(t){var Ce=require("@abandonware/noble");De=!0}class Ee extends me{static get isSupported(){return De}#ks=!1;get#Ws(){return this.#ks}set#Ws(e){ye.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#ks=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):ye.log("duplicate isScanning assignment")}get isScanning(){return this.#Ws}#Ns="unknown";get#Is(){return this.#Ns}set#Is(e){ye.assertTypeWithError(e,"string"),this.#Is!=e?(this.#Ns=e,ye.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):ye.log("duplicate nobleState assignment")}#Rs={scanStart:this.#xs.bind(this),scanStop:this.#As.bind(this),stateChange:this.#Os.bind(this),discover:this.#Us.bind(this)};#xs(){ye.log("OnNobleScanStart"),this.#Ws=!0}#As(){ye.log("OnNobleScanStop"),this.#Ws=!1}#Os(e){ye.log("onNobleStateChange",e),this.#Is=e}#Us(e){let t;ye.log("onNobleDiscover",e.id),this.#$s[e.id]||(e._scanner=this,this.#$s[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=ue.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(Ce,this.#Rs),v(this,this.#Ps)}get isAvailable(){return"poweredOn"==this.#Is}startScan(){super.startScan(),Ce.startScanningAsync(k,!0)}stopScan(){super.stopScan(),Ce.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),Ce.reset()}#Ps={expiredDiscoveredDevice:this.#Vs.bind(this)};#Vs(e){const t=e.message.discoveredDevice;this.#$s[t.id]&&delete this.#$s[t.id]}#$s={};#_s(e){ye.assertTypeWithError(e,"string"),ye.assertWithError(this.#$s[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#_s(e);const t=this.#$s[e];ye.log("connecting to discoveredDevice...",e);let s=ue.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#Fs(t),await s.connect())}#Fs(e){const t=new ue,s=new Se;return s.noblePeripheral=e,t.connectionManager=s,t}}const Te=h("Scanner",{log:!1});let Me;Ee.isSupported?(Te.log("using NobleScanner"),Me=new Ee):Te.log("Scanner not available");var we=Me;const Le=h("DevicePairPressureSensorDataManager",{log:!0});class ke{static get Sides(){return ue.InsoleSides}get sides(){return ue.InsoleSides}#Bs={};#le=new z;resetPressureRange(){this.#le.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(Le.log({pressure:t,insoleSide:s}),this.#Bs[s]=t,this.#zs)return this.#qs();Le.log("doesn't have all pressure data yet...")}get#zs(){return this.sides.every((e=>e in this.#Bs))}#qs(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Bs[t].rawSum,e.normalizedSum+=this.#Bs[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Bs[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#le.updateAndGetNormalization(e.center)),Le.log({devicePairPressure:e}),e}}const We=h("DevicePairSensorDataManager",{log:!0});class Ne{static get Sides(){return ue.InsoleSides}get sides(){return ue.InsoleSides}#js={};pressureSensorDataManager=new ke;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(We.log({sensorType:s,timestamp:t,event:e}),this.#js[s]||(this.#js[s]={}),this.#js[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else We.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#js[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else We.log("no value received")}onDataReceived}const Ie=h("DevicePair",{log:!0});class Re{constructor(){this.#ze.onDataReceived=this.#qe.bind(this)}static#Ze=["isConnected","pressure",...ue.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#Ze}get eventTypes(){return Re.#Ze}#Ke=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ke.addEventListener(e,t,s)}#Xe(e){this.#Ke.dispatchEvent(e)}removeEventListener(e,t){return this.#Ke.removeEventListener(e,t)}static get Sides(){return ue.InsoleSides}get sides(){return Re.Sides}#Hs;get left(){return this.#Hs}#Gs;get right(){return this.#Gs}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#G(){Ie.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Ie.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#Js),v(e,this.#Js),t){case"left":this.#Hs=e;break;case"right":this.#Gs=e}return Ie.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#Xe({type:"isConnected",message:{isConnected:this.isConnected}}),this.#Xe({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Ie.log("device already assigned")}#Js={connectionStatus:this.#Qs.bind(this),isConnected:this.#Zs.bind(this),sensorData:this.#Ks.bind(this),getSensorConfiguration:this.#Qs.bind(this)};#Qs(e){this.#Xe({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#Zs(e){this.#Qs(e),this.#Xe({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#ze=new Ne;#Ks(e){this.#Qs(e),this.#Xe({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#ze.onDeviceSensorData(e)}#qe(e,t){Ie.log({sensorType:e,sensorData:t}),this.#Xe({type:e,message:t})}resetPressureRange(){this.#ze.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#Xs=new Re;static get shared(){return this.#Xs}static{ue.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#Xs.assignInsole(t)}))}}const xe=h("ServerUtils",{log:!1}),Ae=3e7;function Oe(e,...t){xe.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=K(...t.data),n=s.byteLength;xe.assertEnumWithError(t.type,e);return K(e.indexOf(t.type),Uint16Array.from([n]),s)}));return xe.log("messageBuffers",...s),K(...s)}const Ue=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function $e(...e){return Oe(Ue,...e)}function Pe(...e){return xe.log("createDeviceMessage",...e),Oe(ue.EventTypes,...e)}function Ve(...e){return Oe(D.MessageTypes,...e)}const _e=$e("ping"),Fe=$e("pong");$e("isScanningAvailable"),$e("isScanning"),$e("startScan"),$e("stopScan");const Be=$e("discoveredDevices"),ze=h("WebSocketClientConnectionManager",{log:!0});class qe extends D{static get isSupported(){return e}static get type(){return"webSocketClient"}#Ys;get id(){return this.#Ys}set id(e){ze.assertTypeWithError(e,"string"),this.#Ys!=e?this.#Ys=e:ze.log("redundant id assignment")}#st=!1;get isConnected(){return this.#st}set isConnected(e){ze.assertTypeWithError(e,"boolean"),this.#st!=e?(this.#st=e,this.status=this.#st?"connected":"not connected",this.#st&&this.#en()):ze.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":ze.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),ze.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){ze.log({dataView:e}),ie(e,ue.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));ze.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":this.onMessageReceived(s,t);break;default:ze.error(`uncaught messageType "${s}"`)}}),!0)}#en(){this.sendWebSocketMessage(...ue.AllInformationConnectionMessages)}}const je=h("WebSocketClient",{log:!0});class He{static#Ze=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#Ze}get eventTypes(){return He.#Ze}#Ke=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ke.addEventListener(e,t,s)}#Xe(e){this.#Ke.dispatchEvent(e)}removeEventListener(e,t){return this.#Ke.removeEventListener(e,t)}#tn;get webSocket(){return this.#tn}set webSocket(e){this.#tn!=e?(je.log("assigning webSocket",e),this.#tn&&p(this.#tn,this.#sn),v(e,this.#sn),this.#tn=e,je.log("assigned webSocket")):je.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#nn(){je.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#in(){je.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#in(),this.#rn="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#nn(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#rn="disconnecting",this.webSocket.close()}reconnect(){this.#in(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#at=!0;static get ReconnectOnDisconnection(){return this.#at}static set ReconnectOnDisconnection(e){je.assertTypeWithError(e,"boolean"),this.#at=e}#ot=He.#at;get reconnectOnDisconnection(){return this.#ot}set reconnectOnDisconnection(e){je.assertTypeWithError(e,"boolean"),this.#ot=e}#an(e){this.#nn(),this.#tn.send(e)}#on(...e){this.#an($e(...e))}#sn={open:this.#cn.bind(this),message:this.#ln.bind(this),close:this.#hn.bind(this),error:this.#gn.bind(this)};#cn(e){je.log("webSocket.open",e),this.#dn.start(),this.#rn="connected"}async#ln(e){je.log("webSocket.message",e),this.#dn.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#un(s)}#hn(e){je.log("webSocket.close",e),this.#rn="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#dn.stop(),this.#ot&&setTimeout((()=>{this.reconnect()}),3e3)}#gn(e){je.log("webSocket.error",e)}#vn="not connected";get#rn(){return this.#vn}set#rn(e){switch(je.assertTypeWithError(e,"string"),je.log({newConnectionStatus:e}),this.#vn=e,this.#Xe({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#Xe({type:this.connectionStatus}),e){case"connected":case"not connected":this.#Xe({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#on("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#pn=!1,this.#Ws=!1)}}get connectionStatus(){return this.#rn}#un(e){je.log("parseMessage",{dataView:e}),ie(e,Ue,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#fn();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));je.log({isScanningAvailable:e}),this.#pn=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));je.log({isScanning:e}),this.#Ws=e}break;case"discoveredDevice":{const{string:e}=ne(t,n);je.log({discoveredDeviceString:e});const s=JSON.parse(e);je.log({discoveredDevice:s}),this.#ss(s)}break;case"expiredDiscoveredDevice":{const{string:e}=ne(t,n);this.#Vs(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=ne(t,n);je.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);je.log({connectedDeviceIds:s}),this.#mn(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=ne(t,n);n=s;const i=this.#bn[e];je.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=ee(t,n);r.onWebSocketMessage(a)}break;default:je.error(`uncaught messageType "${s}"`)}}),!0)}#dn=new pe(this.#Sn.bind(this),Ae);#Sn(){this.#on("ping")}#fn(){this.#on("pong")}#yn=!1;get#pn(){return this.#yn}set#pn(e){je.assertTypeWithError(e,"boolean"),this.#yn=e,this.#Xe({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Dn()}get isScanningAvailable(){return this.#pn}#Cn(){this.#nn(),je.assertWithError(this.isScanningAvailable,"scanning is not available")}#En(){this.#on("isScanningAvailable")}#ks=!1;get#Ws(){return this.#ks}set#Ws(e){je.assertTypeWithError(e,"boolean"),this.#ks=e,this.#Xe({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Ws}#Dn(){this.#on("isScanning")}#rs(){je.assertWithError(this.isScanning,"is not scanning")}#as(){je.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#as(),this.#on("startScan")}stopScan(){this.#rs(),this.#on("stopScan")}toggleScan(){this.#Cn(),this.isScanning?this.stopScan():this.startScan()}#os={};get discoveredDevices(){return this.#os}#ss(e){je.log({discoveredDevice:e}),this.#os[e.id]=e,this.#Xe({type:"discoveredDevice",message:{discoveredDevice:e}})}#Tn(){this.#an(Be)}#Vs(e){je.log({expiredDeviceId:e});const t=this.#os[e];t?(je.log({expiredDiscoveredDevice:t}),delete this.#os[e],this.#Xe({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):je.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#Mn(e)}#Mn(e){this.#nn(),je.assertTypeWithError(e,"string");const t=this.#wn(e);return t.connect(),t}#Ln(e){this.#an(this.#kn(e))}#kn(e){return $e({type:"connectToDevice",data:e})}#Fs(e){const t=new ue,s=new qe;return s.id=e,s.sendWebSocketMessage=this.#Wn.bind(this,e),s.sendWebSocketConnectMessage=this.#Ln.bind(this,e),s.sendWebSocketDisconnectMessage=this.#Nn.bind(this,e),t.connectionManager=s,t}#wn(e){let t=this.#bn[e];return t||(t=this.#Fs(e),this.#bn[e]=t),t}#mn(e){je.log({deviceIds:e}),e.forEach((e=>{this.#wn(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#In(e)}#In(e){this.#nn(),je.assertTypeWithError(e,"string");const t=this.devices[e];return je.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#Nn(e){this.#an(this.#Rn(e))}#Rn(e){return $e({type:"disconnectFromDevice",data:e})}#Wn(e,...t){this.#an(this.#xn(e,...t))}#xn(e,...t){return $e({type:"deviceMessage",data:[e,Ve(...t)]})}#bn={};get devices(){return this.#bn}}const Ge=h("BaseServer",{log:!0});class Je{#q(){Ge.assertWithError(this.constructor!=Je,`${this.constructor.name} must be subclassed`)}static#Ze=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#Ze}get eventTypes(){return Je.#Ze}#Ke=new u(this,this.eventTypes);addEventListener(e,t,s){this.#Ke.addEventListener(e,t,s)}dispatchEvent(e){this.#Ke.dispatchEvent(e)}removeEventListener(e,t){return this.#Ke.removeEventListener(e,t)}constructor(){this.#q(),Ge.assertWithError(we,"no scanner defined"),v(we,this.#An),v(ue,this.#On),v(this,this.#Un)}get numberOfClients(){return 0}static#$n=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#$n}static set ClearSensorConfigurationsWhenNoClients(e){Ge.assertTypeWithError(e,"boolean"),this.#$n=e}#Pn=Je.#$n;get clearSensorConfigurationsWhenNoClients(){return this.#Pn}set clearSensorConfigurationsWhenNoClients(e){Ge.assertTypeWithError(e,"boolean"),this.#Pn=e}#Un={clientConnected:this.#Vn.bind(this),clientDisconnected:this.#_n.bind(this)};#Vn(e){e.message.client,Ge.log("onClientConnected")}#_n(e){e.message.client,Ge.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&ue.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){Ge.log("broadcasting",e)}#An={isAvailable:this.#Fn.bind(this),isScanning:this.#Bn.bind(this),discoveredDevice:this.#zn.bind(this),expiredDiscoveredDevice:this.#Vs.bind(this)};#Fn(e){this.broadcastMessage(this.#qn)}get#qn(){return $e({type:"isScanningAvailable",data:we.isAvailable})}#Bn(e){this.broadcastMessage(this.#jn)}get#jn(){return $e({type:"isScanning",data:we.isScanning})}#zn(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#Hn(t))}#Hn(e){return $e({type:"discoveredDevice",data:e})}#Vs(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#Gn(t))}#Gn(e){return $e({type:"expiredDiscoveredDevice",data:e.id})}get#Jn(){return $e(...we.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#Qn(){return $e({type:"connectedDevices",data:JSON.stringify(ue.ConnectedDevices.map((e=>e.id)))})}#Zn={connectionMessage:this.#Kn.bind(this)};#xn(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#Kn(e){const t=e.target;if(Ge.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#Xn(t,this.#xn(t,s,n)))}#On={deviceConnected:this.#Yn.bind(this),deviceDisconnected:this.#ei.bind(this),deviceIsConnected:this.#Zs.bind(this)};#Yn(e){const t=e.message.device;Ge.log("onDeviceConnected",t.id),v(t,this.#Zn)}#ei(e){const t=e.message.device;Ge.log("onDeviceDisconnected",t.id),p(t,this.#Zn)}#Zs(e){const t=e.message.device;Ge.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#ti(t))}#ti(e){return this.#Xn(e,{type:"isConnected",data:e.isConnected})}#Xn(e,...t){return $e({type:"deviceMessage",data:[e.id,Pe(...t)]})}parseClientMessage(e){let t=[];if(ie(e,Ue,((e,s)=>{const n=e;switch(n){case"ping":t.push(Fe);break;case"pong":break;case"isScanningAvailable":t.push(this.#qn);break;case"isScanning":t.push(this.#jn);break;case"startScan":we.startScan();break;case"stopScan":we.stopScan();break;case"discoveredDevices":t.push(this.#Jn);break;case"connectToDevice":{const{string:e}=ne(s);we.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=ne(s),t=ue.ConnectedDevices.find((t=>t.id==e));if(!t){Ge.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#Qn);break;case"deviceMessage":{const{string:e,byteOffset:n}=ne(s),i=ue.ConnectedDevices.find((t=>t.id==e));if(!i){Ge.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:Ge.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return K(t)}parseClientDeviceMessage(e,t){Ge.log("onDeviceMessage",e.id,t);let s=[];if(ie(t,D.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":s.push(this.#xn(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:Ge.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#Xn(e,...s)}}const Qe=h("WebSocketServer",{log:!0});t&&require("ws");var Ze={setAllConsoleLevelFlags:function(e){l.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){l.setLevelFlagsForType(e,t)},Device:ue,DevicePair:Re,WebSocketClient:He,WebSocketServer:class extends Je{get numberOfClients(){return this.#si?.clients.size||0}#si;get server(){return this.#si}set server(e){this.#si!=e?(Qe.log("assigning server..."),this.#si&&(Qe.log("clearing existing server..."),p(this.#si,this.#Un)),v(e,this.#Un),this.#si=e,Qe.log("assigned server")):Qe.log("redundant WebSocket assignment")}#Un={close:this.#ni.bind(this),connection:this.#ii.bind(this),error:this.#ri.bind(this),headers:this.#ai.bind(this),listening:this.#oi.bind(this)};#ni(){Qe.log("server.close")}#ii(e){Qe.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new pe((()=>this.#ci(e)),Ae),e.pingClientTimer.start(),v(e,this.#li),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#ri(e){Qe.error(e)}#ai(){}#oi(){Qe.log("server.listening")}#li={open:this.#hi.bind(this),message:this.#gi.bind(this),close:this.#di.bind(this),error:this.#ui.bind(this)};#hi(e){Qe.log("client.open")}#gi(e){Qe.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(X(e.data));this.#vi(t,s)}#di(e){Qe.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#li),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#ui(e){Qe.log("client.error")}#vi(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#ci(e){e.isAlive?(e.isAlive=!1,e.send(_e)):e.terminate()}},Scanner:we};return Ze}));
