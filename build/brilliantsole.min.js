/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).BS=t()}(this,(function(){"use strict";const e="undefined"!=typeof window&&"undefined"!==window?.document,t="undefined"!=typeof process&&null!=process?.versions?.node,s=e&&navigator.userAgent.includes("Bluefy"),n=e&&navigator.userAgent.includes("WebBLE");if(e&&navigator.userAgent.includes("Android"),e&&navigator.userAgent.includes("Safari"),!console.assert){const e=(e,...t)=>{e||console.warn(...t)};console.assert=e}function i(){}const r=console.log.bind(console),a=console.warn.bind(console),o=console.error.bind(console),c=console.assert.bind(console);class l{static#e={};constructor(e){if(l.#e[e])throw new Error(`"${e}" console already exists`);l.#e[e]=this}#t={log:true,warn:true,assert:!0,error:!0};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){const s=this.#e[e]||new l(e);return t&&s.setLevelFlags(t),s}get log(){return this.#t.log?r:i}get warn(){return this.#t.warn?a:i}get error(){return this.#t.error?o:i}get assert(){return this.#t.assert?c:i}assertWithError(e,t){if(!e)throw new Error(t)}assertTypeWithError(e,t){this.assertWithError(typeof e==t,`value ${e} of type "${typeof e}" not of type "${t}"`)}assertEnumWithError(e,t){this.assertWithError(t.includes(e),`invalid enum "${e}"`)}}function h(e,t){return l.create(e,t)}function g(e){return e[0].toUpperCase()+e.slice(1)}const d=h("EventDispatcher",{log:!1});class u{constructor(e,t){d.assertWithError(e,"target is required"),this.#s=e,d.assertWithError(Array.isArray(t)||null==t,"eventTypes must be an array"),this.#n=t}#s;#n;#i(e){return!this.#n||this.#n.includes(e)}#r(e){d.assertWithError(this.#i(e),`invalid event type "${e}"`)}#a;addEventListener(e,t,s){if(d.log(`adding "${e}" eventListener`,t),this.#r(e),this.#a||(this.#a={}),s?.once){const s=t;t=function t(n){s.apply(this,arguments),this.removeEventListener(e,t)}}const n=this.#a;n[e]||(n[e]=[]),n[e].includes(t)||n[e].push(t)}hasEventListener(e,t){return d.log(`has "${e}" eventListener?`,t),this.#r(e),this.#a?.[e]?.includes(t)}removeEventListener(e,t){if(d.log(`removing "${e}" eventListener`,t),this.#r(e),this.hasEventListener(e,t)){const s=this.#a[e].indexOf(t);return this.#a[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#r(e.type),this.#a?.[e.type]){e.target=this.#s;const t=this.#a[e.type].slice(0);for(let s=0,n=t.length;s<n;s++)t[s].call(this,e)}}}function v(e,t){let s=e.addEventListener||e.addListener||e.on||e.AddEventListener;d.assertWithError(s,"no add listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function p(e,t){let s=e.removeEventListener||e.removeListener||e.RemoveEventListener;d.assertWithError(s,"no remove listener function found for target"),s=s.bind(e),Object.entries(t).forEach((([e,t])=>{s(e,t)}))}function f(e){for(let t=0;t<8;++t)e=(1&e?0:3988292384)^e>>>1;return 4278190080^e}const m=new Uint32Array(256);for(let e=0;e<256;++e)m[e]=f(e);function b(e){let t=new Uint8Array(e),s=0;for(let e=0;e<t.byteLength;++e){const n=255&s,i=t[e];s=(m[n^i]^s>>>8)>>>0}return s}const S=h("FileTransferManager",{log:!0});class y{static#o=["maxFileLength","getFileTransferType","setFileTransferType","getFileLength","setFileLength","getFileChecksum","setFileChecksum","setFileTransferCommand","fileTransferStatus","getFileTransferBlock","setFileTransferBlock"];static get MessageTypes(){return this.#o}get messageTypes(){return y.MessageTypes}static#c=[...this.#o,"fileTransferProgress","fileTransferComplete","fileReceived"];static get EventTypes(){return this.#c}get eventTypes(){return y.#c}eventDispatcher;addEventListener(e,t,s){this.eventDispatcher.addEventListener(e,t,s)}#l(e){this.eventDispatcher.dispatchEvent(e)}removeEventListener(e,t){return this.eventDispatcher.removeEventListener(e,t)}#h(e){return new Promise((t=>{this.addEventListener(e,(()=>{t()}),{once:!0})}))}static#g=["tflite"];static get Types(){return this.#g}get types(){return y.Types}#d(e){S.assertEnumWithError(e,this.types)}#u(e){S.assertWithError(this.types[e],`invalid typeEnum ${e}`)}static#v=["idle","sending","receiving"];static get Statuses(){return this.#v}get statuses(){return y.Statuses}#p(e){S.assertWithError(this.statuses[e],`invalid statusEnum ${e}`)}static#f=["startSend","startReceive","cancel"];static get Commands(){return this.#f}get commands(){return y.Commands}#m(e){S.assertEnumWithError(e,this.commands)}static async GetFileBuffer(e){let t;if(e instanceof Array)t=Uint8Array.from(e);else if(e instanceof DataView)t=e.buffer;else if("string"==typeof e||e instanceof URL){const s=await fetch(e);t=await s.arrayBuffer()}else if(e instanceof File)t=await e.arrayBuffer();else{if(!(e instanceof ArrayBuffer))throw{error:"invalid file type",file:e};t=e}return t}async getFileBuffer(e){return y.GetFileBuffer(e)}static#b=51200;static get MaxLength(){return this.#b}#S=y.MaxLength;get maxLength(){return this.#S}#y(e){S.log("parseFileMaxLength",e);const t=e.getUint32(0,!0);S.log(`maxLength: ${t}kB`),this.#S=t}#D(e){S.assertWithError(e<=this.maxLength,`file length ${e}kB too large - must be ${this.maxLength}kB or less`)}#C;get type(){return this.#C}#T(e){S.log("parseFileType",e);const t=e.getUint8(0);this.#u(t);const s=this.types[t];this.#E(s)}#E(e){S.log({type:e}),this.#C=e,this.#l({type:"getFileTransferType",message:{fileType:e}})}async#w(e){if(this.#d(e),this.type==e)return void S.log(`redundant type assignment ${e}`);const t=this.#h("getFileTransferType"),s=this.types.indexOf(e);this.sendMessage("setFileTransferType",Uint8Array.from([s])),await t}#M=0;get length(){return this.#M}#L(e){S.log("parseFileLength",e);const t=e.getUint32(0,!0);this.#k(t)}#k(e){S.log(`length: ${e}kB`),this.#M=e,this.#l({type:"getFileLength",message:{fileLength:e}})}async#W(e){if(S.assertTypeWithError(e,"number"),this.#D(e),this.length==e)return void S.log(`redundant length assignment ${e}`);const t=this.#h("getFileLength"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileLength",s),await t}#N=0;get checksum(){return this.#N}#I(e){S.log("checksum",e);const t=e.getUint32(0,!0);this.#R(t)}#R(e){S.log({checksum:e}),this.#N=e,this.#l({type:"getFileChecksum",message:{fileChecksum:e}})}async#x(e){if(S.assertTypeWithError(e,"number"),this.checksum==e)return void S.log(`redundant checksum assignment ${e}`);const t=this.#h("getFileChecksum"),s=new DataView(new ArrayBuffer(4));s.setUint32(0,e,!0),this.sendMessage("setFileChecksum",s),await t}async#A(e){this.#m(e);const t=this.#h("fileTransferStatus"),s=this.commands.indexOf(e);this.sendMessage("setFileTransferCommand",Uint8Array.from([s])),await t}#O="idle";get status(){return this.#O}#$(e){S.log("parseFileStatus",e);const t=e.getUint8(0);this.#p(t);const s=this.statuses[t];this.#U(s)}#U(e){S.log({status:e}),this.#O=e,this.#l({type:"fileTransferStatus",message:{fileTransferStatus:e}})}#P(){S.assertWithError("idle"==this.#O,"status is not idle")}#V(){S.assertWithError("idle"!=this.#O,"status is idle")}#F;async#_(e){S.log("parseFileBlock",e),this.#F.push(e.buffer);const t=this.#F.reduce(((e,t)=>e+t.byteLength),0),s=t/this.#M;if(S.log(`received ${t} of ${this.#M} bytes (${100*s}%)`),this.#l({type:"fileTransferProgress",message:{progress:s}}),t!=this.#M)return;S.log("file transfer complete");let n=(new Date).toLocaleString();if("tflite"===this.type)n+=".tflite";const i=new File(this.#F,n),r=b(await i.arrayBuffer());S.log({checksum:r}),r==this.#N?(console.log("received file",i),this.#l({type:"fileTransferComplete",message:{direction:"receiving"}}),this.#l({type:"fileReceived",message:{file:i}})):S.error(`wrong checksum - expected ${this.#N}, got ${r}`)}parseMessage(e,t){switch(S.log({messageType:e}),e){case"maxFileLength":this.#y(t);break;case"getFileTransferType":this.#T(t);break;case"getFileLength":this.#L(t);break;case"getFileChecksum":this.#I(t);break;case"fileTransferStatus":this.#$(t);break;case"getFileTransferBlock":this.#_(t);break;default:throw Error(`uncaught messageType ${e}`)}}async send(e,t){this.#P(),this.#d(e);const s=await this.getFileBuffer(t);await this.#w(e);const n=s.byteLength;await this.#W(n);const i=b(s);await this.#x(i),await this.#A("startSend"),await this.#B(s)}async#B(e){return this.#z(e)}#q=256;async#z(e,t=0){if("sending"!=this.status)return;const s=e.slice(t,t+this.#q),n=1-(e.byteLength-t)/e.byteLength;if(S.log(`sending bytes ${t}-${t+s.byteLength} of ${e.byteLength} bytes (${100*n}%)`),this.#l({type:"fileTransferProgress",message:{progress:n}}),0!=s.byteLength)return await this.sendMessage("setFileTransferBlock",s),this.#z(e,t+s.byteLength);S.log("finished sending buffer"),this.#l({type:"fileTransferComplete",message:{direction:"sending"}})}async receive(e){this.#P(),this.#d(e),this.#F=[],await this.#w(e),await this.#A("startReceive")}async cancel(){this.#V(),await this.#A("cancel")}sendMessage}const D=h("TfliteManager",{log:!0});class C{static#o=["getTfliteModelName","setTfliteModelName","getTfliteModelTask","setTfliteModelTask","getTfliteModelSampleRate","setTfliteModelSampleRate","getTfliteModelSensorTypes","setTfliteModelSensorTypes","getTfliteModelNumberOfClasses","setTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","setTfliteCaptureDelay","getTfliteThreshold","setTfliteThreshold","getTfliteEnableInferencing","setTfliteEnableInferencing","tfliteModelInference"];static get MessageTypes(){return this.#o}get messageTypes(){return C.MessageTypes}#j(e){D.log("parseName",e)}#H(e){D.log("parseTask",e)}#G(e){D.log("parseSampleRate",e)}#J(e){D.log("parseSensorTypes",e)}#Q(e){D.log("parseNumberOfClasses",e)}#Z(e){D.log("parseIsReady",e)}#K(e){D.log("parseCaptureDelay",e)}#X(e){D.log("parseThreshold",e)}#Y(e){D.log("parseEnableInferencing",e)}#ee(e){D.log("parseInference",e)}parseMessage(e,t){switch(D.log({messageType:e}),e){case"getTfliteModelName":this.#j(t);break;case"getTfliteModelTask":this.#H(t);break;case"getTfliteModelSampleRate":this.#G(t);break;case"getTfliteModelSensorTypes":this.#J(t);break;case"getTfliteModelNumberOfClasses":this.#Q(t);break;case"tfliteModelIsReady":this.#Z(t);break;case"getTfliteCaptureDelay":this.#K(t);break;case"getTfliteThreshold":this.#X(t);break;case"getTfliteEnableInferencing":this.#Y(t);break;case"tfliteModelInference":this.#ee(t);break;default:throw Error(`uncaught messageType ${e}`)}}sendMessage}const T=h("ConnectionManager",{log:!1});class E{static#o=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","serialNumber","batteryLevel","getName","setName","getType","setType","getSensorConfiguration","setSensorConfiguration","sensorScalars","pressurePositions","sensorData","getCurrentTime","setCurrentTime","triggerVibration",...y.MessageTypes,...C.MessageTypes];static get MessageTypes(){return this.#o}get id(){this.#te("id")}onStatusUpdated;onMessageReceived;static#se(e){throw new Error(`"${e}" is not implemented by "${this.name}" subclass`)}#te(e){throw new Error(`"${e}" is not implemented by "${this.constructor.name}" subclass`)}static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}static get type(){this.#se("type")}get type(){return this.constructor.type}#ne(){T.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ie(){T.assertWithError(this.constructor!=E,`${this.constructor.name} must be subclassed`)}constructor(){this.#ie(),this.#ne()}#O="not connected";get status(){return this.#O}set status(e){T.assertTypeWithError(e,"string"),this.#O!=e?(T.log(`new connection status "${e}"`),this.#O=e,this.onStatusUpdated?.(this.status)):T.log(`tried to assign same connection status "${e}"`)}get isConnected(){return"connected"==this.status}#re(){T.assertWithError(!this.isConnected,"device is already connected")}#ae(){T.assertWithError("connecting"!=this.status,"device is already connecting")}#oe(){T.assertWithError(this.isConnected,"device is not connected")}#ce(){T.assertWithError("disconnecting"!=this.status,"device is already disconnecting")}#le(){this.#oe(),this.#ce()}async connect(){this.#re(),this.#ae(),this.status="connecting"}get canReconnect(){return!1}async reconnect(){this.#re(),this.#ae(),T.assert(this.canReconnect,"unable to reconnect")}async disconnect(){this.#oe(),this.#ce(),this.status="disconnecting",T.log("disconnecting from device...")}async sendMessage(e,t){this.#le(),T.log("sending message",{messageType:e,data:t})}}const w=h("bluetoothUUIDs",{log:!1});if(t){var M=require("webbluetooth").BluetoothUUID}if(e)M=window.BluetoothUUID;function L(e){return w.assertTypeWithError(e,"string"),w.assertWithError(4==e.length,"value must be 4 characters long"),`ea6da725-${e}-4f9b-893d-c3913e33b39f`}function k(e){return M?.getCharacteristic?.(e)}function W(e){return M?.getService?.(e)}const N=Object.freeze({services:{deviceInformation:{uuid:W("device_information"),characteristics:{manufacturerName:{uuid:k("manufacturer_name_string")},modelNumber:{uuid:k("model_number_string")},hardwareRevision:{uuid:k("hardware_revision_string")},firmwareRevision:{uuid:k("firmware_revision_string")},softwareRevision:{uuid:k("software_revision_string")},pnpId:{uuid:k("pnp_id")},serialNumber:{uuid:k("serial_number_string")}}},battery:{uuid:W("battery_service"),characteristics:{batteryLevel:{uuid:k("battery_level")}}},main:{uuid:L("0000"),characteristics:{name:{uuid:L("1000")},type:{uuid:L("1001")},sensorConfiguration:{uuid:L("2000")},pressurePositions:{uuid:L("2001")},sensorScalars:{uuid:L("2002")},currentTime:{uuid:L("2003")},sensorData:{uuid:L("2004")},vibration:{uuid:L("3000")},maxFileLength:{uuid:L("4000")},fileTransferType:{uuid:L("4001")},fileLength:{uuid:L("4002")},fileChecksum:{uuid:L("4003")},fileTransferCommand:{uuid:L("4004")},fileTransferStatus:{uuid:L("4005")},fileTransferBlock:{uuid:L("4006")},tfliteModelName:{uuid:L("5000")},tfliteModelTask:{uuid:L("5001")},tfliteModelSampleRate:{uuid:L("5002")},tfliteModelSensorTypes:{uuid:L("5003")},tfliteModelNumberOfClasses:{uuid:L("5004")},tfliteModelIsReady:{uuid:L("5005")},tfliteCaptureDelay:{uuid:L("5006")},tfliteThreshold:{uuid:L("5007")},tfliteEnableInferencing:{uuid:L("5008")},tfliteModelInference:{uuid:L("5009")}}},dfu:{uuid:"8d53dc1d-1db7-4cd3-868b-8a527460aa84",characteristics:{dfu:{uuid:"da2e7828-fbce-4e01-ae9e-261174997c48"}}}},get serviceUUIDs(){return[this.services.main.uuid]},get optionalServiceUUIDs(){return[this.services.deviceInformation.uuid,this.services.battery.uuid,this.services.dfu.uuid]},getServiceNameFromUUID(e){return e=e.toLowerCase(),Object.entries(this.services).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0]},getCharacteristicNameFromUUID(e){var t;return e=e.toLowerCase(),Object.values(this.services).some((s=>(t=Object.entries(s.characteristics).find((([t,s])=>{let n=s.uuid;return 4==e.length&&(n=n.slice(4,8)),e.includes("-")||(n=n.replaceAll("-","")),e==n}))?.[0],t))),t}}),I=N.serviceUUIDs,R=N.optionalServiceUUIDs,x=[...I,...R];function A(e){return N.getServiceNameFromUUID(e)}const O=[],$=[],U=[];function P(e){return N.getCharacteristicNameFromUUID(e)}function V(e){const t={broadcast:!1,read:!0,writeWithoutResponse:!1,write:!1,notify:!1,indicate:!1,authenticatedSignedWrites:!1,reliableWrite:!1,writableAuxiliaries:!1};switch(e){case"vibration":case"sensorData":case"fileTransferCommand":case"fileTransferBlock":t.read=!1}switch(e){case"batteryLevel":case"name":case"type":case"sensorConfiguration":case"sensorData":case"pressurePositions":case"currentTime":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferStatus":case"fileTransferBlock":t.notify=!0}switch(e){case"name":case"type":case"sensorConfiguration":case"vibration":case"fileLength":case"fileChecksum":case"fileTransferType":case"fileTransferCommand":case"fileTransferBlock":t.write=!0,t.writeWithoutResponse=!0,t.reliableWrite=!0}return t}Object.entries(N.services).forEach((([e,t])=>{t.characteristics&&Object.entries(t.characteristics).forEach((([e,s])=>{I.includes(t.uuid)&&O.push(s.uuid),$.push(s.uuid),U.push(e)}))}),[]);h("BluetoothConnectionManager",{log:!0});class F extends E{onCharacteristicValueChanged(e,t){switch(e){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"serialNumber":case"batteryLevel":case"sensorData":case"pressurePositions":case"sensorScalars":case"maxFileLength":case"fileTransferStatus":case"tfliteModelIsReady":case"tfliteModelInference":this.onMessageReceived(e,t);break;case"name":this.onMessageReceived("getName",t);break;case"type":this.onMessageReceived("getType",t);break;case"sensorConfiguration":this.onMessageReceived("getSensorConfiguration",t);break;case"currentTime":this.onMessageReceived("getCurrentTime",t);break;case"fileTransferType":this.onMessageReceived("getFileTransferType",t);break;case"fileLength":this.onMessageReceived("getFileLength",t);break;case"fileChecksum":this.onMessageReceived("getFileChecksum",t);break;case"fileTransferBlock":this.onMessageReceived("getFileTransferBlock",t);break;case"tfliteModelName":this.onMessageReceived("getTfliteModelName",t);break;case"tfliteModelTask":this.onMessageReceived("getTfliteModelTask",t);break;case"tfliteModelSampleRate":this.onMessageReceived("getTfliteModelSampleRate",t);break;case"tfliteModelSensorTypes":this.onMessageReceived("getTfliteModelSensorTypes",t);break;case"tfliteModelNumberOfClasses":this.onMessageReceived("getTfliteModelNumberOfClasses",t);break;case"tfliteCaptureDelay":this.onMessageReceived("getTfliteCaptureDelay",t);break;case"tfliteThreshold":this.onMessageReceived("getTfliteThreshold",t);break;case"tfliteEnableInferencing":this.onMessageReceived("getTfliteEnableInferencing",t);break;default:throw new Error(`uncaught characteristicName "${e}"`)}}characteristicNameForMessageType(e){switch(e){case"setName":return"name";case"setType":return"type";case"setSensorConfiguration":return"sensorConfiguration";case"setCurrentTime":return"currentTime";case"triggerVibration":return"vibration";case"setFileTransferType":return"fileTransferType";case"setFileLength":return"fileLength";case"setFileChecksum":return"fileChecksum";case"setFileTransferCommand":return"fileTransferCommand";case"setFileTransferBlock":return"fileTransferBlock";case"setTfliteModelName":return"tfliteModelName";case"setTfliteModelTask":return"tfliteModelTask";case"setTfliteModelSampleRate":return"tfliteModelSampleRate";case"setTfliteModelSensorTypes":return"tfliteModelSensorTypes";case"setTfliteModelNumberOfClasses":return"tfliteModelNumberOfClasses";case"setTfliteCaptureDelay":return"tfliteCaptureDelay";case"setTfliteThreshold":return"tfliteThreshold";case"setTfliteEnableInferencing":return"tfliteEnableInferencing";default:throw Error(`no characteristicName for messageType "${e}"`)}}}const _=h("WebBluetoothConnectionManager",{log:!0});if(t){const e=require("webbluetooth"),{bluetooth:t}=e;var B={bluetooth:t}}if(e)B=window.navigator;class z extends F{get id(){return this.device?.id}#he={characteristicvaluechanged:this.#ge.bind(this)};#de={gattserverdisconnected:this.#ue.bind(this)};static get isSupported(){return"bluetooth"in B}static get type(){return"webBluetooth"}#ve;get device(){return this.#ve}set device(e){this.#ve!=e?(this.#ve&&p(this.#ve,this.#de),e&&v(e,this.#de),this.#ve=e):_.log("tried to assign the same BluetoothDevice")}get server(){return this.#ve?.gatt}get isConnected(){return this.server?.connected}#pe=new Map;#fe=new Map;async connect(){await super.connect();try{const t=await B.bluetooth.requestDevice({filters:[{services:I}],optionalServices:e?R:[]});_.log("got BluetoothDevice"),this.device=t,_.log("connecting to device...");const s=await this.device.gatt.connect();_.log(`connected to device? ${s.connected}`),await this.#me(),_.log("fully connected"),this.status="connected"}catch(e){_.error(e),this.status="not connected",this.server?.disconnect(),this.#be()}}async#me(){this.#be(),_.log("getting services...");const e=await this.server.getPrimaryServices();_.log("got services",e.length),await this.server.getPrimaryService("8d53dc1d-1db7-4cd3-868b-8a527460aa84"),_.log("getting characteristics...");for(const t in e){const i=e[t];_.log({service:i});const r=A(i.uuid);if(_.assertWithError(r,`no name found for service uuid "${i.uuid}"`),_.log(`got "${r}" service`),"dfu"==r){_.log("skipping dfu service");continue}i._name=r,this.#pe.set(r,i),_.log(`getting characteristics for "${r}" service`);const a=await i.getCharacteristics();_.log(`got characteristics for "${r}" service`);for(const e in a){const t=a[e];_.log({characteristic:t});const i=P(t.uuid);_.assertWithError(i,`no name found for characteristic uuid "${t.uuid}" in "${r}" service`),_.log(`got "${i}" characteristic in "${r}" service`),t._name=i,this.#fe.set(i,t),v(t,this.#he);const o=t.properties||V(i);o.notify&&(_.log(`starting notifications for "${i}" characteristic`),await t.startNotifications()),o.read&&(_.log(`reading "${i}" characteristic...`),await t.readValue(),(s||n)&&this.#Se(t))}}}#be(){this.device&&p(this.device,this.#de),this.#fe.forEach((e=>{p(e,this.#he)}))}async disconnect(){await super.disconnect(),this.server?.disconnect(),this.#be(),this.status="not connected"}#ge(e){_.log("oncharacteristicvaluechanged");const t=e.target;this.#Se(t)}#Se(e){_.log("onCharacteristicValue");const t=e._name;_.assertWithError(t,`no name found for characteristic with uuid "${e.uuid}"`),_.log(`oncharacteristicvaluechanged for "${t}" characteristic`);const s=e.value;_.assertWithError(s,`no data found for "${t}" characteristic`),_.log(`data for "${t}" characteristic`,Array.from(new Uint8Array(s.buffer))),this.onCharacteristicValueChanged(t,s)}#ue(e){_.log("gattserverdisconnected"),this.status="not connected"}async sendMessage(e,t){await super.sendMessage(...arguments);const i=this.characteristicNameForMessageType(e);_.log({characteristicName:i});const r=this.#fe.get(i);_.assertWithError(r,`no characteristic found with name "${i}"`),t instanceof DataView&&(t=t.buffer),await r.writeValueWithResponse(t);const a=r.properties||V(i);a.read&&!a.notify&&(_.log("reading value after write..."),await r.readValue(),(s||n)&&this.#Se(r))}get canReconnect(){return this.server&&!this.server.connected}async reconnect(){await super.reconnect(),_.log("attempting to reconnect..."),this.status="connecting",await this.server.connect(),this.isConnected?(_.log("successfully reconnected!"),await this.#me(),this.status="connected"):(_.log("unable to reconnect"),this.status="not connected")}}const q={min:1/0,max:-1/0};class j{#ye=Object.assign({},q);reset(){Object.assign(this.#ye,q)}update(e){this.#ye.min=Math.min(e,this.#ye.min),this.#ye.max=Math.max(e,this.#ye.max)}getNormalization(e){return function(e,t,s){return(e-t)/(s-t)}(e,this.#ye.min,this.#ye.max)||0}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}class H{#ye={x:new j,y:new j};reset(){this.#ye.x.reset(),this.#ye.y.reset()}update(e){this.#ye.x.update(e.x),this.#ye.y.update(e.y)}getNormalization(e){return{x:this.#ye.x.getNormalization(e.x),y:this.#ye.y.getNormalization(e.y)}}updateAndGetNormalization(e){return this.update(e),this.getNormalization(e)}}const G=h("PressureSensorDataManager",{log:!0});class J{#De=[];get positions(){return this.#De}get numberOfSensors(){return this.positions.length}parsePositions(e){const t=[];for(let s=0,n=0;n<e.byteLength;s++,n+=2)t.push({x:e.getUint8(n)/256,y:e.getUint8(n+1)/256});var s,n;G.log({positions:t}),this.#De=t,this.#Ce=(s=this.numberOfSensors,n=()=>new j,new Array(s).fill(1).map(((e,t)=>{if("function"==typeof n)return n(t);{const e=n;return Object.assign({},e)}}))),this.resetRange()}#Ce;#Te=new H;resetRange(){this.#Ce.forEach((e=>e.reset())),this.#Te.reset()}parseData(e){const t={sensors:[],rawSum:0,normalizedSum:0};for(let s=0,n=0;n<e.byteLength;s++,n+=2){const i=e.getUint16(n,!0),r=this.#Ce[s].updateAndGetNormalization(i),a=this.positions[s];t.sensors[s]={rawValue:i,normalizedValue:r,position:a},t.rawSum+=i,t.normalizedSum+=r/this.numberOfSensors}return t.rawSum>0&&(t.center={x:0,y:0},t.sensors.forEach((e=>{e.weightedValue=e.rawValue/t.rawSum,t.center.x+=e.position.x*e.weightedValue,t.center.y+=e.position.y*e.weightedValue})),t.normalizedCenter=this.#Te.updateAndGetNormalization(t.center)),G.log({pressure:t}),t}}const Q=h("MotionSensorDataManager",{log:!1});class Z{static#Ee=6;static get Vector3Size(){return this.#Ee}get vector3Size(){return Z.Vector3Size}parseVector3(e,t){let[s,n,i]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0)].map((e=>e*t));const r={x:s,y:n,z:i};return Q.log({vector:r}),r}static#we=8;static get QuaternionSize(){return this.#we}get quaternionSize(){return Z.QuaternionSize}parseQuaternion(e,t){let[s,n,i,r]=[e.getInt16(0,!0),e.getInt16(2,!0),e.getInt16(4,!0),e.getInt16(6,!0)].map((e=>e*t));const a={x:s,y:n,z:i,w:r};return Q.log({quaternion:a}),a}}h("BarometerSensorDataManager",{log:!0});class K{static#Me={barometer:.78125};static get Scalars(){return this.#Me}get scalars(){return K.Scalars}}const X=h("ArrayBufferUtils",{log:!1}),Y=new TextEncoder;function ee(...e){const t=(e=(e=(e=e.filter((e=>null!=e||null!=e))).map((e=>{if("number"==typeof e){const t=e;return Uint8Array.from([Math.floor(t)])}if("boolean"==typeof e){const t=e;return Uint8Array.from([t?1:0])}if("string"==typeof e){return se(e)}if(e instanceof Array){return ee(...e)}if(e instanceof ArrayBuffer)return e;if("buffer"in e&&e.buffer instanceof ArrayBuffer){return e.buffer}if(e instanceof DataView){return e.buffer}if("object"==typeof e){return function(e){return se(JSON.stringify(e))}(e)}return e}))).filter((e=>e&&"byteLength"in e))).reduce(((e,t)=>e+t.byteLength),0),s=new Uint8Array(t);let n=0;return e.forEach((e=>{s.set(new Uint8Array(e),n),n+=e.byteLength})),s.buffer}function te(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}function se(e){const t=Y.encode(e);return ee(t.byteLength,t)}function ne(e,t,s){let n;return s&&(n=e.byteOffset+t+s),X.log({dataView:e,begin:t,end:n,length:s}),new DataView(e.buffer.slice(e.byteOffset+t,n))}const ie=h("ParseUtils",{log:!0}),re=new TextDecoder;function ae(e,t=0){const s=e.getUint8(t++);return{string:re.decode(e.buffer.slice(e.byteOffset+t,e.byteOffset+t+s)),byteOffset:t+=s}}function oe(e,t,s,n=!1){let i=0;for(;i<e.byteLength;){const r=e.getUint8(i++),a=t[r];let o;n?(o=e.getUint16(i,!0),i+=2):o=e.getUint8(i++),ie.log({messageTypeEnum:r,messageType:a,messageLength:o,dataView:e}),ie.assertWithError(a,`invalid messageTypeEnum ${r}`);const c=ne(e,i,o);ie.log({_dataView:c}),s(a,c),i+=o}}const ce=h("SensorDataManager",{log:!0});class le{pressureSensorDataManager=new J;motionSensorDataManager=new Z;barometerSensorDataManager=new K;static#g=["pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer"];static get Types(){return this.#g}get types(){return le.Types}#Le=new Map;static AssertValidSensorType(e){ce.assertTypeWithError(e,"string"),ce.assertWithError(this.#g.includes(e),`invalid sensorType "${e}"`)}static AssertValidSensorTypeEnum(e){ce.assertTypeWithError(e,"number"),ce.assertWithError(e in this.#g,`invalid sensorTypeEnum ${e}`)}onDataReceived;#ke(e,t){let s=Date.now();s-=s%65536;return s+e.getUint16(t,!0)}parseData(e){ce.log("sensorData",Array.from(new Uint8Array(e.buffer)));let t=0;const s=this.#ke(e,t);t+=2;oe(new DataView(e.buffer,t),le.Types,((e,t)=>{const n=e,i=this.#Le.get(n);let r;switch(n){case"pressure":r=this.pressureSensorDataManager.parseData(t);break;case"acceleration":case"gravity":case"linearAcceleration":case"gyroscope":case"magnetometer":r=this.motionSensorDataManager.parseVector3(t,i);break;case"gameRotation":case"rotation":r=this.motionSensorDataManager.parseQuaternion(t,i);break;case"barometer":break;default:ce.error(`uncaught sensorType "${n}"`)}ce.assertWithError(r,`no value defined for sensorType "${n}"`),this.onDataReceived(n,{timestamp:s,[n]:r})}))}parseScalars(e){for(let t=0;t<e.byteLength;t+=5){const s=e.getUint8(t),n=le.Types[s];if(!n){ce.warn(`unknown sensorType index ${s}`);continue}const i=e.getFloat32(t+1,!0);ce.log({sensorType:n,sensorScalar:i}),this.#Le.set(n,i)}}}const he=h("SensorConfigurationManager",{log:!1});class ge{#We;#Ne(e){he.assertWithError(this.#We,"must get initial sensorConfiguration");const t=this.#We?.includes(e);return he.assert(t,`unavailable sensor type "${e}"`),t}parse(e){const t={};for(let s=0;s<e.byteLength;s+=3){const n=e.getUint8(s),i=le.Types[n];if(!i){he.warn(`unknown sensorType index ${n}`);continue}const r=e.getUint16(s+1,!0);he.log({sensorType:i,sensorRate:r}),t[i]=r}return he.log({parsedSensorConfiguration:t}),this.#We=Object.keys(t),t}static#Ie=65535;static get MaxSensorRate(){return this.#Ie}get maxSensorRate(){return ge.MaxSensorRate}static#Re=5;static get SensorRateStep(){return this.#Re}get sensorRateStep(){return ge.SensorRateStep}static#xe(e){he.assertTypeWithError(e,"number"),he.assertWithError(e>=0,`sensorRate must be 0 or greater (got ${e})`),he.assertWithError(e<this.MaxSensorRate,`sensorRate must be 0 or greater (got ${e})`),he.assertWithError(e%this.SensorRateStep==0,`sensorRate must be multiple of ${this.SensorRateStep}`)}#Ae(e){ge.#xe(e)}createData(e){let t=Object.keys(e);t=t.filter((e=>this.#Ne(e)));const s=new DataView(new ArrayBuffer(3*t.length));return t.forEach(((t,n)=>{le.AssertValidSensorType(t);const i=le.Types.indexOf(t);s.setUint8(3*n,i);const r=e[t];this.#Ae(r),s.setUint16(3*n+1,e[t],!0)})),he.log({sensorConfigurationData:s}),s}hasAtLeastOneNonZeroSensorRate(e){return Object.values(e).some((e=>e>0))}}const de=["none","strongClick100","strongClick60","strongClick30","sharpClick100","sharpClick60","sharpClick30","softBump100","softBump60","softBump30","doubleClick100","doubleClick60","tripleClick100","softFuzz60","strongBuzz100","alert750ms","alert1000ms","strongClick1_100","strongClick2_80","strongClick3_60","strongClick4_30","mediumClick100","mediumClick80","mediumClick60","sharpTick100","sharpTick80","sharpTick60","shortDoubleClickStrong100","shortDoubleClickStrong80","shortDoubleClickStrong60","shortDoubleClickStrong30","shortDoubleClickMedium100","shortDoubleClickMedium80","shortDoubleClickMedium60","shortDoubleSharpTick100","shortDoubleSharpTick80","shortDoubleSharpTick60","longDoubleSharpClickStrong100","longDoubleSharpClickStrong80","longDoubleSharpClickStrong60","longDoubleSharpClickStrong30","longDoubleSharpClickMedium100","longDoubleSharpClickMedium80","longDoubleSharpClickMedium60","longDoubleSharpTick100","longDoubleSharpTick80","longDoubleSharpTick60","buzz100","buzz80","buzz60","buzz40","buzz20","pulsingStrong100","pulsingStrong60","pulsingMedium100","pulsingMedium60","pulsingSharp100","pulsingSharp60","transitionClick100","transitionClick80","transitionClick60","transitionClick40","transitionClick20","transitionClick10","transitionHum100","transitionHum80","transitionHum60","transitionHum40","transitionHum20","transitionHum10","transitionRampDownLongSmooth2_100","transitionRampDownLongSmooth1_100","transitionRampDownMediumSmooth1_100","transitionRampDownMediumSmooth2_100","transitionRampDownShortSmooth1_100","transitionRampDownShortSmooth2_100","transitionRampDownLongSharp1_100","transitionRampDownLongSharp2_100","transitionRampDownMediumSharp1_100","transitionRampDownMediumSharp2_100","transitionRampDownShortSharp1_100","transitionRampDownShortSharp2_100","transitionRampUpLongSmooth1_100","transitionRampUpLongSmooth2_100","transitionRampUpMediumSmooth1_100","transitionRampUpMediumSmooth2_100","transitionRampUpShortSmooth1_100","transitionRampUpShortSmooth2_100","transitionRampUpLongSharp1_100","transitionRampUpLongSharp2_100","transitionRampUpMediumSharp1_100","transitionRampUpMediumSharp2_100","transitionRampUpShortSharp1_100","transitionRampUpShortSharp2_100","transitionRampDownLongSmooth1_50","transitionRampDownLongSmooth2_50","transitionRampDownMediumSmooth1_50","transitionRampDownMediumSmooth2_50","transitionRampDownShortSmooth1_50","transitionRampDownShortSmooth2_50","transitionRampDownLongSharp1_50","transitionRampDownLongSharp2_50","transitionRampDownMediumSharp1_50","transitionRampDownMediumSharp2_50","transitionRampDownShortSharp1_50","transitionRampDownShortSharp2_50","transitionRampUpLongSmooth1_50","transitionRampUpLongSmooth2_50","transitionRampUpMediumSmooth1_50","transitionRampUpMediumSmooth2_50","transitionRampUpShortSmooth1_50","transitionRampUpShortSmooth2_50","transitionRampUpLongSharp1_50","transitionRampUpLongSharp2_50","transitionRampUpMediumSharp1_50","transitionRampUpMediumSharp2_50","transitionRampUpShortSharp1_50","transitionRampUpShortSharp2_50","longBuzz100","smoothHum50","smoothHum40","smoothHum30","smoothHum20","smoothHum10"],ue=h("VibrationManager");class ve{static#Oe=["front","rear"];static get Locations(){return this.#Oe}get locations(){return ve.Locations}#$e(e){ue.assertTypeWithError(e,"string"),ue.assertWithError(this.locations.includes(e),`invalid location "${e}"`)}#Ue(e){this.#Pe(e),e.forEach((e=>{this.#$e(e)}))}#Ve(e){this.#Ue(e);let t=0;return e.forEach((e=>{const s=this.locations.indexOf(e);t|=1<<s})),ue.log({locationsBitmask:t}),ue.assertWithError(t>0,"locationsBitmask must not be zero"),t}#Pe(e){ue.assertWithError(Array.isArray(e),"passed non-array"),ue.assertWithError(e.length>0,"passed empty array")}static get WaveformEffects(){return de}get waveformEffects(){return ve.WaveformEffects}#Fe(e){ue.assertWithError(this.waveformEffects.includes(e),`invalid waveformEffect "${e}"`)}static#_e=1270;static get MaxWaveformEffectSegmentDelay(){return this.#_e}get maxWaveformEffectSegmentDelay(){return ve.MaxWaveformEffectSegmentDelay}#Be(e){if(null!=e.effect){const t=e.effect;this.#Fe(t)}else{if(null==e.delay)throw Error("no effect or delay found in waveformEffectSegment");{const{delay:t}=e;ue.assertWithError(t>=0,`delay must be 0ms or greater (got ${t})`),ue.assertWithError(t<=this.maxWaveformEffectSegmentDelay,`delay must be ${this.maxWaveformEffectSegmentDelay}ms or less (got ${t})`)}}if(null!=e.loopCount){const{loopCount:t}=e;this.#ze(t)}}static#qe=3;static get MaxWaveformEffectSegmentLoopCount(){return this.#qe}get maxWaveformEffectSegmentLoopCount(){return ve.MaxWaveformEffectSegmentLoopCount}#ze(e){ue.assertTypeWithError(e,"number"),ue.assertWithError(e>=0,`waveformEffectSegmentLoopCount must be 0 or greater (got ${e})`),ue.assertWithError(e<=this.maxWaveformEffectSegmentLoopCount,`waveformEffectSegmentLoopCount must be ${this.maxWaveformEffectSegmentLoopCount} or fewer (got ${e})`)}static#je=8;static get MaxNumberOfWaveformEffectSegments(){return this.#je}get maxNumberOfWaveformEffectSegments(){return ve.MaxNumberOfWaveformEffectSegments}#He(e){this.#Pe(e),ue.assertWithError(e.length<=this.maxNumberOfWaveformEffectSegments,`must have ${this.maxNumberOfWaveformEffectSegments} waveformEffectSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Be(e)}))}static#Ge=6;static get MaxWaveformEffectSequenceLoopCount(){return this.#Ge}get maxWaveformEffectSequenceLoopCount(){return ve.MaxWaveformEffectSequenceLoopCount}#Je(e){ue.assertTypeWithError(e,"number"),ue.assertWithError(e>=0,`waveformEffectSequenceLoopCount must be 0 or greater (got ${e})`),ue.assertWithError(e<=this.maxWaveformEffectSequenceLoopCount,`waveformEffectSequenceLoopCount must be ${this.maxWaveformEffectSequenceLoopCount} or fewer (got ${e})`)}static#Qe=2550;static get MaxWaveformSegmentDuration(){return this.#Qe}get maxWaveformSegmentDuration(){return ve.MaxWaveformSegmentDuration}#Ze(e){ue.assertTypeWithError(e.amplitude,"number"),ue.assertWithError(e.amplitude>=0,`amplitude must be 0 or greater (got ${e.amplitude})`),ue.assertWithError(e.amplitude<=1,`amplitude must be 1 or less (got ${e.amplitude})`),ue.assertTypeWithError(e.duration,"number"),ue.assertWithError(e.duration>0,`duration must be greater than 0ms (got ${e.duration}ms)`),ue.assertWithError(e.duration<=this.maxWaveformSegmentDuration,`duration must be ${this.maxWaveformSegmentDuration}ms or less (got ${e.duration}ms)`)}static#Ke=20;static get MaxNumberOfWaveformSegments(){return this.#Ke}get maxNumberOfWaveformSegments(){return ve.MaxNumberOfWaveformSegments}#Xe(e){this.#Pe(e),ue.assertWithError(e.length<=this.maxNumberOfWaveformSegments,`must have ${this.maxNumberOfWaveformSegments} waveformSegments or fewer (got ${e.length})`),e.forEach((e=>{this.#Ze(e)}))}createWaveformEffectsData(e,t,s=0){this.#He(t),this.#Je(s);let n=[],i=0;const r=t.some((e=>{const{loopCount:t}=e;return null!=t&&t>0}))||0!=s;for(let e=0;e<t.length||r&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]||{effect:"none"};if(null!=s.effect){const e=s.effect;n[i++]=this.waveformEffects.indexOf(e)}else{if(null==s.delay)throw Error("invalid waveformEffectSegment");{const{delay:e}=s;n[i++]=128|Math.floor(e/10)}}}const a=0!=s;for(let e=0;e<t.length||a&&e<this.maxNumberOfWaveformEffectSegments;e++){const s=t[e]?.loopCount||0;0!=e&&4!=e||(n[i]=0);const r=e%4*2;n[i]|=s<<r,3!=e&&7!=e||i++}0!=s&&(n[i++]=s);const o=new DataView(Uint8Array.from(n).buffer);return ue.log({dataArray:n,dataView:o}),this.#Ye(e,"waveformEffect",o)}createWaveformData(e,t){this.#Xe(t);const s=new DataView(new ArrayBuffer(2*t.length));return t.forEach(((e,t)=>{s.setUint8(2*t,Math.floor(127*e.amplitude)),s.setUint8(2*t+1,Math.floor(e.duration/10))})),ue.log({dataView:s}),this.#Ye(e,"waveform",s)}static#g=["waveformEffect","waveform"];static get Types(){return this.#g}get#et(){return ve.Types}#tt(e){ue.assertTypeWithError(e,"string"),ue.assertWithError(this.#et.includes(e),`invalid vibrationType "${e}"`)}#Ye(e,t,s){ue.assertWithError(s?.byteLength>0,"no data received");const n=this.#Ve(e);this.#tt(t);const i=this.#et.indexOf(t);ue.log({locationsBitmask:n,vibrationTypeIndex:i,dataView:s});const r=ee(n,i,s.byteLength,s);return ue.log({data:r}),r}}const pe=h("Device",{log:!1});class fe{get id(){return this.#st?.id}constructor(){this.#nt.onDataReceived=this.#it.bind(this),this.#rt.sendMessage=this.#at.bind(this),this.#rt.eventDispatcher=this.#ot,this.#ct.sendMessage=this.#at.bind(this),this.#ct.eventDispatcher=this.#ot,e&&window.addEventListener("beforeunload",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),t&&process.on("exit",(()=>{this.isConnected&&this.clearSensorConfigurationOnLeave&&this.clearSensorConfiguration()})),this.addEventListener("isConnected",(()=>{fe.#lt(this)}))}static get#ht(){return z}static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","deviceInformation","batteryLevel","getName","getType","getSensorConfiguration","pressurePositions","sensorScalars","getCurrentTime","sensorData","pressure","acceleration","gravity","linearAcceleration","gyroscope","magnetometer","gameRotation","rotation","barometer","connectionMessage",...y.EventTypes];static get EventTypes(){return this.#c}get eventTypes(){return fe.#c}#ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#ot.addEventListener(e,t,s)}#l(e){this.#ot.dispatchEvent(e)}removeEventListener(e,t){return this.#ot.removeEventListener(e,t)}#st;get connectionManager(){return this.#st}set connectionManager(e){this.connectionManager!=e?(this.connectionManager&&(this.connectionManager.onStatusUpdated=null,this.connectionManager.onMessageReceived=null),e&&(e.onStatusUpdated=this.#gt.bind(this),e.onMessageReceived=this.#dt.bind(this)),this.#st=e,pe.log("assigned new connectionManager",this.#st)):pe.log("same connectionManager is already assigned")}#at(e,t){return this.#st?.sendMessage(e,t)}async connect(){return this.connectionManager||(this.connectionManager=new fe.#ht),this.#ut(),this.connectionManager.connect()}#vt=!1;get isConnected(){return this.#vt}#oe(){pe.assertWithError(this.isConnected,"not connected")}static#pt=["manufacturerName","modelNumber","softwareRevision","hardwareRevision","firmwareRevision","pnpId","batteryLevel","getName","getType","getSensorConfiguration","sensorScalars","pressurePositions","getCurrentTime","maxFileLength","getFileLength","getFileChecksum","fileTransferStatus","getTfliteModelName","getTfliteModelTask","getTfliteModelSampleRate","getTfliteModelSensorTypes","getTfliteModelNumberOfClasses","tfliteModelIsReady","getTfliteCaptureDelay","getTfliteThreshold","getTfliteEnableInferencing","tfliteModelInference"];static get AllInformationConnectionMessages(){return this.#pt}get#ft(){return fe.#pt}get#mt(){return this.#ft.every((e=>this.latestConnectionMessage.has(e)))}get canReconnect(){return this.connectionManager?.canReconnect}async reconnect(){return this.#ut(),this.connectionManager?.reconnect()}static#bt=!1;static get ReconnectOnDisconnection(){return this.#bt}static set ReconnectOnDisconnection(e){pe.assertTypeWithError(e,"boolean"),this.#bt=e}#St=fe.ReconnectOnDisconnection;get reconnectOnDisconnection(){return this.#St}set reconnectOnDisconnection(e){pe.assertTypeWithError(e,"boolean"),this.#St=e}#yt;get connectionType(){return this.connectionManager?.type}async disconnect(){return this.#oe(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.addEventListener("isConnected",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.connectionManager.disconnect()}toggleConnection(){this.isConnected?this.disconnect():this.canReconnect?this.reconnect():this.connect()}get connectionStatus(){switch(this.#st?.status){case"connected":return this.isConnected?"connected":"connecting";case"not connected":case"connecting":case"disconnecting":return this.#st.status;default:return"not connected"}}#gt(e){pe.log({connectionStatus:e}),"not connected"==e?this.canReconnect&&this.reconnectOnDisconnection&&(pe.log("starting reconnect interval..."),this.#yt=setInterval((()=>{pe.log("attempting reconnect..."),this.reconnect()}),1e3)):null!=this.#yt&&(pe.log("clearing reconnect interval"),clearInterval(this.#yt),this.#yt=void 0),this.#Dt()}#Ct(e=!1){this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e&&this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}#Dt(){switch(this.#vt=this.connectionManager?.isConnected&&this.#mt&&this.#Tt,this.connectionStatus){case"connected":this.#vt&&this.#Ct(!0);break;case"not connected":this.#Ct(!0);break;default:this.#Ct(!1)}}#ut(){this.latestConnectionMessage.clear(),this.#Tt=!1}#dt(e,t){switch(pe.log({messageType:e,dataView:t}),e){case"manufacturerName":const s=this.#Et.decode(t);pe.log({manufacturerName:s}),this.#wt({manufacturerName:s});break;case"modelNumber":const n=this.#Et.decode(t);pe.log({modelNumber:n}),this.#wt({modelNumber:n});break;case"softwareRevision":const i=this.#Et.decode(t);pe.log({softwareRevision:i}),this.#wt({softwareRevision:i});break;case"hardwareRevision":const r=this.#Et.decode(t);pe.log({hardwareRevision:r}),this.#wt({hardwareRevision:r});break;case"firmwareRevision":const a=this.#Et.decode(t);pe.log({firmwareRevision:a}),this.#wt({firmwareRevision:a});break;case"pnpId":const o={source:1===t.getUint8(0)?"Bluetooth":"USB",productId:t.getUint16(3,!0),productVersion:t.getUint16(5,!0)};"Bluetooth"==o.source&&(o.vendorId=t.getUint16(1,!0)),pe.log({pnpId:o}),this.#wt({pnpId:o});break;case"serialNumber":const c=this.#Et.decode(t);pe.log({serialNumber:c});break;case"batteryLevel":const l=t.getUint8(0);pe.log("received battery level",{batteryLevel:l}),this.#Mt(l);break;case"getName":const h=this.#Et.decode(t);pe.log({name:h}),this.#Lt(h);break;case"getType":const g=t.getUint8(0),d=this.#et[g];pe.log({typeEnum:g,type:d}),this.#E(d);break;case"getSensorConfiguration":const u=this.#kt.parse(t);pe.log({sensorConfiguration:u}),this.#Wt(u);break;case"sensorScalars":this.#nt.parseScalars(t);break;case"pressurePositions":this.#nt.pressureSensorDataManager.parsePositions(t);break;case"getCurrentTime":const v=Number(t.getBigUint64(0,!0));this.#Nt(v);break;case"sensorData":this.#nt.parseData(t);break;default:if(this.#rt.messageTypes.includes(e))this.#rt.parseMessage(e,t);else{if(!this.#ct.messageTypes.includes(e))throw Error(`uncaught messageType ${e}`);this.#ct.parseMessage(e,t)}}this.latestConnectionMessage.set(e,t),this.#l({type:"connectionMessage",message:{messageType:e,dataView:t}}),!this.isConnected&&this.#mt&&this.#Dt()}latestConnectionMessage=new Map;static#It=new TextEncoder;get#Rt(){return fe.#It}static#xt=new TextDecoder;get#Et(){return fe.#xt}#Tt=!1;#Nt(e){pe.log({currentTime:e}),this.#Tt=0!=e,this.#Tt||this.#At()}#At(){pe.log("setting current time...");const e=new DataView(new ArrayBuffer(8));e.setBigUint64(0,BigInt(Date.now()),!0),this.#st.sendMessage("setCurrentTime",e)}#Ot={manufacturerName:null,modelNumber:null,softwareRevision:null,hardwareRevision:null,firmwareRevision:null,pnpId:null};get deviceInformation(){return this.#Ot}get#$t(){return Object.values(this.#Ot).every((e=>null!=e))}#wt(e){pe.log({partialDeviceInformation:e});for(const t in e)this.#l({type:t,message:{[t]:e[t]}});Object.assign(this.#Ot,e),pe.log({deviceInformation:this.#Ot}),this.#$t&&(pe.log("completed deviceInformation"),this.#l({type:"deviceInformation",message:{deviceInformation:this.#Ot}}))}#Ut=null;get batteryLevel(){return this.#Ut}#Mt(e){pe.assertTypeWithError(e,"number"),this.#Ut!=e?(this.#Ut=e,pe.log({updatedBatteryLevel:this.#Ut}),this.#l({type:"batteryLevel",message:{batteryLevel:this.#Ut}})):pe.log(`duplicate batteryLevel assignment ${e}`)}#Pt;get name(){return this.#Pt}#Lt(e){pe.assertTypeWithError(e,"string"),this.#Pt=e,pe.log({updatedName:this.#Pt}),this.#l({type:"getName",message:{name:this.#Pt}})}static get MinNameLength(){return 2}get minNameLength(){return fe.MinNameLength}static get MaxNameLength(){return 30}get maxNameLength(){return fe.MaxNameLength}async setName(e){this.#oe(),pe.assertTypeWithError(e,"string"),pe.assertWithError(e.length>=this.minNameLength,`name must be greater than ${this.minNameLength} characters long ("${e}" is ${e.length} characters long)`),pe.assertWithError(e.length<this.maxNameLength,`name must be less than ${this.maxNameLength} characters long ("${e}" is ${e.length} characters long)`);const t=this.#Rt.encode(e);pe.log({setNameData:t}),await this.#st.sendMessage("setName",t)}static#g=["leftInsole","rightInsole"];static get Types(){return this.#g}get#et(){return fe.Types}#C;get type(){return this.#C}get typeEnum(){return fe.Types.indexOf(this.type)}#Vt(e){pe.assertEnumWithError(e,this.#et)}#Ft(e){pe.assertTypeWithError(e,"number"),pe.assertWithError(this.#et[e],`invalid typeEnum ${e}`)}#E(e){this.#Vt(e),e!=this.type?(this.#C=e,pe.log({updatedType:this.#C}),this.#l({type:"getType",message:{type:this.#C}}),fe.#_t&&fe.#Bt(this)):pe.log("redundant type assignment")}async#zt(e){this.#Ft(e);const t=Uint8Array.from([e]);pe.log({setTypeData:t}),await this.#st.sendMessage("setType",t)}async setType(e){this.#oe(),this.#Vt(e);const t=this.#et.indexOf(e);this.#zt(t)}get isInsole(){switch(this.type){case"leftInsole":case"rightInsole":return!0;default:return!1}}static#qt=["left","right"];static get InsoleSides(){return this.#qt}get insoleSides(){return fe.InsoleSides}get insoleSide(){switch(this.type){case"leftInsole":return"left";case"rightInsole":return"right"}}static get SensorTypes(){return le.Types}get sensorTypes(){return Object.keys(this.sensorConfiguration)}#kt=new ge;#jt;get sensorConfiguration(){return this.#jt}get sensorConfigurationData(){return this.#kt.createData(this.sensorConfiguration)}static get MaxSensorRate(){return ge.MaxSensorRate}static get SensorRateStep(){return ge.SensorRateStep}#Wt(e){this.#jt=e,pe.log({updatedSensorConfiguration:this.#jt}),this.#l({type:"getSensorConfiguration",message:{sensorConfiguration:this.sensorConfiguration}})}async setSensorConfiguration(e){this.#oe(),pe.log({newSensorConfiguration:e});const t=this.#kt.createData(e);pe.log({setSensorConfigurationData:t}),await this.#st.sendMessage("setSensorConfiguration",t)}static#Ht=!0;static get ClearSensorConfigurationOnLeave(){return this.#Ht}static set ClearSensorConfigurationOnLeave(e){pe.assertTypeWithError(e,"boolean"),this.#Ht=e}#Gt=fe.ClearSensorConfigurationOnLeave;get clearSensorConfigurationOnLeave(){return this.#Gt}set clearSensorConfigurationOnLeave(e){pe.assertTypeWithError(e,"boolean"),this.#Gt=e}static#Jt={};static get ZeroSensorConfiguration(){return this.#Jt}static{this.SensorTypes.forEach((e=>{this.#Jt[e]=0}))}get zeroSensorConfiguration(){const e={};return this.sensorTypes.forEach((t=>{e[t]=0})),e}async clearSensorConfiguration(){return this.setSensorConfiguration(this.zeroSensorConfiguration)}static#Qt=8;static get DefaultNumberOfPressureSensors(){return this.#Qt}#nt=new le;#it(e,t){pe.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t}),this.#l({type:"sensorData",message:{...t,sensorType:e}})}resetPressureRange(){this.#nt.pressureSensorDataManager.resetRange()}#Zt=new ve;static get VibrationLocations(){return ve.Locations}static get VibrationTypes(){return ve.Types}static get VibrationWaveformEffects(){return ve.WaveformEffects}static get MaxVibrationWaveformEffectSegmentDelay(){return ve.MaxWaveformEffectSegmentDelay}static get MaxNumberOfVibrationWaveformEffectSegments(){return ve.MaxNumberOfWaveformEffectSegments}static get MaxVibrationWaveformEffectSegmentLoopCount(){return ve.MaxWaveformEffectSegmentLoopCount}static get MaxVibrationWaveformEffectSequenceLoopCount(){return ve.MaxWaveformEffectSequenceLoopCount}static get MaxVibrationWaveformSegmentDuration(){return ve.MaxWaveformSegmentDuration}static get MaxNumberOfVibrationWaveformSegments(){return ve.MaxNumberOfWaveformSegments}async triggerVibration(...e){let t;e.forEach((e=>{const{type:s}=e;let n,{locations:i}=e;switch(i=i||this.#Zt.locations.slice(),s){case"waveformEffect":{const{waveformEffect:t}=e;if(!t)throw Error("waveformEffect not defined in vibrationConfiguration");const{segments:s,loopCount:r}=t;n=this.#Zt.createWaveformEffectsData(i,s,r)}break;case"waveform":{const{waveform:t}=e;if(!t)throw Error("waveform not defined in vibrationConfiguration");const{segments:s}=t;n=this.#Zt.createWaveformData(i,s)}break;default:throw Error(`invalid vibration type "${s}"`)}pe.log({type:s,dataView:n}),t=ee(t,n)})),await this.#st.sendMessage("triggerVibration",t)}static#Kt=[];static get ConnectedDevices(){return this.#Kt}static#_t=!1;static get UseLocalStorage(){return this.#_t}static set UseLocalStorage(e){this.#Xt(),pe.assertTypeWithError(e,"boolean"),this.#_t=e,this.#_t&&!this.#Yt&&this.#es()}static#ts={devices:[]};static#Yt;static get CanUseLocalStorage(){return e&&window.localStorage}static#Xt(){pe.assertWithError(e,"localStorage is only available in the browser"),pe.assertWithError(window.localStorage,"localStorage not found")}static#ss="BS.Device";static#ns(){this.#Xt(),localStorage.setItem(this.#ss,JSON.stringify(this.#Yt))}static async#es(){this.#Xt();let e=localStorage.getItem(this.#ss);if("string"!=typeof e)return pe.log("no info found in localStorage"),this.#Yt=Object.assign({},this.#ts),void this.#ns();try{const t=JSON.parse(e);pe.log({configuration:t}),this.#Yt=t,this.CanGetDevices&&await this.GetDevices()}catch(e){pe.error(e)}}static#Bt(e){if("webBluetooth"!=e.connectionType)return void pe.log("localStorage is only for webBluetooth devices");this.#Xt();const t=this.#Yt.devices.findIndex((t=>t.bluetoothId==e.id));-1!=t&&(this.#Yt.devices[t].type=e.type,this.#ns())}static#is=[];static get AvailableDevices(){return this.#is}static get CanGetDevices(){return e&&navigator.bluetooth?.getDevices}static async GetDevices(){if(!e)return void pe.warn("GetDevices is only available in the browser");if(!navigator.bluetooth)return void pe.warn("bluetooth is not available in this browser");if(!navigator.bluetooth.getDevices)return void pe.warn("bluetooth.getDevices() is not available in this browser");this.#Yt||this.#es();const t=this.#Yt;if(!t.devices||0==t.devices.length)return void pe.log("no devices found in configuration");const s=await navigator.bluetooth.getDevices();return pe.log({bluetoothDevices:s}),s.forEach((e=>{if(!e.gatt)return;let s=t.devices.find((t=>e.id==t.bluetoothId));if(!s)return;let n=this.ConnectedDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));const i=this.AvailableDevices.filter((e=>"webBluetooth"==e.connectionType)).find((t=>t.id==e.id));if(i)return void(n?.id==i.id&&n!=i&&(this.AvailableDevices[this.#is.indexOf(i)]=n));if(n)return void this.AvailableDevices.push(n);const r=new fe,a=new z;a.device=e,e.name&&r.#Lt(e.name),r.#E(s.type),r.connectionManager=a,this.AvailableDevices.push(r)})),this.#rs(),this.AvailableDevices}static#as=["deviceConnected","deviceDisconnected","deviceIsConnected","availableDevices"];static get StaticEventTypes(){return this.#as}static#os=new u(this,this.#as);static AddEventListener(e,t,s){this.#os.addEventListener(e,t,s)}static#cs(e){this.#os.dispatchEvent(e)}static RemoveEventListener(e,t){return this.#os.removeEventListener(e,t)}static#lt(e){if(e.isConnected)if(this.#Kt.includes(e))pe.log("device already included");else{if(pe.log("adding device",e),this.#Kt.push(e),this.UseLocalStorage&&"webBluetooth"==e.connectionType){const t={type:e.type,bluetoothId:e.id},s=this.#Yt.devices.findIndex((e=>e.bluetoothId==t.bluetoothId));-1==s?this.#Yt.devices.push(t):this.#Yt.devices[s]=t,this.#ns()}this.#cs({type:"deviceConnected",message:{device:e}}),this.#cs({type:"deviceIsConnected",message:{device:e}})}else this.#Kt.includes(e)?(pe.log("removing device",e),this.#Kt.splice(this.#Kt.indexOf(e),1),this.#cs({type:"deviceDisconnected",message:{device:e}}),this.#cs({type:"deviceIsConnected",message:{device:e}})):pe.log("device already not included");if(this.CanGetDevices&&this.GetDevices(),e.isConnected&&!this.AvailableDevices.includes(e)){const t=this.AvailableDevices.find((t=>t.id==e.id));pe.log({existingAvailableDevice:t}),t?this.AvailableDevices[this.AvailableDevices.indexOf(t)]=e:this.AvailableDevices.push(e),this.#rs()}}static#rs(){pe.log({AvailableDevices:this.AvailableDevices}),this.#cs({type:"availableDevices",message:{devices:this.AvailableDevices}})}static async Connect(){const e=new fe;return await e.connect(),e}static{this.CanUseLocalStorage&&(this.UseLocalStorage=!0)}#rt=new y;static get FileTypes(){return y.Types}get maxFileLength(){return this.#rt.maxLength}sendFile(e,t){this.#rt.send(e,t)}receiveFile(e){this.#rt.receive(e)}get fileTransferStatus(){return this.#rt.status}cancelFileTransfer(){this.#rt.cancel()}#ct=new C}const me=h("Timer",{log:!1});class be{#ls;get callback(){return this.#ls}set callback(e){me.assertTypeWithError(e,"function"),me.log({newCallback:e}),this.#ls=e,this.isRunning&&this.restart()}#hs;get interval(){return this.#hs}set interval(e){me.assertTypeWithError(e,"number"),me.assertWithError(e>0,"interval must be above 0"),me.log({newInterval:e}),this.#hs=e,this.isRunning&&this.restart()}constructor(e,t){this.interval=t,this.callback=e}#gs=null;get isRunning(){return null!=this.#gs}start(){this.isRunning?me.log("interval already running"):(me.log("starting interval"),this.#gs=setInterval(this.#ls,this.#hs))}stop(){this.isRunning?(me.log("stopping interval"),clearInterval(this.#gs),this.#gs=null):me.log("interval already not running")}restart(){this.stop(),this.start()}}const Se=h("BaseScanner");class ye{static get isSupported(){return!1}get isSupported(){return this.constructor.isSupported}#ne(){Se.assertWithError(this.isSupported,`${this.constructor.name} is not supported`)}#ie(){Se.assertWithError(this.constructor!=ye,`${this.constructor.name} must be subclassed`)}constructor(){this.#ie(),this.#ne(),v(this,this.#ds)}#ds={discoveredDevice:this.#us.bind(this),isScanning:this.#vs.bind(this)};static#c=["isAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return ye.#c}#ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#ot.addEventListener(e,t,s)}dispatchEvent(e){this.#ot.dispatchEvent(e)}removeEventListener(e,t){return this.#ot.removeEventListener(e,t)}get isAvailable(){return!1}#ps(){Se.assertWithError(this.isAvailable,"not available")}get isScanning(){return!1}#fs(){Se.assertWithError(this.isScanning,"not scanning")}#ms(){Se.assertWithError(!this.isScanning,"already scanning")}startScan(){this.#ps(),this.#ms()}stopScan(){this.#fs()}#vs(){this.isScanning?(this.#bs={},this.#Ss={}):this.#ys.stop()}#bs={};get discoveredDevices(){return this.#bs}get discoveredDevicesArray(){return Object.values(this.#bs).sort(((e,t)=>this.#Ss[e.id]-this.#Ss[t.id]))}#Ds(e){Se.assertWithError(this.#bs[e],`no discovered device with id "${e}"`)}#us(e){const t=e.message.discoveredDevice;this.#bs[t.id]=t,this.#Ss[t.id]=Date.now(),this.#ys.start()}#Ss={};static#Cs=5e3;static get DiscoveredDeviceExpirationTimeout(){return this.#Cs}get#Ts(){return ye.DiscoveredDeviceExpirationTimeout}#ys=new be(this.#Es.bind(this),1e3);#Es(){const e=Object.entries(this.#bs);if(0==e.length)return void this.#ys.stop();const t=Date.now();e.forEach((([e,s])=>{const n=this.#Ss[e];t-n>this.#Ts&&(Se.log("discovered device timeout"),delete this.#bs[e],delete this.#Ss[e],this.dispatchEvent({type:"expiredDiscoveredDevice",message:{discoveredDevice:s}}))}))}async connectToDevice(e){this.#ps()}get canReset(){return!1}reset(){Se.log("resetting...")}}const De=h("NobleConnectionManager",{log:!0});t&&require("@abandonware/noble");class Ce extends F{get id(){return this.#ws?.id}static get isSupported(){return t}static get type(){return"noble"}get isConnected(){return"connected"==this.#ws?.state}async connect(){await super.connect(),await this.#ws.connectAsync()}async disconnect(){await super.disconnect(),await this.#ws.disconnectAsync()}async sendMessage(e,t){await super.sendMessage(...arguments);const s=this.characteristicNameForMessageType(e);De.log({characteristicName:s});const n=this.#fe.get(s);De.assertWithError(n,`no characteristic found with name "${s}"`),t instanceof DataView&&(t=t.buffer);const i=Buffer.from(t);De.log("writing data",i),await n.writeAsync(i,!1),n.properties.includes("read")&&await n.readAsync()}get canReconnect(){return this.#ws.connectable}async reconnect(){await super.reconnect(),De.log("attempting to reconnect..."),this.connect()}#ws;get noblePeripheral(){return this.#ws}set noblePeripheral(e){De.assertTypeWithError(e,"object"),this.noblePeripheral!=e?(De.log("newNoblePeripheral",e.id),this.#ws&&(p(this.#ws,this.#Ms),delete this.#ws._connectionManager),e&&(e._connectionManager=this,v(e,this.#Ms)),this.#ws=e):De.log("attempted to assign duplicate noblePeripheral")}#Ms={connect:this.#Ls,disconnect:this.#ks,rssiUpdate:this.#Ws,servicesDiscover:this.#Ns};async#Ls(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralConnect(e){De.log("onNoblePeripheralConnect",e.id,e.state),"connected"==e.state&&await this.#ws.discoverServicesAsync(x),await this.#Is()}async#ks(){await this._connectionManager.onNoblePeripheralConnect(this)}async onNoblePeripheralDisconnect(e){De.log("onNoblePeripheralDisconnect",e.id),await this.#Is()}async#Is(){switch(De.log(`noblePeripheral ${this.id} state ${this.#ws.state}`),this.#ws.state){case"connected":case"connecting":break;case"disconnected":this.#be(),this.status="not connected";break;case"disconnecting":this.status="disconnecting";break;case"error":De.error("noblePeripheral error");break;default:De.log(`uncaught noblePeripheral state ${this.#ws.state}`)}}#be(){De.log("removing noblePeripheral eventListeners"),this.#pe.forEach((e=>{p(e,this.#Rs)})),this.#pe.clear(),this.#fe.forEach((e=>{p(e,this.#xs)})),this.#fe.clear()}async#Ws(e){await this._connectionManager.onNoblePeripheralRssiUpdate(this,e)}async onNoblePeripheralRssiUpdate(e,t){De.log("onNoblePeripheralRssiUpdate",e.id,t)}async#Ns(e){await this._connectionManager.onNoblePeripheralServicesDiscover(this,e)}async onNoblePeripheralServicesDiscover(e,t){De.log("onNoblePeripheralServicesDiscover",e.id,t.map((e=>e.uuid)));for(const e in t){const s=t[e];De.log("service",s.uuid);const n=A(s.uuid);De.assertWithError(n,`no name found for service uuid "${s.uuid}"`),De.log({serviceName:n}),this.#pe.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#Rs),await s.discoverCharacteristicsAsync()}}#pe=new Map;#Rs={characteristicsDiscover:this.#As};async#As(e){await this._connectionManager.onNobleServiceCharacteristicsDiscover(this,e)}async onNobleServiceCharacteristicsDiscover(e,t){De.log("onNobleServiceCharacteristicsDiscover",e.uuid,t.map((e=>e.uuid)));for(const e in t){const s=t[e];De.log("characteristic",s.uuid);const n=P(s.uuid);De.assertWithError(n,`no name found for characteristic uuid "${s.uuid}"`),De.log({characteristicName:n}),this.#fe.set(n,s),s._name=n,s._connectionManager=this,v(s,this.#xs),s.properties.includes("read")&&await s.readAsync(),s.properties.includes("notify")&&await s.subscribeAsync()}this.#Os&&(this.status="connected")}#xs={data:this.#$s,write:this.#Us,notify:this.#Ps};#fe=new Map;get#Os(){return U.every((e=>this.#fe.has(e)))}#$s(e,t){this._connectionManager.onNobleCharacteristicData(this,e,t)}onNobleCharacteristicData(e,t,s){De.log("onNobleCharacteristicData",e.uuid,t,s);const n=new DataView(te(t)),i=e._name;De.assertWithError(i,`no name found for characteristic with uuid "${e.uuid}"`),this.onCharacteristicValueChanged(i,n)}#Us(){this._connectionManager.onNobleCharacteristicWrite(this)}onNobleCharacteristicWrite(e){De.log("onNobleCharacteristicWrite",e.uuid)}#Ps(e){this._connectionManager.onNobleCharacteristicNotify(this,e)}onNobleCharacteristicNotify(e,t){De.log("onNobleCharacteristicNotify",e.uuid,t)}}const Te=h("NobleScanner",{log:!0});let Ee=!1;if(t){var we=require("@abandonware/noble");Ee=!0}class Me extends ye{static get isSupported(){return Ee}#Vs=!1;get#Fs(){return this.#Vs}set#Fs(e){Te.assertTypeWithError(e,"boolean"),this.isScanning!=e?(this.#Vs=e,this.dispatchEvent({type:"isScanning",message:{isScanning:this.isScanning}})):Te.log("duplicate isScanning assignment")}get isScanning(){return this.#Fs}#_s="unknown";get#Bs(){return this.#_s}set#Bs(e){Te.assertTypeWithError(e,"string"),this.#Bs!=e?(this.#_s=e,Te.log({newNobleState:e}),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}})):Te.log("duplicate nobleState assignment")}#zs={scanStart:this.#qs.bind(this),scanStop:this.#js.bind(this),stateChange:this.#Hs.bind(this),discover:this.#Gs.bind(this)};#qs(){Te.log("OnNobleScanStart"),this.#Fs=!0}#js(){Te.log("OnNobleScanStop"),this.#Fs=!1}#Hs(e){Te.log("onNobleStateChange",e),this.#Bs=e}#Gs(e){let t;Te.log("onNobleDiscover",e.id),this.#Js[e.id]||(e._scanner=this,this.#Js[e.id]=e);const s=e.advertisement.serviceData;if(s){const e=s.find((e=>"0000"==e.uuid));if(e){const s=e.data.readUint8(0);t=fe.Types[s]}}const n={name:e.advertisement.localName,id:e.id,deviceType:t,rssi:e.rssi};this.dispatchEvent({type:"discoveredDevice",message:{discoveredDevice:n}})}constructor(){super(),v(we,this.#zs),v(this,this.#Qs)}get isAvailable(){return"poweredOn"==this.#Bs}startScan(){super.startScan(),we.startScanningAsync(I,!0)}stopScan(){super.stopScan(),we.stopScanningAsync()}get canReset(){return!0}reset(){super.reset(),we.reset()}#Qs={expiredDiscoveredDevice:this.#Zs.bind(this)};#Zs(e){const t=e.message.discoveredDevice;this.#Js[t.id]&&delete this.#Js[t.id]}#Js={};#Ks(e){Te.assertTypeWithError(e,"string"),Te.assertWithError(this.#Js[e],`no noblePeripheral found with id "${e}"`)}async connectToDevice(e){super.connectToDevice(e),this.#Ks(e);const t=this.#Js[e];Te.log("connecting to discoveredDevice...",e);let s=fe.AvailableDevices.filter((e=>"noble"==e.connectionType)).find((t=>t.id==e));s?await s.reconnect():(s=this.#Xs(t),await s.connect())}#Xs(e){const t=new fe,s=new Ce;return s.noblePeripheral=e,t.connectionManager=s,t}}const Le=h("Scanner",{log:!1});let ke;Me.isSupported?(Le.log("using NobleScanner"),ke=new Me):Le.log("Scanner not available");var We=ke;const Ne=h("DevicePairPressureSensorDataManager",{log:!0});class Ie{static get Sides(){return fe.InsoleSides}get sides(){return fe.InsoleSides}#Ys={};#Te=new H;resetPressureRange(){this.#Te.reset()}onDevicePressureData(e){const{pressure:t}=e.message,s=e.target.insoleSide;if(Ne.log({pressure:t,insoleSide:s}),this.#Ys[s]=t,this.#en)return this.#tn();Ne.log("doesn't have all pressure data yet...")}get#en(){return this.sides.every((e=>e in this.#Ys))}#tn(){const e={rawSum:0,normalizedSum:0};return this.sides.forEach((t=>{e.rawSum+=this.#Ys[t].rawSum,e.normalizedSum+=this.#Ys[t].normalizedSum})),e.normalizedSum>0&&(e.center={x:0,y:0},this.sides.forEach((t=>{const s=this.#Ys[t],n=s.normalizedSum/e.normalizedSum;n>0&&(e.center.y+=s.normalizedCenter.y*n,"right"==t&&(e.center.x=n))})),e.normalizedCenter=this.#Te.updateAndGetNormalization(e.center)),Ne.log({devicePairPressure:e}),e}}const Re=h("DevicePairSensorDataManager",{log:!0});class xe{static get Sides(){return fe.InsoleSides}get sides(){return fe.InsoleSides}#sn={};pressureSensorDataManager=new Ie;resetPressureRange(){this.sides.forEach((e=>{this[e]?.resetPressureRange()})),this.pressureSensorDataManager.resetPressureRange()}onDeviceSensorData(e){const{timestamp:t}=e.message,s=e.message.sensorType;let n;if(Re.log({sensorType:s,timestamp:t,event:e}),this.#sn[s]||(this.#sn[s]={}),this.#sn[s][e.target.insoleSide]=t,"pressure"===s)n=this.pressureSensorDataManager.onDevicePressureData(e);else Re.log(`uncaught sensorType "${s}"`);if(n){const e=Object.assign({},this.#sn[s]);this.onDataReceived?.(s,{timestamps:e,[s]:n})}else Re.log("no value received")}onDataReceived}const Ae=h("DevicePair",{log:!0});class Oe{constructor(){this.#nt.onDataReceived=this.#it.bind(this)}static#c=["isConnected","pressure",...fe.EventTypes.map((e=>`device${g(e)}`))];static get EventTypes(){return this.#c}get eventTypes(){return Oe.#c}#ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#ot.addEventListener(e,t,s)}#l(e){this.#ot.dispatchEvent(e)}removeEventListener(e,t){return this.#ot.removeEventListener(e,t)}static get Sides(){return fe.InsoleSides}get sides(){return Oe.Sides}#nn;get left(){return this.#nn}#in;get right(){return this.#in}get isConnected(){return this.sides.every((e=>this[e]?.isConnected))}get isPartiallyConnected(){return this.sides.some((e=>this[e]?.isConnected))}get isHalfConnected(){return this.isPartiallyConnected&&!this.isConnected}#oe(){Ae.assertWithError(this.isConnected,"devicePair must be connected")}assignInsole(e){if(!e.isInsole)return void Ae.warn("device is not an insole");const t=e.insoleSide,s=this[t];if(e!=s){switch(s&&p(s,this.#rn),v(e,this.#rn),t){case"left":this.#nn=e;break;case"right":this.#in=e}return Ae.log(`assigned ${t} insole`,e),this.resetPressureRange(),this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.#l({type:"deviceIsConnected",message:{device:e,isConnected:e.isConnected}}),s}Ae.log("device already assigned")}#rn={connectionStatus:this.#an.bind(this),isConnected:this.#on.bind(this),sensorData:this.#cn.bind(this),getSensorConfiguration:this.#an.bind(this)};#an(e){this.#l({type:`device${g(e.type)}`,message:{...e.message,device:e.target}})}#on(e){this.#an(e),this.#l({type:"isConnected",message:{isConnected:this.isConnected}})}setSensorConfiguration(e){this.sides.forEach((t=>{this[t]?.setSensorConfiguration(e)}))}#nt=new xe;#cn(e){this.#an(e),this.#l({type:`device${g(e.message.sensorType)}`,message:{...e.message,device:e.target}}),this.isConnected&&this.#nt.onDeviceSensorData(e)}#it(e,t){Ae.log({sensorType:e,sensorData:t}),this.#l({type:e,message:t})}resetPressureRange(){this.#nt.resetPressureRange()}async triggerVibration(...e){const t=this.sides.map((t=>this[t]?.triggerVibration(...e))).filter(Boolean);return Promise.allSettled(t)}static#ln=new Oe;static get shared(){return this.#ln}static{fe.AddEventListener("deviceConnected",(e=>{const t=e.message.device;t.isInsole&&this.#ln.assignInsole(t)}))}}const $e=h("ServerUtils",{log:!1}),Ue=3e7;function Pe(e,...t){$e.log("createMessage",...t);const s=t.map((t=>{"string"==typeof t&&(t={type:t}),"data"in t?Array.isArray(t.data)||(t.data=[t.data]):t.data=[];const s=ee(...t.data),n=s.byteLength;$e.assertEnumWithError(t.type,e);return ee(e.indexOf(t.type),Uint16Array.from([n]),s)}));return $e.log("messageBuffers",...s),ee(...s)}const Ve=["ping","pong","isScanningAvailable","isScanning","startScan","stopScan","discoveredDevice","discoveredDevices","expiredDiscoveredDevice","connectToDevice","disconnectFromDevice","connectedDevices","deviceMessage"];function Fe(...e){return Pe(Ve,...e)}function _e(...e){return $e.log("createDeviceMessage",...e),Pe(fe.EventTypes,...e)}function Be(...e){return Pe(E.MessageTypes,...e)}const ze=Fe("ping"),qe=Fe("pong");Fe("isScanningAvailable"),Fe("isScanning"),Fe("startScan"),Fe("stopScan");const je=Fe("discoveredDevices"),He=h("WebSocketClientConnectionManager",{log:!0});class Ge extends E{static get isSupported(){return e}static get type(){return"webSocketClient"}#hn;get id(){return this.#hn}set id(e){He.assertTypeWithError(e,"string"),this.#hn!=e?this.#hn=e:He.log("redundant id assignment")}#vt=!1;get isConnected(){return this.#vt}set isConnected(e){He.assertTypeWithError(e,"boolean"),this.#vt!=e?(this.#vt=e,this.status=this.#vt?"connected":"not connected",this.#vt&&this.#gn()):He.log("redundant newIsConnected assignment",e)}async connect(){await super.connect(),this.sendWebSocketConnectMessage()}async disconnect(){await super.disconnect(),this.sendWebSocketDisconnectMessage()}async sendMessage(e,t){switch(await super.sendMessage(...arguments),e){case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":this.sendWebSocketMessage({type:e,data:t});break;case"setCurrentTime":He.log("setCurrentTime request ignored - reserved for direct device connections");break;default:throw Error(`uncaught messageType "${e}"`)}}get canReconnect(){return!0}async reconnect(){await super.reconnect(),He.log("attempting to reconnect..."),this.connect()}sendWebSocketMessage;sendWebSocketConnectMessage;sendWebSocketDisconnectMessage;onWebSocketMessage(e){He.log({dataView:e}),oe(e,fe.EventTypes,((e,t)=>{const s=e;let n=0;switch(s){case"isConnected":const e=Boolean(t.getUint8(n++));He.log({isConnected:e}),this.isConnected=e;break;case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"sensorData":case"getCurrentTime":this.onMessageReceived(s,t);break;default:He.error(`uncaught messageType "${s}"`)}}),!0)}#gn(){this.sendWebSocketMessage(...fe.AllInformationConnectionMessages)}}const Je=h("WebSocketClient",{log:!0});class Qe{static#c=["connectionStatus","connecting","connected","disconnecting","not connected","isConnected","isScanningAvailable","isScanning","discoveredDevice","expiredDiscoveredDevice"];static get EventTypes(){return this.#c}get eventTypes(){return Qe.#c}#ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#ot.addEventListener(e,t,s)}#l(e){this.#ot.dispatchEvent(e)}removeEventListener(e,t){return this.#ot.removeEventListener(e,t)}#dn;get webSocket(){return this.#dn}set webSocket(e){this.#dn!=e?(Je.log("assigning webSocket",e),this.#dn&&p(this.#dn,this.#un),v(e,this.#un),this.#dn=e,Je.log("assigned webSocket")):Je.log("redundant webSocket assignment")}get isConnected(){return this.webSocket?.readyState==WebSocket.OPEN}#vn(){Je.assertWithError(this.isConnected,"not connected")}get isDisconnected(){return this.webSocket?.readyState==WebSocket.CLOSED}#pn(){Je.assertWithError(this.isDisconnected,"not disconnected")}connect(e=`wss://${location.host}`){this.webSocket&&this.#pn(),this.#fn="connecting",this.webSocket=new WebSocket(e)}disconnect(){this.#vn(),this.reconnectOnDisconnection&&(this.reconnectOnDisconnection=!1,this.webSocket.addEventListener("close",(()=>{this.reconnectOnDisconnection=!0}),{once:!0})),this.#fn="disconnecting",this.webSocket.close()}reconnect(){this.#pn(),this.webSocket=new WebSocket(this.webSocket.url)}toggleConnection(e){this.isConnected?this.disconnect():this.webSocket?this.reconnect():this.connect(e)}static#bt=!0;static get ReconnectOnDisconnection(){return this.#bt}static set ReconnectOnDisconnection(e){Je.assertTypeWithError(e,"boolean"),this.#bt=e}#St=Qe.#bt;get reconnectOnDisconnection(){return this.#St}set reconnectOnDisconnection(e){Je.assertTypeWithError(e,"boolean"),this.#St=e}#mn(e){this.#vn(),this.#dn.send(e)}#bn(...e){this.#mn(Fe(...e))}#un={open:this.#Sn.bind(this),message:this.#yn.bind(this),close:this.#Dn.bind(this),error:this.#Cn.bind(this)};#Sn(e){Je.log("webSocket.open",e),this.#Tn.start(),this.#fn="connected"}async#yn(e){Je.log("webSocket.message",e),this.#Tn.restart();const t=await e.data.arrayBuffer(),s=new DataView(t);this.#En(s)}#Dn(e){Je.log("webSocket.close",e),this.#fn="not connected",Object.entries(this.devices).forEach((([e,t])=>{t.connectionManager.isConnected=!1})),this.#Tn.stop(),this.#St&&setTimeout((()=>{this.reconnect()}),3e3)}#Cn(e){Je.log("webSocket.error",e)}#wn="not connected";get#fn(){return this.#wn}set#fn(e){switch(Je.assertTypeWithError(e,"string"),Je.log({newConnectionStatus:e}),this.#wn=e,this.#l({type:"connectionStatus",message:{connectionStatus:this.connectionStatus}}),this.#l({type:this.connectionStatus}),e){case"connected":case"not connected":this.#l({type:"isConnected",message:{isConnected:this.isConnected}}),this.isConnected?this.#bn("isScanningAvailable","discoveredDevices","connectedDevices"):(this.#Mn=!1,this.#Fs=!1)}}get connectionStatus(){return this.#fn}#En(e){Je.log("parseMessage",{dataView:e}),oe(e,Ve,((e,t)=>{const s=e;let n=0;switch(s){case"ping":this.#Ln();break;case"pong":break;case"isScanningAvailable":{const e=Boolean(t.getUint8(n++));Je.log({isScanningAvailable:e}),this.#Mn=e}break;case"isScanning":{const e=Boolean(t.getUint8(n++));Je.log({isScanning:e}),this.#Fs=e}break;case"discoveredDevice":{const{string:e}=ae(t,n);Je.log({discoveredDeviceString:e});const s=JSON.parse(e);Je.log({discoveredDevice:s}),this.#us(s)}break;case"expiredDiscoveredDevice":{const{string:e}=ae(t,n);this.#Zs(e)}break;case"connectedDevices":{if(0==t.byteLength)break;const{string:e}=ae(t,n);Je.log({connectedDeviceIdStrings:e});const s=JSON.parse(e);Je.log({connectedDeviceIds:s}),this.#kn(s)}break;case"deviceMessage":{const{string:e,byteOffset:s}=ae(t,n);n=s;const i=this.#Wn[e];Je.assertWithError(i,`no device found for id ${e}`);const r=i.connectionManager,a=ne(t,n);r.onWebSocketMessage(a)}break;default:Je.error(`uncaught messageType "${s}"`)}}),!0)}#Tn=new be(this.#Nn.bind(this),Ue);#Nn(){this.#bn("ping")}#Ln(){this.#bn("pong")}#In=!1;get#Mn(){return this.#In}set#Mn(e){Je.assertTypeWithError(e,"boolean"),this.#In=e,this.#l({type:"isScanningAvailable",message:{isScanningAvailable:this.isScanningAvailable}}),this.isScanningAvailable&&this.#Rn()}get isScanningAvailable(){return this.#Mn}#xn(){this.#vn(),Je.assertWithError(this.isScanningAvailable,"scanning is not available")}#An(){this.#bn("isScanningAvailable")}#Vs=!1;get#Fs(){return this.#Vs}set#Fs(e){Je.assertTypeWithError(e,"boolean"),this.#Vs=e,this.#l({type:"isScanning",message:{isScanning:this.isScanning}})}get isScanning(){return this.#Fs}#Rn(){this.#bn("isScanning")}#fs(){Je.assertWithError(this.isScanning,"is not scanning")}#ms(){Je.assertWithError(!this.isScanning,"is already scanning")}startScan(){this.#ms(),this.#bn("startScan")}stopScan(){this.#fs(),this.#bn("stopScan")}toggleScan(){this.#xn(),this.isScanning?this.stopScan():this.startScan()}#bs={};get discoveredDevices(){return this.#bs}#us(e){Je.log({discoveredDevice:e}),this.#bs[e.id]=e,this.#l({type:"discoveredDevice",message:{discoveredDevice:e}})}#On(){this.#mn(je)}#Zs(e){Je.log({expiredDeviceId:e});const t=this.#bs[e];t?(Je.log({expiredDiscoveredDevice:t}),delete this.#bs[e],this.#l({type:"expiredDiscoveredDevice",message:{discoveredDevice:t}})):Je.warn(`no discoveredDevice found with id "${e}"`)}connectToDevice(e){return this.#$n(e)}#$n(e){this.#vn(),Je.assertTypeWithError(e,"string");const t=this.#Un(e);return t.connect(),t}#Pn(e){this.#mn(this.#Vn(e))}#Vn(e){return Fe({type:"connectToDevice",data:e})}#Xs(e){const t=new fe,s=new Ge;return s.id=e,s.sendWebSocketMessage=this.#Fn.bind(this,e),s.sendWebSocketConnectMessage=this.#Pn.bind(this,e),s.sendWebSocketDisconnectMessage=this.#_n.bind(this,e),t.connectionManager=s,t}#Un(e){let t=this.#Wn[e];return t||(t=this.#Xs(e),this.#Wn[e]=t),t}#kn(e){Je.log({deviceIds:e}),e.forEach((e=>{this.#Un(e).connectionManager.isConnected=!0}))}disconnectFromDevice(e){this.#Bn(e)}#Bn(e){this.#vn(),Je.assertTypeWithError(e,"string");const t=this.devices[e];return Je.assertWithError(t,`no device found with id ${e}`),t.disconnect(),t}#_n(e){this.#mn(this.#zn(e))}#zn(e){return Fe({type:"disconnectFromDevice",data:e})}#Fn(e,...t){this.#mn(this.#qn(e,...t))}#qn(e,...t){return Fe({type:"deviceMessage",data:[e,Be(...t)]})}#Wn={};get devices(){return this.#Wn}}const Ze=h("BaseServer",{log:!0});class Ke{#ie(){Ze.assertWithError(this.constructor!=Ke,`${this.constructor.name} must be subclassed`)}static#c=["clientConnected","clientDisconnected"];static get EventTypes(){return this.#c}get eventTypes(){return Ke.#c}#ot=new u(this,this.eventTypes);addEventListener(e,t,s){this.#ot.addEventListener(e,t,s)}dispatchEvent(e){this.#ot.dispatchEvent(e)}removeEventListener(e,t){return this.#ot.removeEventListener(e,t)}constructor(){this.#ie(),Ze.assertWithError(We,"no scanner defined"),v(We,this.#jn),v(fe,this.#Hn),v(this,this.#Gn)}get numberOfClients(){return 0}static#Jn=!0;static get ClearSensorConfigurationsWhenNoClients(){return this.#Jn}static set ClearSensorConfigurationsWhenNoClients(e){Ze.assertTypeWithError(e,"boolean"),this.#Jn=e}#Qn=Ke.#Jn;get clearSensorConfigurationsWhenNoClients(){return this.#Qn}set clearSensorConfigurationsWhenNoClients(e){Ze.assertTypeWithError(e,"boolean"),this.#Qn=e}#Gn={clientConnected:this.#Zn.bind(this),clientDisconnected:this.#Kn.bind(this)};#Zn(e){e.message.client,Ze.log("onClientConnected")}#Kn(e){e.message.client,Ze.log("onClientDisconnected"),0==this.numberOfClients&&this.clearSensorConfigurationsWhenNoClients&&fe.ConnectedDevices.forEach((e=>e.clearSensorConfiguration()))}broadcastMessage(e){Ze.log("broadcasting",e)}#jn={isAvailable:this.#Xn.bind(this),isScanning:this.#Yn.bind(this),discoveredDevice:this.#ei.bind(this),expiredDiscoveredDevice:this.#Zs.bind(this)};#Xn(e){this.broadcastMessage(this.#ti)}get#ti(){return Fe({type:"isScanningAvailable",data:We.isAvailable})}#Yn(e){this.broadcastMessage(this.#si)}get#si(){return Fe({type:"isScanning",data:We.isScanning})}#ei(e){const t=e.message.discoveredDevice;console.log(t),this.broadcastMessage(this.#ni(t))}#ni(e){return Fe({type:"discoveredDevice",data:e})}#Zs(e){const t=e.message.discoveredDevice;console.log("expired",t),this.broadcastMessage(this.#ii(t))}#ii(e){return Fe({type:"expiredDiscoveredDevice",data:e.id})}get#ri(){return Fe(...We.discoveredDevicesArray.map((e=>({type:"discoveredDevice",data:e}))))}get#ai(){return Fe({type:"connectedDevices",data:JSON.stringify(fe.ConnectedDevices.map((e=>e.id)))})}#oi={connectionMessage:this.#ci.bind(this)};#qn(e,t,s){return{type:t,data:s||e.latestConnectionMessage.get(t)}}#ci(e){const t=e.target;if(Ze.log("onDeviceConnectionMessage",e.message),!t.isConnected)return;const s=e.message.messageType,n=e.message.dataView;this.broadcastMessage(this.#li(t,this.#qn(t,s,n)))}#Hn={deviceConnected:this.#hi.bind(this),deviceDisconnected:this.#gi.bind(this),deviceIsConnected:this.#on.bind(this)};#hi(e){const t=e.message.device;Ze.log("onDeviceConnected",t.id),v(t,this.#oi)}#gi(e){const t=e.message.device;Ze.log("onDeviceDisconnected",t.id),p(t,this.#oi)}#on(e){const t=e.message.device;Ze.log("onDeviceIsConnected",t.id),this.broadcastMessage(this.#di(t))}#di(e){return this.#li(e,{type:"isConnected",data:e.isConnected})}#li(e,...t){return Fe({type:"deviceMessage",data:[e.id,_e(...t)]})}parseClientMessage(e){let t=[];if(oe(e,Ve,((e,s)=>{const n=e;switch(n){case"ping":t.push(qe);break;case"pong":break;case"isScanningAvailable":t.push(this.#ti);break;case"isScanning":t.push(this.#si);break;case"startScan":We.startScan();break;case"stopScan":We.stopScan();break;case"discoveredDevices":t.push(this.#ri);break;case"connectToDevice":{const{string:e}=ae(s);We.connectToDevice(e)}break;case"disconnectFromDevice":{const{string:e}=ae(s),t=fe.ConnectedDevices.find((t=>t.id==e));if(!t){Ze.error(`no device found with id ${e}`);break}t.disconnect()}break;case"connectedDevices":t.push(this.#ai);break;case"deviceMessage":{const{string:e,byteOffset:n}=ae(s),i=fe.ConnectedDevices.find((t=>t.id==e));if(!i){Ze.error(`no device found with id ${e}`);break}const r=new DataView(s.buffer,s.byteOffset+n);t.push(this.parseClientDeviceMessage(i,r))}break;default:Ze.error(`uncaught messageType "${n}"`)}}),!0),t=t.filter(Boolean),t.length>0)return ee(t)}parseClientDeviceMessage(e,t){Ze.log("onDeviceMessage",e.id,t);let s=[];if(oe(t,E.MessageTypes,((t,n)=>{const i=t;switch(i){case"manufacturerName":case"modelNumber":case"softwareRevision":case"hardwareRevision":case"firmwareRevision":case"pnpId":case"batteryLevel":case"getName":case"getType":case"getSensorConfiguration":case"pressurePositions":case"sensorScalars":case"getCurrentTime":s.push(this.#qn(e,i));break;case"setName":case"setType":case"setSensorConfiguration":case"triggerVibration":e.connectionManager.sendMessage(i,n);break;default:Ze.error(`uncaught messageType "${i}"`)}}),!0),s.length>0)return this.#li(e,...s)}}const Xe=h("WebSocketServer",{log:!0});t&&require("ws");var Ye={setAllConsoleLevelFlags:function(e){l.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){l.setLevelFlagsForType(e,t)},Device:fe,DevicePair:Oe,WebSocketClient:Qe,WebSocketServer:class extends Ke{get numberOfClients(){return this.#ui?.clients.size||0}#ui;get server(){return this.#ui}set server(e){this.#ui!=e?(Xe.log("assigning server..."),this.#ui&&(Xe.log("clearing existing server..."),p(this.#ui,this.#Gn)),v(e,this.#Gn),this.#ui=e,Xe.log("assigned server")):Xe.log("redundant WebSocket assignment")}#Gn={close:this.#vi.bind(this),connection:this.#pi.bind(this),error:this.#fi.bind(this),headers:this.#mi.bind(this),listening:this.#bi.bind(this)};#vi(){Xe.log("server.close")}#pi(e){Xe.log("server.connection"),e.isAlive=!0,e.pingClientTimer=new be((()=>this.#Si(e)),Ue),e.pingClientTimer.start(),v(e,this.#yi),this.dispatchEvent({type:"clientConnected",message:{client:e}})}#fi(e){Xe.error(e)}#mi(){}#bi(){Xe.log("server.listening")}#yi={open:this.#Di.bind(this),message:this.#Ci.bind(this),close:this.#Ti.bind(this),error:this.#Ei.bind(this)};#Di(e){Xe.log("client.open")}#Ci(e){Xe.log("client.message");const t=e.target;t.isAlive=!0,t.pingClientTimer.restart();const s=new DataView(te(e.data));this.#wi(t,s)}#Ti(e){Xe.log("client.close");const t=e.target;t.pingClientTimer.stop(),p(t,this.#yi),this.dispatchEvent({type:"clientDisconnected",message:{client:t}})}#Ei(e){Xe.log("client.error")}#wi(e,t){const s=this.parseClientMessage(t);s&&e.send(s)}broadcastMessage(e){super.broadcastMessage(e),this.server.clients.forEach((t=>{t.send(e)}))}#Si(e){e.isAlive?(e.isAlive=!1,e.send(ze)):e.terminate()}},Scanner:We};return Ye}));
